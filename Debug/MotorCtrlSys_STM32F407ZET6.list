
MotorCtrlSys_STM32F407ZET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012464  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e1c  080125f8  080125f8  000225f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013414  08013414  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08013414  08013414  00023414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801341c  0801341c  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801341c  0801341c  0002341c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013420  08013420  00023420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08013424  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e8  2**0
                  CONTENTS
 10 .bss          00005524  200001e8  200001e8  000301e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000570c  2000570c  000301e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029813  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a83  00000000  00000000  00059a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fa8  00000000  00000000  0005f4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d58  00000000  00000000  00061458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002baf1  00000000  00000000  000631b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b2f8  00000000  00000000  0008eca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eec7c  00000000  00000000  000b9f99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a8c15  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000933c  00000000  00000000  001a8c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080125dc 	.word	0x080125dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	080125dc 	.word	0x080125dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f92:	463b      	mov	r3, r7
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f9e:	4b21      	ldr	r3, [pc, #132]	; (8001024 <MX_ADC1_Init+0x98>)
 8000fa0:	4a21      	ldr	r2, [pc, #132]	; (8001028 <MX_ADC1_Init+0x9c>)
 8000fa2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <MX_ADC1_Init+0x98>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000faa:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <MX_ADC1_Init+0x98>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fb0:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <MX_ADC1_Init+0x98>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fb6:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <MX_ADC1_Init+0x98>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fbc:	4b19      	ldr	r3, [pc, #100]	; (8001024 <MX_ADC1_Init+0x98>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <MX_ADC1_Init+0x98>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <MX_ADC1_Init+0x98>)
 8000fcc:	4a17      	ldr	r2, [pc, #92]	; (800102c <MX_ADC1_Init+0xa0>)
 8000fce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <MX_ADC1_Init+0x98>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <MX_ADC1_Init+0x98>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <MX_ADC1_Init+0x98>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <MX_ADC1_Init+0x98>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fea:	480e      	ldr	r0, [pc, #56]	; (8001024 <MX_ADC1_Init+0x98>)
 8000fec:	f005 ff80 	bl	8006ef0 <HAL_ADC_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ff6:	f001 fcf7 	bl	80029e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000ffa:	230a      	movs	r3, #10
 8000ffc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ffe:	2301      	movs	r3, #1
 8001000:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001002:	2301      	movs	r3, #1
 8001004:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001006:	463b      	mov	r3, r7
 8001008:	4619      	mov	r1, r3
 800100a:	4806      	ldr	r0, [pc, #24]	; (8001024 <MX_ADC1_Init+0x98>)
 800100c:	f005 ffb4 	bl	8006f78 <HAL_ADC_ConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001016:	f001 fce7 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000204 	.word	0x20000204
 8001028:	40012000 	.word	0x40012000
 800102c:	0f000001 	.word	0x0f000001

08001030 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001036:	463b      	mov	r3, r7
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001042:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <MX_ADC2_Init+0x98>)
 8001044:	4a21      	ldr	r2, [pc, #132]	; (80010cc <MX_ADC2_Init+0x9c>)
 8001046:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001048:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <MX_ADC2_Init+0x98>)
 800104a:	2200      	movs	r2, #0
 800104c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800104e:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <MX_ADC2_Init+0x98>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001054:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <MX_ADC2_Init+0x98>)
 8001056:	2200      	movs	r2, #0
 8001058:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800105a:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <MX_ADC2_Init+0x98>)
 800105c:	2200      	movs	r2, #0
 800105e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001060:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <MX_ADC2_Init+0x98>)
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <MX_ADC2_Init+0x98>)
 800106a:	2200      	movs	r2, #0
 800106c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <MX_ADC2_Init+0x98>)
 8001070:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <MX_ADC2_Init+0xa0>)
 8001072:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_ADC2_Init+0x98>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <MX_ADC2_Init+0x98>)
 800107c:	2201      	movs	r2, #1
 800107e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_ADC2_Init+0x98>)
 8001082:	2200      	movs	r2, #0
 8001084:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_ADC2_Init+0x98>)
 800108a:	2201      	movs	r2, #1
 800108c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800108e:	480e      	ldr	r0, [pc, #56]	; (80010c8 <MX_ADC2_Init+0x98>)
 8001090:	f005 ff2e 	bl	8006ef0 <HAL_ADC_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800109a:	f001 fca5 	bl	80029e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800109e:	230c      	movs	r3, #12
 80010a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010a2:	2301      	movs	r3, #1
 80010a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010aa:	463b      	mov	r3, r7
 80010ac:	4619      	mov	r1, r3
 80010ae:	4806      	ldr	r0, [pc, #24]	; (80010c8 <MX_ADC2_Init+0x98>)
 80010b0:	f005 ff62 	bl	8006f78 <HAL_ADC_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80010ba:	f001 fc95 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2000024c 	.word	0x2000024c
 80010cc:	40012100 	.word	0x40012100
 80010d0:	0f000001 	.word	0x0f000001

080010d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08c      	sub	sp, #48	; 0x30
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a2e      	ldr	r2, [pc, #184]	; (80011ac <HAL_ADC_MspInit+0xd8>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d128      	bne.n	8001148 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
 80010fa:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <HAL_ADC_MspInit+0xdc>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	4a2c      	ldr	r2, [pc, #176]	; (80011b0 <HAL_ADC_MspInit+0xdc>)
 8001100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001104:	6453      	str	r3, [r2, #68]	; 0x44
 8001106:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <HAL_ADC_MspInit+0xdc>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110e:	61bb      	str	r3, [r7, #24]
 8001110:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	4b26      	ldr	r3, [pc, #152]	; (80011b0 <HAL_ADC_MspInit+0xdc>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a25      	ldr	r2, [pc, #148]	; (80011b0 <HAL_ADC_MspInit+0xdc>)
 800111c:	f043 0304 	orr.w	r3, r3, #4
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <HAL_ADC_MspInit+0xdc>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0304 	and.w	r3, r3, #4
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = VM6_SensA_ADC_Pin|VM6_SensB_ADC_Pin;
 800112e:	2303      	movs	r3, #3
 8001130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001132:	2303      	movs	r3, #3
 8001134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	4619      	mov	r1, r3
 8001140:	481c      	ldr	r0, [pc, #112]	; (80011b4 <HAL_ADC_MspInit+0xe0>)
 8001142:	f006 ff7f 	bl	8008044 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001146:	e02c      	b.n	80011a2 <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a1a      	ldr	r2, [pc, #104]	; (80011b8 <HAL_ADC_MspInit+0xe4>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d127      	bne.n	80011a2 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <HAL_ADC_MspInit+0xdc>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a15      	ldr	r2, [pc, #84]	; (80011b0 <HAL_ADC_MspInit+0xdc>)
 800115c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <HAL_ADC_MspInit+0xdc>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <HAL_ADC_MspInit+0xdc>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <HAL_ADC_MspInit+0xdc>)
 8001178:	f043 0304 	orr.w	r3, r3, #4
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <HAL_ADC_MspInit+0xdc>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0304 	and.w	r3, r3, #4
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VM8_SensA_ADC_Pin|VM8_SensB_ADC_Pin;
 800118a:	230c      	movs	r3, #12
 800118c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118e:	2303      	movs	r3, #3
 8001190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <HAL_ADC_MspInit+0xe0>)
 800119e:	f006 ff51 	bl	8008044 <HAL_GPIO_Init>
}
 80011a2:	bf00      	nop
 80011a4:	3730      	adds	r7, #48	; 0x30
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40012000 	.word	0x40012000
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40012100 	.word	0x40012100

080011bc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80011c0:	4b16      	ldr	r3, [pc, #88]	; (800121c <MX_CAN1_Init+0x60>)
 80011c2:	4a17      	ldr	r2, [pc, #92]	; (8001220 <MX_CAN1_Init+0x64>)
 80011c4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80011c6:	4b15      	ldr	r3, [pc, #84]	; (800121c <MX_CAN1_Init+0x60>)
 80011c8:	2210      	movs	r2, #16
 80011ca:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80011cc:	4b13      	ldr	r3, [pc, #76]	; (800121c <MX_CAN1_Init+0x60>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011d2:	4b12      	ldr	r3, [pc, #72]	; (800121c <MX_CAN1_Init+0x60>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80011d8:	4b10      	ldr	r3, [pc, #64]	; (800121c <MX_CAN1_Init+0x60>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_CAN1_Init+0x60>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80011e4:	4b0d      	ldr	r3, [pc, #52]	; (800121c <MX_CAN1_Init+0x60>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_CAN1_Init+0x60>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <MX_CAN1_Init+0x60>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <MX_CAN1_Init+0x60>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <MX_CAN1_Init+0x60>)
 80011fe:	2200      	movs	r2, #0
 8001200:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <MX_CAN1_Init+0x60>)
 8001204:	2200      	movs	r2, #0
 8001206:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001208:	4804      	ldr	r0, [pc, #16]	; (800121c <MX_CAN1_Init+0x60>)
 800120a:	f006 f8d3 	bl	80073b4 <HAL_CAN_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001214:	f001 fbe8 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000294 	.word	0x20000294
 8001220:	40006400 	.word	0x40006400

08001224 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a19      	ldr	r2, [pc, #100]	; (80012a8 <HAL_CAN_MspInit+0x84>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d12c      	bne.n	80012a0 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	4b18      	ldr	r3, [pc, #96]	; (80012ac <HAL_CAN_MspInit+0x88>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	4a17      	ldr	r2, [pc, #92]	; (80012ac <HAL_CAN_MspInit+0x88>)
 8001250:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001254:	6413      	str	r3, [r2, #64]	; 0x40
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <HAL_CAN_MspInit+0x88>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <HAL_CAN_MspInit+0x88>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a10      	ldr	r2, [pc, #64]	; (80012ac <HAL_CAN_MspInit+0x88>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <HAL_CAN_MspInit+0x88>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800127e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128c:	2303      	movs	r3, #3
 800128e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001290:	2309      	movs	r3, #9
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <HAL_CAN_MspInit+0x8c>)
 800129c:	f006 fed2 	bl	8008044 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	; 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40006400 	.word	0x40006400
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020000 	.word	0x40020000

080012b4 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012ba:	463b      	mov	r3, r7
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80012c2:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <MX_DAC_Init+0x4c>)
 80012c4:	4a0f      	ldr	r2, [pc, #60]	; (8001304 <MX_DAC_Init+0x50>)
 80012c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80012c8:	480d      	ldr	r0, [pc, #52]	; (8001300 <MX_DAC_Init+0x4c>)
 80012ca:	f006 fa51 	bl	8007770 <HAL_DAC_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80012d4:	f001 fb88 	bl	80029e8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80012d8:	2300      	movs	r3, #0
 80012da:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80012e0:	463b      	mov	r3, r7
 80012e2:	2200      	movs	r2, #0
 80012e4:	4619      	mov	r1, r3
 80012e6:	4806      	ldr	r0, [pc, #24]	; (8001300 <MX_DAC_Init+0x4c>)
 80012e8:	f006 fac8 	bl	800787c <HAL_DAC_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80012f2:	f001 fb79 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200002bc 	.word	0x200002bc
 8001304:	40007400 	.word	0x40007400

08001308 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a1b      	ldr	r2, [pc, #108]	; (8001394 <HAL_DAC_MspInit+0x8c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d12f      	bne.n	800138a <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <HAL_DAC_MspInit+0x90>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	4a19      	ldr	r2, [pc, #100]	; (8001398 <HAL_DAC_MspInit+0x90>)
 8001334:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001338:	6413      	str	r3, [r2, #64]	; 0x40
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <HAL_DAC_MspInit+0x90>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b13      	ldr	r3, [pc, #76]	; (8001398 <HAL_DAC_MspInit+0x90>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a12      	ldr	r2, [pc, #72]	; (8001398 <HAL_DAC_MspInit+0x90>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <HAL_DAC_MspInit+0x90>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001362:	2310      	movs	r3, #16
 8001364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001366:	2303      	movs	r3, #3
 8001368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	4809      	ldr	r0, [pc, #36]	; (800139c <HAL_DAC_MspInit+0x94>)
 8001376:	f006 fe65 	bl	8008044 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 7, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2107      	movs	r1, #7
 800137e:	2036      	movs	r0, #54	; 0x36
 8001380:	f006 f9cc 	bl	800771c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001384:	2036      	movs	r0, #54	; 0x36
 8001386:	f006 f9e5 	bl	8007754 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	; 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40007400 	.word	0x40007400
 8001398:	40023800 	.word	0x40023800
 800139c:	40020000 	.word	0x40020000

080013a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <MX_DMA_Init+0x3c>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a0b      	ldr	r2, [pc, #44]	; (80013dc <MX_DMA_Init+0x3c>)
 80013b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <MX_DMA_Init+0x3c>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 7, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2107      	movs	r1, #7
 80013c6:	200d      	movs	r0, #13
 80013c8:	f006 f9a8 	bl	800771c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80013cc:	200d      	movs	r0, #13
 80013ce:	f006 f9c1 	bl	8007754 <HAL_NVIC_EnableIRQ>

}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40023800 	.word	0x40023800

080013e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80013e4:	4a10      	ldr	r2, [pc, #64]	; (8001428 <MX_FREERTOS_Init+0x48>)
 80013e6:	2100      	movs	r1, #0
 80013e8:	4810      	ldr	r0, [pc, #64]	; (800142c <MX_FREERTOS_Init+0x4c>)
 80013ea:	f00b fd89 	bl	800cf00 <osThreadNew>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4a0f      	ldr	r2, [pc, #60]	; (8001430 <MX_FREERTOS_Init+0x50>)
 80013f2:	6013      	str	r3, [r2, #0]

  /* creation of messageTask */
  messageTaskHandle = osThreadNew(StartmessageTask, NULL, &messageTask_attributes);
 80013f4:	4a0f      	ldr	r2, [pc, #60]	; (8001434 <MX_FREERTOS_Init+0x54>)
 80013f6:	2100      	movs	r1, #0
 80013f8:	480f      	ldr	r0, [pc, #60]	; (8001438 <MX_FREERTOS_Init+0x58>)
 80013fa:	f00b fd81 	bl	800cf00 <osThreadNew>
 80013fe:	4603      	mov	r3, r0
 8001400:	4a0e      	ldr	r2, [pc, #56]	; (800143c <MX_FREERTOS_Init+0x5c>)
 8001402:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8001404:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <MX_FREERTOS_Init+0x60>)
 8001406:	2100      	movs	r1, #0
 8001408:	480e      	ldr	r0, [pc, #56]	; (8001444 <MX_FREERTOS_Init+0x64>)
 800140a:	f00b fd79 	bl	800cf00 <osThreadNew>
 800140e:	4603      	mov	r3, r0
 8001410:	4a0d      	ldr	r2, [pc, #52]	; (8001448 <MX_FREERTOS_Init+0x68>)
 8001412:	6013      	str	r3, [r2, #0]

  /* creation of DetectionTask */
  DetectionTaskHandle = osThreadNew(StartDetectionTask, NULL, &DetectionTask_attributes);
 8001414:	4a0d      	ldr	r2, [pc, #52]	; (800144c <MX_FREERTOS_Init+0x6c>)
 8001416:	2100      	movs	r1, #0
 8001418:	480d      	ldr	r0, [pc, #52]	; (8001450 <MX_FREERTOS_Init+0x70>)
 800141a:	f00b fd71 	bl	800cf00 <osThreadNew>
 800141e:	4603      	mov	r3, r0
 8001420:	4a0c      	ldr	r2, [pc, #48]	; (8001454 <MX_FREERTOS_Init+0x74>)
 8001422:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	08012f88 	.word	0x08012f88
 800142c:	08001459 	.word	0x08001459
 8001430:	200002d0 	.word	0x200002d0
 8001434:	08012fac 	.word	0x08012fac
 8001438:	08006609 	.word	0x08006609
 800143c:	200002d4 	.word	0x200002d4
 8001440:	08012fd0 	.word	0x08012fd0
 8001444:	08006755 	.word	0x08006755
 8001448:	200002d8 	.word	0x200002d8
 800144c:	08012ff4 	.word	0x08012ff4
 8001450:	080060a9 	.word	0x080060a9
 8001454:	200002dc 	.word	0x200002dc

08001458 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  LED_Heart_Toggle();
 8001460:	2120      	movs	r1, #32
 8001462:	4804      	ldr	r0, [pc, #16]	; (8001474 <StartDefaultTask+0x1c>)
 8001464:	f006 ffbb 	bl	80083de <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8001468:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800146c:	f00b fdda 	bl	800d024 <osDelay>
	  LED_Heart_Toggle();
 8001470:	e7f6      	b.n	8001460 <StartDefaultTask+0x8>
 8001472:	bf00      	nop
 8001474:	40021800 	.word	0x40021800

08001478 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08e      	sub	sp, #56	; 0x38
 800147c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	623b      	str	r3, [r7, #32]
 8001492:	4bb5      	ldr	r3, [pc, #724]	; (8001768 <MX_GPIO_Init+0x2f0>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4ab4      	ldr	r2, [pc, #720]	; (8001768 <MX_GPIO_Init+0x2f0>)
 8001498:	f043 0310 	orr.w	r3, r3, #16
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4bb2      	ldr	r3, [pc, #712]	; (8001768 <MX_GPIO_Init+0x2f0>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0310 	and.w	r3, r3, #16
 80014a6:	623b      	str	r3, [r7, #32]
 80014a8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
 80014ae:	4bae      	ldr	r3, [pc, #696]	; (8001768 <MX_GPIO_Init+0x2f0>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4aad      	ldr	r2, [pc, #692]	; (8001768 <MX_GPIO_Init+0x2f0>)
 80014b4:	f043 0304 	orr.w	r3, r3, #4
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4bab      	ldr	r3, [pc, #684]	; (8001768 <MX_GPIO_Init+0x2f0>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	61fb      	str	r3, [r7, #28]
 80014c4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]
 80014ca:	4ba7      	ldr	r3, [pc, #668]	; (8001768 <MX_GPIO_Init+0x2f0>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4aa6      	ldr	r2, [pc, #664]	; (8001768 <MX_GPIO_Init+0x2f0>)
 80014d0:	f043 0320 	orr.w	r3, r3, #32
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4ba4      	ldr	r3, [pc, #656]	; (8001768 <MX_GPIO_Init+0x2f0>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0320 	and.w	r3, r3, #32
 80014de:	61bb      	str	r3, [r7, #24]
 80014e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	4ba0      	ldr	r3, [pc, #640]	; (8001768 <MX_GPIO_Init+0x2f0>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a9f      	ldr	r2, [pc, #636]	; (8001768 <MX_GPIO_Init+0x2f0>)
 80014ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b9d      	ldr	r3, [pc, #628]	; (8001768 <MX_GPIO_Init+0x2f0>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	4b99      	ldr	r3, [pc, #612]	; (8001768 <MX_GPIO_Init+0x2f0>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a98      	ldr	r2, [pc, #608]	; (8001768 <MX_GPIO_Init+0x2f0>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b96      	ldr	r3, [pc, #600]	; (8001768 <MX_GPIO_Init+0x2f0>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b92      	ldr	r3, [pc, #584]	; (8001768 <MX_GPIO_Init+0x2f0>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a91      	ldr	r2, [pc, #580]	; (8001768 <MX_GPIO_Init+0x2f0>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b8f      	ldr	r3, [pc, #572]	; (8001768 <MX_GPIO_Init+0x2f0>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	4b8b      	ldr	r3, [pc, #556]	; (8001768 <MX_GPIO_Init+0x2f0>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a8a      	ldr	r2, [pc, #552]	; (8001768 <MX_GPIO_Init+0x2f0>)
 8001540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b88      	ldr	r3, [pc, #544]	; (8001768 <MX_GPIO_Init+0x2f0>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	4b84      	ldr	r3, [pc, #528]	; (8001768 <MX_GPIO_Init+0x2f0>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a83      	ldr	r2, [pc, #524]	; (8001768 <MX_GPIO_Init+0x2f0>)
 800155c:	f043 0308 	orr.w	r3, r3, #8
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b81      	ldr	r3, [pc, #516]	; (8001768 <MX_GPIO_Init+0x2f0>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VM4_Step_Pin|VM4_Dir_Pin|VM6_IN1_Pin|VM6_IN2_Pin
 800156e:	2200      	movs	r2, #0
 8001570:	f248 31f6 	movw	r1, #33782	; 0x83f6
 8001574:	487d      	ldr	r0, [pc, #500]	; (800176c <MX_GPIO_Init+0x2f4>)
 8001576:	f006 ff19 	bl	80083ac <HAL_GPIO_WritePin>
                          |VM6_EnA_Pin|VM5_EnB_Pin|VM5_EnA_Pin|BEEP_Pin
                          |VM3_Dir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VM4_En_Pin|VM3_En_Pin, GPIO_PIN_SET);
 800157a:	2201      	movs	r2, #1
 800157c:	2109      	movs	r1, #9
 800157e:	487b      	ldr	r0, [pc, #492]	; (800176c <MX_GPIO_Init+0x2f4>)
 8001580:	f006 ff14 	bl	80083ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, FDCshutdown_Pin|OUT6_Pin|OUT5_Pin|OUT4_Pin
 8001584:	2200      	movs	r2, #0
 8001586:	f24e 71e8 	movw	r1, #59368	; 0xe7e8
 800158a:	4879      	ldr	r0, [pc, #484]	; (8001770 <MX_GPIO_Init+0x2f8>)
 800158c:	f006 ff0e 	bl	80083ac <HAL_GPIO_WritePin>
                          |OUT3_Pin|OUT2_Pin|OUT1_Pin|VM8_EnB_Pin
                          |VM8_EnA_Pin|VM7_EnB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VM8_IN3_Pin|VM8_IN4_Pin, GPIO_PIN_RESET);
 8001590:	2200      	movs	r2, #0
 8001592:	210c      	movs	r1, #12
 8001594:	4877      	ldr	r0, [pc, #476]	; (8001774 <MX_GPIO_Init+0x2fc>)
 8001596:	f006 ff09 	bl	80083ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VM7_IN3_Pin|VM7_IN4_Pin|VM7_IN1_Pin|VM7_IN2_Pin
 800159a:	2200      	movs	r2, #0
 800159c:	f64f 716b 	movw	r1, #65387	; 0xff6b
 80015a0:	4875      	ldr	r0, [pc, #468]	; (8001778 <MX_GPIO_Init+0x300>)
 80015a2:	f006 ff03 	bl	80083ac <HAL_GPIO_WritePin>
                          |VM5_IN1_Pin|VM5_IN2_Pin|VM5_IN3_Pin|VM5_IN4_Pin
                          |VM1_Step_Pin|VM1_Dir_Pin|VM2_Step_Pin|VM2_Dir_Pin
                          |VM3_Step_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, VM7_EnA_Pin|VM6_EnB_Pin|LED_Heart_Pin, GPIO_PIN_RESET);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2123      	movs	r1, #35	; 0x23
 80015aa:	4874      	ldr	r0, [pc, #464]	; (800177c <MX_GPIO_Init+0x304>)
 80015ac:	f006 fefe 	bl	80083ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, VM8_IN1_Pin|VM8_IN2_Pin, GPIO_PIN_RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80015b6:	4872      	ldr	r0, [pc, #456]	; (8001780 <MX_GPIO_Init+0x308>)
 80015b8:	f006 fef8 	bl	80083ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED2_Pin|LED1_Pin|LED0_Pin, GPIO_PIN_SET);
 80015bc:	2201      	movs	r2, #1
 80015be:	211c      	movs	r1, #28
 80015c0:	486e      	ldr	r0, [pc, #440]	; (800177c <MX_GPIO_Init+0x304>)
 80015c2:	f006 fef3 	bl	80083ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VM6_IN3_Pin|VM6_IN4_Pin, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80015cc:	486d      	ldr	r0, [pc, #436]	; (8001784 <MX_GPIO_Init+0x30c>)
 80015ce:	f006 feed 	bl	80083ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VM1_En_Pin|VM2_En_Pin, GPIO_PIN_SET);
 80015d2:	2201      	movs	r2, #1
 80015d4:	2190      	movs	r1, #144	; 0x90
 80015d6:	4868      	ldr	r0, [pc, #416]	; (8001778 <MX_GPIO_Init+0x300>)
 80015d8:	f006 fee8 	bl	80083ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VM4_Step_Pin;
 80015dc:	2304      	movs	r3, #4
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e0:	2301      	movs	r3, #1
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e8:	2303      	movs	r3, #3
 80015ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(VM4_Step_GPIO_Port, &GPIO_InitStruct);
 80015ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f0:	4619      	mov	r1, r3
 80015f2:	485e      	ldr	r0, [pc, #376]	; (800176c <MX_GPIO_Init+0x2f4>)
 80015f4:	f006 fd26 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = VM4_En_Pin|VM4_Dir_Pin|BEEP_Pin|VM3_En_Pin
 80015f8:	f248 031b 	movw	r3, #32795	; 0x801b
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
                          |VM3_Dir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fe:	2301      	movs	r3, #1
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800160a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160e:	4619      	mov	r1, r3
 8001610:	4856      	ldr	r0, [pc, #344]	; (800176c <MX_GPIO_Init+0x2f4>)
 8001612:	f006 fd17 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = VM6_IN1_Pin|VM6_IN2_Pin;
 8001616:	2360      	movs	r3, #96	; 0x60
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161a:	2301      	movs	r3, #1
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001622:	2302      	movs	r3, #2
 8001624:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162a:	4619      	mov	r1, r3
 800162c:	484f      	ldr	r0, [pc, #316]	; (800176c <MX_GPIO_Init+0x2f4>)
 800162e:	f006 fd09 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FDCINTB_Pin;
 8001632:	2304      	movs	r3, #4
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001636:	2300      	movs	r3, #0
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(FDCINTB_GPIO_Port, &GPIO_InitStruct);
 800163e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001642:	4619      	mov	r1, r3
 8001644:	484a      	ldr	r0, [pc, #296]	; (8001770 <MX_GPIO_Init+0x2f8>)
 8001646:	f006 fcfd 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FDCshutdown_Pin;
 800164a:	2308      	movs	r3, #8
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164e:	2301      	movs	r3, #1
 8001650:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FDCshutdown_GPIO_Port, &GPIO_InitStruct);
 800165a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165e:	4619      	mov	r1, r3
 8001660:	4843      	ldr	r0, [pc, #268]	; (8001770 <MX_GPIO_Init+0x2f8>)
 8001662:	f006 fcef 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = OUT6_Pin|OUT5_Pin|OUT4_Pin|OUT3_Pin
 8001666:	f24e 73e0 	movw	r3, #59360	; 0xe7e0
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT2_Pin|OUT1_Pin|VM8_EnB_Pin|VM8_EnA_Pin
                          |VM7_EnB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2301      	movs	r3, #1
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001670:	2302      	movs	r3, #2
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167c:	4619      	mov	r1, r3
 800167e:	483c      	ldr	r0, [pc, #240]	; (8001770 <MX_GPIO_Init+0x2f8>)
 8001680:	f006 fce0 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Liquid_Detect_Pin;
 8001684:	2301      	movs	r3, #1
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001688:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800168e:	2301      	movs	r3, #1
 8001690:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Liquid_Detect_GPIO_Port, &GPIO_InitStruct);
 8001692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001696:	4619      	mov	r1, r3
 8001698:	4836      	ldr	r0, [pc, #216]	; (8001774 <MX_GPIO_Init+0x2fc>)
 800169a:	f006 fcd3 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VM8_IN3_Pin|VM8_IN4_Pin;
 800169e:	230c      	movs	r3, #12
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a2:	2301      	movs	r3, #1
 80016a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016aa:	2302      	movs	r3, #2
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b2:	4619      	mov	r1, r3
 80016b4:	482f      	ldr	r0, [pc, #188]	; (8001774 <MX_GPIO_Init+0x2fc>)
 80016b6:	f006 fcc5 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Encoder3_Z_Pin|Encoder4_Z_Pin;
 80016ba:	2330      	movs	r3, #48	; 0x30
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016be:	2300      	movs	r3, #0
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ca:	4619      	mov	r1, r3
 80016cc:	482d      	ldr	r0, [pc, #180]	; (8001784 <MX_GPIO_Init+0x30c>)
 80016ce:	f006 fcb9 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = VM7_IN3_Pin|VM7_IN4_Pin|VM7_IN1_Pin|VM7_IN2_Pin
 80016d2:	f64f 4303 	movw	r3, #64515	; 0xfc03
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
                          |VM5_IN1_Pin|VM5_IN2_Pin|VM5_IN3_Pin|VM5_IN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d8:	2301      	movs	r3, #1
 80016da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e0:	2302      	movs	r3, #2
 80016e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e8:	4619      	mov	r1, r3
 80016ea:	4823      	ldr	r0, [pc, #140]	; (8001778 <MX_GPIO_Init+0x300>)
 80016ec:	f006 fcaa 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = VM7_EnA_Pin|VM6_EnB_Pin;
 80016f0:	2303      	movs	r3, #3
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f4:	2301      	movs	r3, #1
 80016f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016f8:	2302      	movs	r3, #2
 80016fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fc:	2300      	movs	r3, #0
 80016fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001704:	4619      	mov	r1, r3
 8001706:	481d      	ldr	r0, [pc, #116]	; (800177c <MX_GPIO_Init+0x304>)
 8001708:	f006 fc9c 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VM6_EnA_Pin|VM5_EnB_Pin|VM5_EnA_Pin;
 800170c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001712:	2301      	movs	r3, #1
 8001714:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001716:	2302      	movs	r3, #2
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800171e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001722:	4619      	mov	r1, r3
 8001724:	4811      	ldr	r0, [pc, #68]	; (800176c <MX_GPIO_Init+0x2f4>)
 8001726:	f006 fc8d 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encoder2_Z_Pin;
 800172a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001730:	2300      	movs	r3, #0
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Encoder2_Z_GPIO_Port, &GPIO_InitStruct);
 8001738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173c:	4619      	mov	r1, r3
 800173e:	4810      	ldr	r0, [pc, #64]	; (8001780 <MX_GPIO_Init+0x308>)
 8001740:	f006 fc80 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = VM8_IN1_Pin|VM8_IN2_Pin;
 8001744:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174a:	2301      	movs	r3, #1
 800174c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001752:	2302      	movs	r3, #2
 8001754:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175a:	4619      	mov	r1, r3
 800175c:	4808      	ldr	r0, [pc, #32]	; (8001780 <MX_GPIO_Init+0x308>)
 800175e:	f006 fc71 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|LED0_Pin|LED_Heart_Pin;
 8001762:	233c      	movs	r3, #60	; 0x3c
 8001764:	e010      	b.n	8001788 <MX_GPIO_Init+0x310>
 8001766:	bf00      	nop
 8001768:	40023800 	.word	0x40023800
 800176c:	40021000 	.word	0x40021000
 8001770:	40021400 	.word	0x40021400
 8001774:	40020000 	.word	0x40020000
 8001778:	40020400 	.word	0x40020400
 800177c:	40021800 	.word	0x40021800
 8001780:	40020c00 	.word	0x40020c00
 8001784:	40020800 	.word	0x40020800
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178a:	2301      	movs	r3, #1
 800178c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2300      	movs	r3, #0
 8001794:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179a:	4619      	mov	r1, r3
 800179c:	4848      	ldr	r0, [pc, #288]	; (80018c0 <MX_GPIO_Init+0x448>)
 800179e:	f006 fc51 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin|KEY2_Pin;
 80017a2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ac:	2301      	movs	r3, #1
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b4:	4619      	mov	r1, r3
 80017b6:	4842      	ldr	r0, [pc, #264]	; (80018c0 <MX_GPIO_Init+0x448>)
 80017b8:	f006 fc44 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VM6_IN3_Pin|VM6_IN4_Pin;
 80017bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c2:	2301      	movs	r3, #1
 80017c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ca:	2302      	movs	r3, #2
 80017cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d2:	4619      	mov	r1, r3
 80017d4:	483b      	ldr	r0, [pc, #236]	; (80018c4 <MX_GPIO_Init+0x44c>)
 80017d6:	f006 fc35 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encoder1_Z_Pin;
 80017da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Encoder1_Z_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ec:	4619      	mov	r1, r3
 80017ee:	4836      	ldr	r0, [pc, #216]	; (80018c8 <MX_GPIO_Init+0x450>)
 80017f0:	f006 fc28 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = OPT_IN1_Pin|OPT_IN2_Pin|OPT_IN3_Pin|OPT_IN4_Pin
 80017f4:	23f8      	movs	r3, #248	; 0xf8
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
                          |OPT_IN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80017f8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001806:	4619      	mov	r1, r3
 8001808:	4830      	ldr	r0, [pc, #192]	; (80018cc <MX_GPIO_Init+0x454>)
 800180a:	f006 fc1b 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OPT_IN6_Pin|OPT_IN7_Pin|OPT_IN8_Pin|OPT_IN9_Pin
 800180e:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
                          |OPT_IN10_Pin|OPT_IN11_Pin|OPT_IN12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001814:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001818:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800181e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001822:	4619      	mov	r1, r3
 8001824:	4826      	ldr	r0, [pc, #152]	; (80018c0 <MX_GPIO_Init+0x448>)
 8001826:	f006 fc0d 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = VM1_Step_Pin|VM2_Step_Pin|VM3_Step_Pin;
 800182a:	f44f 7312 	mov.w	r3, #584	; 0x248
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001830:	2301      	movs	r3, #1
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001838:	2303      	movs	r3, #3
 800183a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001840:	4619      	mov	r1, r3
 8001842:	4823      	ldr	r0, [pc, #140]	; (80018d0 <MX_GPIO_Init+0x458>)
 8001844:	f006 fbfe 	bl	8008044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = VM1_En_Pin|VM1_Dir_Pin|VM2_En_Pin|VM2_Dir_Pin;
 8001848:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184e:	2301      	movs	r3, #1
 8001850:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185e:	4619      	mov	r1, r3
 8001860:	481b      	ldr	r0, [pc, #108]	; (80018d0 <MX_GPIO_Init+0x458>)
 8001862:	f006 fbef 	bl	8008044 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2105      	movs	r1, #5
 800186a:	2006      	movs	r0, #6
 800186c:	f005 ff56 	bl	800771c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001870:	2006      	movs	r0, #6
 8001872:	f005 ff6f 	bl	8007754 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2105      	movs	r1, #5
 800187a:	2009      	movs	r0, #9
 800187c:	f005 ff4e 	bl	800771c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001880:	2009      	movs	r0, #9
 8001882:	f005 ff67 	bl	8007754 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2105      	movs	r1, #5
 800188a:	200a      	movs	r0, #10
 800188c:	f005 ff46 	bl	800771c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001890:	200a      	movs	r0, #10
 8001892:	f005 ff5f 	bl	8007754 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	2105      	movs	r1, #5
 800189a:	2017      	movs	r0, #23
 800189c:	f005 ff3e 	bl	800771c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018a0:	2017      	movs	r0, #23
 80018a2:	f005 ff57 	bl	8007754 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2105      	movs	r1, #5
 80018aa:	2028      	movs	r0, #40	; 0x28
 80018ac:	f005 ff36 	bl	800771c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018b0:	2028      	movs	r0, #40	; 0x28
 80018b2:	f005 ff4f 	bl	8007754 <HAL_NVIC_EnableIRQ>

}
 80018b6:	bf00      	nop
 80018b8:	3738      	adds	r7, #56	; 0x38
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40021800 	.word	0x40021800
 80018c4:	40020800 	.word	0x40020800
 80018c8:	40020000 	.word	0x40020000
 80018cc:	40020c00 	.word	0x40020c00
 80018d0:	40020400 	.word	0x40020400

080018d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	80fb      	strh	r3, [r7, #6]
    switch(GPIO_Pin)
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	2b20      	cmp	r3, #32
 80018e2:	dc49      	bgt.n	8001978 <HAL_GPIO_EXTI_Callback+0xa4>
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f340 8085 	ble.w	80019f4 <HAL_GPIO_EXTI_Callback+0x120>
 80018ea:	3b01      	subs	r3, #1
 80018ec:	2b1f      	cmp	r3, #31
 80018ee:	f200 8081 	bhi.w	80019f4 <HAL_GPIO_EXTI_Callback+0x120>
 80018f2:	a201      	add	r2, pc, #4	; (adr r2, 80018f8 <HAL_GPIO_EXTI_Callback+0x24>)
 80018f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f8:	0800197f 	.word	0x0800197f
 80018fc:	080019f5 	.word	0x080019f5
 8001900:	080019f5 	.word	0x080019f5
 8001904:	080019f5 	.word	0x080019f5
 8001908:	080019f5 	.word	0x080019f5
 800190c:	080019f5 	.word	0x080019f5
 8001910:	080019f5 	.word	0x080019f5
 8001914:	08001985 	.word	0x08001985
 8001918:	080019f5 	.word	0x080019f5
 800191c:	080019f5 	.word	0x080019f5
 8001920:	080019f5 	.word	0x080019f5
 8001924:	080019f5 	.word	0x080019f5
 8001928:	080019f5 	.word	0x080019f5
 800192c:	080019f5 	.word	0x080019f5
 8001930:	080019f5 	.word	0x080019f5
 8001934:	080019a5 	.word	0x080019a5
 8001938:	080019f5 	.word	0x080019f5
 800193c:	080019f5 	.word	0x080019f5
 8001940:	080019f5 	.word	0x080019f5
 8001944:	080019f5 	.word	0x080019f5
 8001948:	080019f5 	.word	0x080019f5
 800194c:	080019f5 	.word	0x080019f5
 8001950:	080019f5 	.word	0x080019f5
 8001954:	080019f5 	.word	0x080019f5
 8001958:	080019f5 	.word	0x080019f5
 800195c:	080019f5 	.word	0x080019f5
 8001960:	080019f5 	.word	0x080019f5
 8001964:	080019f5 	.word	0x080019f5
 8001968:	080019f5 	.word	0x080019f5
 800196c:	080019f5 	.word	0x080019f5
 8001970:	080019f5 	.word	0x080019f5
 8001974:	080019bb 	.word	0x080019bb
 8001978:	2b40      	cmp	r3, #64	; 0x40
 800197a:	d029      	beq.n	80019d0 <HAL_GPIO_EXTI_Callback+0xfc>
        		 ;
        	}
            break;
#endif
    }
}
 800197c:	e03a      	b.n	80019f4 <HAL_GPIO_EXTI_Callback+0x120>
        	if (Liquid_Detect_GPIO_Port->IDR & Liquid_Detect_Pin){ 	// if Rising edge trigger
 800197e:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001980:	691b      	ldr	r3, [r3, #16]
            break;
 8001982:	e037      	b.n	80019f4 <HAL_GPIO_EXTI_Callback+0x120>
        	if (OPT_IN1_GPIO_Port->IDR & OPT_IN1_Pin){ 	// if Rising edge trigger
 8001984:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <HAL_GPIO_EXTI_Callback+0x130>)
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	2b00      	cmp	r3, #0
 800198e:	d12a      	bne.n	80019e6 <HAL_GPIO_EXTI_Callback+0x112>
        		if(Motor[1].MotorDirection == 0){
 8001990:	4b1d      	ldr	r3, [pc, #116]	; (8001a08 <HAL_GPIO_EXTI_Callback+0x134>)
 8001992:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001996:	2b00      	cmp	r3, #0
 8001998:	d125      	bne.n	80019e6 <HAL_GPIO_EXTI_Callback+0x112>
        			Motor[1].StepPosition =0 ;
 800199a:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <HAL_GPIO_EXTI_Callback+0x134>)
 800199c:	2200      	movs	r2, #0
 800199e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            break;
 80019a2:	e020      	b.n	80019e6 <HAL_GPIO_EXTI_Callback+0x112>
        	if (OPT_IN2_GPIO_Port->IDR & OPT_IN2_Pin) { 	// if Rising edge trigger
 80019a4:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <HAL_GPIO_EXTI_Callback+0x130>)
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	f003 0310 	and.w	r3, r3, #16
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d01c      	beq.n	80019ea <HAL_GPIO_EXTI_Callback+0x116>
        		Motor[2].StepPosition =0 ;
 80019b0:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_GPIO_EXTI_Callback+0x134>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
            break;
 80019b8:	e017      	b.n	80019ea <HAL_GPIO_EXTI_Callback+0x116>
        	if (OPT_IN3_GPIO_Port->IDR & OPT_IN3_Pin) { 	// if Rising edge trigger
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_GPIO_EXTI_Callback+0x130>)
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	f003 0320 	and.w	r3, r3, #32
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d013      	beq.n	80019ee <HAL_GPIO_EXTI_Callback+0x11a>
        		Motor[3].StepPosition =0 ;
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <HAL_GPIO_EXTI_Callback+0x134>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
            break;
 80019ce:	e00e      	b.n	80019ee <HAL_GPIO_EXTI_Callback+0x11a>
        	if (OPT_IN4_GPIO_Port->IDR & OPT_IN4_Pin) { 	// if Rising edge trigger
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_GPIO_EXTI_Callback+0x130>)
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00a      	beq.n	80019f2 <HAL_GPIO_EXTI_Callback+0x11e>
        		Motor[4].StepPosition =0 ;
 80019dc:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <HAL_GPIO_EXTI_Callback+0x134>)
 80019de:	2200      	movs	r2, #0
 80019e0:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
            break;
 80019e4:	e005      	b.n	80019f2 <HAL_GPIO_EXTI_Callback+0x11e>
            break;
 80019e6:	bf00      	nop
 80019e8:	e004      	b.n	80019f4 <HAL_GPIO_EXTI_Callback+0x120>
            break;
 80019ea:	bf00      	nop
 80019ec:	e002      	b.n	80019f4 <HAL_GPIO_EXTI_Callback+0x120>
            break;
 80019ee:	bf00      	nop
 80019f0:	e000      	b.n	80019f4 <HAL_GPIO_EXTI_Callback+0x120>
            break;
 80019f2:	bf00      	nop
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	40020000 	.word	0x40020000
 8001a04:	40020c00 	.word	0x40020c00
 8001a08:	200008b0 	.word	0x200008b0

08001a0c <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c2_rx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <MX_I2C2_Init+0x50>)
 8001a12:	4a13      	ldr	r2, [pc, #76]	; (8001a60 <MX_I2C2_Init+0x54>)
 8001a14:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <MX_I2C2_Init+0x50>)
 8001a18:	4a12      	ldr	r2, [pc, #72]	; (8001a64 <MX_I2C2_Init+0x58>)
 8001a1a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <MX_I2C2_Init+0x50>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <MX_I2C2_Init+0x50>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <MX_I2C2_Init+0x50>)
 8001a2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a2e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a30:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <MX_I2C2_Init+0x50>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <MX_I2C2_Init+0x50>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a3c:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <MX_I2C2_Init+0x50>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <MX_I2C2_Init+0x50>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a48:	4804      	ldr	r0, [pc, #16]	; (8001a5c <MX_I2C2_Init+0x50>)
 8001a4a:	f006 fcfb 	bl	8008444 <HAL_I2C_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a54:	f000 ffc8 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200002e0 	.word	0x200002e0
 8001a60:	40005800 	.word	0x40005800
 8001a64:	000186a0 	.word	0x000186a0

08001a68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	; 0x28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a39      	ldr	r2, [pc, #228]	; (8001b6c <HAL_I2C_MspInit+0x104>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d16b      	bne.n	8001b62 <HAL_I2C_MspInit+0xfa>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	4b38      	ldr	r3, [pc, #224]	; (8001b70 <HAL_I2C_MspInit+0x108>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a37      	ldr	r2, [pc, #220]	; (8001b70 <HAL_I2C_MspInit+0x108>)
 8001a94:	f043 0320 	orr.w	r3, r3, #32
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b35      	ldr	r3, [pc, #212]	; (8001b70 <HAL_I2C_MspInit+0x108>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0320 	and.w	r3, r3, #32
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aaa:	2312      	movs	r3, #18
 8001aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ab6:	2304      	movs	r3, #4
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001aba:	f107 0314 	add.w	r3, r7, #20
 8001abe:	4619      	mov	r1, r3
 8001ac0:	482c      	ldr	r0, [pc, #176]	; (8001b74 <HAL_I2C_MspInit+0x10c>)
 8001ac2:	f006 fabf 	bl	8008044 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	4b29      	ldr	r3, [pc, #164]	; (8001b70 <HAL_I2C_MspInit+0x108>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	4a28      	ldr	r2, [pc, #160]	; (8001b70 <HAL_I2C_MspInit+0x108>)
 8001ad0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad6:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <HAL_I2C_MspInit+0x108>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8001ae2:	4b25      	ldr	r3, [pc, #148]	; (8001b78 <HAL_I2C_MspInit+0x110>)
 8001ae4:	4a25      	ldr	r2, [pc, #148]	; (8001b7c <HAL_I2C_MspInit+0x114>)
 8001ae6:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001ae8:	4b23      	ldr	r3, [pc, #140]	; (8001b78 <HAL_I2C_MspInit+0x110>)
 8001aea:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001aee:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001af0:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <HAL_I2C_MspInit+0x110>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af6:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <HAL_I2C_MspInit+0x110>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001afc:	4b1e      	ldr	r3, [pc, #120]	; (8001b78 <HAL_I2C_MspInit+0x110>)
 8001afe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b02:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b04:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <HAL_I2C_MspInit+0x110>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b0a:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <HAL_I2C_MspInit+0x110>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_CIRCULAR;
 8001b10:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_I2C_MspInit+0x110>)
 8001b12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b16:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001b18:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <HAL_I2C_MspInit+0x110>)
 8001b1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b1e:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b20:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <HAL_I2C_MspInit+0x110>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001b26:	4814      	ldr	r0, [pc, #80]	; (8001b78 <HAL_I2C_MspInit+0x110>)
 8001b28:	f005 ff02 	bl	8007930 <HAL_DMA_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8001b32:	f000 ff59 	bl	80029e8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a0f      	ldr	r2, [pc, #60]	; (8001b78 <HAL_I2C_MspInit+0x110>)
 8001b3a:	639a      	str	r2, [r3, #56]	; 0x38
 8001b3c:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <HAL_I2C_MspInit+0x110>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2105      	movs	r1, #5
 8001b46:	2021      	movs	r0, #33	; 0x21
 8001b48:	f005 fde8 	bl	800771c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001b4c:	2021      	movs	r0, #33	; 0x21
 8001b4e:	f005 fe01 	bl	8007754 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2105      	movs	r1, #5
 8001b56:	2022      	movs	r0, #34	; 0x22
 8001b58:	f005 fde0 	bl	800771c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001b5c:	2022      	movs	r0, #34	; 0x22
 8001b5e:	f005 fdf9 	bl	8007754 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001b62:	bf00      	nop
 8001b64:	3728      	adds	r7, #40	; 0x28
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40005800 	.word	0x40005800
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40021400 	.word	0x40021400
 8001b78:	20000334 	.word	0x20000334
 8001b7c:	40026040 	.word	0x40026040

08001b80 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch,1,HAL_MAX_DELAY);
 8001b88:	1d39      	adds	r1, r7, #4
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8e:	2201      	movs	r2, #1
 8001b90:	4803      	ldr	r0, [pc, #12]	; (8001ba0 <__io_putchar+0x20>)
 8001b92:	f00a f8b8 	bl	800bd06 <HAL_UART_Transmit>
    return ch;
 8001b96:	687b      	ldr	r3, [r7, #4]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	2000086c 	.word	0x2000086c

08001ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ba8:	f005 f93c 	bl	8006e24 <HAL_Init>
  /* USER CODE BEGIN Init */
  //HAL_Delay(6000);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bac:	f000 f836 	bl	8001c1c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 8001bb0:	f7ff fc62 	bl	8001478 <MX_GPIO_Init>
  MX_DMA_Init();
 8001bb4:	f7ff fbf4 	bl	80013a0 <MX_DMA_Init>
  MX_CAN1_Init();
 8001bb8:	f7ff fb00 	bl	80011bc <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8001bbc:	f001 fddc 	bl	8003778 <MX_USART1_UART_Init>
  MX_DAC_Init();
 8001bc0:	f7ff fb78 	bl	80012b4 <MX_DAC_Init>
  MX_TIM2_Init();
 8001bc4:	f001 f968 	bl	8002e98 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001bc8:	f001 f9ba 	bl	8002f40 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001bcc:	f001 fa0c 	bl	8002fe8 <MX_TIM4_Init>
  MX_UART4_Init();
 8001bd0:	f001 fd78 	bl	80036c4 <MX_UART4_Init>
  MX_UART5_Init();
 8001bd4:	f001 fda0 	bl	8003718 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8001bd8:	f001 fdf8 	bl	80037cc <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001bdc:	f7ff f9d6 	bl	8000f8c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001be0:	f7ff fa26 	bl	8001030 <MX_ADC2_Init>
  MX_I2C2_Init();
 8001be4:	f7ff ff12 	bl	8001a0c <MX_I2C2_Init>
  MX_TIM10_Init();
 8001be8:	f001 faf2 	bl	80031d0 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001bec:	f001 fb12 	bl	8003214 <MX_TIM11_Init>
  MX_TIM13_Init();
 8001bf0:	f001 fb6a 	bl	80032c8 <MX_TIM13_Init>
  MX_TIM14_Init();
 8001bf4:	f001 fb8a 	bl	800330c <MX_TIM14_Init>
  MX_TIM9_Init();
 8001bf8:	f001 fab2 	bl	8003160 <MX_TIM9_Init>
  MX_TIM7_Init();
 8001bfc:	f001 fa7c 	bl	80030f8 <MX_TIM7_Init>
  MX_TIM6_Init();
 8001c00:	f001 fa46 	bl	8003090 <MX_TIM6_Init>
  MX_TIM12_Init();
 8001c04:	f001 fb28 	bl	8003258 <MX_TIM12_Init>
  MX_TIM7_Init();
  MX_TIM6_Init();
  MX_TIM12_Init();
  /* USER CODE BEGIN 2 */
#endif
  ALL_Motors_Disable();
 8001c08:	f002 fac4 	bl	8004194 <ALL_Motors_Disable>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001c0c:	f00b f92e 	bl	800ce6c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001c10:	f7ff fbe6 	bl	80013e0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001c14:	f00b f94e 	bl	800ceb4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <main+0x74>
	...

08001c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b094      	sub	sp, #80	; 0x50
 8001c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c22:	f107 0320 	add.w	r3, r7, #32
 8001c26:	2230      	movs	r2, #48	; 0x30
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f00d ffc7 	bl	800fbbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c40:	2300      	movs	r3, #0
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	4b28      	ldr	r3, [pc, #160]	; (8001ce8 <SystemClock_Config+0xcc>)
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	4a27      	ldr	r2, [pc, #156]	; (8001ce8 <SystemClock_Config+0xcc>)
 8001c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c50:	4b25      	ldr	r3, [pc, #148]	; (8001ce8 <SystemClock_Config+0xcc>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	4b22      	ldr	r3, [pc, #136]	; (8001cec <SystemClock_Config+0xd0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a21      	ldr	r2, [pc, #132]	; (8001cec <SystemClock_Config+0xd0>)
 8001c66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <SystemClock_Config+0xd0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c82:	2302      	movs	r3, #2
 8001c84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001c90:	23a0      	movs	r3, #160	; 0xa0
 8001c92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c94:	2302      	movs	r3, #2
 8001c96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c98:	2304      	movs	r3, #4
 8001c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c9c:	f107 0320 	add.w	r3, r7, #32
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f008 fdc3 	bl	800a82c <HAL_RCC_OscConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cac:	f000 fe9c 	bl	80029e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cb0:	230f      	movs	r3, #15
 8001cb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cbc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001cc2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cc6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	2105      	movs	r1, #5
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f009 f824 	bl	800ad1c <HAL_RCC_ClockConfig>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001cda:	f000 fe85 	bl	80029e8 <Error_Handler>
  }
}
 8001cde:	bf00      	nop
 8001ce0:	3750      	adds	r7, #80	; 0x50
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40007000 	.word	0x40007000

08001cf0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a9e      	ldr	r2, [pc, #632]	; (8001f78 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d101      	bne.n	8001d06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d02:	f005 f8b1 	bl	8006e68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

	if (htim->Instance == TIM9) {	// 计时器周期为0.1ms
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a9c      	ldr	r2, [pc, #624]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d125      	bne.n	8001d5c <HAL_TIM_PeriodElapsedCallback+0x6c>
		uart_reieve_timeoutCount++;
 8001d10:	4b9b      	ldr	r3, [pc, #620]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	3301      	adds	r3, #1
 8001d16:	4a9a      	ldr	r2, [pc, #616]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001d18:	6013      	str	r3, [r2, #0]
		if( (USART_RX_STA&0x8000) || (USART_RX_STA==0) ){	// 判断串口接收超时
 8001d1a:	4b9a      	ldr	r3, [pc, #616]	; (8001f84 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	b21b      	sxth	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	db03      	blt.n	8001d2c <HAL_TIM_PeriodElapsedCallback+0x3c>
 8001d24:	4b97      	ldr	r3, [pc, #604]	; (8001f84 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d106      	bne.n	8001d3a <HAL_TIM_PeriodElapsedCallback+0x4a>
			uart_reieve_timeoutCount = 0;
 8001d2c:	4b94      	ldr	r3, [pc, #592]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim9);
 8001d32:	4895      	ldr	r0, [pc, #596]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001d34:	f009 fb04 	bl	800b340 <HAL_TIM_Base_Stop_IT>
 8001d38:	e010      	b.n	8001d5c <HAL_TIM_PeriodElapsedCallback+0x6c>
		}
		else{
			if(uart_reieve_timeoutCount > 1000){
 8001d3a:	4b91      	ldr	r3, [pc, #580]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d42:	d90b      	bls.n	8001d5c <HAL_TIM_PeriodElapsedCallback+0x6c>
				printf("[WRONG] Data Input Timeout ! \r\n");
 8001d44:	4891      	ldr	r0, [pc, #580]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001d46:	f00e fcc7 	bl	80106d8 <puts>
				uart_reieve_timeoutCount = 0;
 8001d4a:	4b8d      	ldr	r3, [pc, #564]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
				USART_RX_STA = 0;
 8001d50:	4b8c      	ldr	r3, [pc, #560]	; (8001f84 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	801a      	strh	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim9);
 8001d56:	488c      	ldr	r0, [pc, #560]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001d58:	f009 faf2 	bl	800b340 <HAL_TIM_Base_Stop_IT>
			}
		}
	}

	if (htim->Instance == TIM10)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a8b      	ldr	r2, [pc, #556]	; (8001f90 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	f040 80c2 	bne.w	8001eec <HAL_TIM_PeriodElapsedCallback+0x1fc>
	{
			timecount_TIM10++;
 8001d68:	4b8a      	ldr	r3, [pc, #552]	; (8001f94 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	4a89      	ldr	r2, [pc, #548]	; (8001f94 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001d70:	6013      	str	r3, [r2, #0]
			AccelDecelcount_TIM10++;
 8001d72:	4b89      	ldr	r3, [pc, #548]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	3301      	adds	r3, #1
 8001d78:	4a87      	ldr	r2, [pc, #540]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001d7a:	6013      	str	r3, [r2, #0]
			if(timecount_TIM10 <= Pluse_High)
 8001d7c:	4b85      	ldr	r3, [pc, #532]	; (8001f94 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b86      	ldr	r3, [pc, #536]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d805      	bhi.n	8001d94 <HAL_TIM_PeriodElapsedCallback+0xa4>
			{
				Motorpluse1_High();
 8001d88:	2201      	movs	r2, #1
 8001d8a:	2108      	movs	r1, #8
 8001d8c:	4884      	ldr	r0, [pc, #528]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d8e:	f006 fb0d 	bl	80083ac <HAL_GPIO_WritePin>
 8001d92:	e00a      	b.n	8001daa <HAL_TIM_PeriodElapsedCallback+0xba>
			}
			else if(timecount_TIM10 > Pluse_High)
 8001d94:	4b7f      	ldr	r3, [pc, #508]	; (8001f94 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b80      	ldr	r3, [pc, #512]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d904      	bls.n	8001daa <HAL_TIM_PeriodElapsedCallback+0xba>
			{
				Motorpluse1_Low();
 8001da0:	2200      	movs	r2, #0
 8001da2:	2108      	movs	r1, #8
 8001da4:	487e      	ldr	r0, [pc, #504]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001da6:	f006 fb01 	bl	80083ac <HAL_GPIO_WritePin>
			}
			if(timecount_TIM10 >= Motor[1].StepperSpeedTMR)
 8001daa:	4b7e      	ldr	r3, [pc, #504]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001dac:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8001db0:	4b78      	ldr	r3, [pc, #480]	; (8001f94 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d843      	bhi.n	8001e40 <HAL_TIM_PeriodElapsedCallback+0x150>
			{
				timecount_TIM10 = 0 ;
 8001db8:	4b76      	ldr	r3, [pc, #472]	; (8001f94 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
				Motor[1].NumberofSteps--;
 8001dbe:	4b79      	ldr	r3, [pc, #484]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001dc0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	4a77      	ldr	r2, [pc, #476]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001dc8:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
				if (Motor[1].MotorDirection == 1){
 8001dcc:	4b75      	ldr	r3, [pc, #468]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001dce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d11c      	bne.n	8001e10 <HAL_TIM_PeriodElapsedCallback+0x120>
					Motor[1].StepPosition++;
 8001dd6:	4b73      	ldr	r3, [pc, #460]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ddc:	3301      	adds	r3, #1
 8001dde:	4a71      	ldr	r2, [pc, #452]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					if (Motor[1].StepPosition >= Motor[1].StepsInOneCircle){
 8001de4:	4b6f      	ldr	r3, [pc, #444]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dea:	461a      	mov	r2, r3
 8001dec:	4b6d      	ldr	r3, [pc, #436]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001dee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d324      	bcc.n	8001e40 <HAL_TIM_PeriodElapsedCallback+0x150>
						Motor[1].StepPosition = Motor[1].StepPosition - Motor[1].StepsInOneCircle ;
 8001df6:	4b6b      	ldr	r3, [pc, #428]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b69      	ldr	r3, [pc, #420]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	461a      	mov	r2, r3
 8001e08:	4b66      	ldr	r3, [pc, #408]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8001e0e:	e017      	b.n	8001e40 <HAL_TIM_PeriodElapsedCallback+0x150>
					}
				}
				else{
					Motor[1].StepPosition--;
 8001e10:	4b64      	ldr	r3, [pc, #400]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e16:	3b01      	subs	r3, #1
 8001e18:	4a62      	ldr	r2, [pc, #392]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e1a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					if (Motor[1].StepPosition < 0){
 8001e1e:	4b61      	ldr	r3, [pc, #388]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	da0b      	bge.n	8001e40 <HAL_TIM_PeriodElapsedCallback+0x150>
						Motor[1].StepPosition = Motor[1].StepPosition + Motor[1].StepsInOneCircle ;
 8001e28:	4b5e      	ldr	r3, [pc, #376]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2e:	461a      	mov	r2, r3
 8001e30:	4b5c      	ldr	r3, [pc, #368]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e36:	4413      	add	r3, r2
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b5a      	ldr	r3, [pc, #360]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}
				}
			}
			if(Motor[1].StepPosition == Motor[1].TargetPosition)
 8001e40:	4b58      	ldr	r3, [pc, #352]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e42:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001e46:	4b57      	ldr	r3, [pc, #348]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d10e      	bne.n	8001e6e <HAL_TIM_PeriodElapsedCallback+0x17e>
			{
				Motor[1].Status = 0;
 8001e50:	4b54      	ldr	r3, [pc, #336]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
				printf("---Motor1 Steps Position:%ld---\r\n",Motor[1].StepPosition);
 8001e58:	4b52      	ldr	r3, [pc, #328]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4851      	ldr	r0, [pc, #324]	; (8001fa8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001e62:	f00e fbb3 	bl	80105cc <iprintf>
				HAL_TIM_Base_Stop_IT(&htim10);
 8001e66:	4851      	ldr	r0, [pc, #324]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001e68:	f009 fa6a 	bl	800b340 <HAL_TIM_Base_Stop_IT>
 8001e6c:	e00b      	b.n	8001e86 <HAL_TIM_PeriodElapsedCallback+0x196>
			}
			else if (Motor[1].NumberofSteps <= 0){
 8001e6e:	4b4d      	ldr	r3, [pc, #308]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d106      	bne.n	8001e86 <HAL_TIM_PeriodElapsedCallback+0x196>
				Motor[1].Status = 0;
 8001e78:	4b4a      	ldr	r3, [pc, #296]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
				//printf("[WRONG]Motor1 Goto Target Position Failed!---Current_Position:%ld---\r\n",Motor[1].StepPosition);
				HAL_TIM_Base_Stop_IT(&htim10);
 8001e80:	484a      	ldr	r0, [pc, #296]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001e82:	f009 fa5d 	bl	800b340 <HAL_TIM_Base_Stop_IT>
			}

			if (Motor[1].NumberofSteps > Motor[1].NumberofSteps_StopAccel)  // if.. begin Acceleration
 8001e86:	4b47      	ldr	r3, [pc, #284]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e88:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001e8c:	4b45      	ldr	r3, [pc, #276]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d910      	bls.n	8001eb8 <HAL_TIM_PeriodElapsedCallback+0x1c8>
			{
				if(AccelDecelcount_TIM10 >= Motor[1].AccelerationTimeTMR)
 8001e96:	4b43      	ldr	r3, [pc, #268]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e98:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001e9c:	4b3e      	ldr	r3, [pc, #248]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	f200 858f 	bhi.w	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
				{
					AccelDecelcount_TIM10=0;
 8001ea6:	4b3c      	ldr	r3, [pc, #240]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
					AccelDecel(ACCEL,&Motor[1]);
 8001eac:	4940      	ldr	r1, [pc, #256]	; (8001fb0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f002 fa4e 	bl	8004350 <AccelDecel>
			}
	}
#endif

  /* USER CODE END Callback 1 */
}
 8001eb4:	f000 bd86 	b.w	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
			else if (Motor[1].NumberofSteps < Motor[1].NumberofSteps_BeginDecel)  // if.. begin Deceleration
 8001eb8:	4b3a      	ldr	r3, [pc, #232]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001eba:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001ebe:	4b39      	ldr	r3, [pc, #228]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001ec0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	f080 857d 	bcs.w	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
				if(AccelDecelcount_TIM10 >= Motor[1].DecelerationTimeTMR)
 8001eca:	4b36      	ldr	r3, [pc, #216]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001ecc:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001ed0:	4b31      	ldr	r3, [pc, #196]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	f200 8575 	bhi.w	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
					AccelDecelcount_TIM10=0;
 8001eda:	4b2f      	ldr	r3, [pc, #188]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
					AccelDecel(DECEL,&Motor[1]);
 8001ee0:	4933      	ldr	r1, [pc, #204]	; (8001fb0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001ee2:	2002      	movs	r0, #2
 8001ee4:	f002 fa34 	bl	8004350 <AccelDecel>
}
 8001ee8:	f000 bd6c 	b.w	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
	else if (htim->Instance == TIM11)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a30      	ldr	r2, [pc, #192]	; (8001fb4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	f040 80c1 	bne.w	800207a <HAL_TIM_PeriodElapsedCallback+0x38a>
			timecount_TIM11++;
 8001ef8:	4b2f      	ldr	r3, [pc, #188]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	3301      	adds	r3, #1
 8001efe:	4a2e      	ldr	r2, [pc, #184]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001f00:	6013      	str	r3, [r2, #0]
			AccelDecelcount_TIM11++;
 8001f02:	4b2e      	ldr	r3, [pc, #184]	; (8001fbc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	3301      	adds	r3, #1
 8001f08:	4a2c      	ldr	r2, [pc, #176]	; (8001fbc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001f0a:	6013      	str	r3, [r2, #0]
			if(timecount_TIM11 <= Pluse_High)
 8001f0c:	4b2a      	ldr	r3, [pc, #168]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d805      	bhi.n	8001f24 <HAL_TIM_PeriodElapsedCallback+0x234>
				Motorpluse2_High();
 8001f18:	2201      	movs	r2, #1
 8001f1a:	2140      	movs	r1, #64	; 0x40
 8001f1c:	4820      	ldr	r0, [pc, #128]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001f1e:	f006 fa45 	bl	80083ac <HAL_GPIO_WritePin>
 8001f22:	e00a      	b.n	8001f3a <HAL_TIM_PeriodElapsedCallback+0x24a>
			else if(timecount_TIM11 > Pluse_High)
 8001f24:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d904      	bls.n	8001f3a <HAL_TIM_PeriodElapsedCallback+0x24a>
				Motorpluse2_Low();
 8001f30:	2200      	movs	r2, #0
 8001f32:	2140      	movs	r1, #64	; 0x40
 8001f34:	481a      	ldr	r0, [pc, #104]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001f36:	f006 fa39 	bl	80083ac <HAL_GPIO_WritePin>
			if(timecount_TIM11 >= Motor[2].StepperSpeedTMR)
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001f3c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001f40:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d842      	bhi.n	8001fce <HAL_TIM_PeriodElapsedCallback+0x2de>
				timecount_TIM11 = 0 ;
 8001f48:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
				Motor[2].NumberofSteps--;
 8001f4e:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001f50:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001f54:	3b01      	subs	r3, #1
 8001f56:	4a13      	ldr	r2, [pc, #76]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001f58:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
				if (Motor[2].MotorDirection == 1){
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001f5e:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d12c      	bne.n	8001fc0 <HAL_TIM_PeriodElapsedCallback+0x2d0>
					Motor[2].StepPosition++;
 8001f66:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001f68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	4a0d      	ldr	r2, [pc, #52]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001f70:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f74:	e02b      	b.n	8001fce <HAL_TIM_PeriodElapsedCallback+0x2de>
 8001f76:	bf00      	nop
 8001f78:	40010000 	.word	0x40010000
 8001f7c:	40014000 	.word	0x40014000
 8001f80:	20000394 	.word	0x20000394
 8001f84:	2000079c 	.word	0x2000079c
 8001f88:	20000584 	.word	0x20000584
 8001f8c:	0801262c 	.word	0x0801262c
 8001f90:	40014400 	.word	0x40014400
 8001f94:	20000398 	.word	0x20000398
 8001f98:	2000039c 	.word	0x2000039c
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	40020400 	.word	0x40020400
 8001fa4:	200008b0 	.word	0x200008b0
 8001fa8:	0801264c 	.word	0x0801264c
 8001fac:	200005cc 	.word	0x200005cc
 8001fb0:	20000910 	.word	0x20000910
 8001fb4:	40014800 	.word	0x40014800
 8001fb8:	200003a0 	.word	0x200003a0
 8001fbc:	200003a4 	.word	0x200003a4
					Motor[2].StepPosition--;
 8001fc0:	4b98      	ldr	r3, [pc, #608]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8001fc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	4a96      	ldr	r2, [pc, #600]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8001fca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
			if(Motor[2].StepPosition == Motor[2].TargetPosition){
 8001fce:	4b95      	ldr	r3, [pc, #596]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8001fd0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001fd4:	4b93      	ldr	r3, [pc, #588]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8001fd6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d10e      	bne.n	8001ffc <HAL_TIM_PeriodElapsedCallback+0x30c>
				Motor[2].Status = 0;
 8001fde:	4b91      	ldr	r3, [pc, #580]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				printf("---Motor2 Steps Position:%ld---\r\n",Motor[2].StepPosition);
 8001fe6:	4b8f      	ldr	r3, [pc, #572]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8001fe8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fec:	4619      	mov	r1, r3
 8001fee:	488e      	ldr	r0, [pc, #568]	; (8002228 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8001ff0:	f00e faec 	bl	80105cc <iprintf>
				HAL_TIM_Base_Stop_IT(&htim11);
 8001ff4:	488d      	ldr	r0, [pc, #564]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001ff6:	f009 f9a3 	bl	800b340 <HAL_TIM_Base_Stop_IT>
 8001ffa:	e00b      	b.n	8002014 <HAL_TIM_PeriodElapsedCallback+0x324>
			else if (Motor[2].NumberofSteps <= 0){
 8001ffc:	4b89      	ldr	r3, [pc, #548]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8001ffe:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002002:	2b00      	cmp	r3, #0
 8002004:	d106      	bne.n	8002014 <HAL_TIM_PeriodElapsedCallback+0x324>
				Motor[2].Status = 0;
 8002006:	4b87      	ldr	r3, [pc, #540]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8002008:	2200      	movs	r2, #0
 800200a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				HAL_TIM_Base_Stop_IT(&htim11);
 800200e:	4887      	ldr	r0, [pc, #540]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8002010:	f009 f996 	bl	800b340 <HAL_TIM_Base_Stop_IT>
			if (Motor[2].NumberofSteps > Motor[2].NumberofSteps_StopAccel)
 8002014:	4b83      	ldr	r3, [pc, #524]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8002016:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800201a:	4b82      	ldr	r3, [pc, #520]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 800201c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002020:	429a      	cmp	r2, r3
 8002022:	d910      	bls.n	8002046 <HAL_TIM_PeriodElapsedCallback+0x356>
				if(AccelDecelcount_TIM11 >= Motor[2].AccelerationTimeTMR)
 8002024:	4b7f      	ldr	r3, [pc, #508]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8002026:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800202a:	4b81      	ldr	r3, [pc, #516]	; (8002230 <HAL_TIM_PeriodElapsedCallback+0x540>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	f200 84c8 	bhi.w	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
					AccelDecelcount_TIM11=0;
 8002034:	4b7e      	ldr	r3, [pc, #504]	; (8002230 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
					AccelDecel(ACCEL,&Motor[2]);
 800203a:	497e      	ldr	r1, [pc, #504]	; (8002234 <HAL_TIM_PeriodElapsedCallback+0x544>)
 800203c:	2001      	movs	r0, #1
 800203e:	f002 f987 	bl	8004350 <AccelDecel>
}
 8002042:	f000 bcbf 	b.w	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
			else if (Motor[2].NumberofSteps < Motor[2].NumberofSteps_BeginDecel)
 8002046:	4b77      	ldr	r3, [pc, #476]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8002048:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800204c:	4b75      	ldr	r3, [pc, #468]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 800204e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002052:	429a      	cmp	r2, r3
 8002054:	f080 84b6 	bcs.w	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
				if(AccelDecelcount_TIM11 >= Motor[2].DecelerationTimeTMR)
 8002058:	4b72      	ldr	r3, [pc, #456]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 800205a:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 800205e:	4b74      	ldr	r3, [pc, #464]	; (8002230 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	f200 84ae 	bhi.w	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
					AccelDecelcount_TIM11=0;
 8002068:	4b71      	ldr	r3, [pc, #452]	; (8002230 <HAL_TIM_PeriodElapsedCallback+0x540>)
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
					AccelDecel(DECEL,&Motor[2]);
 800206e:	4971      	ldr	r1, [pc, #452]	; (8002234 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8002070:	2002      	movs	r0, #2
 8002072:	f002 f96d 	bl	8004350 <AccelDecel>
}
 8002076:	f000 bca5 	b.w	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
	else if (htim->Instance == TIM13)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a6e      	ldr	r2, [pc, #440]	; (8002238 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002080:	4293      	cmp	r3, r2
 8002082:	f040 8128 	bne.w	80022d6 <HAL_TIM_PeriodElapsedCallback+0x5e6>
			timecount_TIM13++;
 8002086:	4b6d      	ldr	r3, [pc, #436]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	3301      	adds	r3, #1
 800208c:	4a6b      	ldr	r2, [pc, #428]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 800208e:	6013      	str	r3, [r2, #0]
			AccelDecelcount_TIM13++;
 8002090:	4b6b      	ldr	r3, [pc, #428]	; (8002240 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	3301      	adds	r3, #1
 8002096:	4a6a      	ldr	r2, [pc, #424]	; (8002240 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002098:	6013      	str	r3, [r2, #0]
			if (DetectionTask_STATE == Cap0_Sample_State){
 800209a:	4b6a      	ldr	r3, [pc, #424]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x554>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b6f      	cmp	r3, #111	; 0x6f
 80020a0:	d16b      	bne.n	800217a <HAL_TIM_PeriodElapsedCallback+0x48a>
				switch (Follow_state){
 80020a2:	4b69      	ldr	r3, [pc, #420]	; (8002248 <HAL_TIM_PeriodElapsedCallback+0x558>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b03      	cmp	r3, #3
 80020a8:	d03a      	beq.n	8002120 <HAL_TIM_PeriodElapsedCallback+0x430>
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	f300 848a 	bgt.w	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d003      	beq.n	80020bc <HAL_TIM_PeriodElapsedCallback+0x3cc>
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d02e      	beq.n	8002116 <HAL_TIM_PeriodElapsedCallback+0x426>
}
 80020b8:	f000 bc84 	b.w	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
					if(timecount_TIM13 <= Pluse_High){
 80020bc:	4b5f      	ldr	r3, [pc, #380]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4b62      	ldr	r3, [pc, #392]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d806      	bhi.n	80020d6 <HAL_TIM_PeriodElapsedCallback+0x3e6>
						Motorpluse3_High();
 80020c8:	2201      	movs	r2, #1
 80020ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020ce:	4860      	ldr	r0, [pc, #384]	; (8002250 <HAL_TIM_PeriodElapsedCallback+0x560>)
 80020d0:	f006 f96c 	bl	80083ac <HAL_GPIO_WritePin>
 80020d4:	e00b      	b.n	80020ee <HAL_TIM_PeriodElapsedCallback+0x3fe>
					else if(timecount_TIM13 > Pluse_High){
 80020d6:	4b59      	ldr	r3, [pc, #356]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	4b5c      	ldr	r3, [pc, #368]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d905      	bls.n	80020ee <HAL_TIM_PeriodElapsedCallback+0x3fe>
						Motorpluse3_Low();
 80020e2:	2200      	movs	r2, #0
 80020e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020e8:	4859      	ldr	r0, [pc, #356]	; (8002250 <HAL_TIM_PeriodElapsedCallback+0x560>)
 80020ea:	f006 f95f 	bl	80083ac <HAL_GPIO_WritePin>
					if(timecount_TIM13 >= Motor[3].StepperSpeedTMR){
 80020ee:	4b4d      	ldr	r3, [pc, #308]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 80020f0:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 80020f4:	4b51      	ldr	r3, [pc, #324]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	f200 8460 	bhi.w	80029be <HAL_TIM_PeriodElapsedCallback+0xcce>
						timecount_TIM13 = 0 ;
 80020fe:	4b4f      	ldr	r3, [pc, #316]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
						Motor[3].StepPosition++;
 8002104:	4b47      	ldr	r3, [pc, #284]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8002106:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800210a:	3301      	adds	r3, #1
 800210c:	4a45      	ldr	r2, [pc, #276]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 800210e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
					break;
 8002112:	f000 bc54 	b.w	80029be <HAL_TIM_PeriodElapsedCallback+0xcce>
					timecount_TIM13 = 0 ;
 8002116:	4b49      	ldr	r3, [pc, #292]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
					break;
 800211c:	f000 bc52 	b.w	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
					if(timecount_TIM13 <= Pluse_High){
 8002120:	4b46      	ldr	r3, [pc, #280]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b49      	ldr	r3, [pc, #292]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d806      	bhi.n	800213a <HAL_TIM_PeriodElapsedCallback+0x44a>
						Motorpluse3_High();
 800212c:	2201      	movs	r2, #1
 800212e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002132:	4847      	ldr	r0, [pc, #284]	; (8002250 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002134:	f006 f93a 	bl	80083ac <HAL_GPIO_WritePin>
 8002138:	e00b      	b.n	8002152 <HAL_TIM_PeriodElapsedCallback+0x462>
					else if(timecount_TIM13 > Pluse_High){
 800213a:	4b40      	ldr	r3, [pc, #256]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	4b43      	ldr	r3, [pc, #268]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d905      	bls.n	8002152 <HAL_TIM_PeriodElapsedCallback+0x462>
						Motorpluse3_Low();
 8002146:	2200      	movs	r2, #0
 8002148:	f44f 7100 	mov.w	r1, #512	; 0x200
 800214c:	4840      	ldr	r0, [pc, #256]	; (8002250 <HAL_TIM_PeriodElapsedCallback+0x560>)
 800214e:	f006 f92d 	bl	80083ac <HAL_GPIO_WritePin>
					if(timecount_TIM13 >= Motor[3].StepperSpeedTMR){
 8002152:	4b34      	ldr	r3, [pc, #208]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8002154:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8002158:	4b38      	ldr	r3, [pc, #224]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	f200 8430 	bhi.w	80029c2 <HAL_TIM_PeriodElapsedCallback+0xcd2>
						timecount_TIM13 = 0 ;
 8002162:	4b36      	ldr	r3, [pc, #216]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
							Motor[3].StepPosition--;
 8002168:	4b2e      	ldr	r3, [pc, #184]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 800216a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800216e:	3b01      	subs	r3, #1
 8002170:	4a2c      	ldr	r2, [pc, #176]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8002172:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
					break;
 8002176:	f000 bc24 	b.w	80029c2 <HAL_TIM_PeriodElapsedCallback+0xcd2>
				if(timecount_TIM13 <= Pluse_High){
 800217a:	4b30      	ldr	r3, [pc, #192]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4b33      	ldr	r3, [pc, #204]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d806      	bhi.n	8002194 <HAL_TIM_PeriodElapsedCallback+0x4a4>
					Motorpluse3_High();
 8002186:	2201      	movs	r2, #1
 8002188:	f44f 7100 	mov.w	r1, #512	; 0x200
 800218c:	4830      	ldr	r0, [pc, #192]	; (8002250 <HAL_TIM_PeriodElapsedCallback+0x560>)
 800218e:	f006 f90d 	bl	80083ac <HAL_GPIO_WritePin>
 8002192:	e00b      	b.n	80021ac <HAL_TIM_PeriodElapsedCallback+0x4bc>
				else if(timecount_TIM13 > Pluse_High){
 8002194:	4b29      	ldr	r3, [pc, #164]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4b2c      	ldr	r3, [pc, #176]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d905      	bls.n	80021ac <HAL_TIM_PeriodElapsedCallback+0x4bc>
					Motorpluse3_Low();
 80021a0:	2200      	movs	r2, #0
 80021a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021a6:	482a      	ldr	r0, [pc, #168]	; (8002250 <HAL_TIM_PeriodElapsedCallback+0x560>)
 80021a8:	f006 f900 	bl	80083ac <HAL_GPIO_WritePin>
				if(timecount_TIM13 >= Motor[3].StepperSpeedTMR){
 80021ac:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 80021ae:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 80021b2:	4b22      	ldr	r3, [pc, #136]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d81d      	bhi.n	80021f6 <HAL_TIM_PeriodElapsedCallback+0x506>
					timecount_TIM13 = 0 ;
 80021ba:	4b20      	ldr	r3, [pc, #128]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
					Motor[3].NumberofSteps--;
 80021c0:	4b18      	ldr	r3, [pc, #96]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 80021c2:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80021c6:	3b01      	subs	r3, #1
 80021c8:	4a16      	ldr	r2, [pc, #88]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 80021ca:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
					if (Motor[3].MotorDirection == 1){
 80021ce:	4b15      	ldr	r3, [pc, #84]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 80021d0:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d107      	bne.n	80021e8 <HAL_TIM_PeriodElapsedCallback+0x4f8>
						Motor[3].StepPosition++;
 80021d8:	4b12      	ldr	r3, [pc, #72]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 80021da:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80021de:	3301      	adds	r3, #1
 80021e0:	4a10      	ldr	r2, [pc, #64]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 80021e2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80021e6:	e006      	b.n	80021f6 <HAL_TIM_PeriodElapsedCallback+0x506>
						Motor[3].StepPosition--;
 80021e8:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 80021ea:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80021ee:	3b01      	subs	r3, #1
 80021f0:	4a0c      	ldr	r2, [pc, #48]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 80021f2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
				if(Motor[3].StepPosition == Motor[3].TargetPosition){
 80021f6:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 80021f8:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 80021fe:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8002202:	429a      	cmp	r2, r3
 8002204:	d12a      	bne.n	800225c <HAL_TIM_PeriodElapsedCallback+0x56c>
					Motor[3].Status = 0;
 8002206:	4b07      	ldr	r3, [pc, #28]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
					printf("---Motor3 Steps Position:%ld---\r\n",Motor[3].StepPosition);
 800220e:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8002210:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002214:	4619      	mov	r1, r3
 8002216:	480f      	ldr	r0, [pc, #60]	; (8002254 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002218:	f00e f9d8 	bl	80105cc <iprintf>
					HAL_TIM_Base_Stop_IT(&htim13);
 800221c:	480e      	ldr	r0, [pc, #56]	; (8002258 <HAL_TIM_PeriodElapsedCallback+0x568>)
 800221e:	f009 f88f 	bl	800b340 <HAL_TIM_Base_Stop_IT>
 8002222:	e027      	b.n	8002274 <HAL_TIM_PeriodElapsedCallback+0x584>
 8002224:	200008b0 	.word	0x200008b0
 8002228:	08012670 	.word	0x08012670
 800222c:	20000614 	.word	0x20000614
 8002230:	200003a4 	.word	0x200003a4
 8002234:	20000970 	.word	0x20000970
 8002238:	40001c00 	.word	0x40001c00
 800223c:	200003a8 	.word	0x200003a8
 8002240:	200003ac 	.word	0x200003ac
 8002244:	20000c71 	.word	0x20000c71
 8002248:	20000c70 	.word	0x20000c70
 800224c:	20000000 	.word	0x20000000
 8002250:	40020400 	.word	0x40020400
 8002254:	08012694 	.word	0x08012694
 8002258:	200006a4 	.word	0x200006a4
				else if (Motor[3].NumberofSteps <= 0){
 800225c:	4b9f      	ldr	r3, [pc, #636]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 800225e:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002262:	2b00      	cmp	r3, #0
 8002264:	d106      	bne.n	8002274 <HAL_TIM_PeriodElapsedCallback+0x584>
					Motor[3].Status = 0;
 8002266:	4b9d      	ldr	r3, [pc, #628]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
					HAL_TIM_Base_Stop_IT(&htim13);
 800226e:	489c      	ldr	r0, [pc, #624]	; (80024e0 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8002270:	f009 f866 	bl	800b340 <HAL_TIM_Base_Stop_IT>
				if (Motor[3].NumberofSteps > Motor[3].NumberofSteps_StopAccel){
 8002274:	4b99      	ldr	r3, [pc, #612]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8002276:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800227a:	4b98      	ldr	r3, [pc, #608]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 800227c:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8002280:	429a      	cmp	r2, r3
 8002282:	d90f      	bls.n	80022a4 <HAL_TIM_PeriodElapsedCallback+0x5b4>
					if(AccelDecelcount_TIM13 >= Motor[3].AccelerationTimeTMR){
 8002284:	4b95      	ldr	r3, [pc, #596]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8002286:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 800228a:	4b96      	ldr	r3, [pc, #600]	; (80024e4 <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	429a      	cmp	r2, r3
 8002290:	f200 8398 	bhi.w	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
						AccelDecelcount_TIM13=0;
 8002294:	4b93      	ldr	r3, [pc, #588]	; (80024e4 <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
						AccelDecel(ACCEL,&Motor[3]);
 800229a:	4993      	ldr	r1, [pc, #588]	; (80024e8 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 800229c:	2001      	movs	r0, #1
 800229e:	f002 f857 	bl	8004350 <AccelDecel>
}
 80022a2:	e38f      	b.n	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
				else if (Motor[3].NumberofSteps < Motor[3].NumberofSteps_BeginDecel){
 80022a4:	4b8d      	ldr	r3, [pc, #564]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 80022a6:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 80022aa:	4b8c      	ldr	r3, [pc, #560]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 80022ac:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80022b0:	429a      	cmp	r2, r3
 80022b2:	f080 8387 	bcs.w	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
					if(AccelDecelcount_TIM13 >= Motor[3].DecelerationTimeTMR){
 80022b6:	4b89      	ldr	r3, [pc, #548]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 80022b8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80022bc:	4b89      	ldr	r3, [pc, #548]	; (80024e4 <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	f200 837f 	bhi.w	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
						AccelDecelcount_TIM13=0;
 80022c6:	4b87      	ldr	r3, [pc, #540]	; (80024e4 <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
						AccelDecel(DECEL,&Motor[3]);
 80022cc:	4986      	ldr	r1, [pc, #536]	; (80024e8 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 80022ce:	2002      	movs	r0, #2
 80022d0:	f002 f83e 	bl	8004350 <AccelDecel>
}
 80022d4:	e376      	b.n	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
	else if (htim->Instance == TIM14)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a84      	ldr	r2, [pc, #528]	; (80024ec <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	f040 8093 	bne.w	8002408 <HAL_TIM_PeriodElapsedCallback+0x718>
			timecount_TIM14++;
 80022e2:	4b83      	ldr	r3, [pc, #524]	; (80024f0 <HAL_TIM_PeriodElapsedCallback+0x800>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	3301      	adds	r3, #1
 80022e8:	4a81      	ldr	r2, [pc, #516]	; (80024f0 <HAL_TIM_PeriodElapsedCallback+0x800>)
 80022ea:	6013      	str	r3, [r2, #0]
			AccelDecelcount_TIM14++;
 80022ec:	4b81      	ldr	r3, [pc, #516]	; (80024f4 <HAL_TIM_PeriodElapsedCallback+0x804>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	3301      	adds	r3, #1
 80022f2:	4a80      	ldr	r2, [pc, #512]	; (80024f4 <HAL_TIM_PeriodElapsedCallback+0x804>)
 80022f4:	6013      	str	r3, [r2, #0]
			if(timecount_TIM14 <= Pluse_High)
 80022f6:	4b7e      	ldr	r3, [pc, #504]	; (80024f0 <HAL_TIM_PeriodElapsedCallback+0x800>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	4b7f      	ldr	r3, [pc, #508]	; (80024f8 <HAL_TIM_PeriodElapsedCallback+0x808>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d805      	bhi.n	800230e <HAL_TIM_PeriodElapsedCallback+0x61e>
				Motorpluse4_High();
 8002302:	2201      	movs	r2, #1
 8002304:	2104      	movs	r1, #4
 8002306:	487d      	ldr	r0, [pc, #500]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8002308:	f006 f850 	bl	80083ac <HAL_GPIO_WritePin>
 800230c:	e00a      	b.n	8002324 <HAL_TIM_PeriodElapsedCallback+0x634>
			else if(timecount_TIM14 > Pluse_High)
 800230e:	4b78      	ldr	r3, [pc, #480]	; (80024f0 <HAL_TIM_PeriodElapsedCallback+0x800>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	4b79      	ldr	r3, [pc, #484]	; (80024f8 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d904      	bls.n	8002324 <HAL_TIM_PeriodElapsedCallback+0x634>
				Motorpluse4_Low();
 800231a:	2200      	movs	r2, #0
 800231c:	2104      	movs	r1, #4
 800231e:	4877      	ldr	r0, [pc, #476]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8002320:	f006 f844 	bl	80083ac <HAL_GPIO_WritePin>
			if(timecount_TIM14 >= Motor[4].StepperSpeedTMR)
 8002324:	4b6d      	ldr	r3, [pc, #436]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8002326:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 800232a:	4b71      	ldr	r3, [pc, #452]	; (80024f0 <HAL_TIM_PeriodElapsedCallback+0x800>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d81d      	bhi.n	800236e <HAL_TIM_PeriodElapsedCallback+0x67e>
				timecount_TIM14 = 0 ;
 8002332:	4b6f      	ldr	r3, [pc, #444]	; (80024f0 <HAL_TIM_PeriodElapsedCallback+0x800>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
				Motor[4].NumberofSteps--;
 8002338:	4b68      	ldr	r3, [pc, #416]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 800233a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800233e:	3b01      	subs	r3, #1
 8002340:	4a66      	ldr	r2, [pc, #408]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8002342:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
				if (Motor[4].MotorDirection == 1){
 8002346:	4b65      	ldr	r3, [pc, #404]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8002348:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800234c:	2b01      	cmp	r3, #1
 800234e:	d107      	bne.n	8002360 <HAL_TIM_PeriodElapsedCallback+0x670>
					Motor[4].StepPosition++;
 8002350:	4b62      	ldr	r3, [pc, #392]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8002352:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8002356:	3301      	adds	r3, #1
 8002358:	4a60      	ldr	r2, [pc, #384]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 800235a:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
 800235e:	e006      	b.n	800236e <HAL_TIM_PeriodElapsedCallback+0x67e>
					Motor[4].StepPosition--;
 8002360:	4b5e      	ldr	r3, [pc, #376]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8002362:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8002366:	3b01      	subs	r3, #1
 8002368:	4a5c      	ldr	r2, [pc, #368]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 800236a:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
			if(Motor[4].StepPosition == Motor[4].TargetPosition)
 800236e:	4b5b      	ldr	r3, [pc, #364]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8002370:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 8002374:	4b59      	ldr	r3, [pc, #356]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8002376:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800237a:	429a      	cmp	r2, r3
 800237c:	d107      	bne.n	800238e <HAL_TIM_PeriodElapsedCallback+0x69e>
				Motor[4].Status = 0;
 800237e:	4b57      	ldr	r3, [pc, #348]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8002380:	2200      	movs	r2, #0
 8002382:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
				HAL_TIM_Base_Stop_IT(&htim14);
 8002386:	485e      	ldr	r0, [pc, #376]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x810>)
 8002388:	f008 ffda 	bl	800b340 <HAL_TIM_Base_Stop_IT>
 800238c:	e00b      	b.n	80023a6 <HAL_TIM_PeriodElapsedCallback+0x6b6>
			else if (Motor[4].NumberofSteps <= 0){
 800238e:	4b53      	ldr	r3, [pc, #332]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8002390:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8002394:	2b00      	cmp	r3, #0
 8002396:	d106      	bne.n	80023a6 <HAL_TIM_PeriodElapsedCallback+0x6b6>
				Motor[4].Status = 0;
 8002398:	4b50      	ldr	r3, [pc, #320]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 800239a:	2200      	movs	r2, #0
 800239c:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
				HAL_TIM_Base_Stop_IT(&htim14);
 80023a0:	4857      	ldr	r0, [pc, #348]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x810>)
 80023a2:	f008 ffcd 	bl	800b340 <HAL_TIM_Base_Stop_IT>
			if (Motor[4].NumberofSteps > Motor[4].NumberofSteps_StopAccel)
 80023a6:	4b4d      	ldr	r3, [pc, #308]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 80023a8:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 80023ac:	4b4b      	ldr	r3, [pc, #300]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 80023ae:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d90f      	bls.n	80023d6 <HAL_TIM_PeriodElapsedCallback+0x6e6>
				if(AccelDecelcount_TIM14 >= Motor[4].AccelerationTimeTMR)
 80023b6:	4b49      	ldr	r3, [pc, #292]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 80023b8:	f8d3 21d8 	ldr.w	r2, [r3, #472]	; 0x1d8
 80023bc:	4b4d      	ldr	r3, [pc, #308]	; (80024f4 <HAL_TIM_PeriodElapsedCallback+0x804>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	f200 82ff 	bhi.w	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
					AccelDecelcount_TIM14=0;
 80023c6:	4b4b      	ldr	r3, [pc, #300]	; (80024f4 <HAL_TIM_PeriodElapsedCallback+0x804>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
					AccelDecel(ACCEL,&Motor[4]);
 80023cc:	494d      	ldr	r1, [pc, #308]	; (8002504 <HAL_TIM_PeriodElapsedCallback+0x814>)
 80023ce:	2001      	movs	r0, #1
 80023d0:	f001 ffbe 	bl	8004350 <AccelDecel>
}
 80023d4:	e2f6      	b.n	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
			else if (Motor[4].NumberofSteps < Motor[4].NumberofSteps_BeginDecel)
 80023d6:	4b41      	ldr	r3, [pc, #260]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 80023d8:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 80023dc:	4b3f      	ldr	r3, [pc, #252]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 80023de:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80023e2:	429a      	cmp	r2, r3
 80023e4:	f080 82ee 	bcs.w	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
				if(AccelDecelcount_TIM14 >= Motor[4].DecelerationTimeTMR)
 80023e8:	4b3c      	ldr	r3, [pc, #240]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 80023ea:	f8d3 21dc 	ldr.w	r2, [r3, #476]	; 0x1dc
 80023ee:	4b41      	ldr	r3, [pc, #260]	; (80024f4 <HAL_TIM_PeriodElapsedCallback+0x804>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	f200 82e6 	bhi.w	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
					AccelDecelcount_TIM14=0;
 80023f8:	4b3e      	ldr	r3, [pc, #248]	; (80024f4 <HAL_TIM_PeriodElapsedCallback+0x804>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
					AccelDecel(DECEL,&Motor[4]);
 80023fe:	4941      	ldr	r1, [pc, #260]	; (8002504 <HAL_TIM_PeriodElapsedCallback+0x814>)
 8002400:	2002      	movs	r0, #2
 8002402:	f001 ffa5 	bl	8004350 <AccelDecel>
}
 8002406:	e2dd      	b.n	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
	else if (htim->Instance == TIM6)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a3e      	ldr	r2, [pc, #248]	; (8002508 <HAL_TIM_PeriodElapsedCallback+0x818>)
 800240e:	4293      	cmp	r3, r2
 8002410:	f040 80fb 	bne.w	800260a <HAL_TIM_PeriodElapsedCallback+0x91a>
			timecount_TIM6++;
 8002414:	4b3d      	ldr	r3, [pc, #244]	; (800250c <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	3301      	adds	r3, #1
 800241a:	4a3c      	ldr	r2, [pc, #240]	; (800250c <HAL_TIM_PeriodElapsedCallback+0x81c>)
 800241c:	6013      	str	r3, [r2, #0]
			AccelDecelcount_TIM6++;
 800241e:	4b3c      	ldr	r3, [pc, #240]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0x820>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	3301      	adds	r3, #1
 8002424:	4a3a      	ldr	r2, [pc, #232]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0x820>)
 8002426:	6013      	str	r3, [r2, #0]
			if(timecount_TIM6 >= Motor[5].StepperSpeedTMR)
 8002428:	4b2c      	ldr	r3, [pc, #176]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 800242a:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 800242e:	4b37      	ldr	r3, [pc, #220]	; (800250c <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	f200 8091 	bhi.w	800255a <HAL_TIM_PeriodElapsedCallback+0x86a>
				timecount_TIM6 = 0 ;
 8002438:	4b34      	ldr	r3, [pc, #208]	; (800250c <HAL_TIM_PeriodElapsedCallback+0x81c>)
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
				if (Motor[5].MotorDirection == 1){
 800243e:	4b27      	ldr	r3, [pc, #156]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8002440:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8002444:	2b01      	cmp	r3, #1
 8002446:	d127      	bne.n	8002498 <HAL_TIM_PeriodElapsedCallback+0x7a8>
					switch ( Motor5_State )
 8002448:	4b32      	ldr	r3, [pc, #200]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x824>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	3b01      	subs	r3, #1
 800244e:	2b03      	cmp	r3, #3
 8002450:	d868      	bhi.n	8002524 <HAL_TIM_PeriodElapsedCallback+0x834>
 8002452:	a201      	add	r2, pc, #4	; (adr r2, 8002458 <HAL_TIM_PeriodElapsedCallback+0x768>)
 8002454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002458:	08002469 	.word	0x08002469
 800245c:	08002475 	.word	0x08002475
 8002460:	08002481 	.word	0x08002481
 8002464:	0800248d 	.word	0x0800248d
						Motor5_AB();
 8002468:	f001 fd68 	bl	8003f3c <Motor5_AB>
						Motor5_State = 2 ;
 800246c:	4b29      	ldr	r3, [pc, #164]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x824>)
 800246e:	2202      	movs	r2, #2
 8002470:	701a      	strb	r2, [r3, #0]
						break;
 8002472:	e057      	b.n	8002524 <HAL_TIM_PeriodElapsedCallback+0x834>
						Motor5_Ab();
 8002474:	f001 fdbc 	bl	8003ff0 <Motor5_Ab>
						Motor5_State = 3 ;
 8002478:	4b26      	ldr	r3, [pc, #152]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x824>)
 800247a:	2203      	movs	r2, #3
 800247c:	701a      	strb	r2, [r3, #0]
						break;
 800247e:	e051      	b.n	8002524 <HAL_TIM_PeriodElapsedCallback+0x834>
						Motor5_ab();
 8002480:	f001 fd98 	bl	8003fb4 <Motor5_ab>
						Motor5_State = 4 ;
 8002484:	4b23      	ldr	r3, [pc, #140]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x824>)
 8002486:	2204      	movs	r2, #4
 8002488:	701a      	strb	r2, [r3, #0]
						break;
 800248a:	e04b      	b.n	8002524 <HAL_TIM_PeriodElapsedCallback+0x834>
						Motor5_aB();
 800248c:	f001 fd74 	bl	8003f78 <Motor5_aB>
						Motor5_State = 1 ;
 8002490:	4b20      	ldr	r3, [pc, #128]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x824>)
 8002492:	2201      	movs	r2, #1
 8002494:	701a      	strb	r2, [r3, #0]
						break;
 8002496:	e045      	b.n	8002524 <HAL_TIM_PeriodElapsedCallback+0x834>
					switch ( Motor5_State )
 8002498:	4b1e      	ldr	r3, [pc, #120]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x824>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	3b01      	subs	r3, #1
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d840      	bhi.n	8002524 <HAL_TIM_PeriodElapsedCallback+0x834>
 80024a2:	a201      	add	r2, pc, #4	; (adr r2, 80024a8 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 80024a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a8:	080024b9 	.word	0x080024b9
 80024ac:	080024c5 	.word	0x080024c5
 80024b0:	080024d1 	.word	0x080024d1
 80024b4:	08002519 	.word	0x08002519
						Motor5_AB();
 80024b8:	f001 fd40 	bl	8003f3c <Motor5_AB>
						Motor5_State = 2 ;
 80024bc:	4b15      	ldr	r3, [pc, #84]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x824>)
 80024be:	2202      	movs	r2, #2
 80024c0:	701a      	strb	r2, [r3, #0]
						break;
 80024c2:	e02f      	b.n	8002524 <HAL_TIM_PeriodElapsedCallback+0x834>
						Motor5_aB();
 80024c4:	f001 fd58 	bl	8003f78 <Motor5_aB>
						Motor5_State = 3 ;
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x824>)
 80024ca:	2203      	movs	r2, #3
 80024cc:	701a      	strb	r2, [r3, #0]
						break;
 80024ce:	e029      	b.n	8002524 <HAL_TIM_PeriodElapsedCallback+0x834>
						Motor5_ab();
 80024d0:	f001 fd70 	bl	8003fb4 <Motor5_ab>
						Motor5_State = 4 ;
 80024d4:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x824>)
 80024d6:	2204      	movs	r2, #4
 80024d8:	701a      	strb	r2, [r3, #0]
						break;
 80024da:	e023      	b.n	8002524 <HAL_TIM_PeriodElapsedCallback+0x834>
 80024dc:	200008b0 	.word	0x200008b0
 80024e0:	200006a4 	.word	0x200006a4
 80024e4:	200003ac 	.word	0x200003ac
 80024e8:	200009d0 	.word	0x200009d0
 80024ec:	40002000 	.word	0x40002000
 80024f0:	200003b0 	.word	0x200003b0
 80024f4:	200003b4 	.word	0x200003b4
 80024f8:	20000000 	.word	0x20000000
 80024fc:	40021000 	.word	0x40021000
 8002500:	200006ec 	.word	0x200006ec
 8002504:	20000a30 	.word	0x20000a30
 8002508:	40001000 	.word	0x40001000
 800250c:	200003b8 	.word	0x200003b8
 8002510:	200003bc 	.word	0x200003bc
 8002514:	20000004 	.word	0x20000004
						Motor5_Ab();
 8002518:	f001 fd6a 	bl	8003ff0 <Motor5_Ab>
						Motor5_State = 1 ;
 800251c:	4bac      	ldr	r3, [pc, #688]	; (80027d0 <HAL_TIM_PeriodElapsedCallback+0xae0>)
 800251e:	2201      	movs	r2, #1
 8002520:	701a      	strb	r2, [r3, #0]
						break;
 8002522:	bf00      	nop
				Motor[5].NumberofSteps--;
 8002524:	4bab      	ldr	r3, [pc, #684]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 8002526:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800252a:	3b01      	subs	r3, #1
 800252c:	4aa9      	ldr	r2, [pc, #676]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 800252e:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
				if (Motor[5].MotorDirection == 1){
 8002532:	4ba8      	ldr	r3, [pc, #672]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 8002534:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8002538:	2b01      	cmp	r3, #1
 800253a:	d107      	bne.n	800254c <HAL_TIM_PeriodElapsedCallback+0x85c>
					Motor[5].StepPosition++;
 800253c:	4ba5      	ldr	r3, [pc, #660]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 800253e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002542:	3301      	adds	r3, #1
 8002544:	4aa3      	ldr	r2, [pc, #652]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 8002546:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
 800254a:	e006      	b.n	800255a <HAL_TIM_PeriodElapsedCallback+0x86a>
					Motor[5].StepPosition--;
 800254c:	4ba1      	ldr	r3, [pc, #644]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 800254e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002552:	3b01      	subs	r3, #1
 8002554:	4a9f      	ldr	r2, [pc, #636]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 8002556:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
			if(Motor[5].StepPosition == Motor[5].TargetPosition){
 800255a:	4b9e      	ldr	r3, [pc, #632]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 800255c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8002560:	4b9c      	ldr	r3, [pc, #624]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 8002562:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002566:	429a      	cmp	r2, r3
 8002568:	d110      	bne.n	800258c <HAL_TIM_PeriodElapsedCallback+0x89c>
				Motor[5].Status = 0;
 800256a:	4b9a      	ldr	r3, [pc, #616]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
				Motor5_Release();
 8002572:	f001 fd5b 	bl	800402c <Motor5_Release>
				printf("---Motor5 Steps Position:%ld---\r\n",Motor[5].StepPosition);
 8002576:	4b97      	ldr	r3, [pc, #604]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 8002578:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800257c:	4619      	mov	r1, r3
 800257e:	4896      	ldr	r0, [pc, #600]	; (80027d8 <HAL_TIM_PeriodElapsedCallback+0xae8>)
 8002580:	f00e f824 	bl	80105cc <iprintf>
				HAL_TIM_Base_Stop_IT(&htim6);
 8002584:	4895      	ldr	r0, [pc, #596]	; (80027dc <HAL_TIM_PeriodElapsedCallback+0xaec>)
 8002586:	f008 fedb 	bl	800b340 <HAL_TIM_Base_Stop_IT>
 800258a:	e00d      	b.n	80025a8 <HAL_TIM_PeriodElapsedCallback+0x8b8>
			else if (Motor[5].NumberofSteps <= 0){
 800258c:	4b91      	ldr	r3, [pc, #580]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 800258e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8002592:	2b00      	cmp	r3, #0
 8002594:	d108      	bne.n	80025a8 <HAL_TIM_PeriodElapsedCallback+0x8b8>
				Motor[5].Status = 0;
 8002596:	4b8f      	ldr	r3, [pc, #572]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
				Motor5_Release();
 800259e:	f001 fd45 	bl	800402c <Motor5_Release>
				HAL_TIM_Base_Stop_IT(&htim6);
 80025a2:	488e      	ldr	r0, [pc, #568]	; (80027dc <HAL_TIM_PeriodElapsedCallback+0xaec>)
 80025a4:	f008 fecc 	bl	800b340 <HAL_TIM_Base_Stop_IT>
			if (Motor[5].NumberofSteps > Motor[5].NumberofSteps_StopAccel){
 80025a8:	4b8a      	ldr	r3, [pc, #552]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 80025aa:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80025ae:	4b89      	ldr	r3, [pc, #548]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 80025b0:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d90f      	bls.n	80025d8 <HAL_TIM_PeriodElapsedCallback+0x8e8>
				if(AccelDecelcount_TIM6 >= Motor[5].AccelerationTimeTMR){
 80025b8:	4b86      	ldr	r3, [pc, #536]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 80025ba:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80025be:	4b88      	ldr	r3, [pc, #544]	; (80027e0 <HAL_TIM_PeriodElapsedCallback+0xaf0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	f200 81fe 	bhi.w	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
					AccelDecelcount_TIM6=0;
 80025c8:	4b85      	ldr	r3, [pc, #532]	; (80027e0 <HAL_TIM_PeriodElapsedCallback+0xaf0>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
					AccelDecel(ACCEL,&Motor[5]);
 80025ce:	4985      	ldr	r1, [pc, #532]	; (80027e4 <HAL_TIM_PeriodElapsedCallback+0xaf4>)
 80025d0:	2001      	movs	r0, #1
 80025d2:	f001 febd 	bl	8004350 <AccelDecel>
}
 80025d6:	e1f5      	b.n	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
			else if (Motor[5].NumberofSteps < Motor[5].NumberofSteps_BeginDecel){
 80025d8:	4b7e      	ldr	r3, [pc, #504]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 80025da:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80025de:	4b7d      	ldr	r3, [pc, #500]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 80025e0:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 80025e4:	429a      	cmp	r2, r3
 80025e6:	f080 81ed 	bcs.w	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
				if(AccelDecelcount_TIM6 >= Motor[5].DecelerationTimeTMR){
 80025ea:	4b7a      	ldr	r3, [pc, #488]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 80025ec:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 80025f0:	4b7b      	ldr	r3, [pc, #492]	; (80027e0 <HAL_TIM_PeriodElapsedCallback+0xaf0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	f200 81e5 	bhi.w	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
					AccelDecelcount_TIM6=0;
 80025fa:	4b79      	ldr	r3, [pc, #484]	; (80027e0 <HAL_TIM_PeriodElapsedCallback+0xaf0>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
					AccelDecel(DECEL,&Motor[5]);
 8002600:	4978      	ldr	r1, [pc, #480]	; (80027e4 <HAL_TIM_PeriodElapsedCallback+0xaf4>)
 8002602:	2002      	movs	r0, #2
 8002604:	f001 fea4 	bl	8004350 <AccelDecel>
}
 8002608:	e1dc      	b.n	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
	else if (htim->Instance == TIM7)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a76      	ldr	r2, [pc, #472]	; (80027e8 <HAL_TIM_PeriodElapsedCallback+0xaf8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	f040 80f7 	bne.w	8002804 <HAL_TIM_PeriodElapsedCallback+0xb14>
			timecount_TIM7++;
 8002616:	4b75      	ldr	r3, [pc, #468]	; (80027ec <HAL_TIM_PeriodElapsedCallback+0xafc>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	3301      	adds	r3, #1
 800261c:	4a73      	ldr	r2, [pc, #460]	; (80027ec <HAL_TIM_PeriodElapsedCallback+0xafc>)
 800261e:	6013      	str	r3, [r2, #0]
			AccelDecelcount_TIM7++;
 8002620:	4b73      	ldr	r3, [pc, #460]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0xb00>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	3301      	adds	r3, #1
 8002626:	4a72      	ldr	r2, [pc, #456]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0xb00>)
 8002628:	6013      	str	r3, [r2, #0]
			if(timecount_TIM7 >= Motor[6].StepperSpeedTMR)
 800262a:	4b6a      	ldr	r3, [pc, #424]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 800262c:	f8d3 2288 	ldr.w	r2, [r3, #648]	; 0x288
 8002630:	4b6e      	ldr	r3, [pc, #440]	; (80027ec <HAL_TIM_PeriodElapsedCallback+0xafc>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	429a      	cmp	r2, r3
 8002636:	d873      	bhi.n	8002720 <HAL_TIM_PeriodElapsedCallback+0xa30>
				timecount_TIM7 = 0 ;
 8002638:	4b6c      	ldr	r3, [pc, #432]	; (80027ec <HAL_TIM_PeriodElapsedCallback+0xafc>)
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
				Motor[6].NumberofSteps--;
 800263e:	4b65      	ldr	r3, [pc, #404]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 8002640:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002644:	3b01      	subs	r3, #1
 8002646:	4a63      	ldr	r2, [pc, #396]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 8002648:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c
				if (Motor[6].MotorDirection == 1){
 800264c:	4b61      	ldr	r3, [pc, #388]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 800264e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8002652:	2b01      	cmp	r3, #1
 8002654:	d128      	bne.n	80026a8 <HAL_TIM_PeriodElapsedCallback+0x9b8>
					switch ( Motor6_State )
 8002656:	4b67      	ldr	r3, [pc, #412]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	3b01      	subs	r3, #1
 800265c:	2b03      	cmp	r3, #3
 800265e:	d84b      	bhi.n	80026f8 <HAL_TIM_PeriodElapsedCallback+0xa08>
 8002660:	a201      	add	r2, pc, #4	; (adr r2, 8002668 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8002662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002666:	bf00      	nop
 8002668:	08002679 	.word	0x08002679
 800266c:	08002685 	.word	0x08002685
 8002670:	08002691 	.word	0x08002691
 8002674:	0800269d 	.word	0x0800269d
						Motor6_AB();
 8002678:	f001 fcf6 	bl	8004068 <Motor6_AB>
						Motor6_State = 2 ;
 800267c:	4b5d      	ldr	r3, [pc, #372]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 800267e:	2202      	movs	r2, #2
 8002680:	701a      	strb	r2, [r3, #0]
						break;
 8002682:	e039      	b.n	80026f8 <HAL_TIM_PeriodElapsedCallback+0xa08>
						Motor6_Ab();
 8002684:	f001 fd4a 	bl	800411c <Motor6_Ab>
						Motor6_State = 3 ;
 8002688:	4b5a      	ldr	r3, [pc, #360]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 800268a:	2203      	movs	r2, #3
 800268c:	701a      	strb	r2, [r3, #0]
						break;
 800268e:	e033      	b.n	80026f8 <HAL_TIM_PeriodElapsedCallback+0xa08>
						Motor6_ab();
 8002690:	f001 fd26 	bl	80040e0 <Motor6_ab>
						Motor6_State = 4 ;
 8002694:	4b57      	ldr	r3, [pc, #348]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 8002696:	2204      	movs	r2, #4
 8002698:	701a      	strb	r2, [r3, #0]
						break;
 800269a:	e02d      	b.n	80026f8 <HAL_TIM_PeriodElapsedCallback+0xa08>
						Motor6_aB();
 800269c:	f001 fd02 	bl	80040a4 <Motor6_aB>
						Motor6_State = 1 ;
 80026a0:	4b54      	ldr	r3, [pc, #336]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	701a      	strb	r2, [r3, #0]
						break;
 80026a6:	e027      	b.n	80026f8 <HAL_TIM_PeriodElapsedCallback+0xa08>
					switch ( Motor6_State )
 80026a8:	4b52      	ldr	r3, [pc, #328]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	3b01      	subs	r3, #1
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d822      	bhi.n	80026f8 <HAL_TIM_PeriodElapsedCallback+0xa08>
 80026b2:	a201      	add	r2, pc, #4	; (adr r2, 80026b8 <HAL_TIM_PeriodElapsedCallback+0x9c8>)
 80026b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b8:	080026c9 	.word	0x080026c9
 80026bc:	080026d5 	.word	0x080026d5
 80026c0:	080026e1 	.word	0x080026e1
 80026c4:	080026ed 	.word	0x080026ed
						Motor6_AB();
 80026c8:	f001 fcce 	bl	8004068 <Motor6_AB>
						Motor6_State = 2 ;
 80026cc:	4b49      	ldr	r3, [pc, #292]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 80026ce:	2202      	movs	r2, #2
 80026d0:	701a      	strb	r2, [r3, #0]
						break;
 80026d2:	e011      	b.n	80026f8 <HAL_TIM_PeriodElapsedCallback+0xa08>
						Motor6_aB();
 80026d4:	f001 fce6 	bl	80040a4 <Motor6_aB>
						Motor6_State = 3 ;
 80026d8:	4b46      	ldr	r3, [pc, #280]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 80026da:	2203      	movs	r2, #3
 80026dc:	701a      	strb	r2, [r3, #0]
						break;
 80026de:	e00b      	b.n	80026f8 <HAL_TIM_PeriodElapsedCallback+0xa08>
						Motor6_ab();
 80026e0:	f001 fcfe 	bl	80040e0 <Motor6_ab>
						Motor6_State = 4 ;
 80026e4:	4b43      	ldr	r3, [pc, #268]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 80026e6:	2204      	movs	r2, #4
 80026e8:	701a      	strb	r2, [r3, #0]
						break;
 80026ea:	e005      	b.n	80026f8 <HAL_TIM_PeriodElapsedCallback+0xa08>
						Motor6_Ab();
 80026ec:	f001 fd16 	bl	800411c <Motor6_Ab>
						Motor6_State = 1 ;
 80026f0:	4b40      	ldr	r3, [pc, #256]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	701a      	strb	r2, [r3, #0]
						break;
 80026f6:	bf00      	nop
				if (Motor[6].MotorDirection == 1){
 80026f8:	4b36      	ldr	r3, [pc, #216]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 80026fa:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d107      	bne.n	8002712 <HAL_TIM_PeriodElapsedCallback+0xa22>
					Motor[6].StepPosition++;
 8002702:	4b34      	ldr	r3, [pc, #208]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 8002704:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8002708:	3301      	adds	r3, #1
 800270a:	4a32      	ldr	r2, [pc, #200]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 800270c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
 8002710:	e006      	b.n	8002720 <HAL_TIM_PeriodElapsedCallback+0xa30>
					Motor[6].StepPosition--;
 8002712:	4b30      	ldr	r3, [pc, #192]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 8002714:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8002718:	3b01      	subs	r3, #1
 800271a:	4a2e      	ldr	r2, [pc, #184]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 800271c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
			if(Motor[6].StepPosition == Motor[6].TargetPosition){
 8002720:	4b2c      	ldr	r3, [pc, #176]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 8002722:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8002726:	4b2b      	ldr	r3, [pc, #172]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 8002728:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800272c:	429a      	cmp	r2, r3
 800272e:	d110      	bne.n	8002752 <HAL_TIM_PeriodElapsedCallback+0xa62>
				Motor[6].Status = 0;
 8002730:	4b28      	ldr	r3, [pc, #160]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
				Motor6_Release();
 8002738:	f001 fd0e 	bl	8004158 <Motor6_Release>
				printf("---Motor[6] Steps Position:%ld---\r\n",Motor[6].StepPosition);
 800273c:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 800273e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8002742:	4619      	mov	r1, r3
 8002744:	482c      	ldr	r0, [pc, #176]	; (80027f8 <HAL_TIM_PeriodElapsedCallback+0xb08>)
 8002746:	f00d ff41 	bl	80105cc <iprintf>
				HAL_TIM_Base_Stop_IT(&htim7);
 800274a:	482c      	ldr	r0, [pc, #176]	; (80027fc <HAL_TIM_PeriodElapsedCallback+0xb0c>)
 800274c:	f008 fdf8 	bl	800b340 <HAL_TIM_Base_Stop_IT>
 8002750:	e00d      	b.n	800276e <HAL_TIM_PeriodElapsedCallback+0xa7e>
			else if (Motor[6].NumberofSteps <= 0){
 8002752:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 8002754:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002758:	2b00      	cmp	r3, #0
 800275a:	d108      	bne.n	800276e <HAL_TIM_PeriodElapsedCallback+0xa7e>
				Motor[6].Status = 0;
 800275c:	4b1d      	ldr	r3, [pc, #116]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
				Motor6_Release();
 8002764:	f001 fcf8 	bl	8004158 <Motor6_Release>
				HAL_TIM_Base_Stop_IT(&htim7);
 8002768:	4824      	ldr	r0, [pc, #144]	; (80027fc <HAL_TIM_PeriodElapsedCallback+0xb0c>)
 800276a:	f008 fde9 	bl	800b340 <HAL_TIM_Base_Stop_IT>
			if (Motor[6].NumberofSteps > Motor[6].NumberofSteps_StopAccel){
 800276e:	4b19      	ldr	r3, [pc, #100]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 8002770:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
 8002774:	4b17      	ldr	r3, [pc, #92]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 8002776:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800277a:	429a      	cmp	r2, r3
 800277c:	d90f      	bls.n	800279e <HAL_TIM_PeriodElapsedCallback+0xaae>
				if(AccelDecelcount_TIM7 >= Motor[6].AccelerationTimeTMR){
 800277e:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 8002780:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
 8002784:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0xb00>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	f200 811b 	bhi.w	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
					AccelDecelcount_TIM7=0;
 800278e:	4b18      	ldr	r3, [pc, #96]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0xb00>)
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
					AccelDecel(ACCEL,&Motor[6]);
 8002794:	491a      	ldr	r1, [pc, #104]	; (8002800 <HAL_TIM_PeriodElapsedCallback+0xb10>)
 8002796:	2001      	movs	r0, #1
 8002798:	f001 fdda 	bl	8004350 <AccelDecel>
}
 800279c:	e112      	b.n	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
			else if (Motor[6].NumberofSteps < Motor[6].NumberofSteps_BeginDecel){
 800279e:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 80027a0:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
 80027a4:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 80027a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80027aa:	429a      	cmp	r2, r3
 80027ac:	f080 810a 	bcs.w	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
				if(AccelDecelcount_TIM7 >= Motor[6].DecelerationTimeTMR){
 80027b0:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0xae4>)
 80027b2:	f8d3 229c 	ldr.w	r2, [r3, #668]	; 0x29c
 80027b6:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0xb00>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	f200 8102 	bhi.w	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
					AccelDecelcount_TIM7=0;
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0xb00>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
					AccelDecel(DECEL,&Motor[6]);
 80027c6:	490e      	ldr	r1, [pc, #56]	; (8002800 <HAL_TIM_PeriodElapsedCallback+0xb10>)
 80027c8:	2002      	movs	r0, #2
 80027ca:	f001 fdc1 	bl	8004350 <AccelDecel>
}
 80027ce:	e0f9      	b.n	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
 80027d0:	20000004 	.word	0x20000004
 80027d4:	200008b0 	.word	0x200008b0
 80027d8:	080126b8 	.word	0x080126b8
 80027dc:	200004f4 	.word	0x200004f4
 80027e0:	200003bc 	.word	0x200003bc
 80027e4:	20000a90 	.word	0x20000a90
 80027e8:	40001400 	.word	0x40001400
 80027ec:	200003c0 	.word	0x200003c0
 80027f0:	200003c4 	.word	0x200003c4
 80027f4:	20000005 	.word	0x20000005
 80027f8:	080126dc 	.word	0x080126dc
 80027fc:	2000053c 	.word	0x2000053c
 8002800:	20000af0 	.word	0x20000af0
	else if (htim->Instance == TIM12)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a70      	ldr	r2, [pc, #448]	; (80029cc <HAL_TIM_PeriodElapsedCallback+0xcdc>)
 800280a:	4293      	cmp	r3, r2
 800280c:	f040 80da 	bne.w	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
			timecount_TIM12_DCM7++;
 8002810:	4b6f      	ldr	r3, [pc, #444]	; (80029d0 <HAL_TIM_PeriodElapsedCallback+0xce0>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	3301      	adds	r3, #1
 8002816:	4a6e      	ldr	r2, [pc, #440]	; (80029d0 <HAL_TIM_PeriodElapsedCallback+0xce0>)
 8002818:	6013      	str	r3, [r2, #0]
			timecount_TIM12_DCM8++;
 800281a:	4b6e      	ldr	r3, [pc, #440]	; (80029d4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	3301      	adds	r3, #1
 8002820:	4a6c      	ldr	r2, [pc, #432]	; (80029d4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8002822:	6013      	str	r3, [r2, #0]
			if (Motor[7].Status){
 8002824:	4b6c      	ldr	r3, [pc, #432]	; (80029d8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8002826:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d060      	beq.n	80028f0 <HAL_TIM_PeriodElapsedCallback+0xc00>
				if(timecount_TIM12_DCM7 <= Motor[7].AccelerationTimeTMR)
 800282e:	4b6a      	ldr	r3, [pc, #424]	; (80029d8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8002830:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8002834:	4b66      	ldr	r3, [pc, #408]	; (80029d0 <HAL_TIM_PeriodElapsedCallback+0xce0>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d323      	bcc.n	8002884 <HAL_TIM_PeriodElapsedCallback+0xb94>
					switch( Motor[7].Status ){
 800283c:	4b66      	ldr	r3, [pc, #408]	; (80029d8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 800283e:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
 8002842:	2b03      	cmp	r3, #3
 8002844:	d012      	beq.n	800286c <HAL_TIM_PeriodElapsedCallback+0xb7c>
 8002846:	2b03      	cmp	r3, #3
 8002848:	dc48      	bgt.n	80028dc <HAL_TIM_PeriodElapsedCallback+0xbec>
 800284a:	2b01      	cmp	r3, #1
 800284c:	d008      	beq.n	8002860 <HAL_TIM_PeriodElapsedCallback+0xb70>
 800284e:	2b02      	cmp	r3, #2
 8002850:	d144      	bne.n	80028dc <HAL_TIM_PeriodElapsedCallback+0xbec>
						VM7_IN1_H();
 8002852:	2201      	movs	r2, #1
 8002854:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002858:	4860      	ldr	r0, [pc, #384]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0xcec>)
 800285a:	f005 fda7 	bl	80083ac <HAL_GPIO_WritePin>
						break;
 800285e:	e03d      	b.n	80028dc <HAL_TIM_PeriodElapsedCallback+0xbec>
						VM7_IN4_H();
 8002860:	2201      	movs	r2, #1
 8002862:	2102      	movs	r1, #2
 8002864:	485d      	ldr	r0, [pc, #372]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0xcec>)
 8002866:	f005 fda1 	bl	80083ac <HAL_GPIO_WritePin>
						break;
 800286a:	e037      	b.n	80028dc <HAL_TIM_PeriodElapsedCallback+0xbec>
						VM7_IN1_H();
 800286c:	2201      	movs	r2, #1
 800286e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002872:	485a      	ldr	r0, [pc, #360]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0xcec>)
 8002874:	f005 fd9a 	bl	80083ac <HAL_GPIO_WritePin>
						VM7_IN4_H();
 8002878:	2201      	movs	r2, #1
 800287a:	2102      	movs	r1, #2
 800287c:	4857      	ldr	r0, [pc, #348]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0xcec>)
 800287e:	f005 fd95 	bl	80083ac <HAL_GPIO_WritePin>
						break;
 8002882:	e02b      	b.n	80028dc <HAL_TIM_PeriodElapsedCallback+0xbec>
				else if(timecount_TIM12_DCM7 > Motor[7].AccelerationTimeTMR)
 8002884:	4b54      	ldr	r3, [pc, #336]	; (80029d8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8002886:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800288a:	4b51      	ldr	r3, [pc, #324]	; (80029d0 <HAL_TIM_PeriodElapsedCallback+0xce0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d223      	bcs.n	80028da <HAL_TIM_PeriodElapsedCallback+0xbea>
					switch( Motor[7].Status ){
 8002892:	4b51      	ldr	r3, [pc, #324]	; (80029d8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8002894:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
 8002898:	2b03      	cmp	r3, #3
 800289a:	d012      	beq.n	80028c2 <HAL_TIM_PeriodElapsedCallback+0xbd2>
 800289c:	2b03      	cmp	r3, #3
 800289e:	dc1d      	bgt.n	80028dc <HAL_TIM_PeriodElapsedCallback+0xbec>
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d008      	beq.n	80028b6 <HAL_TIM_PeriodElapsedCallback+0xbc6>
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d119      	bne.n	80028dc <HAL_TIM_PeriodElapsedCallback+0xbec>
						VM7_IN1_L();
 80028a8:	2200      	movs	r2, #0
 80028aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028ae:	484b      	ldr	r0, [pc, #300]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0xcec>)
 80028b0:	f005 fd7c 	bl	80083ac <HAL_GPIO_WritePin>
						break;
 80028b4:	e012      	b.n	80028dc <HAL_TIM_PeriodElapsedCallback+0xbec>
						VM7_IN4_L();
 80028b6:	2200      	movs	r2, #0
 80028b8:	2102      	movs	r1, #2
 80028ba:	4848      	ldr	r0, [pc, #288]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0xcec>)
 80028bc:	f005 fd76 	bl	80083ac <HAL_GPIO_WritePin>
						break;
 80028c0:	e00c      	b.n	80028dc <HAL_TIM_PeriodElapsedCallback+0xbec>
						VM7_IN1_L();
 80028c2:	2200      	movs	r2, #0
 80028c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028c8:	4844      	ldr	r0, [pc, #272]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0xcec>)
 80028ca:	f005 fd6f 	bl	80083ac <HAL_GPIO_WritePin>
						VM7_IN4_L();
 80028ce:	2200      	movs	r2, #0
 80028d0:	2102      	movs	r1, #2
 80028d2:	4842      	ldr	r0, [pc, #264]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0xcec>)
 80028d4:	f005 fd6a 	bl	80083ac <HAL_GPIO_WritePin>
						break;
 80028d8:	e000      	b.n	80028dc <HAL_TIM_PeriodElapsedCallback+0xbec>
				}
 80028da:	bf00      	nop
				if(timecount_TIM12_DCM7 >= Motor[7].StepperSpeedTMR)
 80028dc:	4b3e      	ldr	r3, [pc, #248]	; (80029d8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 80028de:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80028e2:	4b3b      	ldr	r3, [pc, #236]	; (80029d0 <HAL_TIM_PeriodElapsedCallback+0xce0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d802      	bhi.n	80028f0 <HAL_TIM_PeriodElapsedCallback+0xc00>
					timecount_TIM12_DCM7 = 0 ;
 80028ea:	4b39      	ldr	r3, [pc, #228]	; (80029d0 <HAL_TIM_PeriodElapsedCallback+0xce0>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
			if (Motor[8].Status){
 80028f0:	4b39      	ldr	r3, [pc, #228]	; (80029d8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 80028f2:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d064      	beq.n	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
				if(timecount_TIM12_DCM8 <= Motor[8].AccelerationTimeTMR)
 80028fa:	4b37      	ldr	r3, [pc, #220]	; (80029d8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 80028fc:	f8d3 2358 	ldr.w	r2, [r3, #856]	; 0x358
 8002900:	4b34      	ldr	r3, [pc, #208]	; (80029d4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d323      	bcc.n	8002950 <HAL_TIM_PeriodElapsedCallback+0xc60>
					switch( Motor[8].Status ){
 8002908:	4b33      	ldr	r3, [pc, #204]	; (80029d8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 800290a:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800290e:	2b03      	cmp	r3, #3
 8002910:	d012      	beq.n	8002938 <HAL_TIM_PeriodElapsedCallback+0xc48>
 8002912:	2b03      	cmp	r3, #3
 8002914:	dc48      	bgt.n	80029a8 <HAL_TIM_PeriodElapsedCallback+0xcb8>
 8002916:	2b01      	cmp	r3, #1
 8002918:	d008      	beq.n	800292c <HAL_TIM_PeriodElapsedCallback+0xc3c>
 800291a:	2b02      	cmp	r3, #2
 800291c:	d144      	bne.n	80029a8 <HAL_TIM_PeriodElapsedCallback+0xcb8>
						VM8_IN1_H();
 800291e:	2201      	movs	r2, #1
 8002920:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002924:	482e      	ldr	r0, [pc, #184]	; (80029e0 <HAL_TIM_PeriodElapsedCallback+0xcf0>)
 8002926:	f005 fd41 	bl	80083ac <HAL_GPIO_WritePin>
						break;
 800292a:	e03d      	b.n	80029a8 <HAL_TIM_PeriodElapsedCallback+0xcb8>
						VM8_IN4_H();
 800292c:	2201      	movs	r2, #1
 800292e:	2108      	movs	r1, #8
 8002930:	482c      	ldr	r0, [pc, #176]	; (80029e4 <HAL_TIM_PeriodElapsedCallback+0xcf4>)
 8002932:	f005 fd3b 	bl	80083ac <HAL_GPIO_WritePin>
						break;
 8002936:	e037      	b.n	80029a8 <HAL_TIM_PeriodElapsedCallback+0xcb8>
						VM8_IN1_H();
 8002938:	2201      	movs	r2, #1
 800293a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800293e:	4828      	ldr	r0, [pc, #160]	; (80029e0 <HAL_TIM_PeriodElapsedCallback+0xcf0>)
 8002940:	f005 fd34 	bl	80083ac <HAL_GPIO_WritePin>
						VM8_IN4_H();
 8002944:	2201      	movs	r2, #1
 8002946:	2108      	movs	r1, #8
 8002948:	4826      	ldr	r0, [pc, #152]	; (80029e4 <HAL_TIM_PeriodElapsedCallback+0xcf4>)
 800294a:	f005 fd2f 	bl	80083ac <HAL_GPIO_WritePin>
						break;
 800294e:	e02b      	b.n	80029a8 <HAL_TIM_PeriodElapsedCallback+0xcb8>
				else if(timecount_TIM12_DCM8 > Motor[8].AccelerationTimeTMR)
 8002950:	4b21      	ldr	r3, [pc, #132]	; (80029d8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8002952:	f8d3 2358 	ldr.w	r2, [r3, #856]	; 0x358
 8002956:	4b1f      	ldr	r3, [pc, #124]	; (80029d4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d223      	bcs.n	80029a6 <HAL_TIM_PeriodElapsedCallback+0xcb6>
					switch( Motor[8].Status ){
 800295e:	4b1e      	ldr	r3, [pc, #120]	; (80029d8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8002960:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8002964:	2b03      	cmp	r3, #3
 8002966:	d012      	beq.n	800298e <HAL_TIM_PeriodElapsedCallback+0xc9e>
 8002968:	2b03      	cmp	r3, #3
 800296a:	dc1d      	bgt.n	80029a8 <HAL_TIM_PeriodElapsedCallback+0xcb8>
 800296c:	2b01      	cmp	r3, #1
 800296e:	d008      	beq.n	8002982 <HAL_TIM_PeriodElapsedCallback+0xc92>
 8002970:	2b02      	cmp	r3, #2
 8002972:	d119      	bne.n	80029a8 <HAL_TIM_PeriodElapsedCallback+0xcb8>
						VM8_IN1_L();
 8002974:	2200      	movs	r2, #0
 8002976:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800297a:	4819      	ldr	r0, [pc, #100]	; (80029e0 <HAL_TIM_PeriodElapsedCallback+0xcf0>)
 800297c:	f005 fd16 	bl	80083ac <HAL_GPIO_WritePin>
						break;
 8002980:	e012      	b.n	80029a8 <HAL_TIM_PeriodElapsedCallback+0xcb8>
						VM8_IN4_L();
 8002982:	2200      	movs	r2, #0
 8002984:	2108      	movs	r1, #8
 8002986:	4817      	ldr	r0, [pc, #92]	; (80029e4 <HAL_TIM_PeriodElapsedCallback+0xcf4>)
 8002988:	f005 fd10 	bl	80083ac <HAL_GPIO_WritePin>
						break;
 800298c:	e00c      	b.n	80029a8 <HAL_TIM_PeriodElapsedCallback+0xcb8>
						VM8_IN1_L();
 800298e:	2200      	movs	r2, #0
 8002990:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002994:	4812      	ldr	r0, [pc, #72]	; (80029e0 <HAL_TIM_PeriodElapsedCallback+0xcf0>)
 8002996:	f005 fd09 	bl	80083ac <HAL_GPIO_WritePin>
						VM8_IN4_L();
 800299a:	2200      	movs	r2, #0
 800299c:	2108      	movs	r1, #8
 800299e:	4811      	ldr	r0, [pc, #68]	; (80029e4 <HAL_TIM_PeriodElapsedCallback+0xcf4>)
 80029a0:	f005 fd04 	bl	80083ac <HAL_GPIO_WritePin>
						break;
 80029a4:	e000      	b.n	80029a8 <HAL_TIM_PeriodElapsedCallback+0xcb8>
				}
 80029a6:	bf00      	nop
				if(timecount_TIM12_DCM8 >= Motor[8].StepperSpeedTMR)
 80029a8:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 80029aa:	f8d3 2348 	ldr.w	r2, [r3, #840]	; 0x348
 80029ae:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d806      	bhi.n	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
					timecount_TIM12_DCM8 = 0 ;
 80029b6:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <HAL_TIM_PeriodElapsedCallback+0xce4>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
}
 80029bc:	e002      	b.n	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
					break;
 80029be:	bf00      	nop
 80029c0:	e000      	b.n	80029c4 <HAL_TIM_PeriodElapsedCallback+0xcd4>
					break;
 80029c2:	bf00      	nop
}
 80029c4:	bf00      	nop
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40001800 	.word	0x40001800
 80029d0:	200003c8 	.word	0x200003c8
 80029d4:	200003cc 	.word	0x200003cc
 80029d8:	200008b0 	.word	0x200008b0
 80029dc:	40020400 	.word	0x40020400
 80029e0:	40020c00 	.word	0x40020c00
 80029e4:	40020000 	.word	0x40020000

080029e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029ec:	b672      	cpsid	i
}
 80029ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029f0:	e7fe      	b.n	80029f0 <Error_Handler+0x8>
	...

080029f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	607b      	str	r3, [r7, #4]
 80029fe:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <HAL_MspInit+0x54>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	4a11      	ldr	r2, [pc, #68]	; (8002a48 <HAL_MspInit+0x54>)
 8002a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a08:	6453      	str	r3, [r2, #68]	; 0x44
 8002a0a:	4b0f      	ldr	r3, [pc, #60]	; (8002a48 <HAL_MspInit+0x54>)
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a12:	607b      	str	r3, [r7, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	603b      	str	r3, [r7, #0]
 8002a1a:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_MspInit+0x54>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	4a0a      	ldr	r2, [pc, #40]	; (8002a48 <HAL_MspInit+0x54>)
 8002a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a24:	6413      	str	r3, [r2, #64]	; 0x40
 8002a26:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <HAL_MspInit+0x54>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	603b      	str	r3, [r7, #0]
 8002a30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a32:	2200      	movs	r2, #0
 8002a34:	210f      	movs	r1, #15
 8002a36:	f06f 0001 	mvn.w	r0, #1
 8002a3a:	f004 fe6f 	bl	800771c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40023800 	.word	0x40023800

08002a4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08c      	sub	sp, #48	; 0x30
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	2019      	movs	r0, #25
 8002a62:	f004 fe5b 	bl	800771c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002a66:	2019      	movs	r0, #25
 8002a68:	f004 fe74 	bl	8007754 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	4b1f      	ldr	r3, [pc, #124]	; (8002af0 <HAL_InitTick+0xa4>)
 8002a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a74:	4a1e      	ldr	r2, [pc, #120]	; (8002af0 <HAL_InitTick+0xa4>)
 8002a76:	f043 0301 	orr.w	r3, r3, #1
 8002a7a:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7c:	4b1c      	ldr	r3, [pc, #112]	; (8002af0 <HAL_InitTick+0xa4>)
 8002a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a88:	f107 0210 	add.w	r2, r7, #16
 8002a8c:	f107 0314 	add.w	r3, r7, #20
 8002a90:	4611      	mov	r1, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	f008 fb62 	bl	800b15c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002a98:	f008 fb4c 	bl	800b134 <HAL_RCC_GetPCLK2Freq>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa4:	4a13      	ldr	r2, [pc, #76]	; (8002af4 <HAL_InitTick+0xa8>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	0c9b      	lsrs	r3, r3, #18
 8002aac:	3b01      	subs	r3, #1
 8002aae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002ab0:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <HAL_InitTick+0xac>)
 8002ab2:	4a12      	ldr	r2, [pc, #72]	; (8002afc <HAL_InitTick+0xb0>)
 8002ab4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002ab6:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <HAL_InitTick+0xac>)
 8002ab8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002abc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002abe:	4a0e      	ldr	r2, [pc, #56]	; (8002af8 <HAL_InitTick+0xac>)
 8002ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <HAL_InitTick+0xac>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aca:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <HAL_InitTick+0xac>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002ad0:	4809      	ldr	r0, [pc, #36]	; (8002af8 <HAL_InitTick+0xac>)
 8002ad2:	f008 fb75 	bl	800b1c0 <HAL_TIM_Base_Init>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d104      	bne.n	8002ae6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002adc:	4806      	ldr	r0, [pc, #24]	; (8002af8 <HAL_InitTick+0xac>)
 8002ade:	f008 fbbf 	bl	800b260 <HAL_TIM_Base_Start_IT>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	e000      	b.n	8002ae8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3730      	adds	r7, #48	; 0x30
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40023800 	.word	0x40023800
 8002af4:	431bde83 	.word	0x431bde83
 8002af8:	200003d0 	.word	0x200003d0
 8002afc:	40010000 	.word	0x40010000

08002b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b04:	e7fe      	b.n	8002b04 <NMI_Handler+0x4>

08002b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b06:	b480      	push	{r7}
 8002b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b0a:	e7fe      	b.n	8002b0a <HardFault_Handler+0x4>

08002b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b10:	e7fe      	b.n	8002b10 <MemManage_Handler+0x4>

08002b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b16:	e7fe      	b.n	8002b16 <BusFault_Handler+0x4>

08002b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b1c:	e7fe      	b.n	8002b1c <UsageFault_Handler+0x4>

08002b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Liquid_Detect_Pin);
 8002b30:	2001      	movs	r0, #1
 8002b32:	f005 fc6f 	bl	8008414 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPT_IN1_Pin);
 8002b3e:	2008      	movs	r0, #8
 8002b40:	f005 fc68 	bl	8008414 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002b44:	bf00      	nop
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPT_IN2_Pin);
 8002b4c:	2010      	movs	r0, #16
 8002b4e:	f005 fc61 	bl	8008414 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8002b5c:	4802      	ldr	r0, [pc, #8]	; (8002b68 <DMA1_Stream2_IRQHandler+0x10>)
 8002b5e:	f005 f827 	bl	8007bb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20000334 	.word	0x20000334

08002b6c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPT_IN3_Pin);
 8002b70:	2020      	movs	r0, #32
 8002b72:	f005 fc4f 	bl	8008414 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN4_Pin);
 8002b76:	2040      	movs	r0, #64	; 0x40
 8002b78:	f005 fc4c 	bl	8008414 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN5_Pin);
 8002b7c:	2080      	movs	r0, #128	; 0x80
 8002b7e:	f005 fc49 	bl	8008414 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN6_Pin);
 8002b82:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002b86:	f005 fc45 	bl	8008414 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002b94:	4802      	ldr	r0, [pc, #8]	; (8002ba0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002b96:	f008 fca8 	bl	800b4ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000584 	.word	0x20000584

08002ba4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ba8:	4803      	ldr	r0, [pc, #12]	; (8002bb8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002baa:	f008 fc9e 	bl	800b4ea <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002bae:	4803      	ldr	r0, [pc, #12]	; (8002bbc <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002bb0:	f008 fc9b 	bl	800b4ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002bb4:	bf00      	nop
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	200003d0 	.word	0x200003d0
 8002bbc:	200005cc 	.word	0x200005cc

08002bc0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002bc4:	4802      	ldr	r0, [pc, #8]	; (8002bd0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002bc6:	f008 fc90 	bl	800b4ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000614 	.word	0x20000614

08002bd4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
#ifdef JiaYangZhen_EncoderMode
	Motor[3].StepPosition = Encoder3_0position_number - (__HAL_TIM_GET_COUNTER(&htim3)) ;
#endif

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002bd8:	4802      	ldr	r0, [pc, #8]	; (8002be4 <TIM3_IRQHandler+0x10>)
 8002bda:	f008 fc86 	bl	800b4ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000464 	.word	0x20000464

08002be8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
#ifdef JiaYangZhen_EncoderMode
	Motor[2].StepPosition = __HAL_TIM_GET_COUNTER(&htim4) - Encoder2_0position_number ;
#endif

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002bec:	4802      	ldr	r0, [pc, #8]	; (8002bf8 <TIM4_IRQHandler+0x10>)
 8002bee:	f008 fc7c 	bl	800b4ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	200004ac 	.word	0x200004ac

08002bfc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002c00:	4802      	ldr	r0, [pc, #8]	; (8002c0c <I2C2_EV_IRQHandler+0x10>)
 8002c02:	f005 ff1b 	bl	8008a3c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	200002e0 	.word	0x200002e0

08002c10 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002c14:	4802      	ldr	r0, [pc, #8]	; (8002c20 <I2C2_ER_IRQHandler+0x10>)
 8002c16:	f006 f882 	bl	8008d1e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	200002e0 	.word	0x200002e0

08002c24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPT_IN7_Pin);
 8002c28:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002c2c:	f005 fbf2 	bl	8008414 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN8_Pin);
 8002c30:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002c34:	f005 fbee 	bl	8008414 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN9_Pin);
 8002c38:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002c3c:	f005 fbea 	bl	8008414 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN10_Pin);
 8002c40:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c44:	f005 fbe6 	bl	8008414 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN11_Pin);
 8002c48:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002c4c:	f005 fbe2 	bl	8008414 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN12_Pin);
 8002c50:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002c54:	f005 fbde 	bl	8008414 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c58:	bf00      	nop
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002c60:	4802      	ldr	r0, [pc, #8]	; (8002c6c <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8002c62:	f008 fc42 	bl	800b4ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	2000065c 	.word	0x2000065c

08002c70 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002c74:	4802      	ldr	r0, [pc, #8]	; (8002c80 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002c76:	f008 fc38 	bl	800b4ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	200006a4 	.word	0x200006a4

08002c84 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002c88:	4802      	ldr	r0, [pc, #8]	; (8002c94 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002c8a:	f008 fc2e 	bl	800b4ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	200006ec 	.word	0x200006ec

08002c98 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002c9c:	4804      	ldr	r0, [pc, #16]	; (8002cb0 <UART5_IRQHandler+0x18>)
 8002c9e:	f009 f939 	bl	800bf14 <HAL_UART_IRQHandler>
//  while(HAL_UART_Receive_IT(&huart5, (uint8_t *)aRxBuffer, 1) != HAL_OK)	//每次中断处理完成之后，重新开启中断并设置RxXferCount 1
//  {
//	 timeout++; 	//超时处理
//	 if(timeout>HAL_MAX_DELAY) break;
//  }
  	HAL_UART_Receive_IT(&huart5, (uint8_t *)aRxBuffer, 1);
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	4903      	ldr	r1, [pc, #12]	; (8002cb4 <UART5_IRQHandler+0x1c>)
 8002ca6:	4802      	ldr	r0, [pc, #8]	; (8002cb0 <UART5_IRQHandler+0x18>)
 8002ca8:	f009 f904 	bl	800beb4 <HAL_UART_Receive_IT>

  /* USER CODE END UART5_IRQn 1 */
}
 8002cac:	bf00      	nop
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	200007e4 	.word	0x200007e4
 8002cb4:	20000734 	.word	0x20000734

08002cb8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002cbc:	4803      	ldr	r0, [pc, #12]	; (8002ccc <TIM6_DAC_IRQHandler+0x14>)
 8002cbe:	f004 fd79 	bl	80077b4 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002cc2:	4803      	ldr	r0, [pc, #12]	; (8002cd0 <TIM6_DAC_IRQHandler+0x18>)
 8002cc4:	f008 fc11 	bl	800b4ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002cc8:	bf00      	nop
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	200002bc 	.word	0x200002bc
 8002cd0:	200004f4 	.word	0x200004f4

08002cd4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002cd8:	4802      	ldr	r0, [pc, #8]	; (8002ce4 <TIM7_IRQHandler+0x10>)
 8002cda:	f008 fc06 	bl	800b4ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	2000053c 	.word	0x2000053c

08002ce8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
	return 1;
 8002cec:	2301      	movs	r3, #1
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <_kill>:

int _kill(int pid, int sig)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d02:	f00c fe2b 	bl	800f95c <__errno>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2216      	movs	r2, #22
 8002d0a:	601a      	str	r2, [r3, #0]
	return -1;
 8002d0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <_exit>:

void _exit (int status)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d20:	f04f 31ff 	mov.w	r1, #4294967295
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff ffe7 	bl	8002cf8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d2a:	e7fe      	b.n	8002d2a <_exit+0x12>

08002d2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	e00a      	b.n	8002d54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d3e:	f3af 8000 	nop.w
 8002d42:	4601      	mov	r1, r0
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	60ba      	str	r2, [r7, #8]
 8002d4a:	b2ca      	uxtb	r2, r1
 8002d4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	3301      	adds	r3, #1
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	dbf0      	blt.n	8002d3e <_read+0x12>
	}

return len;
 8002d5c:	687b      	ldr	r3, [r7, #4]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b086      	sub	sp, #24
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
 8002d76:	e009      	b.n	8002d8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	60ba      	str	r2, [r7, #8]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fe fefd 	bl	8001b80 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	dbf1      	blt.n	8002d78 <_write+0x12>
	}
	return len;
 8002d94:	687b      	ldr	r3, [r7, #4]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <_close>:

int _close(int file)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
	return -1;
 8002da6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
 8002dbe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dc6:	605a      	str	r2, [r3, #4]
	return 0;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <_isatty>:

int _isatty(int file)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
	return 1;
 8002dde:	2301      	movs	r3, #1
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
	return 0;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
	...

08002e08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e10:	4a14      	ldr	r2, [pc, #80]	; (8002e64 <_sbrk+0x5c>)
 8002e12:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <_sbrk+0x60>)
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e1c:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <_sbrk+0x64>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d102      	bne.n	8002e2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e24:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <_sbrk+0x64>)
 8002e26:	4a12      	ldr	r2, [pc, #72]	; (8002e70 <_sbrk+0x68>)
 8002e28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e2a:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <_sbrk+0x64>)
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4413      	add	r3, r2
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d207      	bcs.n	8002e48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e38:	f00c fd90 	bl	800f95c <__errno>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	220c      	movs	r2, #12
 8002e40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e42:	f04f 33ff 	mov.w	r3, #4294967295
 8002e46:	e009      	b.n	8002e5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e48:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <_sbrk+0x64>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e4e:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <_sbrk+0x64>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	4a05      	ldr	r2, [pc, #20]	; (8002e6c <_sbrk+0x64>)
 8002e58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20020000 	.word	0x20020000
 8002e68:	00000400 	.word	0x00000400
 8002e6c:	20000418 	.word	0x20000418
 8002e70:	20005710 	.word	0x20005710

08002e74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e78:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <SystemInit+0x20>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7e:	4a05      	ldr	r2, [pc, #20]	; (8002e94 <SystemInit+0x20>)
 8002e80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <MX_TIM2_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08c      	sub	sp, #48	; 0x30
 8002e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e9e:	f107 030c 	add.w	r3, r7, #12
 8002ea2:	2224      	movs	r2, #36	; 0x24
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f00c fe89 	bl	800fbbe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eac:	1d3b      	adds	r3, r7, #4
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002eb4:	4b21      	ldr	r3, [pc, #132]	; (8002f3c <MX_TIM2_Init+0xa4>)
 8002eb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002eba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8002ebc:	4b1f      	ldr	r3, [pc, #124]	; (8002f3c <MX_TIM2_Init+0xa4>)
 8002ebe:	2203      	movs	r2, #3
 8002ec0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ec2:	4b1e      	ldr	r3, [pc, #120]	; (8002f3c <MX_TIM2_Init+0xa4>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002ec8:	4b1c      	ldr	r3, [pc, #112]	; (8002f3c <MX_TIM2_Init+0xa4>)
 8002eca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ece:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ed0:	4b1a      	ldr	r3, [pc, #104]	; (8002f3c <MX_TIM2_Init+0xa4>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ed6:	4b19      	ldr	r3, [pc, #100]	; (8002f3c <MX_TIM2_Init+0xa4>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002edc:	2301      	movs	r3, #1
 8002ede:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002eec:	2300      	movs	r3, #0
 8002eee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002f00:	f107 030c 	add.w	r3, r7, #12
 8002f04:	4619      	mov	r1, r3
 8002f06:	480d      	ldr	r0, [pc, #52]	; (8002f3c <MX_TIM2_Init+0xa4>)
 8002f08:	f008 fa49 	bl	800b39e <HAL_TIM_Encoder_Init>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002f12:	f7ff fd69 	bl	80029e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f16:	2300      	movs	r3, #0
 8002f18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f1e:	1d3b      	adds	r3, r7, #4
 8002f20:	4619      	mov	r1, r3
 8002f22:	4806      	ldr	r0, [pc, #24]	; (8002f3c <MX_TIM2_Init+0xa4>)
 8002f24:	f008 fe12 	bl	800bb4c <HAL_TIMEx_MasterConfigSynchronization>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002f2e:	f7ff fd5b 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f32:	bf00      	nop
 8002f34:	3730      	adds	r7, #48	; 0x30
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	2000041c 	.word	0x2000041c

08002f40 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08c      	sub	sp, #48	; 0x30
 8002f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002f46:	f107 030c 	add.w	r3, r7, #12
 8002f4a:	2224      	movs	r2, #36	; 0x24
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f00c fe35 	bl	800fbbe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f54:	1d3b      	adds	r3, r7, #4
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f5c:	4b20      	ldr	r3, [pc, #128]	; (8002fe0 <MX_TIM3_Init+0xa0>)
 8002f5e:	4a21      	ldr	r2, [pc, #132]	; (8002fe4 <MX_TIM3_Init+0xa4>)
 8002f60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8002f62:	4b1f      	ldr	r3, [pc, #124]	; (8002fe0 <MX_TIM3_Init+0xa0>)
 8002f64:	2203      	movs	r2, #3
 8002f66:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f68:	4b1d      	ldr	r3, [pc, #116]	; (8002fe0 <MX_TIM3_Init+0xa0>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002f6e:	4b1c      	ldr	r3, [pc, #112]	; (8002fe0 <MX_TIM3_Init+0xa0>)
 8002f70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f74:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f76:	4b1a      	ldr	r3, [pc, #104]	; (8002fe0 <MX_TIM3_Init+0xa0>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f7c:	4b18      	ldr	r3, [pc, #96]	; (8002fe0 <MX_TIM3_Init+0xa0>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002f82:	2303      	movs	r3, #3
 8002f84:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002f86:	2300      	movs	r3, #0
 8002f88:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002f92:	230f      	movs	r3, #15
 8002f94:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f96:	2300      	movs	r3, #0
 8002f98:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002fa2:	230f      	movs	r3, #15
 8002fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002fa6:	f107 030c 	add.w	r3, r7, #12
 8002faa:	4619      	mov	r1, r3
 8002fac:	480c      	ldr	r0, [pc, #48]	; (8002fe0 <MX_TIM3_Init+0xa0>)
 8002fae:	f008 f9f6 	bl	800b39e <HAL_TIM_Encoder_Init>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002fb8:	f7ff fd16 	bl	80029e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fc4:	1d3b      	adds	r3, r7, #4
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4805      	ldr	r0, [pc, #20]	; (8002fe0 <MX_TIM3_Init+0xa0>)
 8002fca:	f008 fdbf 	bl	800bb4c <HAL_TIMEx_MasterConfigSynchronization>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002fd4:	f7ff fd08 	bl	80029e8 <Error_Handler>
#ifdef JiaYangZhen_EncoderMode
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
#endif
  /* USER CODE END TIM3_Init 2 */

}
 8002fd8:	bf00      	nop
 8002fda:	3730      	adds	r7, #48	; 0x30
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	20000464 	.word	0x20000464
 8002fe4:	40000400 	.word	0x40000400

08002fe8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08c      	sub	sp, #48	; 0x30
 8002fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002fee:	f107 030c 	add.w	r3, r7, #12
 8002ff2:	2224      	movs	r2, #36	; 0x24
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f00c fde1 	bl	800fbbe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ffc:	1d3b      	adds	r3, r7, #4
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003004:	4b20      	ldr	r3, [pc, #128]	; (8003088 <MX_TIM4_Init+0xa0>)
 8003006:	4a21      	ldr	r2, [pc, #132]	; (800308c <MX_TIM4_Init+0xa4>)
 8003008:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 800300a:	4b1f      	ldr	r3, [pc, #124]	; (8003088 <MX_TIM4_Init+0xa0>)
 800300c:	2203      	movs	r2, #3
 800300e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003010:	4b1d      	ldr	r3, [pc, #116]	; (8003088 <MX_TIM4_Init+0xa0>)
 8003012:	2200      	movs	r2, #0
 8003014:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003016:	4b1c      	ldr	r3, [pc, #112]	; (8003088 <MX_TIM4_Init+0xa0>)
 8003018:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800301c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800301e:	4b1a      	ldr	r3, [pc, #104]	; (8003088 <MX_TIM4_Init+0xa0>)
 8003020:	2200      	movs	r2, #0
 8003022:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003024:	4b18      	ldr	r3, [pc, #96]	; (8003088 <MX_TIM4_Init+0xa0>)
 8003026:	2200      	movs	r2, #0
 8003028:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800302a:	2303      	movs	r3, #3
 800302c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800302e:	2300      	movs	r3, #0
 8003030:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003032:	2301      	movs	r3, #1
 8003034:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003036:	2300      	movs	r3, #0
 8003038:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800303a:	230f      	movs	r3, #15
 800303c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800303e:	2300      	movs	r3, #0
 8003040:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003042:	2301      	movs	r3, #1
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003046:	2300      	movs	r3, #0
 8003048:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800304a:	230f      	movs	r3, #15
 800304c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800304e:	f107 030c 	add.w	r3, r7, #12
 8003052:	4619      	mov	r1, r3
 8003054:	480c      	ldr	r0, [pc, #48]	; (8003088 <MX_TIM4_Init+0xa0>)
 8003056:	f008 f9a2 	bl	800b39e <HAL_TIM_Encoder_Init>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003060:	f7ff fcc2 	bl	80029e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003064:	2300      	movs	r3, #0
 8003066:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003068:	2300      	movs	r3, #0
 800306a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800306c:	1d3b      	adds	r3, r7, #4
 800306e:	4619      	mov	r1, r3
 8003070:	4805      	ldr	r0, [pc, #20]	; (8003088 <MX_TIM4_Init+0xa0>)
 8003072:	f008 fd6b 	bl	800bb4c <HAL_TIMEx_MasterConfigSynchronization>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800307c:	f7ff fcb4 	bl	80029e8 <Error_Handler>
#ifdef JiaYangZhen_EncoderMode
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
#endif
  /* USER CODE END TIM4_Init 2 */

}
 8003080:	bf00      	nop
 8003082:	3730      	adds	r7, #48	; 0x30
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	200004ac 	.word	0x200004ac
 800308c:	40000800 	.word	0x40000800

08003090 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003096:	463b      	mov	r3, r7
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800309e:	4b14      	ldr	r3, [pc, #80]	; (80030f0 <MX_TIM6_Init+0x60>)
 80030a0:	4a14      	ldr	r2, [pc, #80]	; (80030f4 <MX_TIM6_Init+0x64>)
 80030a2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 80030a4:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <MX_TIM6_Init+0x60>)
 80030a6:	224f      	movs	r2, #79	; 0x4f
 80030a8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030aa:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <MX_TIM6_Init+0x60>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 80030b0:	4b0f      	ldr	r3, [pc, #60]	; (80030f0 <MX_TIM6_Init+0x60>)
 80030b2:	2209      	movs	r2, #9
 80030b4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030b6:	4b0e      	ldr	r3, [pc, #56]	; (80030f0 <MX_TIM6_Init+0x60>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80030bc:	480c      	ldr	r0, [pc, #48]	; (80030f0 <MX_TIM6_Init+0x60>)
 80030be:	f008 f87f 	bl	800b1c0 <HAL_TIM_Base_Init>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 80030c8:	f7ff fc8e 	bl	80029e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030cc:	2300      	movs	r3, #0
 80030ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030d0:	2300      	movs	r3, #0
 80030d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80030d4:	463b      	mov	r3, r7
 80030d6:	4619      	mov	r1, r3
 80030d8:	4805      	ldr	r0, [pc, #20]	; (80030f0 <MX_TIM6_Init+0x60>)
 80030da:	f008 fd37 	bl	800bb4c <HAL_TIMEx_MasterConfigSynchronization>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 80030e4:	f7ff fc80 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80030e8:	bf00      	nop
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	200004f4 	.word	0x200004f4
 80030f4:	40001000 	.word	0x40001000

080030f8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030fe:	463b      	mov	r3, r7
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003106:	4b14      	ldr	r3, [pc, #80]	; (8003158 <MX_TIM7_Init+0x60>)
 8003108:	4a14      	ldr	r2, [pc, #80]	; (800315c <MX_TIM7_Init+0x64>)
 800310a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 79;
 800310c:	4b12      	ldr	r3, [pc, #72]	; (8003158 <MX_TIM7_Init+0x60>)
 800310e:	224f      	movs	r2, #79	; 0x4f
 8003110:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003112:	4b11      	ldr	r3, [pc, #68]	; (8003158 <MX_TIM7_Init+0x60>)
 8003114:	2200      	movs	r2, #0
 8003116:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8003118:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <MX_TIM7_Init+0x60>)
 800311a:	2209      	movs	r2, #9
 800311c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800311e:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <MX_TIM7_Init+0x60>)
 8003120:	2200      	movs	r2, #0
 8003122:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003124:	480c      	ldr	r0, [pc, #48]	; (8003158 <MX_TIM7_Init+0x60>)
 8003126:	f008 f84b 	bl	800b1c0 <HAL_TIM_Base_Init>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8003130:	f7ff fc5a 	bl	80029e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003134:	2300      	movs	r3, #0
 8003136:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003138:	2300      	movs	r3, #0
 800313a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800313c:	463b      	mov	r3, r7
 800313e:	4619      	mov	r1, r3
 8003140:	4805      	ldr	r0, [pc, #20]	; (8003158 <MX_TIM7_Init+0x60>)
 8003142:	f008 fd03 	bl	800bb4c <HAL_TIMEx_MasterConfigSynchronization>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 800314c:	f7ff fc4c 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	2000053c 	.word	0x2000053c
 800315c:	40001400 	.word	0x40001400

08003160 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003166:	463b      	mov	r3, r7
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	609a      	str	r2, [r3, #8]
 8003170:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003172:	4b15      	ldr	r3, [pc, #84]	; (80031c8 <MX_TIM9_Init+0x68>)
 8003174:	4a15      	ldr	r2, [pc, #84]	; (80031cc <MX_TIM9_Init+0x6c>)
 8003176:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 79;
 8003178:	4b13      	ldr	r3, [pc, #76]	; (80031c8 <MX_TIM9_Init+0x68>)
 800317a:	224f      	movs	r2, #79	; 0x4f
 800317c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800317e:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <MX_TIM9_Init+0x68>)
 8003180:	2200      	movs	r2, #0
 8003182:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 99;
 8003184:	4b10      	ldr	r3, [pc, #64]	; (80031c8 <MX_TIM9_Init+0x68>)
 8003186:	2263      	movs	r2, #99	; 0x63
 8003188:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800318a:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <MX_TIM9_Init+0x68>)
 800318c:	2200      	movs	r2, #0
 800318e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003190:	4b0d      	ldr	r3, [pc, #52]	; (80031c8 <MX_TIM9_Init+0x68>)
 8003192:	2200      	movs	r2, #0
 8003194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003196:	480c      	ldr	r0, [pc, #48]	; (80031c8 <MX_TIM9_Init+0x68>)
 8003198:	f008 f812 	bl	800b1c0 <HAL_TIM_Base_Init>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <MX_TIM9_Init+0x46>
  {
    Error_Handler();
 80031a2:	f7ff fc21 	bl	80029e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031aa:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80031ac:	463b      	mov	r3, r7
 80031ae:	4619      	mov	r1, r3
 80031b0:	4805      	ldr	r0, [pc, #20]	; (80031c8 <MX_TIM9_Init+0x68>)
 80031b2:	f008 faa2 	bl	800b6fa <HAL_TIM_ConfigClockSource>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <MX_TIM9_Init+0x60>
  {
    Error_Handler();
 80031bc:	f7ff fc14 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80031c0:	bf00      	nop
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	20000584 	.word	0x20000584
 80031cc:	40014000 	.word	0x40014000

080031d0 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80031d4:	4b0d      	ldr	r3, [pc, #52]	; (800320c <MX_TIM10_Init+0x3c>)
 80031d6:	4a0e      	ldr	r2, [pc, #56]	; (8003210 <MX_TIM10_Init+0x40>)
 80031d8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 79;
 80031da:	4b0c      	ldr	r3, [pc, #48]	; (800320c <MX_TIM10_Init+0x3c>)
 80031dc:	224f      	movs	r2, #79	; 0x4f
 80031de:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031e0:	4b0a      	ldr	r3, [pc, #40]	; (800320c <MX_TIM10_Init+0x3c>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9;
 80031e6:	4b09      	ldr	r3, [pc, #36]	; (800320c <MX_TIM10_Init+0x3c>)
 80031e8:	2209      	movs	r2, #9
 80031ea:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031ec:	4b07      	ldr	r3, [pc, #28]	; (800320c <MX_TIM10_Init+0x3c>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <MX_TIM10_Init+0x3c>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80031f8:	4804      	ldr	r0, [pc, #16]	; (800320c <MX_TIM10_Init+0x3c>)
 80031fa:	f007 ffe1 	bl	800b1c0 <HAL_TIM_Base_Init>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 8003204:	f7ff fbf0 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003208:	bf00      	nop
 800320a:	bd80      	pop	{r7, pc}
 800320c:	200005cc 	.word	0x200005cc
 8003210:	40014400 	.word	0x40014400

08003214 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003218:	4b0d      	ldr	r3, [pc, #52]	; (8003250 <MX_TIM11_Init+0x3c>)
 800321a:	4a0e      	ldr	r2, [pc, #56]	; (8003254 <MX_TIM11_Init+0x40>)
 800321c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 79;
 800321e:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <MX_TIM11_Init+0x3c>)
 8003220:	224f      	movs	r2, #79	; 0x4f
 8003222:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003224:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <MX_TIM11_Init+0x3c>)
 8003226:	2200      	movs	r2, #0
 8003228:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9;
 800322a:	4b09      	ldr	r3, [pc, #36]	; (8003250 <MX_TIM11_Init+0x3c>)
 800322c:	2209      	movs	r2, #9
 800322e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003230:	4b07      	ldr	r3, [pc, #28]	; (8003250 <MX_TIM11_Init+0x3c>)
 8003232:	2200      	movs	r2, #0
 8003234:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003236:	4b06      	ldr	r3, [pc, #24]	; (8003250 <MX_TIM11_Init+0x3c>)
 8003238:	2200      	movs	r2, #0
 800323a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800323c:	4804      	ldr	r0, [pc, #16]	; (8003250 <MX_TIM11_Init+0x3c>)
 800323e:	f007 ffbf 	bl	800b1c0 <HAL_TIM_Base_Init>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 8003248:	f7ff fbce 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800324c:	bf00      	nop
 800324e:	bd80      	pop	{r7, pc}
 8003250:	20000614 	.word	0x20000614
 8003254:	40014800 	.word	0x40014800

08003258 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800325e:	463b      	mov	r3, r7
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800326a:	4b15      	ldr	r3, [pc, #84]	; (80032c0 <MX_TIM12_Init+0x68>)
 800326c:	4a15      	ldr	r2, [pc, #84]	; (80032c4 <MX_TIM12_Init+0x6c>)
 800326e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 79;
 8003270:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <MX_TIM12_Init+0x68>)
 8003272:	224f      	movs	r2, #79	; 0x4f
 8003274:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003276:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <MX_TIM12_Init+0x68>)
 8003278:	2200      	movs	r2, #0
 800327a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 9;
 800327c:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <MX_TIM12_Init+0x68>)
 800327e:	2209      	movs	r2, #9
 8003280:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003282:	4b0f      	ldr	r3, [pc, #60]	; (80032c0 <MX_TIM12_Init+0x68>)
 8003284:	2200      	movs	r2, #0
 8003286:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003288:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <MX_TIM12_Init+0x68>)
 800328a:	2200      	movs	r2, #0
 800328c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800328e:	480c      	ldr	r0, [pc, #48]	; (80032c0 <MX_TIM12_Init+0x68>)
 8003290:	f007 ff96 	bl	800b1c0 <HAL_TIM_Base_Init>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <MX_TIM12_Init+0x46>
  {
    Error_Handler();
 800329a:	f7ff fba5 	bl	80029e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800329e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032a2:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80032a4:	463b      	mov	r3, r7
 80032a6:	4619      	mov	r1, r3
 80032a8:	4805      	ldr	r0, [pc, #20]	; (80032c0 <MX_TIM12_Init+0x68>)
 80032aa:	f008 fa26 	bl	800b6fa <HAL_TIM_ConfigClockSource>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <MX_TIM12_Init+0x60>
  {
    Error_Handler();
 80032b4:	f7ff fb98 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80032b8:	bf00      	nop
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	2000065c 	.word	0x2000065c
 80032c4:	40001800 	.word	0x40001800

080032c8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80032cc:	4b0d      	ldr	r3, [pc, #52]	; (8003304 <MX_TIM13_Init+0x3c>)
 80032ce:	4a0e      	ldr	r2, [pc, #56]	; (8003308 <MX_TIM13_Init+0x40>)
 80032d0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 79;
 80032d2:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <MX_TIM13_Init+0x3c>)
 80032d4:	224f      	movs	r2, #79	; 0x4f
 80032d6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032d8:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <MX_TIM13_Init+0x3c>)
 80032da:	2200      	movs	r2, #0
 80032dc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9;
 80032de:	4b09      	ldr	r3, [pc, #36]	; (8003304 <MX_TIM13_Init+0x3c>)
 80032e0:	2209      	movs	r2, #9
 80032e2:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032e4:	4b07      	ldr	r3, [pc, #28]	; (8003304 <MX_TIM13_Init+0x3c>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032ea:	4b06      	ldr	r3, [pc, #24]	; (8003304 <MX_TIM13_Init+0x3c>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80032f0:	4804      	ldr	r0, [pc, #16]	; (8003304 <MX_TIM13_Init+0x3c>)
 80032f2:	f007 ff65 	bl	800b1c0 <HAL_TIM_Base_Init>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <MX_TIM13_Init+0x38>
  {
    Error_Handler();
 80032fc:	f7ff fb74 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003300:	bf00      	nop
 8003302:	bd80      	pop	{r7, pc}
 8003304:	200006a4 	.word	0x200006a4
 8003308:	40001c00 	.word	0x40001c00

0800330c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003310:	4b0d      	ldr	r3, [pc, #52]	; (8003348 <MX_TIM14_Init+0x3c>)
 8003312:	4a0e      	ldr	r2, [pc, #56]	; (800334c <MX_TIM14_Init+0x40>)
 8003314:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 79;
 8003316:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <MX_TIM14_Init+0x3c>)
 8003318:	224f      	movs	r2, #79	; 0x4f
 800331a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800331c:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <MX_TIM14_Init+0x3c>)
 800331e:	2200      	movs	r2, #0
 8003320:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9;
 8003322:	4b09      	ldr	r3, [pc, #36]	; (8003348 <MX_TIM14_Init+0x3c>)
 8003324:	2209      	movs	r2, #9
 8003326:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003328:	4b07      	ldr	r3, [pc, #28]	; (8003348 <MX_TIM14_Init+0x3c>)
 800332a:	2200      	movs	r2, #0
 800332c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <MX_TIM14_Init+0x3c>)
 8003330:	2200      	movs	r2, #0
 8003332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003334:	4804      	ldr	r0, [pc, #16]	; (8003348 <MX_TIM14_Init+0x3c>)
 8003336:	f007 ff43 	bl	800b1c0 <HAL_TIM_Base_Init>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8003340:	f7ff fb52 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003344:	bf00      	nop
 8003346:	bd80      	pop	{r7, pc}
 8003348:	200006ec 	.word	0x200006ec
 800334c:	40002000 	.word	0x40002000

08003350 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08e      	sub	sp, #56	; 0x38
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	605a      	str	r2, [r3, #4]
 8003362:	609a      	str	r2, [r3, #8]
 8003364:	60da      	str	r2, [r3, #12]
 8003366:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003370:	d12c      	bne.n	80033cc <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	623b      	str	r3, [r7, #32]
 8003376:	4b51      	ldr	r3, [pc, #324]	; (80034bc <HAL_TIM_Encoder_MspInit+0x16c>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	4a50      	ldr	r2, [pc, #320]	; (80034bc <HAL_TIM_Encoder_MspInit+0x16c>)
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	6413      	str	r3, [r2, #64]	; 0x40
 8003382:	4b4e      	ldr	r3, [pc, #312]	; (80034bc <HAL_TIM_Encoder_MspInit+0x16c>)
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	623b      	str	r3, [r7, #32]
 800338c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	61fb      	str	r3, [r7, #28]
 8003392:	4b4a      	ldr	r3, [pc, #296]	; (80034bc <HAL_TIM_Encoder_MspInit+0x16c>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	4a49      	ldr	r2, [pc, #292]	; (80034bc <HAL_TIM_Encoder_MspInit+0x16c>)
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	6313      	str	r3, [r2, #48]	; 0x30
 800339e:	4b47      	ldr	r3, [pc, #284]	; (80034bc <HAL_TIM_Encoder_MspInit+0x16c>)
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	61fb      	str	r3, [r7, #28]
 80033a8:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Encoder4_B_Pin|Encoder4_A_Pin;
 80033aa:	2322      	movs	r3, #34	; 0x22
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ae:	2302      	movs	r3, #2
 80033b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b6:	2300      	movs	r3, #0
 80033b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033ba:	2301      	movs	r3, #1
 80033bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033c2:	4619      	mov	r1, r3
 80033c4:	483e      	ldr	r0, [pc, #248]	; (80034c0 <HAL_TIM_Encoder_MspInit+0x170>)
 80033c6:	f004 fe3d 	bl	8008044 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80033ca:	e073      	b.n	80034b4 <HAL_TIM_Encoder_MspInit+0x164>
  else if(tim_encoderHandle->Instance==TIM3)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a3c      	ldr	r2, [pc, #240]	; (80034c4 <HAL_TIM_Encoder_MspInit+0x174>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d134      	bne.n	8003440 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	61bb      	str	r3, [r7, #24]
 80033da:	4b38      	ldr	r3, [pc, #224]	; (80034bc <HAL_TIM_Encoder_MspInit+0x16c>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	4a37      	ldr	r2, [pc, #220]	; (80034bc <HAL_TIM_Encoder_MspInit+0x16c>)
 80033e0:	f043 0302 	orr.w	r3, r3, #2
 80033e4:	6413      	str	r3, [r2, #64]	; 0x40
 80033e6:	4b35      	ldr	r3, [pc, #212]	; (80034bc <HAL_TIM_Encoder_MspInit+0x16c>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	61bb      	str	r3, [r7, #24]
 80033f0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	4b31      	ldr	r3, [pc, #196]	; (80034bc <HAL_TIM_Encoder_MspInit+0x16c>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	4a30      	ldr	r2, [pc, #192]	; (80034bc <HAL_TIM_Encoder_MspInit+0x16c>)
 80033fc:	f043 0301 	orr.w	r3, r3, #1
 8003400:	6313      	str	r3, [r2, #48]	; 0x30
 8003402:	4b2e      	ldr	r3, [pc, #184]	; (80034bc <HAL_TIM_Encoder_MspInit+0x16c>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Encoder3_A_Pin|Encoder3_B_Pin;
 800340e:	23c0      	movs	r3, #192	; 0xc0
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003412:	2302      	movs	r3, #2
 8003414:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003416:	2300      	movs	r3, #0
 8003418:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341a:	2300      	movs	r3, #0
 800341c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800341e:	2302      	movs	r3, #2
 8003420:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003426:	4619      	mov	r1, r3
 8003428:	4825      	ldr	r0, [pc, #148]	; (80034c0 <HAL_TIM_Encoder_MspInit+0x170>)
 800342a:	f004 fe0b 	bl	8008044 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800342e:	2200      	movs	r2, #0
 8003430:	2105      	movs	r1, #5
 8003432:	201d      	movs	r0, #29
 8003434:	f004 f972 	bl	800771c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003438:	201d      	movs	r0, #29
 800343a:	f004 f98b 	bl	8007754 <HAL_NVIC_EnableIRQ>
}
 800343e:	e039      	b.n	80034b4 <HAL_TIM_Encoder_MspInit+0x164>
  else if(tim_encoderHandle->Instance==TIM4)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a20      	ldr	r2, [pc, #128]	; (80034c8 <HAL_TIM_Encoder_MspInit+0x178>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d134      	bne.n	80034b4 <HAL_TIM_Encoder_MspInit+0x164>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	4b1b      	ldr	r3, [pc, #108]	; (80034bc <HAL_TIM_Encoder_MspInit+0x16c>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	4a1a      	ldr	r2, [pc, #104]	; (80034bc <HAL_TIM_Encoder_MspInit+0x16c>)
 8003454:	f043 0304 	orr.w	r3, r3, #4
 8003458:	6413      	str	r3, [r2, #64]	; 0x40
 800345a:	4b18      	ldr	r3, [pc, #96]	; (80034bc <HAL_TIM_Encoder_MspInit+0x16c>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	4b14      	ldr	r3, [pc, #80]	; (80034bc <HAL_TIM_Encoder_MspInit+0x16c>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	4a13      	ldr	r2, [pc, #76]	; (80034bc <HAL_TIM_Encoder_MspInit+0x16c>)
 8003470:	f043 0308 	orr.w	r3, r3, #8
 8003474:	6313      	str	r3, [r2, #48]	; 0x30
 8003476:	4b11      	ldr	r3, [pc, #68]	; (80034bc <HAL_TIM_Encoder_MspInit+0x16c>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 8003482:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003486:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003488:	2302      	movs	r3, #2
 800348a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348c:	2300      	movs	r3, #0
 800348e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003490:	2300      	movs	r3, #0
 8003492:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003494:	2302      	movs	r3, #2
 8003496:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800349c:	4619      	mov	r1, r3
 800349e:	480b      	ldr	r0, [pc, #44]	; (80034cc <HAL_TIM_Encoder_MspInit+0x17c>)
 80034a0:	f004 fdd0 	bl	8008044 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80034a4:	2200      	movs	r2, #0
 80034a6:	2105      	movs	r1, #5
 80034a8:	201e      	movs	r0, #30
 80034aa:	f004 f937 	bl	800771c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80034ae:	201e      	movs	r0, #30
 80034b0:	f004 f950 	bl	8007754 <HAL_NVIC_EnableIRQ>
}
 80034b4:	bf00      	nop
 80034b6:	3738      	adds	r7, #56	; 0x38
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40023800 	.word	0x40023800
 80034c0:	40020000 	.word	0x40020000
 80034c4:	40000400 	.word	0x40000400
 80034c8:	40000800 	.word	0x40000800
 80034cc:	40020c00 	.word	0x40020c00

080034d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08a      	sub	sp, #40	; 0x28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a70      	ldr	r2, [pc, #448]	; (80036a0 <HAL_TIM_Base_MspInit+0x1d0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d116      	bne.n	8003510 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80034e2:	2300      	movs	r3, #0
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
 80034e6:	4b6f      	ldr	r3, [pc, #444]	; (80036a4 <HAL_TIM_Base_MspInit+0x1d4>)
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	4a6e      	ldr	r2, [pc, #440]	; (80036a4 <HAL_TIM_Base_MspInit+0x1d4>)
 80034ec:	f043 0310 	orr.w	r3, r3, #16
 80034f0:	6413      	str	r3, [r2, #64]	; 0x40
 80034f2:	4b6c      	ldr	r3, [pc, #432]	; (80036a4 <HAL_TIM_Base_MspInit+0x1d4>)
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	f003 0310 	and.w	r3, r3, #16
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 7, 0);
 80034fe:	2200      	movs	r2, #0
 8003500:	2107      	movs	r1, #7
 8003502:	2036      	movs	r0, #54	; 0x36
 8003504:	f004 f90a 	bl	800771c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003508:	2036      	movs	r0, #54	; 0x36
 800350a:	f004 f923 	bl	8007754 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800350e:	e0c2      	b.n	8003696 <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM7)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a64      	ldr	r2, [pc, #400]	; (80036a8 <HAL_TIM_Base_MspInit+0x1d8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d116      	bne.n	8003548 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800351a:	2300      	movs	r3, #0
 800351c:	623b      	str	r3, [r7, #32]
 800351e:	4b61      	ldr	r3, [pc, #388]	; (80036a4 <HAL_TIM_Base_MspInit+0x1d4>)
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	4a60      	ldr	r2, [pc, #384]	; (80036a4 <HAL_TIM_Base_MspInit+0x1d4>)
 8003524:	f043 0320 	orr.w	r3, r3, #32
 8003528:	6413      	str	r3, [r2, #64]	; 0x40
 800352a:	4b5e      	ldr	r3, [pc, #376]	; (80036a4 <HAL_TIM_Base_MspInit+0x1d4>)
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	f003 0320 	and.w	r3, r3, #32
 8003532:	623b      	str	r3, [r7, #32]
 8003534:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM7_IRQn, 6, 0);
 8003536:	2200      	movs	r2, #0
 8003538:	2106      	movs	r1, #6
 800353a:	2037      	movs	r0, #55	; 0x37
 800353c:	f004 f8ee 	bl	800771c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003540:	2037      	movs	r0, #55	; 0x37
 8003542:	f004 f907 	bl	8007754 <HAL_NVIC_EnableIRQ>
}
 8003546:	e0a6      	b.n	8003696 <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM9)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a57      	ldr	r2, [pc, #348]	; (80036ac <HAL_TIM_Base_MspInit+0x1dc>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d116      	bne.n	8003580 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	61fb      	str	r3, [r7, #28]
 8003556:	4b53      	ldr	r3, [pc, #332]	; (80036a4 <HAL_TIM_Base_MspInit+0x1d4>)
 8003558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355a:	4a52      	ldr	r2, [pc, #328]	; (80036a4 <HAL_TIM_Base_MspInit+0x1d4>)
 800355c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003560:	6453      	str	r3, [r2, #68]	; 0x44
 8003562:	4b50      	ldr	r3, [pc, #320]	; (80036a4 <HAL_TIM_Base_MspInit+0x1d4>)
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356a:	61fb      	str	r3, [r7, #28]
 800356c:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800356e:	2200      	movs	r2, #0
 8003570:	2105      	movs	r1, #5
 8003572:	2018      	movs	r0, #24
 8003574:	f004 f8d2 	bl	800771c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003578:	2018      	movs	r0, #24
 800357a:	f004 f8eb 	bl	8007754 <HAL_NVIC_EnableIRQ>
}
 800357e:	e08a      	b.n	8003696 <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM10)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a4a      	ldr	r2, [pc, #296]	; (80036b0 <HAL_TIM_Base_MspInit+0x1e0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d116      	bne.n	80035b8 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800358a:	2300      	movs	r3, #0
 800358c:	61bb      	str	r3, [r7, #24]
 800358e:	4b45      	ldr	r3, [pc, #276]	; (80036a4 <HAL_TIM_Base_MspInit+0x1d4>)
 8003590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003592:	4a44      	ldr	r2, [pc, #272]	; (80036a4 <HAL_TIM_Base_MspInit+0x1d4>)
 8003594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003598:	6453      	str	r3, [r2, #68]	; 0x44
 800359a:	4b42      	ldr	r3, [pc, #264]	; (80036a4 <HAL_TIM_Base_MspInit+0x1d4>)
 800359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a2:	61bb      	str	r3, [r7, #24]
 80035a4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80035a6:	2200      	movs	r2, #0
 80035a8:	2105      	movs	r1, #5
 80035aa:	2019      	movs	r0, #25
 80035ac:	f004 f8b6 	bl	800771c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80035b0:	2019      	movs	r0, #25
 80035b2:	f004 f8cf 	bl	8007754 <HAL_NVIC_EnableIRQ>
}
 80035b6:	e06e      	b.n	8003696 <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM11)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a3d      	ldr	r2, [pc, #244]	; (80036b4 <HAL_TIM_Base_MspInit+0x1e4>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d116      	bne.n	80035f0 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	617b      	str	r3, [r7, #20]
 80035c6:	4b37      	ldr	r3, [pc, #220]	; (80036a4 <HAL_TIM_Base_MspInit+0x1d4>)
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	4a36      	ldr	r2, [pc, #216]	; (80036a4 <HAL_TIM_Base_MspInit+0x1d4>)
 80035cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035d0:	6453      	str	r3, [r2, #68]	; 0x44
 80035d2:	4b34      	ldr	r3, [pc, #208]	; (80036a4 <HAL_TIM_Base_MspInit+0x1d4>)
 80035d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80035de:	2200      	movs	r2, #0
 80035e0:	2105      	movs	r1, #5
 80035e2:	201a      	movs	r0, #26
 80035e4:	f004 f89a 	bl	800771c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80035e8:	201a      	movs	r0, #26
 80035ea:	f004 f8b3 	bl	8007754 <HAL_NVIC_EnableIRQ>
}
 80035ee:	e052      	b.n	8003696 <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM12)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a30      	ldr	r2, [pc, #192]	; (80036b8 <HAL_TIM_Base_MspInit+0x1e8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d116      	bne.n	8003628 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80035fa:	2300      	movs	r3, #0
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	4b29      	ldr	r3, [pc, #164]	; (80036a4 <HAL_TIM_Base_MspInit+0x1d4>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	4a28      	ldr	r2, [pc, #160]	; (80036a4 <HAL_TIM_Base_MspInit+0x1d4>)
 8003604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003608:	6413      	str	r3, [r2, #64]	; 0x40
 800360a:	4b26      	ldr	r3, [pc, #152]	; (80036a4 <HAL_TIM_Base_MspInit+0x1d4>)
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003612:	613b      	str	r3, [r7, #16]
 8003614:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8003616:	2200      	movs	r2, #0
 8003618:	2105      	movs	r1, #5
 800361a:	202b      	movs	r0, #43	; 0x2b
 800361c:	f004 f87e 	bl	800771c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003620:	202b      	movs	r0, #43	; 0x2b
 8003622:	f004 f897 	bl	8007754 <HAL_NVIC_EnableIRQ>
}
 8003626:	e036      	b.n	8003696 <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM13)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a23      	ldr	r2, [pc, #140]	; (80036bc <HAL_TIM_Base_MspInit+0x1ec>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d116      	bne.n	8003660 <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	4b1b      	ldr	r3, [pc, #108]	; (80036a4 <HAL_TIM_Base_MspInit+0x1d4>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	4a1a      	ldr	r2, [pc, #104]	; (80036a4 <HAL_TIM_Base_MspInit+0x1d4>)
 800363c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003640:	6413      	str	r3, [r2, #64]	; 0x40
 8003642:	4b18      	ldr	r3, [pc, #96]	; (80036a4 <HAL_TIM_Base_MspInit+0x1d4>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 800364e:	2200      	movs	r2, #0
 8003650:	2105      	movs	r1, #5
 8003652:	202c      	movs	r0, #44	; 0x2c
 8003654:	f004 f862 	bl	800771c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003658:	202c      	movs	r0, #44	; 0x2c
 800365a:	f004 f87b 	bl	8007754 <HAL_NVIC_EnableIRQ>
}
 800365e:	e01a      	b.n	8003696 <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM14)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a16      	ldr	r2, [pc, #88]	; (80036c0 <HAL_TIM_Base_MspInit+0x1f0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d115      	bne.n	8003696 <HAL_TIM_Base_MspInit+0x1c6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	4b0d      	ldr	r3, [pc, #52]	; (80036a4 <HAL_TIM_Base_MspInit+0x1d4>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	4a0c      	ldr	r2, [pc, #48]	; (80036a4 <HAL_TIM_Base_MspInit+0x1d4>)
 8003674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003678:	6413      	str	r3, [r2, #64]	; 0x40
 800367a:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <HAL_TIM_Base_MspInit+0x1d4>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8003686:	2200      	movs	r2, #0
 8003688:	2105      	movs	r1, #5
 800368a:	202d      	movs	r0, #45	; 0x2d
 800368c:	f004 f846 	bl	800771c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003690:	202d      	movs	r0, #45	; 0x2d
 8003692:	f004 f85f 	bl	8007754 <HAL_NVIC_EnableIRQ>
}
 8003696:	bf00      	nop
 8003698:	3728      	adds	r7, #40	; 0x28
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40001000 	.word	0x40001000
 80036a4:	40023800 	.word	0x40023800
 80036a8:	40001400 	.word	0x40001400
 80036ac:	40014000 	.word	0x40014000
 80036b0:	40014400 	.word	0x40014400
 80036b4:	40014800 	.word	0x40014800
 80036b8:	40001800 	.word	0x40001800
 80036bc:	40001c00 	.word	0x40001c00
 80036c0:	40002000 	.word	0x40002000

080036c4 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80036c8:	4b11      	ldr	r3, [pc, #68]	; (8003710 <MX_UART4_Init+0x4c>)
 80036ca:	4a12      	ldr	r2, [pc, #72]	; (8003714 <MX_UART4_Init+0x50>)
 80036cc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80036ce:	4b10      	ldr	r3, [pc, #64]	; (8003710 <MX_UART4_Init+0x4c>)
 80036d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80036d4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80036d6:	4b0e      	ldr	r3, [pc, #56]	; (8003710 <MX_UART4_Init+0x4c>)
 80036d8:	2200      	movs	r2, #0
 80036da:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80036dc:	4b0c      	ldr	r3, [pc, #48]	; (8003710 <MX_UART4_Init+0x4c>)
 80036de:	2200      	movs	r2, #0
 80036e0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80036e2:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <MX_UART4_Init+0x4c>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80036e8:	4b09      	ldr	r3, [pc, #36]	; (8003710 <MX_UART4_Init+0x4c>)
 80036ea:	220c      	movs	r2, #12
 80036ec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036ee:	4b08      	ldr	r3, [pc, #32]	; (8003710 <MX_UART4_Init+0x4c>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80036f4:	4b06      	ldr	r3, [pc, #24]	; (8003710 <MX_UART4_Init+0x4c>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80036fa:	4805      	ldr	r0, [pc, #20]	; (8003710 <MX_UART4_Init+0x4c>)
 80036fc:	f008 fab6 	bl	800bc6c <HAL_UART_Init>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003706:	f7ff f96f 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800370a:	bf00      	nop
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	200007a0 	.word	0x200007a0
 8003714:	40004c00 	.word	0x40004c00

08003718 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */
#ifndef DushuModule
  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800371c:	4b13      	ldr	r3, [pc, #76]	; (800376c <MX_UART5_Init+0x54>)
 800371e:	4a14      	ldr	r2, [pc, #80]	; (8003770 <MX_UART5_Init+0x58>)
 8003720:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003722:	4b12      	ldr	r3, [pc, #72]	; (800376c <MX_UART5_Init+0x54>)
 8003724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003728:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800372a:	4b10      	ldr	r3, [pc, #64]	; (800376c <MX_UART5_Init+0x54>)
 800372c:	2200      	movs	r2, #0
 800372e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003730:	4b0e      	ldr	r3, [pc, #56]	; (800376c <MX_UART5_Init+0x54>)
 8003732:	2200      	movs	r2, #0
 8003734:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003736:	4b0d      	ldr	r3, [pc, #52]	; (800376c <MX_UART5_Init+0x54>)
 8003738:	2200      	movs	r2, #0
 800373a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800373c:	4b0b      	ldr	r3, [pc, #44]	; (800376c <MX_UART5_Init+0x54>)
 800373e:	220c      	movs	r2, #12
 8003740:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003742:	4b0a      	ldr	r3, [pc, #40]	; (800376c <MX_UART5_Init+0x54>)
 8003744:	2200      	movs	r2, #0
 8003746:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003748:	4b08      	ldr	r3, [pc, #32]	; (800376c <MX_UART5_Init+0x54>)
 800374a:	2200      	movs	r2, #0
 800374c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800374e:	4807      	ldr	r0, [pc, #28]	; (800376c <MX_UART5_Init+0x54>)
 8003750:	f008 fa8c 	bl	800bc6c <HAL_UART_Init>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800375a:	f7ff f945 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
  HAL_UART_Receive_IT(&huart5, (uint8_t *)aRxBuffer, 1);
 800375e:	2201      	movs	r2, #1
 8003760:	4904      	ldr	r1, [pc, #16]	; (8003774 <MX_UART5_Init+0x5c>)
 8003762:	4802      	ldr	r0, [pc, #8]	; (800376c <MX_UART5_Init+0x54>)
 8003764:	f008 fba6 	bl	800beb4 <HAL_UART_Receive_IT>
  }
  HAL_UART_Receive_IT(&huart5, (uint8_t *)aRxBuffer, 1);	//接收中断：标志位UART_IT_RXNE，并且设置接收缓冲以及接收缓冲接收最大数据量
#endif
  /* USER CODE END UART5_Init 2 */

}
 8003768:	bf00      	nop
 800376a:	bd80      	pop	{r7, pc}
 800376c:	200007e4 	.word	0x200007e4
 8003770:	40005000 	.word	0x40005000
 8003774:	20000734 	.word	0x20000734

08003778 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800377c:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <MX_USART1_UART_Init+0x4c>)
 800377e:	4a12      	ldr	r2, [pc, #72]	; (80037c8 <MX_USART1_UART_Init+0x50>)
 8003780:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003782:	4b10      	ldr	r3, [pc, #64]	; (80037c4 <MX_USART1_UART_Init+0x4c>)
 8003784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003788:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800378a:	4b0e      	ldr	r3, [pc, #56]	; (80037c4 <MX_USART1_UART_Init+0x4c>)
 800378c:	2200      	movs	r2, #0
 800378e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003790:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <MX_USART1_UART_Init+0x4c>)
 8003792:	2200      	movs	r2, #0
 8003794:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003796:	4b0b      	ldr	r3, [pc, #44]	; (80037c4 <MX_USART1_UART_Init+0x4c>)
 8003798:	2200      	movs	r2, #0
 800379a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800379c:	4b09      	ldr	r3, [pc, #36]	; (80037c4 <MX_USART1_UART_Init+0x4c>)
 800379e:	220c      	movs	r2, #12
 80037a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037a2:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <MX_USART1_UART_Init+0x4c>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80037a8:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <MX_USART1_UART_Init+0x4c>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80037ae:	4805      	ldr	r0, [pc, #20]	; (80037c4 <MX_USART1_UART_Init+0x4c>)
 80037b0:	f008 fa5c 	bl	800bc6c <HAL_UART_Init>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80037ba:	f7ff f915 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80037be:	bf00      	nop
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20000828 	.word	0x20000828
 80037c8:	40011000 	.word	0x40011000

080037cc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80037d0:	4b11      	ldr	r3, [pc, #68]	; (8003818 <MX_USART3_UART_Init+0x4c>)
 80037d2:	4a12      	ldr	r2, [pc, #72]	; (800381c <MX_USART3_UART_Init+0x50>)
 80037d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80037d6:	4b10      	ldr	r3, [pc, #64]	; (8003818 <MX_USART3_UART_Init+0x4c>)
 80037d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80037de:	4b0e      	ldr	r3, [pc, #56]	; (8003818 <MX_USART3_UART_Init+0x4c>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80037e4:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <MX_USART3_UART_Init+0x4c>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80037ea:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <MX_USART3_UART_Init+0x4c>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80037f0:	4b09      	ldr	r3, [pc, #36]	; (8003818 <MX_USART3_UART_Init+0x4c>)
 80037f2:	220c      	movs	r2, #12
 80037f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037f6:	4b08      	ldr	r3, [pc, #32]	; (8003818 <MX_USART3_UART_Init+0x4c>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80037fc:	4b06      	ldr	r3, [pc, #24]	; (8003818 <MX_USART3_UART_Init+0x4c>)
 80037fe:	2200      	movs	r2, #0
 8003800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003802:	4805      	ldr	r0, [pc, #20]	; (8003818 <MX_USART3_UART_Init+0x4c>)
 8003804:	f008 fa32 	bl	800bc6c <HAL_UART_Init>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800380e:	f7ff f8eb 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003812:	bf00      	nop
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	2000086c 	.word	0x2000086c
 800381c:	40004800 	.word	0x40004800

08003820 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b090      	sub	sp, #64	; 0x40
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003828:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	605a      	str	r2, [r3, #4]
 8003832:	609a      	str	r2, [r3, #8]
 8003834:	60da      	str	r2, [r3, #12]
 8003836:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a79      	ldr	r2, [pc, #484]	; (8003a24 <HAL_UART_MspInit+0x204>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d12d      	bne.n	800389e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003842:	2300      	movs	r3, #0
 8003844:	62bb      	str	r3, [r7, #40]	; 0x28
 8003846:	4b78      	ldr	r3, [pc, #480]	; (8003a28 <HAL_UART_MspInit+0x208>)
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	4a77      	ldr	r2, [pc, #476]	; (8003a28 <HAL_UART_MspInit+0x208>)
 800384c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003850:	6413      	str	r3, [r2, #64]	; 0x40
 8003852:	4b75      	ldr	r3, [pc, #468]	; (8003a28 <HAL_UART_MspInit+0x208>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800385a:	62bb      	str	r3, [r7, #40]	; 0x28
 800385c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
 8003862:	4b71      	ldr	r3, [pc, #452]	; (8003a28 <HAL_UART_MspInit+0x208>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	4a70      	ldr	r2, [pc, #448]	; (8003a28 <HAL_UART_MspInit+0x208>)
 8003868:	f043 0304 	orr.w	r3, r3, #4
 800386c:	6313      	str	r3, [r2, #48]	; 0x30
 800386e:	4b6e      	ldr	r3, [pc, #440]	; (8003a28 <HAL_UART_MspInit+0x208>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800387a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800387e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003880:	2302      	movs	r3, #2
 8003882:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003884:	2300      	movs	r3, #0
 8003886:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003888:	2303      	movs	r3, #3
 800388a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800388c:	2308      	movs	r3, #8
 800388e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003890:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003894:	4619      	mov	r1, r3
 8003896:	4865      	ldr	r0, [pc, #404]	; (8003a2c <HAL_UART_MspInit+0x20c>)
 8003898:	f004 fbd4 	bl	8008044 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800389c:	e0bd      	b.n	8003a1a <HAL_UART_MspInit+0x1fa>
  else if(uartHandle->Instance==UART5)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a63      	ldr	r2, [pc, #396]	; (8003a30 <HAL_UART_MspInit+0x210>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d153      	bne.n	8003950 <HAL_UART_MspInit+0x130>
    __HAL_RCC_UART5_CLK_ENABLE();
 80038a8:	2300      	movs	r3, #0
 80038aa:	623b      	str	r3, [r7, #32]
 80038ac:	4b5e      	ldr	r3, [pc, #376]	; (8003a28 <HAL_UART_MspInit+0x208>)
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	4a5d      	ldr	r2, [pc, #372]	; (8003a28 <HAL_UART_MspInit+0x208>)
 80038b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038b6:	6413      	str	r3, [r2, #64]	; 0x40
 80038b8:	4b5b      	ldr	r3, [pc, #364]	; (8003a28 <HAL_UART_MspInit+0x208>)
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038c0:	623b      	str	r3, [r7, #32]
 80038c2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038c4:	2300      	movs	r3, #0
 80038c6:	61fb      	str	r3, [r7, #28]
 80038c8:	4b57      	ldr	r3, [pc, #348]	; (8003a28 <HAL_UART_MspInit+0x208>)
 80038ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038cc:	4a56      	ldr	r2, [pc, #344]	; (8003a28 <HAL_UART_MspInit+0x208>)
 80038ce:	f043 0304 	orr.w	r3, r3, #4
 80038d2:	6313      	str	r3, [r2, #48]	; 0x30
 80038d4:	4b54      	ldr	r3, [pc, #336]	; (8003a28 <HAL_UART_MspInit+0x208>)
 80038d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	61fb      	str	r3, [r7, #28]
 80038de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038e0:	2300      	movs	r3, #0
 80038e2:	61bb      	str	r3, [r7, #24]
 80038e4:	4b50      	ldr	r3, [pc, #320]	; (8003a28 <HAL_UART_MspInit+0x208>)
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	4a4f      	ldr	r2, [pc, #316]	; (8003a28 <HAL_UART_MspInit+0x208>)
 80038ea:	f043 0308 	orr.w	r3, r3, #8
 80038ee:	6313      	str	r3, [r2, #48]	; 0x30
 80038f0:	4b4d      	ldr	r3, [pc, #308]	; (8003a28 <HAL_UART_MspInit+0x208>)
 80038f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	61bb      	str	r3, [r7, #24]
 80038fa:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80038fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003900:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003902:	2302      	movs	r3, #2
 8003904:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003906:	2300      	movs	r3, #0
 8003908:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800390a:	2303      	movs	r3, #3
 800390c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800390e:	2308      	movs	r3, #8
 8003910:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003912:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003916:	4619      	mov	r1, r3
 8003918:	4844      	ldr	r0, [pc, #272]	; (8003a2c <HAL_UART_MspInit+0x20c>)
 800391a:	f004 fb93 	bl	8008044 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800391e:	2304      	movs	r3, #4
 8003920:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003922:	2302      	movs	r3, #2
 8003924:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003926:	2300      	movs	r3, #0
 8003928:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800392a:	2303      	movs	r3, #3
 800392c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800392e:	2308      	movs	r3, #8
 8003930:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003932:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003936:	4619      	mov	r1, r3
 8003938:	483e      	ldr	r0, [pc, #248]	; (8003a34 <HAL_UART_MspInit+0x214>)
 800393a:	f004 fb83 	bl	8008044 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 9, 0);
 800393e:	2200      	movs	r2, #0
 8003940:	2109      	movs	r1, #9
 8003942:	2035      	movs	r0, #53	; 0x35
 8003944:	f003 feea 	bl	800771c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003948:	2035      	movs	r0, #53	; 0x35
 800394a:	f003 ff03 	bl	8007754 <HAL_NVIC_EnableIRQ>
}
 800394e:	e064      	b.n	8003a1a <HAL_UART_MspInit+0x1fa>
  else if(uartHandle->Instance==USART1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a38      	ldr	r2, [pc, #224]	; (8003a38 <HAL_UART_MspInit+0x218>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d12d      	bne.n	80039b6 <HAL_UART_MspInit+0x196>
    __HAL_RCC_USART1_CLK_ENABLE();
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	4b32      	ldr	r3, [pc, #200]	; (8003a28 <HAL_UART_MspInit+0x208>)
 8003960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003962:	4a31      	ldr	r2, [pc, #196]	; (8003a28 <HAL_UART_MspInit+0x208>)
 8003964:	f043 0310 	orr.w	r3, r3, #16
 8003968:	6453      	str	r3, [r2, #68]	; 0x44
 800396a:	4b2f      	ldr	r3, [pc, #188]	; (8003a28 <HAL_UART_MspInit+0x208>)
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396e:	f003 0310 	and.w	r3, r3, #16
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	613b      	str	r3, [r7, #16]
 800397a:	4b2b      	ldr	r3, [pc, #172]	; (8003a28 <HAL_UART_MspInit+0x208>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	4a2a      	ldr	r2, [pc, #168]	; (8003a28 <HAL_UART_MspInit+0x208>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	6313      	str	r3, [r2, #48]	; 0x30
 8003986:	4b28      	ldr	r3, [pc, #160]	; (8003a28 <HAL_UART_MspInit+0x208>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	613b      	str	r3, [r7, #16]
 8003990:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003992:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003996:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003998:	2302      	movs	r3, #2
 800399a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399c:	2300      	movs	r3, #0
 800399e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a0:	2303      	movs	r3, #3
 80039a2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039a4:	2307      	movs	r3, #7
 80039a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039ac:	4619      	mov	r1, r3
 80039ae:	4823      	ldr	r0, [pc, #140]	; (8003a3c <HAL_UART_MspInit+0x21c>)
 80039b0:	f004 fb48 	bl	8008044 <HAL_GPIO_Init>
}
 80039b4:	e031      	b.n	8003a1a <HAL_UART_MspInit+0x1fa>
  else if(uartHandle->Instance==USART3)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a21      	ldr	r2, [pc, #132]	; (8003a40 <HAL_UART_MspInit+0x220>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d12c      	bne.n	8003a1a <HAL_UART_MspInit+0x1fa>
    __HAL_RCC_USART3_CLK_ENABLE();
 80039c0:	2300      	movs	r3, #0
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	4b18      	ldr	r3, [pc, #96]	; (8003a28 <HAL_UART_MspInit+0x208>)
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	4a17      	ldr	r2, [pc, #92]	; (8003a28 <HAL_UART_MspInit+0x208>)
 80039ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039ce:	6413      	str	r3, [r2, #64]	; 0x40
 80039d0:	4b15      	ldr	r3, [pc, #84]	; (8003a28 <HAL_UART_MspInit+0x208>)
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039dc:	2300      	movs	r3, #0
 80039de:	60bb      	str	r3, [r7, #8]
 80039e0:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <HAL_UART_MspInit+0x208>)
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	4a10      	ldr	r2, [pc, #64]	; (8003a28 <HAL_UART_MspInit+0x208>)
 80039e6:	f043 0308 	orr.w	r3, r3, #8
 80039ea:	6313      	str	r3, [r2, #48]	; 0x30
 80039ec:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <HAL_UART_MspInit+0x208>)
 80039ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80039f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80039fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fe:	2302      	movs	r3, #2
 8003a00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a06:	2303      	movs	r3, #3
 8003a08:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a0a:	2307      	movs	r3, #7
 8003a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a12:	4619      	mov	r1, r3
 8003a14:	4807      	ldr	r0, [pc, #28]	; (8003a34 <HAL_UART_MspInit+0x214>)
 8003a16:	f004 fb15 	bl	8008044 <HAL_GPIO_Init>
}
 8003a1a:	bf00      	nop
 8003a1c:	3740      	adds	r7, #64	; 0x40
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40004c00 	.word	0x40004c00
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	40020800 	.word	0x40020800
 8003a30:	40005000 	.word	0x40005000
 8003a34:	40020c00 	.word	0x40020c00
 8003a38:	40011000 	.word	0x40011000
 8003a3c:	40020000 	.word	0x40020000
 8003a40:	40004800 	.word	0x40004800

08003a44 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */

#ifndef DushuModule
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==UART5)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a2e      	ldr	r2, [pc, #184]	; (8003b0c <HAL_UART_RxCpltCallback+0xc8>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d155      	bne.n	8003b02 <HAL_UART_RxCpltCallback+0xbe>
	{
		if ( USART_RX_STA&0x8000 ){		// 判断是否已经完成接收(bit15-1则已接收完成)
 8003a56:	4b2e      	ldr	r3, [pc, #184]	; (8003b10 <HAL_UART_RxCpltCallback+0xcc>)
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	b21b      	sxth	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	db50      	blt.n	8003b02 <HAL_UART_RxCpltCallback+0xbe>
			;							// 如果完成接收数据接收且尚未处理，则不接受后续data
		}
		else{
			if( USART_RX_STA&0x4000 ){		// 判断是否已收到起始位
 8003a60:	4b2b      	ldr	r3, [pc, #172]	; (8003b10 <HAL_UART_RxCpltCallback+0xcc>)
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d02a      	beq.n	8003ac2 <HAL_UART_RxCpltCallback+0x7e>
				if( aRxBuffer[0]==0x55 ){	// 判断是否已收到结束位
 8003a6c:	4b29      	ldr	r3, [pc, #164]	; (8003b14 <HAL_UART_RxCpltCallback+0xd0>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b55      	cmp	r3, #85	; 0x55
 8003a72:	d117      	bne.n	8003aa4 <HAL_UART_RxCpltCallback+0x60>
					USART_RX_STA|=0x8000;
 8003a74:	4b26      	ldr	r3, [pc, #152]	; (8003b10 <HAL_UART_RxCpltCallback+0xcc>)
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	4b23      	ldr	r3, [pc, #140]	; (8003b10 <HAL_UART_RxCpltCallback+0xcc>)
 8003a84:	801a      	strh	r2, [r3, #0]
					USART5_RX_BUF[USART_RX_STA&0X3FFF]=aRxBuffer[0] ;
 8003a86:	4b22      	ldr	r3, [pc, #136]	; (8003b10 <HAL_UART_RxCpltCallback+0xcc>)
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003a8e:	4a21      	ldr	r2, [pc, #132]	; (8003b14 <HAL_UART_RxCpltCallback+0xd0>)
 8003a90:	7811      	ldrb	r1, [r2, #0]
 8003a92:	4a21      	ldr	r2, [pc, #132]	; (8003b18 <HAL_UART_RxCpltCallback+0xd4>)
 8003a94:	54d1      	strb	r1, [r2, r3]
					USART_RX_STA++;
 8003a96:	4b1e      	ldr	r3, [pc, #120]	; (8003b10 <HAL_UART_RxCpltCallback+0xcc>)
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	4b1c      	ldr	r3, [pc, #112]	; (8003b10 <HAL_UART_RxCpltCallback+0xcc>)
 8003aa0:	801a      	strh	r2, [r3, #0]
					USART_RX_STA=0;
				}
			}
		}
	}
}
 8003aa2:	e02e      	b.n	8003b02 <HAL_UART_RxCpltCallback+0xbe>
					USART5_RX_BUF[USART_RX_STA&0X3FFF]=aRxBuffer[0] ;
 8003aa4:	4b1a      	ldr	r3, [pc, #104]	; (8003b10 <HAL_UART_RxCpltCallback+0xcc>)
 8003aa6:	881b      	ldrh	r3, [r3, #0]
 8003aa8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003aac:	4a19      	ldr	r2, [pc, #100]	; (8003b14 <HAL_UART_RxCpltCallback+0xd0>)
 8003aae:	7811      	ldrb	r1, [r2, #0]
 8003ab0:	4a19      	ldr	r2, [pc, #100]	; (8003b18 <HAL_UART_RxCpltCallback+0xd4>)
 8003ab2:	54d1      	strb	r1, [r2, r3]
					USART_RX_STA++;
 8003ab4:	4b16      	ldr	r3, [pc, #88]	; (8003b10 <HAL_UART_RxCpltCallback+0xcc>)
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	4b14      	ldr	r3, [pc, #80]	; (8003b10 <HAL_UART_RxCpltCallback+0xcc>)
 8003abe:	801a      	strh	r2, [r3, #0]
}
 8003ac0:	e01f      	b.n	8003b02 <HAL_UART_RxCpltCallback+0xbe>
				if(aRxBuffer[0]==0xAA){
 8003ac2:	4b14      	ldr	r3, [pc, #80]	; (8003b14 <HAL_UART_RxCpltCallback+0xd0>)
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	2baa      	cmp	r3, #170	; 0xaa
 8003ac8:	d118      	bne.n	8003afc <HAL_UART_RxCpltCallback+0xb8>
					USART_RX_STA|=0x4000;
 8003aca:	4b11      	ldr	r3, [pc, #68]	; (8003b10 <HAL_UART_RxCpltCallback+0xcc>)
 8003acc:	881b      	ldrh	r3, [r3, #0]
 8003ace:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	4b0e      	ldr	r3, [pc, #56]	; (8003b10 <HAL_UART_RxCpltCallback+0xcc>)
 8003ad6:	801a      	strh	r2, [r3, #0]
					USART5_RX_BUF[USART_RX_STA&0X3FFF]=aRxBuffer[0] ;
 8003ad8:	4b0d      	ldr	r3, [pc, #52]	; (8003b10 <HAL_UART_RxCpltCallback+0xcc>)
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003ae0:	4a0c      	ldr	r2, [pc, #48]	; (8003b14 <HAL_UART_RxCpltCallback+0xd0>)
 8003ae2:	7811      	ldrb	r1, [r2, #0]
 8003ae4:	4a0c      	ldr	r2, [pc, #48]	; (8003b18 <HAL_UART_RxCpltCallback+0xd4>)
 8003ae6:	54d1      	strb	r1, [r2, r3]
					USART_RX_STA++;
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <HAL_UART_RxCpltCallback+0xcc>)
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	3301      	adds	r3, #1
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	4b07      	ldr	r3, [pc, #28]	; (8003b10 <HAL_UART_RxCpltCallback+0xcc>)
 8003af2:	801a      	strh	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(&htim9);
 8003af4:	4809      	ldr	r0, [pc, #36]	; (8003b1c <HAL_UART_RxCpltCallback+0xd8>)
 8003af6:	f007 fbb3 	bl	800b260 <HAL_TIM_Base_Start_IT>
}
 8003afa:	e002      	b.n	8003b02 <HAL_UART_RxCpltCallback+0xbe>
					USART_RX_STA=0;
 8003afc:	4b04      	ldr	r3, [pc, #16]	; (8003b10 <HAL_UART_RxCpltCallback+0xcc>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	801a      	strh	r2, [r3, #0]
}
 8003b02:	bf00      	nop
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40005000 	.word	0x40005000
 8003b10:	2000079c 	.word	0x2000079c
 8003b14:	20000734 	.word	0x20000734
 8003b18:	20000738 	.word	0x20000738
 8003b1c:	20000584 	.word	0x20000584

08003b20 <FDC2112_Write_Reg_I2C>:
/* ****************
 * 函数名：FDC2112_Write_Reg_I2C2
 * 描述：写FDC2112的寄存器数据，写入数据格式为uint16_t
 ******************/
void FDC2112_Write_Reg_I2C(uint16_t MemAddress,uint16_t data)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b088      	sub	sp, #32
 8003b24:	af04      	add	r7, sp, #16
 8003b26:	4603      	mov	r3, r0
 8003b28:	460a      	mov	r2, r1
 8003b2a:	80fb      	strh	r3, [r7, #6]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	80bb      	strh	r3, [r7, #4]
	uint8_t temp_data[2];
	temp_data[0] = (data>>8);
 8003b30:	88bb      	ldrh	r3, [r7, #4]
 8003b32:	0a1b      	lsrs	r3, r3, #8
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	733b      	strb	r3, [r7, #12]
	temp_data[1] = (data & 0xff);
 8003b3a:	88bb      	ldrh	r3, [r7, #4]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(&hi2c2,FDC2112_W,MemAddress,I2C_MEMADD_SIZE_8BIT,temp_data,2,1000);
 8003b40:	88fa      	ldrh	r2, [r7, #6]
 8003b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b46:	9302      	str	r3, [sp, #8]
 8003b48:	2302      	movs	r3, #2
 8003b4a:	9301      	str	r3, [sp, #4]
 8003b4c:	f107 030c 	add.w	r3, r7, #12
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	2301      	movs	r3, #1
 8003b54:	2156      	movs	r1, #86	; 0x56
 8003b56:	4805      	ldr	r0, [pc, #20]	; (8003b6c <FDC2112_Write_Reg_I2C+0x4c>)
 8003b58:	f004 fdb8 	bl	80086cc <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8003b5c:	200a      	movs	r0, #10
 8003b5e:	f003 f9a3 	bl	8006ea8 <HAL_Delay>
}
 8003b62:	bf00      	nop
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	200002e0 	.word	0x200002e0

08003b70 <FDC2112_Read_Data_I2C>:
	}
	return 0;
}
#else
uint32_t FDC2112_Read_Data_I2C(uint16_t ADDR_MSB , uint16_t ADDR_LSB)   //FDC2214分辨率为28bit，需要获取MSB和LSB的数据
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	4603      	mov	r3, r0
 8003b78:	460a      	mov	r2, r1
 8003b7a:	80fb      	strh	r3, [r7, #6]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	80bb      	strh	r3, [r7, #4]
	uint32_t data_temp;
	uint8_t temp_MSB[2];
	uint8_t temp_LSB[2];
	if ( HAL_I2C_Mem_Read_IT(&hi2c2,FDC2112_R,ADDR_MSB,I2C_MEMADD_SIZE_8BIT,&temp_MSB[0],2) == HAL_OK){
 8003b80:	88fa      	ldrh	r2, [r7, #6]
 8003b82:	2302      	movs	r3, #2
 8003b84:	9301      	str	r3, [sp, #4]
 8003b86:	f107 0310 	add.w	r3, r7, #16
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	2157      	movs	r1, #87	; 0x57
 8003b90:	481e      	ldr	r0, [pc, #120]	; (8003c0c <FDC2112_Read_Data_I2C+0x9c>)
 8003b92:	f004 fe95 	bl	80088c0 <HAL_I2C_Mem_Read_IT>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d119      	bne.n	8003bd0 <FDC2112_Read_Data_I2C+0x60>
	//if ( HAL_I2C_Mem_Read_DMA(&hi2c2,FDC2112_R,ADDR_MSB,I2C_MEMADD_SIZE_8BIT,&temp[0],2) == HAL_OK){    // DMA模式有问题
		HAL_Delay(1);
 8003b9c:	2001      	movs	r0, #1
 8003b9e:	f003 f983 	bl	8006ea8 <HAL_Delay>
		temp_MSB[0] = temp_MSB[0]<<4;
 8003ba2:	7c3b      	ldrb	r3, [r7, #16]
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	743b      	strb	r3, [r7, #16]
		temp_MSB[0] = temp_MSB[0]>>4;
 8003baa:	7c3b      	ldrb	r3, [r7, #16]
 8003bac:	091b      	lsrs	r3, r3, #4
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	743b      	strb	r3, [r7, #16]
	}
	else{
		printf("[WRONG]HAL_NotOK get\r\n");
		return 0;
	}
	if ( HAL_I2C_Mem_Read_IT(&hi2c2,FDC2112_R,ADDR_LSB,I2C_MEMADD_SIZE_8BIT,&temp_LSB[0],2) == HAL_OK){
 8003bb2:	88ba      	ldrh	r2, [r7, #4]
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	9301      	str	r3, [sp, #4]
 8003bb8:	f107 030c 	add.w	r3, r7, #12
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	2157      	movs	r1, #87	; 0x57
 8003bc2:	4812      	ldr	r0, [pc, #72]	; (8003c0c <FDC2112_Read_Data_I2C+0x9c>)
 8003bc4:	f004 fe7c 	bl	80088c0 <HAL_I2C_Mem_Read_IT>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d115      	bne.n	8003bfa <FDC2112_Read_Data_I2C+0x8a>
 8003bce:	e004      	b.n	8003bda <FDC2112_Read_Data_I2C+0x6a>
		printf("[WRONG]HAL_NotOK get\r\n");
 8003bd0:	480f      	ldr	r0, [pc, #60]	; (8003c10 <FDC2112_Read_Data_I2C+0xa0>)
 8003bd2:	f00c fd81 	bl	80106d8 <puts>
		return 0;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	e013      	b.n	8003c02 <FDC2112_Read_Data_I2C+0x92>
	//if ( HAL_I2C_Mem_Read_DMA(&hi2c2,FDC2112_R,ADDR_MSB,I2C_MEMADD_SIZE_8BIT,&temp[0],2) == HAL_OK){    // DMA模式有问题
		HAL_Delay(1);
 8003bda:	2001      	movs	r0, #1
 8003bdc:	f003 f964 	bl	8006ea8 <HAL_Delay>
	}
	else{
		printf("[WRONG]HAL_NotOK get\r\n");
		return 0;
	}
	data_temp = (unsigned int)( (temp_MSB[0]<<24) | (temp_MSB[1]<<16)| (temp_LSB[0]<<8) |  temp_LSB[1] ) ;
 8003be0:	7c3b      	ldrb	r3, [r7, #16]
 8003be2:	061a      	lsls	r2, r3, #24
 8003be4:	7c7b      	ldrb	r3, [r7, #17]
 8003be6:	041b      	lsls	r3, r3, #16
 8003be8:	431a      	orrs	r2, r3
 8003bea:	7b3b      	ldrb	r3, [r7, #12]
 8003bec:	021b      	lsls	r3, r3, #8
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	7b7a      	ldrb	r2, [r7, #13]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	617b      	str	r3, [r7, #20]
	return data_temp;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	e003      	b.n	8003c02 <FDC2112_Read_Data_I2C+0x92>
		printf("[WRONG]HAL_NotOK get\r\n");
 8003bfa:	4805      	ldr	r0, [pc, #20]	; (8003c10 <FDC2112_Read_Data_I2C+0xa0>)
 8003bfc:	f00c fd6c 	bl	80106d8 <puts>
		return 0;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	200002e0 	.word	0x200002e0
 8003c10:	08012700 	.word	0x08012700

08003c14 <FDC2112_Read_Data_I2C_CH>:
/* ****************
 * 函数名：FDC2112_Read_Data_I2C_CH
 * 描述： 读取通道0或1的寄存器数据
 ******************/
uint32_t FDC2112_Read_Data_I2C_CH(uint8_t index)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	71fb      	strb	r3, [r7, #7]
	uint32_t result;
	switch(index)
 8003c1e:	79fb      	ldrb	r3, [r7, #7]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <FDC2112_Read_Data_I2C_CH+0x16>
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d006      	beq.n	8003c36 <FDC2112_Read_Data_I2C_CH+0x22>
 8003c28:	e00b      	b.n	8003c42 <FDC2112_Read_Data_I2C_CH+0x2e>
			break;
	}
#else
	{
		case 0:
			result = FDC2112_Read_Data_I2C(DATA_CH0 , DATA_LSB_CH0);
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	2000      	movs	r0, #0
 8003c2e:	f7ff ff9f 	bl	8003b70 <FDC2112_Read_Data_I2C>
 8003c32:	60f8      	str	r0, [r7, #12]
			break;
 8003c34:	e005      	b.n	8003c42 <FDC2112_Read_Data_I2C_CH+0x2e>
		case 1:
			result = FDC2112_Read_Data_I2C(DATA_CH1 , DATA_LSB_CH1);
 8003c36:	2103      	movs	r1, #3
 8003c38:	2002      	movs	r0, #2
 8003c3a:	f7ff ff99 	bl	8003b70 <FDC2112_Read_Data_I2C>
 8003c3e:	60f8      	str	r0, [r7, #12]
			break;
 8003c40:	bf00      	nop
	}
#endif
	return result;
 8003c42:	68fb      	ldr	r3, [r7, #12]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <Init_DoubleChannel_FDC2212>:
	FDC2112_Write_Reg_I2C(0x1E,0xF800); //配置驱动电流
	FDC2112_Write_Reg_I2C(0x1A,0x1481); //参数配置
}

void Init_DoubleChannel_FDC2212(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
	FDC2112_Write_Reg_I2C(0x08,0x34FB); //转换时间10ms
 8003c50:	f243 41fb 	movw	r1, #13563	; 0x34fb
 8003c54:	2008      	movs	r0, #8
 8003c56:	f7ff ff63 	bl	8003b20 <FDC2112_Write_Reg_I2C>
	FDC2112_Write_Reg_I2C(0x09,0x34FB);
 8003c5a:	f243 41fb 	movw	r1, #13563	; 0x34fb
 8003c5e:	2009      	movs	r0, #9
 8003c60:	f7ff ff5e 	bl	8003b20 <FDC2112_Write_Reg_I2C>

	FDC2112_Write_Reg_I2C(0x10,0x001B);//作用时间 CH1 //转换之前的稳定时间(T=(SETTLECOUNT_CHx*16)/Frefx)
 8003c64:	211b      	movs	r1, #27
 8003c66:	2010      	movs	r0, #16
 8003c68:	f7ff ff5a 	bl	8003b20 <FDC2112_Write_Reg_I2C>
	FDC2112_Write_Reg_I2C(0x11,0x001B);
 8003c6c:	211b      	movs	r1, #27
 8003c6e:	2011      	movs	r0, #17
 8003c70:	f7ff ff56 	bl	8003b20 <FDC2112_Write_Reg_I2C>

	FDC2112_Write_Reg_I2C(0x14,0x2002);//选择在0.01MHz~10MHz的传感器频率
 8003c74:	f242 0102 	movw	r1, #8194	; 0x2002
 8003c78:	2014      	movs	r0, #20
 8003c7a:	f7ff ff51 	bl	8003b20 <FDC2112_Write_Reg_I2C>
	FDC2112_Write_Reg_I2C(0x15,0x2002);//Frefx =Fclk =43.4MHz/2  二分频
 8003c7e:	f242 0102 	movw	r1, #8194	; 0x2002
 8003c82:	2015      	movs	r0, #21
 8003c84:	f7ff ff4c 	bl	8003b20 <FDC2112_Write_Reg_I2C>

	FDC2112_Write_Reg_I2C(0x19,0x0000); //ERROE_CONFIG
 8003c88:	2100      	movs	r1, #0
 8003c8a:	2019      	movs	r0, #25
 8003c8c:	f7ff ff48 	bl	8003b20 <FDC2112_Write_Reg_I2C>
	FDC2112_Write_Reg_I2C(0x1B,0xC20D); //通道配置
 8003c90:	f24c 210d 	movw	r1, #49677	; 0xc20d
 8003c94:	201b      	movs	r0, #27
 8003c96:	f7ff ff43 	bl	8003b20 <FDC2112_Write_Reg_I2C>

	FDC2112_Write_Reg_I2C(0x1E,0x7800); //CH0 驱动电流  0.146mA
 8003c9a:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 8003c9e:	201e      	movs	r0, #30
 8003ca0:	f7ff ff3e 	bl	8003b20 <FDC2112_Write_Reg_I2C>
	FDC2112_Write_Reg_I2C(0x1F,0x7800); //CH1
 8003ca4:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 8003ca8:	201f      	movs	r0, #31
 8003caa:	f7ff ff39 	bl	8003b20 <FDC2112_Write_Reg_I2C>

	FDC2112_Write_Reg_I2C(0x1A,0x1401); //参数配置
 8003cae:	f241 4101 	movw	r1, #5121	; 0x1401
 8003cb2:	201a      	movs	r0, #26
 8003cb4:	f7ff ff34 	bl	8003b20 <FDC2112_Write_Reg_I2C>
}
 8003cb8:	bf00      	nop
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	0000      	movs	r0, r0
	...

08003cc0 <Cap_Calculate>:
	Cap = 3540.4144 / ( (float)(Data_FDC) );
	return (Cap*Cap-33);
}
#else
float Cap_Calculate(uint8_t index)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	71fb      	strb	r3, [r7, #7]
	uint32_t Data_FDC;
	float Cap;
	Data_FDC = FDC2112_Read_Data_I2C_CH(index);
 8003cca:	79fb      	ldrb	r3, [r7, #7]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff ffa1 	bl	8003c14 <FDC2112_Read_Data_I2C_CH>
 8003cd2:	60f8      	str	r0, [r7, #12]
	Cap = 232021045.248 / ( (float)(Data_FDC) );
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	ee07 3a90 	vmov	s15, r3
 8003cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cde:	ee17 0a90 	vmov	r0, s15
 8003ce2:	f7fc fc31 	bl	8000548 <__aeabi_f2d>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	a10b      	add	r1, pc, #44	; (adr r1, 8003d18 <Cap_Calculate+0x58>)
 8003cec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003cf0:	f7fc fdac 	bl	800084c <__aeabi_ddiv>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	f7fc ff74 	bl	8000be8 <__aeabi_d2f>
 8003d00:	4603      	mov	r3, r0
 8003d02:	60bb      	str	r3, [r7, #8]
	return (Cap*Cap);
 8003d04:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d08:	ee67 7aa7 	vmul.f32	s15, s15, s15
}
 8003d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	6a7ef9db 	.word	0x6a7ef9db
 8003d1c:	41aba8b8 	.word	0x41aba8b8

08003d20 <Motor_Data_Init>:
#include "stdlib.h"

struct MotorDefine Motor[10];

void Motor_Data_Init(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
	Motor[2].accelerationRate = 2000;
	Motor[2].decelerationRate = 1000;
#endif
#ifdef JiaYangZhen
/*  Motor1:RZ步进电机模块的R轴电机  */
	Motor[1].MotorNumber = 1;
 8003d24:	4b78      	ldr	r3, [pc, #480]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	Motor[1].Status = 0,
 8003d2c:	4b76      	ldr	r3, [pc, #472]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	Motor[1].htim_x = &htim10,
 8003d34:	4b74      	ldr	r3, [pc, #464]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003d36:	4a75      	ldr	r2, [pc, #468]	; (8003f0c <Motor_Data_Init+0x1ec>)
 8003d38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	//机械参数
	Motor[1].deceleration_ratio = 1;
 8003d3c:	4b72      	ldr	r3, [pc, #456]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003d3e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003d42:	661a      	str	r2, [r3, #96]	; 0x60
	Motor[1].step_angle = 1.8;
 8003d44:	4b70      	ldr	r3, [pc, #448]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003d46:	4a72      	ldr	r2, [pc, #456]	; (8003f10 <Motor_Data_Init+0x1f0>)
 8003d48:	665a      	str	r2, [r3, #100]	; 0x64
	Motor[1].mircro_steps = 16;
 8003d4a:	4b6f      	ldr	r3, [pc, #444]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003d4c:	2210      	movs	r2, #16
 8003d4e:	669a      	str	r2, [r3, #104]	; 0x68
	Motor[1].MaxSpeedInRads= 25;
 8003d50:	4b6d      	ldr	r3, [pc, #436]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003d52:	4a70      	ldr	r2, [pc, #448]	; (8003f14 <Motor_Data_Init+0x1f4>)
 8003d54:	66da      	str	r2, [r3, #108]	; 0x6c
	//设定默认速度参数，以下为实测优化后结果，可以通过参数控制模式修改
	Motor[1].StartupSpeedInRads = 0.6;
 8003d56:	4b6c      	ldr	r3, [pc, #432]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003d58:	4a6f      	ldr	r2, [pc, #444]	; (8003f18 <Motor_Data_Init+0x1f8>)
 8003d5a:	671a      	str	r2, [r3, #112]	; 0x70
	Motor[1].DesiredSpeedInRads = 8;
 8003d5c:	4b6a      	ldr	r3, [pc, #424]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003d5e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8003d62:	675a      	str	r2, [r3, #116]	; 0x74
	Motor[1].accelerationRate = 20000;
 8003d64:	4b68      	ldr	r3, [pc, #416]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003d66:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003d6a:	679a      	str	r2, [r3, #120]	; 0x78
	Motor[1].decelerationRate = 20000;
 8003d6c:	4b66      	ldr	r3, [pc, #408]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003d6e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003d72:	67da      	str	r2, [r3, #124]	; 0x7c

/*  Motor2: 加样针水平方向步进电机，4细分800步每圈，编码器为1000P/R */
	Motor[2].MotorNumber = 2;
 8003d74:	4b64      	ldr	r3, [pc, #400]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
	Motor[2].Status = 0,
 8003d7c:	4b62      	ldr	r3, [pc, #392]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	Motor[2].htim_x = &htim11,
 8003d84:	4b60      	ldr	r3, [pc, #384]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003d86:	4a65      	ldr	r2, [pc, #404]	; (8003f1c <Motor_Data_Init+0x1fc>)
 8003d88:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	//机械参数
	Motor[2].deceleration_ratio = 1;
 8003d8c:	4b5e      	ldr	r3, [pc, #376]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003d8e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003d92:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	Motor[2].step_angle = 1.8;
 8003d96:	4b5c      	ldr	r3, [pc, #368]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003d98:	4a5d      	ldr	r2, [pc, #372]	; (8003f10 <Motor_Data_Init+0x1f0>)
 8003d9a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	Motor[2].mircro_steps = 16;
 8003d9e:	4b5a      	ldr	r3, [pc, #360]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003da0:	2210      	movs	r2, #16
 8003da2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	Motor[2].MaxSpeedInRads= 25;
 8003da6:	4b58      	ldr	r3, [pc, #352]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003da8:	4a5a      	ldr	r2, [pc, #360]	; (8003f14 <Motor_Data_Init+0x1f4>)
 8003daa:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	//Motor[2].Encoder_PulsePerRad = 1000;
	//设定默认速度参数，以下为实测优化后结果，可以通过参数控制模式修改
	Motor[2].StartupSpeedInRads = 1;
 8003dae:	4b56      	ldr	r3, [pc, #344]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003db0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003db4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	Motor[2].DesiredSpeedInRads = 12;
 8003db8:	4b53      	ldr	r3, [pc, #332]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003dba:	4a59      	ldr	r2, [pc, #356]	; (8003f20 <Motor_Data_Init+0x200>)
 8003dbc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	Motor[2].accelerationRate = 10000;
 8003dc0:	4b51      	ldr	r3, [pc, #324]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003dc2:	f242 7210 	movw	r2, #10000	; 0x2710
 8003dc6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	Motor[2].decelerationRate = 10000;
 8003dca:	4b4f      	ldr	r3, [pc, #316]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003dcc:	f242 7210 	movw	r2, #10000	; 0x2710
 8003dd0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

/*  Motor3: 加样针垂直方向步进电机,4细分800步每圈，编码器为1000P/R  */
	Motor[3].MotorNumber = 3;
 8003dd4:	4b4c      	ldr	r3, [pc, #304]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003dd6:	2203      	movs	r2, #3
 8003dd8:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	Motor[3].Status = 0,
 8003ddc:	4b4a      	ldr	r3, [pc, #296]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	Motor[3].htim_x = &htim13,
 8003de4:	4b48      	ldr	r3, [pc, #288]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003de6:	4a4f      	ldr	r2, [pc, #316]	; (8003f24 <Motor_Data_Init+0x204>)
 8003de8:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	//机械参数
	Motor[3].deceleration_ratio = 1;
 8003dec:	4b46      	ldr	r3, [pc, #280]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003dee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003df2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	Motor[3].step_angle = 1.8;
 8003df6:	4b44      	ldr	r3, [pc, #272]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003df8:	4a45      	ldr	r2, [pc, #276]	; (8003f10 <Motor_Data_Init+0x1f0>)
 8003dfa:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	Motor[3].mircro_steps = 16;
 8003dfe:	4b42      	ldr	r3, [pc, #264]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003e00:	2210      	movs	r2, #16
 8003e02:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	Motor[3].MaxSpeedInRads= 25;
 8003e06:	4b40      	ldr	r3, [pc, #256]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003e08:	4a42      	ldr	r2, [pc, #264]	; (8003f14 <Motor_Data_Init+0x1f4>)
 8003e0a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	//Motor[2].Encoder_PulsePerRad = 1000;
	//设定默认速度参数，以下为实测优化后结果，可以通过参数控制模式修改
	Motor[3].StartupSpeedInRads = 1;
 8003e0e:	4b3e      	ldr	r3, [pc, #248]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003e10:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003e14:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	Motor[3].DesiredSpeedInRads = 10;
 8003e18:	4b3b      	ldr	r3, [pc, #236]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003e1a:	4a43      	ldr	r2, [pc, #268]	; (8003f28 <Motor_Data_Init+0x208>)
 8003e1c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	Motor[3].accelerationRate = 9000;
 8003e20:	4b39      	ldr	r3, [pc, #228]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003e22:	f242 3228 	movw	r2, #9000	; 0x2328
 8003e26:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	Motor[3].decelerationRate = 6000;
 8003e2a:	4b37      	ldr	r3, [pc, #220]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003e2c:	f241 7270 	movw	r2, #6000	; 0x1770
 8003e30:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		Motor[6].accelerationRate = 8000;
		Motor[6].decelerationRate = 8000;
#endif

/*  Motor4 : 柱塞泵，负责注液（也可以抽液），最大排量1000uL，总行程10rads（2000步），每步0.5uL  */
		Motor[4].MotorNumber = 4;
 8003e34:	4b34      	ldr	r3, [pc, #208]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003e36:	2204      	movs	r2, #4
 8003e38:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
		Motor[4].Status = 0,
 8003e3c:	4b32      	ldr	r3, [pc, #200]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
		Motor[4].htim_x = &htim14,
 8003e44:	4b30      	ldr	r3, [pc, #192]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003e46:	4a39      	ldr	r2, [pc, #228]	; (8003f2c <Motor_Data_Init+0x20c>)
 8003e48:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		//机械参数
		Motor[4].deceleration_ratio = 1;
 8003e4c:	4b2e      	ldr	r3, [pc, #184]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003e4e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003e52:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		Motor[4].step_angle = 1.8;
 8003e56:	4b2c      	ldr	r3, [pc, #176]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003e58:	4a2d      	ldr	r2, [pc, #180]	; (8003f10 <Motor_Data_Init+0x1f0>)
 8003e5a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
		Motor[4].mircro_steps = 16;
 8003e5e:	4b2a      	ldr	r3, [pc, #168]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003e60:	2210      	movs	r2, #16
 8003e62:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		Motor[4].MaxSpeedInRads= 13;
 8003e66:	4b28      	ldr	r3, [pc, #160]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003e68:	4a31      	ldr	r2, [pc, #196]	; (8003f30 <Motor_Data_Init+0x210>)
 8003e6a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
		//设定默认速度参数，以下为实测优化后结果，可以通过参数控制模式修改
		Motor[4].StartupSpeedInRads = 5;
 8003e6e:	4b26      	ldr	r3, [pc, #152]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003e70:	4a30      	ldr	r2, [pc, #192]	; (8003f34 <Motor_Data_Init+0x214>)
 8003e72:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
		Motor[4].DesiredSpeedInRads = 10;
 8003e76:	4b24      	ldr	r3, [pc, #144]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003e78:	4a2b      	ldr	r2, [pc, #172]	; (8003f28 <Motor_Data_Init+0x208>)
 8003e7a:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
		Motor[4].accelerationRate = 20000;
 8003e7e:	4b22      	ldr	r3, [pc, #136]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003e80:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003e84:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
		Motor[4].decelerationRate = 10000;
 8003e88:	4b1f      	ldr	r3, [pc, #124]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003e8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e8e:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

#ifdef JiaYangZhen
/*  Motor7 : 加样针24V直流电机  A相-抽出液体0.6L/min */
	Motor[7].MotorNumber = 7;
 8003e92:	4b1d      	ldr	r3, [pc, #116]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003e94:	2207      	movs	r2, #7
 8003e96:	f883 22c0 	strb.w	r2, [r3, #704]	; 0x2c0
	Motor[7].Status = 0,
 8003e9a:	4b1b      	ldr	r3, [pc, #108]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
	Motor[7].htim_x = &htim12,
 8003ea2:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003ea4:	4a24      	ldr	r2, [pc, #144]	; (8003f38 <Motor_Data_Init+0x218>)
 8003ea6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4

	//设定默认的PWM控制频率，设置占空比来控制直流电机输出
	Motor[7].StepperSpeedTMR = 400 ;  			// PWM控制直流电机频率：100KHz/100=1KHz
 8003eaa:	4b17      	ldr	r3, [pc, #92]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003eac:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003eb0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
	Motor[7].NumberofSteps_StopAccel = 100 ; 	// 此参数在直流电机应用下，定义为占空比
 8003eb4:	4b14      	ldr	r3, [pc, #80]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003eb6:	2264      	movs	r2, #100	; 0x64
 8003eb8:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
	Motor[7].AccelerationTimeTMR = Motor[7].StepperSpeedTMR ; 	// 此参数在直流电机应用下，定义实际高电平的TMR计时器个数
 8003ebc:	4b12      	ldr	r3, [pc, #72]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003ebe:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8003ec2:	4a11      	ldr	r2, [pc, #68]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003ec4:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8

/*  Motor8 : 加样针24V直流电机  A相针内壁清洗  B相针外壁清洗  */
	Motor[8].MotorNumber = 8;
 8003ec8:	4b0f      	ldr	r3, [pc, #60]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003eca:	2208      	movs	r2, #8
 8003ecc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
	Motor[8].Status = 0,
 8003ed0:	4b0d      	ldr	r3, [pc, #52]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
	Motor[8].htim_x = &htim12,
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003eda:	4a17      	ldr	r2, [pc, #92]	; (8003f38 <Motor_Data_Init+0x218>)
 8003edc:	f8c3 2334 	str.w	r2, [r3, #820]	; 0x334

	//设定默认的PWM控制频率，设置占空比来控制直流电机输出
	Motor[8].StepperSpeedTMR = 400 ;  			// PWM控制直流电机频率：100KHz/100=1KHz
 8003ee0:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003ee2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003ee6:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	Motor[8].NumberofSteps_StopAccel = 100 ; 	// 此参数在直流电机应用下，定义为占空比
 8003eea:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003eec:	2264      	movs	r2, #100	; 0x64
 8003eee:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
	Motor[8].AccelerationTimeTMR = Motor[8].StepperSpeedTMR ; 	// 此参数在直流电机应用下，定义实际高电平的TMR计时器个数
 8003ef2:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003ef4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8003ef8:	4a03      	ldr	r2, [pc, #12]	; (8003f08 <Motor_Data_Init+0x1e8>)
 8003efa:	f8c2 3358 	str.w	r3, [r2, #856]	; 0x358
	Motor[6].StartupSpeedInRads = 5;
	Motor[6].DesiredSpeedInRads = 20;
	Motor[6].accelerationRate = 20000;
	Motor[6].decelerationRate = 20000;
#endif
}
 8003efe:	bf00      	nop
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	200008b0 	.word	0x200008b0
 8003f0c:	200005cc 	.word	0x200005cc
 8003f10:	3fe66666 	.word	0x3fe66666
 8003f14:	41c80000 	.word	0x41c80000
 8003f18:	3f19999a 	.word	0x3f19999a
 8003f1c:	20000614 	.word	0x20000614
 8003f20:	41400000 	.word	0x41400000
 8003f24:	200006a4 	.word	0x200006a4
 8003f28:	41200000 	.word	0x41200000
 8003f2c:	200006ec 	.word	0x200006ec
 8003f30:	41500000 	.word	0x41500000
 8003f34:	40a00000 	.word	0x40a00000
 8003f38:	2000065c 	.word	0x2000065c

08003f3c <Motor5_AB>:



void Motor5_AB(void) // 电机5状态1
{VM5_IN1_H();	VM5_IN2_L();	VM5_IN3_H()	;	VM5_IN4_L();}
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	2201      	movs	r2, #1
 8003f42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f46:	480b      	ldr	r0, [pc, #44]	; (8003f74 <Motor5_AB+0x38>)
 8003f48:	f004 fa30 	bl	80083ac <HAL_GPIO_WritePin>
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f52:	4808      	ldr	r0, [pc, #32]	; (8003f74 <Motor5_AB+0x38>)
 8003f54:	f004 fa2a 	bl	80083ac <HAL_GPIO_WritePin>
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f5e:	4805      	ldr	r0, [pc, #20]	; (8003f74 <Motor5_AB+0x38>)
 8003f60:	f004 fa24 	bl	80083ac <HAL_GPIO_WritePin>
 8003f64:	2200      	movs	r2, #0
 8003f66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f6a:	4802      	ldr	r0, [pc, #8]	; (8003f74 <Motor5_AB+0x38>)
 8003f6c:	f004 fa1e 	bl	80083ac <HAL_GPIO_WritePin>
 8003f70:	bf00      	nop
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40020400 	.word	0x40020400

08003f78 <Motor5_aB>:
void Motor5_aB(void) // 电机5状态2
{VM5_IN1_L();	VM5_IN2_H();	VM5_IN3_H()	;	VM5_IN4_L();}
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f82:	480b      	ldr	r0, [pc, #44]	; (8003fb0 <Motor5_aB+0x38>)
 8003f84:	f004 fa12 	bl	80083ac <HAL_GPIO_WritePin>
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f8e:	4808      	ldr	r0, [pc, #32]	; (8003fb0 <Motor5_aB+0x38>)
 8003f90:	f004 fa0c 	bl	80083ac <HAL_GPIO_WritePin>
 8003f94:	2201      	movs	r2, #1
 8003f96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f9a:	4805      	ldr	r0, [pc, #20]	; (8003fb0 <Motor5_aB+0x38>)
 8003f9c:	f004 fa06 	bl	80083ac <HAL_GPIO_WritePin>
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fa6:	4802      	ldr	r0, [pc, #8]	; (8003fb0 <Motor5_aB+0x38>)
 8003fa8:	f004 fa00 	bl	80083ac <HAL_GPIO_WritePin>
 8003fac:	bf00      	nop
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40020400 	.word	0x40020400

08003fb4 <Motor5_ab>:
void Motor5_ab(void) // 电机5状态3
{VM5_IN1_L();	VM5_IN2_H();	VM5_IN3_L()	;	VM5_IN4_H();}
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fbe:	480b      	ldr	r0, [pc, #44]	; (8003fec <Motor5_ab+0x38>)
 8003fc0:	f004 f9f4 	bl	80083ac <HAL_GPIO_WritePin>
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003fca:	4808      	ldr	r0, [pc, #32]	; (8003fec <Motor5_ab+0x38>)
 8003fcc:	f004 f9ee 	bl	80083ac <HAL_GPIO_WritePin>
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003fd6:	4805      	ldr	r0, [pc, #20]	; (8003fec <Motor5_ab+0x38>)
 8003fd8:	f004 f9e8 	bl	80083ac <HAL_GPIO_WritePin>
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fe2:	4802      	ldr	r0, [pc, #8]	; (8003fec <Motor5_ab+0x38>)
 8003fe4:	f004 f9e2 	bl	80083ac <HAL_GPIO_WritePin>
 8003fe8:	bf00      	nop
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40020400 	.word	0x40020400

08003ff0 <Motor5_Ab>:
void Motor5_Ab(void) // 电机5状态4
{VM5_IN1_H();	VM5_IN2_L();	VM5_IN3_L()	;	VM5_IN4_H();}
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ffa:	480b      	ldr	r0, [pc, #44]	; (8004028 <Motor5_Ab+0x38>)
 8003ffc:	f004 f9d6 	bl	80083ac <HAL_GPIO_WritePin>
 8004000:	2200      	movs	r2, #0
 8004002:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004006:	4808      	ldr	r0, [pc, #32]	; (8004028 <Motor5_Ab+0x38>)
 8004008:	f004 f9d0 	bl	80083ac <HAL_GPIO_WritePin>
 800400c:	2200      	movs	r2, #0
 800400e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004012:	4805      	ldr	r0, [pc, #20]	; (8004028 <Motor5_Ab+0x38>)
 8004014:	f004 f9ca 	bl	80083ac <HAL_GPIO_WritePin>
 8004018:	2201      	movs	r2, #1
 800401a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800401e:	4802      	ldr	r0, [pc, #8]	; (8004028 <Motor5_Ab+0x38>)
 8004020:	f004 f9c4 	bl	80083ac <HAL_GPIO_WritePin>
 8004024:	bf00      	nop
 8004026:	bd80      	pop	{r7, pc}
 8004028:	40020400 	.word	0x40020400

0800402c <Motor5_Release>:
void Motor5_Release(void) // 电机5释放锁定
{VM5_IN1_L();	VM5_IN2_L();	VM5_IN3_L()	;	VM5_IN4_L();}
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
 8004030:	2200      	movs	r2, #0
 8004032:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004036:	480b      	ldr	r0, [pc, #44]	; (8004064 <Motor5_Release+0x38>)
 8004038:	f004 f9b8 	bl	80083ac <HAL_GPIO_WritePin>
 800403c:	2200      	movs	r2, #0
 800403e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004042:	4808      	ldr	r0, [pc, #32]	; (8004064 <Motor5_Release+0x38>)
 8004044:	f004 f9b2 	bl	80083ac <HAL_GPIO_WritePin>
 8004048:	2200      	movs	r2, #0
 800404a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800404e:	4805      	ldr	r0, [pc, #20]	; (8004064 <Motor5_Release+0x38>)
 8004050:	f004 f9ac 	bl	80083ac <HAL_GPIO_WritePin>
 8004054:	2200      	movs	r2, #0
 8004056:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800405a:	4802      	ldr	r0, [pc, #8]	; (8004064 <Motor5_Release+0x38>)
 800405c:	f004 f9a6 	bl	80083ac <HAL_GPIO_WritePin>
 8004060:	bf00      	nop
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40020400 	.word	0x40020400

08004068 <Motor6_AB>:

void Motor6_AB(void) // 电机6状态1
{VM6_IN1_H();	VM6_IN2_L();	VM6_IN3_H()	;	VM6_IN4_L();}
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
 800406c:	2201      	movs	r2, #1
 800406e:	2120      	movs	r1, #32
 8004070:	480a      	ldr	r0, [pc, #40]	; (800409c <Motor6_AB+0x34>)
 8004072:	f004 f99b 	bl	80083ac <HAL_GPIO_WritePin>
 8004076:	2200      	movs	r2, #0
 8004078:	2140      	movs	r1, #64	; 0x40
 800407a:	4808      	ldr	r0, [pc, #32]	; (800409c <Motor6_AB+0x34>)
 800407c:	f004 f996 	bl	80083ac <HAL_GPIO_WritePin>
 8004080:	2201      	movs	r2, #1
 8004082:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004086:	4806      	ldr	r0, [pc, #24]	; (80040a0 <Motor6_AB+0x38>)
 8004088:	f004 f990 	bl	80083ac <HAL_GPIO_WritePin>
 800408c:	2200      	movs	r2, #0
 800408e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004092:	4803      	ldr	r0, [pc, #12]	; (80040a0 <Motor6_AB+0x38>)
 8004094:	f004 f98a 	bl	80083ac <HAL_GPIO_WritePin>
 8004098:	bf00      	nop
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40021000 	.word	0x40021000
 80040a0:	40020800 	.word	0x40020800

080040a4 <Motor6_aB>:
void Motor6_aB(void) // 电机6状态2
{VM6_IN1_L();	VM6_IN2_H();	VM6_IN3_H()	;	VM6_IN4_L();}
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	2200      	movs	r2, #0
 80040aa:	2120      	movs	r1, #32
 80040ac:	480a      	ldr	r0, [pc, #40]	; (80040d8 <Motor6_aB+0x34>)
 80040ae:	f004 f97d 	bl	80083ac <HAL_GPIO_WritePin>
 80040b2:	2201      	movs	r2, #1
 80040b4:	2140      	movs	r1, #64	; 0x40
 80040b6:	4808      	ldr	r0, [pc, #32]	; (80040d8 <Motor6_aB+0x34>)
 80040b8:	f004 f978 	bl	80083ac <HAL_GPIO_WritePin>
 80040bc:	2201      	movs	r2, #1
 80040be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040c2:	4806      	ldr	r0, [pc, #24]	; (80040dc <Motor6_aB+0x38>)
 80040c4:	f004 f972 	bl	80083ac <HAL_GPIO_WritePin>
 80040c8:	2200      	movs	r2, #0
 80040ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040ce:	4803      	ldr	r0, [pc, #12]	; (80040dc <Motor6_aB+0x38>)
 80040d0:	f004 f96c 	bl	80083ac <HAL_GPIO_WritePin>
 80040d4:	bf00      	nop
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40021000 	.word	0x40021000
 80040dc:	40020800 	.word	0x40020800

080040e0 <Motor6_ab>:
void Motor6_ab(void) // 电机6状态3
{VM6_IN1_L();	VM6_IN2_H();	VM6_IN3_L()	;	VM6_IN4_H();}
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	2200      	movs	r2, #0
 80040e6:	2120      	movs	r1, #32
 80040e8:	480a      	ldr	r0, [pc, #40]	; (8004114 <Motor6_ab+0x34>)
 80040ea:	f004 f95f 	bl	80083ac <HAL_GPIO_WritePin>
 80040ee:	2201      	movs	r2, #1
 80040f0:	2140      	movs	r1, #64	; 0x40
 80040f2:	4808      	ldr	r0, [pc, #32]	; (8004114 <Motor6_ab+0x34>)
 80040f4:	f004 f95a 	bl	80083ac <HAL_GPIO_WritePin>
 80040f8:	2200      	movs	r2, #0
 80040fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040fe:	4806      	ldr	r0, [pc, #24]	; (8004118 <Motor6_ab+0x38>)
 8004100:	f004 f954 	bl	80083ac <HAL_GPIO_WritePin>
 8004104:	2201      	movs	r2, #1
 8004106:	f44f 7100 	mov.w	r1, #512	; 0x200
 800410a:	4803      	ldr	r0, [pc, #12]	; (8004118 <Motor6_ab+0x38>)
 800410c:	f004 f94e 	bl	80083ac <HAL_GPIO_WritePin>
 8004110:	bf00      	nop
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40021000 	.word	0x40021000
 8004118:	40020800 	.word	0x40020800

0800411c <Motor6_Ab>:
void Motor6_Ab(void) // 电机6状态4
{VM6_IN1_H();	VM6_IN2_L();	VM6_IN3_L()	;	VM6_IN4_H();}
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
 8004120:	2201      	movs	r2, #1
 8004122:	2120      	movs	r1, #32
 8004124:	480a      	ldr	r0, [pc, #40]	; (8004150 <Motor6_Ab+0x34>)
 8004126:	f004 f941 	bl	80083ac <HAL_GPIO_WritePin>
 800412a:	2200      	movs	r2, #0
 800412c:	2140      	movs	r1, #64	; 0x40
 800412e:	4808      	ldr	r0, [pc, #32]	; (8004150 <Motor6_Ab+0x34>)
 8004130:	f004 f93c 	bl	80083ac <HAL_GPIO_WritePin>
 8004134:	2200      	movs	r2, #0
 8004136:	f44f 7180 	mov.w	r1, #256	; 0x100
 800413a:	4806      	ldr	r0, [pc, #24]	; (8004154 <Motor6_Ab+0x38>)
 800413c:	f004 f936 	bl	80083ac <HAL_GPIO_WritePin>
 8004140:	2201      	movs	r2, #1
 8004142:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004146:	4803      	ldr	r0, [pc, #12]	; (8004154 <Motor6_Ab+0x38>)
 8004148:	f004 f930 	bl	80083ac <HAL_GPIO_WritePin>
 800414c:	bf00      	nop
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40021000 	.word	0x40021000
 8004154:	40020800 	.word	0x40020800

08004158 <Motor6_Release>:
void Motor6_A_release(void)
{VM6_IN1_L();	VM6_IN2_L();}
void Motor6_B_release(void)
{VM6_IN3_L();	VM6_IN4_L();}
void Motor6_Release(void) // 电机6释放锁定
{VM6_IN1_L();	VM6_IN2_L();	VM6_IN3_L()	;	VM6_IN4_L();}
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
 800415c:	2200      	movs	r2, #0
 800415e:	2120      	movs	r1, #32
 8004160:	480a      	ldr	r0, [pc, #40]	; (800418c <Motor6_Release+0x34>)
 8004162:	f004 f923 	bl	80083ac <HAL_GPIO_WritePin>
 8004166:	2200      	movs	r2, #0
 8004168:	2140      	movs	r1, #64	; 0x40
 800416a:	4808      	ldr	r0, [pc, #32]	; (800418c <Motor6_Release+0x34>)
 800416c:	f004 f91e 	bl	80083ac <HAL_GPIO_WritePin>
 8004170:	2200      	movs	r2, #0
 8004172:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004176:	4806      	ldr	r0, [pc, #24]	; (8004190 <Motor6_Release+0x38>)
 8004178:	f004 f918 	bl	80083ac <HAL_GPIO_WritePin>
 800417c:	2200      	movs	r2, #0
 800417e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004182:	4803      	ldr	r0, [pc, #12]	; (8004190 <Motor6_Release+0x38>)
 8004184:	f004 f912 	bl	80083ac <HAL_GPIO_WritePin>
 8004188:	bf00      	nop
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40021000 	.word	0x40021000
 8004190:	40020800 	.word	0x40020800

08004194 <ALL_Motors_Disable>:
	printf("DecelerationTimeTMR:%ld\r\n",a->DecelerationTimeTMR);
	printf("********************\r\n");
}

void ALL_Motors_Disable(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
	Motor1_Disable();	Motor2_Disable();	Motor3_Disable();	Motor4_Disable();
 8004198:	2201      	movs	r2, #1
 800419a:	2110      	movs	r1, #16
 800419c:	4857      	ldr	r0, [pc, #348]	; (80042fc <ALL_Motors_Disable+0x168>)
 800419e:	f004 f905 	bl	80083ac <HAL_GPIO_WritePin>
 80041a2:	2201      	movs	r2, #1
 80041a4:	2180      	movs	r1, #128	; 0x80
 80041a6:	4855      	ldr	r0, [pc, #340]	; (80042fc <ALL_Motors_Disable+0x168>)
 80041a8:	f004 f900 	bl	80083ac <HAL_GPIO_WritePin>
 80041ac:	2201      	movs	r2, #1
 80041ae:	2101      	movs	r1, #1
 80041b0:	4853      	ldr	r0, [pc, #332]	; (8004300 <ALL_Motors_Disable+0x16c>)
 80041b2:	f004 f8fb 	bl	80083ac <HAL_GPIO_WritePin>
 80041b6:	2201      	movs	r2, #1
 80041b8:	2108      	movs	r1, #8
 80041ba:	4851      	ldr	r0, [pc, #324]	; (8004300 <ALL_Motors_Disable+0x16c>)
 80041bc:	f004 f8f6 	bl	80083ac <HAL_GPIO_WritePin>
	VM5_Disable_A();	VM5_Disable_B();	VM6_Disable_A();	VM6_Disable_B();
 80041c0:	2200      	movs	r2, #0
 80041c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80041c6:	484e      	ldr	r0, [pc, #312]	; (8004300 <ALL_Motors_Disable+0x16c>)
 80041c8:	f004 f8f0 	bl	80083ac <HAL_GPIO_WritePin>
 80041cc:	2200      	movs	r2, #0
 80041ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041d2:	484b      	ldr	r0, [pc, #300]	; (8004300 <ALL_Motors_Disable+0x16c>)
 80041d4:	f004 f8ea 	bl	80083ac <HAL_GPIO_WritePin>
 80041d8:	2200      	movs	r2, #0
 80041da:	2180      	movs	r1, #128	; 0x80
 80041dc:	4848      	ldr	r0, [pc, #288]	; (8004300 <ALL_Motors_Disable+0x16c>)
 80041de:	f004 f8e5 	bl	80083ac <HAL_GPIO_WritePin>
 80041e2:	2200      	movs	r2, #0
 80041e4:	2102      	movs	r1, #2
 80041e6:	4847      	ldr	r0, [pc, #284]	; (8004304 <ALL_Motors_Disable+0x170>)
 80041e8:	f004 f8e0 	bl	80083ac <HAL_GPIO_WritePin>
	VM7_Disable_A();	VM7_Disable_B();	VM8_Disable_A();	VM8_Disable_B();
 80041ec:	2200      	movs	r2, #0
 80041ee:	2101      	movs	r1, #1
 80041f0:	4844      	ldr	r0, [pc, #272]	; (8004304 <ALL_Motors_Disable+0x170>)
 80041f2:	f004 f8db 	bl	80083ac <HAL_GPIO_WritePin>
 80041f6:	2200      	movs	r2, #0
 80041f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041fc:	4842      	ldr	r0, [pc, #264]	; (8004308 <ALL_Motors_Disable+0x174>)
 80041fe:	f004 f8d5 	bl	80083ac <HAL_GPIO_WritePin>
 8004202:	2200      	movs	r2, #0
 8004204:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004208:	483f      	ldr	r0, [pc, #252]	; (8004308 <ALL_Motors_Disable+0x174>)
 800420a:	f004 f8cf 	bl	80083ac <HAL_GPIO_WritePin>
 800420e:	2200      	movs	r2, #0
 8004210:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004214:	483c      	ldr	r0, [pc, #240]	; (8004308 <ALL_Motors_Disable+0x174>)
 8004216:	f004 f8c9 	bl	80083ac <HAL_GPIO_WritePin>
	Motorpluse1_Low();	Motorpluse2_Low();	Motorpluse3_Low();	Motorpluse4_Low();
 800421a:	2200      	movs	r2, #0
 800421c:	2108      	movs	r1, #8
 800421e:	4837      	ldr	r0, [pc, #220]	; (80042fc <ALL_Motors_Disable+0x168>)
 8004220:	f004 f8c4 	bl	80083ac <HAL_GPIO_WritePin>
 8004224:	2200      	movs	r2, #0
 8004226:	2140      	movs	r1, #64	; 0x40
 8004228:	4834      	ldr	r0, [pc, #208]	; (80042fc <ALL_Motors_Disable+0x168>)
 800422a:	f004 f8bf 	bl	80083ac <HAL_GPIO_WritePin>
 800422e:	2200      	movs	r2, #0
 8004230:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004234:	4831      	ldr	r0, [pc, #196]	; (80042fc <ALL_Motors_Disable+0x168>)
 8004236:	f004 f8b9 	bl	80083ac <HAL_GPIO_WritePin>
 800423a:	2200      	movs	r2, #0
 800423c:	2104      	movs	r1, #4
 800423e:	4830      	ldr	r0, [pc, #192]	; (8004300 <ALL_Motors_Disable+0x16c>)
 8004240:	f004 f8b4 	bl	80083ac <HAL_GPIO_WritePin>
	VM5_IN1_L();	VM5_IN2_L();	VM5_IN3_L();	VM5_IN4_L();
 8004244:	2200      	movs	r2, #0
 8004246:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800424a:	482c      	ldr	r0, [pc, #176]	; (80042fc <ALL_Motors_Disable+0x168>)
 800424c:	f004 f8ae 	bl	80083ac <HAL_GPIO_WritePin>
 8004250:	2200      	movs	r2, #0
 8004252:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004256:	4829      	ldr	r0, [pc, #164]	; (80042fc <ALL_Motors_Disable+0x168>)
 8004258:	f004 f8a8 	bl	80083ac <HAL_GPIO_WritePin>
 800425c:	2200      	movs	r2, #0
 800425e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004262:	4826      	ldr	r0, [pc, #152]	; (80042fc <ALL_Motors_Disable+0x168>)
 8004264:	f004 f8a2 	bl	80083ac <HAL_GPIO_WritePin>
 8004268:	2200      	movs	r2, #0
 800426a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800426e:	4823      	ldr	r0, [pc, #140]	; (80042fc <ALL_Motors_Disable+0x168>)
 8004270:	f004 f89c 	bl	80083ac <HAL_GPIO_WritePin>
	VM6_IN1_L();	VM6_IN2_L();	VM6_IN3_L();	VM6_IN4_L();
 8004274:	2200      	movs	r2, #0
 8004276:	2120      	movs	r1, #32
 8004278:	4821      	ldr	r0, [pc, #132]	; (8004300 <ALL_Motors_Disable+0x16c>)
 800427a:	f004 f897 	bl	80083ac <HAL_GPIO_WritePin>
 800427e:	2200      	movs	r2, #0
 8004280:	2140      	movs	r1, #64	; 0x40
 8004282:	481f      	ldr	r0, [pc, #124]	; (8004300 <ALL_Motors_Disable+0x16c>)
 8004284:	f004 f892 	bl	80083ac <HAL_GPIO_WritePin>
 8004288:	2200      	movs	r2, #0
 800428a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800428e:	481f      	ldr	r0, [pc, #124]	; (800430c <ALL_Motors_Disable+0x178>)
 8004290:	f004 f88c 	bl	80083ac <HAL_GPIO_WritePin>
 8004294:	2200      	movs	r2, #0
 8004296:	f44f 7100 	mov.w	r1, #512	; 0x200
 800429a:	481c      	ldr	r0, [pc, #112]	; (800430c <ALL_Motors_Disable+0x178>)
 800429c:	f004 f886 	bl	80083ac <HAL_GPIO_WritePin>
	VM7_IN1_L();	VM7_IN2_L();	VM7_IN3_L();	VM7_IN4_L();
 80042a0:	2200      	movs	r2, #0
 80042a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80042a6:	4815      	ldr	r0, [pc, #84]	; (80042fc <ALL_Motors_Disable+0x168>)
 80042a8:	f004 f880 	bl	80083ac <HAL_GPIO_WritePin>
 80042ac:	2200      	movs	r2, #0
 80042ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80042b2:	4812      	ldr	r0, [pc, #72]	; (80042fc <ALL_Motors_Disable+0x168>)
 80042b4:	f004 f87a 	bl	80083ac <HAL_GPIO_WritePin>
 80042b8:	2200      	movs	r2, #0
 80042ba:	2101      	movs	r1, #1
 80042bc:	480f      	ldr	r0, [pc, #60]	; (80042fc <ALL_Motors_Disable+0x168>)
 80042be:	f004 f875 	bl	80083ac <HAL_GPIO_WritePin>
 80042c2:	2200      	movs	r2, #0
 80042c4:	2102      	movs	r1, #2
 80042c6:	480d      	ldr	r0, [pc, #52]	; (80042fc <ALL_Motors_Disable+0x168>)
 80042c8:	f004 f870 	bl	80083ac <HAL_GPIO_WritePin>
	VM8_IN1_L();	VM8_IN2_L();	VM8_IN3_L();	VM8_IN4_L();
 80042cc:	2200      	movs	r2, #0
 80042ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80042d2:	480f      	ldr	r0, [pc, #60]	; (8004310 <ALL_Motors_Disable+0x17c>)
 80042d4:	f004 f86a 	bl	80083ac <HAL_GPIO_WritePin>
 80042d8:	2200      	movs	r2, #0
 80042da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042de:	480c      	ldr	r0, [pc, #48]	; (8004310 <ALL_Motors_Disable+0x17c>)
 80042e0:	f004 f864 	bl	80083ac <HAL_GPIO_WritePin>
 80042e4:	2200      	movs	r2, #0
 80042e6:	2104      	movs	r1, #4
 80042e8:	480a      	ldr	r0, [pc, #40]	; (8004314 <ALL_Motors_Disable+0x180>)
 80042ea:	f004 f85f 	bl	80083ac <HAL_GPIO_WritePin>
 80042ee:	2200      	movs	r2, #0
 80042f0:	2108      	movs	r1, #8
 80042f2:	4808      	ldr	r0, [pc, #32]	; (8004314 <ALL_Motors_Disable+0x180>)
 80042f4:	f004 f85a 	bl	80083ac <HAL_GPIO_WritePin>
}
 80042f8:	bf00      	nop
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40020400 	.word	0x40020400
 8004300:	40021000 	.word	0x40021000
 8004304:	40021800 	.word	0x40021800
 8004308:	40021400 	.word	0x40021400
 800430c:	40020800 	.word	0x40020800
 8004310:	40020c00 	.word	0x40020c00
 8004314:	40020000 	.word	0x40020000

08004318 <AccelDecelTimeCompute>:
	printf("Reseting Motors Result:0x%x ...\r\n",Motor_Init_Result);
	return Motor_Init_Result;
}

uint32_t AccelDecelTimeCompute(uint32_t AccelDecelRate)  //根据输入的加减速率，计算加减速计时器的TMR
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
	uint32_t temp_AccelDecelTimeTMR;
	if(AccelDecelRate > MOTORTIM_TMR){
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a09      	ldr	r2, [pc, #36]	; (8004348 <AccelDecelTimeCompute+0x30>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d905      	bls.n	8004334 <AccelDecelTimeCompute+0x1c>
		printf("[WRONG]AccelDecel Rate Oversize!\r\n"); //如果加减速超过MOTORTIM_TMR（100000Hz/s），判断过快报错
 8004328:	4808      	ldr	r0, [pc, #32]	; (800434c <AccelDecelTimeCompute+0x34>)
 800432a:	f00c f9d5 	bl	80106d8 <puts>
		return 10000;  // 返回一个较大的加速度增量10kHz
 800432e:	f242 7310 	movw	r3, #10000	; 0x2710
 8004332:	e005      	b.n	8004340 <AccelDecelTimeCompute+0x28>
	}
	temp_AccelDecelTimeTMR = MOTORTIM_TMR / AccelDecelRate ;  // 计算对应的加减速计时器TMR
 8004334:	4a04      	ldr	r2, [pc, #16]	; (8004348 <AccelDecelTimeCompute+0x30>)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	fbb2 f3f3 	udiv	r3, r2, r3
 800433c:	60fb      	str	r3, [r7, #12]
	return temp_AccelDecelTimeTMR;
 800433e:	68fb      	ldr	r3, [r7, #12]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	000186a0 	.word	0x000186a0
 800434c:	080129b8 	.word	0x080129b8

08004350 <AccelDecel>:

void AccelDecel(uint32_t AccelDecelState,struct MotorDefine *a)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
	switch (AccelDecelState){
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b02      	cmp	r3, #2
 800435e:	d022      	beq.n	80043a6 <AccelDecel+0x56>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d839      	bhi.n	80043da <AccelDecel+0x8a>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d035      	beq.n	80043d8 <AccelDecel+0x88>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d000      	beq.n	8004374 <AccelDecel+0x24>
			a->ActualSpeedInHz = a->StartupSpeedInHz;
			AccelDecelState = 0;
		}
		a->StepperSpeedTMR = MOTORTIM_TMR / a->ActualSpeedInHz;
	}
}
 8004372:	e032      	b.n	80043da <AccelDecel+0x8a>
		a->ActualSpeedInHz ++ ;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	1c5a      	adds	r2, r3, #1
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	641a      	str	r2, [r3, #64]	; 0x40
		if (a->ActualSpeedInHz >= a->DesiredSpeedInHz){
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004386:	429a      	cmp	r2, r3
 8004388:	d305      	bcc.n	8004396 <AccelDecel+0x46>
			a->ActualSpeedInHz = a->DesiredSpeedInHz;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	641a      	str	r2, [r3, #64]	; 0x40
			AccelDecelState = 0;
 8004392:	2300      	movs	r3, #0
 8004394:	607b      	str	r3, [r7, #4]
		a->StepperSpeedTMR = MOTORTIM_TMR / a->ActualSpeedInHz;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	4a13      	ldr	r2, [pc, #76]	; (80043e8 <AccelDecel+0x98>)
 800439c:	fbb2 f2f3 	udiv	r2, r2, r3
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	649a      	str	r2, [r3, #72]	; 0x48
	break;
 80043a4:	e019      	b.n	80043da <AccelDecel+0x8a>
		a->ActualSpeedInHz -- ;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	1e5a      	subs	r2, r3, #1
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	641a      	str	r2, [r3, #64]	; 0x40
		if (a->ActualSpeedInHz <= a->StartupSpeedInHz){
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d805      	bhi.n	80043c8 <AccelDecel+0x78>
			a->ActualSpeedInHz = a->StartupSpeedInHz;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	641a      	str	r2, [r3, #64]	; 0x40
			AccelDecelState = 0;
 80043c4:	2300      	movs	r3, #0
 80043c6:	607b      	str	r3, [r7, #4]
		a->StepperSpeedTMR = MOTORTIM_TMR / a->ActualSpeedInHz;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	4a06      	ldr	r2, [pc, #24]	; (80043e8 <AccelDecel+0x98>)
 80043ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	649a      	str	r2, [r3, #72]	; 0x48
}
 80043d6:	e000      	b.n	80043da <AccelDecel+0x8a>
	break;
 80043d8:	bf00      	nop
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	000186a0 	.word	0x000186a0

080043ec <Motor_AccelDecel_waveCalculate>:

void Motor_AccelDecel_waveCalculate(struct MotorDefine *a)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
	uint32_t DesiredNumberofSteptoAccel ;
	uint32_t DesiredNumberofSteptoDecel ;
	float DesiredAccellTimeInSeconds ;
	float DesiredDecellTimeInSeconds ;

	a->AccelerationTimeTMR = AccelDecelTimeCompute(a->accelerationRate);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff ff8d 	bl	8004318 <AccelDecelTimeCompute>
 80043fe:	4602      	mov	r2, r0
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	659a      	str	r2, [r3, #88]	; 0x58
	a->DecelerationTimeTMR = AccelDecelTimeCompute(a->decelerationRate);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff ff85 	bl	8004318 <AccelDecelTimeCompute>
 800440e:	4602      	mov	r2, r0
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	65da      	str	r2, [r3, #92]	; 0x5c

	DesiredAccellTimeInSeconds = ((float)a->DesiredSpeedInHz-a->StartupSpeedInHz) / a->accelerationRate;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004418:	ee07 3a90 	vmov	s15, r3
 800441c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004424:	ee07 3a90 	vmov	s15, r3
 8004428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800442c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	ee07 3a90 	vmov	s15, r3
 8004438:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800443c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004440:	edc7 7a05 	vstr	s15, [r7, #20]
	DesiredDecellTimeInSeconds = ((float)a->DesiredSpeedInHz-a->StartupSpeedInHz) / a->decelerationRate;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004448:	ee07 3a90 	vmov	s15, r3
 800444c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004454:	ee07 3a90 	vmov	s15, r3
 8004458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800445c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	ee07 3a90 	vmov	s15, r3
 8004468:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800446c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004470:	edc7 7a04 	vstr	s15, [r7, #16]
	DesiredNumberofSteptoAccel =  DesiredAccellTimeInSeconds * (a->DesiredSpeedInHz-a->StartupSpeedInHz) /2 + a->StartupSpeedInHz*DesiredAccellTimeInSeconds; //对速度曲线求积分，理论计算完成加速需要的步数
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	ee07 3a90 	vmov	s15, r3
 8004482:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004486:	edd7 7a05 	vldr	s15, [r7, #20]
 800448a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800448e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004492:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449a:	ee07 3a90 	vmov	s15, r3
 800449e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80044a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044b2:	ee17 3a90 	vmov	r3, s15
 80044b6:	60fb      	str	r3, [r7, #12]
	DesiredNumberofSteptoDecel =  DesiredDecellTimeInSeconds * (a->DesiredSpeedInHz-a->StartupSpeedInHz) /2 + a->StartupSpeedInHz*DesiredDecellTimeInSeconds ; //对速度曲线求积分，理论计算完成减速需要的步数
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	ee07 3a90 	vmov	s15, r3
 80044c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80044ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044d2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80044d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80044ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044f6:	ee17 3a90 	vmov	r3, s15
 80044fa:	60bb      	str	r3, [r7, #8]

	if ( (DesiredNumberofSteptoAccel + DesiredNumberofSteptoDecel) <= a->NumberofSteps ) //如果加减速需要的步数和，小于总步数，则进行完整加减速
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	441a      	add	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004506:	429a      	cmp	r2, r3
 8004508:	d809      	bhi.n	800451e <Motor_AccelDecel_waveCalculate+0x132>
	{
		a->NumberofSteps_StopAccel = a->NumberofSteps - DesiredNumberofSteptoAccel ;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	1ad2      	subs	r2, r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	651a      	str	r2, [r3, #80]	; 0x50
		a->NumberofSteps_BeginDecel =  DesiredNumberofSteptoDecel ;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	655a      	str	r2, [r3, #84]	; 0x54
 800451c:	e010      	b.n	8004540 <Motor_AccelDecel_waveCalculate+0x154>
	}
	else  // 如果行进距离不能完成完整的加减速曲线，则前1/3加速，后1/3减速
	{
		a->NumberofSteps_StopAccel = a->NumberofSteps /3*2 ;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004522:	4a0d      	ldr	r2, [pc, #52]	; (8004558 <Motor_AccelDecel_waveCalculate+0x16c>)
 8004524:	fba2 2303 	umull	r2, r3, r2, r3
 8004528:	085b      	lsrs	r3, r3, #1
 800452a:	005a      	lsls	r2, r3, #1
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	651a      	str	r2, [r3, #80]	; 0x50
		a->NumberofSteps_BeginDecel = a->NumberofSteps /3 ;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004534:	4a08      	ldr	r2, [pc, #32]	; (8004558 <Motor_AccelDecel_waveCalculate+0x16c>)
 8004536:	fba2 2303 	umull	r2, r3, r2, r3
 800453a:	085a      	lsrs	r2, r3, #1
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	655a      	str	r2, [r3, #84]	; 0x54
	}
	if ( a->MotorNumber == 4 ){		// 电机4柱塞泵，防止注液时挂液，取消减速使电机高速注液
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004546:	2b04      	cmp	r3, #4
 8004548:	d102      	bne.n	8004550 <Motor_AccelDecel_waveCalculate+0x164>
		a->NumberofSteps_BeginDecel = 0 ;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	655a      	str	r2, [r3, #84]	; 0x54
	}
}
 8004550:	bf00      	nop
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	aaaaaaab 	.word	0xaaaaaaab

0800455c <MotorDirection_SetUp>:

void MotorDirection_SetUp(struct MotorDefine *a)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
	if (a->MotorNumber == 1){
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 3020 	ldrb.w	r3, [r3, #32]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d110      	bne.n	8004590 <MotorDirection_SetUp+0x34>
		if(a->MotorDirection == 1){
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004574:	2b01      	cmp	r3, #1
 8004576:	d105      	bne.n	8004584 <MotorDirection_SetUp+0x28>
			Motor1_Nreset_direction;
 8004578:	2200      	movs	r2, #0
 800457a:	2120      	movs	r1, #32
 800457c:	4828      	ldr	r0, [pc, #160]	; (8004620 <MotorDirection_SetUp+0xc4>)
 800457e:	f003 ff15 	bl	80083ac <HAL_GPIO_WritePin>
		else{
			Motor4_reset_direction;
		}
	}

}
 8004582:	e048      	b.n	8004616 <MotorDirection_SetUp+0xba>
			Motor1_reset_direction;
 8004584:	2201      	movs	r2, #1
 8004586:	2120      	movs	r1, #32
 8004588:	4825      	ldr	r0, [pc, #148]	; (8004620 <MotorDirection_SetUp+0xc4>)
 800458a:	f003 ff0f 	bl	80083ac <HAL_GPIO_WritePin>
}
 800458e:	e042      	b.n	8004616 <MotorDirection_SetUp+0xba>
	else if (a->MotorNumber == 2){
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d112      	bne.n	80045c0 <MotorDirection_SetUp+0x64>
		if(a->MotorDirection == 1){
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d106      	bne.n	80045b2 <MotorDirection_SetUp+0x56>
			Motor2_Nreset_direction;
 80045a4:	2201      	movs	r2, #1
 80045a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045aa:	481d      	ldr	r0, [pc, #116]	; (8004620 <MotorDirection_SetUp+0xc4>)
 80045ac:	f003 fefe 	bl	80083ac <HAL_GPIO_WritePin>
}
 80045b0:	e031      	b.n	8004616 <MotorDirection_SetUp+0xba>
			Motor2_reset_direction;
 80045b2:	2200      	movs	r2, #0
 80045b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045b8:	4819      	ldr	r0, [pc, #100]	; (8004620 <MotorDirection_SetUp+0xc4>)
 80045ba:	f003 fef7 	bl	80083ac <HAL_GPIO_WritePin>
}
 80045be:	e02a      	b.n	8004616 <MotorDirection_SetUp+0xba>
	else if (a->MotorNumber == 3){
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d110      	bne.n	80045ec <MotorDirection_SetUp+0x90>
		if(a->MotorDirection == 1){
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d105      	bne.n	80045e0 <MotorDirection_SetUp+0x84>
			Motor3_Nreset_direction;
 80045d4:	2201      	movs	r2, #1
 80045d6:	2102      	movs	r1, #2
 80045d8:	4812      	ldr	r0, [pc, #72]	; (8004624 <MotorDirection_SetUp+0xc8>)
 80045da:	f003 fee7 	bl	80083ac <HAL_GPIO_WritePin>
}
 80045de:	e01a      	b.n	8004616 <MotorDirection_SetUp+0xba>
			Motor3_reset_direction;
 80045e0:	2200      	movs	r2, #0
 80045e2:	2102      	movs	r1, #2
 80045e4:	480f      	ldr	r0, [pc, #60]	; (8004624 <MotorDirection_SetUp+0xc8>)
 80045e6:	f003 fee1 	bl	80083ac <HAL_GPIO_WritePin>
}
 80045ea:	e014      	b.n	8004616 <MotorDirection_SetUp+0xba>
	else if (a->MotorNumber == 4){
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d10f      	bne.n	8004616 <MotorDirection_SetUp+0xba>
		if(a->MotorDirection == 1){
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d105      	bne.n	800460c <MotorDirection_SetUp+0xb0>
			Motor4_Nreset_direction;
 8004600:	2200      	movs	r2, #0
 8004602:	2110      	movs	r1, #16
 8004604:	4807      	ldr	r0, [pc, #28]	; (8004624 <MotorDirection_SetUp+0xc8>)
 8004606:	f003 fed1 	bl	80083ac <HAL_GPIO_WritePin>
}
 800460a:	e004      	b.n	8004616 <MotorDirection_SetUp+0xba>
			Motor4_reset_direction;
 800460c:	2201      	movs	r2, #1
 800460e:	2110      	movs	r1, #16
 8004610:	4804      	ldr	r0, [pc, #16]	; (8004624 <MotorDirection_SetUp+0xc8>)
 8004612:	f003 fecb 	bl	80083ac <HAL_GPIO_WritePin>
}
 8004616:	bf00      	nop
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	40020400 	.word	0x40020400
 8004624:	40021000 	.word	0x40021000

08004628 <MotorMove_steps>:

/*            *****************    0x40-0b01000000 电机参数控制模式 ：  ******************
根据协议，通过USART5进行出串口通讯，输入步进电机的【编号、方向、速度、距离、启动速度、加减速频率】电机运动参数
***特别注意： 调试模式如果增加打印信息，在连续执行函数时，会造成10-20ms的延时，***/
void MotorMove_steps(struct MotorDefine *temp)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
	if (Motor[temp->MotorNumber].Status == 1){
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004636:	4619      	mov	r1, r3
 8004638:	4a47      	ldr	r2, [pc, #284]	; (8004758 <MotorMove_steps+0x130>)
 800463a:	460b      	mov	r3, r1
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	440b      	add	r3, r1
 8004640:	015b      	lsls	r3, r3, #5
 8004642:	4413      	add	r3, r2
 8004644:	3330      	adds	r3, #48	; 0x30
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d110      	bne.n	800466e <MotorMove_steps+0x46>
		printf("[WRONG] Motor Moved Failed,Motor%d is busy!\r\n",Motor[temp->MotorNumber].MotorNumber);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004652:	4619      	mov	r1, r3
 8004654:	4a40      	ldr	r2, [pc, #256]	; (8004758 <MotorMove_steps+0x130>)
 8004656:	460b      	mov	r3, r1
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	440b      	add	r3, r1
 800465c:	015b      	lsls	r3, r3, #5
 800465e:	4413      	add	r3, r2
 8004660:	3320      	adds	r3, #32
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	4619      	mov	r1, r3
 8004666:	483d      	ldr	r0, [pc, #244]	; (800475c <MotorMove_steps+0x134>)
 8004668:	f00b ffb0 	bl	80105cc <iprintf>
		return ;
 800466c:	e19c      	b.n	80049a8 <MotorMove_steps+0x380>
	}
	else {
		Motor[temp->MotorNumber].Status = 1 ;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004674:	4619      	mov	r1, r3
 8004676:	4a38      	ldr	r2, [pc, #224]	; (8004758 <MotorMove_steps+0x130>)
 8004678:	460b      	mov	r3, r1
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	440b      	add	r3, r1
 800467e:	015b      	lsls	r3, r3, #5
 8004680:	4413      	add	r3, r2
 8004682:	3330      	adds	r3, #48	; 0x30
 8004684:	2201      	movs	r2, #1
 8004686:	701a      	strb	r2, [r3, #0]
	}

	temp->deceleration_ratio = Motor[temp->MotorNumber].deceleration_ratio ;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800468e:	4619      	mov	r1, r3
 8004690:	4a31      	ldr	r2, [pc, #196]	; (8004758 <MotorMove_steps+0x130>)
 8004692:	460b      	mov	r3, r1
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	440b      	add	r3, r1
 8004698:	015b      	lsls	r3, r3, #5
 800469a:	4413      	add	r3, r2
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	601a      	str	r2, [r3, #0]
	temp->step_angle = Motor[temp->MotorNumber].step_angle ;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046a8:	4619      	mov	r1, r3
 80046aa:	4a2b      	ldr	r2, [pc, #172]	; (8004758 <MotorMove_steps+0x130>)
 80046ac:	460b      	mov	r3, r1
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	440b      	add	r3, r1
 80046b2:	015b      	lsls	r3, r3, #5
 80046b4:	4413      	add	r3, r2
 80046b6:	3304      	adds	r3, #4
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	605a      	str	r2, [r3, #4]
	temp->mircro_steps = Motor[temp->MotorNumber].mircro_steps ;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046c4:	4619      	mov	r1, r3
 80046c6:	4a24      	ldr	r2, [pc, #144]	; (8004758 <MotorMove_steps+0x130>)
 80046c8:	460b      	mov	r3, r1
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	440b      	add	r3, r1
 80046ce:	015b      	lsls	r3, r3, #5
 80046d0:	4413      	add	r3, r2
 80046d2:	3308      	adds	r3, #8
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	609a      	str	r2, [r3, #8]
	temp->MaxSpeedInRads = Motor[temp->MotorNumber].MaxSpeedInRads ;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046e0:	4619      	mov	r1, r3
 80046e2:	4a1d      	ldr	r2, [pc, #116]	; (8004758 <MotorMove_steps+0x130>)
 80046e4:	460b      	mov	r3, r1
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	440b      	add	r3, r1
 80046ea:	015b      	lsls	r3, r3, #5
 80046ec:	4413      	add	r3, r2
 80046ee:	330c      	adds	r3, #12
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	60da      	str	r2, [r3, #12]
	temp->htim_x = Motor[temp->MotorNumber].htim_x ;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046fc:	4619      	mov	r1, r3
 80046fe:	4a16      	ldr	r2, [pc, #88]	; (8004758 <MotorMove_steps+0x130>)
 8004700:	460b      	mov	r3, r1
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	440b      	add	r3, r1
 8004706:	015b      	lsls	r3, r3, #5
 8004708:	4413      	add	r3, r2
 800470a:	3334      	adds	r3, #52	; 0x34
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	635a      	str	r2, [r3, #52]	; 0x34

	if(temp->DesiredSpeedInRads > temp->MaxSpeedInRads)  // 判断电机设置速度是否超过最大转速
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	ed93 7a05 	vldr	s14, [r3, #20]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	edd3 7a03 	vldr	s15, [r3, #12]
 800471e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004726:	dd1f      	ble.n	8004768 <MotorMove_steps+0x140>
	{
		printf("[WRONG] Setup Speed faster than max speed:%.2f rad/s !\r\n",temp->MaxSpeedInRads);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	4618      	mov	r0, r3
 800472e:	f7fb ff0b 	bl	8000548 <__aeabi_f2d>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	480a      	ldr	r0, [pc, #40]	; (8004760 <MotorMove_steps+0x138>)
 8004738:	f00b ff48 	bl	80105cc <iprintf>
		Motor[temp->MotorNumber].Status = 0 ;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004742:	4619      	mov	r1, r3
 8004744:	4a04      	ldr	r2, [pc, #16]	; (8004758 <MotorMove_steps+0x130>)
 8004746:	460b      	mov	r3, r1
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	440b      	add	r3, r1
 800474c:	015b      	lsls	r3, r3, #5
 800474e:	4413      	add	r3, r2
 8004750:	3330      	adds	r3, #48	; 0x30
 8004752:	2200      	movs	r2, #0
 8004754:	701a      	strb	r2, [r3, #0]
		return ;
 8004756:	e127      	b.n	80049a8 <MotorMove_steps+0x380>
 8004758:	200008b0 	.word	0x200008b0
 800475c:	080129dc 	.word	0x080129dc
 8004760:	08012a0c 	.word	0x08012a0c
 8004764:	43b40000 	.word	0x43b40000
	}

	// 计算： 单圈步数、启动速度、目标速度、行进步数、加减速时间
	temp->StepsInOneCircle = (360 / temp->step_angle) * temp->deceleration_ratio * temp->mircro_steps;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	edd3 7a01 	vldr	s15, [r3, #4]
 800476e:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8004764 <MotorMove_steps+0x13c>
 8004772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	edd3 7a00 	vldr	s15, [r3]
 800477c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	ee07 3a90 	vmov	s15, r3
 8004788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800478c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004794:	ee17 2a90 	vmov	r2, s15
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	639a      	str	r2, [r3, #56]	; 0x38
	temp->StartupSpeedInHz = temp->StepsInOneCircle * temp->StartupSpeedInRads ;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a0:	ee07 3a90 	vmov	s15, r3
 80047a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80047ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047b6:	ee17 2a90 	vmov	r2, s15
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	63da      	str	r2, [r3, #60]	; 0x3c
	temp->ActualSpeedInHz = temp->StartupSpeedInHz;						// 设定初始实际频率为启动频率
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40
	temp->DesiredSpeedInHz = temp->StepsInOneCircle * temp->DesiredSpeedInRads ;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	ee07 3a90 	vmov	s15, r3
 80047ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	edd3 7a05 	vldr	s15, [r3, #20]
 80047d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047e0:	ee17 2a90 	vmov	r2, s15
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	645a      	str	r2, [r3, #68]	; 0x44
	temp->StepperSpeedTMR = MOTORTIM_TMR / temp->ActualSpeedInHz;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ec:	4a70      	ldr	r2, [pc, #448]	; (80049b0 <MotorMove_steps+0x388>)
 80047ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	649a      	str	r2, [r3, #72]	; 0x48
	temp->NumberofSteps = temp->NumberofRads * temp->StepsInOneCircle ;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004800:	ee07 3a90 	vmov	s15, r3
 8004804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800480c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004810:	ee17 2a90 	vmov	r2, s15
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	64da      	str	r2, [r3, #76]	; 0x4c

	Motor_AccelDecel_waveCalculate(temp);  // 计算电机加减速曲线
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7ff fde7 	bl	80043ec <Motor_AccelDecel_waveCalculate>

	Motor[temp->MotorNumber].StepsInOneCircle = temp->StepsInOneCircle ;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004824:	4618      	mov	r0, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800482a:	4962      	ldr	r1, [pc, #392]	; (80049b4 <MotorMove_steps+0x38c>)
 800482c:	4603      	mov	r3, r0
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	4403      	add	r3, r0
 8004832:	015b      	lsls	r3, r3, #5
 8004834:	440b      	add	r3, r1
 8004836:	3338      	adds	r3, #56	; 0x38
 8004838:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].StartupSpeedInHz = temp->StartupSpeedInHz ;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004840:	4618      	mov	r0, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004846:	495b      	ldr	r1, [pc, #364]	; (80049b4 <MotorMove_steps+0x38c>)
 8004848:	4603      	mov	r3, r0
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	4403      	add	r3, r0
 800484e:	015b      	lsls	r3, r3, #5
 8004850:	440b      	add	r3, r1
 8004852:	333c      	adds	r3, #60	; 0x3c
 8004854:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].ActualSpeedInHz = temp->ActualSpeedInHz ;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 3020 	ldrb.w	r3, [r3, #32]
 800485c:	4618      	mov	r0, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004862:	4954      	ldr	r1, [pc, #336]	; (80049b4 <MotorMove_steps+0x38c>)
 8004864:	4603      	mov	r3, r0
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	4403      	add	r3, r0
 800486a:	015b      	lsls	r3, r3, #5
 800486c:	440b      	add	r3, r1
 800486e:	3340      	adds	r3, #64	; 0x40
 8004870:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].DesiredSpeedInHz = temp->DesiredSpeedInHz ;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004878:	4618      	mov	r0, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800487e:	494d      	ldr	r1, [pc, #308]	; (80049b4 <MotorMove_steps+0x38c>)
 8004880:	4603      	mov	r3, r0
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	4403      	add	r3, r0
 8004886:	015b      	lsls	r3, r3, #5
 8004888:	440b      	add	r3, r1
 800488a:	3344      	adds	r3, #68	; 0x44
 800488c:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].StepperSpeedTMR = temp->StepperSpeedTMR ;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004894:	4618      	mov	r0, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800489a:	4946      	ldr	r1, [pc, #280]	; (80049b4 <MotorMove_steps+0x38c>)
 800489c:	4603      	mov	r3, r0
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	4403      	add	r3, r0
 80048a2:	015b      	lsls	r3, r3, #5
 80048a4:	440b      	add	r3, r1
 80048a6:	3348      	adds	r3, #72	; 0x48
 80048a8:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].NumberofSteps = temp->NumberofSteps ;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048b0:	4618      	mov	r0, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048b6:	493f      	ldr	r1, [pc, #252]	; (80049b4 <MotorMove_steps+0x38c>)
 80048b8:	4603      	mov	r3, r0
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	4403      	add	r3, r0
 80048be:	015b      	lsls	r3, r3, #5
 80048c0:	440b      	add	r3, r1
 80048c2:	334c      	adds	r3, #76	; 0x4c
 80048c4:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].MotorDirection = temp->MotorDirection ;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048cc:	4619      	mov	r1, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
 80048d4:	4a37      	ldr	r2, [pc, #220]	; (80049b4 <MotorMove_steps+0x38c>)
 80048d6:	460b      	mov	r3, r1
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	440b      	add	r3, r1
 80048dc:	015b      	lsls	r3, r3, #5
 80048de:	4413      	add	r3, r2
 80048e0:	3321      	adds	r3, #33	; 0x21
 80048e2:	4602      	mov	r2, r0
 80048e4:	701a      	strb	r2, [r3, #0]
	Motor[temp->MotorNumber].NumberofSteps_StopAccel = temp->NumberofSteps_StopAccel ;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048ec:	4618      	mov	r0, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048f2:	4930      	ldr	r1, [pc, #192]	; (80049b4 <MotorMove_steps+0x38c>)
 80048f4:	4603      	mov	r3, r0
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	4403      	add	r3, r0
 80048fa:	015b      	lsls	r3, r3, #5
 80048fc:	440b      	add	r3, r1
 80048fe:	3350      	adds	r3, #80	; 0x50
 8004900:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].NumberofSteps_BeginDecel = temp->NumberofSteps_BeginDecel ;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004908:	4618      	mov	r0, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800490e:	4929      	ldr	r1, [pc, #164]	; (80049b4 <MotorMove_steps+0x38c>)
 8004910:	4603      	mov	r3, r0
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	4403      	add	r3, r0
 8004916:	015b      	lsls	r3, r3, #5
 8004918:	440b      	add	r3, r1
 800491a:	3354      	adds	r3, #84	; 0x54
 800491c:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].AccelerationTimeTMR = temp->AccelerationTimeTMR ;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004924:	4618      	mov	r0, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800492a:	4922      	ldr	r1, [pc, #136]	; (80049b4 <MotorMove_steps+0x38c>)
 800492c:	4603      	mov	r3, r0
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	4403      	add	r3, r0
 8004932:	015b      	lsls	r3, r3, #5
 8004934:	440b      	add	r3, r1
 8004936:	3358      	adds	r3, #88	; 0x58
 8004938:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].DecelerationTimeTMR = temp->DecelerationTimeTMR ;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004940:	4618      	mov	r0, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004946:	491b      	ldr	r1, [pc, #108]	; (80049b4 <MotorMove_steps+0x38c>)
 8004948:	4603      	mov	r3, r0
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	4403      	add	r3, r0
 800494e:	015b      	lsls	r3, r3, #5
 8004950:	440b      	add	r3, r1
 8004952:	335c      	adds	r3, #92	; 0x5c
 8004954:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].TargetPosition = -16777200 ; //暂时设置目标位置为无法达到的值，参数控制模式用步进数控制中断停止
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 3020 	ldrb.w	r3, [r3, #32]
 800495c:	4619      	mov	r1, r3
 800495e:	4a15      	ldr	r2, [pc, #84]	; (80049b4 <MotorMove_steps+0x38c>)
 8004960:	460b      	mov	r3, r1
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	440b      	add	r3, r1
 8004966:	015b      	lsls	r3, r3, #5
 8004968:	4413      	add	r3, r2
 800496a:	332c      	adds	r3, #44	; 0x2c
 800496c:	4a12      	ldr	r2, [pc, #72]	; (80049b8 <MotorMove_steps+0x390>)
 800496e:	601a      	str	r2, [r3, #0]

	MotorDirection_SetUp(&Motor[temp->MotorNumber]) ;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004976:	461a      	mov	r2, r3
 8004978:	4613      	mov	r3, r2
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	4413      	add	r3, r2
 800497e:	015b      	lsls	r3, r3, #5
 8004980:	4a0c      	ldr	r2, [pc, #48]	; (80049b4 <MotorMove_steps+0x38c>)
 8004982:	4413      	add	r3, r2
 8004984:	4618      	mov	r0, r3
 8004986:	f7ff fde9 	bl	800455c <MotorDirection_SetUp>
	HAL_TIM_Base_Start_IT(Motor[temp->MotorNumber].htim_x);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004990:	4619      	mov	r1, r3
 8004992:	4a08      	ldr	r2, [pc, #32]	; (80049b4 <MotorMove_steps+0x38c>)
 8004994:	460b      	mov	r3, r1
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	440b      	add	r3, r1
 800499a:	015b      	lsls	r3, r3, #5
 800499c:	4413      	add	r3, r2
 800499e:	3334      	adds	r3, #52	; 0x34
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f006 fc5c 	bl	800b260 <HAL_TIM_Base_Start_IT>
}
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	000186a0 	.word	0x000186a0
 80049b4:	200008b0 	.word	0x200008b0
 80049b8:	ff000010 	.word	0xff000010

080049bc <MotorMove_position>:

/*            *****************    0x80-0b10000000 电机位置控制模式 ：  ******************
根据协议，通过USART5进行出串口通讯，输入步进电机的 【地址+目标位置】 即可，使用程序本身的电机参数控制运动
***特别注意： 调试模式如果增加打印信息，在连续执行函数时，会造成10-20ms的延时，***/
void MotorMove_position(struct MotorDefine *temp  , int32_t targer_position)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
	if (Motor[temp->MotorNumber].Status == 1){
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049cc:	4619      	mov	r1, r3
 80049ce:	4acf      	ldr	r2, [pc, #828]	; (8004d0c <MotorMove_position+0x350>)
 80049d0:	460b      	mov	r3, r1
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	440b      	add	r3, r1
 80049d6:	015b      	lsls	r3, r3, #5
 80049d8:	4413      	add	r3, r2
 80049da:	3330      	adds	r3, #48	; 0x30
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d110      	bne.n	8004a04 <MotorMove_position+0x48>
		printf("[WRONG] Position Set Failed,Motor%d is busy!\r\n",Motor[temp->MotorNumber].MotorNumber);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049e8:	4619      	mov	r1, r3
 80049ea:	4ac8      	ldr	r2, [pc, #800]	; (8004d0c <MotorMove_position+0x350>)
 80049ec:	460b      	mov	r3, r1
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	440b      	add	r3, r1
 80049f2:	015b      	lsls	r3, r3, #5
 80049f4:	4413      	add	r3, r2
 80049f6:	3320      	adds	r3, #32
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	4619      	mov	r1, r3
 80049fc:	48c4      	ldr	r0, [pc, #784]	; (8004d10 <MotorMove_position+0x354>)
 80049fe:	f00b fde5 	bl	80105cc <iprintf>
		return ;
 8004a02:	e2fb      	b.n	8004ffc <MotorMove_position+0x640>
	}
	else {
		Motor[temp->MotorNumber].Status = 1 ;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4abf      	ldr	r2, [pc, #764]	; (8004d0c <MotorMove_position+0x350>)
 8004a0e:	460b      	mov	r3, r1
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	440b      	add	r3, r1
 8004a14:	015b      	lsls	r3, r3, #5
 8004a16:	4413      	add	r3, r2
 8004a18:	3330      	adds	r3, #48	; 0x30
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	701a      	strb	r2, [r3, #0]
	}

	Motor[temp->MotorNumber].StepsInOneCircle = (360 / Motor[temp->MotorNumber].step_angle) * Motor[temp->MotorNumber].deceleration_ratio * Motor[temp->MotorNumber].mircro_steps;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a24:	4619      	mov	r1, r3
 8004a26:	4ab9      	ldr	r2, [pc, #740]	; (8004d0c <MotorMove_position+0x350>)
 8004a28:	460b      	mov	r3, r1
 8004a2a:	005b      	lsls	r3, r3, #1
 8004a2c:	440b      	add	r3, r1
 8004a2e:	015b      	lsls	r3, r3, #5
 8004a30:	4413      	add	r3, r2
 8004a32:	3304      	adds	r3, #4
 8004a34:	edd3 7a00 	vldr	s15, [r3]
 8004a38:	eddf 6ab6 	vldr	s13, [pc, #728]	; 8004d14 <MotorMove_position+0x358>
 8004a3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a46:	4619      	mov	r1, r3
 8004a48:	4ab0      	ldr	r2, [pc, #704]	; (8004d0c <MotorMove_position+0x350>)
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	440b      	add	r3, r1
 8004a50:	015b      	lsls	r3, r3, #5
 8004a52:	4413      	add	r3, r2
 8004a54:	edd3 7a00 	vldr	s15, [r3]
 8004a58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a62:	4619      	mov	r1, r3
 8004a64:	4aa9      	ldr	r2, [pc, #676]	; (8004d0c <MotorMove_position+0x350>)
 8004a66:	460b      	mov	r3, r1
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	440b      	add	r3, r1
 8004a6c:	015b      	lsls	r3, r3, #5
 8004a6e:	4413      	add	r3, r2
 8004a70:	3308      	adds	r3, #8
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	ee07 3a90 	vmov	s15, r3
 8004a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a86:	4619      	mov	r1, r3
 8004a88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a8c:	ee17 0a90 	vmov	r0, s15
 8004a90:	4a9e      	ldr	r2, [pc, #632]	; (8004d0c <MotorMove_position+0x350>)
 8004a92:	460b      	mov	r3, r1
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	440b      	add	r3, r1
 8004a98:	015b      	lsls	r3, r3, #5
 8004a9a:	4413      	add	r3, r2
 8004a9c:	3338      	adds	r3, #56	; 0x38
 8004a9e:	6018      	str	r0, [r3, #0]
	Motor[temp->MotorNumber].StartupSpeedInHz = Motor[temp->MotorNumber].StepsInOneCircle * Motor[temp->MotorNumber].StartupSpeedInRads ;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4a98      	ldr	r2, [pc, #608]	; (8004d0c <MotorMove_position+0x350>)
 8004aaa:	460b      	mov	r3, r1
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	440b      	add	r3, r1
 8004ab0:	015b      	lsls	r3, r3, #5
 8004ab2:	4413      	add	r3, r2
 8004ab4:	3338      	adds	r3, #56	; 0x38
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	ee07 3a90 	vmov	s15, r3
 8004abc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4a90      	ldr	r2, [pc, #576]	; (8004d0c <MotorMove_position+0x350>)
 8004aca:	460b      	mov	r3, r1
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	440b      	add	r3, r1
 8004ad0:	015b      	lsls	r3, r3, #5
 8004ad2:	4413      	add	r3, r2
 8004ad4:	3310      	adds	r3, #16
 8004ad6:	edd3 7a00 	vldr	s15, [r3]
 8004ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aea:	ee17 0a90 	vmov	r0, s15
 8004aee:	4a87      	ldr	r2, [pc, #540]	; (8004d0c <MotorMove_position+0x350>)
 8004af0:	460b      	mov	r3, r1
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	440b      	add	r3, r1
 8004af6:	015b      	lsls	r3, r3, #5
 8004af8:	4413      	add	r3, r2
 8004afa:	333c      	adds	r3, #60	; 0x3c
 8004afc:	6018      	str	r0, [r3, #0]
	Motor[temp->MotorNumber].ActualSpeedInHz = Motor[temp->MotorNumber].StartupSpeedInHz;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b04:	4619      	mov	r1, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	4a7f      	ldr	r2, [pc, #508]	; (8004d0c <MotorMove_position+0x350>)
 8004b10:	460b      	mov	r3, r1
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	440b      	add	r3, r1
 8004b16:	015b      	lsls	r3, r3, #5
 8004b18:	4413      	add	r3, r2
 8004b1a:	333c      	adds	r3, #60	; 0x3c
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	497b      	ldr	r1, [pc, #492]	; (8004d0c <MotorMove_position+0x350>)
 8004b20:	4603      	mov	r3, r0
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	4403      	add	r3, r0
 8004b26:	015b      	lsls	r3, r3, #5
 8004b28:	440b      	add	r3, r1
 8004b2a:	3340      	adds	r3, #64	; 0x40
 8004b2c:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].DesiredSpeedInHz = Motor[temp->MotorNumber].StepsInOneCircle * Motor[temp->MotorNumber].DesiredSpeedInRads ;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b34:	4619      	mov	r1, r3
 8004b36:	4a75      	ldr	r2, [pc, #468]	; (8004d0c <MotorMove_position+0x350>)
 8004b38:	460b      	mov	r3, r1
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	440b      	add	r3, r1
 8004b3e:	015b      	lsls	r3, r3, #5
 8004b40:	4413      	add	r3, r2
 8004b42:	3338      	adds	r3, #56	; 0x38
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	ee07 3a90 	vmov	s15, r3
 8004b4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b54:	4619      	mov	r1, r3
 8004b56:	4a6d      	ldr	r2, [pc, #436]	; (8004d0c <MotorMove_position+0x350>)
 8004b58:	460b      	mov	r3, r1
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	440b      	add	r3, r1
 8004b5e:	015b      	lsls	r3, r3, #5
 8004b60:	4413      	add	r3, r2
 8004b62:	3314      	adds	r3, #20
 8004b64:	edd3 7a00 	vldr	s15, [r3]
 8004b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b72:	4619      	mov	r1, r3
 8004b74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b78:	ee17 0a90 	vmov	r0, s15
 8004b7c:	4a63      	ldr	r2, [pc, #396]	; (8004d0c <MotorMove_position+0x350>)
 8004b7e:	460b      	mov	r3, r1
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	440b      	add	r3, r1
 8004b84:	015b      	lsls	r3, r3, #5
 8004b86:	4413      	add	r3, r2
 8004b88:	3344      	adds	r3, #68	; 0x44
 8004b8a:	6018      	str	r0, [r3, #0]
	Motor[temp->MotorNumber].StepperSpeedTMR = MOTORTIM_TMR / Motor[temp->MotorNumber].ActualSpeedInHz;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b92:	4619      	mov	r1, r3
 8004b94:	4a5d      	ldr	r2, [pc, #372]	; (8004d0c <MotorMove_position+0x350>)
 8004b96:	460b      	mov	r3, r1
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	440b      	add	r3, r1
 8004b9c:	015b      	lsls	r3, r3, #5
 8004b9e:	4413      	add	r3, r2
 8004ba0:	3340      	adds	r3, #64	; 0x40
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004baa:	4610      	mov	r0, r2
 8004bac:	4a5a      	ldr	r2, [pc, #360]	; (8004d18 <MotorMove_position+0x35c>)
 8004bae:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bb2:	4956      	ldr	r1, [pc, #344]	; (8004d0c <MotorMove_position+0x350>)
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	4403      	add	r3, r0
 8004bba:	015b      	lsls	r3, r3, #5
 8004bbc:	440b      	add	r3, r1
 8004bbe:	3348      	adds	r3, #72	; 0x48
 8004bc0:	601a      	str	r2, [r3, #0]

	Motor[temp->MotorNumber].TargetPosition = targer_position ;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bc8:	4619      	mov	r1, r3
 8004bca:	4a50      	ldr	r2, [pc, #320]	; (8004d0c <MotorMove_position+0x350>)
 8004bcc:	460b      	mov	r3, r1
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	440b      	add	r3, r1
 8004bd2:	015b      	lsls	r3, r3, #5
 8004bd4:	4413      	add	r3, r2
 8004bd6:	332c      	adds	r3, #44	; 0x2c
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].NumberofSteps = abs(Motor[temp->MotorNumber].TargetPosition  -  Motor[temp->MotorNumber].StepPosition) ;//计算总步数
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004be2:	4619      	mov	r1, r3
 8004be4:	4a49      	ldr	r2, [pc, #292]	; (8004d0c <MotorMove_position+0x350>)
 8004be6:	460b      	mov	r3, r1
 8004be8:	005b      	lsls	r3, r3, #1
 8004bea:	440b      	add	r3, r1
 8004bec:	015b      	lsls	r3, r3, #5
 8004bee:	4413      	add	r3, r2
 8004bf0:	332c      	adds	r3, #44	; 0x2c
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	4943      	ldr	r1, [pc, #268]	; (8004d0c <MotorMove_position+0x350>)
 8004bfe:	4603      	mov	r3, r0
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	4403      	add	r3, r0
 8004c04:	015b      	lsls	r3, r3, #5
 8004c06:	440b      	add	r3, r1
 8004c08:	3328      	adds	r3, #40	; 0x28
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004c12:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4610      	mov	r0, r2
 8004c20:	4a3a      	ldr	r2, [pc, #232]	; (8004d0c <MotorMove_position+0x350>)
 8004c22:	460b      	mov	r3, r1
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	440b      	add	r3, r1
 8004c28:	015b      	lsls	r3, r3, #5
 8004c2a:	4413      	add	r3, r2
 8004c2c:	334c      	adds	r3, #76	; 0x4c
 8004c2e:	6018      	str	r0, [r3, #0]
	if (Motor[temp->MotorNumber].TargetPosition == Motor[temp->MotorNumber].StepPosition){
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c36:	4619      	mov	r1, r3
 8004c38:	4a34      	ldr	r2, [pc, #208]	; (8004d0c <MotorMove_position+0x350>)
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	440b      	add	r3, r1
 8004c40:	015b      	lsls	r3, r3, #5
 8004c42:	4413      	add	r3, r2
 8004c44:	332c      	adds	r3, #44	; 0x2c
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	492e      	ldr	r1, [pc, #184]	; (8004d0c <MotorMove_position+0x350>)
 8004c52:	4603      	mov	r3, r0
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	4403      	add	r3, r0
 8004c58:	015b      	lsls	r3, r3, #5
 8004c5a:	440b      	add	r3, r1
 8004c5c:	3328      	adds	r3, #40	; 0x28
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d12b      	bne.n	8004cbc <MotorMove_position+0x300>
		Motor[temp->MotorNumber].Status = 0 ;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4a27      	ldr	r2, [pc, #156]	; (8004d0c <MotorMove_position+0x350>)
 8004c6e:	460b      	mov	r3, r1
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	440b      	add	r3, r1
 8004c74:	015b      	lsls	r3, r3, #5
 8004c76:	4413      	add	r3, r2
 8004c78:	3330      	adds	r3, #48	; 0x30
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	701a      	strb	r2, [r3, #0]
		printf("---KEEP---Motor%d Steps Position:%ld---\r\n",Motor[temp->MotorNumber].MotorNumber,Motor[temp->MotorNumber].StepPosition);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c84:	4619      	mov	r1, r3
 8004c86:	4a21      	ldr	r2, [pc, #132]	; (8004d0c <MotorMove_position+0x350>)
 8004c88:	460b      	mov	r3, r1
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	440b      	add	r3, r1
 8004c8e:	015b      	lsls	r3, r3, #5
 8004c90:	4413      	add	r3, r2
 8004c92:	3320      	adds	r3, #32
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	4618      	mov	r0, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4a1a      	ldr	r2, [pc, #104]	; (8004d0c <MotorMove_position+0x350>)
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	440b      	add	r3, r1
 8004ca8:	015b      	lsls	r3, r3, #5
 8004caa:	4413      	add	r3, r2
 8004cac:	3328      	adds	r3, #40	; 0x28
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	4601      	mov	r1, r0
 8004cb4:	4819      	ldr	r0, [pc, #100]	; (8004d1c <MotorMove_position+0x360>)
 8004cb6:	f00b fc89 	bl	80105cc <iprintf>
		return ;
 8004cba:	e19f      	b.n	8004ffc <MotorMove_position+0x640>
	}
	else if (Motor[temp->MotorNumber].TargetPosition > Motor[temp->MotorNumber].StepPosition ){
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	4a11      	ldr	r2, [pc, #68]	; (8004d0c <MotorMove_position+0x350>)
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	440b      	add	r3, r1
 8004ccc:	015b      	lsls	r3, r3, #5
 8004cce:	4413      	add	r3, r2
 8004cd0:	332c      	adds	r3, #44	; 0x2c
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	490b      	ldr	r1, [pc, #44]	; (8004d0c <MotorMove_position+0x350>)
 8004cde:	4603      	mov	r3, r0
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	4403      	add	r3, r0
 8004ce4:	015b      	lsls	r3, r3, #5
 8004ce6:	440b      	add	r3, r1
 8004ce8:	3328      	adds	r3, #40	; 0x28
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	dd17      	ble.n	8004d20 <MotorMove_position+0x364>
		Motor[temp->MotorNumber].MotorDirection = 1 ;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4a04      	ldr	r2, [pc, #16]	; (8004d0c <MotorMove_position+0x350>)
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	440b      	add	r3, r1
 8004d00:	015b      	lsls	r3, r3, #5
 8004d02:	4413      	add	r3, r2
 8004d04:	3321      	adds	r3, #33	; 0x21
 8004d06:	2201      	movs	r2, #1
 8004d08:	701a      	strb	r2, [r3, #0]
 8004d0a:	e016      	b.n	8004d3a <MotorMove_position+0x37e>
 8004d0c:	200008b0 	.word	0x200008b0
 8004d10:	08012a48 	.word	0x08012a48
 8004d14:	43b40000 	.word	0x43b40000
 8004d18:	000186a0 	.word	0x000186a0
 8004d1c:	08012a78 	.word	0x08012a78
	}
	else{
		Motor[temp->MotorNumber].MotorDirection = 0 ;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d26:	4619      	mov	r1, r3
 8004d28:	4ab6      	ldr	r2, [pc, #728]	; (8005004 <MotorMove_position+0x648>)
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	440b      	add	r3, r1
 8004d30:	015b      	lsls	r3, r3, #5
 8004d32:	4413      	add	r3, r2
 8004d34:	3321      	adds	r3, #33	; 0x21
 8004d36:	2200      	movs	r2, #0
 8004d38:	701a      	strb	r2, [r3, #0]
	}

	Motor_AccelDecel_waveCalculate(&Motor[temp->MotorNumber]);  // 计算电机加减速曲线
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d40:	461a      	mov	r2, r3
 8004d42:	4613      	mov	r3, r2
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	4413      	add	r3, r2
 8004d48:	015b      	lsls	r3, r3, #5
 8004d4a:	4aae      	ldr	r2, [pc, #696]	; (8005004 <MotorMove_position+0x648>)
 8004d4c:	4413      	add	r3, r2
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff fb4c 	bl	80043ec <Motor_AccelDecel_waveCalculate>

	if (Motor[temp->MotorNumber].MotorNumber == 1)   // Motor1为传送带形式步进电机，非丝杆直线电机，方向控制和直线电机不一样
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4aa9      	ldr	r2, [pc, #676]	; (8005004 <MotorMove_position+0x648>)
 8004d5e:	460b      	mov	r3, r1
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	440b      	add	r3, r1
 8004d64:	015b      	lsls	r3, r3, #5
 8004d66:	4413      	add	r3, r2
 8004d68:	3320      	adds	r3, #32
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	f040 8101 	bne.w	8004f74 <MotorMove_position+0x5b8>
	{
		Motor[temp->MotorNumber].NumberofSteps = Motor[temp->MotorNumber].NumberofSteps % Motor[temp->MotorNumber].StepsInOneCircle ;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4aa2      	ldr	r2, [pc, #648]	; (8005004 <MotorMove_position+0x648>)
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	440b      	add	r3, r1
 8004d82:	015b      	lsls	r3, r3, #5
 8004d84:	4413      	add	r3, r2
 8004d86:	334c      	adds	r3, #76	; 0x4c
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d90:	4618      	mov	r0, r3
 8004d92:	499c      	ldr	r1, [pc, #624]	; (8005004 <MotorMove_position+0x648>)
 8004d94:	4603      	mov	r3, r0
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	4403      	add	r3, r0
 8004d9a:	015b      	lsls	r3, r3, #5
 8004d9c:	440b      	add	r3, r1
 8004d9e:	3338      	adds	r3, #56	; 0x38
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6879      	ldr	r1, [r7, #4]
 8004da4:	f891 1020 	ldrb.w	r1, [r1, #32]
 8004da8:	4608      	mov	r0, r1
 8004daa:	fbb2 f1f3 	udiv	r1, r2, r3
 8004dae:	fb01 f303 	mul.w	r3, r1, r3
 8004db2:	1ad2      	subs	r2, r2, r3
 8004db4:	4993      	ldr	r1, [pc, #588]	; (8005004 <MotorMove_position+0x648>)
 8004db6:	4603      	mov	r3, r0
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	4403      	add	r3, r0
 8004dbc:	015b      	lsls	r3, r3, #5
 8004dbe:	440b      	add	r3, r1
 8004dc0:	334c      	adds	r3, #76	; 0x4c
 8004dc2:	601a      	str	r2, [r3, #0]
		Motor[temp->MotorNumber].TargetPosition = Motor[temp->MotorNumber].TargetPosition % Motor[temp->MotorNumber].StepsInOneCircle ;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dca:	4619      	mov	r1, r3
 8004dcc:	4a8d      	ldr	r2, [pc, #564]	; (8005004 <MotorMove_position+0x648>)
 8004dce:	460b      	mov	r3, r1
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	440b      	add	r3, r1
 8004dd4:	015b      	lsls	r3, r3, #5
 8004dd6:	4413      	add	r3, r2
 8004dd8:	332c      	adds	r3, #44	; 0x2c
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	461a      	mov	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004de4:	4618      	mov	r0, r3
 8004de6:	4987      	ldr	r1, [pc, #540]	; (8005004 <MotorMove_position+0x648>)
 8004de8:	4603      	mov	r3, r0
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	4403      	add	r3, r0
 8004dee:	015b      	lsls	r3, r3, #5
 8004df0:	440b      	add	r3, r1
 8004df2:	3338      	adds	r3, #56	; 0x38
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	fbb2 f1f3 	udiv	r1, r2, r3
 8004dfa:	fb01 f303 	mul.w	r3, r1, r3
 8004dfe:	1ad2      	subs	r2, r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e06:	4619      	mov	r1, r3
 8004e08:	4610      	mov	r0, r2
 8004e0a:	4a7e      	ldr	r2, [pc, #504]	; (8005004 <MotorMove_position+0x648>)
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	440b      	add	r3, r1
 8004e12:	015b      	lsls	r3, r3, #5
 8004e14:	4413      	add	r3, r2
 8004e16:	332c      	adds	r3, #44	; 0x2c
 8004e18:	6018      	str	r0, [r3, #0]
		if( Motor[temp->MotorNumber].NumberofSteps <= (Motor[temp->MotorNumber].StepsInOneCircle/2) ){  //如果计算出的步数小于半圈，则按照既定计算方向及进行
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e20:	4619      	mov	r1, r3
 8004e22:	4a78      	ldr	r2, [pc, #480]	; (8005004 <MotorMove_position+0x648>)
 8004e24:	460b      	mov	r3, r1
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	440b      	add	r3, r1
 8004e2a:	015b      	lsls	r3, r3, #5
 8004e2c:	4413      	add	r3, r2
 8004e2e:	334c      	adds	r3, #76	; 0x4c
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	4972      	ldr	r1, [pc, #456]	; (8005004 <MotorMove_position+0x648>)
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	4403      	add	r3, r0
 8004e42:	015b      	lsls	r3, r3, #5
 8004e44:	440b      	add	r3, r1
 8004e46:	3338      	adds	r3, #56	; 0x38
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	085b      	lsrs	r3, r3, #1
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d826      	bhi.n	8004e9e <MotorMove_position+0x4e2>
			Motor_AccelDecel_waveCalculate(&Motor[temp->MotorNumber]);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e56:	461a      	mov	r2, r3
 8004e58:	4613      	mov	r3, r2
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	4413      	add	r3, r2
 8004e5e:	015b      	lsls	r3, r3, #5
 8004e60:	4a68      	ldr	r2, [pc, #416]	; (8005004 <MotorMove_position+0x648>)
 8004e62:	4413      	add	r3, r2
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff fac1 	bl	80043ec <Motor_AccelDecel_waveCalculate>
			if(Motor[temp->MotorNumber].MotorDirection == 1){
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e70:	4619      	mov	r1, r3
 8004e72:	4a64      	ldr	r2, [pc, #400]	; (8005004 <MotorMove_position+0x648>)
 8004e74:	460b      	mov	r3, r1
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	440b      	add	r3, r1
 8004e7a:	015b      	lsls	r3, r3, #5
 8004e7c:	4413      	add	r3, r2
 8004e7e:	3321      	adds	r3, #33	; 0x21
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d105      	bne.n	8004e92 <MotorMove_position+0x4d6>
				Motor1_Nreset_direction;
 8004e86:	2200      	movs	r2, #0
 8004e88:	2120      	movs	r1, #32
 8004e8a:	485f      	ldr	r0, [pc, #380]	; (8005008 <MotorMove_position+0x64c>)
 8004e8c:	f003 fa8e 	bl	80083ac <HAL_GPIO_WritePin>
 8004e90:	e07d      	b.n	8004f8e <MotorMove_position+0x5d2>
			}
			else{
				Motor1_reset_direction;
 8004e92:	2201      	movs	r2, #1
 8004e94:	2120      	movs	r1, #32
 8004e96:	485c      	ldr	r0, [pc, #368]	; (8005008 <MotorMove_position+0x64c>)
 8004e98:	f003 fa88 	bl	80083ac <HAL_GPIO_WritePin>
 8004e9c:	e077      	b.n	8004f8e <MotorMove_position+0x5d2>
			}
		}
		else{
			Motor[temp->MotorNumber].NumberofSteps = abs (Motor[temp->MotorNumber].StepsInOneCircle - Motor[temp->MotorNumber].NumberofSteps);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	4a57      	ldr	r2, [pc, #348]	; (8005004 <MotorMove_position+0x648>)
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	440b      	add	r3, r1
 8004eae:	015b      	lsls	r3, r3, #5
 8004eb0:	4413      	add	r3, r2
 8004eb2:	3338      	adds	r3, #56	; 0x38
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	4951      	ldr	r1, [pc, #324]	; (8005004 <MotorMove_position+0x648>)
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	4403      	add	r3, r0
 8004ec6:	015b      	lsls	r3, r3, #5
 8004ec8:	440b      	add	r3, r1
 8004eca:	334c      	adds	r3, #76	; 0x4c
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004ed4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ede:	4619      	mov	r1, r3
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	4a48      	ldr	r2, [pc, #288]	; (8005004 <MotorMove_position+0x648>)
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	440b      	add	r3, r1
 8004eea:	015b      	lsls	r3, r3, #5
 8004eec:	4413      	add	r3, r2
 8004eee:	334c      	adds	r3, #76	; 0x4c
 8004ef0:	6018      	str	r0, [r3, #0]
			Motor_AccelDecel_waveCalculate(&Motor[temp->MotorNumber]);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	4613      	mov	r3, r2
 8004efc:	005b      	lsls	r3, r3, #1
 8004efe:	4413      	add	r3, r2
 8004f00:	015b      	lsls	r3, r3, #5
 8004f02:	4a40      	ldr	r2, [pc, #256]	; (8005004 <MotorMove_position+0x648>)
 8004f04:	4413      	add	r3, r2
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7ff fa70 	bl	80043ec <Motor_AccelDecel_waveCalculate>
			if(Motor[temp->MotorNumber].MotorDirection == 1){
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f12:	4619      	mov	r1, r3
 8004f14:	4a3b      	ldr	r2, [pc, #236]	; (8005004 <MotorMove_position+0x648>)
 8004f16:	460b      	mov	r3, r1
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	440b      	add	r3, r1
 8004f1c:	015b      	lsls	r3, r3, #5
 8004f1e:	4413      	add	r3, r2
 8004f20:	3321      	adds	r3, #33	; 0x21
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d112      	bne.n	8004f4e <MotorMove_position+0x592>
				Motor[temp->MotorNumber].MotorDirection = 0;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f2e:	4619      	mov	r1, r3
 8004f30:	4a34      	ldr	r2, [pc, #208]	; (8005004 <MotorMove_position+0x648>)
 8004f32:	460b      	mov	r3, r1
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	440b      	add	r3, r1
 8004f38:	015b      	lsls	r3, r3, #5
 8004f3a:	4413      	add	r3, r2
 8004f3c:	3321      	adds	r3, #33	; 0x21
 8004f3e:	2200      	movs	r2, #0
 8004f40:	701a      	strb	r2, [r3, #0]
				Motor1_reset_direction;
 8004f42:	2201      	movs	r2, #1
 8004f44:	2120      	movs	r1, #32
 8004f46:	4830      	ldr	r0, [pc, #192]	; (8005008 <MotorMove_position+0x64c>)
 8004f48:	f003 fa30 	bl	80083ac <HAL_GPIO_WritePin>
 8004f4c:	e01f      	b.n	8004f8e <MotorMove_position+0x5d2>
			}
			else{
				Motor[temp->MotorNumber].MotorDirection = 1;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f54:	4619      	mov	r1, r3
 8004f56:	4a2b      	ldr	r2, [pc, #172]	; (8005004 <MotorMove_position+0x648>)
 8004f58:	460b      	mov	r3, r1
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	440b      	add	r3, r1
 8004f5e:	015b      	lsls	r3, r3, #5
 8004f60:	4413      	add	r3, r2
 8004f62:	3321      	adds	r3, #33	; 0x21
 8004f64:	2201      	movs	r2, #1
 8004f66:	701a      	strb	r2, [r3, #0]
				Motor1_Nreset_direction;
 8004f68:	2200      	movs	r2, #0
 8004f6a:	2120      	movs	r1, #32
 8004f6c:	4826      	ldr	r0, [pc, #152]	; (8005008 <MotorMove_position+0x64c>)
 8004f6e:	f003 fa1d 	bl	80083ac <HAL_GPIO_WritePin>
 8004f72:	e00c      	b.n	8004f8e <MotorMove_position+0x5d2>
			}
		}
	}
	else{
		MotorDirection_SetUp(&Motor[temp->MotorNumber]) ;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	4413      	add	r3, r2
 8004f82:	015b      	lsls	r3, r3, #5
 8004f84:	4a1f      	ldr	r2, [pc, #124]	; (8005004 <MotorMove_position+0x648>)
 8004f86:	4413      	add	r3, r2
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7ff fae7 	bl	800455c <MotorDirection_SetUp>
	}
	//位置控制情况下，允许总步数多走10步，如果仍没有到达目标位置，则判定超时失败
	Motor[temp->MotorNumber].NumberofSteps = Motor[temp->MotorNumber].NumberofSteps + 5*Motor[temp->MotorNumber].mircro_steps;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f94:	4619      	mov	r1, r3
 8004f96:	4a1b      	ldr	r2, [pc, #108]	; (8005004 <MotorMove_position+0x648>)
 8004f98:	460b      	mov	r3, r1
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	440b      	add	r3, r1
 8004f9e:	015b      	lsls	r3, r3, #5
 8004fa0:	4413      	add	r3, r2
 8004fa2:	334c      	adds	r3, #76	; 0x4c
 8004fa4:	6819      	ldr	r1, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fac:	4618      	mov	r0, r3
 8004fae:	4a15      	ldr	r2, [pc, #84]	; (8005004 <MotorMove_position+0x648>)
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	4403      	add	r3, r0
 8004fb6:	015b      	lsls	r3, r3, #5
 8004fb8:	4413      	add	r3, r2
 8004fba:	3308      	adds	r3, #8
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004fca:	4610      	mov	r0, r2
 8004fcc:	18ca      	adds	r2, r1, r3
 8004fce:	490d      	ldr	r1, [pc, #52]	; (8005004 <MotorMove_position+0x648>)
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	4403      	add	r3, r0
 8004fd6:	015b      	lsls	r3, r3, #5
 8004fd8:	440b      	add	r3, r1
 8004fda:	334c      	adds	r3, #76	; 0x4c
 8004fdc:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(Motor[temp->MotorNumber].htim_x);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4a07      	ldr	r2, [pc, #28]	; (8005004 <MotorMove_position+0x648>)
 8004fe8:	460b      	mov	r3, r1
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	440b      	add	r3, r1
 8004fee:	015b      	lsls	r3, r3, #5
 8004ff0:	4413      	add	r3, r2
 8004ff2:	3334      	adds	r3, #52	; 0x34
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f006 f932 	bl	800b260 <HAL_TIM_Base_Start_IT>
}
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	200008b0 	.word	0x200008b0
 8005008:	40020400 	.word	0x40020400

0800500c <MotorRun_LowSpeed>:
	HAL_TIM_Base_Start_IT(Motor[temp->MotorNumber].htim_x);
}
#endif

void MotorRun_LowSpeed(struct MotorDefine *temp)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
	if (Motor[temp->MotorNumber].Status == 1){
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 3020 	ldrb.w	r3, [r3, #32]
 800501a:	4619      	mov	r1, r3
 800501c:	4aad      	ldr	r2, [pc, #692]	; (80052d4 <MotorRun_LowSpeed+0x2c8>)
 800501e:	460b      	mov	r3, r1
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	440b      	add	r3, r1
 8005024:	015b      	lsls	r3, r3, #5
 8005026:	4413      	add	r3, r2
 8005028:	3330      	adds	r3, #48	; 0x30
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d110      	bne.n	8005052 <MotorRun_LowSpeed+0x46>
		printf("[WRONG]MotorRun_LowSpeed Failed,Motor%d is busy!\r\n",Motor[temp->MotorNumber].MotorNumber);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005036:	4619      	mov	r1, r3
 8005038:	4aa6      	ldr	r2, [pc, #664]	; (80052d4 <MotorRun_LowSpeed+0x2c8>)
 800503a:	460b      	mov	r3, r1
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	440b      	add	r3, r1
 8005040:	015b      	lsls	r3, r3, #5
 8005042:	4413      	add	r3, r2
 8005044:	3320      	adds	r3, #32
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	4619      	mov	r1, r3
 800504a:	48a3      	ldr	r0, [pc, #652]	; (80052d8 <MotorRun_LowSpeed+0x2cc>)
 800504c:	f00b fabe 	bl	80105cc <iprintf>
		return ;
 8005050:	e13c      	b.n	80052cc <MotorRun_LowSpeed+0x2c0>
	}
	else {
		Motor[temp->MotorNumber].Status = 1 ;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005058:	4619      	mov	r1, r3
 800505a:	4a9e      	ldr	r2, [pc, #632]	; (80052d4 <MotorRun_LowSpeed+0x2c8>)
 800505c:	460b      	mov	r3, r1
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	440b      	add	r3, r1
 8005062:	015b      	lsls	r3, r3, #5
 8005064:	4413      	add	r3, r2
 8005066:	3330      	adds	r3, #48	; 0x30
 8005068:	2201      	movs	r2, #1
 800506a:	701a      	strb	r2, [r3, #0]
	}

	temp->deceleration_ratio = Motor[temp->MotorNumber].deceleration_ratio ;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005072:	4619      	mov	r1, r3
 8005074:	4a97      	ldr	r2, [pc, #604]	; (80052d4 <MotorRun_LowSpeed+0x2c8>)
 8005076:	460b      	mov	r3, r1
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	440b      	add	r3, r1
 800507c:	015b      	lsls	r3, r3, #5
 800507e:	4413      	add	r3, r2
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	601a      	str	r2, [r3, #0]
	temp->step_angle = Motor[temp->MotorNumber].step_angle ;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 3020 	ldrb.w	r3, [r3, #32]
 800508c:	4619      	mov	r1, r3
 800508e:	4a91      	ldr	r2, [pc, #580]	; (80052d4 <MotorRun_LowSpeed+0x2c8>)
 8005090:	460b      	mov	r3, r1
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	440b      	add	r3, r1
 8005096:	015b      	lsls	r3, r3, #5
 8005098:	4413      	add	r3, r2
 800509a:	3304      	adds	r3, #4
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	605a      	str	r2, [r3, #4]
	temp->mircro_steps = Motor[temp->MotorNumber].mircro_steps ;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050a8:	4619      	mov	r1, r3
 80050aa:	4a8a      	ldr	r2, [pc, #552]	; (80052d4 <MotorRun_LowSpeed+0x2c8>)
 80050ac:	460b      	mov	r3, r1
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	440b      	add	r3, r1
 80050b2:	015b      	lsls	r3, r3, #5
 80050b4:	4413      	add	r3, r2
 80050b6:	3308      	adds	r3, #8
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	609a      	str	r2, [r3, #8]
	temp->MaxSpeedInRads = Motor[temp->MotorNumber].MaxSpeedInRads ;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050c4:	4619      	mov	r1, r3
 80050c6:	4a83      	ldr	r2, [pc, #524]	; (80052d4 <MotorRun_LowSpeed+0x2c8>)
 80050c8:	460b      	mov	r3, r1
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	440b      	add	r3, r1
 80050ce:	015b      	lsls	r3, r3, #5
 80050d0:	4413      	add	r3, r2
 80050d2:	330c      	adds	r3, #12
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	60da      	str	r2, [r3, #12]
	temp->htim_x = Motor[temp->MotorNumber].htim_x ;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050e0:	4619      	mov	r1, r3
 80050e2:	4a7c      	ldr	r2, [pc, #496]	; (80052d4 <MotorRun_LowSpeed+0x2c8>)
 80050e4:	460b      	mov	r3, r1
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	440b      	add	r3, r1
 80050ea:	015b      	lsls	r3, r3, #5
 80050ec:	4413      	add	r3, r2
 80050ee:	3334      	adds	r3, #52	; 0x34
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	635a      	str	r2, [r3, #52]	; 0x34

	// 计算： 单圈步数、启动速度、目标速度、行进步数、加减速时间
	temp->StepsInOneCircle = (360 / temp->step_angle) * temp->deceleration_ratio * temp->mircro_steps;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80050fc:	eddf 6a77 	vldr	s13, [pc, #476]	; 80052dc <MotorRun_LowSpeed+0x2d0>
 8005100:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	edd3 7a00 	vldr	s15, [r3]
 800510a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800511a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800511e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005122:	ee17 2a90 	vmov	r2, s15
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	639a      	str	r2, [r3, #56]	; 0x38
	temp->StartupSpeedInHz = temp->StepsInOneCircle * temp->StartupSpeedInRads ;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512e:	ee07 3a90 	vmov	s15, r3
 8005132:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	edd3 7a04 	vldr	s15, [r3, #16]
 800513c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005144:	ee17 2a90 	vmov	r2, s15
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	63da      	str	r2, [r3, #60]	; 0x3c
	temp->StepperSpeedTMR = MOTORTIM_TMR / temp->StartupSpeedInHz;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005150:	4a63      	ldr	r2, [pc, #396]	; (80052e0 <MotorRun_LowSpeed+0x2d4>)
 8005152:	fbb2 f2f3 	udiv	r2, r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	649a      	str	r2, [r3, #72]	; 0x48
	temp->NumberofSteps = temp->NumberofRads * temp->StepsInOneCircle ;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005164:	ee07 3a90 	vmov	s15, r3
 8005168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800516c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005174:	ee17 2a90 	vmov	r2, s15
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	64da      	str	r2, [r3, #76]	; 0x4c

	//不进行加减速，电机保持最小速度运行
	Motor[temp->MotorNumber].NumberofSteps_StopAccel = temp->NumberofSteps;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005182:	4618      	mov	r0, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005188:	4952      	ldr	r1, [pc, #328]	; (80052d4 <MotorRun_LowSpeed+0x2c8>)
 800518a:	4603      	mov	r3, r0
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	4403      	add	r3, r0
 8005190:	015b      	lsls	r3, r3, #5
 8005192:	440b      	add	r3, r1
 8005194:	3350      	adds	r3, #80	; 0x50
 8005196:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].NumberofSteps_BeginDecel = 0;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800519e:	4619      	mov	r1, r3
 80051a0:	4a4c      	ldr	r2, [pc, #304]	; (80052d4 <MotorRun_LowSpeed+0x2c8>)
 80051a2:	460b      	mov	r3, r1
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	440b      	add	r3, r1
 80051a8:	015b      	lsls	r3, r3, #5
 80051aa:	4413      	add	r3, r2
 80051ac:	3354      	adds	r3, #84	; 0x54
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]

	Motor[temp->MotorNumber].StepsInOneCircle = temp->StepsInOneCircle ;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051b8:	4618      	mov	r0, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051be:	4945      	ldr	r1, [pc, #276]	; (80052d4 <MotorRun_LowSpeed+0x2c8>)
 80051c0:	4603      	mov	r3, r0
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	4403      	add	r3, r0
 80051c6:	015b      	lsls	r3, r3, #5
 80051c8:	440b      	add	r3, r1
 80051ca:	3338      	adds	r3, #56	; 0x38
 80051cc:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].StartupSpeedInHz = temp->StartupSpeedInHz ;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051d4:	4618      	mov	r0, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051da:	493e      	ldr	r1, [pc, #248]	; (80052d4 <MotorRun_LowSpeed+0x2c8>)
 80051dc:	4603      	mov	r3, r0
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	4403      	add	r3, r0
 80051e2:	015b      	lsls	r3, r3, #5
 80051e4:	440b      	add	r3, r1
 80051e6:	333c      	adds	r3, #60	; 0x3c
 80051e8:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].StepperSpeedTMR = temp->StepperSpeedTMR ;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051f0:	4618      	mov	r0, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051f6:	4937      	ldr	r1, [pc, #220]	; (80052d4 <MotorRun_LowSpeed+0x2c8>)
 80051f8:	4603      	mov	r3, r0
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	4403      	add	r3, r0
 80051fe:	015b      	lsls	r3, r3, #5
 8005200:	440b      	add	r3, r1
 8005202:	3348      	adds	r3, #72	; 0x48
 8005204:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].NumberofSteps = temp->NumberofSteps ;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 3020 	ldrb.w	r3, [r3, #32]
 800520c:	4618      	mov	r0, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005212:	4930      	ldr	r1, [pc, #192]	; (80052d4 <MotorRun_LowSpeed+0x2c8>)
 8005214:	4603      	mov	r3, r0
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	4403      	add	r3, r0
 800521a:	015b      	lsls	r3, r3, #5
 800521c:	440b      	add	r3, r1
 800521e:	334c      	adds	r3, #76	; 0x4c
 8005220:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].MotorDirection = temp->MotorDirection ;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005228:	4619      	mov	r1, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
 8005230:	4a28      	ldr	r2, [pc, #160]	; (80052d4 <MotorRun_LowSpeed+0x2c8>)
 8005232:	460b      	mov	r3, r1
 8005234:	005b      	lsls	r3, r3, #1
 8005236:	440b      	add	r3, r1
 8005238:	015b      	lsls	r3, r3, #5
 800523a:	4413      	add	r3, r2
 800523c:	3321      	adds	r3, #33	; 0x21
 800523e:	4602      	mov	r2, r0
 8005240:	701a      	strb	r2, [r3, #0]
	Motor[temp->MotorNumber].AccelerationTimeTMR = 10000 ;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005248:	4619      	mov	r1, r3
 800524a:	4a22      	ldr	r2, [pc, #136]	; (80052d4 <MotorRun_LowSpeed+0x2c8>)
 800524c:	460b      	mov	r3, r1
 800524e:	005b      	lsls	r3, r3, #1
 8005250:	440b      	add	r3, r1
 8005252:	015b      	lsls	r3, r3, #5
 8005254:	4413      	add	r3, r2
 8005256:	3358      	adds	r3, #88	; 0x58
 8005258:	f242 7210 	movw	r2, #10000	; 0x2710
 800525c:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].DecelerationTimeTMR = 10000 ;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005264:	4619      	mov	r1, r3
 8005266:	4a1b      	ldr	r2, [pc, #108]	; (80052d4 <MotorRun_LowSpeed+0x2c8>)
 8005268:	460b      	mov	r3, r1
 800526a:	005b      	lsls	r3, r3, #1
 800526c:	440b      	add	r3, r1
 800526e:	015b      	lsls	r3, r3, #5
 8005270:	4413      	add	r3, r2
 8005272:	335c      	adds	r3, #92	; 0x5c
 8005274:	f242 7210 	movw	r2, #10000	; 0x2710
 8005278:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].TargetPosition = -16777200 ; //暂时设置目标位置为无法达到的值，参数控制模式用步进数控制中断停止
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005280:	4619      	mov	r1, r3
 8005282:	4a14      	ldr	r2, [pc, #80]	; (80052d4 <MotorRun_LowSpeed+0x2c8>)
 8005284:	460b      	mov	r3, r1
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	440b      	add	r3, r1
 800528a:	015b      	lsls	r3, r3, #5
 800528c:	4413      	add	r3, r2
 800528e:	332c      	adds	r3, #44	; 0x2c
 8005290:	4a14      	ldr	r2, [pc, #80]	; (80052e4 <MotorRun_LowSpeed+0x2d8>)
 8005292:	601a      	str	r2, [r3, #0]

	MotorDirection_SetUp(&Motor[temp->MotorNumber]) ;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 3020 	ldrb.w	r3, [r3, #32]
 800529a:	461a      	mov	r2, r3
 800529c:	4613      	mov	r3, r2
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	4413      	add	r3, r2
 80052a2:	015b      	lsls	r3, r3, #5
 80052a4:	4a0b      	ldr	r2, [pc, #44]	; (80052d4 <MotorRun_LowSpeed+0x2c8>)
 80052a6:	4413      	add	r3, r2
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7ff f957 	bl	800455c <MotorDirection_SetUp>
	HAL_TIM_Base_Start_IT(Motor[temp->MotorNumber].htim_x);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052b4:	4619      	mov	r1, r3
 80052b6:	4a07      	ldr	r2, [pc, #28]	; (80052d4 <MotorRun_LowSpeed+0x2c8>)
 80052b8:	460b      	mov	r3, r1
 80052ba:	005b      	lsls	r3, r3, #1
 80052bc:	440b      	add	r3, r1
 80052be:	015b      	lsls	r3, r3, #5
 80052c0:	4413      	add	r3, r2
 80052c2:	3334      	adds	r3, #52	; 0x34
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f005 ffca 	bl	800b260 <HAL_TIM_Base_Start_IT>
}
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	200008b0 	.word	0x200008b0
 80052d8:	08012aa4 	.word	0x08012aa4
 80052dc:	43b40000 	.word	0x43b40000
 80052e0:	000186a0 	.word	0x000186a0
 80052e4:	ff000010 	.word	0xff000010

080052e8 <Motor_Reset>:
/*            *****************    0x20-0b00100000 电机复位 ：  ****************** */
// 根据协议，通过USART5进行出串口通讯，输入步进电机的 【地址】 即可，使用程序优化配置好的电机参数对电机进行复位（需要配合0位开关）
// 返回值： SUCCESS-1-完成，正在运行  FAIL-0
// 方案：控制电机运动上限圈数为10转，过程中如果触发0位信号则停止运动。如果电机初始位置已经触发0位信号，则反方向运动一小段时间，再找0位
uint8_t Motor_Reset(struct MotorDefine *temp)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08e      	sub	sp, #56	; 0x38
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
	if (Motor[temp->MotorNumber].Status == 1){
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052f6:	4619      	mov	r1, r3
 80052f8:	4ab8      	ldr	r2, [pc, #736]	; (80055dc <Motor_Reset+0x2f4>)
 80052fa:	460b      	mov	r3, r1
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	440b      	add	r3, r1
 8005300:	015b      	lsls	r3, r3, #5
 8005302:	4413      	add	r3, r2
 8005304:	3330      	adds	r3, #48	; 0x30
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d108      	bne.n	800531e <Motor_Reset+0x36>
		printf("[WRONG] Reset Failed,Motor%d is busy!\r\n",temp->MotorNumber);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005312:	4619      	mov	r1, r3
 8005314:	48b2      	ldr	r0, [pc, #712]	; (80055e0 <Motor_Reset+0x2f8>)
 8005316:	f00b f959 	bl	80105cc <iprintf>
		return FAIL;
 800531a:	2300      	movs	r3, #0
 800531c:	e3cf      	b.n	8005abe <Motor_Reset+0x7d6>
	}
	*temp = Motor[temp->MotorNumber];
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005324:	4619      	mov	r1, r3
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	4aac      	ldr	r2, [pc, #688]	; (80055dc <Motor_Reset+0x2f4>)
 800532a:	460b      	mov	r3, r1
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	440b      	add	r3, r1
 8005330:	015b      	lsls	r3, r3, #5
 8005332:	4413      	add	r3, r2
 8005334:	4619      	mov	r1, r3
 8005336:	2360      	movs	r3, #96	; 0x60
 8005338:	461a      	mov	r2, r3
 800533a:	f00a fc32 	bl	800fba2 <memcpy>

	temp->NumberofRads = 30;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4aa8      	ldr	r2, [pc, #672]	; (80055e4 <Motor_Reset+0x2fc>)
 8005342:	625a      	str	r2, [r3, #36]	; 0x24

	if (temp->MotorNumber == 1){
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 3020 	ldrb.w	r3, [r3, #32]
 800534a:	2b01      	cmp	r3, #1
 800534c:	f040 8093 	bne.w	8005476 <Motor_Reset+0x18e>
		if ( Motor1_reset_OPTstatus ){
 8005350:	2108      	movs	r1, #8
 8005352:	48a5      	ldr	r0, [pc, #660]	; (80055e8 <Motor_Reset+0x300>)
 8005354:	f003 f812 	bl	800837c <HAL_GPIO_ReadPin>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d140      	bne.n	80053e0 <Motor_Reset+0xf8>
			temp->MotorDirection = 1 ;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7ff fe50 	bl	800500c <MotorRun_LowSpeed>
			HAL_Delay(MotorResetDelay);
 800536c:	2078      	movs	r0, #120	; 0x78
 800536e:	f001 fd9b 	bl	8006ea8 <HAL_Delay>
			for(uint32_t i=0 ; Motor1_reset_OPTstatus ; i++){
 8005372:	2300      	movs	r3, #0
 8005374:	637b      	str	r3, [r7, #52]	; 0x34
 8005376:	e01f      	b.n	80053b8 <Motor_Reset+0xd0>
				if(i>500) {
 8005378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800537a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800537e:	d915      	bls.n	80053ac <Motor_Reset+0xc4>
					printf("[WRONG] Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005386:	4619      	mov	r1, r3
 8005388:	4898      	ldr	r0, [pc, #608]	; (80055ec <Motor_Reset+0x304>)
 800538a:	f00b f91f 	bl	80105cc <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005394:	4619      	mov	r1, r3
 8005396:	4a91      	ldr	r2, [pc, #580]	; (80055dc <Motor_Reset+0x2f4>)
 8005398:	460b      	mov	r3, r1
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	440b      	add	r3, r1
 800539e:	015b      	lsls	r3, r3, #5
 80053a0:	4413      	add	r3, r2
 80053a2:	334c      	adds	r3, #76	; 0x4c
 80053a4:	2202      	movs	r2, #2
 80053a6:	601a      	str	r2, [r3, #0]
					return FAIL;
 80053a8:	2300      	movs	r3, #0
 80053aa:	e388      	b.n	8005abe <Motor_Reset+0x7d6>
				}
				else {HAL_Delay(1);}
 80053ac:	2001      	movs	r0, #1
 80053ae:	f001 fd7b 	bl	8006ea8 <HAL_Delay>
			for(uint32_t i=0 ; Motor1_reset_OPTstatus ; i++){
 80053b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b4:	3301      	adds	r3, #1
 80053b6:	637b      	str	r3, [r7, #52]	; 0x34
 80053b8:	2108      	movs	r1, #8
 80053ba:	488b      	ldr	r0, [pc, #556]	; (80055e8 <Motor_Reset+0x300>)
 80053bc:	f002 ffde 	bl	800837c <HAL_GPIO_ReadPin>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0d8      	beq.n	8005378 <Motor_Reset+0x90>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053cc:	4619      	mov	r1, r3
 80053ce:	4a83      	ldr	r2, [pc, #524]	; (80055dc <Motor_Reset+0x2f4>)
 80053d0:	460b      	mov	r3, r1
 80053d2:	005b      	lsls	r3, r3, #1
 80053d4:	440b      	add	r3, r1
 80053d6:	015b      	lsls	r3, r3, #5
 80053d8:	4413      	add	r3, r2
 80053da:	334c      	adds	r3, #76	; 0x4c
 80053dc:	2202      	movs	r2, #2
 80053de:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(MotorResetDelay);
 80053e0:	2078      	movs	r0, #120	; 0x78
 80053e2:	f001 fd61 	bl	8006ea8 <HAL_Delay>
		if (Motor1_Nreset_OPTstatus){
 80053e6:	2108      	movs	r1, #8
 80053e8:	487f      	ldr	r0, [pc, #508]	; (80055e8 <Motor_Reset+0x300>)
 80053ea:	f002 ffc7 	bl	800837c <HAL_GPIO_ReadPin>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d140      	bne.n	8005476 <Motor_Reset+0x18e>
			temp->MotorDirection = 0 ;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f7ff fe05 	bl	800500c <MotorRun_LowSpeed>
			for(uint32_t i=0 ; Motor1_Nreset_OPTstatus ; i++){
 8005402:	2300      	movs	r3, #0
 8005404:	633b      	str	r3, [r7, #48]	; 0x30
 8005406:	e020      	b.n	800544a <Motor_Reset+0x162>
				if(i>5000) {
 8005408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540a:	f241 3288 	movw	r2, #5000	; 0x1388
 800540e:	4293      	cmp	r3, r2
 8005410:	d915      	bls.n	800543e <Motor_Reset+0x156>
					printf("[WRONG] Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005418:	4619      	mov	r1, r3
 800541a:	4874      	ldr	r0, [pc, #464]	; (80055ec <Motor_Reset+0x304>)
 800541c:	f00b f8d6 	bl	80105cc <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005426:	4619      	mov	r1, r3
 8005428:	4a6c      	ldr	r2, [pc, #432]	; (80055dc <Motor_Reset+0x2f4>)
 800542a:	460b      	mov	r3, r1
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	440b      	add	r3, r1
 8005430:	015b      	lsls	r3, r3, #5
 8005432:	4413      	add	r3, r2
 8005434:	334c      	adds	r3, #76	; 0x4c
 8005436:	2202      	movs	r2, #2
 8005438:	601a      	str	r2, [r3, #0]
					return FAIL;
 800543a:	2300      	movs	r3, #0
 800543c:	e33f      	b.n	8005abe <Motor_Reset+0x7d6>
				}
				else {HAL_Delay(1);}
 800543e:	2001      	movs	r0, #1
 8005440:	f001 fd32 	bl	8006ea8 <HAL_Delay>
			for(uint32_t i=0 ; Motor1_Nreset_OPTstatus ; i++){
 8005444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005446:	3301      	adds	r3, #1
 8005448:	633b      	str	r3, [r7, #48]	; 0x30
 800544a:	2108      	movs	r1, #8
 800544c:	4866      	ldr	r0, [pc, #408]	; (80055e8 <Motor_Reset+0x300>)
 800544e:	f002 ff95 	bl	800837c <HAL_GPIO_ReadPin>
 8005452:	4603      	mov	r3, r0
 8005454:	2b01      	cmp	r3, #1
 8005456:	d0d7      	beq.n	8005408 <Motor_Reset+0x120>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800545e:	4619      	mov	r1, r3
 8005460:	4a5e      	ldr	r2, [pc, #376]	; (80055dc <Motor_Reset+0x2f4>)
 8005462:	460b      	mov	r3, r1
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	440b      	add	r3, r1
 8005468:	015b      	lsls	r3, r3, #5
 800546a:	4413      	add	r3, r2
 800546c:	334c      	adds	r3, #76	; 0x4c
 800546e:	2202      	movs	r2, #2
 8005470:	601a      	str	r2, [r3, #0]
			return SUCCESS;
 8005472:	2301      	movs	r3, #1
 8005474:	e323      	b.n	8005abe <Motor_Reset+0x7d6>
		}
	}

	if (temp->MotorNumber == 2){
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 3020 	ldrb.w	r3, [r3, #32]
 800547c:	2b02      	cmp	r3, #2
 800547e:	f040 8093 	bne.w	80055a8 <Motor_Reset+0x2c0>
		if ( Motor2_reset_OPTstatus ){
 8005482:	2110      	movs	r1, #16
 8005484:	4858      	ldr	r0, [pc, #352]	; (80055e8 <Motor_Reset+0x300>)
 8005486:	f002 ff79 	bl	800837c <HAL_GPIO_ReadPin>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d140      	bne.n	8005512 <Motor_Reset+0x22a>
			temp->MotorDirection = 1 ;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7ff fdb7 	bl	800500c <MotorRun_LowSpeed>
			HAL_Delay(MotorResetDelay);
 800549e:	2078      	movs	r0, #120	; 0x78
 80054a0:	f001 fd02 	bl	8006ea8 <HAL_Delay>
			for(uint32_t i=0 ; Motor2_reset_OPTstatus ; i++){
 80054a4:	2300      	movs	r3, #0
 80054a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054a8:	e01f      	b.n	80054ea <Motor_Reset+0x202>
				if(i>500) {
 80054aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80054b0:	d915      	bls.n	80054de <Motor_Reset+0x1f6>
					printf("[WRONG] Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054b8:	4619      	mov	r1, r3
 80054ba:	484c      	ldr	r0, [pc, #304]	; (80055ec <Motor_Reset+0x304>)
 80054bc:	f00b f886 	bl	80105cc <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054c6:	4619      	mov	r1, r3
 80054c8:	4a44      	ldr	r2, [pc, #272]	; (80055dc <Motor_Reset+0x2f4>)
 80054ca:	460b      	mov	r3, r1
 80054cc:	005b      	lsls	r3, r3, #1
 80054ce:	440b      	add	r3, r1
 80054d0:	015b      	lsls	r3, r3, #5
 80054d2:	4413      	add	r3, r2
 80054d4:	334c      	adds	r3, #76	; 0x4c
 80054d6:	2202      	movs	r2, #2
 80054d8:	601a      	str	r2, [r3, #0]
					return FAIL;
 80054da:	2300      	movs	r3, #0
 80054dc:	e2ef      	b.n	8005abe <Motor_Reset+0x7d6>
				}
				else {HAL_Delay(1);}
 80054de:	2001      	movs	r0, #1
 80054e0:	f001 fce2 	bl	8006ea8 <HAL_Delay>
			for(uint32_t i=0 ; Motor2_reset_OPTstatus ; i++){
 80054e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e6:	3301      	adds	r3, #1
 80054e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ea:	2110      	movs	r1, #16
 80054ec:	483e      	ldr	r0, [pc, #248]	; (80055e8 <Motor_Reset+0x300>)
 80054ee:	f002 ff45 	bl	800837c <HAL_GPIO_ReadPin>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d0d8      	beq.n	80054aa <Motor_Reset+0x1c2>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054fe:	4619      	mov	r1, r3
 8005500:	4a36      	ldr	r2, [pc, #216]	; (80055dc <Motor_Reset+0x2f4>)
 8005502:	460b      	mov	r3, r1
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	440b      	add	r3, r1
 8005508:	015b      	lsls	r3, r3, #5
 800550a:	4413      	add	r3, r2
 800550c:	334c      	adds	r3, #76	; 0x4c
 800550e:	2202      	movs	r2, #2
 8005510:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(MotorResetDelay);
 8005512:	2078      	movs	r0, #120	; 0x78
 8005514:	f001 fcc8 	bl	8006ea8 <HAL_Delay>
		if (Motor2_Nreset_OPTstatus){
 8005518:	2110      	movs	r1, #16
 800551a:	4833      	ldr	r0, [pc, #204]	; (80055e8 <Motor_Reset+0x300>)
 800551c:	f002 ff2e 	bl	800837c <HAL_GPIO_ReadPin>
 8005520:	4603      	mov	r3, r0
 8005522:	2b01      	cmp	r3, #1
 8005524:	d140      	bne.n	80055a8 <Motor_Reset+0x2c0>
			temp->MotorDirection = 0 ;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7ff fd6c 	bl	800500c <MotorRun_LowSpeed>
			for(uint32_t i=0 ; Motor2_Nreset_OPTstatus ; i++){
 8005534:	2300      	movs	r3, #0
 8005536:	62bb      	str	r3, [r7, #40]	; 0x28
 8005538:	e020      	b.n	800557c <Motor_Reset+0x294>
				if(i>5000) {
 800553a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005540:	4293      	cmp	r3, r2
 8005542:	d915      	bls.n	8005570 <Motor_Reset+0x288>
					printf("[WRONG]Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 3020 	ldrb.w	r3, [r3, #32]
 800554a:	4619      	mov	r1, r3
 800554c:	4828      	ldr	r0, [pc, #160]	; (80055f0 <Motor_Reset+0x308>)
 800554e:	f00b f83d 	bl	80105cc <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005558:	4619      	mov	r1, r3
 800555a:	4a20      	ldr	r2, [pc, #128]	; (80055dc <Motor_Reset+0x2f4>)
 800555c:	460b      	mov	r3, r1
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	440b      	add	r3, r1
 8005562:	015b      	lsls	r3, r3, #5
 8005564:	4413      	add	r3, r2
 8005566:	334c      	adds	r3, #76	; 0x4c
 8005568:	2202      	movs	r2, #2
 800556a:	601a      	str	r2, [r3, #0]
					return FAIL;
 800556c:	2300      	movs	r3, #0
 800556e:	e2a6      	b.n	8005abe <Motor_Reset+0x7d6>
				}
				else {HAL_Delay(1);}
 8005570:	2001      	movs	r0, #1
 8005572:	f001 fc99 	bl	8006ea8 <HAL_Delay>
			for(uint32_t i=0 ; Motor2_Nreset_OPTstatus ; i++){
 8005576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005578:	3301      	adds	r3, #1
 800557a:	62bb      	str	r3, [r7, #40]	; 0x28
 800557c:	2110      	movs	r1, #16
 800557e:	481a      	ldr	r0, [pc, #104]	; (80055e8 <Motor_Reset+0x300>)
 8005580:	f002 fefc 	bl	800837c <HAL_GPIO_ReadPin>
 8005584:	4603      	mov	r3, r0
 8005586:	2b01      	cmp	r3, #1
 8005588:	d0d7      	beq.n	800553a <Motor_Reset+0x252>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005590:	4619      	mov	r1, r3
 8005592:	4a12      	ldr	r2, [pc, #72]	; (80055dc <Motor_Reset+0x2f4>)
 8005594:	460b      	mov	r3, r1
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	440b      	add	r3, r1
 800559a:	015b      	lsls	r3, r3, #5
 800559c:	4413      	add	r3, r2
 800559e:	334c      	adds	r3, #76	; 0x4c
 80055a0:	2202      	movs	r2, #2
 80055a2:	601a      	str	r2, [r3, #0]
			return SUCCESS;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e28a      	b.n	8005abe <Motor_Reset+0x7d6>
		}
	}

	if (temp->MotorNumber == 3){
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	f040 809f 	bne.w	80056f2 <Motor_Reset+0x40a>
		if ( Motor3_reset_OPTstatus ){
 80055b4:	2120      	movs	r1, #32
 80055b6:	480c      	ldr	r0, [pc, #48]	; (80055e8 <Motor_Reset+0x300>)
 80055b8:	f002 fee0 	bl	800837c <HAL_GPIO_ReadPin>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d14c      	bne.n	800565c <Motor_Reset+0x374>
			temp->MotorDirection = 1 ;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff fd1e 	bl	800500c <MotorRun_LowSpeed>
			HAL_Delay(MotorResetDelay);
 80055d0:	2078      	movs	r0, #120	; 0x78
 80055d2:	f001 fc69 	bl	8006ea8 <HAL_Delay>
			for(uint32_t i=0 ; Motor3_reset_OPTstatus ; i++){
 80055d6:	2300      	movs	r3, #0
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
 80055da:	e02b      	b.n	8005634 <Motor_Reset+0x34c>
 80055dc:	200008b0 	.word	0x200008b0
 80055e0:	08012ad8 	.word	0x08012ad8
 80055e4:	41f00000 	.word	0x41f00000
 80055e8:	40020c00 	.word	0x40020c00
 80055ec:	08012b00 	.word	0x08012b00
 80055f0:	08012b2c 	.word	0x08012b2c
				if(i>500) {
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80055fa:	d915      	bls.n	8005628 <Motor_Reset+0x340>
					printf("[WRONG] Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005602:	4619      	mov	r1, r3
 8005604:	48bb      	ldr	r0, [pc, #748]	; (80058f4 <Motor_Reset+0x60c>)
 8005606:	f00a ffe1 	bl	80105cc <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005610:	4619      	mov	r1, r3
 8005612:	4ab9      	ldr	r2, [pc, #740]	; (80058f8 <Motor_Reset+0x610>)
 8005614:	460b      	mov	r3, r1
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	440b      	add	r3, r1
 800561a:	015b      	lsls	r3, r3, #5
 800561c:	4413      	add	r3, r2
 800561e:	334c      	adds	r3, #76	; 0x4c
 8005620:	2202      	movs	r2, #2
 8005622:	601a      	str	r2, [r3, #0]
					return FAIL;
 8005624:	2300      	movs	r3, #0
 8005626:	e24a      	b.n	8005abe <Motor_Reset+0x7d6>
				}
				else {HAL_Delay(1);}
 8005628:	2001      	movs	r0, #1
 800562a:	f001 fc3d 	bl	8006ea8 <HAL_Delay>
			for(uint32_t i=0 ; Motor3_reset_OPTstatus ; i++){
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	3301      	adds	r3, #1
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
 8005634:	2120      	movs	r1, #32
 8005636:	48b1      	ldr	r0, [pc, #708]	; (80058fc <Motor_Reset+0x614>)
 8005638:	f002 fea0 	bl	800837c <HAL_GPIO_ReadPin>
 800563c:	4603      	mov	r3, r0
 800563e:	2b01      	cmp	r3, #1
 8005640:	d0d8      	beq.n	80055f4 <Motor_Reset+0x30c>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005648:	4619      	mov	r1, r3
 800564a:	4aab      	ldr	r2, [pc, #684]	; (80058f8 <Motor_Reset+0x610>)
 800564c:	460b      	mov	r3, r1
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	440b      	add	r3, r1
 8005652:	015b      	lsls	r3, r3, #5
 8005654:	4413      	add	r3, r2
 8005656:	334c      	adds	r3, #76	; 0x4c
 8005658:	2202      	movs	r2, #2
 800565a:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(MotorResetDelay);
 800565c:	2078      	movs	r0, #120	; 0x78
 800565e:	f001 fc23 	bl	8006ea8 <HAL_Delay>
		if (Motor3_Nreset_OPTstatus){
 8005662:	2120      	movs	r1, #32
 8005664:	48a5      	ldr	r0, [pc, #660]	; (80058fc <Motor_Reset+0x614>)
 8005666:	f002 fe89 	bl	800837c <HAL_GPIO_ReadPin>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d140      	bne.n	80056f2 <Motor_Reset+0x40a>
			temp->MotorDirection = 0 ;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f7ff fcc7 	bl	800500c <MotorRun_LowSpeed>
			for(uint32_t i=0 ; Motor3_Nreset_OPTstatus ; i++){
 800567e:	2300      	movs	r3, #0
 8005680:	623b      	str	r3, [r7, #32]
 8005682:	e020      	b.n	80056c6 <Motor_Reset+0x3de>
				if(i>12000) {
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800568a:	4293      	cmp	r3, r2
 800568c:	d915      	bls.n	80056ba <Motor_Reset+0x3d2>
					printf("[WRONG] Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005694:	4619      	mov	r1, r3
 8005696:	4897      	ldr	r0, [pc, #604]	; (80058f4 <Motor_Reset+0x60c>)
 8005698:	f00a ff98 	bl	80105cc <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056a2:	4619      	mov	r1, r3
 80056a4:	4a94      	ldr	r2, [pc, #592]	; (80058f8 <Motor_Reset+0x610>)
 80056a6:	460b      	mov	r3, r1
 80056a8:	005b      	lsls	r3, r3, #1
 80056aa:	440b      	add	r3, r1
 80056ac:	015b      	lsls	r3, r3, #5
 80056ae:	4413      	add	r3, r2
 80056b0:	334c      	adds	r3, #76	; 0x4c
 80056b2:	2202      	movs	r2, #2
 80056b4:	601a      	str	r2, [r3, #0]
					return FAIL;
 80056b6:	2300      	movs	r3, #0
 80056b8:	e201      	b.n	8005abe <Motor_Reset+0x7d6>
				}
				else {HAL_Delay(1);}
 80056ba:	2001      	movs	r0, #1
 80056bc:	f001 fbf4 	bl	8006ea8 <HAL_Delay>
			for(uint32_t i=0 ; Motor3_Nreset_OPTstatus ; i++){
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	3301      	adds	r3, #1
 80056c4:	623b      	str	r3, [r7, #32]
 80056c6:	2120      	movs	r1, #32
 80056c8:	488c      	ldr	r0, [pc, #560]	; (80058fc <Motor_Reset+0x614>)
 80056ca:	f002 fe57 	bl	800837c <HAL_GPIO_ReadPin>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d0d7      	beq.n	8005684 <Motor_Reset+0x39c>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056da:	4619      	mov	r1, r3
 80056dc:	4a86      	ldr	r2, [pc, #536]	; (80058f8 <Motor_Reset+0x610>)
 80056de:	460b      	mov	r3, r1
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	440b      	add	r3, r1
 80056e4:	015b      	lsls	r3, r3, #5
 80056e6:	4413      	add	r3, r2
 80056e8:	334c      	adds	r3, #76	; 0x4c
 80056ea:	2202      	movs	r2, #2
 80056ec:	601a      	str	r2, [r3, #0]
			return SUCCESS;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e1e5      	b.n	8005abe <Motor_Reset+0x7d6>
		}
	}

	if (temp->MotorNumber == 4){
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056f8:	2b04      	cmp	r3, #4
 80056fa:	f040 8098 	bne.w	800582e <Motor_Reset+0x546>
		if ( Motor4_reset_OPTstatus ){
 80056fe:	2140      	movs	r1, #64	; 0x40
 8005700:	487e      	ldr	r0, [pc, #504]	; (80058fc <Motor_Reset+0x614>)
 8005702:	f002 fe3b 	bl	800837c <HAL_GPIO_ReadPin>
 8005706:	4603      	mov	r3, r0
 8005708:	2b01      	cmp	r3, #1
 800570a:	d143      	bne.n	8005794 <Motor_Reset+0x4ac>
			temp->MotorDirection = 1 ;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp->NumberofRads = 10 ;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a7a      	ldr	r2, [pc, #488]	; (8005900 <Motor_Reset+0x618>)
 8005718:	625a      	str	r2, [r3, #36]	; 0x24
			MotorMove_steps(temp);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7fe ff84 	bl	8004628 <MotorMove_steps>
			HAL_Delay(MotorResetDelay);
 8005720:	2078      	movs	r0, #120	; 0x78
 8005722:	f001 fbc1 	bl	8006ea8 <HAL_Delay>
			for(uint32_t i=0 ; Motor4_reset_OPTstatus ; i++){
 8005726:	2300      	movs	r3, #0
 8005728:	61fb      	str	r3, [r7, #28]
 800572a:	e01f      	b.n	800576c <Motor_Reset+0x484>
				if(i>500) {
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005732:	d915      	bls.n	8005760 <Motor_Reset+0x478>
					printf("[WRONG] Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 3020 	ldrb.w	r3, [r3, #32]
 800573a:	4619      	mov	r1, r3
 800573c:	486d      	ldr	r0, [pc, #436]	; (80058f4 <Motor_Reset+0x60c>)
 800573e:	f00a ff45 	bl	80105cc <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005748:	4619      	mov	r1, r3
 800574a:	4a6b      	ldr	r2, [pc, #428]	; (80058f8 <Motor_Reset+0x610>)
 800574c:	460b      	mov	r3, r1
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	440b      	add	r3, r1
 8005752:	015b      	lsls	r3, r3, #5
 8005754:	4413      	add	r3, r2
 8005756:	334c      	adds	r3, #76	; 0x4c
 8005758:	2202      	movs	r2, #2
 800575a:	601a      	str	r2, [r3, #0]
					return FAIL;
 800575c:	2300      	movs	r3, #0
 800575e:	e1ae      	b.n	8005abe <Motor_Reset+0x7d6>
				}
				else {HAL_Delay(1);}
 8005760:	2001      	movs	r0, #1
 8005762:	f001 fba1 	bl	8006ea8 <HAL_Delay>
			for(uint32_t i=0 ; Motor4_reset_OPTstatus ; i++){
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	3301      	adds	r3, #1
 800576a:	61fb      	str	r3, [r7, #28]
 800576c:	2140      	movs	r1, #64	; 0x40
 800576e:	4863      	ldr	r0, [pc, #396]	; (80058fc <Motor_Reset+0x614>)
 8005770:	f002 fe04 	bl	800837c <HAL_GPIO_ReadPin>
 8005774:	4603      	mov	r3, r0
 8005776:	2b01      	cmp	r3, #1
 8005778:	d0d8      	beq.n	800572c <Motor_Reset+0x444>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005780:	4619      	mov	r1, r3
 8005782:	4a5d      	ldr	r2, [pc, #372]	; (80058f8 <Motor_Reset+0x610>)
 8005784:	460b      	mov	r3, r1
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	440b      	add	r3, r1
 800578a:	015b      	lsls	r3, r3, #5
 800578c:	4413      	add	r3, r2
 800578e:	334c      	adds	r3, #76	; 0x4c
 8005790:	2202      	movs	r2, #2
 8005792:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(MotorResetDelay);
 8005794:	2078      	movs	r0, #120	; 0x78
 8005796:	f001 fb87 	bl	8006ea8 <HAL_Delay>
		if (Motor4_Nreset_OPTstatus){
 800579a:	2140      	movs	r1, #64	; 0x40
 800579c:	4857      	ldr	r0, [pc, #348]	; (80058fc <Motor_Reset+0x614>)
 800579e:	f002 fded 	bl	800837c <HAL_GPIO_ReadPin>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d142      	bne.n	800582e <Motor_Reset+0x546>
			temp->MotorDirection = 0 ;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp->NumberofRads = 10 ;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a53      	ldr	r2, [pc, #332]	; (8005900 <Motor_Reset+0x618>)
 80057b4:	625a      	str	r2, [r3, #36]	; 0x24
			MotorMove_steps(temp);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7fe ff36 	bl	8004628 <MotorMove_steps>
			for(uint32_t i=0 ; Motor4_Nreset_OPTstatus ; i++){
 80057bc:	2300      	movs	r3, #0
 80057be:	61bb      	str	r3, [r7, #24]
 80057c0:	e01f      	b.n	8005802 <Motor_Reset+0x51a>
				if(i>8000) {
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80057c8:	d915      	bls.n	80057f6 <Motor_Reset+0x50e>
					printf("[WRONG] Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057d0:	4619      	mov	r1, r3
 80057d2:	4848      	ldr	r0, [pc, #288]	; (80058f4 <Motor_Reset+0x60c>)
 80057d4:	f00a fefa 	bl	80105cc <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057de:	4619      	mov	r1, r3
 80057e0:	4a45      	ldr	r2, [pc, #276]	; (80058f8 <Motor_Reset+0x610>)
 80057e2:	460b      	mov	r3, r1
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	440b      	add	r3, r1
 80057e8:	015b      	lsls	r3, r3, #5
 80057ea:	4413      	add	r3, r2
 80057ec:	334c      	adds	r3, #76	; 0x4c
 80057ee:	2202      	movs	r2, #2
 80057f0:	601a      	str	r2, [r3, #0]
					return FAIL;
 80057f2:	2300      	movs	r3, #0
 80057f4:	e163      	b.n	8005abe <Motor_Reset+0x7d6>
				}
				else {HAL_Delay(1);}
 80057f6:	2001      	movs	r0, #1
 80057f8:	f001 fb56 	bl	8006ea8 <HAL_Delay>
			for(uint32_t i=0 ; Motor4_Nreset_OPTstatus ; i++){
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	3301      	adds	r3, #1
 8005800:	61bb      	str	r3, [r7, #24]
 8005802:	2140      	movs	r1, #64	; 0x40
 8005804:	483d      	ldr	r0, [pc, #244]	; (80058fc <Motor_Reset+0x614>)
 8005806:	f002 fdb9 	bl	800837c <HAL_GPIO_ReadPin>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0d8      	beq.n	80057c2 <Motor_Reset+0x4da>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005816:	4619      	mov	r1, r3
 8005818:	4a37      	ldr	r2, [pc, #220]	; (80058f8 <Motor_Reset+0x610>)
 800581a:	460b      	mov	r3, r1
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	440b      	add	r3, r1
 8005820:	015b      	lsls	r3, r3, #5
 8005822:	4413      	add	r3, r2
 8005824:	334c      	adds	r3, #76	; 0x4c
 8005826:	2202      	movs	r2, #2
 8005828:	601a      	str	r2, [r3, #0]
			return SUCCESS;
 800582a:	2301      	movs	r3, #1
 800582c:	e147      	b.n	8005abe <Motor_Reset+0x7d6>
		}
	}

	if (temp->MotorNumber == 5){
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005834:	2b05      	cmp	r3, #5
 8005836:	f040 809e 	bne.w	8005976 <Motor_Reset+0x68e>
		if ( Motor5_reset_OPTstatus ){
 800583a:	2180      	movs	r1, #128	; 0x80
 800583c:	482f      	ldr	r0, [pc, #188]	; (80058fc <Motor_Reset+0x614>)
 800583e:	f002 fd9d 	bl	800837c <HAL_GPIO_ReadPin>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d140      	bne.n	80058ca <Motor_Reset+0x5e2>
			temp->MotorDirection = 1 ;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f7ff fbdb 	bl	800500c <MotorRun_LowSpeed>
			HAL_Delay(MotorResetDelay);
 8005856:	2078      	movs	r0, #120	; 0x78
 8005858:	f001 fb26 	bl	8006ea8 <HAL_Delay>
			for(uint32_t i=0 ; Motor5_reset_OPTstatus ; i++){
 800585c:	2300      	movs	r3, #0
 800585e:	617b      	str	r3, [r7, #20]
 8005860:	e01f      	b.n	80058a2 <Motor_Reset+0x5ba>
				if(i>500) {
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005868:	d915      	bls.n	8005896 <Motor_Reset+0x5ae>
					printf("[WRONG]Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005870:	4619      	mov	r1, r3
 8005872:	4824      	ldr	r0, [pc, #144]	; (8005904 <Motor_Reset+0x61c>)
 8005874:	f00a feaa 	bl	80105cc <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800587e:	4619      	mov	r1, r3
 8005880:	4a1d      	ldr	r2, [pc, #116]	; (80058f8 <Motor_Reset+0x610>)
 8005882:	460b      	mov	r3, r1
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	440b      	add	r3, r1
 8005888:	015b      	lsls	r3, r3, #5
 800588a:	4413      	add	r3, r2
 800588c:	334c      	adds	r3, #76	; 0x4c
 800588e:	2202      	movs	r2, #2
 8005890:	601a      	str	r2, [r3, #0]
					return FAIL;
 8005892:	2300      	movs	r3, #0
 8005894:	e113      	b.n	8005abe <Motor_Reset+0x7d6>
				}
				else {HAL_Delay(1);}
 8005896:	2001      	movs	r0, #1
 8005898:	f001 fb06 	bl	8006ea8 <HAL_Delay>
			for(uint32_t i=0 ; Motor5_reset_OPTstatus ; i++){
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	3301      	adds	r3, #1
 80058a0:	617b      	str	r3, [r7, #20]
 80058a2:	2180      	movs	r1, #128	; 0x80
 80058a4:	4815      	ldr	r0, [pc, #84]	; (80058fc <Motor_Reset+0x614>)
 80058a6:	f002 fd69 	bl	800837c <HAL_GPIO_ReadPin>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d0d8      	beq.n	8005862 <Motor_Reset+0x57a>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058b6:	4619      	mov	r1, r3
 80058b8:	4a0f      	ldr	r2, [pc, #60]	; (80058f8 <Motor_Reset+0x610>)
 80058ba:	460b      	mov	r3, r1
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	440b      	add	r3, r1
 80058c0:	015b      	lsls	r3, r3, #5
 80058c2:	4413      	add	r3, r2
 80058c4:	334c      	adds	r3, #76	; 0x4c
 80058c6:	2202      	movs	r2, #2
 80058c8:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(MotorResetDelay);
 80058ca:	2078      	movs	r0, #120	; 0x78
 80058cc:	f001 faec 	bl	8006ea8 <HAL_Delay>
		if (Motor5_Nreset_OPTstatus){
 80058d0:	2180      	movs	r1, #128	; 0x80
 80058d2:	480a      	ldr	r0, [pc, #40]	; (80058fc <Motor_Reset+0x614>)
 80058d4:	f002 fd52 	bl	800837c <HAL_GPIO_ReadPin>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d14b      	bne.n	8005976 <Motor_Reset+0x68e>
			temp->MotorDirection = 0 ;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7ff fb90 	bl	800500c <MotorRun_LowSpeed>
			for(uint32_t i=0 ; Motor5_Nreset_OPTstatus ; i++){
 80058ec:	2300      	movs	r3, #0
 80058ee:	613b      	str	r3, [r7, #16]
 80058f0:	e02b      	b.n	800594a <Motor_Reset+0x662>
 80058f2:	bf00      	nop
 80058f4:	08012b00 	.word	0x08012b00
 80058f8:	200008b0 	.word	0x200008b0
 80058fc:	40020c00 	.word	0x40020c00
 8005900:	41200000 	.word	0x41200000
 8005904:	08012b2c 	.word	0x08012b2c
				if(i>5000) {
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	f241 3288 	movw	r2, #5000	; 0x1388
 800590e:	4293      	cmp	r3, r2
 8005910:	d915      	bls.n	800593e <Motor_Reset+0x656>
					printf("[WRONG]Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005918:	4619      	mov	r1, r3
 800591a:	486b      	ldr	r0, [pc, #428]	; (8005ac8 <Motor_Reset+0x7e0>)
 800591c:	f00a fe56 	bl	80105cc <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005926:	4619      	mov	r1, r3
 8005928:	4a68      	ldr	r2, [pc, #416]	; (8005acc <Motor_Reset+0x7e4>)
 800592a:	460b      	mov	r3, r1
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	440b      	add	r3, r1
 8005930:	015b      	lsls	r3, r3, #5
 8005932:	4413      	add	r3, r2
 8005934:	334c      	adds	r3, #76	; 0x4c
 8005936:	2202      	movs	r2, #2
 8005938:	601a      	str	r2, [r3, #0]
					return FAIL;
 800593a:	2300      	movs	r3, #0
 800593c:	e0bf      	b.n	8005abe <Motor_Reset+0x7d6>
				}
				else {HAL_Delay(1);}
 800593e:	2001      	movs	r0, #1
 8005940:	f001 fab2 	bl	8006ea8 <HAL_Delay>
			for(uint32_t i=0 ; Motor5_Nreset_OPTstatus ; i++){
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	3301      	adds	r3, #1
 8005948:	613b      	str	r3, [r7, #16]
 800594a:	2180      	movs	r1, #128	; 0x80
 800594c:	4860      	ldr	r0, [pc, #384]	; (8005ad0 <Motor_Reset+0x7e8>)
 800594e:	f002 fd15 	bl	800837c <HAL_GPIO_ReadPin>
 8005952:	4603      	mov	r3, r0
 8005954:	2b01      	cmp	r3, #1
 8005956:	d0d7      	beq.n	8005908 <Motor_Reset+0x620>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800595e:	4619      	mov	r1, r3
 8005960:	4a5a      	ldr	r2, [pc, #360]	; (8005acc <Motor_Reset+0x7e4>)
 8005962:	460b      	mov	r3, r1
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	440b      	add	r3, r1
 8005968:	015b      	lsls	r3, r3, #5
 800596a:	4413      	add	r3, r2
 800596c:	334c      	adds	r3, #76	; 0x4c
 800596e:	2202      	movs	r2, #2
 8005970:	601a      	str	r2, [r3, #0]
			return SUCCESS;
 8005972:	2301      	movs	r3, #1
 8005974:	e0a3      	b.n	8005abe <Motor_Reset+0x7d6>
		}
	}

	if (temp->MotorNumber == 6){
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 3020 	ldrb.w	r3, [r3, #32]
 800597c:	2b06      	cmp	r3, #6
 800597e:	f040 809d 	bne.w	8005abc <Motor_Reset+0x7d4>
		if ( Motor6_reset_OPTstatus ){
 8005982:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005986:	4853      	ldr	r0, [pc, #332]	; (8005ad4 <Motor_Reset+0x7ec>)
 8005988:	f002 fcf8 	bl	800837c <HAL_GPIO_ReadPin>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d144      	bne.n	8005a1c <Motor_Reset+0x734>
			temp->MotorDirection = 1 ;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp->NumberofRads = 10 ;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a4e      	ldr	r2, [pc, #312]	; (8005ad8 <Motor_Reset+0x7f0>)
 800599e:	625a      	str	r2, [r3, #36]	; 0x24
			MotorRun_LowSpeed(temp);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7ff fb33 	bl	800500c <MotorRun_LowSpeed>
			HAL_Delay(MotorResetDelay);
 80059a6:	2078      	movs	r0, #120	; 0x78
 80059a8:	f001 fa7e 	bl	8006ea8 <HAL_Delay>
			for(uint32_t i=0 ; Motor6_reset_OPTstatus ; i++){
 80059ac:	2300      	movs	r3, #0
 80059ae:	60fb      	str	r3, [r7, #12]
 80059b0:	e01f      	b.n	80059f2 <Motor_Reset+0x70a>
				if(i>500) {
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80059b8:	d915      	bls.n	80059e6 <Motor_Reset+0x6fe>
					printf("[WRONG]1Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059c0:	4619      	mov	r1, r3
 80059c2:	4846      	ldr	r0, [pc, #280]	; (8005adc <Motor_Reset+0x7f4>)
 80059c4:	f00a fe02 	bl	80105cc <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059ce:	4619      	mov	r1, r3
 80059d0:	4a3e      	ldr	r2, [pc, #248]	; (8005acc <Motor_Reset+0x7e4>)
 80059d2:	460b      	mov	r3, r1
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	440b      	add	r3, r1
 80059d8:	015b      	lsls	r3, r3, #5
 80059da:	4413      	add	r3, r2
 80059dc:	334c      	adds	r3, #76	; 0x4c
 80059de:	2202      	movs	r2, #2
 80059e0:	601a      	str	r2, [r3, #0]
					return FAIL;
 80059e2:	2300      	movs	r3, #0
 80059e4:	e06b      	b.n	8005abe <Motor_Reset+0x7d6>
				}
				else {HAL_Delay(1);}
 80059e6:	2001      	movs	r0, #1
 80059e8:	f001 fa5e 	bl	8006ea8 <HAL_Delay>
			for(uint32_t i=0 ; Motor6_reset_OPTstatus ; i++){
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	3301      	adds	r3, #1
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059f6:	4837      	ldr	r0, [pc, #220]	; (8005ad4 <Motor_Reset+0x7ec>)
 80059f8:	f002 fcc0 	bl	800837c <HAL_GPIO_ReadPin>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d0d7      	beq.n	80059b2 <Motor_Reset+0x6ca>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a08:	4619      	mov	r1, r3
 8005a0a:	4a30      	ldr	r2, [pc, #192]	; (8005acc <Motor_Reset+0x7e4>)
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	440b      	add	r3, r1
 8005a12:	015b      	lsls	r3, r3, #5
 8005a14:	4413      	add	r3, r2
 8005a16:	334c      	adds	r3, #76	; 0x4c
 8005a18:	2202      	movs	r2, #2
 8005a1a:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(MotorResetDelay);
 8005a1c:	2078      	movs	r0, #120	; 0x78
 8005a1e:	f001 fa43 	bl	8006ea8 <HAL_Delay>
		if (Motor6_Nreset_OPTstatus){
 8005a22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a26:	482b      	ldr	r0, [pc, #172]	; (8005ad4 <Motor_Reset+0x7ec>)
 8005a28:	f002 fca8 	bl	800837c <HAL_GPIO_ReadPin>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d144      	bne.n	8005abc <Motor_Reset+0x7d4>
			temp->MotorDirection = 0 ;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp->NumberofRads = 50 ;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a28      	ldr	r2, [pc, #160]	; (8005ae0 <Motor_Reset+0x7f8>)
 8005a3e:	625a      	str	r2, [r3, #36]	; 0x24
			MotorRun_LowSpeed(temp);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7ff fae3 	bl	800500c <MotorRun_LowSpeed>
			for(uint32_t i=0 ; Motor6_Nreset_OPTstatus ; i++){
 8005a46:	2300      	movs	r3, #0
 8005a48:	60bb      	str	r3, [r7, #8]
 8005a4a:	e020      	b.n	8005a8e <Motor_Reset+0x7a6>
				if(i>5000) {
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d915      	bls.n	8005a82 <Motor_Reset+0x79a>
					printf("[WRONG]2Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	4821      	ldr	r0, [pc, #132]	; (8005ae4 <Motor_Reset+0x7fc>)
 8005a60:	f00a fdb4 	bl	80105cc <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4a17      	ldr	r2, [pc, #92]	; (8005acc <Motor_Reset+0x7e4>)
 8005a6e:	460b      	mov	r3, r1
 8005a70:	005b      	lsls	r3, r3, #1
 8005a72:	440b      	add	r3, r1
 8005a74:	015b      	lsls	r3, r3, #5
 8005a76:	4413      	add	r3, r2
 8005a78:	334c      	adds	r3, #76	; 0x4c
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	601a      	str	r2, [r3, #0]
					return FAIL;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	e01d      	b.n	8005abe <Motor_Reset+0x7d6>
				}
				else {HAL_Delay(1);}
 8005a82:	2001      	movs	r0, #1
 8005a84:	f001 fa10 	bl	8006ea8 <HAL_Delay>
			for(uint32_t i=0 ; Motor6_Nreset_OPTstatus ; i++){
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	60bb      	str	r3, [r7, #8]
 8005a8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a92:	4810      	ldr	r0, [pc, #64]	; (8005ad4 <Motor_Reset+0x7ec>)
 8005a94:	f002 fc72 	bl	800837c <HAL_GPIO_ReadPin>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d0d6      	beq.n	8005a4c <Motor_Reset+0x764>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4a09      	ldr	r2, [pc, #36]	; (8005acc <Motor_Reset+0x7e4>)
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	005b      	lsls	r3, r3, #1
 8005aac:	440b      	add	r3, r1
 8005aae:	015b      	lsls	r3, r3, #5
 8005ab0:	4413      	add	r3, r2
 8005ab2:	334c      	adds	r3, #76	; 0x4c
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	601a      	str	r2, [r3, #0]
			return SUCCESS;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e000      	b.n	8005abe <Motor_Reset+0x7d6>
		}
	}


	return FAIL;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3738      	adds	r7, #56	; 0x38
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	08012b2c 	.word	0x08012b2c
 8005acc:	200008b0 	.word	0x200008b0
 8005ad0:	40020c00 	.word	0x40020c00
 8005ad4:	40021800 	.word	0x40021800
 8005ad8:	41200000 	.word	0x41200000
 8005adc:	08012b58 	.word	0x08012b58
 8005ae0:	42480000 	.word	0x42480000
 8005ae4:	08012b84 	.word	0x08012b84

08005ae8 <Motor4_SuckInMode>:

uint8_t Motor4_SuckInMode(uint32_t x_uL)  // 电机4最大排量1000uL，总行程10rads（2000步），每步0.5uL
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
#ifdef JiaYangZhen
	OUT5_OFF();
 8005af0:	2200      	movs	r2, #0
 8005af2:	2140      	movs	r1, #64	; 0x40
 8005af4:	4821      	ldr	r0, [pc, #132]	; (8005b7c <Motor4_SuckInMode+0x94>)
 8005af6:	f002 fc59 	bl	80083ac <HAL_GPIO_WritePin>
#endif
#ifdef DushuModule
	OUT6_ON();	//吸液电磁阀，NC
	OUT5_OFF();	//注液电磁阀，NC
#endif
	HAL_Delay(300);
 8005afa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005afe:	f001 f9d3 	bl	8006ea8 <HAL_Delay>
	//printf("Motor4_Sucks in %lduL...\r\n", x_uL);
	int32_t target_steps = 0 ;
 8005b02:	2300      	movs	r3, #0
 8005b04:	60bb      	str	r3, [r7, #8]
#ifdef CiFenLi
	target_steps = x_uL * 2 * Motor[4].mircro_steps ;
#endif
#ifdef JiaYangZhen
	target_steps = x_uL * 8 * Motor[4].mircro_steps ;
 8005b06:	4b1e      	ldr	r3, [pc, #120]	; (8005b80 <Motor4_SuckInMode+0x98>)
 8005b08:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	fb02 f303 	mul.w	r3, r2, r3
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	60bb      	str	r3, [r7, #8]
#endif
#ifdef DushuModule
	target_steps = x_uL * 8 * Motor[4].mircro_steps ;
#endif
	if(Motor[4].Status == 1){
 8005b16:	4b1a      	ldr	r3, [pc, #104]	; (8005b80 <Motor4_SuckInMode+0x98>)
 8005b18:	f893 31b0 	ldrb.w	r3, [r3, #432]	; 0x1b0
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d101      	bne.n	8005b24 <Motor4_SuckInMode+0x3c>
		return FAIL;
 8005b20:	2300      	movs	r3, #0
 8005b22:	e026      	b.n	8005b72 <Motor4_SuckInMode+0x8a>
	}
	if ( Motor[4].StepPosition != 0 ){
 8005b24:	4b16      	ldr	r3, [pc, #88]	; (8005b80 <Motor4_SuckInMode+0x98>)
 8005b26:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <Motor4_SuckInMode+0x4e>
		MotorMove_position(&Motor[4], 0 );
 8005b2e:	2100      	movs	r1, #0
 8005b30:	4814      	ldr	r0, [pc, #80]	; (8005b84 <Motor4_SuckInMode+0x9c>)
 8005b32:	f7fe ff43 	bl	80049bc <MotorMove_position>
	}
	for(uint32_t i = 0 ; Motor[4].Status ; i++){
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	e010      	b.n	8005b5e <Motor4_SuckInMode+0x76>
		if(i<3000){
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d806      	bhi.n	8005b54 <Motor4_SuckInMode+0x6c>
			i++;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	60fb      	str	r3, [r7, #12]
			HAL_Delay(1);
 8005b4c:	2001      	movs	r0, #1
 8005b4e:	f001 f9ab 	bl	8006ea8 <HAL_Delay>
 8005b52:	e001      	b.n	8005b58 <Motor4_SuckInMode+0x70>
		}
		else{
			return FAIL;
 8005b54:	2300      	movs	r3, #0
 8005b56:	e00c      	b.n	8005b72 <Motor4_SuckInMode+0x8a>
	for(uint32_t i = 0 ; Motor[4].Status ; i++){
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	60fb      	str	r3, [r7, #12]
 8005b5e:	4b08      	ldr	r3, [pc, #32]	; (8005b80 <Motor4_SuckInMode+0x98>)
 8005b60:	f893 31b0 	ldrb.w	r3, [r3, #432]	; 0x1b0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1e9      	bne.n	8005b3c <Motor4_SuckInMode+0x54>
		}
	}
	MotorMove_position(&Motor[4], target_steps );
 8005b68:	68b9      	ldr	r1, [r7, #8]
 8005b6a:	4806      	ldr	r0, [pc, #24]	; (8005b84 <Motor4_SuckInMode+0x9c>)
 8005b6c:	f7fe ff26 	bl	80049bc <MotorMove_position>

	return SUCCESS;
 8005b70:	2301      	movs	r3, #1
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	40021400 	.word	0x40021400
 8005b80:	200008b0 	.word	0x200008b0
 8005b84:	20000a30 	.word	0x20000a30

08005b88 <Motor4_PushOutMode>:

uint8_t Motor4_PushOutMode(uint32_t x_uL)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
#ifdef JiaYangZhen
	OUT5_OFF();
 8005b90:	2200      	movs	r2, #0
 8005b92:	2140      	movs	r1, #64	; 0x40
 8005b94:	481c      	ldr	r0, [pc, #112]	; (8005c08 <Motor4_PushOutMode+0x80>)
 8005b96:	f002 fc09 	bl	80083ac <HAL_GPIO_WritePin>
#endif
#ifdef DushuModule
	OUT6_OFF();
	OUT5_ON();
#endif
	HAL_Delay(300);
 8005b9a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005b9e:	f001 f983 	bl	8006ea8 <HAL_Delay>
	//printf("Motor4_Pushs out uL...\r\n");
	int32_t target_position = 0 ;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	60fb      	str	r3, [r7, #12]
#ifdef CiFenLi
	target_position = Motor[4].StepPosition - (x_uL * 2 * Motor[4].mircro_steps) ;
#endif
#ifdef JiaYangZhen
	target_position = Motor[4].StepPosition - (x_uL * 8 * Motor[4].mircro_steps) ;
 8005ba6:	4b19      	ldr	r3, [pc, #100]	; (8005c0c <Motor4_PushOutMode+0x84>)
 8005ba8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8005bac:	4619      	mov	r1, r3
 8005bae:	4b17      	ldr	r3, [pc, #92]	; (8005c0c <Motor4_PushOutMode+0x84>)
 8005bb0:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	fb02 f303 	mul.w	r3, r2, r3
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	1acb      	subs	r3, r1, r3
 8005bbe:	60fb      	str	r3, [r7, #12]
#endif
#ifdef DushuModule
	target_position = Motor[4].StepPosition - (x_uL * 8 * Motor[4].mircro_steps) ;
#endif

	if(target_position < 0){
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	da0f      	bge.n	8005be6 <Motor4_PushOutMode+0x5e>
		printf("[WRONG]Push out Number Overflow!\r\n Maximum Number:%ld uL\r\n",Motor[4].StepPosition/Motor[4].mircro_steps/2);
 8005bc6:	4b11      	ldr	r3, [pc, #68]	; (8005c0c <Motor4_PushOutMode+0x84>)
 8005bc8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8005bcc:	461a      	mov	r2, r3
 8005bce:	4b0f      	ldr	r3, [pc, #60]	; (8005c0c <Motor4_PushOutMode+0x84>)
 8005bd0:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8005bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd8:	085b      	lsrs	r3, r3, #1
 8005bda:	4619      	mov	r1, r3
 8005bdc:	480c      	ldr	r0, [pc, #48]	; (8005c10 <Motor4_PushOutMode+0x88>)
 8005bde:	f00a fcf5 	bl	80105cc <iprintf>
		return FAIL;
 8005be2:	2300      	movs	r3, #0
 8005be4:	e00b      	b.n	8005bfe <Motor4_PushOutMode+0x76>
	}
	if(Motor[4].Status == 1){
 8005be6:	4b09      	ldr	r3, [pc, #36]	; (8005c0c <Motor4_PushOutMode+0x84>)
 8005be8:	f893 31b0 	ldrb.w	r3, [r3, #432]	; 0x1b0
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d101      	bne.n	8005bf4 <Motor4_PushOutMode+0x6c>
		return FAIL;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	e004      	b.n	8005bfe <Motor4_PushOutMode+0x76>
	}
	MotorMove_position(&Motor[4], target_position );
 8005bf4:	68f9      	ldr	r1, [r7, #12]
 8005bf6:	4807      	ldr	r0, [pc, #28]	; (8005c14 <Motor4_PushOutMode+0x8c>)
 8005bf8:	f7fe fee0 	bl	80049bc <MotorMove_position>

	return SUCCESS;
 8005bfc:	2301      	movs	r3, #1
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	40021400 	.word	0x40021400
 8005c0c:	200008b0 	.word	0x200008b0
 8005c10:	08012bb0 	.word	0x08012bb0
 8005c14:	20000a30 	.word	0x20000a30

08005c18 <DC_Motor_ON>:

/*            *****************    0x10-0b00010000 直流电机控制模式 ：  ******************
根据协议，通过USART5进行出串口通讯，输入直流电机的【编号、AB相、占空比】参数
Status - 0x02 代表A相使能，0x01代表B相使能。同一个电机的AB相占空比一致 ***/
void DC_Motor_ON(struct MotorDefine *temp ,char x, uint32_t Duty_Cycle)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	460b      	mov	r3, r1
 8005c22:	607a      	str	r2, [r7, #4]
 8005c24:	72fb      	strb	r3, [r7, #11]
	if ( x == 'A' ){
 8005c26:	7afb      	ldrb	r3, [r7, #11]
 8005c28:	2b41      	cmp	r3, #65	; 0x41
 8005c2a:	d13d      	bne.n	8005ca8 <DC_Motor_ON+0x90>
		Motor[temp->MotorNumber].Status = Motor[temp->MotorNumber].Status | 0b00000010 ;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c32:	4619      	mov	r1, r3
 8005c34:	4a5c      	ldr	r2, [pc, #368]	; (8005da8 <DC_Motor_ON+0x190>)
 8005c36:	460b      	mov	r3, r1
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	440b      	add	r3, r1
 8005c3c:	015b      	lsls	r3, r3, #5
 8005c3e:	4413      	add	r3, r2
 8005c40:	3330      	adds	r3, #48	; 0x30
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005c4a:	4611      	mov	r1, r2
 8005c4c:	f043 0302 	orr.w	r3, r3, #2
 8005c50:	b2d8      	uxtb	r0, r3
 8005c52:	4a55      	ldr	r2, [pc, #340]	; (8005da8 <DC_Motor_ON+0x190>)
 8005c54:	460b      	mov	r3, r1
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	440b      	add	r3, r1
 8005c5a:	015b      	lsls	r3, r3, #5
 8005c5c:	4413      	add	r3, r2
 8005c5e:	3330      	adds	r3, #48	; 0x30
 8005c60:	4602      	mov	r2, r0
 8005c62:	701a      	strb	r2, [r3, #0]
		if ( temp->MotorNumber == 6 ){
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c6a:	2b06      	cmp	r3, #6
 8005c6c:	d105      	bne.n	8005c7a <DC_Motor_ON+0x62>
			VM6_Enable_A();
 8005c6e:	2201      	movs	r2, #1
 8005c70:	2180      	movs	r1, #128	; 0x80
 8005c72:	484e      	ldr	r0, [pc, #312]	; (8005dac <DC_Motor_ON+0x194>)
 8005c74:	f002 fb9a 	bl	80083ac <HAL_GPIO_WritePin>
 8005c78:	e057      	b.n	8005d2a <DC_Motor_ON+0x112>
		}
		else if ( temp->MotorNumber == 7 ){
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c80:	2b07      	cmp	r3, #7
 8005c82:	d105      	bne.n	8005c90 <DC_Motor_ON+0x78>
			VM7_Enable_A();
 8005c84:	2201      	movs	r2, #1
 8005c86:	2101      	movs	r1, #1
 8005c88:	4849      	ldr	r0, [pc, #292]	; (8005db0 <DC_Motor_ON+0x198>)
 8005c8a:	f002 fb8f 	bl	80083ac <HAL_GPIO_WritePin>
 8005c8e:	e04c      	b.n	8005d2a <DC_Motor_ON+0x112>
		}
		else if ( temp->MotorNumber == 8 ){
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c96:	2b08      	cmp	r3, #8
 8005c98:	d147      	bne.n	8005d2a <DC_Motor_ON+0x112>
			VM8_Enable_A();
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ca0:	4844      	ldr	r0, [pc, #272]	; (8005db4 <DC_Motor_ON+0x19c>)
 8005ca2:	f002 fb83 	bl	80083ac <HAL_GPIO_WritePin>
 8005ca6:	e040      	b.n	8005d2a <DC_Motor_ON+0x112>
		}
	}
	else if ( x == 'B' ){
 8005ca8:	7afb      	ldrb	r3, [r7, #11]
 8005caa:	2b42      	cmp	r3, #66	; 0x42
 8005cac:	d13d      	bne.n	8005d2a <DC_Motor_ON+0x112>
		Motor[temp->MotorNumber].Status = Motor[temp->MotorNumber].Status | 0b00000001 ;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4a3c      	ldr	r2, [pc, #240]	; (8005da8 <DC_Motor_ON+0x190>)
 8005cb8:	460b      	mov	r3, r1
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	440b      	add	r3, r1
 8005cbe:	015b      	lsls	r3, r3, #5
 8005cc0:	4413      	add	r3, r2
 8005cc2:	3330      	adds	r3, #48	; 0x30
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005ccc:	4611      	mov	r1, r2
 8005cce:	f043 0301 	orr.w	r3, r3, #1
 8005cd2:	b2d8      	uxtb	r0, r3
 8005cd4:	4a34      	ldr	r2, [pc, #208]	; (8005da8 <DC_Motor_ON+0x190>)
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	440b      	add	r3, r1
 8005cdc:	015b      	lsls	r3, r3, #5
 8005cde:	4413      	add	r3, r2
 8005ce0:	3330      	adds	r3, #48	; 0x30
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	701a      	strb	r2, [r3, #0]
		if ( temp->MotorNumber == 6 ){
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005cec:	2b06      	cmp	r3, #6
 8005cee:	d105      	bne.n	8005cfc <DC_Motor_ON+0xe4>
			VM6_Enable_B();
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	2102      	movs	r1, #2
 8005cf4:	482e      	ldr	r0, [pc, #184]	; (8005db0 <DC_Motor_ON+0x198>)
 8005cf6:	f002 fb59 	bl	80083ac <HAL_GPIO_WritePin>
 8005cfa:	e016      	b.n	8005d2a <DC_Motor_ON+0x112>
		}
		else if ( temp->MotorNumber == 7 ){
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d02:	2b07      	cmp	r3, #7
 8005d04:	d106      	bne.n	8005d14 <DC_Motor_ON+0xfc>
			VM7_Enable_B();
 8005d06:	2201      	movs	r2, #1
 8005d08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d0c:	4829      	ldr	r0, [pc, #164]	; (8005db4 <DC_Motor_ON+0x19c>)
 8005d0e:	f002 fb4d 	bl	80083ac <HAL_GPIO_WritePin>
 8005d12:	e00a      	b.n	8005d2a <DC_Motor_ON+0x112>
		}
		else if ( temp->MotorNumber == 8 ){
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d1a:	2b08      	cmp	r3, #8
 8005d1c:	d105      	bne.n	8005d2a <DC_Motor_ON+0x112>
			VM8_Enable_B();
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d24:	4823      	ldr	r0, [pc, #140]	; (8005db4 <DC_Motor_ON+0x19c>)
 8005d26:	f002 fb41 	bl	80083ac <HAL_GPIO_WritePin>
		}
	}

	Motor[temp->MotorNumber].NumberofSteps_StopAccel = Duty_Cycle;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d30:	4619      	mov	r1, r3
 8005d32:	4a1d      	ldr	r2, [pc, #116]	; (8005da8 <DC_Motor_ON+0x190>)
 8005d34:	460b      	mov	r3, r1
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	440b      	add	r3, r1
 8005d3a:	015b      	lsls	r3, r3, #5
 8005d3c:	4413      	add	r3, r2
 8005d3e:	3350      	adds	r3, #80	; 0x50
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].AccelerationTimeTMR = Duty_Cycle * Motor[temp->MotorNumber].StepperSpeedTMR / 100 ;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	4a16      	ldr	r2, [pc, #88]	; (8005da8 <DC_Motor_ON+0x190>)
 8005d4e:	460b      	mov	r3, r1
 8005d50:	005b      	lsls	r3, r3, #1
 8005d52:	440b      	add	r3, r1
 8005d54:	015b      	lsls	r3, r3, #5
 8005d56:	4413      	add	r3, r2
 8005d58:	3348      	adds	r3, #72	; 0x48
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	fb02 f303 	mul.w	r3, r2, r3
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005d68:	4610      	mov	r0, r2
 8005d6a:	4a13      	ldr	r2, [pc, #76]	; (8005db8 <DC_Motor_ON+0x1a0>)
 8005d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d70:	095a      	lsrs	r2, r3, #5
 8005d72:	490d      	ldr	r1, [pc, #52]	; (8005da8 <DC_Motor_ON+0x190>)
 8005d74:	4603      	mov	r3, r0
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	4403      	add	r3, r0
 8005d7a:	015b      	lsls	r3, r3, #5
 8005d7c:	440b      	add	r3, r1
 8005d7e:	3358      	adds	r3, #88	; 0x58
 8005d80:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(Motor[temp->MotorNumber].htim_x);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4a07      	ldr	r2, [pc, #28]	; (8005da8 <DC_Motor_ON+0x190>)
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	440b      	add	r3, r1
 8005d92:	015b      	lsls	r3, r3, #5
 8005d94:	4413      	add	r3, r2
 8005d96:	3334      	adds	r3, #52	; 0x34
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f005 fa60 	bl	800b260 <HAL_TIM_Base_Start_IT>
}
 8005da0:	bf00      	nop
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	200008b0 	.word	0x200008b0
 8005dac:	40021000 	.word	0x40021000
 8005db0:	40021800 	.word	0x40021800
 8005db4:	40021400 	.word	0x40021400
 8005db8:	51eb851f 	.word	0x51eb851f

08005dbc <DC_Motor_OFF>:

void DC_Motor_OFF(struct MotorDefine *temp ,char x)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	70fb      	strb	r3, [r7, #3]
	if ( x == 'A' ){
 8005dc8:	78fb      	ldrb	r3, [r7, #3]
 8005dca:	2b41      	cmp	r3, #65	; 0x41
 8005dcc:	d13d      	bne.n	8005e4a <DC_Motor_OFF+0x8e>
		Motor[temp->MotorNumber].Status = Motor[temp->MotorNumber].Status & 0b11111101 ;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4a4e      	ldr	r2, [pc, #312]	; (8005f10 <DC_Motor_OFF+0x154>)
 8005dd8:	460b      	mov	r3, r1
 8005dda:	005b      	lsls	r3, r3, #1
 8005ddc:	440b      	add	r3, r1
 8005dde:	015b      	lsls	r3, r3, #5
 8005de0:	4413      	add	r3, r2
 8005de2:	3330      	adds	r3, #48	; 0x30
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005dec:	4611      	mov	r1, r2
 8005dee:	f023 0302 	bic.w	r3, r3, #2
 8005df2:	b2d8      	uxtb	r0, r3
 8005df4:	4a46      	ldr	r2, [pc, #280]	; (8005f10 <DC_Motor_OFF+0x154>)
 8005df6:	460b      	mov	r3, r1
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	440b      	add	r3, r1
 8005dfc:	015b      	lsls	r3, r3, #5
 8005dfe:	4413      	add	r3, r2
 8005e00:	3330      	adds	r3, #48	; 0x30
 8005e02:	4602      	mov	r2, r0
 8005e04:	701a      	strb	r2, [r3, #0]
		if ( temp->MotorNumber == 6 ){
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e0c:	2b06      	cmp	r3, #6
 8005e0e:	d105      	bne.n	8005e1c <DC_Motor_OFF+0x60>
			VM6_Disable_A();
 8005e10:	2200      	movs	r2, #0
 8005e12:	2180      	movs	r1, #128	; 0x80
 8005e14:	483f      	ldr	r0, [pc, #252]	; (8005f14 <DC_Motor_OFF+0x158>)
 8005e16:	f002 fac9 	bl	80083ac <HAL_GPIO_WritePin>
 8005e1a:	e057      	b.n	8005ecc <DC_Motor_OFF+0x110>
		}
		else if ( temp->MotorNumber == 7 ){
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e22:	2b07      	cmp	r3, #7
 8005e24:	d105      	bne.n	8005e32 <DC_Motor_OFF+0x76>
			VM7_Disable_A();
 8005e26:	2200      	movs	r2, #0
 8005e28:	2101      	movs	r1, #1
 8005e2a:	483b      	ldr	r0, [pc, #236]	; (8005f18 <DC_Motor_OFF+0x15c>)
 8005e2c:	f002 fabe 	bl	80083ac <HAL_GPIO_WritePin>
 8005e30:	e04c      	b.n	8005ecc <DC_Motor_OFF+0x110>
		}
		else if ( temp->MotorNumber == 8 ){
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e38:	2b08      	cmp	r3, #8
 8005e3a:	d147      	bne.n	8005ecc <DC_Motor_OFF+0x110>
			VM8_Disable_A();
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e42:	4836      	ldr	r0, [pc, #216]	; (8005f1c <DC_Motor_OFF+0x160>)
 8005e44:	f002 fab2 	bl	80083ac <HAL_GPIO_WritePin>
 8005e48:	e040      	b.n	8005ecc <DC_Motor_OFF+0x110>
		}
	}
	else if ( x == 'B' ){
 8005e4a:	78fb      	ldrb	r3, [r7, #3]
 8005e4c:	2b42      	cmp	r3, #66	; 0x42
 8005e4e:	d13d      	bne.n	8005ecc <DC_Motor_OFF+0x110>
		Motor[temp->MotorNumber].Status = Motor[temp->MotorNumber].Status & 0b11111110 ;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e56:	4619      	mov	r1, r3
 8005e58:	4a2d      	ldr	r2, [pc, #180]	; (8005f10 <DC_Motor_OFF+0x154>)
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	440b      	add	r3, r1
 8005e60:	015b      	lsls	r3, r3, #5
 8005e62:	4413      	add	r3, r2
 8005e64:	3330      	adds	r3, #48	; 0x30
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005e6e:	4611      	mov	r1, r2
 8005e70:	f023 0301 	bic.w	r3, r3, #1
 8005e74:	b2d8      	uxtb	r0, r3
 8005e76:	4a26      	ldr	r2, [pc, #152]	; (8005f10 <DC_Motor_OFF+0x154>)
 8005e78:	460b      	mov	r3, r1
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	440b      	add	r3, r1
 8005e7e:	015b      	lsls	r3, r3, #5
 8005e80:	4413      	add	r3, r2
 8005e82:	3330      	adds	r3, #48	; 0x30
 8005e84:	4602      	mov	r2, r0
 8005e86:	701a      	strb	r2, [r3, #0]
		if ( temp->MotorNumber == 6 ){
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e8e:	2b06      	cmp	r3, #6
 8005e90:	d105      	bne.n	8005e9e <DC_Motor_OFF+0xe2>
			VM6_Disable_B();
 8005e92:	2200      	movs	r2, #0
 8005e94:	2102      	movs	r1, #2
 8005e96:	4820      	ldr	r0, [pc, #128]	; (8005f18 <DC_Motor_OFF+0x15c>)
 8005e98:	f002 fa88 	bl	80083ac <HAL_GPIO_WritePin>
 8005e9c:	e016      	b.n	8005ecc <DC_Motor_OFF+0x110>
		}
		else if ( temp->MotorNumber == 7 ){
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ea4:	2b07      	cmp	r3, #7
 8005ea6:	d106      	bne.n	8005eb6 <DC_Motor_OFF+0xfa>
			VM7_Disable_B();
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005eae:	481b      	ldr	r0, [pc, #108]	; (8005f1c <DC_Motor_OFF+0x160>)
 8005eb0:	f002 fa7c 	bl	80083ac <HAL_GPIO_WritePin>
 8005eb4:	e00a      	b.n	8005ecc <DC_Motor_OFF+0x110>
		}
		else if ( temp->MotorNumber == 8 ){
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ebc:	2b08      	cmp	r3, #8
 8005ebe:	d105      	bne.n	8005ecc <DC_Motor_OFF+0x110>
			VM8_Disable_B();
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ec6:	4815      	ldr	r0, [pc, #84]	; (8005f1c <DC_Motor_OFF+0x160>)
 8005ec8:	f002 fa70 	bl	80083ac <HAL_GPIO_WritePin>
		}
	}

	if ( Motor[6].Status | Motor[7].Status | Motor[8].Status ){;}
 8005ecc:	4b10      	ldr	r3, [pc, #64]	; (8005f10 <DC_Motor_OFF+0x154>)
 8005ece:	f893 2270 	ldrb.w	r2, [r3, #624]	; 0x270
 8005ed2:	4b0f      	ldr	r3, [pc, #60]	; (8005f10 <DC_Motor_OFF+0x154>)
 8005ed4:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	4b0c      	ldr	r3, [pc, #48]	; (8005f10 <DC_Motor_OFF+0x154>)
 8005ede:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10e      	bne.n	8005f08 <DC_Motor_OFF+0x14c>
	else{
		HAL_TIM_Base_Stop_IT(Motor[temp->MotorNumber].htim_x);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	4a07      	ldr	r2, [pc, #28]	; (8005f10 <DC_Motor_OFF+0x154>)
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	440b      	add	r3, r1
 8005efa:	015b      	lsls	r3, r3, #5
 8005efc:	4413      	add	r3, r2
 8005efe:	3334      	adds	r3, #52	; 0x34
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f005 fa1c 	bl	800b340 <HAL_TIM_Base_Stop_IT>
	}
}
 8005f08:	bf00      	nop
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	200008b0 	.word	0x200008b0
 8005f14:	40021000 	.word	0x40021000
 8005f18:	40021800 	.word	0x40021800
 8005f1c:	40021400 	.word	0x40021400

08005f20 <init_Calibration_Value>:
float Cap_Value[2] ;    		// 直接读出并转换的电容值
float Cap_Value_Calibrated[2] ;	// 校准后的电容值，正常状态下为0
float Calibration_Value[2] ;	// 校准值，为常规状态下的电容值均值，计算绝对电容值需要减去该值

uint8_t init_Calibration_Value(uint8_t index)
{
 8005f20:	b590      	push	{r4, r7, lr}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	4603      	mov	r3, r0
 8005f28:	71fb      	strb	r3, [r7, #7]
	Calibration_Value[index] = 0;
 8005f2a:	79fb      	ldrb	r3, [r7, #7]
 8005f2c:	4a2e      	ldr	r2, [pc, #184]	; (8005fe8 <init_Calibration_Value+0xc8>)
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	f04f 0200 	mov.w	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]
	float temp_value = 0;
 8005f38:	f04f 0300 	mov.w	r3, #0
 8005f3c:	60bb      	str	r3, [r7, #8]
	for (uint8_t i=1 ; i<=100 ; i++){
 8005f3e:	2301      	movs	r3, #1
 8005f40:	73fb      	strb	r3, [r7, #15]
 8005f42:	e02a      	b.n	8005f9a <init_Calibration_Value+0x7a>
		temp_value = Cap_Calculate(index);
 8005f44:	79fb      	ldrb	r3, [r7, #7]
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7fd feba 	bl	8003cc0 <Cap_Calculate>
 8005f4c:	ed87 0a02 	vstr	s0, [r7, #8]
		HAL_Delay(1);
 8005f50:	2001      	movs	r0, #1
 8005f52:	f000 ffa9 	bl	8006ea8 <HAL_Delay>
		if (temp_value < 100000000){	// 如果Cap_Calculate返回inf，则表示读取I2C失败
 8005f56:	edd7 7a02 	vldr	s15, [r7, #8]
 8005f5a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8005fec <init_Calibration_Value+0xcc>
 8005f5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f66:	d510      	bpl.n	8005f8a <init_Calibration_Value+0x6a>
			Calibration_Value[index] = Calibration_Value[index] + temp_value;
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	4a1f      	ldr	r2, [pc, #124]	; (8005fe8 <init_Calibration_Value+0xc8>)
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	ed93 7a00 	vldr	s14, [r3]
 8005f74:	79fb      	ldrb	r3, [r7, #7]
 8005f76:	edd7 7a02 	vldr	s15, [r7, #8]
 8005f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f7e:	4a1a      	ldr	r2, [pc, #104]	; (8005fe8 <init_Calibration_Value+0xc8>)
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	edc3 7a00 	vstr	s15, [r3]
 8005f88:	e004      	b.n	8005f94 <init_Calibration_Value+0x74>
		}
		else{
			printf("[WRONG]init_Calibration_Value FAILED!\r\n");
 8005f8a:	4819      	ldr	r0, [pc, #100]	; (8005ff0 <init_Calibration_Value+0xd0>)
 8005f8c:	f00a fba4 	bl	80106d8 <puts>
			return INITFAILSTATE ;
 8005f90:	2364      	movs	r3, #100	; 0x64
 8005f92:	e025      	b.n	8005fe0 <init_Calibration_Value+0xc0>
	for (uint8_t i=1 ; i<=100 ; i++){
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
 8005f96:	3301      	adds	r3, #1
 8005f98:	73fb      	strb	r3, [r7, #15]
 8005f9a:	7bfb      	ldrb	r3, [r7, #15]
 8005f9c:	2b64      	cmp	r3, #100	; 0x64
 8005f9e:	d9d1      	bls.n	8005f44 <init_Calibration_Value+0x24>
		}
	}
	Calibration_Value[index] = Calibration_Value[index] / 100 ;
 8005fa0:	79fb      	ldrb	r3, [r7, #7]
 8005fa2:	4a11      	ldr	r2, [pc, #68]	; (8005fe8 <init_Calibration_Value+0xc8>)
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4413      	add	r3, r2
 8005fa8:	ed93 7a00 	vldr	s14, [r3]
 8005fac:	79fb      	ldrb	r3, [r7, #7]
 8005fae:	eddf 6a11 	vldr	s13, [pc, #68]	; 8005ff4 <init_Calibration_Value+0xd4>
 8005fb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005fb6:	4a0c      	ldr	r2, [pc, #48]	; (8005fe8 <init_Calibration_Value+0xc8>)
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4413      	add	r3, r2
 8005fbc:	edc3 7a00 	vstr	s15, [r3]
	printf("CapDetect_Calibration_Value Initialization Completed! Calibration_Value[%d]:%.2f\r\n",index,Calibration_Value[index]);
 8005fc0:	79fc      	ldrb	r4, [r7, #7]
 8005fc2:	79fb      	ldrb	r3, [r7, #7]
 8005fc4:	4a08      	ldr	r2, [pc, #32]	; (8005fe8 <init_Calibration_Value+0xc8>)
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fa fabb 	bl	8000548 <__aeabi_f2d>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	4621      	mov	r1, r4
 8005fd8:	4807      	ldr	r0, [pc, #28]	; (8005ff8 <init_Calibration_Value+0xd8>)
 8005fda:	f00a faf7 	bl	80105cc <iprintf>
	return INITPASSSTATE ;
 8005fde:	2363      	movs	r3, #99	; 0x63
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3714      	adds	r7, #20
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd90      	pop	{r4, r7, pc}
 8005fe8:	20000c7c 	.word	0x20000c7c
 8005fec:	4cbebc20 	.word	0x4cbebc20
 8005ff0:	08012bec 	.word	0x08012bec
 8005ff4:	42c80000 	.word	0x42c80000
 8005ff8:	08012c14 	.word	0x08012c14

08005ffc <get_Calibrated_Value>:

float get_Calibrated_Value(uint8_t index)  // 读取5次取平均
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	4603      	mov	r3, r0
 8006004:	71fb      	strb	r3, [r7, #7]
	float Cap_temp_Value = 0;
 8006006:	f04f 0300 	mov.w	r3, #0
 800600a:	617b      	str	r3, [r7, #20]
	float temp_value = 0;
 800600c:	f04f 0300 	mov.w	r3, #0
 8006010:	60fb      	str	r3, [r7, #12]
	for (uint8_t i=1 ; i<=3 ; i++){
 8006012:	2301      	movs	r3, #1
 8006014:	74fb      	strb	r3, [r7, #19]
 8006016:	e023      	b.n	8006060 <get_Calibrated_Value+0x64>
		temp_value = Cap_Calculate(index);
 8006018:	79fb      	ldrb	r3, [r7, #7]
 800601a:	4618      	mov	r0, r3
 800601c:	f7fd fe50 	bl	8003cc0 <Cap_Calculate>
 8006020:	ed87 0a03 	vstr	s0, [r7, #12]
		HAL_Delay(1);
 8006024:	2001      	movs	r0, #1
 8006026:	f000 ff3f 	bl	8006ea8 <HAL_Delay>
		if (temp_value < 100000000){	// 如果Cap_Calculate返回inf，则表示读取I2C失败
 800602a:	edd7 7a03 	vldr	s15, [r7, #12]
 800602e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006094 <get_Calibrated_Value+0x98>
 8006032:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800603a:	d508      	bpl.n	800604e <get_Calibrated_Value+0x52>
			Cap_temp_Value = Cap_temp_Value + temp_value;
 800603c:	ed97 7a05 	vldr	s14, [r7, #20]
 8006040:	edd7 7a03 	vldr	s15, [r7, #12]
 8006044:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006048:	edc7 7a05 	vstr	s15, [r7, #20]
 800604c:	e005      	b.n	800605a <get_Calibrated_Value+0x5e>
		}
		else{
			printf("[WRONG]Cap_Value Capture FAILED!\r\n");
 800604e:	4812      	ldr	r0, [pc, #72]	; (8006098 <get_Calibrated_Value+0x9c>)
 8006050:	f00a fb42 	bl	80106d8 <puts>
			return 0 ;
 8006054:	eddf 7a11 	vldr	s15, [pc, #68]	; 800609c <get_Calibrated_Value+0xa0>
 8006058:	e017      	b.n	800608a <get_Calibrated_Value+0x8e>
	for (uint8_t i=1 ; i<=3 ; i++){
 800605a:	7cfb      	ldrb	r3, [r7, #19]
 800605c:	3301      	adds	r3, #1
 800605e:	74fb      	strb	r3, [r7, #19]
 8006060:	7cfb      	ldrb	r3, [r7, #19]
 8006062:	2b03      	cmp	r3, #3
 8006064:	d9d8      	bls.n	8006018 <get_Calibrated_Value+0x1c>
		}
	}
	Cap_temp_Value = Cap_temp_Value / 3 ;
 8006066:	ed97 7a05 	vldr	s14, [r7, #20]
 800606a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800606e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006072:	edc7 7a05 	vstr	s15, [r7, #20]
	return ( Cap_temp_Value - Calibration_Value[index] ) ;
 8006076:	79fb      	ldrb	r3, [r7, #7]
 8006078:	4a09      	ldr	r2, [pc, #36]	; (80060a0 <get_Calibrated_Value+0xa4>)
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4413      	add	r3, r2
 800607e:	edd3 7a00 	vldr	s15, [r3]
 8006082:	ed97 7a05 	vldr	s14, [r7, #20]
 8006086:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 800608a:	eeb0 0a67 	vmov.f32	s0, s15
 800608e:	3718      	adds	r7, #24
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	4cbebc20 	.word	0x4cbebc20
 8006098:	08012c68 	.word	0x08012c68
 800609c:	00000000 	.word	0x00000000
 80060a0:	20000c7c 	.word	0x20000c7c
 80060a4:	00000000 	.word	0x00000000

080060a8 <StartDetectionTask>:

void StartDetectionTask(void *argument)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
	osDelay(50);
 80060b0:	2032      	movs	r0, #50	; 0x32
 80060b2:	f006 ffb7 	bl	800d024 <osDelay>
	printf("DetectionTask starts! \r\n");
 80060b6:	48ba      	ldr	r0, [pc, #744]	; (80063a0 <StartDetectionTask+0x2f8>)
 80060b8:	f00a fb0e 	bl	80106d8 <puts>

	Init_DoubleChannel_FDC2212();
 80060bc:	f7fd fdc6 	bl	8003c4c <Init_DoubleChannel_FDC2212>
	osDelay(100);
 80060c0:	2064      	movs	r0, #100	; 0x64
 80060c2:	f006 ffaf 	bl	800d024 <osDelay>
	DetectionTask_STATE = init_Calibration_Value(0);
 80060c6:	2000      	movs	r0, #0
 80060c8:	f7ff ff2a 	bl	8005f20 <init_Calibration_Value>
 80060cc:	4603      	mov	r3, r0
 80060ce:	461a      	mov	r2, r3
 80060d0:	4bb4      	ldr	r3, [pc, #720]	; (80063a4 <StartDetectionTask+0x2fc>)
 80060d2:	701a      	strb	r2, [r3, #0]
	osDelay(100);
 80060d4:	2064      	movs	r0, #100	; 0x64
 80060d6:	f006 ffa5 	bl	800d024 <osDelay>
	DetectionTask_STATE = INITPASSSTATE;
 80060da:	4bb2      	ldr	r3, [pc, #712]	; (80063a4 <StartDetectionTask+0x2fc>)
 80060dc:	2263      	movs	r2, #99	; 0x63
 80060de:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		osDelay(1);
 80060e0:	2001      	movs	r0, #1
 80060e2:	f006 ff9f 	bl	800d024 <osDelay>
		switch (DetectionTask_STATE)
 80060e6:	4baf      	ldr	r3, [pc, #700]	; (80063a4 <StartDetectionTask+0x2fc>)
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	2b6f      	cmp	r3, #111	; 0x6f
 80060ec:	f000 80a4 	beq.w	8006238 <StartDetectionTask+0x190>
 80060f0:	2b6f      	cmp	r3, #111	; 0x6f
 80060f2:	dcf5      	bgt.n	80060e0 <StartDetectionTask+0x38>
 80060f4:	2b64      	cmp	r3, #100	; 0x64
 80060f6:	dcf3      	bgt.n	80060e0 <StartDetectionTask+0x38>
 80060f8:	2b46      	cmp	r3, #70	; 0x46
 80060fa:	da04      	bge.n	8006106 <StartDetectionTask+0x5e>
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d047      	beq.n	8006190 <StartDetectionTask+0xe8>
 8006100:	2b01      	cmp	r3, #1
 8006102:	d053      	beq.n	80061ac <StartDetectionTask+0x104>
 8006104:	e13d      	b.n	8006382 <StartDetectionTask+0x2da>
 8006106:	3b46      	subs	r3, #70	; 0x46
 8006108:	2b1e      	cmp	r3, #30
 800610a:	d8e9      	bhi.n	80060e0 <StartDetectionTask+0x38>
 800610c:	a201      	add	r2, pc, #4	; (adr r2, 8006114 <StartDetectionTask+0x6c>)
 800610e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006112:	bf00      	nop
 8006114:	080061e1 	.word	0x080061e1
 8006118:	080061f5 	.word	0x080061f5
 800611c:	080060e1 	.word	0x080060e1
 8006120:	080060e1 	.word	0x080060e1
 8006124:	080060e1 	.word	0x080060e1
 8006128:	080060e1 	.word	0x080060e1
 800612c:	080060e1 	.word	0x080060e1
 8006130:	080060e1 	.word	0x080060e1
 8006134:	080060e1 	.word	0x080060e1
 8006138:	080060e1 	.word	0x080060e1
 800613c:	080060e1 	.word	0x080060e1
 8006140:	080060e1 	.word	0x080060e1
 8006144:	080060e1 	.word	0x080060e1
 8006148:	080060e1 	.word	0x080060e1
 800614c:	080060e1 	.word	0x080060e1
 8006150:	080060e1 	.word	0x080060e1
 8006154:	080060e1 	.word	0x080060e1
 8006158:	080060e1 	.word	0x080060e1
 800615c:	080060e1 	.word	0x080060e1
 8006160:	080060e1 	.word	0x080060e1
 8006164:	080060e1 	.word	0x080060e1
 8006168:	080060e1 	.word	0x080060e1
 800616c:	080060e1 	.word	0x080060e1
 8006170:	080060e1 	.word	0x080060e1
 8006174:	080060e1 	.word	0x080060e1
 8006178:	080060e1 	.word	0x080060e1
 800617c:	080060e1 	.word	0x080060e1
 8006180:	080060e1 	.word	0x080060e1
 8006184:	080060e1 	.word	0x080060e1
 8006188:	080061d9 	.word	0x080061d9
 800618c:	08006363 	.word	0x08006363
		{
		case 0:
			if ( myTask03_Status == INITPASSSTATE){
 8006190:	4b85      	ldr	r3, [pc, #532]	; (80063a8 <StartDetectionTask+0x300>)
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	2b63      	cmp	r3, #99	; 0x63
 8006196:	d105      	bne.n	80061a4 <StartDetectionTask+0xfc>
				Motor4_SuckInMode(10);
 8006198:	200a      	movs	r0, #10
 800619a:	f7ff fca5 	bl	8005ae8 <Motor4_SuckInMode>
				DetectionTask_STATE = 1;
 800619e:	4b81      	ldr	r3, [pc, #516]	; (80063a4 <StartDetectionTask+0x2fc>)
 80061a0:	2201      	movs	r2, #1
 80061a2:	701a      	strb	r2, [r3, #0]
			}
			osDelay(10);
 80061a4:	200a      	movs	r0, #10
 80061a6:	f006 ff3d 	bl	800d024 <osDelay>
			break;
 80061aa:	e0ea      	b.n	8006382 <StartDetectionTask+0x2da>

		case 1:
			if( Motor[4].Status == 0 ){
 80061ac:	4b7f      	ldr	r3, [pc, #508]	; (80063ac <StartDetectionTask+0x304>)
 80061ae:	f893 31b0 	ldrb.w	r3, [r3, #432]	; 0x1b0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10c      	bne.n	80061d0 <StartDetectionTask+0x128>
				Init_DoubleChannel_FDC2212();
 80061b6:	f7fd fd49 	bl	8003c4c <Init_DoubleChannel_FDC2212>
				osDelay(300);
 80061ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80061be:	f006 ff31 	bl	800d024 <osDelay>
				DetectionTask_STATE = init_Calibration_Value(0);
 80061c2:	2000      	movs	r0, #0
 80061c4:	f7ff feac 	bl	8005f20 <init_Calibration_Value>
 80061c8:	4603      	mov	r3, r0
 80061ca:	461a      	mov	r2, r3
 80061cc:	4b75      	ldr	r3, [pc, #468]	; (80063a4 <StartDetectionTask+0x2fc>)
 80061ce:	701a      	strb	r2, [r3, #0]
			}
			osDelay(10);
 80061d0:	200a      	movs	r0, #10
 80061d2:	f006 ff27 	bl	800d024 <osDelay>
			break;
 80061d6:	e0d4      	b.n	8006382 <StartDetectionTask+0x2da>

		case INITPASSSTATE:
			osDelay(100);
 80061d8:	2064      	movs	r0, #100	; 0x64
 80061da:	f006 ff23 	bl	800d024 <osDelay>

			break;
 80061de:	e0d0      	b.n	8006382 <StartDetectionTask+0x2da>
//			Init_DoubleChannel_FDC2212();
//			osDelay(100);
//			init_Calibration_Value(0);
//			osDelay(100);
//			DetectionTask_STATE = INITPASSSTATE;
			init_Calibration_Value(1);
 80061e0:	2001      	movs	r0, #1
 80061e2:	f7ff fe9d 	bl	8005f20 <init_Calibration_Value>
			osDelay(200);
 80061e6:	20c8      	movs	r0, #200	; 0xc8
 80061e8:	f006 ff1c 	bl	800d024 <osDelay>
			DetectionTask_STATE = 71;
 80061ec:	4b6d      	ldr	r3, [pc, #436]	; (80063a4 <StartDetectionTask+0x2fc>)
 80061ee:	2247      	movs	r2, #71	; 0x47
 80061f0:	701a      	strb	r2, [r3, #0]
			break;
 80061f2:	e0c6      	b.n	8006382 <StartDetectionTask+0x2da>

		case 71:
//			Cap_Value_Calibrated[0] = get_Calibrated_Value(0);
//			printf("%.2f\n",Cap_Value_Calibrated[0]);
//			osDelay(10);
			Cap_Value_Calibrated[1] = get_Calibrated_Value(1);
 80061f4:	2001      	movs	r0, #1
 80061f6:	f7ff ff01 	bl	8005ffc <get_Calibrated_Value>
 80061fa:	eef0 7a40 	vmov.f32	s15, s0
 80061fe:	4b6c      	ldr	r3, [pc, #432]	; (80063b0 <StartDetectionTask+0x308>)
 8006200:	edc3 7a01 	vstr	s15, [r3, #4]
			printf("%.2f\r\n",Cap_Value_Calibrated[1]);
 8006204:	4b6a      	ldr	r3, [pc, #424]	; (80063b0 <StartDetectionTask+0x308>)
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	4618      	mov	r0, r3
 800620a:	f7fa f99d 	bl	8000548 <__aeabi_f2d>
 800620e:	4602      	mov	r2, r0
 8006210:	460b      	mov	r3, r1
 8006212:	4868      	ldr	r0, [pc, #416]	; (80063b4 <StartDetectionTask+0x30c>)
 8006214:	f00a f9da 	bl	80105cc <iprintf>
			osDelay(200);
 8006218:	20c8      	movs	r0, #200	; 0xc8
 800621a:	f006 ff03 	bl	800d024 <osDelay>

			if(KEY2_Pressed()){
 800621e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006222:	4865      	ldr	r0, [pc, #404]	; (80063b8 <StartDetectionTask+0x310>)
 8006224:	f002 f8aa 	bl	800837c <HAL_GPIO_ReadPin>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	f040 80a8 	bne.w	8006380 <StartDetectionTask+0x2d8>
				DetectionTask_STATE = INITPASSSTATE;
 8006230:	4b5c      	ldr	r3, [pc, #368]	; (80063a4 <StartDetectionTask+0x2fc>)
 8006232:	2263      	movs	r2, #99	; 0x63
 8006234:	701a      	strb	r2, [r3, #0]
			}
			break;
 8006236:	e0a3      	b.n	8006380 <StartDetectionTask+0x2d8>

		case Cap0_Sample_State:
			Cap_Value_Calibrated[0] = get_Calibrated_Value(0);
 8006238:	2000      	movs	r0, #0
 800623a:	f7ff fedf 	bl	8005ffc <get_Calibrated_Value>
 800623e:	eef0 7a40 	vmov.f32	s15, s0
 8006242:	4b5b      	ldr	r3, [pc, #364]	; (80063b0 <StartDetectionTask+0x308>)
 8006244:	edc3 7a00 	vstr	s15, [r3]
			if (Cap_Value_Calibrated[0] < 0.05){
 8006248:	4b59      	ldr	r3, [pc, #356]	; (80063b0 <StartDetectionTask+0x308>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4618      	mov	r0, r3
 800624e:	f7fa f97b 	bl	8000548 <__aeabi_f2d>
 8006252:	a34d      	add	r3, pc, #308	; (adr r3, 8006388 <StartDetectionTask+0x2e0>)
 8006254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006258:	f7fa fc40 	bl	8000adc <__aeabi_dcmplt>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00c      	beq.n	800627c <StartDetectionTask+0x1d4>
				Motor3_Nreset_direction;
 8006262:	2201      	movs	r2, #1
 8006264:	2102      	movs	r1, #2
 8006266:	4855      	ldr	r0, [pc, #340]	; (80063bc <StartDetectionTask+0x314>)
 8006268:	f002 f8a0 	bl	80083ac <HAL_GPIO_WritePin>
				Motor[3].StepperSpeedTMR = 33 ;
 800626c:	4b4f      	ldr	r3, [pc, #316]	; (80063ac <StartDetectionTask+0x304>)
 800626e:	2221      	movs	r2, #33	; 0x21
 8006270:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
				Follow_state = 1;
 8006274:	4b52      	ldr	r3, [pc, #328]	; (80063c0 <StartDetectionTask+0x318>)
 8006276:	2201      	movs	r2, #1
 8006278:	701a      	strb	r2, [r3, #0]
				Motor3_reset_direction;
				Motor[3].StepperSpeedTMR = 200 - 100*(Cap_Value_Calibrated[0]-0.4) ;
				Follow_state = 3;
			}
			//osDelay(1000);
			break;
 800627a:	e082      	b.n	8006382 <StartDetectionTask+0x2da>
			else if ( (Cap_Value_Calibrated[0] > 0.05) && (Cap_Value_Calibrated[0] <= 0.15) ){
 800627c:	4b4c      	ldr	r3, [pc, #304]	; (80063b0 <StartDetectionTask+0x308>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4618      	mov	r0, r3
 8006282:	f7fa f961 	bl	8000548 <__aeabi_f2d>
 8006286:	a340      	add	r3, pc, #256	; (adr r3, 8006388 <StartDetectionTask+0x2e0>)
 8006288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628c:	f7fa fc44 	bl	8000b18 <__aeabi_dcmpgt>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d019      	beq.n	80062ca <StartDetectionTask+0x222>
 8006296:	4b46      	ldr	r3, [pc, #280]	; (80063b0 <StartDetectionTask+0x308>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4618      	mov	r0, r3
 800629c:	f7fa f954 	bl	8000548 <__aeabi_f2d>
 80062a0:	a33b      	add	r3, pc, #236	; (adr r3, 8006390 <StartDetectionTask+0x2e8>)
 80062a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a6:	f7fa fc23 	bl	8000af0 <__aeabi_dcmple>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00c      	beq.n	80062ca <StartDetectionTask+0x222>
				Motor3_Nreset_direction;
 80062b0:	2201      	movs	r2, #1
 80062b2:	2102      	movs	r1, #2
 80062b4:	4841      	ldr	r0, [pc, #260]	; (80063bc <StartDetectionTask+0x314>)
 80062b6:	f002 f879 	bl	80083ac <HAL_GPIO_WritePin>
				Motor[3].StepperSpeedTMR = 200 ;
 80062ba:	4b3c      	ldr	r3, [pc, #240]	; (80063ac <StartDetectionTask+0x304>)
 80062bc:	22c8      	movs	r2, #200	; 0xc8
 80062be:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
				Follow_state = 1;
 80062c2:	4b3f      	ldr	r3, [pc, #252]	; (80063c0 <StartDetectionTask+0x318>)
 80062c4:	2201      	movs	r2, #1
 80062c6:	701a      	strb	r2, [r3, #0]
 80062c8:	e04a      	b.n	8006360 <StartDetectionTask+0x2b8>
			else if ( (Cap_Value_Calibrated[0] > 0.15) && (Cap_Value_Calibrated[0] <= 0.4) ){
 80062ca:	4b39      	ldr	r3, [pc, #228]	; (80063b0 <StartDetectionTask+0x308>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7fa f93a 	bl	8000548 <__aeabi_f2d>
 80062d4:	a32e      	add	r3, pc, #184	; (adr r3, 8006390 <StartDetectionTask+0x2e8>)
 80062d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062da:	f7fa fc1d 	bl	8000b18 <__aeabi_dcmpgt>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d010      	beq.n	8006306 <StartDetectionTask+0x25e>
 80062e4:	4b32      	ldr	r3, [pc, #200]	; (80063b0 <StartDetectionTask+0x308>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7fa f92d 	bl	8000548 <__aeabi_f2d>
 80062ee:	a32a      	add	r3, pc, #168	; (adr r3, 8006398 <StartDetectionTask+0x2f0>)
 80062f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f4:	f7fa fbfc 	bl	8000af0 <__aeabi_dcmple>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <StartDetectionTask+0x25e>
				Follow_state = 2;
 80062fe:	4b30      	ldr	r3, [pc, #192]	; (80063c0 <StartDetectionTask+0x318>)
 8006300:	2202      	movs	r2, #2
 8006302:	701a      	strb	r2, [r3, #0]
 8006304:	e02c      	b.n	8006360 <StartDetectionTask+0x2b8>
				Motor3_reset_direction;
 8006306:	2200      	movs	r2, #0
 8006308:	2102      	movs	r1, #2
 800630a:	482c      	ldr	r0, [pc, #176]	; (80063bc <StartDetectionTask+0x314>)
 800630c:	f002 f84e 	bl	80083ac <HAL_GPIO_WritePin>
				Motor[3].StepperSpeedTMR = 200 - 100*(Cap_Value_Calibrated[0]-0.4) ;
 8006310:	4b27      	ldr	r3, [pc, #156]	; (80063b0 <StartDetectionTask+0x308>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4618      	mov	r0, r3
 8006316:	f7fa f917 	bl	8000548 <__aeabi_f2d>
 800631a:	a31f      	add	r3, pc, #124	; (adr r3, 8006398 <StartDetectionTask+0x2f0>)
 800631c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006320:	f7f9 ffb2 	bl	8000288 <__aeabi_dsub>
 8006324:	4602      	mov	r2, r0
 8006326:	460b      	mov	r3, r1
 8006328:	4610      	mov	r0, r2
 800632a:	4619      	mov	r1, r3
 800632c:	f04f 0200 	mov.w	r2, #0
 8006330:	4b24      	ldr	r3, [pc, #144]	; (80063c4 <StartDetectionTask+0x31c>)
 8006332:	f7fa f961 	bl	80005f8 <__aeabi_dmul>
 8006336:	4602      	mov	r2, r0
 8006338:	460b      	mov	r3, r1
 800633a:	f04f 0000 	mov.w	r0, #0
 800633e:	4922      	ldr	r1, [pc, #136]	; (80063c8 <StartDetectionTask+0x320>)
 8006340:	f7f9 ffa2 	bl	8000288 <__aeabi_dsub>
 8006344:	4602      	mov	r2, r0
 8006346:	460b      	mov	r3, r1
 8006348:	4610      	mov	r0, r2
 800634a:	4619      	mov	r1, r3
 800634c:	f7fa fc2c 	bl	8000ba8 <__aeabi_d2uiz>
 8006350:	4603      	mov	r3, r0
 8006352:	4a16      	ldr	r2, [pc, #88]	; (80063ac <StartDetectionTask+0x304>)
 8006354:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
				Follow_state = 3;
 8006358:	4b19      	ldr	r3, [pc, #100]	; (80063c0 <StartDetectionTask+0x318>)
 800635a:	2203      	movs	r2, #3
 800635c:	701a      	strb	r2, [r3, #0]
			break;
 800635e:	e010      	b.n	8006382 <StartDetectionTask+0x2da>
 8006360:	e00f      	b.n	8006382 <StartDetectionTask+0x2da>

		case INITFAILSTATE:
			printf("[WRONG]init_Calibration_Value FAILED,reCalibrating...\r\n");
 8006362:	481a      	ldr	r0, [pc, #104]	; (80063cc <StartDetectionTask+0x324>)
 8006364:	f00a f9b8 	bl	80106d8 <puts>
			osDelay(5000);
 8006368:	f241 3088 	movw	r0, #5000	; 0x1388
 800636c:	f006 fe5a 	bl	800d024 <osDelay>
			DetectionTask_STATE = init_Calibration_Value(0);
 8006370:	2000      	movs	r0, #0
 8006372:	f7ff fdd5 	bl	8005f20 <init_Calibration_Value>
 8006376:	4603      	mov	r3, r0
 8006378:	461a      	mov	r2, r3
 800637a:	4b0a      	ldr	r3, [pc, #40]	; (80063a4 <StartDetectionTask+0x2fc>)
 800637c:	701a      	strb	r2, [r3, #0]
 800637e:	e6af      	b.n	80060e0 <StartDetectionTask+0x38>
			break;
 8006380:	bf00      	nop
		osDelay(1);
 8006382:	e6ad      	b.n	80060e0 <StartDetectionTask+0x38>
 8006384:	f3af 8000 	nop.w
 8006388:	9999999a 	.word	0x9999999a
 800638c:	3fa99999 	.word	0x3fa99999
 8006390:	33333333 	.word	0x33333333
 8006394:	3fc33333 	.word	0x3fc33333
 8006398:	9999999a 	.word	0x9999999a
 800639c:	3fd99999 	.word	0x3fd99999
 80063a0:	08012c8c 	.word	0x08012c8c
 80063a4:	20000c71 	.word	0x20000c71
 80063a8:	20000ce4 	.word	0x20000ce4
 80063ac:	200008b0 	.word	0x200008b0
 80063b0:	20000c74 	.word	0x20000c74
 80063b4:	08012ca4 	.word	0x08012ca4
 80063b8:	40021800 	.word	0x40021800
 80063bc:	40021000 	.word	0x40021000
 80063c0:	20000c70 	.word	0x20000c70
 80063c4:	40590000 	.word	0x40590000
 80063c8:	40690000 	.word	0x40690000
 80063cc:	08012cac 	.word	0x08012cac

080063d0 <deal_buffer_motorCtrl_data>:

#ifndef DushuModule
struct MotorDefine Motor_Temp ;

void deal_buffer_motorCtrl_data(struct MotorDefine *a)
{
 80063d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063d4:	b08a      	sub	sp, #40	; 0x28
 80063d6:	af08      	add	r7, sp, #32
 80063d8:	6078      	str	r0, [r7, #4]
	a->MotorNumber = USART5_RX_BUF[1];
 80063da:	4b44      	ldr	r3, [pc, #272]	; (80064ec <deal_buffer_motorCtrl_data+0x11c>)
 80063dc:	785a      	ldrb	r2, [r3, #1]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f883 2020 	strb.w	r2, [r3, #32]

	if ( USART5_RX_BUF[3] & 0b10000000 )  // 0x80
 80063e4:	4b41      	ldr	r3, [pc, #260]	; (80064ec <deal_buffer_motorCtrl_data+0x11c>)
 80063e6:	78db      	ldrb	r3, [r3, #3]
 80063e8:	b25b      	sxtb	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	da04      	bge.n	80063f8 <deal_buffer_motorCtrl_data+0x28>
	{
		a->MotorDirection = 1 ;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80063f6:	e009      	b.n	800640c <deal_buffer_motorCtrl_data+0x3c>
	}
	else if (USART5_RX_BUF[3] & 0b01000000)	// 0x40
 80063f8:	4b3c      	ldr	r3, [pc, #240]	; (80064ec <deal_buffer_motorCtrl_data+0x11c>)
 80063fa:	78db      	ldrb	r3, [r3, #3]
 80063fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006400:	2b00      	cmp	r3, #0
 8006402:	d003      	beq.n	800640c <deal_buffer_motorCtrl_data+0x3c>
	{
		a->MotorDirection = 0 ;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	//a->DesiredSpeedInRads =  (float)USART5_RX_BUF[4] / 10;
	a->DesiredSpeedInRads =  (float)USART5_RX_BUF[4] ;
 800640c:	4b37      	ldr	r3, [pc, #220]	; (80064ec <deal_buffer_motorCtrl_data+0x11c>)
 800640e:	791b      	ldrb	r3, [r3, #4]
 8006410:	ee07 3a90 	vmov	s15, r3
 8006414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	edc3 7a05 	vstr	s15, [r3, #20]
	a->NumberofRads = (float)USART5_RX_BUF[5] + (float)USART5_RX_BUF[6] / 100 ;
 800641e:	4b33      	ldr	r3, [pc, #204]	; (80064ec <deal_buffer_motorCtrl_data+0x11c>)
 8006420:	795b      	ldrb	r3, [r3, #5]
 8006422:	ee07 3a90 	vmov	s15, r3
 8006426:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800642a:	4b30      	ldr	r3, [pc, #192]	; (80064ec <deal_buffer_motorCtrl_data+0x11c>)
 800642c:	799b      	ldrb	r3, [r3, #6]
 800642e:	ee07 3a90 	vmov	s15, r3
 8006432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006436:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 80064f0 <deal_buffer_motorCtrl_data+0x120>
 800643a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800643e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	//a->StartupSpeedInRads = (float)USART5_RX_BUF[7] / 10 ;
	a->StartupSpeedInRads =  (float)USART5_RX_BUF[7] ;
 8006448:	4b28      	ldr	r3, [pc, #160]	; (80064ec <deal_buffer_motorCtrl_data+0x11c>)
 800644a:	79db      	ldrb	r3, [r3, #7]
 800644c:	ee07 3a90 	vmov	s15, r3
 8006450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	edc3 7a04 	vstr	s15, [r3, #16]
	a->accelerationRate = USART5_RX_BUF[8] * 100 ;
 800645a:	4b24      	ldr	r3, [pc, #144]	; (80064ec <deal_buffer_motorCtrl_data+0x11c>)
 800645c:	7a1b      	ldrb	r3, [r3, #8]
 800645e:	461a      	mov	r2, r3
 8006460:	2364      	movs	r3, #100	; 0x64
 8006462:	fb02 f303 	mul.w	r3, r2, r3
 8006466:	461a      	mov	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	619a      	str	r2, [r3, #24]
	a->decelerationRate = USART5_RX_BUF[9] * 100 ;
 800646c:	4b1f      	ldr	r3, [pc, #124]	; (80064ec <deal_buffer_motorCtrl_data+0x11c>)
 800646e:	7a5b      	ldrb	r3, [r3, #9]
 8006470:	461a      	mov	r2, r3
 8006472:	2364      	movs	r3, #100	; 0x64
 8006474:	fb02 f303 	mul.w	r3, r2, r3
 8006478:	461a      	mov	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	61da      	str	r2, [r3, #28]

	printf("\r\nInput Information:\r\n");
 800647e:	481d      	ldr	r0, [pc, #116]	; (80064f4 <deal_buffer_motorCtrl_data+0x124>)
 8006480:	f00a f92a 	bl	80106d8 <puts>
	printf("  MotorNumber:%d  MotorDirection:%d\r\n  DesiredSpeedInRads:%.2f\r\n  NumberofRads:%.2f\r\n  StartupSpeedInRads:%.2f\r\n  accelerationRate:%ld /Hz\r\n  decelerationRate:%ld /Hz\r\n"
	,a->MotorNumber,a->MotorDirection,a->DesiredSpeedInRads,a->NumberofRads,a->StartupSpeedInRads,a->accelerationRate,a->decelerationRate);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 3020 	ldrb.w	r3, [r3, #32]
	printf("  MotorNumber:%d  MotorDirection:%d\r\n  DesiredSpeedInRads:%.2f\r\n  NumberofRads:%.2f\r\n  StartupSpeedInRads:%.2f\r\n  accelerationRate:%ld /Hz\r\n  decelerationRate:%ld /Hz\r\n"
 800648a:	461e      	mov	r6, r3
	,a->MotorNumber,a->MotorDirection,a->DesiredSpeedInRads,a->NumberofRads,a->StartupSpeedInRads,a->accelerationRate,a->decelerationRate);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
	printf("  MotorNumber:%d  MotorDirection:%d\r\n  DesiredSpeedInRads:%.2f\r\n  NumberofRads:%.2f\r\n  StartupSpeedInRads:%.2f\r\n  accelerationRate:%ld /Hz\r\n  decelerationRate:%ld /Hz\r\n"
 8006492:	469a      	mov	sl, r3
	,a->MotorNumber,a->MotorDirection,a->DesiredSpeedInRads,a->NumberofRads,a->StartupSpeedInRads,a->accelerationRate,a->decelerationRate);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	695b      	ldr	r3, [r3, #20]
	printf("  MotorNumber:%d  MotorDirection:%d\r\n  DesiredSpeedInRads:%.2f\r\n  NumberofRads:%.2f\r\n  StartupSpeedInRads:%.2f\r\n  accelerationRate:%ld /Hz\r\n  decelerationRate:%ld /Hz\r\n"
 8006498:	4618      	mov	r0, r3
 800649a:	f7fa f855 	bl	8000548 <__aeabi_f2d>
 800649e:	4604      	mov	r4, r0
 80064a0:	460d      	mov	r5, r1
	,a->MotorNumber,a->MotorDirection,a->DesiredSpeedInRads,a->NumberofRads,a->StartupSpeedInRads,a->accelerationRate,a->decelerationRate);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	printf("  MotorNumber:%d  MotorDirection:%d\r\n  DesiredSpeedInRads:%.2f\r\n  NumberofRads:%.2f\r\n  StartupSpeedInRads:%.2f\r\n  accelerationRate:%ld /Hz\r\n  decelerationRate:%ld /Hz\r\n"
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fa f84e 	bl	8000548 <__aeabi_f2d>
 80064ac:	4680      	mov	r8, r0
 80064ae:	4689      	mov	r9, r1
	,a->MotorNumber,a->MotorDirection,a->DesiredSpeedInRads,a->NumberofRads,a->StartupSpeedInRads,a->accelerationRate,a->decelerationRate);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	691b      	ldr	r3, [r3, #16]
	printf("  MotorNumber:%d  MotorDirection:%d\r\n  DesiredSpeedInRads:%.2f\r\n  NumberofRads:%.2f\r\n  StartupSpeedInRads:%.2f\r\n  accelerationRate:%ld /Hz\r\n  decelerationRate:%ld /Hz\r\n"
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7fa f847 	bl	8000548 <__aeabi_f2d>
 80064ba:	4602      	mov	r2, r0
 80064bc:	460b      	mov	r3, r1
 80064be:	6879      	ldr	r1, [r7, #4]
 80064c0:	6989      	ldr	r1, [r1, #24]
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	69c0      	ldr	r0, [r0, #28]
 80064c6:	9007      	str	r0, [sp, #28]
 80064c8:	9106      	str	r1, [sp, #24]
 80064ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80064ce:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80064d2:	e9cd 4500 	strd	r4, r5, [sp]
 80064d6:	4652      	mov	r2, sl
 80064d8:	4631      	mov	r1, r6
 80064da:	4807      	ldr	r0, [pc, #28]	; (80064f8 <deal_buffer_motorCtrl_data+0x128>)
 80064dc:	f00a f876 	bl	80105cc <iprintf>
}
 80064e0:	bf00      	nop
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ea:	bf00      	nop
 80064ec:	20000738 	.word	0x20000738
 80064f0:	42c80000 	.word	0x42c80000
 80064f4:	08012ce4 	.word	0x08012ce4
 80064f8:	08012cfc 	.word	0x08012cfc

080064fc <deal_buffer_motorCtrl_position>:


void deal_buffer_motorCtrl_position(struct MotorDefine *a)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
	a->MotorNumber = USART5_RX_BUF[1];
 8006504:	4b1b      	ldr	r3, [pc, #108]	; (8006574 <deal_buffer_motorCtrl_position+0x78>)
 8006506:	785a      	ldrb	r2, [r3, #1]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f883 2020 	strb.w	r2, [r3, #32]
	if ( USART5_RX_BUF[4] == 1){
 800650e:	4b19      	ldr	r3, [pc, #100]	; (8006574 <deal_buffer_motorCtrl_position+0x78>)
 8006510:	791b      	ldrb	r3, [r3, #4]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d10d      	bne.n	8006532 <deal_buffer_motorCtrl_position+0x36>
		a->TargetPosition = USART5_RX_BUF[7] + USART5_RX_BUF[6] * 16*16 + USART5_RX_BUF[5] * 16*16*16*16 ;
 8006516:	4b17      	ldr	r3, [pc, #92]	; (8006574 <deal_buffer_motorCtrl_position+0x78>)
 8006518:	79db      	ldrb	r3, [r3, #7]
 800651a:	461a      	mov	r2, r3
 800651c:	4b15      	ldr	r3, [pc, #84]	; (8006574 <deal_buffer_motorCtrl_position+0x78>)
 800651e:	799b      	ldrb	r3, [r3, #6]
 8006520:	021b      	lsls	r3, r3, #8
 8006522:	441a      	add	r2, r3
 8006524:	4b13      	ldr	r3, [pc, #76]	; (8006574 <deal_buffer_motorCtrl_position+0x78>)
 8006526:	795b      	ldrb	r3, [r3, #5]
 8006528:	041b      	lsls	r3, r3, #16
 800652a:	441a      	add	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006530:	e011      	b.n	8006556 <deal_buffer_motorCtrl_position+0x5a>
	}
	else if ( USART5_RX_BUF[4] == 0){
 8006532:	4b10      	ldr	r3, [pc, #64]	; (8006574 <deal_buffer_motorCtrl_position+0x78>)
 8006534:	791b      	ldrb	r3, [r3, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10d      	bne.n	8006556 <deal_buffer_motorCtrl_position+0x5a>
		a->TargetPosition = - (USART5_RX_BUF[7] + USART5_RX_BUF[6] * 16*16 + USART5_RX_BUF[5] * 16*16*16*16) ;
 800653a:	4b0e      	ldr	r3, [pc, #56]	; (8006574 <deal_buffer_motorCtrl_position+0x78>)
 800653c:	79db      	ldrb	r3, [r3, #7]
 800653e:	461a      	mov	r2, r3
 8006540:	4b0c      	ldr	r3, [pc, #48]	; (8006574 <deal_buffer_motorCtrl_position+0x78>)
 8006542:	799b      	ldrb	r3, [r3, #6]
 8006544:	021b      	lsls	r3, r3, #8
 8006546:	441a      	add	r2, r3
 8006548:	4b0a      	ldr	r3, [pc, #40]	; (8006574 <deal_buffer_motorCtrl_position+0x78>)
 800654a:	795b      	ldrb	r3, [r3, #5]
 800654c:	041b      	lsls	r3, r3, #16
 800654e:	4413      	add	r3, r2
 8006550:	425a      	negs	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	printf("\r\nInput Information: Motor%d goes to TargetPosition:%ld\r\n",a->MotorNumber,a->TargetPosition);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 3020 	ldrb.w	r3, [r3, #32]
 800655c:	4619      	mov	r1, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006562:	461a      	mov	r2, r3
 8006564:	4804      	ldr	r0, [pc, #16]	; (8006578 <deal_buffer_motorCtrl_position+0x7c>)
 8006566:	f00a f831 	bl	80105cc <iprintf>
}
 800656a:	bf00      	nop
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	20000738 	.word	0x20000738
 8006578:	08012da8 	.word	0x08012da8

0800657c <deal_buffer_motorCtrl_reset>:

void deal_buffer_motorCtrl_reset(struct MotorDefine *a)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
	a->MotorNumber = USART5_RX_BUF[1];
 8006584:	4b07      	ldr	r3, [pc, #28]	; (80065a4 <deal_buffer_motorCtrl_reset+0x28>)
 8006586:	785a      	ldrb	r2, [r3, #1]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f883 2020 	strb.w	r2, [r3, #32]

	printf("\r\nInput Information: Reset Motor%d\r\n",a->MotorNumber);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006594:	4619      	mov	r1, r3
 8006596:	4804      	ldr	r0, [pc, #16]	; (80065a8 <deal_buffer_motorCtrl_reset+0x2c>)
 8006598:	f00a f818 	bl	80105cc <iprintf>
}
 800659c:	bf00      	nop
 800659e:	3708      	adds	r7, #8
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	20000738 	.word	0x20000738
 80065a8:	08012de4 	.word	0x08012de4

080065ac <deal_buffer_DCmotorCtrl>:

void deal_buffer_DCmotorCtrl(struct MotorDefine *a)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
	a->MotorNumber = USART5_RX_BUF[1];
 80065b4:	4b11      	ldr	r3, [pc, #68]	; (80065fc <deal_buffer_DCmotorCtrl+0x50>)
 80065b6:	785a      	ldrb	r2, [r3, #1]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f883 2020 	strb.w	r2, [r3, #32]
	a->NumberofSteps_StopAccel = USART5_RX_BUF[6];
 80065be:	4b0f      	ldr	r3, [pc, #60]	; (80065fc <deal_buffer_DCmotorCtrl+0x50>)
 80065c0:	799b      	ldrb	r3, [r3, #6]
 80065c2:	461a      	mov	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	651a      	str	r2, [r3, #80]	; 0x50
	if (USART5_RX_BUF[4] == 0x00 ){
 80065c8:	4b0c      	ldr	r3, [pc, #48]	; (80065fc <deal_buffer_DCmotorCtrl+0x50>)
 80065ca:	791b      	ldrb	r3, [r3, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d107      	bne.n	80065e0 <deal_buffer_DCmotorCtrl+0x34>
		printf("\r\nInput Information: DC Motor%d STOP! \r\n",a->MotorNumber);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065d6:	4619      	mov	r1, r3
 80065d8:	4809      	ldr	r0, [pc, #36]	; (8006600 <deal_buffer_DCmotorCtrl+0x54>)
 80065da:	f009 fff7 	bl	80105cc <iprintf>
	}
	else{
		printf("\r\nInput Information: DC Motor%d Run,Duty Cycle: %ld percent\r\n",a->MotorNumber,a->NumberofSteps_StopAccel);
	}
}
 80065de:	e009      	b.n	80065f4 <deal_buffer_DCmotorCtrl+0x48>
		printf("\r\nInput Information: DC Motor%d Run,Duty Cycle: %ld percent\r\n",a->MotorNumber,a->NumberofSteps_StopAccel);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065e6:	4619      	mov	r1, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ec:	461a      	mov	r2, r3
 80065ee:	4805      	ldr	r0, [pc, #20]	; (8006604 <deal_buffer_DCmotorCtrl+0x58>)
 80065f0:	f009 ffec 	bl	80105cc <iprintf>
}
 80065f4:	bf00      	nop
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	20000738 	.word	0x20000738
 8006600:	08012e0c 	.word	0x08012e0c
 8006604:	08012e38 	.word	0x08012e38

08006608 <StartmessageTask>:

void StartmessageTask(void *argument)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
	osDelay(20);
 8006610:	2014      	movs	r0, #20
 8006612:	f006 fd07 	bl	800d024 <osDelay>
	uint8_t len = 0;
 8006616:	2300      	movs	r3, #0
 8006618:	73fb      	strb	r3, [r7, #15]
	printf("messageTask starts! \r\n");
 800661a:	4849      	ldr	r0, [pc, #292]	; (8006740 <StartmessageTask+0x138>)
 800661c:	f00a f85c 	bl	80106d8 <puts>

	for(;;){
		osDelay(1);
 8006620:	2001      	movs	r0, #1
 8006622:	f006 fcff 	bl	800d024 <osDelay>
	    if(USART_RX_STA&0x8000)
 8006626:	4b47      	ldr	r3, [pc, #284]	; (8006744 <StartmessageTask+0x13c>)
 8006628:	881b      	ldrh	r3, [r3, #0]
 800662a:	b21b      	sxth	r3, r3
 800662c:	2b00      	cmp	r3, #0
 800662e:	f280 8084 	bge.w	800673a <StartmessageTask+0x132>
		{
	    	len=USART_RX_STA&0x3fff;
 8006632:	4b44      	ldr	r3, [pc, #272]	; (8006744 <StartmessageTask+0x13c>)
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	73fb      	strb	r3, [r7, #15]

			switch ( USART5_RX_BUF[2] )
 8006638:	4b43      	ldr	r3, [pc, #268]	; (8006748 <StartmessageTask+0x140>)
 800663a:	789b      	ldrb	r3, [r3, #2]
 800663c:	2b80      	cmp	r3, #128	; 0x80
 800663e:	d00e      	beq.n	800665e <StartmessageTask+0x56>
 8006640:	2b80      	cmp	r3, #128	; 0x80
 8006642:	dced      	bgt.n	8006620 <StartmessageTask+0x18>
 8006644:	2b40      	cmp	r3, #64	; 0x40
 8006646:	d01d      	beq.n	8006684 <StartmessageTask+0x7c>
 8006648:	2b40      	cmp	r3, #64	; 0x40
 800664a:	dce9      	bgt.n	8006620 <StartmessageTask+0x18>
 800664c:	2b20      	cmp	r3, #32
 800664e:	d023      	beq.n	8006698 <StartmessageTask+0x90>
 8006650:	2b20      	cmp	r3, #32
 8006652:	dce5      	bgt.n	8006620 <StartmessageTask+0x18>
 8006654:	2b01      	cmp	r3, #1
 8006656:	d05d      	beq.n	8006714 <StartmessageTask+0x10c>
 8006658:	2b10      	cmp	r3, #16
 800665a:	d027      	beq.n	80066ac <StartmessageTask+0xa4>
 800665c:	e06e      	b.n	800673c <StartmessageTask+0x134>
			{
			/***   电机控制-位置模式 ，16进制0x80  ***/
			case 0b10000000:
				deal_buffer_motorCtrl_position(&Motor_Temp);
 800665e:	483b      	ldr	r0, [pc, #236]	; (800674c <StartmessageTask+0x144>)
 8006660:	f7ff ff4c 	bl	80064fc <deal_buffer_motorCtrl_position>
				if (USART5_RX_BUF[3] & 0b00000001){			// 不带编码器模式
 8006664:	4b38      	ldr	r3, [pc, #224]	; (8006748 <StartmessageTask+0x140>)
 8006666:	78db      	ldrb	r3, [r3, #3]
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	2b00      	cmp	r3, #0
 800666e:	d005      	beq.n	800667c <StartmessageTask+0x74>
					MotorMove_position(&Motor_Temp,Motor_Temp.TargetPosition);
 8006670:	4b36      	ldr	r3, [pc, #216]	; (800674c <StartmessageTask+0x144>)
 8006672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006674:	4619      	mov	r1, r3
 8006676:	4835      	ldr	r0, [pc, #212]	; (800674c <StartmessageTask+0x144>)
 8006678:	f7fe f9a0 	bl	80049bc <MotorMove_position>
#ifdef JiaYangZhen_EncoderMode
				else if (USART5_RX_BUF[3] & 0b00000010){	// 带编码器模式
					MotorMove_position_Enocder(&Motor_Temp,Motor_Temp.TargetPosition);
				}
#endif
				USART_RX_STA=0;
 800667c:	4b31      	ldr	r3, [pc, #196]	; (8006744 <StartmessageTask+0x13c>)
 800667e:	2200      	movs	r2, #0
 8006680:	801a      	strh	r2, [r3, #0]
			break;
 8006682:	e05b      	b.n	800673c <StartmessageTask+0x134>

			/***   电机控制-参数模式 ，16进制0x40  ***/
			case 0b01000000:
				deal_buffer_motorCtrl_data(&Motor_Temp);
 8006684:	4831      	ldr	r0, [pc, #196]	; (800674c <StartmessageTask+0x144>)
 8006686:	f7ff fea3 	bl	80063d0 <deal_buffer_motorCtrl_data>
				MotorMove_steps(&Motor_Temp);
 800668a:	4830      	ldr	r0, [pc, #192]	; (800674c <StartmessageTask+0x144>)
 800668c:	f7fd ffcc 	bl	8004628 <MotorMove_steps>
				USART_RX_STA=0;
 8006690:	4b2c      	ldr	r3, [pc, #176]	; (8006744 <StartmessageTask+0x13c>)
 8006692:	2200      	movs	r2, #0
 8006694:	801a      	strh	r2, [r3, #0]
			break;
 8006696:	e051      	b.n	800673c <StartmessageTask+0x134>

			/***   电机控制-复位 ，16进制0x20  ***/
			case 0b00100000:
				deal_buffer_motorCtrl_reset(&Motor_Temp);
 8006698:	482c      	ldr	r0, [pc, #176]	; (800674c <StartmessageTask+0x144>)
 800669a:	f7ff ff6f 	bl	800657c <deal_buffer_motorCtrl_reset>
				Motor_Reset(&Motor_Temp);
 800669e:	482b      	ldr	r0, [pc, #172]	; (800674c <StartmessageTask+0x144>)
 80066a0:	f7fe fe22 	bl	80052e8 <Motor_Reset>
				USART_RX_STA=0;
 80066a4:	4b27      	ldr	r3, [pc, #156]	; (8006744 <StartmessageTask+0x13c>)
 80066a6:	2200      	movs	r2, #0
 80066a8:	801a      	strh	r2, [r3, #0]
			break;
 80066aa:	e047      	b.n	800673c <StartmessageTask+0x134>

			/***   直流电机控制 0x10  ***/
			case 0b00010000:
				deal_buffer_DCmotorCtrl(&Motor_Temp);
 80066ac:	4827      	ldr	r0, [pc, #156]	; (800674c <StartmessageTask+0x144>)
 80066ae:	f7ff ff7d 	bl	80065ac <deal_buffer_DCmotorCtrl>
				if (USART5_RX_BUF[4] == 0x00 ){
 80066b2:	4b25      	ldr	r3, [pc, #148]	; (8006748 <StartmessageTask+0x140>)
 80066b4:	791b      	ldrb	r3, [r3, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d111      	bne.n	80066de <StartmessageTask+0xd6>
					if( USART5_RX_BUF[5] == 0x02 ){
 80066ba:	4b23      	ldr	r3, [pc, #140]	; (8006748 <StartmessageTask+0x140>)
 80066bc:	795b      	ldrb	r3, [r3, #5]
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d104      	bne.n	80066cc <StartmessageTask+0xc4>
						DC_Motor_OFF(&Motor_Temp,'A');
 80066c2:	2141      	movs	r1, #65	; 0x41
 80066c4:	4821      	ldr	r0, [pc, #132]	; (800674c <StartmessageTask+0x144>)
 80066c6:	f7ff fb79 	bl	8005dbc <DC_Motor_OFF>
 80066ca:	e01f      	b.n	800670c <StartmessageTask+0x104>
					}
					else if( USART5_RX_BUF[5] == 0x01 ){
 80066cc:	4b1e      	ldr	r3, [pc, #120]	; (8006748 <StartmessageTask+0x140>)
 80066ce:	795b      	ldrb	r3, [r3, #5]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d11b      	bne.n	800670c <StartmessageTask+0x104>
						DC_Motor_OFF(&Motor_Temp,'B');
 80066d4:	2142      	movs	r1, #66	; 0x42
 80066d6:	481d      	ldr	r0, [pc, #116]	; (800674c <StartmessageTask+0x144>)
 80066d8:	f7ff fb70 	bl	8005dbc <DC_Motor_OFF>
 80066dc:	e016      	b.n	800670c <StartmessageTask+0x104>
					}
				}
				else{
					if( USART5_RX_BUF[5] == 0x02 ){
 80066de:	4b1a      	ldr	r3, [pc, #104]	; (8006748 <StartmessageTask+0x140>)
 80066e0:	795b      	ldrb	r3, [r3, #5]
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d107      	bne.n	80066f6 <StartmessageTask+0xee>
						DC_Motor_ON(&Motor_Temp,'A',USART5_RX_BUF[6]);
 80066e6:	4b18      	ldr	r3, [pc, #96]	; (8006748 <StartmessageTask+0x140>)
 80066e8:	799b      	ldrb	r3, [r3, #6]
 80066ea:	461a      	mov	r2, r3
 80066ec:	2141      	movs	r1, #65	; 0x41
 80066ee:	4817      	ldr	r0, [pc, #92]	; (800674c <StartmessageTask+0x144>)
 80066f0:	f7ff fa92 	bl	8005c18 <DC_Motor_ON>
 80066f4:	e00a      	b.n	800670c <StartmessageTask+0x104>
					}
					else if( USART5_RX_BUF[5] == 0x01 ){
 80066f6:	4b14      	ldr	r3, [pc, #80]	; (8006748 <StartmessageTask+0x140>)
 80066f8:	795b      	ldrb	r3, [r3, #5]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d106      	bne.n	800670c <StartmessageTask+0x104>
						DC_Motor_ON(&Motor_Temp,'B',USART5_RX_BUF[6]);
 80066fe:	4b12      	ldr	r3, [pc, #72]	; (8006748 <StartmessageTask+0x140>)
 8006700:	799b      	ldrb	r3, [r3, #6]
 8006702:	461a      	mov	r2, r3
 8006704:	2142      	movs	r1, #66	; 0x42
 8006706:	4811      	ldr	r0, [pc, #68]	; (800674c <StartmessageTask+0x144>)
 8006708:	f7ff fa86 	bl	8005c18 <DC_Motor_ON>
					}
				}
				USART_RX_STA=0;
 800670c:	4b0d      	ldr	r3, [pc, #52]	; (8006744 <StartmessageTask+0x13c>)
 800670e:	2200      	movs	r2, #0
 8006710:	801a      	strh	r2, [r3, #0]
			break;
 8006712:	e013      	b.n	800673c <StartmessageTask+0x134>

			/***   打印回传接收到的协议数据  0x01  ***/
			case 0b00000001:
				HAL_UART_Transmit_IT(&huart5, USART5_RX_BUF,len);
 8006714:	7bfb      	ldrb	r3, [r7, #15]
 8006716:	b29b      	uxth	r3, r3
 8006718:	461a      	mov	r2, r3
 800671a:	490b      	ldr	r1, [pc, #44]	; (8006748 <StartmessageTask+0x140>)
 800671c:	480c      	ldr	r0, [pc, #48]	; (8006750 <StartmessageTask+0x148>)
 800671e:	f005 fb84 	bl	800be2a <HAL_UART_Transmit_IT>
				while(__HAL_UART_GET_FLAG(&huart5,UART_FLAG_TC)!=SET);
 8006722:	bf00      	nop
 8006724:	4b0a      	ldr	r3, [pc, #40]	; (8006750 <StartmessageTask+0x148>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672e:	2b40      	cmp	r3, #64	; 0x40
 8006730:	d1f8      	bne.n	8006724 <StartmessageTask+0x11c>
				USART_RX_STA=0;
 8006732:	4b04      	ldr	r3, [pc, #16]	; (8006744 <StartmessageTask+0x13c>)
 8006734:	2200      	movs	r2, #0
 8006736:	801a      	strh	r2, [r3, #0]
			break;
 8006738:	e000      	b.n	800673c <StartmessageTask+0x134>

			}
		}
 800673a:	bf00      	nop
		osDelay(1);
 800673c:	e770      	b.n	8006620 <StartmessageTask+0x18>
 800673e:	bf00      	nop
 8006740:	08012e78 	.word	0x08012e78
 8006744:	2000079c 	.word	0x2000079c
 8006748:	20000738 	.word	0x20000738
 800674c:	20000c84 	.word	0x20000c84
 8006750:	200007e4 	.word	0x200007e4

08006754 <StartTask03>:
		}
	}
}
#else
void StartTask03(void *argument)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
	osDelay(10);
 800675c:	200a      	movs	r0, #10
 800675e:	f006 fc61 	bl	800d024 <osDelay>
	printf("myTask03 starts! \r\n");
 8006762:	48dc      	ldr	r0, [pc, #880]	; (8006ad4 <StartTask03+0x380>)
 8006764:	f009 ffb8 	bl	80106d8 <puts>

	Motor_Data_Init();
 8006768:	f7fd fada 	bl	8003d20 <Motor_Data_Init>
	osDelay(100);
 800676c:	2064      	movs	r0, #100	; 0x64
 800676e:	f006 fc59 	bl	800d024 <osDelay>
//		myTask03_Status = INITPASSSTATE;
//	}
//	else{
//		myTask03_Status = INITFAILSTATE;
//	}
	Motor1_Enable();
 8006772:	2200      	movs	r2, #0
 8006774:	2110      	movs	r1, #16
 8006776:	48d8      	ldr	r0, [pc, #864]	; (8006ad8 <StartTask03+0x384>)
 8006778:	f001 fe18 	bl	80083ac <HAL_GPIO_WritePin>
	Motor2_Enable();
 800677c:	2200      	movs	r2, #0
 800677e:	2180      	movs	r1, #128	; 0x80
 8006780:	48d5      	ldr	r0, [pc, #852]	; (8006ad8 <StartTask03+0x384>)
 8006782:	f001 fe13 	bl	80083ac <HAL_GPIO_WritePin>
	Motor3_Enable();
 8006786:	2200      	movs	r2, #0
 8006788:	2101      	movs	r1, #1
 800678a:	48d4      	ldr	r0, [pc, #848]	; (8006adc <StartTask03+0x388>)
 800678c:	f001 fe0e 	bl	80083ac <HAL_GPIO_WritePin>
	myTask03_Status = INITPASSSTATE;
 8006790:	4bd3      	ldr	r3, [pc, #844]	; (8006ae0 <StartTask03+0x38c>)
 8006792:	2263      	movs	r2, #99	; 0x63
 8006794:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		osDelay(1);
 8006796:	2001      	movs	r0, #1
 8006798:	f006 fc44 	bl	800d024 <osDelay>
		switch (myTask03_Status)
 800679c:	4bd0      	ldr	r3, [pc, #832]	; (8006ae0 <StartTask03+0x38c>)
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	3b0a      	subs	r3, #10
 80067a2:	2b71      	cmp	r3, #113	; 0x71
 80067a4:	d8f7      	bhi.n	8006796 <StartTask03+0x42>
 80067a6:	a201      	add	r2, pc, #4	; (adr r2, 80067ac <StartTask03+0x58>)
 80067a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ac:	08006a65 	.word	0x08006a65
 80067b0:	08006a8d 	.word	0x08006a8d
 80067b4:	08006acf 	.word	0x08006acf
 80067b8:	08006b35 	.word	0x08006b35
 80067bc:	08006b7d 	.word	0x08006b7d
 80067c0:	08006b9f 	.word	0x08006b9f
 80067c4:	08006bc1 	.word	0x08006bc1
 80067c8:	08006be7 	.word	0x08006be7
 80067cc:	08006797 	.word	0x08006797
 80067d0:	08006797 	.word	0x08006797
 80067d4:	08006d4d 	.word	0x08006d4d
 80067d8:	08006797 	.word	0x08006797
 80067dc:	08006797 	.word	0x08006797
 80067e0:	08006797 	.word	0x08006797
 80067e4:	08006797 	.word	0x08006797
 80067e8:	08006797 	.word	0x08006797
 80067ec:	08006797 	.word	0x08006797
 80067f0:	08006797 	.word	0x08006797
 80067f4:	08006797 	.word	0x08006797
 80067f8:	08006797 	.word	0x08006797
 80067fc:	08006d61 	.word	0x08006d61
 8006800:	08006797 	.word	0x08006797
 8006804:	08006797 	.word	0x08006797
 8006808:	08006797 	.word	0x08006797
 800680c:	08006797 	.word	0x08006797
 8006810:	08006797 	.word	0x08006797
 8006814:	08006797 	.word	0x08006797
 8006818:	08006797 	.word	0x08006797
 800681c:	08006797 	.word	0x08006797
 8006820:	08006797 	.word	0x08006797
 8006824:	08006797 	.word	0x08006797
 8006828:	08006797 	.word	0x08006797
 800682c:	08006797 	.word	0x08006797
 8006830:	08006797 	.word	0x08006797
 8006834:	08006797 	.word	0x08006797
 8006838:	08006797 	.word	0x08006797
 800683c:	08006797 	.word	0x08006797
 8006840:	08006797 	.word	0x08006797
 8006844:	08006797 	.word	0x08006797
 8006848:	08006797 	.word	0x08006797
 800684c:	08006797 	.word	0x08006797
 8006850:	08006797 	.word	0x08006797
 8006854:	08006797 	.word	0x08006797
 8006858:	08006797 	.word	0x08006797
 800685c:	08006797 	.word	0x08006797
 8006860:	08006797 	.word	0x08006797
 8006864:	08006797 	.word	0x08006797
 8006868:	08006797 	.word	0x08006797
 800686c:	08006797 	.word	0x08006797
 8006870:	08006797 	.word	0x08006797
 8006874:	08006797 	.word	0x08006797
 8006878:	08006797 	.word	0x08006797
 800687c:	08006797 	.word	0x08006797
 8006880:	08006797 	.word	0x08006797
 8006884:	08006797 	.word	0x08006797
 8006888:	08006797 	.word	0x08006797
 800688c:	08006797 	.word	0x08006797
 8006890:	08006797 	.word	0x08006797
 8006894:	08006797 	.word	0x08006797
 8006898:	08006797 	.word	0x08006797
 800689c:	08006797 	.word	0x08006797
 80068a0:	08006797 	.word	0x08006797
 80068a4:	08006797 	.word	0x08006797
 80068a8:	08006797 	.word	0x08006797
 80068ac:	08006797 	.word	0x08006797
 80068b0:	08006797 	.word	0x08006797
 80068b4:	08006797 	.word	0x08006797
 80068b8:	08006797 	.word	0x08006797
 80068bc:	08006797 	.word	0x08006797
 80068c0:	08006797 	.word	0x08006797
 80068c4:	08006797 	.word	0x08006797
 80068c8:	08006797 	.word	0x08006797
 80068cc:	08006797 	.word	0x08006797
 80068d0:	08006797 	.word	0x08006797
 80068d4:	08006797 	.word	0x08006797
 80068d8:	08006797 	.word	0x08006797
 80068dc:	08006797 	.word	0x08006797
 80068e0:	08006797 	.word	0x08006797
 80068e4:	08006797 	.word	0x08006797
 80068e8:	08006797 	.word	0x08006797
 80068ec:	08006797 	.word	0x08006797
 80068f0:	08006797 	.word	0x08006797
 80068f4:	08006797 	.word	0x08006797
 80068f8:	08006797 	.word	0x08006797
 80068fc:	08006797 	.word	0x08006797
 8006900:	08006797 	.word	0x08006797
 8006904:	08006797 	.word	0x08006797
 8006908:	08006797 	.word	0x08006797
 800690c:	08006797 	.word	0x08006797
 8006910:	08006975 	.word	0x08006975
 8006914:	08006d8b 	.word	0x08006d8b
 8006918:	08006797 	.word	0x08006797
 800691c:	08006797 	.word	0x08006797
 8006920:	08006797 	.word	0x08006797
 8006924:	08006797 	.word	0x08006797
 8006928:	08006797 	.word	0x08006797
 800692c:	08006797 	.word	0x08006797
 8006930:	08006797 	.word	0x08006797
 8006934:	08006797 	.word	0x08006797
 8006938:	08006797 	.word	0x08006797
 800693c:	08006797 	.word	0x08006797
 8006940:	08006797 	.word	0x08006797
 8006944:	08006797 	.word	0x08006797
 8006948:	08006797 	.word	0x08006797
 800694c:	08006797 	.word	0x08006797
 8006950:	08006797 	.word	0x08006797
 8006954:	08006797 	.word	0x08006797
 8006958:	08006797 	.word	0x08006797
 800695c:	08006c09 	.word	0x08006c09
 8006960:	08006c35 	.word	0x08006c35
 8006964:	08006c57 	.word	0x08006c57
 8006968:	08006cc7 	.word	0x08006cc7
 800696c:	08006d19 	.word	0x08006d19
 8006970:	08006d2b 	.word	0x08006d2b
		{
		case INITPASSSTATE:
			osDelay(10);
 8006974:	200a      	movs	r0, #10
 8006976:	f006 fb55 	bl	800d024 <osDelay>
			if(KEY0_Pressed())
 800697a:	2140      	movs	r1, #64	; 0x40
 800697c:	4859      	ldr	r0, [pc, #356]	; (8006ae4 <StartTask03+0x390>)
 800697e:	f001 fcfd 	bl	800837c <HAL_GPIO_ReadPin>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d11d      	bne.n	80069c4 <StartTask03+0x270>
			{
				osDelay(20);
 8006988:	2014      	movs	r0, #20
 800698a:	f006 fb4b 	bl	800d024 <osDelay>
				if(KEY0_Pressed())
 800698e:	2140      	movs	r1, #64	; 0x40
 8006990:	4854      	ldr	r0, [pc, #336]	; (8006ae4 <StartTask03+0x390>)
 8006992:	f001 fcf3 	bl	800837c <HAL_GPIO_ReadPin>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d113      	bne.n	80069c4 <StartTask03+0x270>
				{
					osDelay(20);
 800699c:	2014      	movs	r0, #20
 800699e:	f006 fb41 	bl	800d024 <osDelay>
					while (KEY0_Pressed()){osDelay(1);}
 80069a2:	e002      	b.n	80069aa <StartTask03+0x256>
 80069a4:	2001      	movs	r0, #1
 80069a6:	f006 fb3d 	bl	800d024 <osDelay>
 80069aa:	2140      	movs	r1, #64	; 0x40
 80069ac:	484d      	ldr	r0, [pc, #308]	; (8006ae4 <StartTask03+0x390>)
 80069ae:	f001 fce5 	bl	800837c <HAL_GPIO_ReadPin>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d0f5      	beq.n	80069a4 <StartTask03+0x250>
					myTask03_Status = 10;
 80069b8:	4b49      	ldr	r3, [pc, #292]	; (8006ae0 <StartTask03+0x38c>)
 80069ba:	220a      	movs	r2, #10
 80069bc:	701a      	strb	r2, [r3, #0]
					printf("Key0 pressed!\r\n");
 80069be:	484a      	ldr	r0, [pc, #296]	; (8006ae8 <StartTask03+0x394>)
 80069c0:	f009 fe8a 	bl	80106d8 <puts>
				}
			}
			if(KEY1_Pressed())
 80069c4:	2180      	movs	r1, #128	; 0x80
 80069c6:	4847      	ldr	r0, [pc, #284]	; (8006ae4 <StartTask03+0x390>)
 80069c8:	f001 fcd8 	bl	800837c <HAL_GPIO_ReadPin>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d11d      	bne.n	8006a0e <StartTask03+0x2ba>
			{
				osDelay(20);
 80069d2:	2014      	movs	r0, #20
 80069d4:	f006 fb26 	bl	800d024 <osDelay>
				if(KEY1_Pressed())
 80069d8:	2180      	movs	r1, #128	; 0x80
 80069da:	4842      	ldr	r0, [pc, #264]	; (8006ae4 <StartTask03+0x390>)
 80069dc:	f001 fcce 	bl	800837c <HAL_GPIO_ReadPin>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d113      	bne.n	8006a0e <StartTask03+0x2ba>
				{
					osDelay(20);
 80069e6:	2014      	movs	r0, #20
 80069e8:	f006 fb1c 	bl	800d024 <osDelay>
					while (KEY1_Pressed()){osDelay(1);}
 80069ec:	e002      	b.n	80069f4 <StartTask03+0x2a0>
 80069ee:	2001      	movs	r0, #1
 80069f0:	f006 fb18 	bl	800d024 <osDelay>
 80069f4:	2180      	movs	r1, #128	; 0x80
 80069f6:	483b      	ldr	r0, [pc, #236]	; (8006ae4 <StartTask03+0x390>)
 80069f8:	f001 fcc0 	bl	800837c <HAL_GPIO_ReadPin>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d0f5      	beq.n	80069ee <StartTask03+0x29a>
					myTask03_Status = 20;
 8006a02:	4b37      	ldr	r3, [pc, #220]	; (8006ae0 <StartTask03+0x38c>)
 8006a04:	2214      	movs	r2, #20
 8006a06:	701a      	strb	r2, [r3, #0]
					printf("Key1 pressed!\r\n");
 8006a08:	4838      	ldr	r0, [pc, #224]	; (8006aec <StartTask03+0x398>)
 8006a0a:	f009 fe65 	bl	80106d8 <puts>
				}
			}
			if(KEY2_Pressed())
 8006a0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a12:	4834      	ldr	r0, [pc, #208]	; (8006ae4 <StartTask03+0x390>)
 8006a14:	f001 fcb2 	bl	800837c <HAL_GPIO_ReadPin>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f040 81bd 	bne.w	8006d9a <StartTask03+0x646>
			{
				osDelay(20);
 8006a20:	2014      	movs	r0, #20
 8006a22:	f006 faff 	bl	800d024 <osDelay>
				if(KEY2_Pressed())
 8006a26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a2a:	482e      	ldr	r0, [pc, #184]	; (8006ae4 <StartTask03+0x390>)
 8006a2c:	f001 fca6 	bl	800837c <HAL_GPIO_ReadPin>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f040 81b1 	bne.w	8006d9a <StartTask03+0x646>
				{
					osDelay(20);
 8006a38:	2014      	movs	r0, #20
 8006a3a:	f006 faf3 	bl	800d024 <osDelay>
					while (KEY2_Pressed()){osDelay(1);}
 8006a3e:	e002      	b.n	8006a46 <StartTask03+0x2f2>
 8006a40:	2001      	movs	r0, #1
 8006a42:	f006 faef 	bl	800d024 <osDelay>
 8006a46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a4a:	4826      	ldr	r0, [pc, #152]	; (8006ae4 <StartTask03+0x390>)
 8006a4c:	f001 fc96 	bl	800837c <HAL_GPIO_ReadPin>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d0f4      	beq.n	8006a40 <StartTask03+0x2ec>
					myTask03_Status = 30;
 8006a56:	4b22      	ldr	r3, [pc, #136]	; (8006ae0 <StartTask03+0x38c>)
 8006a58:	221e      	movs	r2, #30
 8006a5a:	701a      	strb	r2, [r3, #0]
					printf("Key2 pressed!\r\n");
 8006a5c:	4824      	ldr	r0, [pc, #144]	; (8006af0 <StartTask03+0x39c>)
 8006a5e:	f009 fe3b 	bl	80106d8 <puts>
				}
			}
			break;
 8006a62:	e19a      	b.n	8006d9a <StartTask03+0x646>

		case 10:
			if (Motor[2].Status == 0){
 8006a64:	4b23      	ldr	r3, [pc, #140]	; (8006af4 <StartTask03+0x3a0>)
 8006a66:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10a      	bne.n	8006a84 <StartTask03+0x330>
				MotorMove_position(&Motor[2],82*16);	//1312试剂盒位置
 8006a6e:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8006a72:	4821      	ldr	r0, [pc, #132]	; (8006af8 <StartTask03+0x3a4>)
 8006a74:	f7fd ffa2 	bl	80049bc <MotorMove_position>
				Motor4_SuckInMode(10);
 8006a78:	200a      	movs	r0, #10
 8006a7a:	f7ff f835 	bl	8005ae8 <Motor4_SuckInMode>
				myTask03_Status = 11;
 8006a7e:	4b18      	ldr	r3, [pc, #96]	; (8006ae0 <StartTask03+0x38c>)
 8006a80:	220b      	movs	r2, #11
 8006a82:	701a      	strb	r2, [r3, #0]
			}
			osDelay(10);
 8006a84:	200a      	movs	r0, #10
 8006a86:	f006 facd 	bl	800d024 <osDelay>
			break;
 8006a8a:	e187      	b.n	8006d9c <StartTask03+0x648>

		case 11:
			if ( (Motor[2].Status == 0) && (Motor[4].Status == 0) ){
 8006a8c:	4b19      	ldr	r3, [pc, #100]	; (8006af4 <StartTask03+0x3a0>)
 8006a8e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d117      	bne.n	8006ac6 <StartTask03+0x372>
 8006a96:	4b17      	ldr	r3, [pc, #92]	; (8006af4 <StartTask03+0x3a0>)
 8006a98:	f893 31b0 	ldrb.w	r3, [r3, #432]	; 0x1b0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d112      	bne.n	8006ac6 <StartTask03+0x372>
				DetectionTask_STATE = Cap0_Sample_State;
 8006aa0:	4b16      	ldr	r3, [pc, #88]	; (8006afc <StartTask03+0x3a8>)
 8006aa2:	226f      	movs	r2, #111	; 0x6f
 8006aa4:	701a      	strb	r2, [r3, #0]
				//使用IO液面检测模块
//				Follow_state = 1;
//				Motor3_Nreset_direction;
				printf("---Enter Liquid following mode---\r\n");
 8006aa6:	4816      	ldr	r0, [pc, #88]	; (8006b00 <StartTask03+0x3ac>)
 8006aa8:	f009 fe16 	bl	80106d8 <puts>
				Motor[3].Status = 1;
 8006aac:	4b11      	ldr	r3, [pc, #68]	; (8006af4 <StartTask03+0x3a0>)
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
				HAL_TIM_Base_Start_IT(Motor[3].htim_x);
 8006ab4:	4b0f      	ldr	r3, [pc, #60]	; (8006af4 <StartTask03+0x3a0>)
 8006ab6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006aba:	4618      	mov	r0, r3
 8006abc:	f004 fbd0 	bl	800b260 <HAL_TIM_Base_Start_IT>
				myTask03_Status = 12;
 8006ac0:	4b07      	ldr	r3, [pc, #28]	; (8006ae0 <StartTask03+0x38c>)
 8006ac2:	220c      	movs	r2, #12
 8006ac4:	701a      	strb	r2, [r3, #0]
			}
			osDelay(10);
 8006ac6:	200a      	movs	r0, #10
 8006ac8:	f006 faac 	bl	800d024 <osDelay>
			break;
 8006acc:	e166      	b.n	8006d9c <StartTask03+0x648>

		case 12:
			for (uint32_t t=1 ; Follow_state == 2 ; t++ ){
 8006ace:	2301      	movs	r3, #1
 8006ad0:	60fb      	str	r3, [r7, #12]
 8006ad2:	e027      	b.n	8006b24 <StartTask03+0x3d0>
 8006ad4:	08012e90 	.word	0x08012e90
 8006ad8:	40020400 	.word	0x40020400
 8006adc:	40021000 	.word	0x40021000
 8006ae0:	20000ce4 	.word	0x20000ce4
 8006ae4:	40021800 	.word	0x40021800
 8006ae8:	08012ea4 	.word	0x08012ea4
 8006aec:	08012eb4 	.word	0x08012eb4
 8006af0:	08012ec4 	.word	0x08012ec4
 8006af4:	200008b0 	.word	0x200008b0
 8006af8:	20000970 	.word	0x20000970
 8006afc:	20000c71 	.word	0x20000c71
 8006b00:	08012ed4 	.word	0x08012ed4
				osDelay(1);
 8006b04:	2001      	movs	r0, #1
 8006b06:	f006 fa8d 	bl	800d024 <osDelay>
				if(t > 50){
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2b32      	cmp	r3, #50	; 0x32
 8006b0e:	d906      	bls.n	8006b1e <StartTask03+0x3ca>
					Motor4_SuckInMode(230);
 8006b10:	20e6      	movs	r0, #230	; 0xe6
 8006b12:	f7fe ffe9 	bl	8005ae8 <Motor4_SuckInMode>
					myTask03_Status = 13;
 8006b16:	4ba2      	ldr	r3, [pc, #648]	; (8006da0 <StartTask03+0x64c>)
 8006b18:	220d      	movs	r2, #13
 8006b1a:	701a      	strb	r2, [r3, #0]
					break;
 8006b1c:	e006      	b.n	8006b2c <StartTask03+0x3d8>
			for (uint32_t t=1 ; Follow_state == 2 ; t++ ){
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	3301      	adds	r3, #1
 8006b22:	60fb      	str	r3, [r7, #12]
 8006b24:	4b9f      	ldr	r3, [pc, #636]	; (8006da4 <StartTask03+0x650>)
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d0eb      	beq.n	8006b04 <StartTask03+0x3b0>
//			if (Motor[3].Status == 0){
//				DetectionTask_STATE = INITPASSSTATE;
//				Motor4_SuckInMode(200);
//				myTask03_Status = 13;
//			}
			osDelay(10);
 8006b2c:	200a      	movs	r0, #10
 8006b2e:	f006 fa79 	bl	800d024 <osDelay>
			break;
 8006b32:	e133      	b.n	8006d9c <StartTask03+0x648>

		case 13:
			if (Motor[4].Status == 0){
 8006b34:	4b9c      	ldr	r3, [pc, #624]	; (8006da8 <StartTask03+0x654>)
 8006b36:	f893 31b0 	ldrb.w	r3, [r3, #432]	; 0x1b0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d11a      	bne.n	8006b74 <StartTask03+0x420>
				HAL_TIM_Base_Stop_IT(Motor[3].htim_x);
 8006b3e:	4b9a      	ldr	r3, [pc, #616]	; (8006da8 <StartTask03+0x654>)
 8006b40:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006b44:	4618      	mov	r0, r3
 8006b46:	f004 fbfb 	bl	800b340 <HAL_TIM_Base_Stop_IT>
				Motor[3].Status = 0;
 8006b4a:	4b97      	ldr	r3, [pc, #604]	; (8006da8 <StartTask03+0x654>)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
				DetectionTask_STATE = INITPASSSTATE;
 8006b52:	4b96      	ldr	r3, [pc, #600]	; (8006dac <StartTask03+0x658>)
 8006b54:	2263      	movs	r2, #99	; 0x63
 8006b56:	701a      	strb	r2, [r3, #0]
				printf("---Close Liquid following mode---\r\n");
 8006b58:	4895      	ldr	r0, [pc, #596]	; (8006db0 <StartTask03+0x65c>)
 8006b5a:	f009 fdbd 	bl	80106d8 <puts>
				osDelay(200);
 8006b5e:	20c8      	movs	r0, #200	; 0xc8
 8006b60:	f006 fa60 	bl	800d024 <osDelay>
				MotorMove_position(&Motor[3],-40);
 8006b64:	f06f 0127 	mvn.w	r1, #39	; 0x27
 8006b68:	4892      	ldr	r0, [pc, #584]	; (8006db4 <StartTask03+0x660>)
 8006b6a:	f7fd ff27 	bl	80049bc <MotorMove_position>
				myTask03_Status = 14;
 8006b6e:	4b8c      	ldr	r3, [pc, #560]	; (8006da0 <StartTask03+0x64c>)
 8006b70:	220e      	movs	r2, #14
 8006b72:	701a      	strb	r2, [r3, #0]
			}
			osDelay(10);
 8006b74:	200a      	movs	r0, #10
 8006b76:	f006 fa55 	bl	800d024 <osDelay>
			break;
 8006b7a:	e10f      	b.n	8006d9c <StartTask03+0x648>

		case 14:
			if (Motor[3].Status == 0){
 8006b7c:	4b8a      	ldr	r3, [pc, #552]	; (8006da8 <StartTask03+0x654>)
 8006b7e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d107      	bne.n	8006b96 <StartTask03+0x442>
				MotorMove_position(&Motor[2],134*16); 	// 2144第一个反应杯位置
 8006b86:	f44f 6106 	mov.w	r1, #2144	; 0x860
 8006b8a:	488b      	ldr	r0, [pc, #556]	; (8006db8 <StartTask03+0x664>)
 8006b8c:	f7fd ff16 	bl	80049bc <MotorMove_position>
				myTask03_Status = 15;
 8006b90:	4b83      	ldr	r3, [pc, #524]	; (8006da0 <StartTask03+0x64c>)
 8006b92:	220f      	movs	r2, #15
 8006b94:	701a      	strb	r2, [r3, #0]
			}
			osDelay(10);
 8006b96:	200a      	movs	r0, #10
 8006b98:	f006 fa44 	bl	800d024 <osDelay>
			break;
 8006b9c:	e0fe      	b.n	8006d9c <StartTask03+0x648>

		case 15:
			if (Motor[2].Status == 0){
 8006b9e:	4b82      	ldr	r3, [pc, #520]	; (8006da8 <StartTask03+0x654>)
 8006ba0:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d107      	bne.n	8006bb8 <StartTask03+0x464>
				MotorMove_position(&Motor[3],144*16);
 8006ba8:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8006bac:	4881      	ldr	r0, [pc, #516]	; (8006db4 <StartTask03+0x660>)
 8006bae:	f7fd ff05 	bl	80049bc <MotorMove_position>
				myTask03_Status = 16;
 8006bb2:	4b7b      	ldr	r3, [pc, #492]	; (8006da0 <StartTask03+0x64c>)
 8006bb4:	2210      	movs	r2, #16
 8006bb6:	701a      	strb	r2, [r3, #0]
			}
			osDelay(10);
 8006bb8:	200a      	movs	r0, #10
 8006bba:	f006 fa33 	bl	800d024 <osDelay>
			break;
 8006bbe:	e0ed      	b.n	8006d9c <StartTask03+0x648>

		case 16:
			if (Motor[3].Status == 0){
 8006bc0:	4b79      	ldr	r3, [pc, #484]	; (8006da8 <StartTask03+0x654>)
 8006bc2:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d109      	bne.n	8006bde <StartTask03+0x48a>
				Motor4_PushOutMode(230);
 8006bca:	20e6      	movs	r0, #230	; 0xe6
 8006bcc:	f7fe ffdc 	bl	8005b88 <Motor4_PushOutMode>
				osDelay(2000);
 8006bd0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006bd4:	f006 fa26 	bl	800d024 <osDelay>
				myTask03_Status = 17;
 8006bd8:	4b71      	ldr	r3, [pc, #452]	; (8006da0 <StartTask03+0x64c>)
 8006bda:	2211      	movs	r2, #17
 8006bdc:	701a      	strb	r2, [r3, #0]
			}
			osDelay(10);
 8006bde:	200a      	movs	r0, #10
 8006be0:	f006 fa20 	bl	800d024 <osDelay>
			break;
 8006be4:	e0da      	b.n	8006d9c <StartTask03+0x648>

		case 17:
			if (Motor[3].Status == 0){
 8006be6:	4b70      	ldr	r3, [pc, #448]	; (8006da8 <StartTask03+0x654>)
 8006be8:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d107      	bne.n	8006c00 <StartTask03+0x4ac>
				MotorMove_position(&Motor[3],-40);
 8006bf0:	f06f 0127 	mvn.w	r1, #39	; 0x27
 8006bf4:	486f      	ldr	r0, [pc, #444]	; (8006db4 <StartTask03+0x660>)
 8006bf6:	f7fd fee1 	bl	80049bc <MotorMove_position>
				myTask03_Status = 118;
 8006bfa:	4b69      	ldr	r3, [pc, #420]	; (8006da0 <StartTask03+0x64c>)
 8006bfc:	2276      	movs	r2, #118	; 0x76
 8006bfe:	701a      	strb	r2, [r3, #0]
			}
			osDelay(10);
 8006c00:	200a      	movs	r0, #10
 8006c02:	f006 fa0f 	bl	800d024 <osDelay>
			break;
 8006c06:	e0c9      	b.n	8006d9c <StartTask03+0x648>

		case 118:
			if ( (Motor[3].Status == 0) && (Motor[2].Status == 0) ){
 8006c08:	4b67      	ldr	r3, [pc, #412]	; (8006da8 <StartTask03+0x654>)
 8006c0a:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10c      	bne.n	8006c2c <StartTask03+0x4d8>
 8006c12:	4b65      	ldr	r3, [pc, #404]	; (8006da8 <StartTask03+0x654>)
 8006c14:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d107      	bne.n	8006c2c <StartTask03+0x4d8>
				MotorMove_position(&Motor[2],478*16);   // 清洗柱位置
 8006c1c:	f44f 51ef 	mov.w	r1, #7648	; 0x1de0
 8006c20:	4865      	ldr	r0, [pc, #404]	; (8006db8 <StartTask03+0x664>)
 8006c22:	f7fd fecb 	bl	80049bc <MotorMove_position>
				myTask03_Status = 119;
 8006c26:	4b5e      	ldr	r3, [pc, #376]	; (8006da0 <StartTask03+0x64c>)
 8006c28:	2277      	movs	r2, #119	; 0x77
 8006c2a:	701a      	strb	r2, [r3, #0]
			}
			osDelay(10);
 8006c2c:	200a      	movs	r0, #10
 8006c2e:	f006 f9f9 	bl	800d024 <osDelay>
			break;
 8006c32:	e0b3      	b.n	8006d9c <StartTask03+0x648>

		case 119:
			if ( Motor[2].Status == 0 ){
 8006c34:	4b5c      	ldr	r3, [pc, #368]	; (8006da8 <StartTask03+0x654>)
 8006c36:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d107      	bne.n	8006c4e <StartTask03+0x4fa>
				MotorMove_position(&Motor[3],331*16);
 8006c3e:	f241 41b0 	movw	r1, #5296	; 0x14b0
 8006c42:	485c      	ldr	r0, [pc, #368]	; (8006db4 <StartTask03+0x660>)
 8006c44:	f7fd feba 	bl	80049bc <MotorMove_position>
				myTask03_Status = 120;
 8006c48:	4b55      	ldr	r3, [pc, #340]	; (8006da0 <StartTask03+0x64c>)
 8006c4a:	2278      	movs	r2, #120	; 0x78
 8006c4c:	701a      	strb	r2, [r3, #0]
			}
			osDelay(10);
 8006c4e:	200a      	movs	r0, #10
 8006c50:	f006 f9e8 	bl	800d024 <osDelay>
			break;
 8006c54:	e0a2      	b.n	8006d9c <StartTask03+0x648>

		case 120:
			if ( Motor[3].Status == 0 ){
 8006c56:	4b54      	ldr	r3, [pc, #336]	; (8006da8 <StartTask03+0x654>)
 8006c58:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d12e      	bne.n	8006cbe <StartTask03+0x56a>
				OUT1_ON();	// 加样针外壁清洗排除液体电磁阀
 8006c60:	2201      	movs	r2, #1
 8006c62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006c66:	4855      	ldr	r0, [pc, #340]	; (8006dbc <StartTask03+0x668>)
 8006c68:	f001 fba0 	bl	80083ac <HAL_GPIO_WritePin>
				OUT2_ON();	// 加样针外壁清洗注入液体电磁阀
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c72:	4852      	ldr	r0, [pc, #328]	; (8006dbc <StartTask03+0x668>)
 8006c74:	f001 fb9a 	bl	80083ac <HAL_GPIO_WritePin>
				OUT5_ON();	// 柱塞泵加入液体电磁阀
 8006c78:	2201      	movs	r2, #1
 8006c7a:	2140      	movs	r1, #64	; 0x40
 8006c7c:	484f      	ldr	r0, [pc, #316]	; (8006dbc <StartTask03+0x668>)
 8006c7e:	f001 fb95 	bl	80083ac <HAL_GPIO_WritePin>
				osDelay(500);
 8006c82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006c86:	f006 f9cd 	bl	800d024 <osDelay>
				DC_Motor_ON(&Motor[7],'A',100);
 8006c8a:	2264      	movs	r2, #100	; 0x64
 8006c8c:	2141      	movs	r1, #65	; 0x41
 8006c8e:	484c      	ldr	r0, [pc, #304]	; (8006dc0 <StartTask03+0x66c>)
 8006c90:	f7fe ffc2 	bl	8005c18 <DC_Motor_ON>
				osDelay(1000);
 8006c94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c98:	f006 f9c4 	bl	800d024 <osDelay>
				DC_Motor_ON(&Motor[8],'A',30);
 8006c9c:	221e      	movs	r2, #30
 8006c9e:	2141      	movs	r1, #65	; 0x41
 8006ca0:	4848      	ldr	r0, [pc, #288]	; (8006dc4 <StartTask03+0x670>)
 8006ca2:	f7fe ffb9 	bl	8005c18 <DC_Motor_ON>
				DC_Motor_ON(&Motor[8],'B',30);
 8006ca6:	221e      	movs	r2, #30
 8006ca8:	2142      	movs	r1, #66	; 0x42
 8006caa:	4846      	ldr	r0, [pc, #280]	; (8006dc4 <StartTask03+0x670>)
 8006cac:	f7fe ffb4 	bl	8005c18 <DC_Motor_ON>
				osDelay(5000);
 8006cb0:	f241 3088 	movw	r0, #5000	; 0x1388
 8006cb4:	f006 f9b6 	bl	800d024 <osDelay>
				myTask03_Status = 121;
 8006cb8:	4b39      	ldr	r3, [pc, #228]	; (8006da0 <StartTask03+0x64c>)
 8006cba:	2279      	movs	r2, #121	; 0x79
 8006cbc:	701a      	strb	r2, [r3, #0]
			}
			osDelay(10);
 8006cbe:	200a      	movs	r0, #10
 8006cc0:	f006 f9b0 	bl	800d024 <osDelay>
			break;
 8006cc4:	e06a      	b.n	8006d9c <StartTask03+0x648>

		case 121:
			DC_Motor_OFF(&Motor[8],'A');
 8006cc6:	2141      	movs	r1, #65	; 0x41
 8006cc8:	483e      	ldr	r0, [pc, #248]	; (8006dc4 <StartTask03+0x670>)
 8006cca:	f7ff f877 	bl	8005dbc <DC_Motor_OFF>
			DC_Motor_OFF(&Motor[8],'B');
 8006cce:	2142      	movs	r1, #66	; 0x42
 8006cd0:	483c      	ldr	r0, [pc, #240]	; (8006dc4 <StartTask03+0x670>)
 8006cd2:	f7ff f873 	bl	8005dbc <DC_Motor_OFF>
			osDelay(2000);
 8006cd6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006cda:	f006 f9a3 	bl	800d024 <osDelay>
			DC_Motor_OFF(&Motor[7],'A');
 8006cde:	2141      	movs	r1, #65	; 0x41
 8006ce0:	4837      	ldr	r0, [pc, #220]	; (8006dc0 <StartTask03+0x66c>)
 8006ce2:	f7ff f86b 	bl	8005dbc <DC_Motor_OFF>
			osDelay(500);
 8006ce6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006cea:	f006 f99b 	bl	800d024 <osDelay>
			OUT1_OFF();
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006cf4:	4831      	ldr	r0, [pc, #196]	; (8006dbc <StartTask03+0x668>)
 8006cf6:	f001 fb59 	bl	80083ac <HAL_GPIO_WritePin>
			OUT2_OFF();
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d00:	482e      	ldr	r0, [pc, #184]	; (8006dbc <StartTask03+0x668>)
 8006d02:	f001 fb53 	bl	80083ac <HAL_GPIO_WritePin>
			OUT5_OFF();
 8006d06:	2200      	movs	r2, #0
 8006d08:	2140      	movs	r1, #64	; 0x40
 8006d0a:	482c      	ldr	r0, [pc, #176]	; (8006dbc <StartTask03+0x668>)
 8006d0c:	f001 fb4e 	bl	80083ac <HAL_GPIO_WritePin>
			myTask03_Status = 122;
 8006d10:	4b23      	ldr	r3, [pc, #140]	; (8006da0 <StartTask03+0x64c>)
 8006d12:	227a      	movs	r2, #122	; 0x7a
 8006d14:	701a      	strb	r2, [r3, #0]
			break;
 8006d16:	e041      	b.n	8006d9c <StartTask03+0x648>

		case 122:
			MotorMove_position(&Motor[3],-40);
 8006d18:	f06f 0127 	mvn.w	r1, #39	; 0x27
 8006d1c:	4825      	ldr	r0, [pc, #148]	; (8006db4 <StartTask03+0x660>)
 8006d1e:	f7fd fe4d 	bl	80049bc <MotorMove_position>
			myTask03_Status = 123;
 8006d22:	4b1f      	ldr	r3, [pc, #124]	; (8006da0 <StartTask03+0x64c>)
 8006d24:	227b      	movs	r2, #123	; 0x7b
 8006d26:	701a      	strb	r2, [r3, #0]
			break;
 8006d28:	e038      	b.n	8006d9c <StartTask03+0x648>

		case 123:
			if ( Motor[3].Status == 0 ){
 8006d2a:	4b1f      	ldr	r3, [pc, #124]	; (8006da8 <StartTask03+0x654>)
 8006d2c:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d107      	bne.n	8006d44 <StartTask03+0x5f0>
				MotorMove_position(&Motor[2],-40);	//待确认
 8006d34:	f06f 0127 	mvn.w	r1, #39	; 0x27
 8006d38:	481f      	ldr	r0, [pc, #124]	; (8006db8 <StartTask03+0x664>)
 8006d3a:	f7fd fe3f 	bl	80049bc <MotorMove_position>
				myTask03_Status = 10;
 8006d3e:	4b18      	ldr	r3, [pc, #96]	; (8006da0 <StartTask03+0x64c>)
 8006d40:	220a      	movs	r2, #10
 8006d42:	701a      	strb	r2, [r3, #0]
			}
			osDelay(10);
 8006d44:	200a      	movs	r0, #10
 8006d46:	f006 f96d 	bl	800d024 <osDelay>
			break;
 8006d4a:	e027      	b.n	8006d9c <StartTask03+0x648>



		case 20:
			DetectionTask_STATE = 70;
 8006d4c:	4b17      	ldr	r3, [pc, #92]	; (8006dac <StartTask03+0x658>)
 8006d4e:	2246      	movs	r2, #70	; 0x46
 8006d50:	701a      	strb	r2, [r3, #0]
			printf("---Capture Cap Value Begin---\r\n");
 8006d52:	481d      	ldr	r0, [pc, #116]	; (8006dc8 <StartTask03+0x674>)
 8006d54:	f009 fcc0 	bl	80106d8 <puts>
//			Motor[3].Status = 1;
//			HAL_TIM_Base_Start_IT(Motor[3].htim_x);
			myTask03_Status = INITPASSSTATE;
 8006d58:	4b11      	ldr	r3, [pc, #68]	; (8006da0 <StartTask03+0x64c>)
 8006d5a:	2263      	movs	r2, #99	; 0x63
 8006d5c:	701a      	strb	r2, [r3, #0]
			break;
 8006d5e:	e01d      	b.n	8006d9c <StartTask03+0x648>

		case 30:
			OUT1_ON();	// 加样针外壁清洗排除液体电磁阀
 8006d60:	2201      	movs	r2, #1
 8006d62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006d66:	4815      	ldr	r0, [pc, #84]	; (8006dbc <StartTask03+0x668>)
 8006d68:	f001 fb20 	bl	80083ac <HAL_GPIO_WritePin>
			OUT2_ON();	// 加样针外壁清洗注入液体电磁阀
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d72:	4812      	ldr	r0, [pc, #72]	; (8006dbc <StartTask03+0x668>)
 8006d74:	f001 fb1a 	bl	80083ac <HAL_GPIO_WritePin>
			OUT5_ON();	// 柱塞泵加入液体电磁阀
 8006d78:	2201      	movs	r2, #1
 8006d7a:	2140      	movs	r1, #64	; 0x40
 8006d7c:	480f      	ldr	r0, [pc, #60]	; (8006dbc <StartTask03+0x668>)
 8006d7e:	f001 fb15 	bl	80083ac <HAL_GPIO_WritePin>
//			HAL_TIM_Base_Stop_IT(Motor[3].htim_x);
//			Motor[3].Status = 0;
//			DetectionTask_STATE = INITPASSSTATE;
//			printf("---Checking following mode Over!---\r\n");
			myTask03_Status = INITPASSSTATE;
 8006d82:	4b07      	ldr	r3, [pc, #28]	; (8006da0 <StartTask03+0x64c>)
 8006d84:	2263      	movs	r2, #99	; 0x63
 8006d86:	701a      	strb	r2, [r3, #0]
			break;
 8006d88:	e008      	b.n	8006d9c <StartTask03+0x648>


		case INITFAILSTATE:
			printf("[WRONG]Motors Initialization FAILED!Please Check!\r\n");
 8006d8a:	4810      	ldr	r0, [pc, #64]	; (8006dcc <StartTask03+0x678>)
 8006d8c:	f009 fca4 	bl	80106d8 <puts>
			osDelay(10000);
 8006d90:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d94:	f006 f946 	bl	800d024 <osDelay>
			break;
 8006d98:	e000      	b.n	8006d9c <StartTask03+0x648>
			break;
 8006d9a:	bf00      	nop
		osDelay(1);
 8006d9c:	e4fb      	b.n	8006796 <StartTask03+0x42>
 8006d9e:	bf00      	nop
 8006da0:	20000ce4 	.word	0x20000ce4
 8006da4:	20000c70 	.word	0x20000c70
 8006da8:	200008b0 	.word	0x200008b0
 8006dac:	20000c71 	.word	0x20000c71
 8006db0:	08012ef8 	.word	0x08012ef8
 8006db4:	200009d0 	.word	0x200009d0
 8006db8:	20000970 	.word	0x20000970
 8006dbc:	40021400 	.word	0x40021400
 8006dc0:	20000b50 	.word	0x20000b50
 8006dc4:	20000bb0 	.word	0x20000bb0
 8006dc8:	08012f1c 	.word	0x08012f1c
 8006dcc:	08012f3c 	.word	0x08012f3c

08006dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006e08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006dd4:	480d      	ldr	r0, [pc, #52]	; (8006e0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006dd6:	490e      	ldr	r1, [pc, #56]	; (8006e10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006dd8:	4a0e      	ldr	r2, [pc, #56]	; (8006e14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006ddc:	e002      	b.n	8006de4 <LoopCopyDataInit>

08006dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006de2:	3304      	adds	r3, #4

08006de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006de8:	d3f9      	bcc.n	8006dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006dea:	4a0b      	ldr	r2, [pc, #44]	; (8006e18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006dec:	4c0b      	ldr	r4, [pc, #44]	; (8006e1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8006dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006df0:	e001      	b.n	8006df6 <LoopFillZerobss>

08006df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006df4:	3204      	adds	r2, #4

08006df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006df8:	d3fb      	bcc.n	8006df2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006dfa:	f7fc f83b 	bl	8002e74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006dfe:	f008 fea9 	bl	800fb54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006e02:	f7fa fecf 	bl	8001ba4 <main>
  bx  lr    
 8006e06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006e08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006e10:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8006e14:	08013424 	.word	0x08013424
  ldr r2, =_sbss
 8006e18:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8006e1c:	2000570c 	.word	0x2000570c

08006e20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006e20:	e7fe      	b.n	8006e20 <ADC_IRQHandler>
	...

08006e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006e28:	4b0e      	ldr	r3, [pc, #56]	; (8006e64 <HAL_Init+0x40>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a0d      	ldr	r2, [pc, #52]	; (8006e64 <HAL_Init+0x40>)
 8006e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006e34:	4b0b      	ldr	r3, [pc, #44]	; (8006e64 <HAL_Init+0x40>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a0a      	ldr	r2, [pc, #40]	; (8006e64 <HAL_Init+0x40>)
 8006e3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006e40:	4b08      	ldr	r3, [pc, #32]	; (8006e64 <HAL_Init+0x40>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a07      	ldr	r2, [pc, #28]	; (8006e64 <HAL_Init+0x40>)
 8006e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006e4c:	2003      	movs	r0, #3
 8006e4e:	f000 fc5a 	bl	8007706 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006e52:	2005      	movs	r0, #5
 8006e54:	f7fb fdfa 	bl	8002a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006e58:	f7fb fdcc 	bl	80029f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	40023c00 	.word	0x40023c00

08006e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006e6c:	4b06      	ldr	r3, [pc, #24]	; (8006e88 <HAL_IncTick+0x20>)
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	461a      	mov	r2, r3
 8006e72:	4b06      	ldr	r3, [pc, #24]	; (8006e8c <HAL_IncTick+0x24>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4413      	add	r3, r2
 8006e78:	4a04      	ldr	r2, [pc, #16]	; (8006e8c <HAL_IncTick+0x24>)
 8006e7a:	6013      	str	r3, [r2, #0]
}
 8006e7c:	bf00      	nop
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	20000010 	.word	0x20000010
 8006e8c:	20000ce8 	.word	0x20000ce8

08006e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006e90:	b480      	push	{r7}
 8006e92:	af00      	add	r7, sp, #0
  return uwTick;
 8006e94:	4b03      	ldr	r3, [pc, #12]	; (8006ea4 <HAL_GetTick+0x14>)
 8006e96:	681b      	ldr	r3, [r3, #0]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	20000ce8 	.word	0x20000ce8

08006ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006eb0:	f7ff ffee 	bl	8006e90 <HAL_GetTick>
 8006eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec0:	d005      	beq.n	8006ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006ec2:	4b0a      	ldr	r3, [pc, #40]	; (8006eec <HAL_Delay+0x44>)
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	4413      	add	r3, r2
 8006ecc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006ece:	bf00      	nop
 8006ed0:	f7ff ffde 	bl	8006e90 <HAL_GetTick>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d8f7      	bhi.n	8006ed0 <HAL_Delay+0x28>
  {
  }
}
 8006ee0:	bf00      	nop
 8006ee2:	bf00      	nop
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	20000010 	.word	0x20000010

08006ef0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e033      	b.n	8006f6e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d109      	bne.n	8006f22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7fa f8e0 	bl	80010d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f26:	f003 0310 	and.w	r3, r3, #16
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d118      	bne.n	8006f60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f32:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006f36:	f023 0302 	bic.w	r3, r3, #2
 8006f3a:	f043 0202 	orr.w	r2, r3, #2
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f93a 	bl	80071bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f52:	f023 0303 	bic.w	r3, r3, #3
 8006f56:	f043 0201 	orr.w	r2, r3, #1
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	641a      	str	r2, [r3, #64]	; 0x40
 8006f5e:	e001      	b.n	8006f64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
	...

08006f78 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006f82:	2300      	movs	r3, #0
 8006f84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d101      	bne.n	8006f94 <HAL_ADC_ConfigChannel+0x1c>
 8006f90:	2302      	movs	r3, #2
 8006f92:	e105      	b.n	80071a0 <HAL_ADC_ConfigChannel+0x228>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b09      	cmp	r3, #9
 8006fa2:	d925      	bls.n	8006ff0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68d9      	ldr	r1, [r3, #12]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	005b      	lsls	r3, r3, #1
 8006fb6:	4413      	add	r3, r2
 8006fb8:	3b1e      	subs	r3, #30
 8006fba:	2207      	movs	r2, #7
 8006fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc0:	43da      	mvns	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	400a      	ands	r2, r1
 8006fc8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68d9      	ldr	r1, [r3, #12]
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	689a      	ldr	r2, [r3, #8]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	4618      	mov	r0, r3
 8006fdc:	4603      	mov	r3, r0
 8006fde:	005b      	lsls	r3, r3, #1
 8006fe0:	4403      	add	r3, r0
 8006fe2:	3b1e      	subs	r3, #30
 8006fe4:	409a      	lsls	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	60da      	str	r2, [r3, #12]
 8006fee:	e022      	b.n	8007036 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6919      	ldr	r1, [r3, #16]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	4613      	mov	r3, r2
 8007000:	005b      	lsls	r3, r3, #1
 8007002:	4413      	add	r3, r2
 8007004:	2207      	movs	r2, #7
 8007006:	fa02 f303 	lsl.w	r3, r2, r3
 800700a:	43da      	mvns	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	400a      	ands	r2, r1
 8007012:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6919      	ldr	r1, [r3, #16]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	689a      	ldr	r2, [r3, #8]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	b29b      	uxth	r3, r3
 8007024:	4618      	mov	r0, r3
 8007026:	4603      	mov	r3, r0
 8007028:	005b      	lsls	r3, r3, #1
 800702a:	4403      	add	r3, r0
 800702c:	409a      	lsls	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	430a      	orrs	r2, r1
 8007034:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	2b06      	cmp	r3, #6
 800703c:	d824      	bhi.n	8007088 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	4613      	mov	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	4413      	add	r3, r2
 800704e:	3b05      	subs	r3, #5
 8007050:	221f      	movs	r2, #31
 8007052:	fa02 f303 	lsl.w	r3, r2, r3
 8007056:	43da      	mvns	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	400a      	ands	r2, r1
 800705e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	b29b      	uxth	r3, r3
 800706c:	4618      	mov	r0, r3
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	685a      	ldr	r2, [r3, #4]
 8007072:	4613      	mov	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	3b05      	subs	r3, #5
 800707a:	fa00 f203 	lsl.w	r2, r0, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	635a      	str	r2, [r3, #52]	; 0x34
 8007086:	e04c      	b.n	8007122 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	2b0c      	cmp	r3, #12
 800708e:	d824      	bhi.n	80070da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	4613      	mov	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4413      	add	r3, r2
 80070a0:	3b23      	subs	r3, #35	; 0x23
 80070a2:	221f      	movs	r2, #31
 80070a4:	fa02 f303 	lsl.w	r3, r2, r3
 80070a8:	43da      	mvns	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	400a      	ands	r2, r1
 80070b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	b29b      	uxth	r3, r3
 80070be:	4618      	mov	r0, r3
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	4613      	mov	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	3b23      	subs	r3, #35	; 0x23
 80070cc:	fa00 f203 	lsl.w	r2, r0, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	430a      	orrs	r2, r1
 80070d6:	631a      	str	r2, [r3, #48]	; 0x30
 80070d8:	e023      	b.n	8007122 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	685a      	ldr	r2, [r3, #4]
 80070e4:	4613      	mov	r3, r2
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	4413      	add	r3, r2
 80070ea:	3b41      	subs	r3, #65	; 0x41
 80070ec:	221f      	movs	r2, #31
 80070ee:	fa02 f303 	lsl.w	r3, r2, r3
 80070f2:	43da      	mvns	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	400a      	ands	r2, r1
 80070fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	b29b      	uxth	r3, r3
 8007108:	4618      	mov	r0, r3
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	4613      	mov	r3, r2
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4413      	add	r3, r2
 8007114:	3b41      	subs	r3, #65	; 0x41
 8007116:	fa00 f203 	lsl.w	r2, r0, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	430a      	orrs	r2, r1
 8007120:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007122:	4b22      	ldr	r3, [pc, #136]	; (80071ac <HAL_ADC_ConfigChannel+0x234>)
 8007124:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a21      	ldr	r2, [pc, #132]	; (80071b0 <HAL_ADC_ConfigChannel+0x238>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d109      	bne.n	8007144 <HAL_ADC_ConfigChannel+0x1cc>
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2b12      	cmp	r3, #18
 8007136:	d105      	bne.n	8007144 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a19      	ldr	r2, [pc, #100]	; (80071b0 <HAL_ADC_ConfigChannel+0x238>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d123      	bne.n	8007196 <HAL_ADC_ConfigChannel+0x21e>
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b10      	cmp	r3, #16
 8007154:	d003      	beq.n	800715e <HAL_ADC_ConfigChannel+0x1e6>
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2b11      	cmp	r3, #17
 800715c:	d11b      	bne.n	8007196 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b10      	cmp	r3, #16
 8007170:	d111      	bne.n	8007196 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007172:	4b10      	ldr	r3, [pc, #64]	; (80071b4 <HAL_ADC_ConfigChannel+0x23c>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a10      	ldr	r2, [pc, #64]	; (80071b8 <HAL_ADC_ConfigChannel+0x240>)
 8007178:	fba2 2303 	umull	r2, r3, r2, r3
 800717c:	0c9a      	lsrs	r2, r3, #18
 800717e:	4613      	mov	r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4413      	add	r3, r2
 8007184:	005b      	lsls	r3, r3, #1
 8007186:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007188:	e002      	b.n	8007190 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	3b01      	subs	r3, #1
 800718e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1f9      	bne.n	800718a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr
 80071ac:	40012300 	.word	0x40012300
 80071b0:	40012000 	.word	0x40012000
 80071b4:	20000008 	.word	0x20000008
 80071b8:	431bde83 	.word	0x431bde83

080071bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80071c4:	4b79      	ldr	r3, [pc, #484]	; (80073ac <ADC_Init+0x1f0>)
 80071c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	431a      	orrs	r2, r3
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	685a      	ldr	r2, [r3, #4]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6859      	ldr	r1, [r3, #4]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	021a      	lsls	r2, r3, #8
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007214:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	6859      	ldr	r1, [r3, #4]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	430a      	orrs	r2, r1
 8007226:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	689a      	ldr	r2, [r3, #8]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007236:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6899      	ldr	r1, [r3, #8]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	68da      	ldr	r2, [r3, #12]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	430a      	orrs	r2, r1
 8007248:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724e:	4a58      	ldr	r2, [pc, #352]	; (80073b0 <ADC_Init+0x1f4>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d022      	beq.n	800729a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	689a      	ldr	r2, [r3, #8]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007262:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	6899      	ldr	r1, [r3, #8]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	430a      	orrs	r2, r1
 8007274:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007284:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	6899      	ldr	r1, [r3, #8]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	430a      	orrs	r2, r1
 8007296:	609a      	str	r2, [r3, #8]
 8007298:	e00f      	b.n	80072ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	689a      	ldr	r2, [r3, #8]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80072a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	689a      	ldr	r2, [r3, #8]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80072b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	689a      	ldr	r2, [r3, #8]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f022 0202 	bic.w	r2, r2, #2
 80072c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	6899      	ldr	r1, [r3, #8]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	7e1b      	ldrb	r3, [r3, #24]
 80072d4:	005a      	lsls	r2, r3, #1
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	430a      	orrs	r2, r1
 80072dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d01b      	beq.n	8007320 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685a      	ldr	r2, [r3, #4]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007306:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6859      	ldr	r1, [r3, #4]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007312:	3b01      	subs	r3, #1
 8007314:	035a      	lsls	r2, r3, #13
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	430a      	orrs	r2, r1
 800731c:	605a      	str	r2, [r3, #4]
 800731e:	e007      	b.n	8007330 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	685a      	ldr	r2, [r3, #4]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800732e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800733e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	69db      	ldr	r3, [r3, #28]
 800734a:	3b01      	subs	r3, #1
 800734c:	051a      	lsls	r2, r3, #20
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	430a      	orrs	r2, r1
 8007354:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	689a      	ldr	r2, [r3, #8]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007364:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6899      	ldr	r1, [r3, #8]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007372:	025a      	lsls	r2, r3, #9
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	430a      	orrs	r2, r1
 800737a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689a      	ldr	r2, [r3, #8]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800738a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6899      	ldr	r1, [r3, #8]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	695b      	ldr	r3, [r3, #20]
 8007396:	029a      	lsls	r2, r3, #10
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	430a      	orrs	r2, r1
 800739e:	609a      	str	r2, [r3, #8]
}
 80073a0:	bf00      	nop
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr
 80073ac:	40012300 	.word	0x40012300
 80073b0:	0f000001 	.word	0x0f000001

080073b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e0ed      	b.n	80075a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d102      	bne.n	80073d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7f9 ff26 	bl	8001224 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f042 0201 	orr.w	r2, r2, #1
 80073e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80073e8:	f7ff fd52 	bl	8006e90 <HAL_GetTick>
 80073ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80073ee:	e012      	b.n	8007416 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80073f0:	f7ff fd4e 	bl	8006e90 <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	2b0a      	cmp	r3, #10
 80073fc:	d90b      	bls.n	8007416 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007402:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2205      	movs	r2, #5
 800740e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e0c5      	b.n	80075a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	2b00      	cmp	r3, #0
 8007422:	d0e5      	beq.n	80073f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f022 0202 	bic.w	r2, r2, #2
 8007432:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007434:	f7ff fd2c 	bl	8006e90 <HAL_GetTick>
 8007438:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800743a:	e012      	b.n	8007462 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800743c:	f7ff fd28 	bl	8006e90 <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	2b0a      	cmp	r3, #10
 8007448:	d90b      	bls.n	8007462 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2205      	movs	r2, #5
 800745a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e09f      	b.n	80075a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	f003 0302 	and.w	r3, r3, #2
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1e5      	bne.n	800743c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	7e1b      	ldrb	r3, [r3, #24]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d108      	bne.n	800748a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007486:	601a      	str	r2, [r3, #0]
 8007488:	e007      	b.n	800749a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007498:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	7e5b      	ldrb	r3, [r3, #25]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d108      	bne.n	80074b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074b0:	601a      	str	r2, [r3, #0]
 80074b2:	e007      	b.n	80074c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	7e9b      	ldrb	r3, [r3, #26]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d108      	bne.n	80074de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f042 0220 	orr.w	r2, r2, #32
 80074da:	601a      	str	r2, [r3, #0]
 80074dc:	e007      	b.n	80074ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f022 0220 	bic.w	r2, r2, #32
 80074ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	7edb      	ldrb	r3, [r3, #27]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d108      	bne.n	8007508 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f022 0210 	bic.w	r2, r2, #16
 8007504:	601a      	str	r2, [r3, #0]
 8007506:	e007      	b.n	8007518 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f042 0210 	orr.w	r2, r2, #16
 8007516:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	7f1b      	ldrb	r3, [r3, #28]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d108      	bne.n	8007532 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f042 0208 	orr.w	r2, r2, #8
 800752e:	601a      	str	r2, [r3, #0]
 8007530:	e007      	b.n	8007542 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f022 0208 	bic.w	r2, r2, #8
 8007540:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	7f5b      	ldrb	r3, [r3, #29]
 8007546:	2b01      	cmp	r3, #1
 8007548:	d108      	bne.n	800755c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f042 0204 	orr.w	r2, r2, #4
 8007558:	601a      	str	r2, [r3, #0]
 800755a:	e007      	b.n	800756c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f022 0204 	bic.w	r2, r2, #4
 800756a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	689a      	ldr	r2, [r3, #8]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	431a      	orrs	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	431a      	orrs	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	695b      	ldr	r3, [r3, #20]
 8007580:	ea42 0103 	orr.w	r1, r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	1e5a      	subs	r2, r3, #1
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	430a      	orrs	r2, r1
 8007590:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
	...

080075ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f003 0307 	and.w	r3, r3, #7
 80075ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80075bc:	4b0c      	ldr	r3, [pc, #48]	; (80075f0 <__NVIC_SetPriorityGrouping+0x44>)
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80075c8:	4013      	ands	r3, r2
 80075ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80075d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80075d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80075de:	4a04      	ldr	r2, [pc, #16]	; (80075f0 <__NVIC_SetPriorityGrouping+0x44>)
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	60d3      	str	r3, [r2, #12]
}
 80075e4:	bf00      	nop
 80075e6:	3714      	adds	r7, #20
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr
 80075f0:	e000ed00 	.word	0xe000ed00

080075f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80075f4:	b480      	push	{r7}
 80075f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80075f8:	4b04      	ldr	r3, [pc, #16]	; (800760c <__NVIC_GetPriorityGrouping+0x18>)
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	0a1b      	lsrs	r3, r3, #8
 80075fe:	f003 0307 	and.w	r3, r3, #7
}
 8007602:	4618      	mov	r0, r3
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	e000ed00 	.word	0xe000ed00

08007610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	4603      	mov	r3, r0
 8007618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800761a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800761e:	2b00      	cmp	r3, #0
 8007620:	db0b      	blt.n	800763a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007622:	79fb      	ldrb	r3, [r7, #7]
 8007624:	f003 021f 	and.w	r2, r3, #31
 8007628:	4907      	ldr	r1, [pc, #28]	; (8007648 <__NVIC_EnableIRQ+0x38>)
 800762a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800762e:	095b      	lsrs	r3, r3, #5
 8007630:	2001      	movs	r0, #1
 8007632:	fa00 f202 	lsl.w	r2, r0, r2
 8007636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800763a:	bf00      	nop
 800763c:	370c      	adds	r7, #12
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	e000e100 	.word	0xe000e100

0800764c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	4603      	mov	r3, r0
 8007654:	6039      	str	r1, [r7, #0]
 8007656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800765c:	2b00      	cmp	r3, #0
 800765e:	db0a      	blt.n	8007676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	b2da      	uxtb	r2, r3
 8007664:	490c      	ldr	r1, [pc, #48]	; (8007698 <__NVIC_SetPriority+0x4c>)
 8007666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800766a:	0112      	lsls	r2, r2, #4
 800766c:	b2d2      	uxtb	r2, r2
 800766e:	440b      	add	r3, r1
 8007670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007674:	e00a      	b.n	800768c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	b2da      	uxtb	r2, r3
 800767a:	4908      	ldr	r1, [pc, #32]	; (800769c <__NVIC_SetPriority+0x50>)
 800767c:	79fb      	ldrb	r3, [r7, #7]
 800767e:	f003 030f 	and.w	r3, r3, #15
 8007682:	3b04      	subs	r3, #4
 8007684:	0112      	lsls	r2, r2, #4
 8007686:	b2d2      	uxtb	r2, r2
 8007688:	440b      	add	r3, r1
 800768a:	761a      	strb	r2, [r3, #24]
}
 800768c:	bf00      	nop
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr
 8007698:	e000e100 	.word	0xe000e100
 800769c:	e000ed00 	.word	0xe000ed00

080076a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b089      	sub	sp, #36	; 0x24
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f003 0307 	and.w	r3, r3, #7
 80076b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	f1c3 0307 	rsb	r3, r3, #7
 80076ba:	2b04      	cmp	r3, #4
 80076bc:	bf28      	it	cs
 80076be:	2304      	movcs	r3, #4
 80076c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	3304      	adds	r3, #4
 80076c6:	2b06      	cmp	r3, #6
 80076c8:	d902      	bls.n	80076d0 <NVIC_EncodePriority+0x30>
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	3b03      	subs	r3, #3
 80076ce:	e000      	b.n	80076d2 <NVIC_EncodePriority+0x32>
 80076d0:	2300      	movs	r3, #0
 80076d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076d4:	f04f 32ff 	mov.w	r2, #4294967295
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	fa02 f303 	lsl.w	r3, r2, r3
 80076de:	43da      	mvns	r2, r3
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	401a      	ands	r2, r3
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80076e8:	f04f 31ff 	mov.w	r1, #4294967295
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	fa01 f303 	lsl.w	r3, r1, r3
 80076f2:	43d9      	mvns	r1, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076f8:	4313      	orrs	r3, r2
         );
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3724      	adds	r7, #36	; 0x24
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b082      	sub	sp, #8
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f7ff ff4c 	bl	80075ac <__NVIC_SetPriorityGrouping>
}
 8007714:	bf00      	nop
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800771c:	b580      	push	{r7, lr}
 800771e:	b086      	sub	sp, #24
 8007720:	af00      	add	r7, sp, #0
 8007722:	4603      	mov	r3, r0
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
 8007728:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800772a:	2300      	movs	r3, #0
 800772c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800772e:	f7ff ff61 	bl	80075f4 <__NVIC_GetPriorityGrouping>
 8007732:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	68b9      	ldr	r1, [r7, #8]
 8007738:	6978      	ldr	r0, [r7, #20]
 800773a:	f7ff ffb1 	bl	80076a0 <NVIC_EncodePriority>
 800773e:	4602      	mov	r2, r0
 8007740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007744:	4611      	mov	r1, r2
 8007746:	4618      	mov	r0, r3
 8007748:	f7ff ff80 	bl	800764c <__NVIC_SetPriority>
}
 800774c:	bf00      	nop
 800774e:	3718      	adds	r7, #24
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	4603      	mov	r3, r0
 800775c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800775e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007762:	4618      	mov	r0, r3
 8007764:	f7ff ff54 	bl	8007610 <__NVIC_EnableIRQ>
}
 8007768:	bf00      	nop
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d101      	bne.n	8007782 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e014      	b.n	80077ac <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	791b      	ldrb	r3, [r3, #4]
 8007786:	b2db      	uxtb	r3, r3
 8007788:	2b00      	cmp	r3, #0
 800778a:	d105      	bne.n	8007798 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7f9 fdb8 	bl	8001308 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2202      	movs	r2, #2
 800779c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077ca:	d120      	bne.n	800780e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077da:	d118      	bne.n	800780e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2204      	movs	r2, #4
 80077e0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	f043 0201 	orr.w	r2, r3, #1
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80077f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007806:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f82d 	bl	8007868 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800781c:	d120      	bne.n	8007860 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800782c:	d118      	bne.n	8007860 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2204      	movs	r2, #4
 8007832:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	f043 0202 	orr.w	r2, r3, #2
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007848:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007858:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f85d 	bl	800791a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8007860:	bf00      	nop
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800787c:	b480      	push	{r7}
 800787e:	b087      	sub	sp, #28
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	795b      	ldrb	r3, [r3, #5]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d101      	bne.n	8007894 <HAL_DAC_ConfigChannel+0x18>
 8007890:	2302      	movs	r3, #2
 8007892:	e03c      	b.n	800790e <HAL_DAC_ConfigChannel+0x92>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2201      	movs	r2, #1
 8007898:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2202      	movs	r2, #2
 800789e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f003 0310 	and.w	r3, r3, #16
 80078ae:	f640 72fe 	movw	r2, #4094	; 0xffe
 80078b2:	fa02 f303 	lsl.w	r3, r2, r3
 80078b6:	43db      	mvns	r3, r3
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	4013      	ands	r3, r2
 80078bc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f003 0310 	and.w	r3, r3, #16
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	fa02 f303 	lsl.w	r3, r2, r3
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	4313      	orrs	r3, r2
 80078da:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6819      	ldr	r1, [r3, #0]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f003 0310 	and.w	r3, r3, #16
 80078f0:	22c0      	movs	r2, #192	; 0xc0
 80078f2:	fa02 f303 	lsl.w	r3, r2, r3
 80078f6:	43da      	mvns	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	400a      	ands	r2, r1
 80078fe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2201      	movs	r2, #1
 8007904:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	371c      	adds	r7, #28
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800791a:	b480      	push	{r7}
 800791c:	b083      	sub	sp, #12
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8007922:	bf00      	nop
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
	...

08007930 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007938:	2300      	movs	r3, #0
 800793a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800793c:	f7ff faa8 	bl	8006e90 <HAL_GetTick>
 8007940:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e099      	b.n	8007a80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2202      	movs	r2, #2
 8007950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f022 0201 	bic.w	r2, r2, #1
 800796a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800796c:	e00f      	b.n	800798e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800796e:	f7ff fa8f 	bl	8006e90 <HAL_GetTick>
 8007972:	4602      	mov	r2, r0
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	2b05      	cmp	r3, #5
 800797a:	d908      	bls.n	800798e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2220      	movs	r2, #32
 8007980:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2203      	movs	r2, #3
 8007986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800798a:	2303      	movs	r3, #3
 800798c:	e078      	b.n	8007a80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1e8      	bne.n	800796e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80079a4:	697a      	ldr	r2, [r7, #20]
 80079a6:	4b38      	ldr	r3, [pc, #224]	; (8007a88 <HAL_DMA_Init+0x158>)
 80079a8:	4013      	ands	r3, r2
 80079aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80079ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a1b      	ldr	r3, [r3, #32]
 80079d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	4313      	orrs	r3, r2
 80079de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e4:	2b04      	cmp	r3, #4
 80079e6:	d107      	bne.n	80079f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f0:	4313      	orrs	r3, r2
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f023 0307 	bic.w	r3, r3, #7
 8007a0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a14:	697a      	ldr	r2, [r7, #20]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1e:	2b04      	cmp	r3, #4
 8007a20:	d117      	bne.n	8007a52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00e      	beq.n	8007a52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fa89 	bl	8007f4c <DMA_CheckFifoParam>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d008      	beq.n	8007a52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2240      	movs	r2, #64	; 0x40
 8007a44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e016      	b.n	8007a80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	697a      	ldr	r2, [r7, #20]
 8007a58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 fa40 	bl	8007ee0 <DMA_CalcBaseAndBitshift>
 8007a60:	4603      	mov	r3, r0
 8007a62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a68:	223f      	movs	r2, #63	; 0x3f
 8007a6a:	409a      	lsls	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3718      	adds	r7, #24
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	f010803f 	.word	0xf010803f

08007a8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007a9a:	f7ff f9f9 	bl	8006e90 <HAL_GetTick>
 8007a9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d008      	beq.n	8007abe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2280      	movs	r2, #128	; 0x80
 8007ab0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e052      	b.n	8007b64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f022 0216 	bic.w	r2, r2, #22
 8007acc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	695a      	ldr	r2, [r3, #20]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007adc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d103      	bne.n	8007aee <HAL_DMA_Abort+0x62>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d007      	beq.n	8007afe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f022 0208 	bic.w	r2, r2, #8
 8007afc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f022 0201 	bic.w	r2, r2, #1
 8007b0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b0e:	e013      	b.n	8007b38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007b10:	f7ff f9be 	bl	8006e90 <HAL_GetTick>
 8007b14:	4602      	mov	r2, r0
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	2b05      	cmp	r3, #5
 8007b1c:	d90c      	bls.n	8007b38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2220      	movs	r2, #32
 8007b22:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2203      	movs	r2, #3
 8007b28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007b34:	2303      	movs	r3, #3
 8007b36:	e015      	b.n	8007b64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 0301 	and.w	r3, r3, #1
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1e4      	bne.n	8007b10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b4a:	223f      	movs	r2, #63	; 0x3f
 8007b4c:	409a      	lsls	r2, r3
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2201      	movs	r2, #1
 8007b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	d004      	beq.n	8007b8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2280      	movs	r2, #128	; 0x80
 8007b84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e00c      	b.n	8007ba4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2205      	movs	r2, #5
 8007b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f022 0201 	bic.w	r2, r2, #1
 8007ba0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007bbc:	4b8e      	ldr	r3, [pc, #568]	; (8007df8 <HAL_DMA_IRQHandler+0x248>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a8e      	ldr	r2, [pc, #568]	; (8007dfc <HAL_DMA_IRQHandler+0x24c>)
 8007bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bc6:	0a9b      	lsrs	r3, r3, #10
 8007bc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bda:	2208      	movs	r2, #8
 8007bdc:	409a      	lsls	r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	4013      	ands	r3, r2
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d01a      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0304 	and.w	r3, r3, #4
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d013      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f022 0204 	bic.w	r2, r2, #4
 8007c02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c08:	2208      	movs	r2, #8
 8007c0a:	409a      	lsls	r2, r3
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c14:	f043 0201 	orr.w	r2, r3, #1
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c20:	2201      	movs	r2, #1
 8007c22:	409a      	lsls	r2, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	4013      	ands	r3, r2
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d012      	beq.n	8007c52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00b      	beq.n	8007c52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c3e:	2201      	movs	r2, #1
 8007c40:	409a      	lsls	r2, r3
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c4a:	f043 0202 	orr.w	r2, r3, #2
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c56:	2204      	movs	r2, #4
 8007c58:	409a      	lsls	r2, r3
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d012      	beq.n	8007c88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0302 	and.w	r3, r3, #2
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00b      	beq.n	8007c88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c74:	2204      	movs	r2, #4
 8007c76:	409a      	lsls	r2, r3
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c80:	f043 0204 	orr.w	r2, r3, #4
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c8c:	2210      	movs	r2, #16
 8007c8e:	409a      	lsls	r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	4013      	ands	r3, r2
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d043      	beq.n	8007d20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0308 	and.w	r3, r3, #8
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d03c      	beq.n	8007d20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007caa:	2210      	movs	r2, #16
 8007cac:	409a      	lsls	r2, r3
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d018      	beq.n	8007cf2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d108      	bne.n	8007ce0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d024      	beq.n	8007d20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	4798      	blx	r3
 8007cde:	e01f      	b.n	8007d20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d01b      	beq.n	8007d20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	4798      	blx	r3
 8007cf0:	e016      	b.n	8007d20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d107      	bne.n	8007d10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f022 0208 	bic.w	r2, r2, #8
 8007d0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d003      	beq.n	8007d20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d24:	2220      	movs	r2, #32
 8007d26:	409a      	lsls	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f000 808f 	beq.w	8007e50 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 0310 	and.w	r3, r3, #16
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 8087 	beq.w	8007e50 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d46:	2220      	movs	r2, #32
 8007d48:	409a      	lsls	r2, r3
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	2b05      	cmp	r3, #5
 8007d58:	d136      	bne.n	8007dc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f022 0216 	bic.w	r2, r2, #22
 8007d68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	695a      	ldr	r2, [r3, #20]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d103      	bne.n	8007d8a <HAL_DMA_IRQHandler+0x1da>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d007      	beq.n	8007d9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f022 0208 	bic.w	r2, r2, #8
 8007d98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d9e:	223f      	movs	r2, #63	; 0x3f
 8007da0:	409a      	lsls	r2, r3
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d07e      	beq.n	8007ebc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	4798      	blx	r3
        }
        return;
 8007dc6:	e079      	b.n	8007ebc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d01d      	beq.n	8007e12 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10d      	bne.n	8007e00 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d031      	beq.n	8007e50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	4798      	blx	r3
 8007df4:	e02c      	b.n	8007e50 <HAL_DMA_IRQHandler+0x2a0>
 8007df6:	bf00      	nop
 8007df8:	20000008 	.word	0x20000008
 8007dfc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d023      	beq.n	8007e50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	4798      	blx	r3
 8007e10:	e01e      	b.n	8007e50 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10f      	bne.n	8007e40 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f022 0210 	bic.w	r2, r2, #16
 8007e2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d003      	beq.n	8007e50 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d032      	beq.n	8007ebe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e5c:	f003 0301 	and.w	r3, r3, #1
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d022      	beq.n	8007eaa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2205      	movs	r2, #5
 8007e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f022 0201 	bic.w	r2, r2, #1
 8007e7a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	60bb      	str	r3, [r7, #8]
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d307      	bcc.n	8007e98 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 0301 	and.w	r3, r3, #1
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1f2      	bne.n	8007e7c <HAL_DMA_IRQHandler+0x2cc>
 8007e96:	e000      	b.n	8007e9a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007e98:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d005      	beq.n	8007ebe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	4798      	blx	r3
 8007eba:	e000      	b.n	8007ebe <HAL_DMA_IRQHandler+0x30e>
        return;
 8007ebc:	bf00      	nop
    }
  }
}
 8007ebe:	3718      	adds	r7, #24
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ed2:	b2db      	uxtb	r3, r3
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	3b10      	subs	r3, #16
 8007ef0:	4a14      	ldr	r2, [pc, #80]	; (8007f44 <DMA_CalcBaseAndBitshift+0x64>)
 8007ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef6:	091b      	lsrs	r3, r3, #4
 8007ef8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007efa:	4a13      	ldr	r2, [pc, #76]	; (8007f48 <DMA_CalcBaseAndBitshift+0x68>)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	4413      	add	r3, r2
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	461a      	mov	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2b03      	cmp	r3, #3
 8007f0c:	d909      	bls.n	8007f22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007f16:	f023 0303 	bic.w	r3, r3, #3
 8007f1a:	1d1a      	adds	r2, r3, #4
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	659a      	str	r2, [r3, #88]	; 0x58
 8007f20:	e007      	b.n	8007f32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007f2a:	f023 0303 	bic.w	r3, r3, #3
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	aaaaaaab 	.word	0xaaaaaaab
 8007f48:	08013030 	.word	0x08013030

08007f4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f54:	2300      	movs	r3, #0
 8007f56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	699b      	ldr	r3, [r3, #24]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d11f      	bne.n	8007fa6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	2b03      	cmp	r3, #3
 8007f6a:	d856      	bhi.n	800801a <DMA_CheckFifoParam+0xce>
 8007f6c:	a201      	add	r2, pc, #4	; (adr r2, 8007f74 <DMA_CheckFifoParam+0x28>)
 8007f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f72:	bf00      	nop
 8007f74:	08007f85 	.word	0x08007f85
 8007f78:	08007f97 	.word	0x08007f97
 8007f7c:	08007f85 	.word	0x08007f85
 8007f80:	0800801b 	.word	0x0800801b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d046      	beq.n	800801e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f94:	e043      	b.n	800801e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007f9e:	d140      	bne.n	8008022 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007fa4:	e03d      	b.n	8008022 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fae:	d121      	bne.n	8007ff4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	2b03      	cmp	r3, #3
 8007fb4:	d837      	bhi.n	8008026 <DMA_CheckFifoParam+0xda>
 8007fb6:	a201      	add	r2, pc, #4	; (adr r2, 8007fbc <DMA_CheckFifoParam+0x70>)
 8007fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fbc:	08007fcd 	.word	0x08007fcd
 8007fc0:	08007fd3 	.word	0x08007fd3
 8007fc4:	08007fcd 	.word	0x08007fcd
 8007fc8:	08007fe5 	.word	0x08007fe5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	73fb      	strb	r3, [r7, #15]
      break;
 8007fd0:	e030      	b.n	8008034 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d025      	beq.n	800802a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007fe2:	e022      	b.n	800802a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007fec:	d11f      	bne.n	800802e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007ff2:	e01c      	b.n	800802e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d903      	bls.n	8008002 <DMA_CheckFifoParam+0xb6>
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	2b03      	cmp	r3, #3
 8007ffe:	d003      	beq.n	8008008 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008000:	e018      	b.n	8008034 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	73fb      	strb	r3, [r7, #15]
      break;
 8008006:	e015      	b.n	8008034 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00e      	beq.n	8008032 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	73fb      	strb	r3, [r7, #15]
      break;
 8008018:	e00b      	b.n	8008032 <DMA_CheckFifoParam+0xe6>
      break;
 800801a:	bf00      	nop
 800801c:	e00a      	b.n	8008034 <DMA_CheckFifoParam+0xe8>
      break;
 800801e:	bf00      	nop
 8008020:	e008      	b.n	8008034 <DMA_CheckFifoParam+0xe8>
      break;
 8008022:	bf00      	nop
 8008024:	e006      	b.n	8008034 <DMA_CheckFifoParam+0xe8>
      break;
 8008026:	bf00      	nop
 8008028:	e004      	b.n	8008034 <DMA_CheckFifoParam+0xe8>
      break;
 800802a:	bf00      	nop
 800802c:	e002      	b.n	8008034 <DMA_CheckFifoParam+0xe8>
      break;   
 800802e:	bf00      	nop
 8008030:	e000      	b.n	8008034 <DMA_CheckFifoParam+0xe8>
      break;
 8008032:	bf00      	nop
    }
  } 
  
  return status; 
 8008034:	7bfb      	ldrb	r3, [r7, #15]
}
 8008036:	4618      	mov	r0, r3
 8008038:	3714      	adds	r7, #20
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop

08008044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008044:	b480      	push	{r7}
 8008046:	b089      	sub	sp, #36	; 0x24
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800804e:	2300      	movs	r3, #0
 8008050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008052:	2300      	movs	r3, #0
 8008054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008056:	2300      	movs	r3, #0
 8008058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800805a:	2300      	movs	r3, #0
 800805c:	61fb      	str	r3, [r7, #28]
 800805e:	e16b      	b.n	8008338 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008060:	2201      	movs	r2, #1
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	fa02 f303 	lsl.w	r3, r2, r3
 8008068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	697a      	ldr	r2, [r7, #20]
 8008070:	4013      	ands	r3, r2
 8008072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008074:	693a      	ldr	r2, [r7, #16]
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	429a      	cmp	r2, r3
 800807a:	f040 815a 	bne.w	8008332 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f003 0303 	and.w	r3, r3, #3
 8008086:	2b01      	cmp	r3, #1
 8008088:	d005      	beq.n	8008096 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008092:	2b02      	cmp	r3, #2
 8008094:	d130      	bne.n	80080f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	005b      	lsls	r3, r3, #1
 80080a0:	2203      	movs	r2, #3
 80080a2:	fa02 f303 	lsl.w	r3, r2, r3
 80080a6:	43db      	mvns	r3, r3
 80080a8:	69ba      	ldr	r2, [r7, #24]
 80080aa:	4013      	ands	r3, r2
 80080ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	68da      	ldr	r2, [r3, #12]
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	005b      	lsls	r3, r3, #1
 80080b6:	fa02 f303 	lsl.w	r3, r2, r3
 80080ba:	69ba      	ldr	r2, [r7, #24]
 80080bc:	4313      	orrs	r3, r2
 80080be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	69ba      	ldr	r2, [r7, #24]
 80080c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80080cc:	2201      	movs	r2, #1
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	fa02 f303 	lsl.w	r3, r2, r3
 80080d4:	43db      	mvns	r3, r3
 80080d6:	69ba      	ldr	r2, [r7, #24]
 80080d8:	4013      	ands	r3, r2
 80080da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	091b      	lsrs	r3, r3, #4
 80080e2:	f003 0201 	and.w	r2, r3, #1
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	fa02 f303 	lsl.w	r3, r2, r3
 80080ec:	69ba      	ldr	r2, [r7, #24]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	69ba      	ldr	r2, [r7, #24]
 80080f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	f003 0303 	and.w	r3, r3, #3
 8008100:	2b03      	cmp	r3, #3
 8008102:	d017      	beq.n	8008134 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	005b      	lsls	r3, r3, #1
 800810e:	2203      	movs	r2, #3
 8008110:	fa02 f303 	lsl.w	r3, r2, r3
 8008114:	43db      	mvns	r3, r3
 8008116:	69ba      	ldr	r2, [r7, #24]
 8008118:	4013      	ands	r3, r2
 800811a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	689a      	ldr	r2, [r3, #8]
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	005b      	lsls	r3, r3, #1
 8008124:	fa02 f303 	lsl.w	r3, r2, r3
 8008128:	69ba      	ldr	r2, [r7, #24]
 800812a:	4313      	orrs	r3, r2
 800812c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	69ba      	ldr	r2, [r7, #24]
 8008132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	f003 0303 	and.w	r3, r3, #3
 800813c:	2b02      	cmp	r3, #2
 800813e:	d123      	bne.n	8008188 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	08da      	lsrs	r2, r3, #3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	3208      	adds	r2, #8
 8008148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800814c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	f003 0307 	and.w	r3, r3, #7
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	220f      	movs	r2, #15
 8008158:	fa02 f303 	lsl.w	r3, r2, r3
 800815c:	43db      	mvns	r3, r3
 800815e:	69ba      	ldr	r2, [r7, #24]
 8008160:	4013      	ands	r3, r2
 8008162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	691a      	ldr	r2, [r3, #16]
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	f003 0307 	and.w	r3, r3, #7
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	fa02 f303 	lsl.w	r3, r2, r3
 8008174:	69ba      	ldr	r2, [r7, #24]
 8008176:	4313      	orrs	r3, r2
 8008178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	08da      	lsrs	r2, r3, #3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	3208      	adds	r2, #8
 8008182:	69b9      	ldr	r1, [r7, #24]
 8008184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	005b      	lsls	r3, r3, #1
 8008192:	2203      	movs	r2, #3
 8008194:	fa02 f303 	lsl.w	r3, r2, r3
 8008198:	43db      	mvns	r3, r3
 800819a:	69ba      	ldr	r2, [r7, #24]
 800819c:	4013      	ands	r3, r2
 800819e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	f003 0203 	and.w	r2, r3, #3
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	005b      	lsls	r3, r3, #1
 80081ac:	fa02 f303 	lsl.w	r3, r2, r3
 80081b0:	69ba      	ldr	r2, [r7, #24]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	69ba      	ldr	r2, [r7, #24]
 80081ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f000 80b4 	beq.w	8008332 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80081ca:	2300      	movs	r3, #0
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	4b60      	ldr	r3, [pc, #384]	; (8008350 <HAL_GPIO_Init+0x30c>)
 80081d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081d2:	4a5f      	ldr	r2, [pc, #380]	; (8008350 <HAL_GPIO_Init+0x30c>)
 80081d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80081d8:	6453      	str	r3, [r2, #68]	; 0x44
 80081da:	4b5d      	ldr	r3, [pc, #372]	; (8008350 <HAL_GPIO_Init+0x30c>)
 80081dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081e2:	60fb      	str	r3, [r7, #12]
 80081e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80081e6:	4a5b      	ldr	r2, [pc, #364]	; (8008354 <HAL_GPIO_Init+0x310>)
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	089b      	lsrs	r3, r3, #2
 80081ec:	3302      	adds	r3, #2
 80081ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	f003 0303 	and.w	r3, r3, #3
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	220f      	movs	r2, #15
 80081fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008202:	43db      	mvns	r3, r3
 8008204:	69ba      	ldr	r2, [r7, #24]
 8008206:	4013      	ands	r3, r2
 8008208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a52      	ldr	r2, [pc, #328]	; (8008358 <HAL_GPIO_Init+0x314>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d02b      	beq.n	800826a <HAL_GPIO_Init+0x226>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a51      	ldr	r2, [pc, #324]	; (800835c <HAL_GPIO_Init+0x318>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d025      	beq.n	8008266 <HAL_GPIO_Init+0x222>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a50      	ldr	r2, [pc, #320]	; (8008360 <HAL_GPIO_Init+0x31c>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d01f      	beq.n	8008262 <HAL_GPIO_Init+0x21e>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a4f      	ldr	r2, [pc, #316]	; (8008364 <HAL_GPIO_Init+0x320>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d019      	beq.n	800825e <HAL_GPIO_Init+0x21a>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a4e      	ldr	r2, [pc, #312]	; (8008368 <HAL_GPIO_Init+0x324>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d013      	beq.n	800825a <HAL_GPIO_Init+0x216>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a4d      	ldr	r2, [pc, #308]	; (800836c <HAL_GPIO_Init+0x328>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d00d      	beq.n	8008256 <HAL_GPIO_Init+0x212>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a4c      	ldr	r2, [pc, #304]	; (8008370 <HAL_GPIO_Init+0x32c>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d007      	beq.n	8008252 <HAL_GPIO_Init+0x20e>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a4b      	ldr	r2, [pc, #300]	; (8008374 <HAL_GPIO_Init+0x330>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d101      	bne.n	800824e <HAL_GPIO_Init+0x20a>
 800824a:	2307      	movs	r3, #7
 800824c:	e00e      	b.n	800826c <HAL_GPIO_Init+0x228>
 800824e:	2308      	movs	r3, #8
 8008250:	e00c      	b.n	800826c <HAL_GPIO_Init+0x228>
 8008252:	2306      	movs	r3, #6
 8008254:	e00a      	b.n	800826c <HAL_GPIO_Init+0x228>
 8008256:	2305      	movs	r3, #5
 8008258:	e008      	b.n	800826c <HAL_GPIO_Init+0x228>
 800825a:	2304      	movs	r3, #4
 800825c:	e006      	b.n	800826c <HAL_GPIO_Init+0x228>
 800825e:	2303      	movs	r3, #3
 8008260:	e004      	b.n	800826c <HAL_GPIO_Init+0x228>
 8008262:	2302      	movs	r3, #2
 8008264:	e002      	b.n	800826c <HAL_GPIO_Init+0x228>
 8008266:	2301      	movs	r3, #1
 8008268:	e000      	b.n	800826c <HAL_GPIO_Init+0x228>
 800826a:	2300      	movs	r3, #0
 800826c:	69fa      	ldr	r2, [r7, #28]
 800826e:	f002 0203 	and.w	r2, r2, #3
 8008272:	0092      	lsls	r2, r2, #2
 8008274:	4093      	lsls	r3, r2
 8008276:	69ba      	ldr	r2, [r7, #24]
 8008278:	4313      	orrs	r3, r2
 800827a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800827c:	4935      	ldr	r1, [pc, #212]	; (8008354 <HAL_GPIO_Init+0x310>)
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	089b      	lsrs	r3, r3, #2
 8008282:	3302      	adds	r3, #2
 8008284:	69ba      	ldr	r2, [r7, #24]
 8008286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800828a:	4b3b      	ldr	r3, [pc, #236]	; (8008378 <HAL_GPIO_Init+0x334>)
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	43db      	mvns	r3, r3
 8008294:	69ba      	ldr	r2, [r7, #24]
 8008296:	4013      	ands	r3, r2
 8008298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d003      	beq.n	80082ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80082a6:	69ba      	ldr	r2, [r7, #24]
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80082ae:	4a32      	ldr	r2, [pc, #200]	; (8008378 <HAL_GPIO_Init+0x334>)
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80082b4:	4b30      	ldr	r3, [pc, #192]	; (8008378 <HAL_GPIO_Init+0x334>)
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	43db      	mvns	r3, r3
 80082be:	69ba      	ldr	r2, [r7, #24]
 80082c0:	4013      	ands	r3, r2
 80082c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d003      	beq.n	80082d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80082d0:	69ba      	ldr	r2, [r7, #24]
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80082d8:	4a27      	ldr	r2, [pc, #156]	; (8008378 <HAL_GPIO_Init+0x334>)
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80082de:	4b26      	ldr	r3, [pc, #152]	; (8008378 <HAL_GPIO_Init+0x334>)
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	43db      	mvns	r3, r3
 80082e8:	69ba      	ldr	r2, [r7, #24]
 80082ea:	4013      	ands	r3, r2
 80082ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d003      	beq.n	8008302 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80082fa:	69ba      	ldr	r2, [r7, #24]
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	4313      	orrs	r3, r2
 8008300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008302:	4a1d      	ldr	r2, [pc, #116]	; (8008378 <HAL_GPIO_Init+0x334>)
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008308:	4b1b      	ldr	r3, [pc, #108]	; (8008378 <HAL_GPIO_Init+0x334>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	43db      	mvns	r3, r3
 8008312:	69ba      	ldr	r2, [r7, #24]
 8008314:	4013      	ands	r3, r2
 8008316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d003      	beq.n	800832c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008324:	69ba      	ldr	r2, [r7, #24]
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	4313      	orrs	r3, r2
 800832a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800832c:	4a12      	ldr	r2, [pc, #72]	; (8008378 <HAL_GPIO_Init+0x334>)
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	3301      	adds	r3, #1
 8008336:	61fb      	str	r3, [r7, #28]
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	2b0f      	cmp	r3, #15
 800833c:	f67f ae90 	bls.w	8008060 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008340:	bf00      	nop
 8008342:	bf00      	nop
 8008344:	3724      	adds	r7, #36	; 0x24
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	40023800 	.word	0x40023800
 8008354:	40013800 	.word	0x40013800
 8008358:	40020000 	.word	0x40020000
 800835c:	40020400 	.word	0x40020400
 8008360:	40020800 	.word	0x40020800
 8008364:	40020c00 	.word	0x40020c00
 8008368:	40021000 	.word	0x40021000
 800836c:	40021400 	.word	0x40021400
 8008370:	40021800 	.word	0x40021800
 8008374:	40021c00 	.word	0x40021c00
 8008378:	40013c00 	.word	0x40013c00

0800837c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	460b      	mov	r3, r1
 8008386:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	691a      	ldr	r2, [r3, #16]
 800838c:	887b      	ldrh	r3, [r7, #2]
 800838e:	4013      	ands	r3, r2
 8008390:	2b00      	cmp	r3, #0
 8008392:	d002      	beq.n	800839a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008394:	2301      	movs	r3, #1
 8008396:	73fb      	strb	r3, [r7, #15]
 8008398:	e001      	b.n	800839e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800839a:	2300      	movs	r3, #0
 800839c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800839e:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3714      	adds	r7, #20
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	460b      	mov	r3, r1
 80083b6:	807b      	strh	r3, [r7, #2]
 80083b8:	4613      	mov	r3, r2
 80083ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80083bc:	787b      	ldrb	r3, [r7, #1]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d003      	beq.n	80083ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80083c2:	887a      	ldrh	r2, [r7, #2]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80083c8:	e003      	b.n	80083d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80083ca:	887b      	ldrh	r3, [r7, #2]
 80083cc:	041a      	lsls	r2, r3, #16
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	619a      	str	r2, [r3, #24]
}
 80083d2:	bf00      	nop
 80083d4:	370c      	adds	r7, #12
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80083de:	b480      	push	{r7}
 80083e0:	b085      	sub	sp, #20
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
 80083e6:	460b      	mov	r3, r1
 80083e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	695b      	ldr	r3, [r3, #20]
 80083ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80083f0:	887a      	ldrh	r2, [r7, #2]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	4013      	ands	r3, r2
 80083f6:	041a      	lsls	r2, r3, #16
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	43d9      	mvns	r1, r3
 80083fc:	887b      	ldrh	r3, [r7, #2]
 80083fe:	400b      	ands	r3, r1
 8008400:	431a      	orrs	r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	619a      	str	r2, [r3, #24]
}
 8008406:	bf00      	nop
 8008408:	3714      	adds	r7, #20
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
	...

08008414 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	4603      	mov	r3, r0
 800841c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800841e:	4b08      	ldr	r3, [pc, #32]	; (8008440 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008420:	695a      	ldr	r2, [r3, #20]
 8008422:	88fb      	ldrh	r3, [r7, #6]
 8008424:	4013      	ands	r3, r2
 8008426:	2b00      	cmp	r3, #0
 8008428:	d006      	beq.n	8008438 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800842a:	4a05      	ldr	r2, [pc, #20]	; (8008440 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800842c:	88fb      	ldrh	r3, [r7, #6]
 800842e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008430:	88fb      	ldrh	r3, [r7, #6]
 8008432:	4618      	mov	r0, r3
 8008434:	f7f9 fa4e 	bl	80018d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8008438:	bf00      	nop
 800843a:	3708      	adds	r7, #8
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	40013c00 	.word	0x40013c00

08008444 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d101      	bne.n	8008456 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e12b      	b.n	80086ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800845c:	b2db      	uxtb	r3, r3
 800845e:	2b00      	cmp	r3, #0
 8008460:	d106      	bne.n	8008470 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7f9 fafc 	bl	8001a68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2224      	movs	r2, #36	; 0x24
 8008474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f022 0201 	bic.w	r2, r2, #1
 8008486:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008496:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80084a8:	f002 fe30 	bl	800b10c <HAL_RCC_GetPCLK1Freq>
 80084ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	4a81      	ldr	r2, [pc, #516]	; (80086b8 <HAL_I2C_Init+0x274>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d807      	bhi.n	80084c8 <HAL_I2C_Init+0x84>
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	4a80      	ldr	r2, [pc, #512]	; (80086bc <HAL_I2C_Init+0x278>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	bf94      	ite	ls
 80084c0:	2301      	movls	r3, #1
 80084c2:	2300      	movhi	r3, #0
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	e006      	b.n	80084d6 <HAL_I2C_Init+0x92>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	4a7d      	ldr	r2, [pc, #500]	; (80086c0 <HAL_I2C_Init+0x27c>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	bf94      	ite	ls
 80084d0:	2301      	movls	r3, #1
 80084d2:	2300      	movhi	r3, #0
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d001      	beq.n	80084de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e0e7      	b.n	80086ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	4a78      	ldr	r2, [pc, #480]	; (80086c4 <HAL_I2C_Init+0x280>)
 80084e2:	fba2 2303 	umull	r2, r3, r2, r3
 80084e6:	0c9b      	lsrs	r3, r3, #18
 80084e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	430a      	orrs	r2, r1
 80084fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	6a1b      	ldr	r3, [r3, #32]
 8008504:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	4a6a      	ldr	r2, [pc, #424]	; (80086b8 <HAL_I2C_Init+0x274>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d802      	bhi.n	8008518 <HAL_I2C_Init+0xd4>
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	3301      	adds	r3, #1
 8008516:	e009      	b.n	800852c <HAL_I2C_Init+0xe8>
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800851e:	fb02 f303 	mul.w	r3, r2, r3
 8008522:	4a69      	ldr	r2, [pc, #420]	; (80086c8 <HAL_I2C_Init+0x284>)
 8008524:	fba2 2303 	umull	r2, r3, r2, r3
 8008528:	099b      	lsrs	r3, r3, #6
 800852a:	3301      	adds	r3, #1
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	6812      	ldr	r2, [r2, #0]
 8008530:	430b      	orrs	r3, r1
 8008532:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	69db      	ldr	r3, [r3, #28]
 800853a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800853e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	495c      	ldr	r1, [pc, #368]	; (80086b8 <HAL_I2C_Init+0x274>)
 8008548:	428b      	cmp	r3, r1
 800854a:	d819      	bhi.n	8008580 <HAL_I2C_Init+0x13c>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	1e59      	subs	r1, r3, #1
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	005b      	lsls	r3, r3, #1
 8008556:	fbb1 f3f3 	udiv	r3, r1, r3
 800855a:	1c59      	adds	r1, r3, #1
 800855c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008560:	400b      	ands	r3, r1
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00a      	beq.n	800857c <HAL_I2C_Init+0x138>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	1e59      	subs	r1, r3, #1
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	005b      	lsls	r3, r3, #1
 8008570:	fbb1 f3f3 	udiv	r3, r1, r3
 8008574:	3301      	adds	r3, #1
 8008576:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800857a:	e051      	b.n	8008620 <HAL_I2C_Init+0x1dc>
 800857c:	2304      	movs	r3, #4
 800857e:	e04f      	b.n	8008620 <HAL_I2C_Init+0x1dc>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d111      	bne.n	80085ac <HAL_I2C_Init+0x168>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	1e58      	subs	r0, r3, #1
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6859      	ldr	r1, [r3, #4]
 8008590:	460b      	mov	r3, r1
 8008592:	005b      	lsls	r3, r3, #1
 8008594:	440b      	add	r3, r1
 8008596:	fbb0 f3f3 	udiv	r3, r0, r3
 800859a:	3301      	adds	r3, #1
 800859c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	bf0c      	ite	eq
 80085a4:	2301      	moveq	r3, #1
 80085a6:	2300      	movne	r3, #0
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	e012      	b.n	80085d2 <HAL_I2C_Init+0x18e>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	1e58      	subs	r0, r3, #1
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6859      	ldr	r1, [r3, #4]
 80085b4:	460b      	mov	r3, r1
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	440b      	add	r3, r1
 80085ba:	0099      	lsls	r1, r3, #2
 80085bc:	440b      	add	r3, r1
 80085be:	fbb0 f3f3 	udiv	r3, r0, r3
 80085c2:	3301      	adds	r3, #1
 80085c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	bf0c      	ite	eq
 80085cc:	2301      	moveq	r3, #1
 80085ce:	2300      	movne	r3, #0
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d001      	beq.n	80085da <HAL_I2C_Init+0x196>
 80085d6:	2301      	movs	r3, #1
 80085d8:	e022      	b.n	8008620 <HAL_I2C_Init+0x1dc>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d10e      	bne.n	8008600 <HAL_I2C_Init+0x1bc>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	1e58      	subs	r0, r3, #1
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6859      	ldr	r1, [r3, #4]
 80085ea:	460b      	mov	r3, r1
 80085ec:	005b      	lsls	r3, r3, #1
 80085ee:	440b      	add	r3, r1
 80085f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80085f4:	3301      	adds	r3, #1
 80085f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085fe:	e00f      	b.n	8008620 <HAL_I2C_Init+0x1dc>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	1e58      	subs	r0, r3, #1
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6859      	ldr	r1, [r3, #4]
 8008608:	460b      	mov	r3, r1
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	440b      	add	r3, r1
 800860e:	0099      	lsls	r1, r3, #2
 8008610:	440b      	add	r3, r1
 8008612:	fbb0 f3f3 	udiv	r3, r0, r3
 8008616:	3301      	adds	r3, #1
 8008618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800861c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008620:	6879      	ldr	r1, [r7, #4]
 8008622:	6809      	ldr	r1, [r1, #0]
 8008624:	4313      	orrs	r3, r2
 8008626:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	69da      	ldr	r2, [r3, #28]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a1b      	ldr	r3, [r3, #32]
 800863a:	431a      	orrs	r2, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	430a      	orrs	r2, r1
 8008642:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800864e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	6911      	ldr	r1, [r2, #16]
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	68d2      	ldr	r2, [r2, #12]
 800865a:	4311      	orrs	r1, r2
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	6812      	ldr	r2, [r2, #0]
 8008660:	430b      	orrs	r3, r1
 8008662:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	695a      	ldr	r2, [r3, #20]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	431a      	orrs	r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	430a      	orrs	r2, r1
 800867e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f042 0201 	orr.w	r2, r2, #1
 800868e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2220      	movs	r2, #32
 800869a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	000186a0 	.word	0x000186a0
 80086bc:	001e847f 	.word	0x001e847f
 80086c0:	003d08ff 	.word	0x003d08ff
 80086c4:	431bde83 	.word	0x431bde83
 80086c8:	10624dd3 	.word	0x10624dd3

080086cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b088      	sub	sp, #32
 80086d0:	af02      	add	r7, sp, #8
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	4608      	mov	r0, r1
 80086d6:	4611      	mov	r1, r2
 80086d8:	461a      	mov	r2, r3
 80086da:	4603      	mov	r3, r0
 80086dc:	817b      	strh	r3, [r7, #10]
 80086de:	460b      	mov	r3, r1
 80086e0:	813b      	strh	r3, [r7, #8]
 80086e2:	4613      	mov	r3, r2
 80086e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80086e6:	f7fe fbd3 	bl	8006e90 <HAL_GetTick>
 80086ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	2b20      	cmp	r3, #32
 80086f6:	f040 80d9 	bne.w	80088ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	9300      	str	r3, [sp, #0]
 80086fe:	2319      	movs	r3, #25
 8008700:	2201      	movs	r2, #1
 8008702:	496d      	ldr	r1, [pc, #436]	; (80088b8 <HAL_I2C_Mem_Write+0x1ec>)
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	f001 febd 	bl	800a484 <I2C_WaitOnFlagUntilTimeout>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d001      	beq.n	8008714 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008710:	2302      	movs	r3, #2
 8008712:	e0cc      	b.n	80088ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800871a:	2b01      	cmp	r3, #1
 800871c:	d101      	bne.n	8008722 <HAL_I2C_Mem_Write+0x56>
 800871e:	2302      	movs	r3, #2
 8008720:	e0c5      	b.n	80088ae <HAL_I2C_Mem_Write+0x1e2>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2201      	movs	r2, #1
 8008726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 0301 	and.w	r3, r3, #1
 8008734:	2b01      	cmp	r3, #1
 8008736:	d007      	beq.n	8008748 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f042 0201 	orr.w	r2, r2, #1
 8008746:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008756:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2221      	movs	r2, #33	; 0x21
 800875c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2240      	movs	r2, #64	; 0x40
 8008764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6a3a      	ldr	r2, [r7, #32]
 8008772:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008778:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800877e:	b29a      	uxth	r2, r3
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	4a4d      	ldr	r2, [pc, #308]	; (80088bc <HAL_I2C_Mem_Write+0x1f0>)
 8008788:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800878a:	88f8      	ldrh	r0, [r7, #6]
 800878c:	893a      	ldrh	r2, [r7, #8]
 800878e:	8979      	ldrh	r1, [r7, #10]
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	9301      	str	r3, [sp, #4]
 8008794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008796:	9300      	str	r3, [sp, #0]
 8008798:	4603      	mov	r3, r0
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f001 fd34 	bl	800a208 <I2C_RequestMemoryWrite>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d052      	beq.n	800884c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e081      	b.n	80088ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f001 ff3e 	bl	800a630 <I2C_WaitOnTXEFlagUntilTimeout>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00d      	beq.n	80087d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087be:	2b04      	cmp	r3, #4
 80087c0:	d107      	bne.n	80087d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	e06b      	b.n	80088ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087da:	781a      	ldrb	r2, [r3, #0]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e6:	1c5a      	adds	r2, r3, #1
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087f0:	3b01      	subs	r3, #1
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	3b01      	subs	r3, #1
 8008800:	b29a      	uxth	r2, r3
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	695b      	ldr	r3, [r3, #20]
 800880c:	f003 0304 	and.w	r3, r3, #4
 8008810:	2b04      	cmp	r3, #4
 8008812:	d11b      	bne.n	800884c <HAL_I2C_Mem_Write+0x180>
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008818:	2b00      	cmp	r3, #0
 800881a:	d017      	beq.n	800884c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008820:	781a      	ldrb	r2, [r3, #0]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882c:	1c5a      	adds	r2, r3, #1
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008836:	3b01      	subs	r3, #1
 8008838:	b29a      	uxth	r2, r3
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008842:	b29b      	uxth	r3, r3
 8008844:	3b01      	subs	r3, #1
 8008846:	b29a      	uxth	r2, r3
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1aa      	bne.n	80087aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008854:	697a      	ldr	r2, [r7, #20]
 8008856:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f001 ff2a 	bl	800a6b2 <I2C_WaitOnBTFFlagUntilTimeout>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00d      	beq.n	8008880 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008868:	2b04      	cmp	r3, #4
 800886a:	d107      	bne.n	800887c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800887a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	e016      	b.n	80088ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800888e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2220      	movs	r2, #32
 8008894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2200      	movs	r2, #0
 800889c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80088a8:	2300      	movs	r3, #0
 80088aa:	e000      	b.n	80088ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80088ac:	2302      	movs	r3, #2
  }
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3718      	adds	r7, #24
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	00100002 	.word	0x00100002
 80088bc:	ffff0000 	.word	0xffff0000

080088c0 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b087      	sub	sp, #28
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	4608      	mov	r0, r1
 80088ca:	4611      	mov	r1, r2
 80088cc:	461a      	mov	r2, r3
 80088ce:	4603      	mov	r3, r0
 80088d0:	817b      	strh	r3, [r7, #10]
 80088d2:	460b      	mov	r3, r1
 80088d4:	813b      	strh	r3, [r7, #8]
 80088d6:	4613      	mov	r3, r2
 80088d8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80088da:	2300      	movs	r3, #0
 80088dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	2b20      	cmp	r3, #32
 80088e8:	f040 809a 	bne.w	8008a20 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80088ec:	4b50      	ldr	r3, [pc, #320]	; (8008a30 <HAL_I2C_Mem_Read_IT+0x170>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	08db      	lsrs	r3, r3, #3
 80088f2:	4a50      	ldr	r2, [pc, #320]	; (8008a34 <HAL_I2C_Mem_Read_IT+0x174>)
 80088f4:	fba2 2303 	umull	r2, r3, r2, r3
 80088f8:	0a1a      	lsrs	r2, r3, #8
 80088fa:	4613      	mov	r3, r2
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	4413      	add	r3, r2
 8008900:	009a      	lsls	r2, r3, #2
 8008902:	4413      	add	r3, r2
 8008904:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	3b01      	subs	r3, #1
 800890a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d116      	bne.n	8008940 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2200      	movs	r2, #0
 8008916:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2220      	movs	r2, #32
 800891c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892c:	f043 0220 	orr.w	r2, r3, #32
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2200      	movs	r2, #0
 8008938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	e070      	b.n	8008a22 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	699b      	ldr	r3, [r3, #24]
 8008946:	f003 0302 	and.w	r3, r3, #2
 800894a:	2b02      	cmp	r3, #2
 800894c:	d0db      	beq.n	8008906 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008954:	2b01      	cmp	r3, #1
 8008956:	d101      	bne.n	800895c <HAL_I2C_Mem_Read_IT+0x9c>
 8008958:	2302      	movs	r3, #2
 800895a:	e062      	b.n	8008a22 <HAL_I2C_Mem_Read_IT+0x162>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 0301 	and.w	r3, r3, #1
 800896e:	2b01      	cmp	r3, #1
 8008970:	d007      	beq.n	8008982 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f042 0201 	orr.w	r2, r2, #1
 8008980:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008990:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2222      	movs	r2, #34	; 0x22
 8008996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2240      	movs	r2, #64	; 0x40
 800899e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2200      	movs	r2, #0
 80089a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6a3a      	ldr	r2, [r7, #32]
 80089ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80089b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	4a1d      	ldr	r2, [pc, #116]	; (8008a38 <HAL_I2C_Mem_Read_IT+0x178>)
 80089c2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80089c4:	897a      	ldrh	r2, [r7, #10]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80089ca:	893a      	ldrh	r2, [r7, #8]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80089d0:	88fa      	ldrh	r2, [r7, #6]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2200      	movs	r2, #0
 80089da:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80089ea:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089fa:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d007      	beq.n	8008a1c <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	685a      	ldr	r2, [r3, #4]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8008a1a:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	e000      	b.n	8008a22 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8008a20:	2302      	movs	r3, #2
  }
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	371c      	adds	r7, #28
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop
 8008a30:	20000008 	.word	0x20000008
 8008a34:	14f8b589 	.word	0x14f8b589
 8008a38:	ffff0000 	.word	0xffff0000

08008a3c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b088      	sub	sp, #32
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8008a44:	2300      	movs	r3, #0
 8008a46:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a54:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a5c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a64:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
 8008a68:	2b10      	cmp	r3, #16
 8008a6a:	d003      	beq.n	8008a74 <HAL_I2C_EV_IRQHandler+0x38>
 8008a6c:	7bfb      	ldrb	r3, [r7, #15]
 8008a6e:	2b40      	cmp	r3, #64	; 0x40
 8008a70:	f040 80c1 	bne.w	8008bf6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	699b      	ldr	r3, [r3, #24]
 8008a7a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	f003 0301 	and.w	r3, r3, #1
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d10d      	bne.n	8008aaa <HAL_I2C_EV_IRQHandler+0x6e>
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008a94:	d003      	beq.n	8008a9e <HAL_I2C_EV_IRQHandler+0x62>
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008a9c:	d101      	bne.n	8008aa2 <HAL_I2C_EV_IRQHandler+0x66>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e000      	b.n	8008aa4 <HAL_I2C_EV_IRQHandler+0x68>
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	f000 8132 	beq.w	8008d0e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	f003 0301 	and.w	r3, r3, #1
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00c      	beq.n	8008ace <HAL_I2C_EV_IRQHandler+0x92>
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	0a5b      	lsrs	r3, r3, #9
 8008ab8:	f003 0301 	and.w	r3, r3, #1
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d006      	beq.n	8008ace <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f001 fe98 	bl	800a7f6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fd83 	bl	80095d2 <I2C_Master_SB>
 8008acc:	e092      	b.n	8008bf4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	08db      	lsrs	r3, r3, #3
 8008ad2:	f003 0301 	and.w	r3, r3, #1
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d009      	beq.n	8008aee <HAL_I2C_EV_IRQHandler+0xb2>
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	0a5b      	lsrs	r3, r3, #9
 8008ade:	f003 0301 	and.w	r3, r3, #1
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d003      	beq.n	8008aee <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 fdf9 	bl	80096de <I2C_Master_ADD10>
 8008aec:	e082      	b.n	8008bf4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	085b      	lsrs	r3, r3, #1
 8008af2:	f003 0301 	and.w	r3, r3, #1
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d009      	beq.n	8008b0e <HAL_I2C_EV_IRQHandler+0xd2>
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	0a5b      	lsrs	r3, r3, #9
 8008afe:	f003 0301 	and.w	r3, r3, #1
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fe13 	bl	8009732 <I2C_Master_ADDR>
 8008b0c:	e072      	b.n	8008bf4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	089b      	lsrs	r3, r3, #2
 8008b12:	f003 0301 	and.w	r3, r3, #1
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d03b      	beq.n	8008b92 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b28:	f000 80f3 	beq.w	8008d12 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	09db      	lsrs	r3, r3, #7
 8008b30:	f003 0301 	and.w	r3, r3, #1
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d00f      	beq.n	8008b58 <HAL_I2C_EV_IRQHandler+0x11c>
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	0a9b      	lsrs	r3, r3, #10
 8008b3c:	f003 0301 	and.w	r3, r3, #1
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d009      	beq.n	8008b58 <HAL_I2C_EV_IRQHandler+0x11c>
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	089b      	lsrs	r3, r3, #2
 8008b48:	f003 0301 	and.w	r3, r3, #1
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d103      	bne.n	8008b58 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 f9f3 	bl	8008f3c <I2C_MasterTransmit_TXE>
 8008b56:	e04d      	b.n	8008bf4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	089b      	lsrs	r3, r3, #2
 8008b5c:	f003 0301 	and.w	r3, r3, #1
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f000 80d6 	beq.w	8008d12 <HAL_I2C_EV_IRQHandler+0x2d6>
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	0a5b      	lsrs	r3, r3, #9
 8008b6a:	f003 0301 	and.w	r3, r3, #1
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	f000 80cf 	beq.w	8008d12 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008b74:	7bbb      	ldrb	r3, [r7, #14]
 8008b76:	2b21      	cmp	r3, #33	; 0x21
 8008b78:	d103      	bne.n	8008b82 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 fa7a 	bl	8009074 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008b80:	e0c7      	b.n	8008d12 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8008b82:	7bfb      	ldrb	r3, [r7, #15]
 8008b84:	2b40      	cmp	r3, #64	; 0x40
 8008b86:	f040 80c4 	bne.w	8008d12 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fae8 	bl	8009160 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008b90:	e0bf      	b.n	8008d12 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ba0:	f000 80b7 	beq.w	8008d12 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	099b      	lsrs	r3, r3, #6
 8008ba8:	f003 0301 	and.w	r3, r3, #1
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00f      	beq.n	8008bd0 <HAL_I2C_EV_IRQHandler+0x194>
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	0a9b      	lsrs	r3, r3, #10
 8008bb4:	f003 0301 	and.w	r3, r3, #1
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d009      	beq.n	8008bd0 <HAL_I2C_EV_IRQHandler+0x194>
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	089b      	lsrs	r3, r3, #2
 8008bc0:	f003 0301 	and.w	r3, r3, #1
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d103      	bne.n	8008bd0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fb5d 	bl	8009288 <I2C_MasterReceive_RXNE>
 8008bce:	e011      	b.n	8008bf4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	089b      	lsrs	r3, r3, #2
 8008bd4:	f003 0301 	and.w	r3, r3, #1
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f000 809a 	beq.w	8008d12 <HAL_I2C_EV_IRQHandler+0x2d6>
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	0a5b      	lsrs	r3, r3, #9
 8008be2:	f003 0301 	and.w	r3, r3, #1
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	f000 8093 	beq.w	8008d12 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 fc06 	bl	80093fe <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008bf2:	e08e      	b.n	8008d12 <HAL_I2C_EV_IRQHandler+0x2d6>
 8008bf4:	e08d      	b.n	8008d12 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d004      	beq.n	8008c08 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	695b      	ldr	r3, [r3, #20]
 8008c04:	61fb      	str	r3, [r7, #28]
 8008c06:	e007      	b.n	8008c18 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	699b      	ldr	r3, [r3, #24]
 8008c0e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	695b      	ldr	r3, [r3, #20]
 8008c16:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	085b      	lsrs	r3, r3, #1
 8008c1c:	f003 0301 	and.w	r3, r3, #1
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d012      	beq.n	8008c4a <HAL_I2C_EV_IRQHandler+0x20e>
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	0a5b      	lsrs	r3, r3, #9
 8008c28:	f003 0301 	and.w	r3, r3, #1
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00c      	beq.n	8008c4a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d003      	beq.n	8008c40 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	699b      	ldr	r3, [r3, #24]
 8008c3e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8008c40:	69b9      	ldr	r1, [r7, #24]
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 ffc4 	bl	8009bd0 <I2C_Slave_ADDR>
 8008c48:	e066      	b.n	8008d18 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	091b      	lsrs	r3, r3, #4
 8008c4e:	f003 0301 	and.w	r3, r3, #1
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d009      	beq.n	8008c6a <HAL_I2C_EV_IRQHandler+0x22e>
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	0a5b      	lsrs	r3, r3, #9
 8008c5a:	f003 0301 	and.w	r3, r3, #1
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d003      	beq.n	8008c6a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 fffe 	bl	8009c64 <I2C_Slave_STOPF>
 8008c68:	e056      	b.n	8008d18 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008c6a:	7bbb      	ldrb	r3, [r7, #14]
 8008c6c:	2b21      	cmp	r3, #33	; 0x21
 8008c6e:	d002      	beq.n	8008c76 <HAL_I2C_EV_IRQHandler+0x23a>
 8008c70:	7bbb      	ldrb	r3, [r7, #14]
 8008c72:	2b29      	cmp	r3, #41	; 0x29
 8008c74:	d125      	bne.n	8008cc2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	09db      	lsrs	r3, r3, #7
 8008c7a:	f003 0301 	and.w	r3, r3, #1
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00f      	beq.n	8008ca2 <HAL_I2C_EV_IRQHandler+0x266>
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	0a9b      	lsrs	r3, r3, #10
 8008c86:	f003 0301 	and.w	r3, r3, #1
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d009      	beq.n	8008ca2 <HAL_I2C_EV_IRQHandler+0x266>
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	089b      	lsrs	r3, r3, #2
 8008c92:	f003 0301 	and.w	r3, r3, #1
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d103      	bne.n	8008ca2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 feda 	bl	8009a54 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008ca0:	e039      	b.n	8008d16 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	089b      	lsrs	r3, r3, #2
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d033      	beq.n	8008d16 <HAL_I2C_EV_IRQHandler+0x2da>
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	0a5b      	lsrs	r3, r3, #9
 8008cb2:	f003 0301 	and.w	r3, r3, #1
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d02d      	beq.n	8008d16 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 ff07 	bl	8009ace <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008cc0:	e029      	b.n	8008d16 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	099b      	lsrs	r3, r3, #6
 8008cc6:	f003 0301 	and.w	r3, r3, #1
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00f      	beq.n	8008cee <HAL_I2C_EV_IRQHandler+0x2b2>
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	0a9b      	lsrs	r3, r3, #10
 8008cd2:	f003 0301 	and.w	r3, r3, #1
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d009      	beq.n	8008cee <HAL_I2C_EV_IRQHandler+0x2b2>
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	089b      	lsrs	r3, r3, #2
 8008cde:	f003 0301 	and.w	r3, r3, #1
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d103      	bne.n	8008cee <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 ff12 	bl	8009b10 <I2C_SlaveReceive_RXNE>
 8008cec:	e014      	b.n	8008d18 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	089b      	lsrs	r3, r3, #2
 8008cf2:	f003 0301 	and.w	r3, r3, #1
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00e      	beq.n	8008d18 <HAL_I2C_EV_IRQHandler+0x2dc>
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	0a5b      	lsrs	r3, r3, #9
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d008      	beq.n	8008d18 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 ff40 	bl	8009b8c <I2C_SlaveReceive_BTF>
 8008d0c:	e004      	b.n	8008d18 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8008d0e:	bf00      	nop
 8008d10:	e002      	b.n	8008d18 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008d12:	bf00      	nop
 8008d14:	e000      	b.n	8008d18 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008d16:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8008d18:	3720      	adds	r7, #32
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b08a      	sub	sp, #40	; 0x28
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	695b      	ldr	r3, [r3, #20]
 8008d2c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8008d36:	2300      	movs	r3, #0
 8008d38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d40:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008d42:	6a3b      	ldr	r3, [r7, #32]
 8008d44:	0a1b      	lsrs	r3, r3, #8
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00e      	beq.n	8008d6c <HAL_I2C_ER_IRQHandler+0x4e>
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	0a1b      	lsrs	r3, r3, #8
 8008d52:	f003 0301 	and.w	r3, r3, #1
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d008      	beq.n	8008d6c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5c:	f043 0301 	orr.w	r3, r3, #1
 8008d60:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008d6a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008d6c:	6a3b      	ldr	r3, [r7, #32]
 8008d6e:	0a5b      	lsrs	r3, r3, #9
 8008d70:	f003 0301 	and.w	r3, r3, #1
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00e      	beq.n	8008d96 <HAL_I2C_ER_IRQHandler+0x78>
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	0a1b      	lsrs	r3, r3, #8
 8008d7c:	f003 0301 	and.w	r3, r3, #1
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d008      	beq.n	8008d96 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8008d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d86:	f043 0302 	orr.w	r3, r3, #2
 8008d8a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8008d94:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008d96:	6a3b      	ldr	r3, [r7, #32]
 8008d98:	0a9b      	lsrs	r3, r3, #10
 8008d9a:	f003 0301 	and.w	r3, r3, #1
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d03f      	beq.n	8008e22 <HAL_I2C_ER_IRQHandler+0x104>
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	0a1b      	lsrs	r3, r3, #8
 8008da6:	f003 0301 	and.w	r3, r3, #1
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d039      	beq.n	8008e22 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8008dae:	7efb      	ldrb	r3, [r7, #27]
 8008db0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dc0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8008dc8:	7ebb      	ldrb	r3, [r7, #26]
 8008dca:	2b20      	cmp	r3, #32
 8008dcc:	d112      	bne.n	8008df4 <HAL_I2C_ER_IRQHandler+0xd6>
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d10f      	bne.n	8008df4 <HAL_I2C_ER_IRQHandler+0xd6>
 8008dd4:	7cfb      	ldrb	r3, [r7, #19]
 8008dd6:	2b21      	cmp	r3, #33	; 0x21
 8008dd8:	d008      	beq.n	8008dec <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8008dda:	7cfb      	ldrb	r3, [r7, #19]
 8008ddc:	2b29      	cmp	r3, #41	; 0x29
 8008dde:	d005      	beq.n	8008dec <HAL_I2C_ER_IRQHandler+0xce>
 8008de0:	7cfb      	ldrb	r3, [r7, #19]
 8008de2:	2b28      	cmp	r3, #40	; 0x28
 8008de4:	d106      	bne.n	8008df4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2b21      	cmp	r3, #33	; 0x21
 8008dea:	d103      	bne.n	8008df4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f001 f869 	bl	8009ec4 <I2C_Slave_AF>
 8008df2:	e016      	b.n	8008e22 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008dfc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8008dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e00:	f043 0304 	orr.w	r3, r3, #4
 8008e04:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008e06:	7efb      	ldrb	r3, [r7, #27]
 8008e08:	2b10      	cmp	r3, #16
 8008e0a:	d002      	beq.n	8008e12 <HAL_I2C_ER_IRQHandler+0xf4>
 8008e0c:	7efb      	ldrb	r3, [r7, #27]
 8008e0e:	2b40      	cmp	r3, #64	; 0x40
 8008e10:	d107      	bne.n	8008e22 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e20:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008e22:	6a3b      	ldr	r3, [r7, #32]
 8008e24:	0adb      	lsrs	r3, r3, #11
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00e      	beq.n	8008e4c <HAL_I2C_ER_IRQHandler+0x12e>
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	0a1b      	lsrs	r3, r3, #8
 8008e32:	f003 0301 	and.w	r3, r3, #1
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d008      	beq.n	8008e4c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3c:	f043 0308 	orr.w	r3, r3, #8
 8008e40:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8008e4a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8008e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d008      	beq.n	8008e64 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e58:	431a      	orrs	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f001 f8a0 	bl	8009fa4 <I2C_ITError>
  }
}
 8008e64:	bf00      	nop
 8008e66:	3728      	adds	r7, #40	; 0x28
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008e74:	bf00      	nop
 8008e76:	370c      	adds	r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b083      	sub	sp, #12
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008e88:	bf00      	nop
 8008e8a:	370c      	adds	r7, #12
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008e9c:	bf00      	nop
 8008e9e:	370c      	adds	r7, #12
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008eb0:	bf00      	nop
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	70fb      	strb	r3, [r7, #3]
 8008ec8:	4613      	mov	r3, r2
 8008eca:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8008ee0:	bf00      	nop
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008f08:	bf00      	nop
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008f1c:	bf00      	nop
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008f30:	bf00      	nop
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f4a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f52:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f58:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d150      	bne.n	8009004 <I2C_MasterTransmit_TXE+0xc8>
 8008f62:	7bfb      	ldrb	r3, [r7, #15]
 8008f64:	2b21      	cmp	r3, #33	; 0x21
 8008f66:	d14d      	bne.n	8009004 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	2b08      	cmp	r3, #8
 8008f6c:	d01d      	beq.n	8008faa <I2C_MasterTransmit_TXE+0x6e>
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	2b20      	cmp	r3, #32
 8008f72:	d01a      	beq.n	8008faa <I2C_MasterTransmit_TXE+0x6e>
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f7a:	d016      	beq.n	8008faa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	685a      	ldr	r2, [r3, #4]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008f8a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2211      	movs	r2, #17
 8008f90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2220      	movs	r2, #32
 8008f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f7ff ff62 	bl	8008e6c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008fa8:	e060      	b.n	800906c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	685a      	ldr	r2, [r3, #4]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008fb8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fc8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2220      	movs	r2, #32
 8008fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	2b40      	cmp	r3, #64	; 0x40
 8008fe2:	d107      	bne.n	8008ff4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f7ff ff7d 	bl	8008eec <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008ff2:	e03b      	b.n	800906c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f7ff ff35 	bl	8008e6c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009002:	e033      	b.n	800906c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8009004:	7bfb      	ldrb	r3, [r7, #15]
 8009006:	2b21      	cmp	r3, #33	; 0x21
 8009008:	d005      	beq.n	8009016 <I2C_MasterTransmit_TXE+0xda>
 800900a:	7bbb      	ldrb	r3, [r7, #14]
 800900c:	2b40      	cmp	r3, #64	; 0x40
 800900e:	d12d      	bne.n	800906c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8009010:	7bfb      	ldrb	r3, [r7, #15]
 8009012:	2b22      	cmp	r3, #34	; 0x22
 8009014:	d12a      	bne.n	800906c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800901a:	b29b      	uxth	r3, r3
 800901c:	2b00      	cmp	r3, #0
 800901e:	d108      	bne.n	8009032 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	685a      	ldr	r2, [r3, #4]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800902e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8009030:	e01c      	b.n	800906c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009038:	b2db      	uxtb	r3, r3
 800903a:	2b40      	cmp	r3, #64	; 0x40
 800903c:	d103      	bne.n	8009046 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f88e 	bl	8009160 <I2C_MemoryTransmit_TXE_BTF>
}
 8009044:	e012      	b.n	800906c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904a:	781a      	ldrb	r2, [r3, #0]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009056:	1c5a      	adds	r2, r3, #1
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009060:	b29b      	uxth	r3, r3
 8009062:	3b01      	subs	r3, #1
 8009064:	b29a      	uxth	r2, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800906a:	e7ff      	b.n	800906c <I2C_MasterTransmit_TXE+0x130>
 800906c:	bf00      	nop
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009080:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009088:	b2db      	uxtb	r3, r3
 800908a:	2b21      	cmp	r3, #33	; 0x21
 800908c:	d164      	bne.n	8009158 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009092:	b29b      	uxth	r3, r3
 8009094:	2b00      	cmp	r3, #0
 8009096:	d012      	beq.n	80090be <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909c:	781a      	ldrb	r2, [r3, #0]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a8:	1c5a      	adds	r2, r3, #1
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	3b01      	subs	r3, #1
 80090b6:	b29a      	uxth	r2, r3
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80090bc:	e04c      	b.n	8009158 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2b08      	cmp	r3, #8
 80090c2:	d01d      	beq.n	8009100 <I2C_MasterTransmit_BTF+0x8c>
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2b20      	cmp	r3, #32
 80090c8:	d01a      	beq.n	8009100 <I2C_MasterTransmit_BTF+0x8c>
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80090d0:	d016      	beq.n	8009100 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	685a      	ldr	r2, [r3, #4]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80090e0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2211      	movs	r2, #17
 80090e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2220      	movs	r2, #32
 80090f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f7ff feb7 	bl	8008e6c <HAL_I2C_MasterTxCpltCallback>
}
 80090fe:	e02b      	b.n	8009158 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	685a      	ldr	r2, [r3, #4]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800910e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800911e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2220      	movs	r2, #32
 800912a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009134:	b2db      	uxtb	r3, r3
 8009136:	2b40      	cmp	r3, #64	; 0x40
 8009138:	d107      	bne.n	800914a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f7ff fed2 	bl	8008eec <HAL_I2C_MemTxCpltCallback>
}
 8009148:	e006      	b.n	8009158 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f7ff fe8a 	bl	8008e6c <HAL_I2C_MasterTxCpltCallback>
}
 8009158:	bf00      	nop
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800916e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009174:	2b00      	cmp	r3, #0
 8009176:	d11d      	bne.n	80091b4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800917c:	2b01      	cmp	r3, #1
 800917e:	d10b      	bne.n	8009198 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009184:	b2da      	uxtb	r2, r3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009190:	1c9a      	adds	r2, r3, #2
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8009196:	e073      	b.n	8009280 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800919c:	b29b      	uxth	r3, r3
 800919e:	121b      	asrs	r3, r3, #8
 80091a0:	b2da      	uxtb	r2, r3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091ac:	1c5a      	adds	r2, r3, #1
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80091b2:	e065      	b.n	8009280 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d10b      	bne.n	80091d4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091c0:	b2da      	uxtb	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091cc:	1c5a      	adds	r2, r3, #1
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80091d2:	e055      	b.n	8009280 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091d8:	2b02      	cmp	r3, #2
 80091da:	d151      	bne.n	8009280 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
 80091de:	2b22      	cmp	r3, #34	; 0x22
 80091e0:	d10d      	bne.n	80091fe <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091f0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091f6:	1c5a      	adds	r2, r3, #1
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80091fc:	e040      	b.n	8009280 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009202:	b29b      	uxth	r3, r3
 8009204:	2b00      	cmp	r3, #0
 8009206:	d015      	beq.n	8009234 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8009208:	7bfb      	ldrb	r3, [r7, #15]
 800920a:	2b21      	cmp	r3, #33	; 0x21
 800920c:	d112      	bne.n	8009234 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009212:	781a      	ldrb	r2, [r3, #0]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921e:	1c5a      	adds	r2, r3, #1
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009228:	b29b      	uxth	r3, r3
 800922a:	3b01      	subs	r3, #1
 800922c:	b29a      	uxth	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009232:	e025      	b.n	8009280 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009238:	b29b      	uxth	r3, r3
 800923a:	2b00      	cmp	r3, #0
 800923c:	d120      	bne.n	8009280 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800923e:	7bfb      	ldrb	r3, [r7, #15]
 8009240:	2b21      	cmp	r3, #33	; 0x21
 8009242:	d11d      	bne.n	8009280 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	685a      	ldr	r2, [r3, #4]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009252:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009262:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2220      	movs	r2, #32
 800926e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f7ff fe36 	bl	8008eec <HAL_I2C_MemTxCpltCallback>
}
 8009280:	bf00      	nop
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009296:	b2db      	uxtb	r3, r3
 8009298:	2b22      	cmp	r3, #34	; 0x22
 800929a:	f040 80ac 	bne.w	80093f6 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2b03      	cmp	r3, #3
 80092aa:	d921      	bls.n	80092f0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	691a      	ldr	r2, [r3, #16]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b6:	b2d2      	uxtb	r2, r2
 80092b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092be:	1c5a      	adds	r2, r3, #1
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	3b01      	subs	r3, #1
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	2b03      	cmp	r3, #3
 80092da:	f040 808c 	bne.w	80093f6 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	685a      	ldr	r2, [r3, #4]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092ec:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80092ee:	e082      	b.n	80093f6 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d075      	beq.n	80093e4 <I2C_MasterReceive_RXNE+0x15c>
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d002      	beq.n	8009304 <I2C_MasterReceive_RXNE+0x7c>
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d16f      	bne.n	80093e4 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f001 fa15 	bl	800a734 <I2C_WaitOnSTOPRequestThroughIT>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d142      	bne.n	8009396 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800931e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	685a      	ldr	r2, [r3, #4]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800932e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	691a      	ldr	r2, [r3, #16]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933a:	b2d2      	uxtb	r2, r2
 800933c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009342:	1c5a      	adds	r2, r3, #1
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800934c:	b29b      	uxth	r3, r3
 800934e:	3b01      	subs	r3, #1
 8009350:	b29a      	uxth	r2, r3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2220      	movs	r2, #32
 800935a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009364:	b2db      	uxtb	r3, r3
 8009366:	2b40      	cmp	r3, #64	; 0x40
 8009368:	d10a      	bne.n	8009380 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f7ff fdc1 	bl	8008f00 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800937e:	e03a      	b.n	80093f6 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2212      	movs	r2, #18
 800938c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f7ff fd76 	bl	8008e80 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009394:	e02f      	b.n	80093f6 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	685a      	ldr	r2, [r3, #4]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80093a4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	691a      	ldr	r2, [r3, #16]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b0:	b2d2      	uxtb	r2, r2
 80093b2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b8:	1c5a      	adds	r2, r3, #1
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	3b01      	subs	r3, #1
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2220      	movs	r2, #32
 80093d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f7ff fd99 	bl	8008f14 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80093e2:	e008      	b.n	80093f6 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	685a      	ldr	r2, [r3, #4]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093f2:	605a      	str	r2, [r3, #4]
}
 80093f4:	e7ff      	b.n	80093f6 <I2C_MasterReceive_RXNE+0x16e>
 80093f6:	bf00      	nop
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b084      	sub	sp, #16
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009410:	b29b      	uxth	r3, r3
 8009412:	2b04      	cmp	r3, #4
 8009414:	d11b      	bne.n	800944e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009424:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	691a      	ldr	r2, [r3, #16]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009430:	b2d2      	uxtb	r2, r2
 8009432:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009438:	1c5a      	adds	r2, r3, #1
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009442:	b29b      	uxth	r3, r3
 8009444:	3b01      	subs	r3, #1
 8009446:	b29a      	uxth	r2, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800944c:	e0bd      	b.n	80095ca <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009452:	b29b      	uxth	r3, r3
 8009454:	2b03      	cmp	r3, #3
 8009456:	d129      	bne.n	80094ac <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	685a      	ldr	r2, [r3, #4]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009466:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2b04      	cmp	r3, #4
 800946c:	d00a      	beq.n	8009484 <I2C_MasterReceive_BTF+0x86>
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2b02      	cmp	r3, #2
 8009472:	d007      	beq.n	8009484 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009482:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	691a      	ldr	r2, [r3, #16]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948e:	b2d2      	uxtb	r2, r2
 8009490:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009496:	1c5a      	adds	r2, r3, #1
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	3b01      	subs	r3, #1
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80094aa:	e08e      	b.n	80095ca <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d176      	bne.n	80095a4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d002      	beq.n	80094c2 <I2C_MasterReceive_BTF+0xc4>
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2b10      	cmp	r3, #16
 80094c0:	d108      	bne.n	80094d4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094d0:	601a      	str	r2, [r3, #0]
 80094d2:	e019      	b.n	8009508 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2b04      	cmp	r3, #4
 80094d8:	d002      	beq.n	80094e0 <I2C_MasterReceive_BTF+0xe2>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2b02      	cmp	r3, #2
 80094de:	d108      	bne.n	80094f2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80094ee:	601a      	str	r2, [r3, #0]
 80094f0:	e00a      	b.n	8009508 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2b10      	cmp	r3, #16
 80094f6:	d007      	beq.n	8009508 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009506:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	691a      	ldr	r2, [r3, #16]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009512:	b2d2      	uxtb	r2, r2
 8009514:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951a:	1c5a      	adds	r2, r3, #1
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009524:	b29b      	uxth	r3, r3
 8009526:	3b01      	subs	r3, #1
 8009528:	b29a      	uxth	r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	691a      	ldr	r2, [r3, #16]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009538:	b2d2      	uxtb	r2, r2
 800953a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009540:	1c5a      	adds	r2, r3, #1
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800954a:	b29b      	uxth	r3, r3
 800954c:	3b01      	subs	r3, #1
 800954e:	b29a      	uxth	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	685a      	ldr	r2, [r3, #4]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009562:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2220      	movs	r2, #32
 8009568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009572:	b2db      	uxtb	r3, r3
 8009574:	2b40      	cmp	r3, #64	; 0x40
 8009576:	d10a      	bne.n	800958e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f7ff fcba 	bl	8008f00 <HAL_I2C_MemRxCpltCallback>
}
 800958c:	e01d      	b.n	80095ca <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2212      	movs	r2, #18
 800959a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f7ff fc6f 	bl	8008e80 <HAL_I2C_MasterRxCpltCallback>
}
 80095a2:	e012      	b.n	80095ca <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	691a      	ldr	r2, [r3, #16]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ae:	b2d2      	uxtb	r2, r2
 80095b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b6:	1c5a      	adds	r2, r3, #1
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	3b01      	subs	r3, #1
 80095c4:	b29a      	uxth	r2, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80095ca:	bf00      	nop
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}

080095d2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80095d2:	b480      	push	{r7}
 80095d4:	b083      	sub	sp, #12
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	2b40      	cmp	r3, #64	; 0x40
 80095e4:	d117      	bne.n	8009616 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d109      	bne.n	8009602 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	461a      	mov	r2, r3
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80095fe:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8009600:	e067      	b.n	80096d2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009606:	b2db      	uxtb	r3, r3
 8009608:	f043 0301 	orr.w	r3, r3, #1
 800960c:	b2da      	uxtb	r2, r3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	611a      	str	r2, [r3, #16]
}
 8009614:	e05d      	b.n	80096d2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	691b      	ldr	r3, [r3, #16]
 800961a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800961e:	d133      	bne.n	8009688 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009626:	b2db      	uxtb	r3, r3
 8009628:	2b21      	cmp	r3, #33	; 0x21
 800962a:	d109      	bne.n	8009640 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009630:	b2db      	uxtb	r3, r3
 8009632:	461a      	mov	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800963c:	611a      	str	r2, [r3, #16]
 800963e:	e008      	b.n	8009652 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009644:	b2db      	uxtb	r3, r3
 8009646:	f043 0301 	orr.w	r3, r3, #1
 800964a:	b2da      	uxtb	r2, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009656:	2b00      	cmp	r3, #0
 8009658:	d004      	beq.n	8009664 <I2C_Master_SB+0x92>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800965e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009660:	2b00      	cmp	r3, #0
 8009662:	d108      	bne.n	8009676 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009668:	2b00      	cmp	r3, #0
 800966a:	d032      	beq.n	80096d2 <I2C_Master_SB+0x100>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009672:	2b00      	cmp	r3, #0
 8009674:	d02d      	beq.n	80096d2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	685a      	ldr	r2, [r3, #4]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009684:	605a      	str	r2, [r3, #4]
}
 8009686:	e024      	b.n	80096d2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800968c:	2b00      	cmp	r3, #0
 800968e:	d10e      	bne.n	80096ae <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009694:	b29b      	uxth	r3, r3
 8009696:	11db      	asrs	r3, r3, #7
 8009698:	b2db      	uxtb	r3, r3
 800969a:	f003 0306 	and.w	r3, r3, #6
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	f063 030f 	orn	r3, r3, #15
 80096a4:	b2da      	uxtb	r2, r3
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	611a      	str	r2, [r3, #16]
}
 80096ac:	e011      	b.n	80096d2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d10d      	bne.n	80096d2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	11db      	asrs	r3, r3, #7
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	f003 0306 	and.w	r3, r3, #6
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	f063 030e 	orn	r3, r3, #14
 80096ca:	b2da      	uxtb	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	611a      	str	r2, [r3, #16]
}
 80096d2:	bf00      	nop
 80096d4:	370c      	adds	r7, #12
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr

080096de <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80096de:	b480      	push	{r7}
 80096e0:	b083      	sub	sp, #12
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ea:	b2da      	uxtb	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d004      	beq.n	8009704 <I2C_Master_ADD10+0x26>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009700:	2b00      	cmp	r3, #0
 8009702:	d108      	bne.n	8009716 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009708:	2b00      	cmp	r3, #0
 800970a:	d00c      	beq.n	8009726 <I2C_Master_ADD10+0x48>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009712:	2b00      	cmp	r3, #0
 8009714:	d007      	beq.n	8009726 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	685a      	ldr	r2, [r3, #4]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009724:	605a      	str	r2, [r3, #4]
  }
}
 8009726:	bf00      	nop
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr

08009732 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8009732:	b480      	push	{r7}
 8009734:	b091      	sub	sp, #68	; 0x44
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009740:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009748:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800974e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009756:	b2db      	uxtb	r3, r3
 8009758:	2b22      	cmp	r3, #34	; 0x22
 800975a:	f040 8169 	bne.w	8009a30 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009762:	2b00      	cmp	r3, #0
 8009764:	d10f      	bne.n	8009786 <I2C_Master_ADDR+0x54>
 8009766:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800976a:	2b40      	cmp	r3, #64	; 0x40
 800976c:	d10b      	bne.n	8009786 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800976e:	2300      	movs	r3, #0
 8009770:	633b      	str	r3, [r7, #48]	; 0x30
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	695b      	ldr	r3, [r3, #20]
 8009778:	633b      	str	r3, [r7, #48]	; 0x30
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	699b      	ldr	r3, [r3, #24]
 8009780:	633b      	str	r3, [r7, #48]	; 0x30
 8009782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009784:	e160      	b.n	8009a48 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800978a:	2b00      	cmp	r3, #0
 800978c:	d11d      	bne.n	80097ca <I2C_Master_ADDR+0x98>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	691b      	ldr	r3, [r3, #16]
 8009792:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009796:	d118      	bne.n	80097ca <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009798:	2300      	movs	r3, #0
 800979a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	695b      	ldr	r3, [r3, #20]
 80097a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097bc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097c2:	1c5a      	adds	r2, r3, #1
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	651a      	str	r2, [r3, #80]	; 0x50
 80097c8:	e13e      	b.n	8009a48 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d113      	bne.n	80097fc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097d4:	2300      	movs	r3, #0
 80097d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	695b      	ldr	r3, [r3, #20]
 80097de:	62bb      	str	r3, [r7, #40]	; 0x28
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	699b      	ldr	r3, [r3, #24]
 80097e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80097e8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097f8:	601a      	str	r2, [r3, #0]
 80097fa:	e115      	b.n	8009a28 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009800:	b29b      	uxth	r3, r3
 8009802:	2b01      	cmp	r3, #1
 8009804:	f040 808a 	bne.w	800991c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8009808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800980e:	d137      	bne.n	8009880 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800981e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800982a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800982e:	d113      	bne.n	8009858 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	681a      	ldr	r2, [r3, #0]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800983e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009840:	2300      	movs	r3, #0
 8009842:	627b      	str	r3, [r7, #36]	; 0x24
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	695b      	ldr	r3, [r3, #20]
 800984a:	627b      	str	r3, [r7, #36]	; 0x24
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	699b      	ldr	r3, [r3, #24]
 8009852:	627b      	str	r3, [r7, #36]	; 0x24
 8009854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009856:	e0e7      	b.n	8009a28 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009858:	2300      	movs	r3, #0
 800985a:	623b      	str	r3, [r7, #32]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	695b      	ldr	r3, [r3, #20]
 8009862:	623b      	str	r3, [r7, #32]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	699b      	ldr	r3, [r3, #24]
 800986a:	623b      	str	r3, [r7, #32]
 800986c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800987c:	601a      	str	r2, [r3, #0]
 800987e:	e0d3      	b.n	8009a28 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8009880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009882:	2b08      	cmp	r3, #8
 8009884:	d02e      	beq.n	80098e4 <I2C_Master_ADDR+0x1b2>
 8009886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009888:	2b20      	cmp	r3, #32
 800988a:	d02b      	beq.n	80098e4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800988c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800988e:	2b12      	cmp	r3, #18
 8009890:	d102      	bne.n	8009898 <I2C_Master_ADDR+0x166>
 8009892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009894:	2b01      	cmp	r3, #1
 8009896:	d125      	bne.n	80098e4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989a:	2b04      	cmp	r3, #4
 800989c:	d00e      	beq.n	80098bc <I2C_Master_ADDR+0x18a>
 800989e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a0:	2b02      	cmp	r3, #2
 80098a2:	d00b      	beq.n	80098bc <I2C_Master_ADDR+0x18a>
 80098a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a6:	2b10      	cmp	r3, #16
 80098a8:	d008      	beq.n	80098bc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098b8:	601a      	str	r2, [r3, #0]
 80098ba:	e007      	b.n	80098cc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80098ca:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098cc:	2300      	movs	r3, #0
 80098ce:	61fb      	str	r3, [r7, #28]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	695b      	ldr	r3, [r3, #20]
 80098d6:	61fb      	str	r3, [r7, #28]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	699b      	ldr	r3, [r3, #24]
 80098de:	61fb      	str	r3, [r7, #28]
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	e0a1      	b.n	8009a28 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098f2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098f4:	2300      	movs	r3, #0
 80098f6:	61bb      	str	r3, [r7, #24]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	695b      	ldr	r3, [r3, #20]
 80098fe:	61bb      	str	r3, [r7, #24]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	699b      	ldr	r3, [r3, #24]
 8009906:	61bb      	str	r3, [r7, #24]
 8009908:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	681a      	ldr	r2, [r3, #0]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009918:	601a      	str	r2, [r3, #0]
 800991a:	e085      	b.n	8009a28 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009920:	b29b      	uxth	r3, r3
 8009922:	2b02      	cmp	r3, #2
 8009924:	d14d      	bne.n	80099c2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009928:	2b04      	cmp	r3, #4
 800992a:	d016      	beq.n	800995a <I2C_Master_ADDR+0x228>
 800992c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992e:	2b02      	cmp	r3, #2
 8009930:	d013      	beq.n	800995a <I2C_Master_ADDR+0x228>
 8009932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009934:	2b10      	cmp	r3, #16
 8009936:	d010      	beq.n	800995a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009946:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009956:	601a      	str	r2, [r3, #0]
 8009958:	e007      	b.n	800996a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009968:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009978:	d117      	bne.n	80099aa <I2C_Master_ADDR+0x278>
 800997a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009980:	d00b      	beq.n	800999a <I2C_Master_ADDR+0x268>
 8009982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009984:	2b01      	cmp	r3, #1
 8009986:	d008      	beq.n	800999a <I2C_Master_ADDR+0x268>
 8009988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800998a:	2b08      	cmp	r3, #8
 800998c:	d005      	beq.n	800999a <I2C_Master_ADDR+0x268>
 800998e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009990:	2b10      	cmp	r3, #16
 8009992:	d002      	beq.n	800999a <I2C_Master_ADDR+0x268>
 8009994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009996:	2b20      	cmp	r3, #32
 8009998:	d107      	bne.n	80099aa <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	685a      	ldr	r2, [r3, #4]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80099a8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099aa:	2300      	movs	r3, #0
 80099ac:	617b      	str	r3, [r7, #20]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	695b      	ldr	r3, [r3, #20]
 80099b4:	617b      	str	r3, [r7, #20]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	699b      	ldr	r3, [r3, #24]
 80099bc:	617b      	str	r3, [r7, #20]
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	e032      	b.n	8009a28 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80099d0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099e0:	d117      	bne.n	8009a12 <I2C_Master_ADDR+0x2e0>
 80099e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80099e8:	d00b      	beq.n	8009a02 <I2C_Master_ADDR+0x2d0>
 80099ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d008      	beq.n	8009a02 <I2C_Master_ADDR+0x2d0>
 80099f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f2:	2b08      	cmp	r3, #8
 80099f4:	d005      	beq.n	8009a02 <I2C_Master_ADDR+0x2d0>
 80099f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f8:	2b10      	cmp	r3, #16
 80099fa:	d002      	beq.n	8009a02 <I2C_Master_ADDR+0x2d0>
 80099fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099fe:	2b20      	cmp	r3, #32
 8009a00:	d107      	bne.n	8009a12 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	685a      	ldr	r2, [r3, #4]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009a10:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a12:	2300      	movs	r3, #0
 8009a14:	613b      	str	r3, [r7, #16]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	695b      	ldr	r3, [r3, #20]
 8009a1c:	613b      	str	r3, [r7, #16]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	699b      	ldr	r3, [r3, #24]
 8009a24:	613b      	str	r3, [r7, #16]
 8009a26:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8009a2e:	e00b      	b.n	8009a48 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a30:	2300      	movs	r3, #0
 8009a32:	60fb      	str	r3, [r7, #12]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	695b      	ldr	r3, [r3, #20]
 8009a3a:	60fb      	str	r3, [r7, #12]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	699b      	ldr	r3, [r3, #24]
 8009a42:	60fb      	str	r3, [r7, #12]
 8009a44:	68fb      	ldr	r3, [r7, #12]
}
 8009a46:	e7ff      	b.n	8009a48 <I2C_Master_ADDR+0x316>
 8009a48:	bf00      	nop
 8009a4a:	3744      	adds	r7, #68	; 0x44
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a62:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d02b      	beq.n	8009ac6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a72:	781a      	ldrb	r2, [r3, #0]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7e:	1c5a      	adds	r2, r3, #1
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	b29a      	uxth	r2, r3
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d114      	bne.n	8009ac6 <I2C_SlaveTransmit_TXE+0x72>
 8009a9c:	7bfb      	ldrb	r3, [r7, #15]
 8009a9e:	2b29      	cmp	r3, #41	; 0x29
 8009aa0:	d111      	bne.n	8009ac6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	685a      	ldr	r2, [r3, #4]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ab0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2221      	movs	r2, #33	; 0x21
 8009ab6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2228      	movs	r2, #40	; 0x28
 8009abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f7ff f9e7 	bl	8008e94 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009ac6:	bf00      	nop
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009ace:	b480      	push	{r7}
 8009ad0:	b083      	sub	sp, #12
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d011      	beq.n	8009b04 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae4:	781a      	ldrb	r2, [r3, #0]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af0:	1c5a      	adds	r2, r3, #1
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	3b01      	subs	r3, #1
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009b04:	bf00      	nop
 8009b06:	370c      	adds	r7, #12
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b1e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d02c      	beq.n	8009b84 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	691a      	ldr	r2, [r3, #16]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b34:	b2d2      	uxtb	r2, r2
 8009b36:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3c:	1c5a      	adds	r2, r3, #1
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d114      	bne.n	8009b84 <I2C_SlaveReceive_RXNE+0x74>
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
 8009b5c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b5e:	d111      	bne.n	8009b84 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	685a      	ldr	r2, [r3, #4]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b6e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2222      	movs	r2, #34	; 0x22
 8009b74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2228      	movs	r2, #40	; 0x28
 8009b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f7ff f992 	bl	8008ea8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009b84:	bf00      	nop
 8009b86:	3710      	adds	r7, #16
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d012      	beq.n	8009bc4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	691a      	ldr	r2, [r3, #16]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba8:	b2d2      	uxtb	r2, r2
 8009baa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb0:	1c5a      	adds	r2, r3, #1
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	b29a      	uxth	r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009bc4:	bf00      	nop
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009bea:	2b28      	cmp	r3, #40	; 0x28
 8009bec:	d127      	bne.n	8009c3e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	685a      	ldr	r2, [r3, #4]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bfc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	089b      	lsrs	r3, r3, #2
 8009c02:	f003 0301 	and.w	r3, r3, #1
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d101      	bne.n	8009c0e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	09db      	lsrs	r3, r3, #7
 8009c12:	f003 0301 	and.w	r3, r3, #1
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d103      	bne.n	8009c22 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	68db      	ldr	r3, [r3, #12]
 8009c1e:	81bb      	strh	r3, [r7, #12]
 8009c20:	e002      	b.n	8009c28 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	699b      	ldr	r3, [r3, #24]
 8009c26:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009c30:	89ba      	ldrh	r2, [r7, #12]
 8009c32:	7bfb      	ldrb	r3, [r7, #15]
 8009c34:	4619      	mov	r1, r3
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f7ff f940 	bl	8008ebc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009c3c:	e00e      	b.n	8009c5c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c3e:	2300      	movs	r3, #0
 8009c40:	60bb      	str	r3, [r7, #8]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	695b      	ldr	r3, [r3, #20]
 8009c48:	60bb      	str	r3, [r7, #8]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	699b      	ldr	r3, [r3, #24]
 8009c50:	60bb      	str	r3, [r7, #8]
 8009c52:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8009c5c:	bf00      	nop
 8009c5e:	3710      	adds	r7, #16
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c72:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	685a      	ldr	r2, [r3, #4]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009c82:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009c84:	2300      	movs	r3, #0
 8009c86:	60bb      	str	r3, [r7, #8]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	695b      	ldr	r3, [r3, #20]
 8009c8e:	60bb      	str	r3, [r7, #8]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f042 0201 	orr.w	r2, r2, #1
 8009c9e:	601a      	str	r2, [r3, #0]
 8009ca0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cb0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009cbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cc0:	d172      	bne.n	8009da8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009cc2:	7bfb      	ldrb	r3, [r7, #15]
 8009cc4:	2b22      	cmp	r3, #34	; 0x22
 8009cc6:	d002      	beq.n	8009cce <I2C_Slave_STOPF+0x6a>
 8009cc8:	7bfb      	ldrb	r3, [r7, #15]
 8009cca:	2b2a      	cmp	r3, #42	; 0x2a
 8009ccc:	d135      	bne.n	8009d3a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	b29a      	uxth	r2, r3
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d005      	beq.n	8009cf2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cea:	f043 0204 	orr.w	r2, r3, #4
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	685a      	ldr	r2, [r3, #4]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d00:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7fe f8dc 	bl	8007ec4 <HAL_DMA_GetState>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d049      	beq.n	8009da6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d16:	4a69      	ldr	r2, [pc, #420]	; (8009ebc <I2C_Slave_STOPF+0x258>)
 8009d18:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7fd ff24 	bl	8007b6c <HAL_DMA_Abort_IT>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d03d      	beq.n	8009da6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009d34:	4610      	mov	r0, r2
 8009d36:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009d38:	e035      	b.n	8009da6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d005      	beq.n	8009d5e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d56:	f043 0204 	orr.w	r2, r3, #4
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	685a      	ldr	r2, [r3, #4]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d6c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7fe f8a6 	bl	8007ec4 <HAL_DMA_GetState>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d014      	beq.n	8009da8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d82:	4a4e      	ldr	r2, [pc, #312]	; (8009ebc <I2C_Slave_STOPF+0x258>)
 8009d84:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7fd feee 	bl	8007b6c <HAL_DMA_Abort_IT>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d008      	beq.n	8009da8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009da0:	4610      	mov	r0, r2
 8009da2:	4798      	blx	r3
 8009da4:	e000      	b.n	8009da8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009da6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d03e      	beq.n	8009e30 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	695b      	ldr	r3, [r3, #20]
 8009db8:	f003 0304 	and.w	r3, r3, #4
 8009dbc:	2b04      	cmp	r3, #4
 8009dbe:	d112      	bne.n	8009de6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	691a      	ldr	r2, [r3, #16]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dca:	b2d2      	uxtb	r2, r2
 8009dcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd2:	1c5a      	adds	r2, r3, #1
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	3b01      	subs	r3, #1
 8009de0:	b29a      	uxth	r2, r3
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	695b      	ldr	r3, [r3, #20]
 8009dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009df0:	2b40      	cmp	r3, #64	; 0x40
 8009df2:	d112      	bne.n	8009e1a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	691a      	ldr	r2, [r3, #16]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfe:	b2d2      	uxtb	r2, r2
 8009e00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e06:	1c5a      	adds	r2, r3, #1
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	3b01      	subs	r3, #1
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d005      	beq.n	8009e30 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e28:	f043 0204 	orr.w	r2, r3, #4
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d003      	beq.n	8009e40 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 f8b3 	bl	8009fa4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8009e3e:	e039      	b.n	8009eb4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009e40:	7bfb      	ldrb	r3, [r7, #15]
 8009e42:	2b2a      	cmp	r3, #42	; 0x2a
 8009e44:	d109      	bne.n	8009e5a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2228      	movs	r2, #40	; 0x28
 8009e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f7ff f827 	bl	8008ea8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	2b28      	cmp	r3, #40	; 0x28
 8009e64:	d111      	bne.n	8009e8a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4a15      	ldr	r2, [pc, #84]	; (8009ec0 <I2C_Slave_STOPF+0x25c>)
 8009e6a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2220      	movs	r2, #32
 8009e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f7ff f828 	bl	8008ed8 <HAL_I2C_ListenCpltCallback>
}
 8009e88:	e014      	b.n	8009eb4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e8e:	2b22      	cmp	r3, #34	; 0x22
 8009e90:	d002      	beq.n	8009e98 <I2C_Slave_STOPF+0x234>
 8009e92:	7bfb      	ldrb	r3, [r7, #15]
 8009e94:	2b22      	cmp	r3, #34	; 0x22
 8009e96:	d10d      	bne.n	8009eb4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2220      	movs	r2, #32
 8009ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f7fe fffa 	bl	8008ea8 <HAL_I2C_SlaveRxCpltCallback>
}
 8009eb4:	bf00      	nop
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	0800a335 	.word	0x0800a335
 8009ec0:	ffff0000 	.word	0xffff0000

08009ec4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	2b08      	cmp	r3, #8
 8009ede:	d002      	beq.n	8009ee6 <I2C_Slave_AF+0x22>
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	2b20      	cmp	r3, #32
 8009ee4:	d129      	bne.n	8009f3a <I2C_Slave_AF+0x76>
 8009ee6:	7bfb      	ldrb	r3, [r7, #15]
 8009ee8:	2b28      	cmp	r3, #40	; 0x28
 8009eea:	d126      	bne.n	8009f3a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4a2c      	ldr	r2, [pc, #176]	; (8009fa0 <I2C_Slave_AF+0xdc>)
 8009ef0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	685a      	ldr	r2, [r3, #4]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009f00:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009f0a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f1a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2220      	movs	r2, #32
 8009f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f7fe ffd0 	bl	8008ed8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8009f38:	e02e      	b.n	8009f98 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8009f3a:	7bfb      	ldrb	r3, [r7, #15]
 8009f3c:	2b21      	cmp	r3, #33	; 0x21
 8009f3e:	d126      	bne.n	8009f8e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	4a17      	ldr	r2, [pc, #92]	; (8009fa0 <I2C_Slave_AF+0xdc>)
 8009f44:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2221      	movs	r2, #33	; 0x21
 8009f4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2220      	movs	r2, #32
 8009f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	685a      	ldr	r2, [r3, #4]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009f6a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009f74:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f84:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f7fe ff84 	bl	8008e94 <HAL_I2C_SlaveTxCpltCallback>
}
 8009f8c:	e004      	b.n	8009f98 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009f96:	615a      	str	r2, [r3, #20]
}
 8009f98:	bf00      	nop
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	ffff0000 	.word	0xffff0000

08009fa4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fb2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009fba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009fbc:	7bbb      	ldrb	r3, [r7, #14]
 8009fbe:	2b10      	cmp	r3, #16
 8009fc0:	d002      	beq.n	8009fc8 <I2C_ITError+0x24>
 8009fc2:	7bbb      	ldrb	r3, [r7, #14]
 8009fc4:	2b40      	cmp	r3, #64	; 0x40
 8009fc6:	d10a      	bne.n	8009fde <I2C_ITError+0x3a>
 8009fc8:	7bfb      	ldrb	r3, [r7, #15]
 8009fca:	2b22      	cmp	r3, #34	; 0x22
 8009fcc:	d107      	bne.n	8009fde <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009fdc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009fde:	7bfb      	ldrb	r3, [r7, #15]
 8009fe0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009fe4:	2b28      	cmp	r3, #40	; 0x28
 8009fe6:	d107      	bne.n	8009ff8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2228      	movs	r2, #40	; 0x28
 8009ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009ff6:	e015      	b.n	800a024 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a002:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a006:	d00a      	beq.n	800a01e <I2C_ITError+0x7a>
 800a008:	7bfb      	ldrb	r3, [r7, #15]
 800a00a:	2b60      	cmp	r3, #96	; 0x60
 800a00c:	d007      	beq.n	800a01e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2220      	movs	r2, #32
 800a012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2200      	movs	r2, #0
 800a01a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a02e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a032:	d162      	bne.n	800a0fa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	685a      	ldr	r2, [r3, #4]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a042:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a048:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d020      	beq.n	800a094 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a056:	4a6a      	ldr	r2, [pc, #424]	; (800a200 <I2C_ITError+0x25c>)
 800a058:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a05e:	4618      	mov	r0, r3
 800a060:	f7fd fd84 	bl	8007b6c <HAL_DMA_Abort_IT>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	f000 8089 	beq.w	800a17e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f022 0201 	bic.w	r2, r2, #1
 800a07a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2220      	movs	r2, #32
 800a080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a08e:	4610      	mov	r0, r2
 800a090:	4798      	blx	r3
 800a092:	e074      	b.n	800a17e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a098:	4a59      	ldr	r2, [pc, #356]	; (800a200 <I2C_ITError+0x25c>)
 800a09a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f7fd fd63 	bl	8007b6c <HAL_DMA_Abort_IT>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d068      	beq.n	800a17e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	695b      	ldr	r3, [r3, #20]
 800a0b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0b6:	2b40      	cmp	r3, #64	; 0x40
 800a0b8:	d10b      	bne.n	800a0d2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	691a      	ldr	r2, [r3, #16]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c4:	b2d2      	uxtb	r2, r2
 800a0c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0cc:	1c5a      	adds	r2, r3, #1
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f022 0201 	bic.w	r2, r2, #1
 800a0e0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2220      	movs	r2, #32
 800a0e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a0f4:	4610      	mov	r0, r2
 800a0f6:	4798      	blx	r3
 800a0f8:	e041      	b.n	800a17e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a100:	b2db      	uxtb	r3, r3
 800a102:	2b60      	cmp	r3, #96	; 0x60
 800a104:	d125      	bne.n	800a152 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2220      	movs	r2, #32
 800a10a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	695b      	ldr	r3, [r3, #20]
 800a11a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a11e:	2b40      	cmp	r3, #64	; 0x40
 800a120:	d10b      	bne.n	800a13a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	691a      	ldr	r2, [r3, #16]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a12c:	b2d2      	uxtb	r2, r2
 800a12e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a134:	1c5a      	adds	r2, r3, #1
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f022 0201 	bic.w	r2, r2, #1
 800a148:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f7fe feec 	bl	8008f28 <HAL_I2C_AbortCpltCallback>
 800a150:	e015      	b.n	800a17e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	695b      	ldr	r3, [r3, #20]
 800a158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a15c:	2b40      	cmp	r3, #64	; 0x40
 800a15e:	d10b      	bne.n	800a178 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	691a      	ldr	r2, [r3, #16]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16a:	b2d2      	uxtb	r2, r2
 800a16c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a172:	1c5a      	adds	r2, r3, #1
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f7fe fecb 	bl	8008f14 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a182:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	f003 0301 	and.w	r3, r3, #1
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d10e      	bne.n	800a1ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a194:	2b00      	cmp	r3, #0
 800a196:	d109      	bne.n	800a1ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d104      	bne.n	800a1ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d007      	beq.n	800a1bc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	685a      	ldr	r2, [r3, #4]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a1ba:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1c2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c8:	f003 0304 	and.w	r3, r3, #4
 800a1cc:	2b04      	cmp	r3, #4
 800a1ce:	d113      	bne.n	800a1f8 <I2C_ITError+0x254>
 800a1d0:	7bfb      	ldrb	r3, [r7, #15]
 800a1d2:	2b28      	cmp	r3, #40	; 0x28
 800a1d4:	d110      	bne.n	800a1f8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a0a      	ldr	r2, [pc, #40]	; (800a204 <I2C_ITError+0x260>)
 800a1da:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2220      	movs	r2, #32
 800a1e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f7fe fe70 	bl	8008ed8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a1f8:	bf00      	nop
 800a1fa:	3710      	adds	r7, #16
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	0800a335 	.word	0x0800a335
 800a204:	ffff0000 	.word	0xffff0000

0800a208 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b088      	sub	sp, #32
 800a20c:	af02      	add	r7, sp, #8
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	4608      	mov	r0, r1
 800a212:	4611      	mov	r1, r2
 800a214:	461a      	mov	r2, r3
 800a216:	4603      	mov	r3, r0
 800a218:	817b      	strh	r3, [r7, #10]
 800a21a:	460b      	mov	r3, r1
 800a21c:	813b      	strh	r3, [r7, #8]
 800a21e:	4613      	mov	r3, r2
 800a220:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a230:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a234:	9300      	str	r3, [sp, #0]
 800a236:	6a3b      	ldr	r3, [r7, #32]
 800a238:	2200      	movs	r2, #0
 800a23a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	f000 f920 	bl	800a484 <I2C_WaitOnFlagUntilTimeout>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00d      	beq.n	800a266 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a258:	d103      	bne.n	800a262 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a260:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a262:	2303      	movs	r3, #3
 800a264:	e05f      	b.n	800a326 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a266:	897b      	ldrh	r3, [r7, #10]
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	461a      	mov	r2, r3
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a274:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a278:	6a3a      	ldr	r2, [r7, #32]
 800a27a:	492d      	ldr	r1, [pc, #180]	; (800a330 <I2C_RequestMemoryWrite+0x128>)
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f000 f958 	bl	800a532 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d001      	beq.n	800a28c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	e04c      	b.n	800a326 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a28c:	2300      	movs	r3, #0
 800a28e:	617b      	str	r3, [r7, #20]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	695b      	ldr	r3, [r3, #20]
 800a296:	617b      	str	r3, [r7, #20]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	699b      	ldr	r3, [r3, #24]
 800a29e:	617b      	str	r3, [r7, #20]
 800a2a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2a4:	6a39      	ldr	r1, [r7, #32]
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f000 f9c2 	bl	800a630 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00d      	beq.n	800a2ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b6:	2b04      	cmp	r3, #4
 800a2b8:	d107      	bne.n	800a2ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e02b      	b.n	800a326 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a2ce:	88fb      	ldrh	r3, [r7, #6]
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d105      	bne.n	800a2e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a2d4:	893b      	ldrh	r3, [r7, #8]
 800a2d6:	b2da      	uxtb	r2, r3
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	611a      	str	r2, [r3, #16]
 800a2de:	e021      	b.n	800a324 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a2e0:	893b      	ldrh	r3, [r7, #8]
 800a2e2:	0a1b      	lsrs	r3, r3, #8
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	b2da      	uxtb	r2, r3
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2f0:	6a39      	ldr	r1, [r7, #32]
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f000 f99c 	bl	800a630 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00d      	beq.n	800a31a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a302:	2b04      	cmp	r3, #4
 800a304:	d107      	bne.n	800a316 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a314:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a316:	2301      	movs	r3, #1
 800a318:	e005      	b.n	800a326 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a31a:	893b      	ldrh	r3, [r7, #8]
 800a31c:	b2da      	uxtb	r2, r3
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a324:	2300      	movs	r3, #0
}
 800a326:	4618      	mov	r0, r3
 800a328:	3718      	adds	r7, #24
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	00010002 	.word	0x00010002

0800a334 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b086      	sub	sp, #24
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a33c:	2300      	movs	r3, #0
 800a33e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a344:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a34c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a34e:	4b4b      	ldr	r3, [pc, #300]	; (800a47c <I2C_DMAAbort+0x148>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	08db      	lsrs	r3, r3, #3
 800a354:	4a4a      	ldr	r2, [pc, #296]	; (800a480 <I2C_DMAAbort+0x14c>)
 800a356:	fba2 2303 	umull	r2, r3, r2, r3
 800a35a:	0a1a      	lsrs	r2, r3, #8
 800a35c:	4613      	mov	r3, r2
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	4413      	add	r3, r2
 800a362:	00da      	lsls	r2, r3, #3
 800a364:	1ad3      	subs	r3, r2, r3
 800a366:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d106      	bne.n	800a37c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a372:	f043 0220 	orr.w	r2, r3, #32
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800a37a:	e00a      	b.n	800a392 <I2C_DMAAbort+0x5e>
    }
    count--;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	3b01      	subs	r3, #1
 800a380:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a38c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a390:	d0ea      	beq.n	800a368 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a396:	2b00      	cmp	r3, #0
 800a398:	d003      	beq.n	800a3a2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a39e:	2200      	movs	r2, #0
 800a3a0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d003      	beq.n	800a3b2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3c0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d003      	beq.n	800a3d8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d003      	beq.n	800a3e8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f022 0201 	bic.w	r2, r2, #1
 800a3f6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	2b60      	cmp	r3, #96	; 0x60
 800a402:	d10e      	bne.n	800a422 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	2220      	movs	r2, #32
 800a408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	2200      	movs	r2, #0
 800a418:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a41a:	6978      	ldr	r0, [r7, #20]
 800a41c:	f7fe fd84 	bl	8008f28 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a420:	e027      	b.n	800a472 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a422:	7cfb      	ldrb	r3, [r7, #19]
 800a424:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a428:	2b28      	cmp	r3, #40	; 0x28
 800a42a:	d117      	bne.n	800a45c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f042 0201 	orr.w	r2, r2, #1
 800a43a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a44a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	2200      	movs	r2, #0
 800a450:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	2228      	movs	r2, #40	; 0x28
 800a456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a45a:	e007      	b.n	800a46c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	2220      	movs	r2, #32
 800a460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	2200      	movs	r2, #0
 800a468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800a46c:	6978      	ldr	r0, [r7, #20]
 800a46e:	f7fe fd51 	bl	8008f14 <HAL_I2C_ErrorCallback>
}
 800a472:	bf00      	nop
 800a474:	3718      	adds	r7, #24
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	20000008 	.word	0x20000008
 800a480:	14f8b589 	.word	0x14f8b589

0800a484 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	603b      	str	r3, [r7, #0]
 800a490:	4613      	mov	r3, r2
 800a492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a494:	e025      	b.n	800a4e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a49c:	d021      	beq.n	800a4e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a49e:	f7fc fcf7 	bl	8006e90 <HAL_GetTick>
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	69bb      	ldr	r3, [r7, #24]
 800a4a6:	1ad3      	subs	r3, r2, r3
 800a4a8:	683a      	ldr	r2, [r7, #0]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d302      	bcc.n	800a4b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d116      	bne.n	800a4e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2220      	movs	r2, #32
 800a4be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ce:	f043 0220 	orr.w	r2, r3, #32
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e023      	b.n	800a52a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	0c1b      	lsrs	r3, r3, #16
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d10d      	bne.n	800a508 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	695b      	ldr	r3, [r3, #20]
 800a4f2:	43da      	mvns	r2, r3
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	4013      	ands	r3, r2
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	bf0c      	ite	eq
 800a4fe:	2301      	moveq	r3, #1
 800a500:	2300      	movne	r3, #0
 800a502:	b2db      	uxtb	r3, r3
 800a504:	461a      	mov	r2, r3
 800a506:	e00c      	b.n	800a522 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	699b      	ldr	r3, [r3, #24]
 800a50e:	43da      	mvns	r2, r3
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	4013      	ands	r3, r2
 800a514:	b29b      	uxth	r3, r3
 800a516:	2b00      	cmp	r3, #0
 800a518:	bf0c      	ite	eq
 800a51a:	2301      	moveq	r3, #1
 800a51c:	2300      	movne	r3, #0
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	461a      	mov	r2, r3
 800a522:	79fb      	ldrb	r3, [r7, #7]
 800a524:	429a      	cmp	r2, r3
 800a526:	d0b6      	beq.n	800a496 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a528:	2300      	movs	r3, #0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3710      	adds	r7, #16
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}

0800a532 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a532:	b580      	push	{r7, lr}
 800a534:	b084      	sub	sp, #16
 800a536:	af00      	add	r7, sp, #0
 800a538:	60f8      	str	r0, [r7, #12]
 800a53a:	60b9      	str	r1, [r7, #8]
 800a53c:	607a      	str	r2, [r7, #4]
 800a53e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a540:	e051      	b.n	800a5e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	695b      	ldr	r3, [r3, #20]
 800a548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a54c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a550:	d123      	bne.n	800a59a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a560:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a56a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2200      	movs	r2, #0
 800a570:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2220      	movs	r2, #32
 800a576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a586:	f043 0204 	orr.w	r2, r3, #4
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2200      	movs	r2, #0
 800a592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a596:	2301      	movs	r3, #1
 800a598:	e046      	b.n	800a628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a0:	d021      	beq.n	800a5e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5a2:	f7fc fc75 	bl	8006e90 <HAL_GetTick>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	1ad3      	subs	r3, r2, r3
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d302      	bcc.n	800a5b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d116      	bne.n	800a5e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2220      	movs	r2, #32
 800a5c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d2:	f043 0220 	orr.w	r2, r3, #32
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e020      	b.n	800a628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	0c1b      	lsrs	r3, r3, #16
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d10c      	bne.n	800a60a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	695b      	ldr	r3, [r3, #20]
 800a5f6:	43da      	mvns	r2, r3
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	4013      	ands	r3, r2
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	bf14      	ite	ne
 800a602:	2301      	movne	r3, #1
 800a604:	2300      	moveq	r3, #0
 800a606:	b2db      	uxtb	r3, r3
 800a608:	e00b      	b.n	800a622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	699b      	ldr	r3, [r3, #24]
 800a610:	43da      	mvns	r2, r3
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	4013      	ands	r3, r2
 800a616:	b29b      	uxth	r3, r3
 800a618:	2b00      	cmp	r3, #0
 800a61a:	bf14      	ite	ne
 800a61c:	2301      	movne	r3, #1
 800a61e:	2300      	moveq	r3, #0
 800a620:	b2db      	uxtb	r3, r3
 800a622:	2b00      	cmp	r3, #0
 800a624:	d18d      	bne.n	800a542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a626:	2300      	movs	r3, #0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3710      	adds	r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a63c:	e02d      	b.n	800a69a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a63e:	68f8      	ldr	r0, [r7, #12]
 800a640:	f000 f8aa 	bl	800a798 <I2C_IsAcknowledgeFailed>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d001      	beq.n	800a64e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	e02d      	b.n	800a6aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a654:	d021      	beq.n	800a69a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a656:	f7fc fc1b 	bl	8006e90 <HAL_GetTick>
 800a65a:	4602      	mov	r2, r0
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	1ad3      	subs	r3, r2, r3
 800a660:	68ba      	ldr	r2, [r7, #8]
 800a662:	429a      	cmp	r2, r3
 800a664:	d302      	bcc.n	800a66c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d116      	bne.n	800a69a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2200      	movs	r2, #0
 800a670:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2220      	movs	r2, #32
 800a676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a686:	f043 0220 	orr.w	r2, r3, #32
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2200      	movs	r2, #0
 800a692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	e007      	b.n	800a6aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	695b      	ldr	r3, [r3, #20]
 800a6a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6a4:	2b80      	cmp	r3, #128	; 0x80
 800a6a6:	d1ca      	bne.n	800a63e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a6a8:	2300      	movs	r3, #0
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3710      	adds	r7, #16
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b084      	sub	sp, #16
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	60f8      	str	r0, [r7, #12]
 800a6ba:	60b9      	str	r1, [r7, #8]
 800a6bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a6be:	e02d      	b.n	800a71c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a6c0:	68f8      	ldr	r0, [r7, #12]
 800a6c2:	f000 f869 	bl	800a798 <I2C_IsAcknowledgeFailed>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d001      	beq.n	800a6d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	e02d      	b.n	800a72c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d6:	d021      	beq.n	800a71c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6d8:	f7fc fbda 	bl	8006e90 <HAL_GetTick>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	1ad3      	subs	r3, r2, r3
 800a6e2:	68ba      	ldr	r2, [r7, #8]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d302      	bcc.n	800a6ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d116      	bne.n	800a71c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2220      	movs	r2, #32
 800a6f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a708:	f043 0220 	orr.w	r2, r3, #32
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2200      	movs	r2, #0
 800a714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	e007      	b.n	800a72c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	695b      	ldr	r3, [r3, #20]
 800a722:	f003 0304 	and.w	r3, r3, #4
 800a726:	2b04      	cmp	r3, #4
 800a728:	d1ca      	bne.n	800a6c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a72a:	2300      	movs	r3, #0
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3710      	adds	r7, #16
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800a734:	b480      	push	{r7}
 800a736:	b085      	sub	sp, #20
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a73c:	2300      	movs	r3, #0
 800a73e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800a740:	4b13      	ldr	r3, [pc, #76]	; (800a790 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	08db      	lsrs	r3, r3, #3
 800a746:	4a13      	ldr	r2, [pc, #76]	; (800a794 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800a748:	fba2 2303 	umull	r2, r3, r2, r3
 800a74c:	0a1a      	lsrs	r2, r3, #8
 800a74e:	4613      	mov	r3, r2
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	4413      	add	r3, r2
 800a754:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	3b01      	subs	r3, #1
 800a75a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d107      	bne.n	800a772 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a766:	f043 0220 	orr.w	r2, r3, #32
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a76e:	2301      	movs	r3, #1
 800a770:	e008      	b.n	800a784 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a77c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a780:	d0e9      	beq.n	800a756 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3714      	adds	r7, #20
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr
 800a790:	20000008 	.word	0x20000008
 800a794:	14f8b589 	.word	0x14f8b589

0800a798 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	695b      	ldr	r3, [r3, #20]
 800a7a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7ae:	d11b      	bne.n	800a7e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a7b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2220      	movs	r2, #32
 800a7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d4:	f043 0204 	orr.w	r2, r3, #4
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	e000      	b.n	800a7ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a7e8:	2300      	movs	r3, #0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	370c      	adds	r7, #12
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr

0800a7f6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800a7f6:	b480      	push	{r7}
 800a7f8:	b083      	sub	sp, #12
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a802:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800a806:	d103      	bne.n	800a810 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800a80e:	e007      	b.n	800a820 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a814:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800a818:	d102      	bne.n	800a820 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2208      	movs	r2, #8
 800a81e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a820:	bf00      	nop
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b086      	sub	sp, #24
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d101      	bne.n	800a83e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a83a:	2301      	movs	r3, #1
 800a83c:	e267      	b.n	800ad0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f003 0301 	and.w	r3, r3, #1
 800a846:	2b00      	cmp	r3, #0
 800a848:	d075      	beq.n	800a936 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a84a:	4b88      	ldr	r3, [pc, #544]	; (800aa6c <HAL_RCC_OscConfig+0x240>)
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	f003 030c 	and.w	r3, r3, #12
 800a852:	2b04      	cmp	r3, #4
 800a854:	d00c      	beq.n	800a870 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a856:	4b85      	ldr	r3, [pc, #532]	; (800aa6c <HAL_RCC_OscConfig+0x240>)
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a85e:	2b08      	cmp	r3, #8
 800a860:	d112      	bne.n	800a888 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a862:	4b82      	ldr	r3, [pc, #520]	; (800aa6c <HAL_RCC_OscConfig+0x240>)
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a86a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a86e:	d10b      	bne.n	800a888 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a870:	4b7e      	ldr	r3, [pc, #504]	; (800aa6c <HAL_RCC_OscConfig+0x240>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d05b      	beq.n	800a934 <HAL_RCC_OscConfig+0x108>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d157      	bne.n	800a934 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a884:	2301      	movs	r3, #1
 800a886:	e242      	b.n	800ad0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a890:	d106      	bne.n	800a8a0 <HAL_RCC_OscConfig+0x74>
 800a892:	4b76      	ldr	r3, [pc, #472]	; (800aa6c <HAL_RCC_OscConfig+0x240>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a75      	ldr	r2, [pc, #468]	; (800aa6c <HAL_RCC_OscConfig+0x240>)
 800a898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a89c:	6013      	str	r3, [r2, #0]
 800a89e:	e01d      	b.n	800a8dc <HAL_RCC_OscConfig+0xb0>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a8a8:	d10c      	bne.n	800a8c4 <HAL_RCC_OscConfig+0x98>
 800a8aa:	4b70      	ldr	r3, [pc, #448]	; (800aa6c <HAL_RCC_OscConfig+0x240>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4a6f      	ldr	r2, [pc, #444]	; (800aa6c <HAL_RCC_OscConfig+0x240>)
 800a8b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a8b4:	6013      	str	r3, [r2, #0]
 800a8b6:	4b6d      	ldr	r3, [pc, #436]	; (800aa6c <HAL_RCC_OscConfig+0x240>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a6c      	ldr	r2, [pc, #432]	; (800aa6c <HAL_RCC_OscConfig+0x240>)
 800a8bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8c0:	6013      	str	r3, [r2, #0]
 800a8c2:	e00b      	b.n	800a8dc <HAL_RCC_OscConfig+0xb0>
 800a8c4:	4b69      	ldr	r3, [pc, #420]	; (800aa6c <HAL_RCC_OscConfig+0x240>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a68      	ldr	r2, [pc, #416]	; (800aa6c <HAL_RCC_OscConfig+0x240>)
 800a8ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8ce:	6013      	str	r3, [r2, #0]
 800a8d0:	4b66      	ldr	r3, [pc, #408]	; (800aa6c <HAL_RCC_OscConfig+0x240>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a65      	ldr	r2, [pc, #404]	; (800aa6c <HAL_RCC_OscConfig+0x240>)
 800a8d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d013      	beq.n	800a90c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8e4:	f7fc fad4 	bl	8006e90 <HAL_GetTick>
 800a8e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8ea:	e008      	b.n	800a8fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a8ec:	f7fc fad0 	bl	8006e90 <HAL_GetTick>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	1ad3      	subs	r3, r2, r3
 800a8f6:	2b64      	cmp	r3, #100	; 0x64
 800a8f8:	d901      	bls.n	800a8fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a8fa:	2303      	movs	r3, #3
 800a8fc:	e207      	b.n	800ad0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8fe:	4b5b      	ldr	r3, [pc, #364]	; (800aa6c <HAL_RCC_OscConfig+0x240>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a906:	2b00      	cmp	r3, #0
 800a908:	d0f0      	beq.n	800a8ec <HAL_RCC_OscConfig+0xc0>
 800a90a:	e014      	b.n	800a936 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a90c:	f7fc fac0 	bl	8006e90 <HAL_GetTick>
 800a910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a912:	e008      	b.n	800a926 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a914:	f7fc fabc 	bl	8006e90 <HAL_GetTick>
 800a918:	4602      	mov	r2, r0
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	1ad3      	subs	r3, r2, r3
 800a91e:	2b64      	cmp	r3, #100	; 0x64
 800a920:	d901      	bls.n	800a926 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a922:	2303      	movs	r3, #3
 800a924:	e1f3      	b.n	800ad0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a926:	4b51      	ldr	r3, [pc, #324]	; (800aa6c <HAL_RCC_OscConfig+0x240>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d1f0      	bne.n	800a914 <HAL_RCC_OscConfig+0xe8>
 800a932:	e000      	b.n	800a936 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f003 0302 	and.w	r3, r3, #2
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d063      	beq.n	800aa0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a942:	4b4a      	ldr	r3, [pc, #296]	; (800aa6c <HAL_RCC_OscConfig+0x240>)
 800a944:	689b      	ldr	r3, [r3, #8]
 800a946:	f003 030c 	and.w	r3, r3, #12
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d00b      	beq.n	800a966 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a94e:	4b47      	ldr	r3, [pc, #284]	; (800aa6c <HAL_RCC_OscConfig+0x240>)
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a956:	2b08      	cmp	r3, #8
 800a958:	d11c      	bne.n	800a994 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a95a:	4b44      	ldr	r3, [pc, #272]	; (800aa6c <HAL_RCC_OscConfig+0x240>)
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a962:	2b00      	cmp	r3, #0
 800a964:	d116      	bne.n	800a994 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a966:	4b41      	ldr	r3, [pc, #260]	; (800aa6c <HAL_RCC_OscConfig+0x240>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f003 0302 	and.w	r3, r3, #2
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d005      	beq.n	800a97e <HAL_RCC_OscConfig+0x152>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	68db      	ldr	r3, [r3, #12]
 800a976:	2b01      	cmp	r3, #1
 800a978:	d001      	beq.n	800a97e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a97a:	2301      	movs	r3, #1
 800a97c:	e1c7      	b.n	800ad0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a97e:	4b3b      	ldr	r3, [pc, #236]	; (800aa6c <HAL_RCC_OscConfig+0x240>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	691b      	ldr	r3, [r3, #16]
 800a98a:	00db      	lsls	r3, r3, #3
 800a98c:	4937      	ldr	r1, [pc, #220]	; (800aa6c <HAL_RCC_OscConfig+0x240>)
 800a98e:	4313      	orrs	r3, r2
 800a990:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a992:	e03a      	b.n	800aa0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d020      	beq.n	800a9de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a99c:	4b34      	ldr	r3, [pc, #208]	; (800aa70 <HAL_RCC_OscConfig+0x244>)
 800a99e:	2201      	movs	r2, #1
 800a9a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9a2:	f7fc fa75 	bl	8006e90 <HAL_GetTick>
 800a9a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9a8:	e008      	b.n	800a9bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a9aa:	f7fc fa71 	bl	8006e90 <HAL_GetTick>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	1ad3      	subs	r3, r2, r3
 800a9b4:	2b02      	cmp	r3, #2
 800a9b6:	d901      	bls.n	800a9bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a9b8:	2303      	movs	r3, #3
 800a9ba:	e1a8      	b.n	800ad0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9bc:	4b2b      	ldr	r3, [pc, #172]	; (800aa6c <HAL_RCC_OscConfig+0x240>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f003 0302 	and.w	r3, r3, #2
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d0f0      	beq.n	800a9aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9c8:	4b28      	ldr	r3, [pc, #160]	; (800aa6c <HAL_RCC_OscConfig+0x240>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	691b      	ldr	r3, [r3, #16]
 800a9d4:	00db      	lsls	r3, r3, #3
 800a9d6:	4925      	ldr	r1, [pc, #148]	; (800aa6c <HAL_RCC_OscConfig+0x240>)
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	600b      	str	r3, [r1, #0]
 800a9dc:	e015      	b.n	800aa0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a9de:	4b24      	ldr	r3, [pc, #144]	; (800aa70 <HAL_RCC_OscConfig+0x244>)
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9e4:	f7fc fa54 	bl	8006e90 <HAL_GetTick>
 800a9e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a9ea:	e008      	b.n	800a9fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a9ec:	f7fc fa50 	bl	8006e90 <HAL_GetTick>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	1ad3      	subs	r3, r2, r3
 800a9f6:	2b02      	cmp	r3, #2
 800a9f8:	d901      	bls.n	800a9fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a9fa:	2303      	movs	r3, #3
 800a9fc:	e187      	b.n	800ad0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a9fe:	4b1b      	ldr	r3, [pc, #108]	; (800aa6c <HAL_RCC_OscConfig+0x240>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f003 0302 	and.w	r3, r3, #2
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d1f0      	bne.n	800a9ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f003 0308 	and.w	r3, r3, #8
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d036      	beq.n	800aa84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	695b      	ldr	r3, [r3, #20]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d016      	beq.n	800aa4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa1e:	4b15      	ldr	r3, [pc, #84]	; (800aa74 <HAL_RCC_OscConfig+0x248>)
 800aa20:	2201      	movs	r2, #1
 800aa22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa24:	f7fc fa34 	bl	8006e90 <HAL_GetTick>
 800aa28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa2a:	e008      	b.n	800aa3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aa2c:	f7fc fa30 	bl	8006e90 <HAL_GetTick>
 800aa30:	4602      	mov	r2, r0
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	1ad3      	subs	r3, r2, r3
 800aa36:	2b02      	cmp	r3, #2
 800aa38:	d901      	bls.n	800aa3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800aa3a:	2303      	movs	r3, #3
 800aa3c:	e167      	b.n	800ad0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa3e:	4b0b      	ldr	r3, [pc, #44]	; (800aa6c <HAL_RCC_OscConfig+0x240>)
 800aa40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa42:	f003 0302 	and.w	r3, r3, #2
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d0f0      	beq.n	800aa2c <HAL_RCC_OscConfig+0x200>
 800aa4a:	e01b      	b.n	800aa84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa4c:	4b09      	ldr	r3, [pc, #36]	; (800aa74 <HAL_RCC_OscConfig+0x248>)
 800aa4e:	2200      	movs	r2, #0
 800aa50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa52:	f7fc fa1d 	bl	8006e90 <HAL_GetTick>
 800aa56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa58:	e00e      	b.n	800aa78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aa5a:	f7fc fa19 	bl	8006e90 <HAL_GetTick>
 800aa5e:	4602      	mov	r2, r0
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	1ad3      	subs	r3, r2, r3
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	d907      	bls.n	800aa78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800aa68:	2303      	movs	r3, #3
 800aa6a:	e150      	b.n	800ad0e <HAL_RCC_OscConfig+0x4e2>
 800aa6c:	40023800 	.word	0x40023800
 800aa70:	42470000 	.word	0x42470000
 800aa74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa78:	4b88      	ldr	r3, [pc, #544]	; (800ac9c <HAL_RCC_OscConfig+0x470>)
 800aa7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa7c:	f003 0302 	and.w	r3, r3, #2
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d1ea      	bne.n	800aa5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f003 0304 	and.w	r3, r3, #4
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f000 8097 	beq.w	800abc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aa92:	2300      	movs	r3, #0
 800aa94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aa96:	4b81      	ldr	r3, [pc, #516]	; (800ac9c <HAL_RCC_OscConfig+0x470>)
 800aa98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d10f      	bne.n	800aac2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	60bb      	str	r3, [r7, #8]
 800aaa6:	4b7d      	ldr	r3, [pc, #500]	; (800ac9c <HAL_RCC_OscConfig+0x470>)
 800aaa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaaa:	4a7c      	ldr	r2, [pc, #496]	; (800ac9c <HAL_RCC_OscConfig+0x470>)
 800aaac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aab0:	6413      	str	r3, [r2, #64]	; 0x40
 800aab2:	4b7a      	ldr	r3, [pc, #488]	; (800ac9c <HAL_RCC_OscConfig+0x470>)
 800aab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aaba:	60bb      	str	r3, [r7, #8]
 800aabc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aabe:	2301      	movs	r3, #1
 800aac0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aac2:	4b77      	ldr	r3, [pc, #476]	; (800aca0 <HAL_RCC_OscConfig+0x474>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d118      	bne.n	800ab00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aace:	4b74      	ldr	r3, [pc, #464]	; (800aca0 <HAL_RCC_OscConfig+0x474>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a73      	ldr	r2, [pc, #460]	; (800aca0 <HAL_RCC_OscConfig+0x474>)
 800aad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aada:	f7fc f9d9 	bl	8006e90 <HAL_GetTick>
 800aade:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aae0:	e008      	b.n	800aaf4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aae2:	f7fc f9d5 	bl	8006e90 <HAL_GetTick>
 800aae6:	4602      	mov	r2, r0
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	1ad3      	subs	r3, r2, r3
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	d901      	bls.n	800aaf4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800aaf0:	2303      	movs	r3, #3
 800aaf2:	e10c      	b.n	800ad0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aaf4:	4b6a      	ldr	r3, [pc, #424]	; (800aca0 <HAL_RCC_OscConfig+0x474>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d0f0      	beq.n	800aae2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d106      	bne.n	800ab16 <HAL_RCC_OscConfig+0x2ea>
 800ab08:	4b64      	ldr	r3, [pc, #400]	; (800ac9c <HAL_RCC_OscConfig+0x470>)
 800ab0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab0c:	4a63      	ldr	r2, [pc, #396]	; (800ac9c <HAL_RCC_OscConfig+0x470>)
 800ab0e:	f043 0301 	orr.w	r3, r3, #1
 800ab12:	6713      	str	r3, [r2, #112]	; 0x70
 800ab14:	e01c      	b.n	800ab50 <HAL_RCC_OscConfig+0x324>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	689b      	ldr	r3, [r3, #8]
 800ab1a:	2b05      	cmp	r3, #5
 800ab1c:	d10c      	bne.n	800ab38 <HAL_RCC_OscConfig+0x30c>
 800ab1e:	4b5f      	ldr	r3, [pc, #380]	; (800ac9c <HAL_RCC_OscConfig+0x470>)
 800ab20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab22:	4a5e      	ldr	r2, [pc, #376]	; (800ac9c <HAL_RCC_OscConfig+0x470>)
 800ab24:	f043 0304 	orr.w	r3, r3, #4
 800ab28:	6713      	str	r3, [r2, #112]	; 0x70
 800ab2a:	4b5c      	ldr	r3, [pc, #368]	; (800ac9c <HAL_RCC_OscConfig+0x470>)
 800ab2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab2e:	4a5b      	ldr	r2, [pc, #364]	; (800ac9c <HAL_RCC_OscConfig+0x470>)
 800ab30:	f043 0301 	orr.w	r3, r3, #1
 800ab34:	6713      	str	r3, [r2, #112]	; 0x70
 800ab36:	e00b      	b.n	800ab50 <HAL_RCC_OscConfig+0x324>
 800ab38:	4b58      	ldr	r3, [pc, #352]	; (800ac9c <HAL_RCC_OscConfig+0x470>)
 800ab3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab3c:	4a57      	ldr	r2, [pc, #348]	; (800ac9c <HAL_RCC_OscConfig+0x470>)
 800ab3e:	f023 0301 	bic.w	r3, r3, #1
 800ab42:	6713      	str	r3, [r2, #112]	; 0x70
 800ab44:	4b55      	ldr	r3, [pc, #340]	; (800ac9c <HAL_RCC_OscConfig+0x470>)
 800ab46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab48:	4a54      	ldr	r2, [pc, #336]	; (800ac9c <HAL_RCC_OscConfig+0x470>)
 800ab4a:	f023 0304 	bic.w	r3, r3, #4
 800ab4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	689b      	ldr	r3, [r3, #8]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d015      	beq.n	800ab84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab58:	f7fc f99a 	bl	8006e90 <HAL_GetTick>
 800ab5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab5e:	e00a      	b.n	800ab76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ab60:	f7fc f996 	bl	8006e90 <HAL_GetTick>
 800ab64:	4602      	mov	r2, r0
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	1ad3      	subs	r3, r2, r3
 800ab6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d901      	bls.n	800ab76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ab72:	2303      	movs	r3, #3
 800ab74:	e0cb      	b.n	800ad0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab76:	4b49      	ldr	r3, [pc, #292]	; (800ac9c <HAL_RCC_OscConfig+0x470>)
 800ab78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab7a:	f003 0302 	and.w	r3, r3, #2
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d0ee      	beq.n	800ab60 <HAL_RCC_OscConfig+0x334>
 800ab82:	e014      	b.n	800abae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab84:	f7fc f984 	bl	8006e90 <HAL_GetTick>
 800ab88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ab8a:	e00a      	b.n	800aba2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ab8c:	f7fc f980 	bl	8006e90 <HAL_GetTick>
 800ab90:	4602      	mov	r2, r0
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	1ad3      	subs	r3, r2, r3
 800ab96:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d901      	bls.n	800aba2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800ab9e:	2303      	movs	r3, #3
 800aba0:	e0b5      	b.n	800ad0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aba2:	4b3e      	ldr	r3, [pc, #248]	; (800ac9c <HAL_RCC_OscConfig+0x470>)
 800aba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aba6:	f003 0302 	and.w	r3, r3, #2
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d1ee      	bne.n	800ab8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800abae:	7dfb      	ldrb	r3, [r7, #23]
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d105      	bne.n	800abc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800abb4:	4b39      	ldr	r3, [pc, #228]	; (800ac9c <HAL_RCC_OscConfig+0x470>)
 800abb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abb8:	4a38      	ldr	r2, [pc, #224]	; (800ac9c <HAL_RCC_OscConfig+0x470>)
 800abba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800abbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	699b      	ldr	r3, [r3, #24]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	f000 80a1 	beq.w	800ad0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800abca:	4b34      	ldr	r3, [pc, #208]	; (800ac9c <HAL_RCC_OscConfig+0x470>)
 800abcc:	689b      	ldr	r3, [r3, #8]
 800abce:	f003 030c 	and.w	r3, r3, #12
 800abd2:	2b08      	cmp	r3, #8
 800abd4:	d05c      	beq.n	800ac90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	699b      	ldr	r3, [r3, #24]
 800abda:	2b02      	cmp	r3, #2
 800abdc:	d141      	bne.n	800ac62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800abde:	4b31      	ldr	r3, [pc, #196]	; (800aca4 <HAL_RCC_OscConfig+0x478>)
 800abe0:	2200      	movs	r2, #0
 800abe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abe4:	f7fc f954 	bl	8006e90 <HAL_GetTick>
 800abe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800abea:	e008      	b.n	800abfe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800abec:	f7fc f950 	bl	8006e90 <HAL_GetTick>
 800abf0:	4602      	mov	r2, r0
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	1ad3      	subs	r3, r2, r3
 800abf6:	2b02      	cmp	r3, #2
 800abf8:	d901      	bls.n	800abfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800abfa:	2303      	movs	r3, #3
 800abfc:	e087      	b.n	800ad0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800abfe:	4b27      	ldr	r3, [pc, #156]	; (800ac9c <HAL_RCC_OscConfig+0x470>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d1f0      	bne.n	800abec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	69da      	ldr	r2, [r3, #28]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6a1b      	ldr	r3, [r3, #32]
 800ac12:	431a      	orrs	r2, r3
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac18:	019b      	lsls	r3, r3, #6
 800ac1a:	431a      	orrs	r2, r3
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac20:	085b      	lsrs	r3, r3, #1
 800ac22:	3b01      	subs	r3, #1
 800ac24:	041b      	lsls	r3, r3, #16
 800ac26:	431a      	orrs	r2, r3
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac2c:	061b      	lsls	r3, r3, #24
 800ac2e:	491b      	ldr	r1, [pc, #108]	; (800ac9c <HAL_RCC_OscConfig+0x470>)
 800ac30:	4313      	orrs	r3, r2
 800ac32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac34:	4b1b      	ldr	r3, [pc, #108]	; (800aca4 <HAL_RCC_OscConfig+0x478>)
 800ac36:	2201      	movs	r2, #1
 800ac38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac3a:	f7fc f929 	bl	8006e90 <HAL_GetTick>
 800ac3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac40:	e008      	b.n	800ac54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ac42:	f7fc f925 	bl	8006e90 <HAL_GetTick>
 800ac46:	4602      	mov	r2, r0
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	1ad3      	subs	r3, r2, r3
 800ac4c:	2b02      	cmp	r3, #2
 800ac4e:	d901      	bls.n	800ac54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ac50:	2303      	movs	r3, #3
 800ac52:	e05c      	b.n	800ad0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac54:	4b11      	ldr	r3, [pc, #68]	; (800ac9c <HAL_RCC_OscConfig+0x470>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d0f0      	beq.n	800ac42 <HAL_RCC_OscConfig+0x416>
 800ac60:	e054      	b.n	800ad0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac62:	4b10      	ldr	r3, [pc, #64]	; (800aca4 <HAL_RCC_OscConfig+0x478>)
 800ac64:	2200      	movs	r2, #0
 800ac66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac68:	f7fc f912 	bl	8006e90 <HAL_GetTick>
 800ac6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac6e:	e008      	b.n	800ac82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ac70:	f7fc f90e 	bl	8006e90 <HAL_GetTick>
 800ac74:	4602      	mov	r2, r0
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	1ad3      	subs	r3, r2, r3
 800ac7a:	2b02      	cmp	r3, #2
 800ac7c:	d901      	bls.n	800ac82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ac7e:	2303      	movs	r3, #3
 800ac80:	e045      	b.n	800ad0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac82:	4b06      	ldr	r3, [pc, #24]	; (800ac9c <HAL_RCC_OscConfig+0x470>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d1f0      	bne.n	800ac70 <HAL_RCC_OscConfig+0x444>
 800ac8e:	e03d      	b.n	800ad0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	699b      	ldr	r3, [r3, #24]
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d107      	bne.n	800aca8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	e038      	b.n	800ad0e <HAL_RCC_OscConfig+0x4e2>
 800ac9c:	40023800 	.word	0x40023800
 800aca0:	40007000 	.word	0x40007000
 800aca4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800aca8:	4b1b      	ldr	r3, [pc, #108]	; (800ad18 <HAL_RCC_OscConfig+0x4ec>)
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	699b      	ldr	r3, [r3, #24]
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d028      	beq.n	800ad08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d121      	bne.n	800ad08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800acce:	429a      	cmp	r2, r3
 800acd0:	d11a      	bne.n	800ad08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800acd2:	68fa      	ldr	r2, [r7, #12]
 800acd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800acd8:	4013      	ands	r3, r2
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800acde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d111      	bne.n	800ad08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acee:	085b      	lsrs	r3, r3, #1
 800acf0:	3b01      	subs	r3, #1
 800acf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d107      	bne.n	800ad08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d001      	beq.n	800ad0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	e000      	b.n	800ad0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ad0c:	2300      	movs	r3, #0
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3718      	adds	r7, #24
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	40023800 	.word	0x40023800

0800ad1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d101      	bne.n	800ad30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	e0cc      	b.n	800aeca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ad30:	4b68      	ldr	r3, [pc, #416]	; (800aed4 <HAL_RCC_ClockConfig+0x1b8>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f003 0307 	and.w	r3, r3, #7
 800ad38:	683a      	ldr	r2, [r7, #0]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d90c      	bls.n	800ad58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad3e:	4b65      	ldr	r3, [pc, #404]	; (800aed4 <HAL_RCC_ClockConfig+0x1b8>)
 800ad40:	683a      	ldr	r2, [r7, #0]
 800ad42:	b2d2      	uxtb	r2, r2
 800ad44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad46:	4b63      	ldr	r3, [pc, #396]	; (800aed4 <HAL_RCC_ClockConfig+0x1b8>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f003 0307 	and.w	r3, r3, #7
 800ad4e:	683a      	ldr	r2, [r7, #0]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d001      	beq.n	800ad58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ad54:	2301      	movs	r3, #1
 800ad56:	e0b8      	b.n	800aeca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f003 0302 	and.w	r3, r3, #2
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d020      	beq.n	800ada6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f003 0304 	and.w	r3, r3, #4
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d005      	beq.n	800ad7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad70:	4b59      	ldr	r3, [pc, #356]	; (800aed8 <HAL_RCC_ClockConfig+0x1bc>)
 800ad72:	689b      	ldr	r3, [r3, #8]
 800ad74:	4a58      	ldr	r2, [pc, #352]	; (800aed8 <HAL_RCC_ClockConfig+0x1bc>)
 800ad76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ad7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f003 0308 	and.w	r3, r3, #8
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d005      	beq.n	800ad94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ad88:	4b53      	ldr	r3, [pc, #332]	; (800aed8 <HAL_RCC_ClockConfig+0x1bc>)
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	4a52      	ldr	r2, [pc, #328]	; (800aed8 <HAL_RCC_ClockConfig+0x1bc>)
 800ad8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ad92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad94:	4b50      	ldr	r3, [pc, #320]	; (800aed8 <HAL_RCC_ClockConfig+0x1bc>)
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	494d      	ldr	r1, [pc, #308]	; (800aed8 <HAL_RCC_ClockConfig+0x1bc>)
 800ada2:	4313      	orrs	r3, r2
 800ada4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f003 0301 	and.w	r3, r3, #1
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d044      	beq.n	800ae3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d107      	bne.n	800adca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800adba:	4b47      	ldr	r3, [pc, #284]	; (800aed8 <HAL_RCC_ClockConfig+0x1bc>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d119      	bne.n	800adfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adc6:	2301      	movs	r3, #1
 800adc8:	e07f      	b.n	800aeca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	2b02      	cmp	r3, #2
 800add0:	d003      	beq.n	800adda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800add6:	2b03      	cmp	r3, #3
 800add8:	d107      	bne.n	800adea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800adda:	4b3f      	ldr	r3, [pc, #252]	; (800aed8 <HAL_RCC_ClockConfig+0x1bc>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d109      	bne.n	800adfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ade6:	2301      	movs	r3, #1
 800ade8:	e06f      	b.n	800aeca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800adea:	4b3b      	ldr	r3, [pc, #236]	; (800aed8 <HAL_RCC_ClockConfig+0x1bc>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f003 0302 	and.w	r3, r3, #2
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d101      	bne.n	800adfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adf6:	2301      	movs	r3, #1
 800adf8:	e067      	b.n	800aeca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800adfa:	4b37      	ldr	r3, [pc, #220]	; (800aed8 <HAL_RCC_ClockConfig+0x1bc>)
 800adfc:	689b      	ldr	r3, [r3, #8]
 800adfe:	f023 0203 	bic.w	r2, r3, #3
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	4934      	ldr	r1, [pc, #208]	; (800aed8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ae0c:	f7fc f840 	bl	8006e90 <HAL_GetTick>
 800ae10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae12:	e00a      	b.n	800ae2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae14:	f7fc f83c 	bl	8006e90 <HAL_GetTick>
 800ae18:	4602      	mov	r2, r0
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	1ad3      	subs	r3, r2, r3
 800ae1e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d901      	bls.n	800ae2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ae26:	2303      	movs	r3, #3
 800ae28:	e04f      	b.n	800aeca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae2a:	4b2b      	ldr	r3, [pc, #172]	; (800aed8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	f003 020c 	and.w	r2, r3, #12
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d1eb      	bne.n	800ae14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ae3c:	4b25      	ldr	r3, [pc, #148]	; (800aed4 <HAL_RCC_ClockConfig+0x1b8>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f003 0307 	and.w	r3, r3, #7
 800ae44:	683a      	ldr	r2, [r7, #0]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d20c      	bcs.n	800ae64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae4a:	4b22      	ldr	r3, [pc, #136]	; (800aed4 <HAL_RCC_ClockConfig+0x1b8>)
 800ae4c:	683a      	ldr	r2, [r7, #0]
 800ae4e:	b2d2      	uxtb	r2, r2
 800ae50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae52:	4b20      	ldr	r3, [pc, #128]	; (800aed4 <HAL_RCC_ClockConfig+0x1b8>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f003 0307 	and.w	r3, r3, #7
 800ae5a:	683a      	ldr	r2, [r7, #0]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d001      	beq.n	800ae64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ae60:	2301      	movs	r3, #1
 800ae62:	e032      	b.n	800aeca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f003 0304 	and.w	r3, r3, #4
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d008      	beq.n	800ae82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae70:	4b19      	ldr	r3, [pc, #100]	; (800aed8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae72:	689b      	ldr	r3, [r3, #8]
 800ae74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	68db      	ldr	r3, [r3, #12]
 800ae7c:	4916      	ldr	r1, [pc, #88]	; (800aed8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f003 0308 	and.w	r3, r3, #8
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d009      	beq.n	800aea2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ae8e:	4b12      	ldr	r3, [pc, #72]	; (800aed8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae90:	689b      	ldr	r3, [r3, #8]
 800ae92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	691b      	ldr	r3, [r3, #16]
 800ae9a:	00db      	lsls	r3, r3, #3
 800ae9c:	490e      	ldr	r1, [pc, #56]	; (800aed8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800aea2:	f000 f821 	bl	800aee8 <HAL_RCC_GetSysClockFreq>
 800aea6:	4602      	mov	r2, r0
 800aea8:	4b0b      	ldr	r3, [pc, #44]	; (800aed8 <HAL_RCC_ClockConfig+0x1bc>)
 800aeaa:	689b      	ldr	r3, [r3, #8]
 800aeac:	091b      	lsrs	r3, r3, #4
 800aeae:	f003 030f 	and.w	r3, r3, #15
 800aeb2:	490a      	ldr	r1, [pc, #40]	; (800aedc <HAL_RCC_ClockConfig+0x1c0>)
 800aeb4:	5ccb      	ldrb	r3, [r1, r3]
 800aeb6:	fa22 f303 	lsr.w	r3, r2, r3
 800aeba:	4a09      	ldr	r2, [pc, #36]	; (800aee0 <HAL_RCC_ClockConfig+0x1c4>)
 800aebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800aebe:	4b09      	ldr	r3, [pc, #36]	; (800aee4 <HAL_RCC_ClockConfig+0x1c8>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7f7 fdc2 	bl	8002a4c <HAL_InitTick>

  return HAL_OK;
 800aec8:	2300      	movs	r3, #0
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3710      	adds	r7, #16
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	40023c00 	.word	0x40023c00
 800aed8:	40023800 	.word	0x40023800
 800aedc:	08013018 	.word	0x08013018
 800aee0:	20000008 	.word	0x20000008
 800aee4:	2000000c 	.word	0x2000000c

0800aee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aeec:	b094      	sub	sp, #80	; 0x50
 800aeee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800aef0:	2300      	movs	r3, #0
 800aef2:	647b      	str	r3, [r7, #68]	; 0x44
 800aef4:	2300      	movs	r3, #0
 800aef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aef8:	2300      	movs	r3, #0
 800aefa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800aefc:	2300      	movs	r3, #0
 800aefe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800af00:	4b79      	ldr	r3, [pc, #484]	; (800b0e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	f003 030c 	and.w	r3, r3, #12
 800af08:	2b08      	cmp	r3, #8
 800af0a:	d00d      	beq.n	800af28 <HAL_RCC_GetSysClockFreq+0x40>
 800af0c:	2b08      	cmp	r3, #8
 800af0e:	f200 80e1 	bhi.w	800b0d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 800af12:	2b00      	cmp	r3, #0
 800af14:	d002      	beq.n	800af1c <HAL_RCC_GetSysClockFreq+0x34>
 800af16:	2b04      	cmp	r3, #4
 800af18:	d003      	beq.n	800af22 <HAL_RCC_GetSysClockFreq+0x3a>
 800af1a:	e0db      	b.n	800b0d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800af1c:	4b73      	ldr	r3, [pc, #460]	; (800b0ec <HAL_RCC_GetSysClockFreq+0x204>)
 800af1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800af20:	e0db      	b.n	800b0da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800af22:	4b73      	ldr	r3, [pc, #460]	; (800b0f0 <HAL_RCC_GetSysClockFreq+0x208>)
 800af24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800af26:	e0d8      	b.n	800b0da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800af28:	4b6f      	ldr	r3, [pc, #444]	; (800b0e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800af32:	4b6d      	ldr	r3, [pc, #436]	; (800b0e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d063      	beq.n	800b006 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800af3e:	4b6a      	ldr	r3, [pc, #424]	; (800b0e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	099b      	lsrs	r3, r3, #6
 800af44:	2200      	movs	r2, #0
 800af46:	63bb      	str	r3, [r7, #56]	; 0x38
 800af48:	63fa      	str	r2, [r7, #60]	; 0x3c
 800af4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af50:	633b      	str	r3, [r7, #48]	; 0x30
 800af52:	2300      	movs	r3, #0
 800af54:	637b      	str	r3, [r7, #52]	; 0x34
 800af56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800af5a:	4622      	mov	r2, r4
 800af5c:	462b      	mov	r3, r5
 800af5e:	f04f 0000 	mov.w	r0, #0
 800af62:	f04f 0100 	mov.w	r1, #0
 800af66:	0159      	lsls	r1, r3, #5
 800af68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800af6c:	0150      	lsls	r0, r2, #5
 800af6e:	4602      	mov	r2, r0
 800af70:	460b      	mov	r3, r1
 800af72:	4621      	mov	r1, r4
 800af74:	1a51      	subs	r1, r2, r1
 800af76:	6139      	str	r1, [r7, #16]
 800af78:	4629      	mov	r1, r5
 800af7a:	eb63 0301 	sbc.w	r3, r3, r1
 800af7e:	617b      	str	r3, [r7, #20]
 800af80:	f04f 0200 	mov.w	r2, #0
 800af84:	f04f 0300 	mov.w	r3, #0
 800af88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800af8c:	4659      	mov	r1, fp
 800af8e:	018b      	lsls	r3, r1, #6
 800af90:	4651      	mov	r1, sl
 800af92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800af96:	4651      	mov	r1, sl
 800af98:	018a      	lsls	r2, r1, #6
 800af9a:	4651      	mov	r1, sl
 800af9c:	ebb2 0801 	subs.w	r8, r2, r1
 800afa0:	4659      	mov	r1, fp
 800afa2:	eb63 0901 	sbc.w	r9, r3, r1
 800afa6:	f04f 0200 	mov.w	r2, #0
 800afaa:	f04f 0300 	mov.w	r3, #0
 800afae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800afb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800afb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800afba:	4690      	mov	r8, r2
 800afbc:	4699      	mov	r9, r3
 800afbe:	4623      	mov	r3, r4
 800afc0:	eb18 0303 	adds.w	r3, r8, r3
 800afc4:	60bb      	str	r3, [r7, #8]
 800afc6:	462b      	mov	r3, r5
 800afc8:	eb49 0303 	adc.w	r3, r9, r3
 800afcc:	60fb      	str	r3, [r7, #12]
 800afce:	f04f 0200 	mov.w	r2, #0
 800afd2:	f04f 0300 	mov.w	r3, #0
 800afd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800afda:	4629      	mov	r1, r5
 800afdc:	024b      	lsls	r3, r1, #9
 800afde:	4621      	mov	r1, r4
 800afe0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800afe4:	4621      	mov	r1, r4
 800afe6:	024a      	lsls	r2, r1, #9
 800afe8:	4610      	mov	r0, r2
 800afea:	4619      	mov	r1, r3
 800afec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afee:	2200      	movs	r2, #0
 800aff0:	62bb      	str	r3, [r7, #40]	; 0x28
 800aff2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aff4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800aff8:	f7f5 fe46 	bl	8000c88 <__aeabi_uldivmod>
 800affc:	4602      	mov	r2, r0
 800affe:	460b      	mov	r3, r1
 800b000:	4613      	mov	r3, r2
 800b002:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b004:	e058      	b.n	800b0b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b006:	4b38      	ldr	r3, [pc, #224]	; (800b0e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	099b      	lsrs	r3, r3, #6
 800b00c:	2200      	movs	r2, #0
 800b00e:	4618      	mov	r0, r3
 800b010:	4611      	mov	r1, r2
 800b012:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b016:	623b      	str	r3, [r7, #32]
 800b018:	2300      	movs	r3, #0
 800b01a:	627b      	str	r3, [r7, #36]	; 0x24
 800b01c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b020:	4642      	mov	r2, r8
 800b022:	464b      	mov	r3, r9
 800b024:	f04f 0000 	mov.w	r0, #0
 800b028:	f04f 0100 	mov.w	r1, #0
 800b02c:	0159      	lsls	r1, r3, #5
 800b02e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b032:	0150      	lsls	r0, r2, #5
 800b034:	4602      	mov	r2, r0
 800b036:	460b      	mov	r3, r1
 800b038:	4641      	mov	r1, r8
 800b03a:	ebb2 0a01 	subs.w	sl, r2, r1
 800b03e:	4649      	mov	r1, r9
 800b040:	eb63 0b01 	sbc.w	fp, r3, r1
 800b044:	f04f 0200 	mov.w	r2, #0
 800b048:	f04f 0300 	mov.w	r3, #0
 800b04c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b050:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b054:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b058:	ebb2 040a 	subs.w	r4, r2, sl
 800b05c:	eb63 050b 	sbc.w	r5, r3, fp
 800b060:	f04f 0200 	mov.w	r2, #0
 800b064:	f04f 0300 	mov.w	r3, #0
 800b068:	00eb      	lsls	r3, r5, #3
 800b06a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b06e:	00e2      	lsls	r2, r4, #3
 800b070:	4614      	mov	r4, r2
 800b072:	461d      	mov	r5, r3
 800b074:	4643      	mov	r3, r8
 800b076:	18e3      	adds	r3, r4, r3
 800b078:	603b      	str	r3, [r7, #0]
 800b07a:	464b      	mov	r3, r9
 800b07c:	eb45 0303 	adc.w	r3, r5, r3
 800b080:	607b      	str	r3, [r7, #4]
 800b082:	f04f 0200 	mov.w	r2, #0
 800b086:	f04f 0300 	mov.w	r3, #0
 800b08a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b08e:	4629      	mov	r1, r5
 800b090:	028b      	lsls	r3, r1, #10
 800b092:	4621      	mov	r1, r4
 800b094:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b098:	4621      	mov	r1, r4
 800b09a:	028a      	lsls	r2, r1, #10
 800b09c:	4610      	mov	r0, r2
 800b09e:	4619      	mov	r1, r3
 800b0a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	61bb      	str	r3, [r7, #24]
 800b0a6:	61fa      	str	r2, [r7, #28]
 800b0a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b0ac:	f7f5 fdec 	bl	8000c88 <__aeabi_uldivmod>
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	4613      	mov	r3, r2
 800b0b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b0b8:	4b0b      	ldr	r3, [pc, #44]	; (800b0e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	0c1b      	lsrs	r3, r3, #16
 800b0be:	f003 0303 	and.w	r3, r3, #3
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	005b      	lsls	r3, r3, #1
 800b0c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800b0c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b0ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b0d2:	e002      	b.n	800b0da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b0d4:	4b05      	ldr	r3, [pc, #20]	; (800b0ec <HAL_RCC_GetSysClockFreq+0x204>)
 800b0d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b0d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b0da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3750      	adds	r7, #80	; 0x50
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b0e6:	bf00      	nop
 800b0e8:	40023800 	.word	0x40023800
 800b0ec:	00f42400 	.word	0x00f42400
 800b0f0:	007a1200 	.word	0x007a1200

0800b0f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b0f8:	4b03      	ldr	r3, [pc, #12]	; (800b108 <HAL_RCC_GetHCLKFreq+0x14>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	46bd      	mov	sp, r7
 800b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b104:	4770      	bx	lr
 800b106:	bf00      	nop
 800b108:	20000008 	.word	0x20000008

0800b10c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b110:	f7ff fff0 	bl	800b0f4 <HAL_RCC_GetHCLKFreq>
 800b114:	4602      	mov	r2, r0
 800b116:	4b05      	ldr	r3, [pc, #20]	; (800b12c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	0a9b      	lsrs	r3, r3, #10
 800b11c:	f003 0307 	and.w	r3, r3, #7
 800b120:	4903      	ldr	r1, [pc, #12]	; (800b130 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b122:	5ccb      	ldrb	r3, [r1, r3]
 800b124:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b128:	4618      	mov	r0, r3
 800b12a:	bd80      	pop	{r7, pc}
 800b12c:	40023800 	.word	0x40023800
 800b130:	08013028 	.word	0x08013028

0800b134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b138:	f7ff ffdc 	bl	800b0f4 <HAL_RCC_GetHCLKFreq>
 800b13c:	4602      	mov	r2, r0
 800b13e:	4b05      	ldr	r3, [pc, #20]	; (800b154 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b140:	689b      	ldr	r3, [r3, #8]
 800b142:	0b5b      	lsrs	r3, r3, #13
 800b144:	f003 0307 	and.w	r3, r3, #7
 800b148:	4903      	ldr	r1, [pc, #12]	; (800b158 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b14a:	5ccb      	ldrb	r3, [r1, r3]
 800b14c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b150:	4618      	mov	r0, r3
 800b152:	bd80      	pop	{r7, pc}
 800b154:	40023800 	.word	0x40023800
 800b158:	08013028 	.word	0x08013028

0800b15c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b083      	sub	sp, #12
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	220f      	movs	r2, #15
 800b16a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b16c:	4b12      	ldr	r3, [pc, #72]	; (800b1b8 <HAL_RCC_GetClockConfig+0x5c>)
 800b16e:	689b      	ldr	r3, [r3, #8]
 800b170:	f003 0203 	and.w	r2, r3, #3
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b178:	4b0f      	ldr	r3, [pc, #60]	; (800b1b8 <HAL_RCC_GetClockConfig+0x5c>)
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b184:	4b0c      	ldr	r3, [pc, #48]	; (800b1b8 <HAL_RCC_GetClockConfig+0x5c>)
 800b186:	689b      	ldr	r3, [r3, #8]
 800b188:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800b190:	4b09      	ldr	r3, [pc, #36]	; (800b1b8 <HAL_RCC_GetClockConfig+0x5c>)
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	08db      	lsrs	r3, r3, #3
 800b196:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b19e:	4b07      	ldr	r3, [pc, #28]	; (800b1bc <HAL_RCC_GetClockConfig+0x60>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f003 0207 	and.w	r2, r3, #7
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	601a      	str	r2, [r3, #0]
}
 800b1aa:	bf00      	nop
 800b1ac:	370c      	adds	r7, #12
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr
 800b1b6:	bf00      	nop
 800b1b8:	40023800 	.word	0x40023800
 800b1bc:	40023c00 	.word	0x40023c00

0800b1c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d101      	bne.n	800b1d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e041      	b.n	800b256 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1d8:	b2db      	uxtb	r3, r3
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d106      	bne.n	800b1ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f7f8 f972 	bl	80034d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2202      	movs	r2, #2
 800b1f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	3304      	adds	r3, #4
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	4610      	mov	r0, r2
 800b200:	f000 fb6a 	bl	800b8d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2201      	movs	r2, #1
 800b208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2201      	movs	r2, #1
 800b210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2201      	movs	r2, #1
 800b218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2201      	movs	r2, #1
 800b220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2201      	movs	r2, #1
 800b228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2201      	movs	r2, #1
 800b230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2201      	movs	r2, #1
 800b238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2201      	movs	r2, #1
 800b240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2201      	movs	r2, #1
 800b248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2201      	movs	r2, #1
 800b250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b254:	2300      	movs	r3, #0
}
 800b256:	4618      	mov	r0, r3
 800b258:	3708      	adds	r7, #8
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}
	...

0800b260 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b260:	b480      	push	{r7}
 800b262:	b085      	sub	sp, #20
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	2b01      	cmp	r3, #1
 800b272:	d001      	beq.n	800b278 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b274:	2301      	movs	r3, #1
 800b276:	e04e      	b.n	800b316 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2202      	movs	r2, #2
 800b27c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	68da      	ldr	r2, [r3, #12]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f042 0201 	orr.w	r2, r2, #1
 800b28e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4a23      	ldr	r2, [pc, #140]	; (800b324 <HAL_TIM_Base_Start_IT+0xc4>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d022      	beq.n	800b2e0 <HAL_TIM_Base_Start_IT+0x80>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2a2:	d01d      	beq.n	800b2e0 <HAL_TIM_Base_Start_IT+0x80>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4a1f      	ldr	r2, [pc, #124]	; (800b328 <HAL_TIM_Base_Start_IT+0xc8>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d018      	beq.n	800b2e0 <HAL_TIM_Base_Start_IT+0x80>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	4a1e      	ldr	r2, [pc, #120]	; (800b32c <HAL_TIM_Base_Start_IT+0xcc>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d013      	beq.n	800b2e0 <HAL_TIM_Base_Start_IT+0x80>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	4a1c      	ldr	r2, [pc, #112]	; (800b330 <HAL_TIM_Base_Start_IT+0xd0>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d00e      	beq.n	800b2e0 <HAL_TIM_Base_Start_IT+0x80>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4a1b      	ldr	r2, [pc, #108]	; (800b334 <HAL_TIM_Base_Start_IT+0xd4>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d009      	beq.n	800b2e0 <HAL_TIM_Base_Start_IT+0x80>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a19      	ldr	r2, [pc, #100]	; (800b338 <HAL_TIM_Base_Start_IT+0xd8>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d004      	beq.n	800b2e0 <HAL_TIM_Base_Start_IT+0x80>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a18      	ldr	r2, [pc, #96]	; (800b33c <HAL_TIM_Base_Start_IT+0xdc>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d111      	bne.n	800b304 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	689b      	ldr	r3, [r3, #8]
 800b2e6:	f003 0307 	and.w	r3, r3, #7
 800b2ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2b06      	cmp	r3, #6
 800b2f0:	d010      	beq.n	800b314 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f042 0201 	orr.w	r2, r2, #1
 800b300:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b302:	e007      	b.n	800b314 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f042 0201 	orr.w	r2, r2, #1
 800b312:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b314:	2300      	movs	r3, #0
}
 800b316:	4618      	mov	r0, r3
 800b318:	3714      	adds	r7, #20
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr
 800b322:	bf00      	nop
 800b324:	40010000 	.word	0x40010000
 800b328:	40000400 	.word	0x40000400
 800b32c:	40000800 	.word	0x40000800
 800b330:	40000c00 	.word	0x40000c00
 800b334:	40010400 	.word	0x40010400
 800b338:	40014000 	.word	0x40014000
 800b33c:	40001800 	.word	0x40001800

0800b340 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b340:	b480      	push	{r7}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	68da      	ldr	r2, [r3, #12]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f022 0201 	bic.w	r2, r2, #1
 800b356:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	6a1a      	ldr	r2, [r3, #32]
 800b35e:	f241 1311 	movw	r3, #4369	; 0x1111
 800b362:	4013      	ands	r3, r2
 800b364:	2b00      	cmp	r3, #0
 800b366:	d10f      	bne.n	800b388 <HAL_TIM_Base_Stop_IT+0x48>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	6a1a      	ldr	r2, [r3, #32]
 800b36e:	f240 4344 	movw	r3, #1092	; 0x444
 800b372:	4013      	ands	r3, r2
 800b374:	2b00      	cmp	r3, #0
 800b376:	d107      	bne.n	800b388 <HAL_TIM_Base_Stop_IT+0x48>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f022 0201 	bic.w	r2, r2, #1
 800b386:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2201      	movs	r2, #1
 800b38c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b390:	2300      	movs	r3, #0
}
 800b392:	4618      	mov	r0, r3
 800b394:	370c      	adds	r7, #12
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr

0800b39e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b39e:	b580      	push	{r7, lr}
 800b3a0:	b086      	sub	sp, #24
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]
 800b3a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d101      	bne.n	800b3b2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	e097      	b.n	800b4e2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d106      	bne.n	800b3cc <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f7f7 ffc2 	bl	8003350 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2202      	movs	r2, #2
 800b3d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	689b      	ldr	r3, [r3, #8]
 800b3da:	687a      	ldr	r2, [r7, #4]
 800b3dc:	6812      	ldr	r2, [r2, #0]
 800b3de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b3e2:	f023 0307 	bic.w	r3, r3, #7
 800b3e6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	3304      	adds	r3, #4
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	4610      	mov	r0, r2
 800b3f4:	f000 fa70 	bl	800b8d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	699b      	ldr	r3, [r3, #24]
 800b406:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	6a1b      	ldr	r3, [r3, #32]
 800b40e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	697a      	ldr	r2, [r7, #20]
 800b416:	4313      	orrs	r3, r2
 800b418:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b420:	f023 0303 	bic.w	r3, r3, #3
 800b424:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	689a      	ldr	r2, [r3, #8]
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	699b      	ldr	r3, [r3, #24]
 800b42e:	021b      	lsls	r3, r3, #8
 800b430:	4313      	orrs	r3, r2
 800b432:	693a      	ldr	r2, [r7, #16]
 800b434:	4313      	orrs	r3, r2
 800b436:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b43e:	f023 030c 	bic.w	r3, r3, #12
 800b442:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b44a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b44e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	68da      	ldr	r2, [r3, #12]
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	69db      	ldr	r3, [r3, #28]
 800b458:	021b      	lsls	r3, r3, #8
 800b45a:	4313      	orrs	r3, r2
 800b45c:	693a      	ldr	r2, [r7, #16]
 800b45e:	4313      	orrs	r3, r2
 800b460:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	691b      	ldr	r3, [r3, #16]
 800b466:	011a      	lsls	r2, r3, #4
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	6a1b      	ldr	r3, [r3, #32]
 800b46c:	031b      	lsls	r3, r3, #12
 800b46e:	4313      	orrs	r3, r2
 800b470:	693a      	ldr	r2, [r7, #16]
 800b472:	4313      	orrs	r3, r2
 800b474:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b47c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b484:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	685a      	ldr	r2, [r3, #4]
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	695b      	ldr	r3, [r3, #20]
 800b48e:	011b      	lsls	r3, r3, #4
 800b490:	4313      	orrs	r3, r2
 800b492:	68fa      	ldr	r2, [r7, #12]
 800b494:	4313      	orrs	r3, r2
 800b496:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	697a      	ldr	r2, [r7, #20]
 800b49e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	693a      	ldr	r2, [r7, #16]
 800b4a6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2201      	movs	r2, #1
 800b4dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b4e0:	2300      	movs	r3, #0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3718      	adds	r7, #24
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b082      	sub	sp, #8
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	691b      	ldr	r3, [r3, #16]
 800b4f8:	f003 0302 	and.w	r3, r3, #2
 800b4fc:	2b02      	cmp	r3, #2
 800b4fe:	d122      	bne.n	800b546 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	68db      	ldr	r3, [r3, #12]
 800b506:	f003 0302 	and.w	r3, r3, #2
 800b50a:	2b02      	cmp	r3, #2
 800b50c:	d11b      	bne.n	800b546 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f06f 0202 	mvn.w	r2, #2
 800b516:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2201      	movs	r2, #1
 800b51c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	699b      	ldr	r3, [r3, #24]
 800b524:	f003 0303 	and.w	r3, r3, #3
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d003      	beq.n	800b534 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 f9b5 	bl	800b89c <HAL_TIM_IC_CaptureCallback>
 800b532:	e005      	b.n	800b540 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 f9a7 	bl	800b888 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 f9b8 	bl	800b8b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	691b      	ldr	r3, [r3, #16]
 800b54c:	f003 0304 	and.w	r3, r3, #4
 800b550:	2b04      	cmp	r3, #4
 800b552:	d122      	bne.n	800b59a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	68db      	ldr	r3, [r3, #12]
 800b55a:	f003 0304 	and.w	r3, r3, #4
 800b55e:	2b04      	cmp	r3, #4
 800b560:	d11b      	bne.n	800b59a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f06f 0204 	mvn.w	r2, #4
 800b56a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2202      	movs	r2, #2
 800b570:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	699b      	ldr	r3, [r3, #24]
 800b578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d003      	beq.n	800b588 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 f98b 	bl	800b89c <HAL_TIM_IC_CaptureCallback>
 800b586:	e005      	b.n	800b594 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 f97d 	bl	800b888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f000 f98e 	bl	800b8b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2200      	movs	r2, #0
 800b598:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	691b      	ldr	r3, [r3, #16]
 800b5a0:	f003 0308 	and.w	r3, r3, #8
 800b5a4:	2b08      	cmp	r3, #8
 800b5a6:	d122      	bne.n	800b5ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	68db      	ldr	r3, [r3, #12]
 800b5ae:	f003 0308 	and.w	r3, r3, #8
 800b5b2:	2b08      	cmp	r3, #8
 800b5b4:	d11b      	bne.n	800b5ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f06f 0208 	mvn.w	r2, #8
 800b5be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2204      	movs	r2, #4
 800b5c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	69db      	ldr	r3, [r3, #28]
 800b5cc:	f003 0303 	and.w	r3, r3, #3
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d003      	beq.n	800b5dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 f961 	bl	800b89c <HAL_TIM_IC_CaptureCallback>
 800b5da:	e005      	b.n	800b5e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 f953 	bl	800b888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 f964 	bl	800b8b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	691b      	ldr	r3, [r3, #16]
 800b5f4:	f003 0310 	and.w	r3, r3, #16
 800b5f8:	2b10      	cmp	r3, #16
 800b5fa:	d122      	bne.n	800b642 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	68db      	ldr	r3, [r3, #12]
 800b602:	f003 0310 	and.w	r3, r3, #16
 800b606:	2b10      	cmp	r3, #16
 800b608:	d11b      	bne.n	800b642 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f06f 0210 	mvn.w	r2, #16
 800b612:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2208      	movs	r2, #8
 800b618:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	69db      	ldr	r3, [r3, #28]
 800b620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b624:	2b00      	cmp	r3, #0
 800b626:	d003      	beq.n	800b630 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 f937 	bl	800b89c <HAL_TIM_IC_CaptureCallback>
 800b62e:	e005      	b.n	800b63c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 f929 	bl	800b888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 f93a 	bl	800b8b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	691b      	ldr	r3, [r3, #16]
 800b648:	f003 0301 	and.w	r3, r3, #1
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d10e      	bne.n	800b66e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	68db      	ldr	r3, [r3, #12]
 800b656:	f003 0301 	and.w	r3, r3, #1
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	d107      	bne.n	800b66e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f06f 0201 	mvn.w	r2, #1
 800b666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f7f6 fb41 	bl	8001cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	691b      	ldr	r3, [r3, #16]
 800b674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b678:	2b80      	cmp	r3, #128	; 0x80
 800b67a:	d10e      	bne.n	800b69a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	68db      	ldr	r3, [r3, #12]
 800b682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b686:	2b80      	cmp	r3, #128	; 0x80
 800b688:	d107      	bne.n	800b69a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 fadf 	bl	800bc58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	691b      	ldr	r3, [r3, #16]
 800b6a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6a4:	2b40      	cmp	r3, #64	; 0x40
 800b6a6:	d10e      	bne.n	800b6c6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	68db      	ldr	r3, [r3, #12]
 800b6ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6b2:	2b40      	cmp	r3, #64	; 0x40
 800b6b4:	d107      	bne.n	800b6c6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b6be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f000 f8ff 	bl	800b8c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	691b      	ldr	r3, [r3, #16]
 800b6cc:	f003 0320 	and.w	r3, r3, #32
 800b6d0:	2b20      	cmp	r3, #32
 800b6d2:	d10e      	bne.n	800b6f2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	68db      	ldr	r3, [r3, #12]
 800b6da:	f003 0320 	and.w	r3, r3, #32
 800b6de:	2b20      	cmp	r3, #32
 800b6e0:	d107      	bne.n	800b6f2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f06f 0220 	mvn.w	r2, #32
 800b6ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 faa9 	bl	800bc44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b6f2:	bf00      	nop
 800b6f4:	3708      	adds	r7, #8
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}

0800b6fa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b6fa:	b580      	push	{r7, lr}
 800b6fc:	b084      	sub	sp, #16
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
 800b702:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b704:	2300      	movs	r3, #0
 800b706:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b70e:	2b01      	cmp	r3, #1
 800b710:	d101      	bne.n	800b716 <HAL_TIM_ConfigClockSource+0x1c>
 800b712:	2302      	movs	r3, #2
 800b714:	e0b4      	b.n	800b880 <HAL_TIM_ConfigClockSource+0x186>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2201      	movs	r2, #1
 800b71a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2202      	movs	r2, #2
 800b722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	689b      	ldr	r3, [r3, #8]
 800b72c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b734:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b73c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	68ba      	ldr	r2, [r7, #8]
 800b744:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b74e:	d03e      	beq.n	800b7ce <HAL_TIM_ConfigClockSource+0xd4>
 800b750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b754:	f200 8087 	bhi.w	800b866 <HAL_TIM_ConfigClockSource+0x16c>
 800b758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b75c:	f000 8086 	beq.w	800b86c <HAL_TIM_ConfigClockSource+0x172>
 800b760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b764:	d87f      	bhi.n	800b866 <HAL_TIM_ConfigClockSource+0x16c>
 800b766:	2b70      	cmp	r3, #112	; 0x70
 800b768:	d01a      	beq.n	800b7a0 <HAL_TIM_ConfigClockSource+0xa6>
 800b76a:	2b70      	cmp	r3, #112	; 0x70
 800b76c:	d87b      	bhi.n	800b866 <HAL_TIM_ConfigClockSource+0x16c>
 800b76e:	2b60      	cmp	r3, #96	; 0x60
 800b770:	d050      	beq.n	800b814 <HAL_TIM_ConfigClockSource+0x11a>
 800b772:	2b60      	cmp	r3, #96	; 0x60
 800b774:	d877      	bhi.n	800b866 <HAL_TIM_ConfigClockSource+0x16c>
 800b776:	2b50      	cmp	r3, #80	; 0x50
 800b778:	d03c      	beq.n	800b7f4 <HAL_TIM_ConfigClockSource+0xfa>
 800b77a:	2b50      	cmp	r3, #80	; 0x50
 800b77c:	d873      	bhi.n	800b866 <HAL_TIM_ConfigClockSource+0x16c>
 800b77e:	2b40      	cmp	r3, #64	; 0x40
 800b780:	d058      	beq.n	800b834 <HAL_TIM_ConfigClockSource+0x13a>
 800b782:	2b40      	cmp	r3, #64	; 0x40
 800b784:	d86f      	bhi.n	800b866 <HAL_TIM_ConfigClockSource+0x16c>
 800b786:	2b30      	cmp	r3, #48	; 0x30
 800b788:	d064      	beq.n	800b854 <HAL_TIM_ConfigClockSource+0x15a>
 800b78a:	2b30      	cmp	r3, #48	; 0x30
 800b78c:	d86b      	bhi.n	800b866 <HAL_TIM_ConfigClockSource+0x16c>
 800b78e:	2b20      	cmp	r3, #32
 800b790:	d060      	beq.n	800b854 <HAL_TIM_ConfigClockSource+0x15a>
 800b792:	2b20      	cmp	r3, #32
 800b794:	d867      	bhi.n	800b866 <HAL_TIM_ConfigClockSource+0x16c>
 800b796:	2b00      	cmp	r3, #0
 800b798:	d05c      	beq.n	800b854 <HAL_TIM_ConfigClockSource+0x15a>
 800b79a:	2b10      	cmp	r3, #16
 800b79c:	d05a      	beq.n	800b854 <HAL_TIM_ConfigClockSource+0x15a>
 800b79e:	e062      	b.n	800b866 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6818      	ldr	r0, [r3, #0]
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	6899      	ldr	r1, [r3, #8]
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	685a      	ldr	r2, [r3, #4]
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	f000 f9ac 	bl	800bb0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	689b      	ldr	r3, [r3, #8]
 800b7ba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b7c2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	68ba      	ldr	r2, [r7, #8]
 800b7ca:	609a      	str	r2, [r3, #8]
      break;
 800b7cc:	e04f      	b.n	800b86e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6818      	ldr	r0, [r3, #0]
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	6899      	ldr	r1, [r3, #8]
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	685a      	ldr	r2, [r3, #4]
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	68db      	ldr	r3, [r3, #12]
 800b7de:	f000 f995 	bl	800bb0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	689a      	ldr	r2, [r3, #8]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b7f0:	609a      	str	r2, [r3, #8]
      break;
 800b7f2:	e03c      	b.n	800b86e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6818      	ldr	r0, [r3, #0]
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	6859      	ldr	r1, [r3, #4]
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	68db      	ldr	r3, [r3, #12]
 800b800:	461a      	mov	r2, r3
 800b802:	f000 f909 	bl	800ba18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2150      	movs	r1, #80	; 0x50
 800b80c:	4618      	mov	r0, r3
 800b80e:	f000 f962 	bl	800bad6 <TIM_ITRx_SetConfig>
      break;
 800b812:	e02c      	b.n	800b86e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6818      	ldr	r0, [r3, #0]
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	6859      	ldr	r1, [r3, #4]
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	68db      	ldr	r3, [r3, #12]
 800b820:	461a      	mov	r2, r3
 800b822:	f000 f928 	bl	800ba76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2160      	movs	r1, #96	; 0x60
 800b82c:	4618      	mov	r0, r3
 800b82e:	f000 f952 	bl	800bad6 <TIM_ITRx_SetConfig>
      break;
 800b832:	e01c      	b.n	800b86e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6818      	ldr	r0, [r3, #0]
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	6859      	ldr	r1, [r3, #4]
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	68db      	ldr	r3, [r3, #12]
 800b840:	461a      	mov	r2, r3
 800b842:	f000 f8e9 	bl	800ba18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2140      	movs	r1, #64	; 0x40
 800b84c:	4618      	mov	r0, r3
 800b84e:	f000 f942 	bl	800bad6 <TIM_ITRx_SetConfig>
      break;
 800b852:	e00c      	b.n	800b86e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4619      	mov	r1, r3
 800b85e:	4610      	mov	r0, r2
 800b860:	f000 f939 	bl	800bad6 <TIM_ITRx_SetConfig>
      break;
 800b864:	e003      	b.n	800b86e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b866:	2301      	movs	r3, #1
 800b868:	73fb      	strb	r3, [r7, #15]
      break;
 800b86a:	e000      	b.n	800b86e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b86c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2201      	movs	r2, #1
 800b872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2200      	movs	r2, #0
 800b87a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b87e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b880:	4618      	mov	r0, r3
 800b882:	3710      	adds	r7, #16
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b888:	b480      	push	{r7}
 800b88a:	b083      	sub	sp, #12
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b890:	bf00      	nop
 800b892:	370c      	adds	r7, #12
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b8a4:	bf00      	nop
 800b8a6:	370c      	adds	r7, #12
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b8b8:	bf00      	nop
 800b8ba:	370c      	adds	r7, #12
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr

0800b8c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b083      	sub	sp, #12
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b8cc:	bf00      	nop
 800b8ce:	370c      	adds	r7, #12
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr

0800b8d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b085      	sub	sp, #20
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4a40      	ldr	r2, [pc, #256]	; (800b9ec <TIM_Base_SetConfig+0x114>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d013      	beq.n	800b918 <TIM_Base_SetConfig+0x40>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8f6:	d00f      	beq.n	800b918 <TIM_Base_SetConfig+0x40>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4a3d      	ldr	r2, [pc, #244]	; (800b9f0 <TIM_Base_SetConfig+0x118>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d00b      	beq.n	800b918 <TIM_Base_SetConfig+0x40>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	4a3c      	ldr	r2, [pc, #240]	; (800b9f4 <TIM_Base_SetConfig+0x11c>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d007      	beq.n	800b918 <TIM_Base_SetConfig+0x40>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	4a3b      	ldr	r2, [pc, #236]	; (800b9f8 <TIM_Base_SetConfig+0x120>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d003      	beq.n	800b918 <TIM_Base_SetConfig+0x40>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	4a3a      	ldr	r2, [pc, #232]	; (800b9fc <TIM_Base_SetConfig+0x124>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d108      	bne.n	800b92a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b91e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	68fa      	ldr	r2, [r7, #12]
 800b926:	4313      	orrs	r3, r2
 800b928:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	4a2f      	ldr	r2, [pc, #188]	; (800b9ec <TIM_Base_SetConfig+0x114>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d02b      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b938:	d027      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4a2c      	ldr	r2, [pc, #176]	; (800b9f0 <TIM_Base_SetConfig+0x118>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d023      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	4a2b      	ldr	r2, [pc, #172]	; (800b9f4 <TIM_Base_SetConfig+0x11c>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d01f      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4a2a      	ldr	r2, [pc, #168]	; (800b9f8 <TIM_Base_SetConfig+0x120>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d01b      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	4a29      	ldr	r2, [pc, #164]	; (800b9fc <TIM_Base_SetConfig+0x124>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d017      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4a28      	ldr	r2, [pc, #160]	; (800ba00 <TIM_Base_SetConfig+0x128>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d013      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	4a27      	ldr	r2, [pc, #156]	; (800ba04 <TIM_Base_SetConfig+0x12c>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d00f      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	4a26      	ldr	r2, [pc, #152]	; (800ba08 <TIM_Base_SetConfig+0x130>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d00b      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	4a25      	ldr	r2, [pc, #148]	; (800ba0c <TIM_Base_SetConfig+0x134>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d007      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	4a24      	ldr	r2, [pc, #144]	; (800ba10 <TIM_Base_SetConfig+0x138>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d003      	beq.n	800b98a <TIM_Base_SetConfig+0xb2>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	4a23      	ldr	r2, [pc, #140]	; (800ba14 <TIM_Base_SetConfig+0x13c>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d108      	bne.n	800b99c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	68fa      	ldr	r2, [r7, #12]
 800b998:	4313      	orrs	r3, r2
 800b99a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	695b      	ldr	r3, [r3, #20]
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	68fa      	ldr	r2, [r7, #12]
 800b9ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	689a      	ldr	r2, [r3, #8]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	4a0a      	ldr	r2, [pc, #40]	; (800b9ec <TIM_Base_SetConfig+0x114>)
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	d003      	beq.n	800b9d0 <TIM_Base_SetConfig+0xf8>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	4a0c      	ldr	r2, [pc, #48]	; (800b9fc <TIM_Base_SetConfig+0x124>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d103      	bne.n	800b9d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	691a      	ldr	r2, [r3, #16]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	615a      	str	r2, [r3, #20]
}
 800b9de:	bf00      	nop
 800b9e0:	3714      	adds	r7, #20
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr
 800b9ea:	bf00      	nop
 800b9ec:	40010000 	.word	0x40010000
 800b9f0:	40000400 	.word	0x40000400
 800b9f4:	40000800 	.word	0x40000800
 800b9f8:	40000c00 	.word	0x40000c00
 800b9fc:	40010400 	.word	0x40010400
 800ba00:	40014000 	.word	0x40014000
 800ba04:	40014400 	.word	0x40014400
 800ba08:	40014800 	.word	0x40014800
 800ba0c:	40001800 	.word	0x40001800
 800ba10:	40001c00 	.word	0x40001c00
 800ba14:	40002000 	.word	0x40002000

0800ba18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b087      	sub	sp, #28
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	60f8      	str	r0, [r7, #12]
 800ba20:	60b9      	str	r1, [r7, #8]
 800ba22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6a1b      	ldr	r3, [r3, #32]
 800ba28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	6a1b      	ldr	r3, [r3, #32]
 800ba2e:	f023 0201 	bic.w	r2, r3, #1
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	699b      	ldr	r3, [r3, #24]
 800ba3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ba42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	011b      	lsls	r3, r3, #4
 800ba48:	693a      	ldr	r2, [r7, #16]
 800ba4a:	4313      	orrs	r3, r2
 800ba4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	f023 030a 	bic.w	r3, r3, #10
 800ba54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ba56:	697a      	ldr	r2, [r7, #20]
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	693a      	ldr	r2, [r7, #16]
 800ba62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	697a      	ldr	r2, [r7, #20]
 800ba68:	621a      	str	r2, [r3, #32]
}
 800ba6a:	bf00      	nop
 800ba6c:	371c      	adds	r7, #28
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr

0800ba76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba76:	b480      	push	{r7}
 800ba78:	b087      	sub	sp, #28
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	60f8      	str	r0, [r7, #12]
 800ba7e:	60b9      	str	r1, [r7, #8]
 800ba80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	6a1b      	ldr	r3, [r3, #32]
 800ba86:	f023 0210 	bic.w	r2, r3, #16
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	699b      	ldr	r3, [r3, #24]
 800ba92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	6a1b      	ldr	r3, [r3, #32]
 800ba98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800baa0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	031b      	lsls	r3, r3, #12
 800baa6:	697a      	ldr	r2, [r7, #20]
 800baa8:	4313      	orrs	r3, r2
 800baaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bab2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	011b      	lsls	r3, r3, #4
 800bab8:	693a      	ldr	r2, [r7, #16]
 800baba:	4313      	orrs	r3, r2
 800babc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	697a      	ldr	r2, [r7, #20]
 800bac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	693a      	ldr	r2, [r7, #16]
 800bac8:	621a      	str	r2, [r3, #32]
}
 800baca:	bf00      	nop
 800bacc:	371c      	adds	r7, #28
 800bace:	46bd      	mov	sp, r7
 800bad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad4:	4770      	bx	lr

0800bad6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bad6:	b480      	push	{r7}
 800bad8:	b085      	sub	sp, #20
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
 800bade:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	689b      	ldr	r3, [r3, #8]
 800bae4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800baee:	683a      	ldr	r2, [r7, #0]
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	4313      	orrs	r3, r2
 800baf4:	f043 0307 	orr.w	r3, r3, #7
 800baf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	68fa      	ldr	r2, [r7, #12]
 800bafe:	609a      	str	r2, [r3, #8]
}
 800bb00:	bf00      	nop
 800bb02:	3714      	adds	r7, #20
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b087      	sub	sp, #28
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	607a      	str	r2, [r7, #4]
 800bb18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	689b      	ldr	r3, [r3, #8]
 800bb1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bb26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	021a      	lsls	r2, r3, #8
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	431a      	orrs	r2, r3
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	4313      	orrs	r3, r2
 800bb34:	697a      	ldr	r2, [r7, #20]
 800bb36:	4313      	orrs	r3, r2
 800bb38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	697a      	ldr	r2, [r7, #20]
 800bb3e:	609a      	str	r2, [r3, #8]
}
 800bb40:	bf00      	nop
 800bb42:	371c      	adds	r7, #28
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b085      	sub	sp, #20
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d101      	bne.n	800bb64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bb60:	2302      	movs	r3, #2
 800bb62:	e05a      	b.n	800bc1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2201      	movs	r2, #1
 800bb68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2202      	movs	r2, #2
 800bb70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	68fa      	ldr	r2, [r7, #12]
 800bb92:	4313      	orrs	r3, r2
 800bb94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	68fa      	ldr	r2, [r7, #12]
 800bb9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4a21      	ldr	r2, [pc, #132]	; (800bc28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d022      	beq.n	800bbee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbb0:	d01d      	beq.n	800bbee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4a1d      	ldr	r2, [pc, #116]	; (800bc2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d018      	beq.n	800bbee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4a1b      	ldr	r2, [pc, #108]	; (800bc30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d013      	beq.n	800bbee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4a1a      	ldr	r2, [pc, #104]	; (800bc34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d00e      	beq.n	800bbee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4a18      	ldr	r2, [pc, #96]	; (800bc38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d009      	beq.n	800bbee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4a17      	ldr	r2, [pc, #92]	; (800bc3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d004      	beq.n	800bbee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	4a15      	ldr	r2, [pc, #84]	; (800bc40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d10c      	bne.n	800bc08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bbf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	685b      	ldr	r3, [r3, #4]
 800bbfa:	68ba      	ldr	r2, [r7, #8]
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	68ba      	ldr	r2, [r7, #8]
 800bc06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2200      	movs	r2, #0
 800bc14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc18:	2300      	movs	r3, #0
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3714      	adds	r7, #20
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc24:	4770      	bx	lr
 800bc26:	bf00      	nop
 800bc28:	40010000 	.word	0x40010000
 800bc2c:	40000400 	.word	0x40000400
 800bc30:	40000800 	.word	0x40000800
 800bc34:	40000c00 	.word	0x40000c00
 800bc38:	40010400 	.word	0x40010400
 800bc3c:	40014000 	.word	0x40014000
 800bc40:	40001800 	.word	0x40001800

0800bc44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bc4c:	bf00      	nop
 800bc4e:	370c      	adds	r7, #12
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b083      	sub	sp, #12
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bc60:	bf00      	nop
 800bc62:	370c      	adds	r7, #12
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d101      	bne.n	800bc7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	e03f      	b.n	800bcfe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc84:	b2db      	uxtb	r3, r3
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d106      	bne.n	800bc98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f7f7 fdc4 	bl	8003820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2224      	movs	r2, #36	; 0x24
 800bc9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	68da      	ldr	r2, [r3, #12]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bcae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f000 fe23 	bl	800c8fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	691a      	ldr	r2, [r3, #16]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bcc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	695a      	ldr	r2, [r3, #20]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bcd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	68da      	ldr	r2, [r3, #12]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bce4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2200      	movs	r2, #0
 800bcea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2220      	movs	r2, #32
 800bcf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2220      	movs	r2, #32
 800bcf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bcfc:	2300      	movs	r3, #0
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3708      	adds	r7, #8
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}

0800bd06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd06:	b580      	push	{r7, lr}
 800bd08:	b08a      	sub	sp, #40	; 0x28
 800bd0a:	af02      	add	r7, sp, #8
 800bd0c:	60f8      	str	r0, [r7, #12]
 800bd0e:	60b9      	str	r1, [r7, #8]
 800bd10:	603b      	str	r3, [r7, #0]
 800bd12:	4613      	mov	r3, r2
 800bd14:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bd16:	2300      	movs	r3, #0
 800bd18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd20:	b2db      	uxtb	r3, r3
 800bd22:	2b20      	cmp	r3, #32
 800bd24:	d17c      	bne.n	800be20 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d002      	beq.n	800bd32 <HAL_UART_Transmit+0x2c>
 800bd2c:	88fb      	ldrh	r3, [r7, #6]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d101      	bne.n	800bd36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bd32:	2301      	movs	r3, #1
 800bd34:	e075      	b.n	800be22 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d101      	bne.n	800bd44 <HAL_UART_Transmit+0x3e>
 800bd40:	2302      	movs	r3, #2
 800bd42:	e06e      	b.n	800be22 <HAL_UART_Transmit+0x11c>
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2201      	movs	r2, #1
 800bd48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2221      	movs	r2, #33	; 0x21
 800bd56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bd5a:	f7fb f899 	bl	8006e90 <HAL_GetTick>
 800bd5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	88fa      	ldrh	r2, [r7, #6]
 800bd64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	88fa      	ldrh	r2, [r7, #6]
 800bd6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	689b      	ldr	r3, [r3, #8]
 800bd70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd74:	d108      	bne.n	800bd88 <HAL_UART_Transmit+0x82>
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	691b      	ldr	r3, [r3, #16]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d104      	bne.n	800bd88 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	61bb      	str	r3, [r7, #24]
 800bd86:	e003      	b.n	800bd90 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2200      	movs	r2, #0
 800bd94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800bd98:	e02a      	b.n	800bdf0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	9300      	str	r3, [sp, #0]
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	2200      	movs	r2, #0
 800bda2:	2180      	movs	r1, #128	; 0x80
 800bda4:	68f8      	ldr	r0, [r7, #12]
 800bda6:	f000 fb63 	bl	800c470 <UART_WaitOnFlagUntilTimeout>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d001      	beq.n	800bdb4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800bdb0:	2303      	movs	r3, #3
 800bdb2:	e036      	b.n	800be22 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800bdb4:	69fb      	ldr	r3, [r7, #28]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d10b      	bne.n	800bdd2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bdba:	69bb      	ldr	r3, [r7, #24]
 800bdbc:	881b      	ldrh	r3, [r3, #0]
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bdc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bdca:	69bb      	ldr	r3, [r7, #24]
 800bdcc:	3302      	adds	r3, #2
 800bdce:	61bb      	str	r3, [r7, #24]
 800bdd0:	e007      	b.n	800bde2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bdd2:	69fb      	ldr	r3, [r7, #28]
 800bdd4:	781a      	ldrb	r2, [r3, #0]
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bddc:	69fb      	ldr	r3, [r7, #28]
 800bdde:	3301      	adds	r3, #1
 800bde0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	3b01      	subs	r3, #1
 800bdea:	b29a      	uxth	r2, r3
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bdf4:	b29b      	uxth	r3, r3
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d1cf      	bne.n	800bd9a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	9300      	str	r3, [sp, #0]
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	2200      	movs	r2, #0
 800be02:	2140      	movs	r1, #64	; 0x40
 800be04:	68f8      	ldr	r0, [r7, #12]
 800be06:	f000 fb33 	bl	800c470 <UART_WaitOnFlagUntilTimeout>
 800be0a:	4603      	mov	r3, r0
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d001      	beq.n	800be14 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800be10:	2303      	movs	r3, #3
 800be12:	e006      	b.n	800be22 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2220      	movs	r2, #32
 800be18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800be1c:	2300      	movs	r3, #0
 800be1e:	e000      	b.n	800be22 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800be20:	2302      	movs	r3, #2
  }
}
 800be22:	4618      	mov	r0, r3
 800be24:	3720      	adds	r7, #32
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}

0800be2a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800be2a:	b480      	push	{r7}
 800be2c:	b085      	sub	sp, #20
 800be2e:	af00      	add	r7, sp, #0
 800be30:	60f8      	str	r0, [r7, #12]
 800be32:	60b9      	str	r1, [r7, #8]
 800be34:	4613      	mov	r3, r2
 800be36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	2b20      	cmp	r3, #32
 800be42:	d130      	bne.n	800bea6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d002      	beq.n	800be50 <HAL_UART_Transmit_IT+0x26>
 800be4a:	88fb      	ldrh	r3, [r7, #6]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d101      	bne.n	800be54 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800be50:	2301      	movs	r3, #1
 800be52:	e029      	b.n	800bea8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d101      	bne.n	800be62 <HAL_UART_Transmit_IT+0x38>
 800be5e:	2302      	movs	r3, #2
 800be60:	e022      	b.n	800bea8 <HAL_UART_Transmit_IT+0x7e>
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2201      	movs	r2, #1
 800be66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	68ba      	ldr	r2, [r7, #8]
 800be6e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	88fa      	ldrh	r2, [r7, #6]
 800be74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	88fa      	ldrh	r2, [r7, #6]
 800be7a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2200      	movs	r2, #0
 800be80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2221      	movs	r2, #33	; 0x21
 800be86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2200      	movs	r2, #0
 800be8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	68da      	ldr	r2, [r3, #12]
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bea0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800bea2:	2300      	movs	r3, #0
 800bea4:	e000      	b.n	800bea8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800bea6:	2302      	movs	r3, #2
  }
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3714      	adds	r7, #20
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr

0800beb4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b084      	sub	sp, #16
 800beb8:	af00      	add	r7, sp, #0
 800beba:	60f8      	str	r0, [r7, #12]
 800bebc:	60b9      	str	r1, [r7, #8]
 800bebe:	4613      	mov	r3, r2
 800bec0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	2b20      	cmp	r3, #32
 800becc:	d11d      	bne.n	800bf0a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d002      	beq.n	800beda <HAL_UART_Receive_IT+0x26>
 800bed4:	88fb      	ldrh	r3, [r7, #6]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d101      	bne.n	800bede <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800beda:	2301      	movs	r3, #1
 800bedc:	e016      	b.n	800bf0c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	d101      	bne.n	800beec <HAL_UART_Receive_IT+0x38>
 800bee8:	2302      	movs	r3, #2
 800beea:	e00f      	b.n	800bf0c <HAL_UART_Receive_IT+0x58>
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2201      	movs	r2, #1
 800bef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	2200      	movs	r2, #0
 800bef8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800befa:	88fb      	ldrh	r3, [r7, #6]
 800befc:	461a      	mov	r2, r3
 800befe:	68b9      	ldr	r1, [r7, #8]
 800bf00:	68f8      	ldr	r0, [r7, #12]
 800bf02:	f000 fb23 	bl	800c54c <UART_Start_Receive_IT>
 800bf06:	4603      	mov	r3, r0
 800bf08:	e000      	b.n	800bf0c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800bf0a:	2302      	movs	r3, #2
  }
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3710      	adds	r7, #16
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b0ba      	sub	sp, #232	; 0xe8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	68db      	ldr	r3, [r3, #12]
 800bf2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	695b      	ldr	r3, [r3, #20]
 800bf36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bf40:	2300      	movs	r3, #0
 800bf42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bf46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf4a:	f003 030f 	and.w	r3, r3, #15
 800bf4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bf52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d10f      	bne.n	800bf7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bf5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf5e:	f003 0320 	and.w	r3, r3, #32
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d009      	beq.n	800bf7a <HAL_UART_IRQHandler+0x66>
 800bf66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf6a:	f003 0320 	and.w	r3, r3, #32
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d003      	beq.n	800bf7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 fc07 	bl	800c786 <UART_Receive_IT>
      return;
 800bf78:	e256      	b.n	800c428 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bf7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	f000 80de 	beq.w	800c140 <HAL_UART_IRQHandler+0x22c>
 800bf84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf88:	f003 0301 	and.w	r3, r3, #1
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d106      	bne.n	800bf9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bf90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	f000 80d1 	beq.w	800c140 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bf9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfa2:	f003 0301 	and.w	r3, r3, #1
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d00b      	beq.n	800bfc2 <HAL_UART_IRQHandler+0xae>
 800bfaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d005      	beq.n	800bfc2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfba:	f043 0201 	orr.w	r2, r3, #1
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bfc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfc6:	f003 0304 	and.w	r3, r3, #4
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d00b      	beq.n	800bfe6 <HAL_UART_IRQHandler+0xd2>
 800bfce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfd2:	f003 0301 	and.w	r3, r3, #1
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d005      	beq.n	800bfe6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfde:	f043 0202 	orr.w	r2, r3, #2
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bfe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfea:	f003 0302 	and.w	r3, r3, #2
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d00b      	beq.n	800c00a <HAL_UART_IRQHandler+0xf6>
 800bff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bff6:	f003 0301 	and.w	r3, r3, #1
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d005      	beq.n	800c00a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c002:	f043 0204 	orr.w	r2, r3, #4
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c00a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c00e:	f003 0308 	and.w	r3, r3, #8
 800c012:	2b00      	cmp	r3, #0
 800c014:	d011      	beq.n	800c03a <HAL_UART_IRQHandler+0x126>
 800c016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c01a:	f003 0320 	and.w	r3, r3, #32
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d105      	bne.n	800c02e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c026:	f003 0301 	and.w	r3, r3, #1
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d005      	beq.n	800c03a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c032:	f043 0208 	orr.w	r2, r3, #8
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c03e:	2b00      	cmp	r3, #0
 800c040:	f000 81ed 	beq.w	800c41e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c048:	f003 0320 	and.w	r3, r3, #32
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d008      	beq.n	800c062 <HAL_UART_IRQHandler+0x14e>
 800c050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c054:	f003 0320 	and.w	r3, r3, #32
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d002      	beq.n	800c062 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 fb92 	bl	800c786 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	695b      	ldr	r3, [r3, #20]
 800c068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c06c:	2b40      	cmp	r3, #64	; 0x40
 800c06e:	bf0c      	ite	eq
 800c070:	2301      	moveq	r3, #1
 800c072:	2300      	movne	r3, #0
 800c074:	b2db      	uxtb	r3, r3
 800c076:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c07e:	f003 0308 	and.w	r3, r3, #8
 800c082:	2b00      	cmp	r3, #0
 800c084:	d103      	bne.n	800c08e <HAL_UART_IRQHandler+0x17a>
 800c086:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d04f      	beq.n	800c12e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 fa9a 	bl	800c5c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	695b      	ldr	r3, [r3, #20]
 800c09a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c09e:	2b40      	cmp	r3, #64	; 0x40
 800c0a0:	d141      	bne.n	800c126 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	3314      	adds	r3, #20
 800c0a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c0b0:	e853 3f00 	ldrex	r3, [r3]
 800c0b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c0b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c0bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	3314      	adds	r3, #20
 800c0ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c0ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c0d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c0da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c0de:	e841 2300 	strex	r3, r2, [r1]
 800c0e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c0e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d1d9      	bne.n	800c0a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d013      	beq.n	800c11e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0fa:	4a7d      	ldr	r2, [pc, #500]	; (800c2f0 <HAL_UART_IRQHandler+0x3dc>)
 800c0fc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c102:	4618      	mov	r0, r3
 800c104:	f7fb fd32 	bl	8007b6c <HAL_DMA_Abort_IT>
 800c108:	4603      	mov	r3, r0
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d016      	beq.n	800c13c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c118:	4610      	mov	r0, r2
 800c11a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c11c:	e00e      	b.n	800c13c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 f990 	bl	800c444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c124:	e00a      	b.n	800c13c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 f98c 	bl	800c444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c12c:	e006      	b.n	800c13c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f000 f988 	bl	800c444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2200      	movs	r2, #0
 800c138:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c13a:	e170      	b.n	800c41e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c13c:	bf00      	nop
    return;
 800c13e:	e16e      	b.n	800c41e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c144:	2b01      	cmp	r3, #1
 800c146:	f040 814a 	bne.w	800c3de <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c14a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c14e:	f003 0310 	and.w	r3, r3, #16
 800c152:	2b00      	cmp	r3, #0
 800c154:	f000 8143 	beq.w	800c3de <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c15c:	f003 0310 	and.w	r3, r3, #16
 800c160:	2b00      	cmp	r3, #0
 800c162:	f000 813c 	beq.w	800c3de <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c166:	2300      	movs	r3, #0
 800c168:	60bb      	str	r3, [r7, #8]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	60bb      	str	r3, [r7, #8]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	60bb      	str	r3, [r7, #8]
 800c17a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	695b      	ldr	r3, [r3, #20]
 800c182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c186:	2b40      	cmp	r3, #64	; 0x40
 800c188:	f040 80b4 	bne.w	800c2f4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c198:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	f000 8140 	beq.w	800c422 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c1a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	f080 8139 	bcs.w	800c422 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c1b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1bc:	69db      	ldr	r3, [r3, #28]
 800c1be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1c2:	f000 8088 	beq.w	800c2d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	330c      	adds	r3, #12
 800c1cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c1d4:	e853 3f00 	ldrex	r3, [r3]
 800c1d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c1dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c1e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	330c      	adds	r3, #12
 800c1ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c1f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c1f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c1fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c202:	e841 2300 	strex	r3, r2, [r1]
 800c206:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c20a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d1d9      	bne.n	800c1c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	3314      	adds	r3, #20
 800c218:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c21a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c21c:	e853 3f00 	ldrex	r3, [r3]
 800c220:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c222:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c224:	f023 0301 	bic.w	r3, r3, #1
 800c228:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	3314      	adds	r3, #20
 800c232:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c236:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c23a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c23c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c23e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c242:	e841 2300 	strex	r3, r2, [r1]
 800c246:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d1e1      	bne.n	800c212 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	3314      	adds	r3, #20
 800c254:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c258:	e853 3f00 	ldrex	r3, [r3]
 800c25c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c25e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c260:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c264:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	3314      	adds	r3, #20
 800c26e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c272:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c274:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c276:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c278:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c27a:	e841 2300 	strex	r3, r2, [r1]
 800c27e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c282:	2b00      	cmp	r3, #0
 800c284:	d1e3      	bne.n	800c24e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2220      	movs	r2, #32
 800c28a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2200      	movs	r2, #0
 800c292:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	330c      	adds	r3, #12
 800c29a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c29c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c29e:	e853 3f00 	ldrex	r3, [r3]
 800c2a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c2a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2a6:	f023 0310 	bic.w	r3, r3, #16
 800c2aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	330c      	adds	r3, #12
 800c2b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c2b8:	65ba      	str	r2, [r7, #88]	; 0x58
 800c2ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c2be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c2c0:	e841 2300 	strex	r3, r2, [r1]
 800c2c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c2c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d1e3      	bne.n	800c294 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f7fb fbdb 	bl	8007a8c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	1ad3      	subs	r3, r2, r3
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f000 f8b6 	bl	800c458 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c2ec:	e099      	b.n	800c422 <HAL_UART_IRQHandler+0x50e>
 800c2ee:	bf00      	nop
 800c2f0:	0800c68f 	.word	0x0800c68f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c2fc:	b29b      	uxth	r3, r3
 800c2fe:	1ad3      	subs	r3, r2, r3
 800c300:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c308:	b29b      	uxth	r3, r3
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	f000 808b 	beq.w	800c426 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c310:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c314:	2b00      	cmp	r3, #0
 800c316:	f000 8086 	beq.w	800c426 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	330c      	adds	r3, #12
 800c320:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c324:	e853 3f00 	ldrex	r3, [r3]
 800c328:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c32a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c32c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c330:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	330c      	adds	r3, #12
 800c33a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c33e:	647a      	str	r2, [r7, #68]	; 0x44
 800c340:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c342:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c344:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c346:	e841 2300 	strex	r3, r2, [r1]
 800c34a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c34c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d1e3      	bne.n	800c31a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	3314      	adds	r3, #20
 800c358:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35c:	e853 3f00 	ldrex	r3, [r3]
 800c360:	623b      	str	r3, [r7, #32]
   return(result);
 800c362:	6a3b      	ldr	r3, [r7, #32]
 800c364:	f023 0301 	bic.w	r3, r3, #1
 800c368:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	3314      	adds	r3, #20
 800c372:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c376:	633a      	str	r2, [r7, #48]	; 0x30
 800c378:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c37a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c37c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c37e:	e841 2300 	strex	r3, r2, [r1]
 800c382:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c386:	2b00      	cmp	r3, #0
 800c388:	d1e3      	bne.n	800c352 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2220      	movs	r2, #32
 800c38e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2200      	movs	r2, #0
 800c396:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	330c      	adds	r3, #12
 800c39e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	e853 3f00 	ldrex	r3, [r3]
 800c3a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f023 0310 	bic.w	r3, r3, #16
 800c3ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	330c      	adds	r3, #12
 800c3b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c3bc:	61fa      	str	r2, [r7, #28]
 800c3be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3c0:	69b9      	ldr	r1, [r7, #24]
 800c3c2:	69fa      	ldr	r2, [r7, #28]
 800c3c4:	e841 2300 	strex	r3, r2, [r1]
 800c3c8:	617b      	str	r3, [r7, #20]
   return(result);
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d1e3      	bne.n	800c398 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c3d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 f83e 	bl	800c458 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c3dc:	e023      	b.n	800c426 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c3de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d009      	beq.n	800c3fe <HAL_UART_IRQHandler+0x4ea>
 800c3ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d003      	beq.n	800c3fe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f000 f95d 	bl	800c6b6 <UART_Transmit_IT>
    return;
 800c3fc:	e014      	b.n	800c428 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c3fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c406:	2b00      	cmp	r3, #0
 800c408:	d00e      	beq.n	800c428 <HAL_UART_IRQHandler+0x514>
 800c40a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c40e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c412:	2b00      	cmp	r3, #0
 800c414:	d008      	beq.n	800c428 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f000 f99d 	bl	800c756 <UART_EndTransmit_IT>
    return;
 800c41c:	e004      	b.n	800c428 <HAL_UART_IRQHandler+0x514>
    return;
 800c41e:	bf00      	nop
 800c420:	e002      	b.n	800c428 <HAL_UART_IRQHandler+0x514>
      return;
 800c422:	bf00      	nop
 800c424:	e000      	b.n	800c428 <HAL_UART_IRQHandler+0x514>
      return;
 800c426:	bf00      	nop
  }
}
 800c428:	37e8      	adds	r7, #232	; 0xe8
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
 800c42e:	bf00      	nop

0800c430 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c430:	b480      	push	{r7}
 800c432:	b083      	sub	sp, #12
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c438:	bf00      	nop
 800c43a:	370c      	adds	r7, #12
 800c43c:	46bd      	mov	sp, r7
 800c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c442:	4770      	bx	lr

0800c444 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c444:	b480      	push	{r7}
 800c446:	b083      	sub	sp, #12
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c44c:	bf00      	nop
 800c44e:	370c      	adds	r7, #12
 800c450:	46bd      	mov	sp, r7
 800c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c456:	4770      	bx	lr

0800c458 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c458:	b480      	push	{r7}
 800c45a:	b083      	sub	sp, #12
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	460b      	mov	r3, r1
 800c462:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c464:	bf00      	nop
 800c466:	370c      	adds	r7, #12
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr

0800c470 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b090      	sub	sp, #64	; 0x40
 800c474:	af00      	add	r7, sp, #0
 800c476:	60f8      	str	r0, [r7, #12]
 800c478:	60b9      	str	r1, [r7, #8]
 800c47a:	603b      	str	r3, [r7, #0]
 800c47c:	4613      	mov	r3, r2
 800c47e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c480:	e050      	b.n	800c524 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c484:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c488:	d04c      	beq.n	800c524 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c48a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d007      	beq.n	800c4a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c490:	f7fa fcfe 	bl	8006e90 <HAL_GetTick>
 800c494:	4602      	mov	r2, r0
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	1ad3      	subs	r3, r2, r3
 800c49a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d241      	bcs.n	800c524 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	330c      	adds	r3, #12
 800c4a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4aa:	e853 3f00 	ldrex	r3, [r3]
 800c4ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	330c      	adds	r3, #12
 800c4be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c4c0:	637a      	str	r2, [r7, #52]	; 0x34
 800c4c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c4c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4c8:	e841 2300 	strex	r3, r2, [r1]
 800c4cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d1e5      	bne.n	800c4a0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	3314      	adds	r3, #20
 800c4da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	e853 3f00 	ldrex	r3, [r3]
 800c4e2:	613b      	str	r3, [r7, #16]
   return(result);
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	f023 0301 	bic.w	r3, r3, #1
 800c4ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	3314      	adds	r3, #20
 800c4f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4f4:	623a      	str	r2, [r7, #32]
 800c4f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4f8:	69f9      	ldr	r1, [r7, #28]
 800c4fa:	6a3a      	ldr	r2, [r7, #32]
 800c4fc:	e841 2300 	strex	r3, r2, [r1]
 800c500:	61bb      	str	r3, [r7, #24]
   return(result);
 800c502:	69bb      	ldr	r3, [r7, #24]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d1e5      	bne.n	800c4d4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2220      	movs	r2, #32
 800c50c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	2220      	movs	r2, #32
 800c514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	2200      	movs	r2, #0
 800c51c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c520:	2303      	movs	r3, #3
 800c522:	e00f      	b.n	800c544 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	4013      	ands	r3, r2
 800c52e:	68ba      	ldr	r2, [r7, #8]
 800c530:	429a      	cmp	r2, r3
 800c532:	bf0c      	ite	eq
 800c534:	2301      	moveq	r3, #1
 800c536:	2300      	movne	r3, #0
 800c538:	b2db      	uxtb	r3, r3
 800c53a:	461a      	mov	r2, r3
 800c53c:	79fb      	ldrb	r3, [r7, #7]
 800c53e:	429a      	cmp	r2, r3
 800c540:	d09f      	beq.n	800c482 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c542:	2300      	movs	r3, #0
}
 800c544:	4618      	mov	r0, r3
 800c546:	3740      	adds	r7, #64	; 0x40
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c54c:	b480      	push	{r7}
 800c54e:	b085      	sub	sp, #20
 800c550:	af00      	add	r7, sp, #0
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	60b9      	str	r1, [r7, #8]
 800c556:	4613      	mov	r3, r2
 800c558:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	68ba      	ldr	r2, [r7, #8]
 800c55e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	88fa      	ldrh	r2, [r7, #6]
 800c564:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	88fa      	ldrh	r2, [r7, #6]
 800c56a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2200      	movs	r2, #0
 800c570:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	2222      	movs	r2, #34	; 0x22
 800c576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2200      	movs	r2, #0
 800c57e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	691b      	ldr	r3, [r3, #16]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d007      	beq.n	800c59a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	68da      	ldr	r2, [r3, #12]
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c598:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	695a      	ldr	r2, [r3, #20]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f042 0201 	orr.w	r2, r2, #1
 800c5a8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	68da      	ldr	r2, [r3, #12]
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f042 0220 	orr.w	r2, r2, #32
 800c5b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c5ba:	2300      	movs	r3, #0
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3714      	adds	r7, #20
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c6:	4770      	bx	lr

0800c5c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b095      	sub	sp, #84	; 0x54
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	330c      	adds	r3, #12
 800c5d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5da:	e853 3f00 	ldrex	r3, [r3]
 800c5de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c5e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	330c      	adds	r3, #12
 800c5ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c5f0:	643a      	str	r2, [r7, #64]	; 0x40
 800c5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c5f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c5f8:	e841 2300 	strex	r3, r2, [r1]
 800c5fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c600:	2b00      	cmp	r3, #0
 800c602:	d1e5      	bne.n	800c5d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	3314      	adds	r3, #20
 800c60a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c60c:	6a3b      	ldr	r3, [r7, #32]
 800c60e:	e853 3f00 	ldrex	r3, [r3]
 800c612:	61fb      	str	r3, [r7, #28]
   return(result);
 800c614:	69fb      	ldr	r3, [r7, #28]
 800c616:	f023 0301 	bic.w	r3, r3, #1
 800c61a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	3314      	adds	r3, #20
 800c622:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c624:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c626:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c628:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c62a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c62c:	e841 2300 	strex	r3, r2, [r1]
 800c630:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c634:	2b00      	cmp	r3, #0
 800c636:	d1e5      	bne.n	800c604 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c63c:	2b01      	cmp	r3, #1
 800c63e:	d119      	bne.n	800c674 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	330c      	adds	r3, #12
 800c646:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	e853 3f00 	ldrex	r3, [r3]
 800c64e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	f023 0310 	bic.w	r3, r3, #16
 800c656:	647b      	str	r3, [r7, #68]	; 0x44
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	330c      	adds	r3, #12
 800c65e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c660:	61ba      	str	r2, [r7, #24]
 800c662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c664:	6979      	ldr	r1, [r7, #20]
 800c666:	69ba      	ldr	r2, [r7, #24]
 800c668:	e841 2300 	strex	r3, r2, [r1]
 800c66c:	613b      	str	r3, [r7, #16]
   return(result);
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d1e5      	bne.n	800c640 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2220      	movs	r2, #32
 800c678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2200      	movs	r2, #0
 800c680:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c682:	bf00      	nop
 800c684:	3754      	adds	r7, #84	; 0x54
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr

0800c68e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c68e:	b580      	push	{r7, lr}
 800c690:	b084      	sub	sp, #16
 800c692:	af00      	add	r7, sp, #0
 800c694:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c69a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c6a8:	68f8      	ldr	r0, [r7, #12]
 800c6aa:	f7ff fecb 	bl	800c444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6ae:	bf00      	nop
 800c6b0:	3710      	adds	r7, #16
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}

0800c6b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c6b6:	b480      	push	{r7}
 800c6b8:	b085      	sub	sp, #20
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6c4:	b2db      	uxtb	r3, r3
 800c6c6:	2b21      	cmp	r3, #33	; 0x21
 800c6c8:	d13e      	bne.n	800c748 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	689b      	ldr	r3, [r3, #8]
 800c6ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6d2:	d114      	bne.n	800c6fe <UART_Transmit_IT+0x48>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	691b      	ldr	r3, [r3, #16]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d110      	bne.n	800c6fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6a1b      	ldr	r3, [r3, #32]
 800c6e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	881b      	ldrh	r3, [r3, #0]
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c6f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6a1b      	ldr	r3, [r3, #32]
 800c6f6:	1c9a      	adds	r2, r3, #2
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	621a      	str	r2, [r3, #32]
 800c6fc:	e008      	b.n	800c710 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6a1b      	ldr	r3, [r3, #32]
 800c702:	1c59      	adds	r1, r3, #1
 800c704:	687a      	ldr	r2, [r7, #4]
 800c706:	6211      	str	r1, [r2, #32]
 800c708:	781a      	ldrb	r2, [r3, #0]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c714:	b29b      	uxth	r3, r3
 800c716:	3b01      	subs	r3, #1
 800c718:	b29b      	uxth	r3, r3
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	4619      	mov	r1, r3
 800c71e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c720:	2b00      	cmp	r3, #0
 800c722:	d10f      	bne.n	800c744 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	68da      	ldr	r2, [r3, #12]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c732:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	68da      	ldr	r2, [r3, #12]
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c742:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c744:	2300      	movs	r3, #0
 800c746:	e000      	b.n	800c74a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c748:	2302      	movs	r3, #2
  }
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3714      	adds	r7, #20
 800c74e:	46bd      	mov	sp, r7
 800c750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c754:	4770      	bx	lr

0800c756 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c756:	b580      	push	{r7, lr}
 800c758:	b082      	sub	sp, #8
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	68da      	ldr	r2, [r3, #12]
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c76c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2220      	movs	r2, #32
 800c772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f7ff fe5a 	bl	800c430 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c77c:	2300      	movs	r3, #0
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3708      	adds	r7, #8
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}

0800c786 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c786:	b580      	push	{r7, lr}
 800c788:	b08c      	sub	sp, #48	; 0x30
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c794:	b2db      	uxtb	r3, r3
 800c796:	2b22      	cmp	r3, #34	; 0x22
 800c798:	f040 80ab 	bne.w	800c8f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	689b      	ldr	r3, [r3, #8]
 800c7a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7a4:	d117      	bne.n	800c7d6 <UART_Receive_IT+0x50>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	691b      	ldr	r3, [r3, #16]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d113      	bne.n	800c7d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	b29b      	uxth	r3, r3
 800c7c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7c4:	b29a      	uxth	r2, r3
 800c7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ce:	1c9a      	adds	r2, r3, #2
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	629a      	str	r2, [r3, #40]	; 0x28
 800c7d4:	e026      	b.n	800c824 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	689b      	ldr	r3, [r3, #8]
 800c7e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7e8:	d007      	beq.n	800c7fa <UART_Receive_IT+0x74>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	689b      	ldr	r3, [r3, #8]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d10a      	bne.n	800c808 <UART_Receive_IT+0x82>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	691b      	ldr	r3, [r3, #16]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d106      	bne.n	800c808 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	b2da      	uxtb	r2, r3
 800c802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c804:	701a      	strb	r2, [r3, #0]
 800c806:	e008      	b.n	800c81a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	685b      	ldr	r3, [r3, #4]
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c814:	b2da      	uxtb	r2, r3
 800c816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c818:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c81e:	1c5a      	adds	r2, r3, #1
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c828:	b29b      	uxth	r3, r3
 800c82a:	3b01      	subs	r3, #1
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	4619      	mov	r1, r3
 800c832:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c834:	2b00      	cmp	r3, #0
 800c836:	d15a      	bne.n	800c8ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	68da      	ldr	r2, [r3, #12]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f022 0220 	bic.w	r2, r2, #32
 800c846:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	68da      	ldr	r2, [r3, #12]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c856:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	695a      	ldr	r2, [r3, #20]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f022 0201 	bic.w	r2, r2, #1
 800c866:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2220      	movs	r2, #32
 800c86c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c874:	2b01      	cmp	r3, #1
 800c876:	d135      	bne.n	800c8e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2200      	movs	r2, #0
 800c87c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	330c      	adds	r3, #12
 800c884:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	e853 3f00 	ldrex	r3, [r3]
 800c88c:	613b      	str	r3, [r7, #16]
   return(result);
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	f023 0310 	bic.w	r3, r3, #16
 800c894:	627b      	str	r3, [r7, #36]	; 0x24
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	330c      	adds	r3, #12
 800c89c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c89e:	623a      	str	r2, [r7, #32]
 800c8a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8a2:	69f9      	ldr	r1, [r7, #28]
 800c8a4:	6a3a      	ldr	r2, [r7, #32]
 800c8a6:	e841 2300 	strex	r3, r2, [r1]
 800c8aa:	61bb      	str	r3, [r7, #24]
   return(result);
 800c8ac:	69bb      	ldr	r3, [r7, #24]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d1e5      	bne.n	800c87e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f003 0310 	and.w	r3, r3, #16
 800c8bc:	2b10      	cmp	r3, #16
 800c8be:	d10a      	bne.n	800c8d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	60fb      	str	r3, [r7, #12]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	60fb      	str	r3, [r7, #12]
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	60fb      	str	r3, [r7, #12]
 800c8d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c8da:	4619      	mov	r1, r3
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f7ff fdbb 	bl	800c458 <HAL_UARTEx_RxEventCallback>
 800c8e2:	e002      	b.n	800c8ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f7f7 f8ad 	bl	8003a44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	e002      	b.n	800c8f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	e000      	b.n	800c8f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c8f2:	2302      	movs	r3, #2
  }
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3730      	adds	r7, #48	; 0x30
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}

0800c8fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c8fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c900:	b0c0      	sub	sp, #256	; 0x100
 800c902:	af00      	add	r7, sp, #0
 800c904:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	691b      	ldr	r3, [r3, #16]
 800c910:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c918:	68d9      	ldr	r1, [r3, #12]
 800c91a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c91e:	681a      	ldr	r2, [r3, #0]
 800c920:	ea40 0301 	orr.w	r3, r0, r1
 800c924:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c92a:	689a      	ldr	r2, [r3, #8]
 800c92c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c930:	691b      	ldr	r3, [r3, #16]
 800c932:	431a      	orrs	r2, r3
 800c934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c938:	695b      	ldr	r3, [r3, #20]
 800c93a:	431a      	orrs	r2, r3
 800c93c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c940:	69db      	ldr	r3, [r3, #28]
 800c942:	4313      	orrs	r3, r2
 800c944:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	68db      	ldr	r3, [r3, #12]
 800c950:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c954:	f021 010c 	bic.w	r1, r1, #12
 800c958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c95c:	681a      	ldr	r2, [r3, #0]
 800c95e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c962:	430b      	orrs	r3, r1
 800c964:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	695b      	ldr	r3, [r3, #20]
 800c96e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c976:	6999      	ldr	r1, [r3, #24]
 800c978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	ea40 0301 	orr.w	r3, r0, r1
 800c982:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	4b8f      	ldr	r3, [pc, #572]	; (800cbc8 <UART_SetConfig+0x2cc>)
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d005      	beq.n	800c99c <UART_SetConfig+0xa0>
 800c990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c994:	681a      	ldr	r2, [r3, #0]
 800c996:	4b8d      	ldr	r3, [pc, #564]	; (800cbcc <UART_SetConfig+0x2d0>)
 800c998:	429a      	cmp	r2, r3
 800c99a:	d104      	bne.n	800c9a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c99c:	f7fe fbca 	bl	800b134 <HAL_RCC_GetPCLK2Freq>
 800c9a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c9a4:	e003      	b.n	800c9ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c9a6:	f7fe fbb1 	bl	800b10c <HAL_RCC_GetPCLK1Freq>
 800c9aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c9ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9b2:	69db      	ldr	r3, [r3, #28]
 800c9b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c9b8:	f040 810c 	bne.w	800cbd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c9bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c9c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c9ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c9ce:	4622      	mov	r2, r4
 800c9d0:	462b      	mov	r3, r5
 800c9d2:	1891      	adds	r1, r2, r2
 800c9d4:	65b9      	str	r1, [r7, #88]	; 0x58
 800c9d6:	415b      	adcs	r3, r3
 800c9d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c9da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c9de:	4621      	mov	r1, r4
 800c9e0:	eb12 0801 	adds.w	r8, r2, r1
 800c9e4:	4629      	mov	r1, r5
 800c9e6:	eb43 0901 	adc.w	r9, r3, r1
 800c9ea:	f04f 0200 	mov.w	r2, #0
 800c9ee:	f04f 0300 	mov.w	r3, #0
 800c9f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c9f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c9fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c9fe:	4690      	mov	r8, r2
 800ca00:	4699      	mov	r9, r3
 800ca02:	4623      	mov	r3, r4
 800ca04:	eb18 0303 	adds.w	r3, r8, r3
 800ca08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ca0c:	462b      	mov	r3, r5
 800ca0e:	eb49 0303 	adc.w	r3, r9, r3
 800ca12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ca16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca1a:	685b      	ldr	r3, [r3, #4]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ca22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ca26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ca2a:	460b      	mov	r3, r1
 800ca2c:	18db      	adds	r3, r3, r3
 800ca2e:	653b      	str	r3, [r7, #80]	; 0x50
 800ca30:	4613      	mov	r3, r2
 800ca32:	eb42 0303 	adc.w	r3, r2, r3
 800ca36:	657b      	str	r3, [r7, #84]	; 0x54
 800ca38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ca3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ca40:	f7f4 f922 	bl	8000c88 <__aeabi_uldivmod>
 800ca44:	4602      	mov	r2, r0
 800ca46:	460b      	mov	r3, r1
 800ca48:	4b61      	ldr	r3, [pc, #388]	; (800cbd0 <UART_SetConfig+0x2d4>)
 800ca4a:	fba3 2302 	umull	r2, r3, r3, r2
 800ca4e:	095b      	lsrs	r3, r3, #5
 800ca50:	011c      	lsls	r4, r3, #4
 800ca52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca56:	2200      	movs	r2, #0
 800ca58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ca5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ca60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ca64:	4642      	mov	r2, r8
 800ca66:	464b      	mov	r3, r9
 800ca68:	1891      	adds	r1, r2, r2
 800ca6a:	64b9      	str	r1, [r7, #72]	; 0x48
 800ca6c:	415b      	adcs	r3, r3
 800ca6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ca74:	4641      	mov	r1, r8
 800ca76:	eb12 0a01 	adds.w	sl, r2, r1
 800ca7a:	4649      	mov	r1, r9
 800ca7c:	eb43 0b01 	adc.w	fp, r3, r1
 800ca80:	f04f 0200 	mov.w	r2, #0
 800ca84:	f04f 0300 	mov.w	r3, #0
 800ca88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ca8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ca90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ca94:	4692      	mov	sl, r2
 800ca96:	469b      	mov	fp, r3
 800ca98:	4643      	mov	r3, r8
 800ca9a:	eb1a 0303 	adds.w	r3, sl, r3
 800ca9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800caa2:	464b      	mov	r3, r9
 800caa4:	eb4b 0303 	adc.w	r3, fp, r3
 800caa8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800caac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cab0:	685b      	ldr	r3, [r3, #4]
 800cab2:	2200      	movs	r2, #0
 800cab4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cab8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cabc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cac0:	460b      	mov	r3, r1
 800cac2:	18db      	adds	r3, r3, r3
 800cac4:	643b      	str	r3, [r7, #64]	; 0x40
 800cac6:	4613      	mov	r3, r2
 800cac8:	eb42 0303 	adc.w	r3, r2, r3
 800cacc:	647b      	str	r3, [r7, #68]	; 0x44
 800cace:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cad2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cad6:	f7f4 f8d7 	bl	8000c88 <__aeabi_uldivmod>
 800cada:	4602      	mov	r2, r0
 800cadc:	460b      	mov	r3, r1
 800cade:	4611      	mov	r1, r2
 800cae0:	4b3b      	ldr	r3, [pc, #236]	; (800cbd0 <UART_SetConfig+0x2d4>)
 800cae2:	fba3 2301 	umull	r2, r3, r3, r1
 800cae6:	095b      	lsrs	r3, r3, #5
 800cae8:	2264      	movs	r2, #100	; 0x64
 800caea:	fb02 f303 	mul.w	r3, r2, r3
 800caee:	1acb      	subs	r3, r1, r3
 800caf0:	00db      	lsls	r3, r3, #3
 800caf2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800caf6:	4b36      	ldr	r3, [pc, #216]	; (800cbd0 <UART_SetConfig+0x2d4>)
 800caf8:	fba3 2302 	umull	r2, r3, r3, r2
 800cafc:	095b      	lsrs	r3, r3, #5
 800cafe:	005b      	lsls	r3, r3, #1
 800cb00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cb04:	441c      	add	r4, r3
 800cb06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cb10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cb14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cb18:	4642      	mov	r2, r8
 800cb1a:	464b      	mov	r3, r9
 800cb1c:	1891      	adds	r1, r2, r2
 800cb1e:	63b9      	str	r1, [r7, #56]	; 0x38
 800cb20:	415b      	adcs	r3, r3
 800cb22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cb28:	4641      	mov	r1, r8
 800cb2a:	1851      	adds	r1, r2, r1
 800cb2c:	6339      	str	r1, [r7, #48]	; 0x30
 800cb2e:	4649      	mov	r1, r9
 800cb30:	414b      	adcs	r3, r1
 800cb32:	637b      	str	r3, [r7, #52]	; 0x34
 800cb34:	f04f 0200 	mov.w	r2, #0
 800cb38:	f04f 0300 	mov.w	r3, #0
 800cb3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800cb40:	4659      	mov	r1, fp
 800cb42:	00cb      	lsls	r3, r1, #3
 800cb44:	4651      	mov	r1, sl
 800cb46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cb4a:	4651      	mov	r1, sl
 800cb4c:	00ca      	lsls	r2, r1, #3
 800cb4e:	4610      	mov	r0, r2
 800cb50:	4619      	mov	r1, r3
 800cb52:	4603      	mov	r3, r0
 800cb54:	4642      	mov	r2, r8
 800cb56:	189b      	adds	r3, r3, r2
 800cb58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cb5c:	464b      	mov	r3, r9
 800cb5e:	460a      	mov	r2, r1
 800cb60:	eb42 0303 	adc.w	r3, r2, r3
 800cb64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cb68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cb74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800cb78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800cb7c:	460b      	mov	r3, r1
 800cb7e:	18db      	adds	r3, r3, r3
 800cb80:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb82:	4613      	mov	r3, r2
 800cb84:	eb42 0303 	adc.w	r3, r2, r3
 800cb88:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cb8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800cb92:	f7f4 f879 	bl	8000c88 <__aeabi_uldivmod>
 800cb96:	4602      	mov	r2, r0
 800cb98:	460b      	mov	r3, r1
 800cb9a:	4b0d      	ldr	r3, [pc, #52]	; (800cbd0 <UART_SetConfig+0x2d4>)
 800cb9c:	fba3 1302 	umull	r1, r3, r3, r2
 800cba0:	095b      	lsrs	r3, r3, #5
 800cba2:	2164      	movs	r1, #100	; 0x64
 800cba4:	fb01 f303 	mul.w	r3, r1, r3
 800cba8:	1ad3      	subs	r3, r2, r3
 800cbaa:	00db      	lsls	r3, r3, #3
 800cbac:	3332      	adds	r3, #50	; 0x32
 800cbae:	4a08      	ldr	r2, [pc, #32]	; (800cbd0 <UART_SetConfig+0x2d4>)
 800cbb0:	fba2 2303 	umull	r2, r3, r2, r3
 800cbb4:	095b      	lsrs	r3, r3, #5
 800cbb6:	f003 0207 	and.w	r2, r3, #7
 800cbba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4422      	add	r2, r4
 800cbc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cbc4:	e105      	b.n	800cdd2 <UART_SetConfig+0x4d6>
 800cbc6:	bf00      	nop
 800cbc8:	40011000 	.word	0x40011000
 800cbcc:	40011400 	.word	0x40011400
 800cbd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cbd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cbd8:	2200      	movs	r2, #0
 800cbda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cbde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800cbe2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800cbe6:	4642      	mov	r2, r8
 800cbe8:	464b      	mov	r3, r9
 800cbea:	1891      	adds	r1, r2, r2
 800cbec:	6239      	str	r1, [r7, #32]
 800cbee:	415b      	adcs	r3, r3
 800cbf0:	627b      	str	r3, [r7, #36]	; 0x24
 800cbf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cbf6:	4641      	mov	r1, r8
 800cbf8:	1854      	adds	r4, r2, r1
 800cbfa:	4649      	mov	r1, r9
 800cbfc:	eb43 0501 	adc.w	r5, r3, r1
 800cc00:	f04f 0200 	mov.w	r2, #0
 800cc04:	f04f 0300 	mov.w	r3, #0
 800cc08:	00eb      	lsls	r3, r5, #3
 800cc0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cc0e:	00e2      	lsls	r2, r4, #3
 800cc10:	4614      	mov	r4, r2
 800cc12:	461d      	mov	r5, r3
 800cc14:	4643      	mov	r3, r8
 800cc16:	18e3      	adds	r3, r4, r3
 800cc18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cc1c:	464b      	mov	r3, r9
 800cc1e:	eb45 0303 	adc.w	r3, r5, r3
 800cc22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cc26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc2a:	685b      	ldr	r3, [r3, #4]
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cc32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cc36:	f04f 0200 	mov.w	r2, #0
 800cc3a:	f04f 0300 	mov.w	r3, #0
 800cc3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800cc42:	4629      	mov	r1, r5
 800cc44:	008b      	lsls	r3, r1, #2
 800cc46:	4621      	mov	r1, r4
 800cc48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cc4c:	4621      	mov	r1, r4
 800cc4e:	008a      	lsls	r2, r1, #2
 800cc50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800cc54:	f7f4 f818 	bl	8000c88 <__aeabi_uldivmod>
 800cc58:	4602      	mov	r2, r0
 800cc5a:	460b      	mov	r3, r1
 800cc5c:	4b60      	ldr	r3, [pc, #384]	; (800cde0 <UART_SetConfig+0x4e4>)
 800cc5e:	fba3 2302 	umull	r2, r3, r3, r2
 800cc62:	095b      	lsrs	r3, r3, #5
 800cc64:	011c      	lsls	r4, r3, #4
 800cc66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cc70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cc74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800cc78:	4642      	mov	r2, r8
 800cc7a:	464b      	mov	r3, r9
 800cc7c:	1891      	adds	r1, r2, r2
 800cc7e:	61b9      	str	r1, [r7, #24]
 800cc80:	415b      	adcs	r3, r3
 800cc82:	61fb      	str	r3, [r7, #28]
 800cc84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cc88:	4641      	mov	r1, r8
 800cc8a:	1851      	adds	r1, r2, r1
 800cc8c:	6139      	str	r1, [r7, #16]
 800cc8e:	4649      	mov	r1, r9
 800cc90:	414b      	adcs	r3, r1
 800cc92:	617b      	str	r3, [r7, #20]
 800cc94:	f04f 0200 	mov.w	r2, #0
 800cc98:	f04f 0300 	mov.w	r3, #0
 800cc9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cca0:	4659      	mov	r1, fp
 800cca2:	00cb      	lsls	r3, r1, #3
 800cca4:	4651      	mov	r1, sl
 800cca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ccaa:	4651      	mov	r1, sl
 800ccac:	00ca      	lsls	r2, r1, #3
 800ccae:	4610      	mov	r0, r2
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	4642      	mov	r2, r8
 800ccb6:	189b      	adds	r3, r3, r2
 800ccb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ccbc:	464b      	mov	r3, r9
 800ccbe:	460a      	mov	r2, r1
 800ccc0:	eb42 0303 	adc.w	r3, r2, r3
 800ccc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ccc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cccc:	685b      	ldr	r3, [r3, #4]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	67bb      	str	r3, [r7, #120]	; 0x78
 800ccd2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ccd4:	f04f 0200 	mov.w	r2, #0
 800ccd8:	f04f 0300 	mov.w	r3, #0
 800ccdc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cce0:	4649      	mov	r1, r9
 800cce2:	008b      	lsls	r3, r1, #2
 800cce4:	4641      	mov	r1, r8
 800cce6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ccea:	4641      	mov	r1, r8
 800ccec:	008a      	lsls	r2, r1, #2
 800ccee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ccf2:	f7f3 ffc9 	bl	8000c88 <__aeabi_uldivmod>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	4b39      	ldr	r3, [pc, #228]	; (800cde0 <UART_SetConfig+0x4e4>)
 800ccfc:	fba3 1302 	umull	r1, r3, r3, r2
 800cd00:	095b      	lsrs	r3, r3, #5
 800cd02:	2164      	movs	r1, #100	; 0x64
 800cd04:	fb01 f303 	mul.w	r3, r1, r3
 800cd08:	1ad3      	subs	r3, r2, r3
 800cd0a:	011b      	lsls	r3, r3, #4
 800cd0c:	3332      	adds	r3, #50	; 0x32
 800cd0e:	4a34      	ldr	r2, [pc, #208]	; (800cde0 <UART_SetConfig+0x4e4>)
 800cd10:	fba2 2303 	umull	r2, r3, r2, r3
 800cd14:	095b      	lsrs	r3, r3, #5
 800cd16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd1a:	441c      	add	r4, r3
 800cd1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cd20:	2200      	movs	r2, #0
 800cd22:	673b      	str	r3, [r7, #112]	; 0x70
 800cd24:	677a      	str	r2, [r7, #116]	; 0x74
 800cd26:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800cd2a:	4642      	mov	r2, r8
 800cd2c:	464b      	mov	r3, r9
 800cd2e:	1891      	adds	r1, r2, r2
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	415b      	adcs	r3, r3
 800cd34:	60fb      	str	r3, [r7, #12]
 800cd36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cd3a:	4641      	mov	r1, r8
 800cd3c:	1851      	adds	r1, r2, r1
 800cd3e:	6039      	str	r1, [r7, #0]
 800cd40:	4649      	mov	r1, r9
 800cd42:	414b      	adcs	r3, r1
 800cd44:	607b      	str	r3, [r7, #4]
 800cd46:	f04f 0200 	mov.w	r2, #0
 800cd4a:	f04f 0300 	mov.w	r3, #0
 800cd4e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cd52:	4659      	mov	r1, fp
 800cd54:	00cb      	lsls	r3, r1, #3
 800cd56:	4651      	mov	r1, sl
 800cd58:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cd5c:	4651      	mov	r1, sl
 800cd5e:	00ca      	lsls	r2, r1, #3
 800cd60:	4610      	mov	r0, r2
 800cd62:	4619      	mov	r1, r3
 800cd64:	4603      	mov	r3, r0
 800cd66:	4642      	mov	r2, r8
 800cd68:	189b      	adds	r3, r3, r2
 800cd6a:	66bb      	str	r3, [r7, #104]	; 0x68
 800cd6c:	464b      	mov	r3, r9
 800cd6e:	460a      	mov	r2, r1
 800cd70:	eb42 0303 	adc.w	r3, r2, r3
 800cd74:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cd76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd7a:	685b      	ldr	r3, [r3, #4]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	663b      	str	r3, [r7, #96]	; 0x60
 800cd80:	667a      	str	r2, [r7, #100]	; 0x64
 800cd82:	f04f 0200 	mov.w	r2, #0
 800cd86:	f04f 0300 	mov.w	r3, #0
 800cd8a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800cd8e:	4649      	mov	r1, r9
 800cd90:	008b      	lsls	r3, r1, #2
 800cd92:	4641      	mov	r1, r8
 800cd94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cd98:	4641      	mov	r1, r8
 800cd9a:	008a      	lsls	r2, r1, #2
 800cd9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cda0:	f7f3 ff72 	bl	8000c88 <__aeabi_uldivmod>
 800cda4:	4602      	mov	r2, r0
 800cda6:	460b      	mov	r3, r1
 800cda8:	4b0d      	ldr	r3, [pc, #52]	; (800cde0 <UART_SetConfig+0x4e4>)
 800cdaa:	fba3 1302 	umull	r1, r3, r3, r2
 800cdae:	095b      	lsrs	r3, r3, #5
 800cdb0:	2164      	movs	r1, #100	; 0x64
 800cdb2:	fb01 f303 	mul.w	r3, r1, r3
 800cdb6:	1ad3      	subs	r3, r2, r3
 800cdb8:	011b      	lsls	r3, r3, #4
 800cdba:	3332      	adds	r3, #50	; 0x32
 800cdbc:	4a08      	ldr	r2, [pc, #32]	; (800cde0 <UART_SetConfig+0x4e4>)
 800cdbe:	fba2 2303 	umull	r2, r3, r2, r3
 800cdc2:	095b      	lsrs	r3, r3, #5
 800cdc4:	f003 020f 	and.w	r2, r3, #15
 800cdc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	4422      	add	r2, r4
 800cdd0:	609a      	str	r2, [r3, #8]
}
 800cdd2:	bf00      	nop
 800cdd4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cdde:	bf00      	nop
 800cde0:	51eb851f 	.word	0x51eb851f

0800cde4 <__NVIC_SetPriority>:
{
 800cde4:	b480      	push	{r7}
 800cde6:	b083      	sub	sp, #12
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	4603      	mov	r3, r0
 800cdec:	6039      	str	r1, [r7, #0]
 800cdee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cdf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	db0a      	blt.n	800ce0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	b2da      	uxtb	r2, r3
 800cdfc:	490c      	ldr	r1, [pc, #48]	; (800ce30 <__NVIC_SetPriority+0x4c>)
 800cdfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce02:	0112      	lsls	r2, r2, #4
 800ce04:	b2d2      	uxtb	r2, r2
 800ce06:	440b      	add	r3, r1
 800ce08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ce0c:	e00a      	b.n	800ce24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	b2da      	uxtb	r2, r3
 800ce12:	4908      	ldr	r1, [pc, #32]	; (800ce34 <__NVIC_SetPriority+0x50>)
 800ce14:	79fb      	ldrb	r3, [r7, #7]
 800ce16:	f003 030f 	and.w	r3, r3, #15
 800ce1a:	3b04      	subs	r3, #4
 800ce1c:	0112      	lsls	r2, r2, #4
 800ce1e:	b2d2      	uxtb	r2, r2
 800ce20:	440b      	add	r3, r1
 800ce22:	761a      	strb	r2, [r3, #24]
}
 800ce24:	bf00      	nop
 800ce26:	370c      	adds	r7, #12
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr
 800ce30:	e000e100 	.word	0xe000e100
 800ce34:	e000ed00 	.word	0xe000ed00

0800ce38 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ce3c:	4b05      	ldr	r3, [pc, #20]	; (800ce54 <SysTick_Handler+0x1c>)
 800ce3e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ce40:	f001 fd28 	bl	800e894 <xTaskGetSchedulerState>
 800ce44:	4603      	mov	r3, r0
 800ce46:	2b01      	cmp	r3, #1
 800ce48:	d001      	beq.n	800ce4e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ce4a:	f002 fb0d 	bl	800f468 <xPortSysTickHandler>
  }
}
 800ce4e:	bf00      	nop
 800ce50:	bd80      	pop	{r7, pc}
 800ce52:	bf00      	nop
 800ce54:	e000e010 	.word	0xe000e010

0800ce58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ce5c:	2100      	movs	r1, #0
 800ce5e:	f06f 0004 	mvn.w	r0, #4
 800ce62:	f7ff ffbf 	bl	800cde4 <__NVIC_SetPriority>
#endif
}
 800ce66:	bf00      	nop
 800ce68:	bd80      	pop	{r7, pc}
	...

0800ce6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ce6c:	b480      	push	{r7}
 800ce6e:	b083      	sub	sp, #12
 800ce70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce72:	f3ef 8305 	mrs	r3, IPSR
 800ce76:	603b      	str	r3, [r7, #0]
  return(result);
 800ce78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d003      	beq.n	800ce86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ce7e:	f06f 0305 	mvn.w	r3, #5
 800ce82:	607b      	str	r3, [r7, #4]
 800ce84:	e00c      	b.n	800cea0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ce86:	4b0a      	ldr	r3, [pc, #40]	; (800ceb0 <osKernelInitialize+0x44>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d105      	bne.n	800ce9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ce8e:	4b08      	ldr	r3, [pc, #32]	; (800ceb0 <osKernelInitialize+0x44>)
 800ce90:	2201      	movs	r2, #1
 800ce92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ce94:	2300      	movs	r3, #0
 800ce96:	607b      	str	r3, [r7, #4]
 800ce98:	e002      	b.n	800cea0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ce9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ce9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cea0:	687b      	ldr	r3, [r7, #4]
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	370c      	adds	r7, #12
 800cea6:	46bd      	mov	sp, r7
 800cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceac:	4770      	bx	lr
 800ceae:	bf00      	nop
 800ceb0:	20000cec 	.word	0x20000cec

0800ceb4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b082      	sub	sp, #8
 800ceb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ceba:	f3ef 8305 	mrs	r3, IPSR
 800cebe:	603b      	str	r3, [r7, #0]
  return(result);
 800cec0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d003      	beq.n	800cece <osKernelStart+0x1a>
    stat = osErrorISR;
 800cec6:	f06f 0305 	mvn.w	r3, #5
 800ceca:	607b      	str	r3, [r7, #4]
 800cecc:	e010      	b.n	800cef0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cece:	4b0b      	ldr	r3, [pc, #44]	; (800cefc <osKernelStart+0x48>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	2b01      	cmp	r3, #1
 800ced4:	d109      	bne.n	800ceea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ced6:	f7ff ffbf 	bl	800ce58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ceda:	4b08      	ldr	r3, [pc, #32]	; (800cefc <osKernelStart+0x48>)
 800cedc:	2202      	movs	r2, #2
 800cede:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cee0:	f001 f87c 	bl	800dfdc <vTaskStartScheduler>
      stat = osOK;
 800cee4:	2300      	movs	r3, #0
 800cee6:	607b      	str	r3, [r7, #4]
 800cee8:	e002      	b.n	800cef0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ceea:	f04f 33ff 	mov.w	r3, #4294967295
 800ceee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cef0:	687b      	ldr	r3, [r7, #4]
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3708      	adds	r7, #8
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
 800cefa:	bf00      	nop
 800cefc:	20000cec 	.word	0x20000cec

0800cf00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b08e      	sub	sp, #56	; 0x38
 800cf04:	af04      	add	r7, sp, #16
 800cf06:	60f8      	str	r0, [r7, #12]
 800cf08:	60b9      	str	r1, [r7, #8]
 800cf0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf10:	f3ef 8305 	mrs	r3, IPSR
 800cf14:	617b      	str	r3, [r7, #20]
  return(result);
 800cf16:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d17e      	bne.n	800d01a <osThreadNew+0x11a>
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d07b      	beq.n	800d01a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cf22:	2380      	movs	r3, #128	; 0x80
 800cf24:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cf26:	2318      	movs	r3, #24
 800cf28:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800cf2e:	f04f 33ff 	mov.w	r3, #4294967295
 800cf32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d045      	beq.n	800cfc6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d002      	beq.n	800cf48 <osThreadNew+0x48>
        name = attr->name;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	699b      	ldr	r3, [r3, #24]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d002      	beq.n	800cf56 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	699b      	ldr	r3, [r3, #24]
 800cf54:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cf56:	69fb      	ldr	r3, [r7, #28]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d008      	beq.n	800cf6e <osThreadNew+0x6e>
 800cf5c:	69fb      	ldr	r3, [r7, #28]
 800cf5e:	2b38      	cmp	r3, #56	; 0x38
 800cf60:	d805      	bhi.n	800cf6e <osThreadNew+0x6e>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	f003 0301 	and.w	r3, r3, #1
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d001      	beq.n	800cf72 <osThreadNew+0x72>
        return (NULL);
 800cf6e:	2300      	movs	r3, #0
 800cf70:	e054      	b.n	800d01c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	695b      	ldr	r3, [r3, #20]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d003      	beq.n	800cf82 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	695b      	ldr	r3, [r3, #20]
 800cf7e:	089b      	lsrs	r3, r3, #2
 800cf80:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	689b      	ldr	r3, [r3, #8]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d00e      	beq.n	800cfa8 <osThreadNew+0xa8>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	68db      	ldr	r3, [r3, #12]
 800cf8e:	2bbb      	cmp	r3, #187	; 0xbb
 800cf90:	d90a      	bls.n	800cfa8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d006      	beq.n	800cfa8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	695b      	ldr	r3, [r3, #20]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d002      	beq.n	800cfa8 <osThreadNew+0xa8>
        mem = 1;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	61bb      	str	r3, [r7, #24]
 800cfa6:	e010      	b.n	800cfca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	689b      	ldr	r3, [r3, #8]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d10c      	bne.n	800cfca <osThreadNew+0xca>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	68db      	ldr	r3, [r3, #12]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d108      	bne.n	800cfca <osThreadNew+0xca>
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	691b      	ldr	r3, [r3, #16]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d104      	bne.n	800cfca <osThreadNew+0xca>
          mem = 0;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	61bb      	str	r3, [r7, #24]
 800cfc4:	e001      	b.n	800cfca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cfca:	69bb      	ldr	r3, [r7, #24]
 800cfcc:	2b01      	cmp	r3, #1
 800cfce:	d110      	bne.n	800cff2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cfd8:	9202      	str	r2, [sp, #8]
 800cfda:	9301      	str	r3, [sp, #4]
 800cfdc:	69fb      	ldr	r3, [r7, #28]
 800cfde:	9300      	str	r3, [sp, #0]
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	6a3a      	ldr	r2, [r7, #32]
 800cfe4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cfe6:	68f8      	ldr	r0, [r7, #12]
 800cfe8:	f000 fe0c 	bl	800dc04 <xTaskCreateStatic>
 800cfec:	4603      	mov	r3, r0
 800cfee:	613b      	str	r3, [r7, #16]
 800cff0:	e013      	b.n	800d01a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cff2:	69bb      	ldr	r3, [r7, #24]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d110      	bne.n	800d01a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cff8:	6a3b      	ldr	r3, [r7, #32]
 800cffa:	b29a      	uxth	r2, r3
 800cffc:	f107 0310 	add.w	r3, r7, #16
 800d000:	9301      	str	r3, [sp, #4]
 800d002:	69fb      	ldr	r3, [r7, #28]
 800d004:	9300      	str	r3, [sp, #0]
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d00a:	68f8      	ldr	r0, [r7, #12]
 800d00c:	f000 fe57 	bl	800dcbe <xTaskCreate>
 800d010:	4603      	mov	r3, r0
 800d012:	2b01      	cmp	r3, #1
 800d014:	d001      	beq.n	800d01a <osThreadNew+0x11a>
            hTask = NULL;
 800d016:	2300      	movs	r3, #0
 800d018:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d01a:	693b      	ldr	r3, [r7, #16]
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3728      	adds	r7, #40	; 0x28
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d024:	b580      	push	{r7, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d02c:	f3ef 8305 	mrs	r3, IPSR
 800d030:	60bb      	str	r3, [r7, #8]
  return(result);
 800d032:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d034:	2b00      	cmp	r3, #0
 800d036:	d003      	beq.n	800d040 <osDelay+0x1c>
    stat = osErrorISR;
 800d038:	f06f 0305 	mvn.w	r3, #5
 800d03c:	60fb      	str	r3, [r7, #12]
 800d03e:	e007      	b.n	800d050 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d040:	2300      	movs	r3, #0
 800d042:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d002      	beq.n	800d050 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f000 ff92 	bl	800df74 <vTaskDelay>
    }
  }

  return (stat);
 800d050:	68fb      	ldr	r3, [r7, #12]
}
 800d052:	4618      	mov	r0, r3
 800d054:	3710      	adds	r7, #16
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
	...

0800d05c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d05c:	b480      	push	{r7}
 800d05e:	b085      	sub	sp, #20
 800d060:	af00      	add	r7, sp, #0
 800d062:	60f8      	str	r0, [r7, #12]
 800d064:	60b9      	str	r1, [r7, #8]
 800d066:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	4a07      	ldr	r2, [pc, #28]	; (800d088 <vApplicationGetIdleTaskMemory+0x2c>)
 800d06c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	4a06      	ldr	r2, [pc, #24]	; (800d08c <vApplicationGetIdleTaskMemory+0x30>)
 800d072:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2280      	movs	r2, #128	; 0x80
 800d078:	601a      	str	r2, [r3, #0]
}
 800d07a:	bf00      	nop
 800d07c:	3714      	adds	r7, #20
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr
 800d086:	bf00      	nop
 800d088:	20000cf0 	.word	0x20000cf0
 800d08c:	20000dac 	.word	0x20000dac

0800d090 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d090:	b480      	push	{r7}
 800d092:	b085      	sub	sp, #20
 800d094:	af00      	add	r7, sp, #0
 800d096:	60f8      	str	r0, [r7, #12]
 800d098:	60b9      	str	r1, [r7, #8]
 800d09a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	4a07      	ldr	r2, [pc, #28]	; (800d0bc <vApplicationGetTimerTaskMemory+0x2c>)
 800d0a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	4a06      	ldr	r2, [pc, #24]	; (800d0c0 <vApplicationGetTimerTaskMemory+0x30>)
 800d0a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d0ae:	601a      	str	r2, [r3, #0]
}
 800d0b0:	bf00      	nop
 800d0b2:	3714      	adds	r7, #20
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr
 800d0bc:	20000fac 	.word	0x20000fac
 800d0c0:	20001068 	.word	0x20001068

0800d0c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	b083      	sub	sp, #12
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f103 0208 	add.w	r2, r3, #8
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d0dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f103 0208 	add.w	r2, r3, #8
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f103 0208 	add.w	r2, r3, #8
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d0f8:	bf00      	nop
 800d0fa:	370c      	adds	r7, #12
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr

0800d104 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d104:	b480      	push	{r7}
 800d106:	b083      	sub	sp, #12
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2200      	movs	r2, #0
 800d110:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d112:	bf00      	nop
 800d114:	370c      	adds	r7, #12
 800d116:	46bd      	mov	sp, r7
 800d118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11c:	4770      	bx	lr

0800d11e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d11e:	b480      	push	{r7}
 800d120:	b085      	sub	sp, #20
 800d122:	af00      	add	r7, sp, #0
 800d124:	6078      	str	r0, [r7, #4]
 800d126:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	68fa      	ldr	r2, [r7, #12]
 800d132:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	689a      	ldr	r2, [r3, #8]
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	689b      	ldr	r3, [r3, #8]
 800d140:	683a      	ldr	r2, [r7, #0]
 800d142:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	683a      	ldr	r2, [r7, #0]
 800d148:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	687a      	ldr	r2, [r7, #4]
 800d14e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	1c5a      	adds	r2, r3, #1
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	601a      	str	r2, [r3, #0]
}
 800d15a:	bf00      	nop
 800d15c:	3714      	adds	r7, #20
 800d15e:	46bd      	mov	sp, r7
 800d160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d164:	4770      	bx	lr

0800d166 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d166:	b480      	push	{r7}
 800d168:	b085      	sub	sp, #20
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
 800d16e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d17c:	d103      	bne.n	800d186 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	691b      	ldr	r3, [r3, #16]
 800d182:	60fb      	str	r3, [r7, #12]
 800d184:	e00c      	b.n	800d1a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	3308      	adds	r3, #8
 800d18a:	60fb      	str	r3, [r7, #12]
 800d18c:	e002      	b.n	800d194 <vListInsert+0x2e>
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	60fb      	str	r3, [r7, #12]
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	685b      	ldr	r3, [r3, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	68ba      	ldr	r2, [r7, #8]
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d2f6      	bcs.n	800d18e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	685a      	ldr	r2, [r3, #4]
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	685b      	ldr	r3, [r3, #4]
 800d1ac:	683a      	ldr	r2, [r7, #0]
 800d1ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	68fa      	ldr	r2, [r7, #12]
 800d1b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	683a      	ldr	r2, [r7, #0]
 800d1ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	687a      	ldr	r2, [r7, #4]
 800d1c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	1c5a      	adds	r2, r3, #1
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	601a      	str	r2, [r3, #0]
}
 800d1cc:	bf00      	nop
 800d1ce:	3714      	adds	r7, #20
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d6:	4770      	bx	lr

0800d1d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b085      	sub	sp, #20
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	691b      	ldr	r3, [r3, #16]
 800d1e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	687a      	ldr	r2, [r7, #4]
 800d1ec:	6892      	ldr	r2, [r2, #8]
 800d1ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	689b      	ldr	r3, [r3, #8]
 800d1f4:	687a      	ldr	r2, [r7, #4]
 800d1f6:	6852      	ldr	r2, [r2, #4]
 800d1f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	685b      	ldr	r3, [r3, #4]
 800d1fe:	687a      	ldr	r2, [r7, #4]
 800d200:	429a      	cmp	r2, r3
 800d202:	d103      	bne.n	800d20c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	689a      	ldr	r2, [r3, #8]
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2200      	movs	r2, #0
 800d210:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	1e5a      	subs	r2, r3, #1
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681b      	ldr	r3, [r3, #0]
}
 800d220:	4618      	mov	r0, r3
 800d222:	3714      	adds	r7, #20
 800d224:	46bd      	mov	sp, r7
 800d226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22a:	4770      	bx	lr

0800d22c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b084      	sub	sp, #16
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d10a      	bne.n	800d256 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d244:	f383 8811 	msr	BASEPRI, r3
 800d248:	f3bf 8f6f 	isb	sy
 800d24c:	f3bf 8f4f 	dsb	sy
 800d250:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d252:	bf00      	nop
 800d254:	e7fe      	b.n	800d254 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d256:	f002 f875 	bl	800f344 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681a      	ldr	r2, [r3, #0]
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d262:	68f9      	ldr	r1, [r7, #12]
 800d264:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d266:	fb01 f303 	mul.w	r3, r1, r3
 800d26a:	441a      	add	r2, r3
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	2200      	movs	r2, #0
 800d274:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681a      	ldr	r2, [r3, #0]
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	681a      	ldr	r2, [r3, #0]
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d286:	3b01      	subs	r3, #1
 800d288:	68f9      	ldr	r1, [r7, #12]
 800d28a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d28c:	fb01 f303 	mul.w	r3, r1, r3
 800d290:	441a      	add	r2, r3
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	22ff      	movs	r2, #255	; 0xff
 800d29a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	22ff      	movs	r2, #255	; 0xff
 800d2a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d114      	bne.n	800d2d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	691b      	ldr	r3, [r3, #16]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d01a      	beq.n	800d2ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	3310      	adds	r3, #16
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f001 f929 	bl	800e510 <xTaskRemoveFromEventList>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d012      	beq.n	800d2ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d2c4:	4b0c      	ldr	r3, [pc, #48]	; (800d2f8 <xQueueGenericReset+0xcc>)
 800d2c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2ca:	601a      	str	r2, [r3, #0]
 800d2cc:	f3bf 8f4f 	dsb	sy
 800d2d0:	f3bf 8f6f 	isb	sy
 800d2d4:	e009      	b.n	800d2ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	3310      	adds	r3, #16
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f7ff fef2 	bl	800d0c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	3324      	adds	r3, #36	; 0x24
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7ff feed 	bl	800d0c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d2ea:	f002 f85b 	bl	800f3a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d2ee:	2301      	movs	r3, #1
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3710      	adds	r7, #16
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}
 800d2f8:	e000ed04 	.word	0xe000ed04

0800d2fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b08e      	sub	sp, #56	; 0x38
 800d300:	af02      	add	r7, sp, #8
 800d302:	60f8      	str	r0, [r7, #12]
 800d304:	60b9      	str	r1, [r7, #8]
 800d306:	607a      	str	r2, [r7, #4]
 800d308:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d10a      	bne.n	800d326 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d314:	f383 8811 	msr	BASEPRI, r3
 800d318:	f3bf 8f6f 	isb	sy
 800d31c:	f3bf 8f4f 	dsb	sy
 800d320:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d322:	bf00      	nop
 800d324:	e7fe      	b.n	800d324 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d10a      	bne.n	800d342 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d330:	f383 8811 	msr	BASEPRI, r3
 800d334:	f3bf 8f6f 	isb	sy
 800d338:	f3bf 8f4f 	dsb	sy
 800d33c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d33e:	bf00      	nop
 800d340:	e7fe      	b.n	800d340 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d002      	beq.n	800d34e <xQueueGenericCreateStatic+0x52>
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d001      	beq.n	800d352 <xQueueGenericCreateStatic+0x56>
 800d34e:	2301      	movs	r3, #1
 800d350:	e000      	b.n	800d354 <xQueueGenericCreateStatic+0x58>
 800d352:	2300      	movs	r3, #0
 800d354:	2b00      	cmp	r3, #0
 800d356:	d10a      	bne.n	800d36e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d35c:	f383 8811 	msr	BASEPRI, r3
 800d360:	f3bf 8f6f 	isb	sy
 800d364:	f3bf 8f4f 	dsb	sy
 800d368:	623b      	str	r3, [r7, #32]
}
 800d36a:	bf00      	nop
 800d36c:	e7fe      	b.n	800d36c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d102      	bne.n	800d37a <xQueueGenericCreateStatic+0x7e>
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d101      	bne.n	800d37e <xQueueGenericCreateStatic+0x82>
 800d37a:	2301      	movs	r3, #1
 800d37c:	e000      	b.n	800d380 <xQueueGenericCreateStatic+0x84>
 800d37e:	2300      	movs	r3, #0
 800d380:	2b00      	cmp	r3, #0
 800d382:	d10a      	bne.n	800d39a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d388:	f383 8811 	msr	BASEPRI, r3
 800d38c:	f3bf 8f6f 	isb	sy
 800d390:	f3bf 8f4f 	dsb	sy
 800d394:	61fb      	str	r3, [r7, #28]
}
 800d396:	bf00      	nop
 800d398:	e7fe      	b.n	800d398 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d39a:	2350      	movs	r3, #80	; 0x50
 800d39c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	2b50      	cmp	r3, #80	; 0x50
 800d3a2:	d00a      	beq.n	800d3ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a8:	f383 8811 	msr	BASEPRI, r3
 800d3ac:	f3bf 8f6f 	isb	sy
 800d3b0:	f3bf 8f4f 	dsb	sy
 800d3b4:	61bb      	str	r3, [r7, #24]
}
 800d3b6:	bf00      	nop
 800d3b8:	e7fe      	b.n	800d3b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d3ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d00d      	beq.n	800d3e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c8:	2201      	movs	r2, #1
 800d3ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d3ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d4:	9300      	str	r3, [sp, #0]
 800d3d6:	4613      	mov	r3, r2
 800d3d8:	687a      	ldr	r2, [r7, #4]
 800d3da:	68b9      	ldr	r1, [r7, #8]
 800d3dc:	68f8      	ldr	r0, [r7, #12]
 800d3de:	f000 f805 	bl	800d3ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3730      	adds	r7, #48	; 0x30
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	60b9      	str	r1, [r7, #8]
 800d3f6:	607a      	str	r2, [r7, #4]
 800d3f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d103      	bne.n	800d408 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d400:	69bb      	ldr	r3, [r7, #24]
 800d402:	69ba      	ldr	r2, [r7, #24]
 800d404:	601a      	str	r2, [r3, #0]
 800d406:	e002      	b.n	800d40e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d408:	69bb      	ldr	r3, [r7, #24]
 800d40a:	687a      	ldr	r2, [r7, #4]
 800d40c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d40e:	69bb      	ldr	r3, [r7, #24]
 800d410:	68fa      	ldr	r2, [r7, #12]
 800d412:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d414:	69bb      	ldr	r3, [r7, #24]
 800d416:	68ba      	ldr	r2, [r7, #8]
 800d418:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d41a:	2101      	movs	r1, #1
 800d41c:	69b8      	ldr	r0, [r7, #24]
 800d41e:	f7ff ff05 	bl	800d22c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d422:	69bb      	ldr	r3, [r7, #24]
 800d424:	78fa      	ldrb	r2, [r7, #3]
 800d426:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d42a:	bf00      	nop
 800d42c:	3710      	adds	r7, #16
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
	...

0800d434 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b08e      	sub	sp, #56	; 0x38
 800d438:	af00      	add	r7, sp, #0
 800d43a:	60f8      	str	r0, [r7, #12]
 800d43c:	60b9      	str	r1, [r7, #8]
 800d43e:	607a      	str	r2, [r7, #4]
 800d440:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d442:	2300      	movs	r3, #0
 800d444:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d10a      	bne.n	800d466 <xQueueGenericSend+0x32>
	__asm volatile
 800d450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d454:	f383 8811 	msr	BASEPRI, r3
 800d458:	f3bf 8f6f 	isb	sy
 800d45c:	f3bf 8f4f 	dsb	sy
 800d460:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d462:	bf00      	nop
 800d464:	e7fe      	b.n	800d464 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d103      	bne.n	800d474 <xQueueGenericSend+0x40>
 800d46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d46e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d470:	2b00      	cmp	r3, #0
 800d472:	d101      	bne.n	800d478 <xQueueGenericSend+0x44>
 800d474:	2301      	movs	r3, #1
 800d476:	e000      	b.n	800d47a <xQueueGenericSend+0x46>
 800d478:	2300      	movs	r3, #0
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d10a      	bne.n	800d494 <xQueueGenericSend+0x60>
	__asm volatile
 800d47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d482:	f383 8811 	msr	BASEPRI, r3
 800d486:	f3bf 8f6f 	isb	sy
 800d48a:	f3bf 8f4f 	dsb	sy
 800d48e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d490:	bf00      	nop
 800d492:	e7fe      	b.n	800d492 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	2b02      	cmp	r3, #2
 800d498:	d103      	bne.n	800d4a2 <xQueueGenericSend+0x6e>
 800d49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d49c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d49e:	2b01      	cmp	r3, #1
 800d4a0:	d101      	bne.n	800d4a6 <xQueueGenericSend+0x72>
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	e000      	b.n	800d4a8 <xQueueGenericSend+0x74>
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d10a      	bne.n	800d4c2 <xQueueGenericSend+0x8e>
	__asm volatile
 800d4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b0:	f383 8811 	msr	BASEPRI, r3
 800d4b4:	f3bf 8f6f 	isb	sy
 800d4b8:	f3bf 8f4f 	dsb	sy
 800d4bc:	623b      	str	r3, [r7, #32]
}
 800d4be:	bf00      	nop
 800d4c0:	e7fe      	b.n	800d4c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d4c2:	f001 f9e7 	bl	800e894 <xTaskGetSchedulerState>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d102      	bne.n	800d4d2 <xQueueGenericSend+0x9e>
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d101      	bne.n	800d4d6 <xQueueGenericSend+0xa2>
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	e000      	b.n	800d4d8 <xQueueGenericSend+0xa4>
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d10a      	bne.n	800d4f2 <xQueueGenericSend+0xbe>
	__asm volatile
 800d4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4e0:	f383 8811 	msr	BASEPRI, r3
 800d4e4:	f3bf 8f6f 	isb	sy
 800d4e8:	f3bf 8f4f 	dsb	sy
 800d4ec:	61fb      	str	r3, [r7, #28]
}
 800d4ee:	bf00      	nop
 800d4f0:	e7fe      	b.n	800d4f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d4f2:	f001 ff27 	bl	800f344 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d302      	bcc.n	800d508 <xQueueGenericSend+0xd4>
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	2b02      	cmp	r3, #2
 800d506:	d129      	bne.n	800d55c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d508:	683a      	ldr	r2, [r7, #0]
 800d50a:	68b9      	ldr	r1, [r7, #8]
 800d50c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d50e:	f000 fa0b 	bl	800d928 <prvCopyDataToQueue>
 800d512:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d010      	beq.n	800d53e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d51e:	3324      	adds	r3, #36	; 0x24
 800d520:	4618      	mov	r0, r3
 800d522:	f000 fff5 	bl	800e510 <xTaskRemoveFromEventList>
 800d526:	4603      	mov	r3, r0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d013      	beq.n	800d554 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d52c:	4b3f      	ldr	r3, [pc, #252]	; (800d62c <xQueueGenericSend+0x1f8>)
 800d52e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d532:	601a      	str	r2, [r3, #0]
 800d534:	f3bf 8f4f 	dsb	sy
 800d538:	f3bf 8f6f 	isb	sy
 800d53c:	e00a      	b.n	800d554 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d540:	2b00      	cmp	r3, #0
 800d542:	d007      	beq.n	800d554 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d544:	4b39      	ldr	r3, [pc, #228]	; (800d62c <xQueueGenericSend+0x1f8>)
 800d546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d54a:	601a      	str	r2, [r3, #0]
 800d54c:	f3bf 8f4f 	dsb	sy
 800d550:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d554:	f001 ff26 	bl	800f3a4 <vPortExitCritical>
				return pdPASS;
 800d558:	2301      	movs	r3, #1
 800d55a:	e063      	b.n	800d624 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d103      	bne.n	800d56a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d562:	f001 ff1f 	bl	800f3a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d566:	2300      	movs	r3, #0
 800d568:	e05c      	b.n	800d624 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d56a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d106      	bne.n	800d57e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d570:	f107 0314 	add.w	r3, r7, #20
 800d574:	4618      	mov	r0, r3
 800d576:	f001 f82f 	bl	800e5d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d57a:	2301      	movs	r3, #1
 800d57c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d57e:	f001 ff11 	bl	800f3a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d582:	f000 fd9b 	bl	800e0bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d586:	f001 fedd 	bl	800f344 <vPortEnterCritical>
 800d58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d58c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d590:	b25b      	sxtb	r3, r3
 800d592:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d596:	d103      	bne.n	800d5a0 <xQueueGenericSend+0x16c>
 800d598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d59a:	2200      	movs	r2, #0
 800d59c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5a6:	b25b      	sxtb	r3, r3
 800d5a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5ac:	d103      	bne.n	800d5b6 <xQueueGenericSend+0x182>
 800d5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d5b6:	f001 fef5 	bl	800f3a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d5ba:	1d3a      	adds	r2, r7, #4
 800d5bc:	f107 0314 	add.w	r3, r7, #20
 800d5c0:	4611      	mov	r1, r2
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f001 f81e 	bl	800e604 <xTaskCheckForTimeOut>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d124      	bne.n	800d618 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d5ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5d0:	f000 faa2 	bl	800db18 <prvIsQueueFull>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d018      	beq.n	800d60c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5dc:	3310      	adds	r3, #16
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	4611      	mov	r1, r2
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f000 ff44 	bl	800e470 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d5e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5ea:	f000 fa2d 	bl	800da48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d5ee:	f000 fd73 	bl	800e0d8 <xTaskResumeAll>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	f47f af7c 	bne.w	800d4f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d5fa:	4b0c      	ldr	r3, [pc, #48]	; (800d62c <xQueueGenericSend+0x1f8>)
 800d5fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d600:	601a      	str	r2, [r3, #0]
 800d602:	f3bf 8f4f 	dsb	sy
 800d606:	f3bf 8f6f 	isb	sy
 800d60a:	e772      	b.n	800d4f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d60c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d60e:	f000 fa1b 	bl	800da48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d612:	f000 fd61 	bl	800e0d8 <xTaskResumeAll>
 800d616:	e76c      	b.n	800d4f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d61a:	f000 fa15 	bl	800da48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d61e:	f000 fd5b 	bl	800e0d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d622:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d624:	4618      	mov	r0, r3
 800d626:	3738      	adds	r7, #56	; 0x38
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}
 800d62c:	e000ed04 	.word	0xe000ed04

0800d630 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b090      	sub	sp, #64	; 0x40
 800d634:	af00      	add	r7, sp, #0
 800d636:	60f8      	str	r0, [r7, #12]
 800d638:	60b9      	str	r1, [r7, #8]
 800d63a:	607a      	str	r2, [r7, #4]
 800d63c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d644:	2b00      	cmp	r3, #0
 800d646:	d10a      	bne.n	800d65e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d64c:	f383 8811 	msr	BASEPRI, r3
 800d650:	f3bf 8f6f 	isb	sy
 800d654:	f3bf 8f4f 	dsb	sy
 800d658:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d65a:	bf00      	nop
 800d65c:	e7fe      	b.n	800d65c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d103      	bne.n	800d66c <xQueueGenericSendFromISR+0x3c>
 800d664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d101      	bne.n	800d670 <xQueueGenericSendFromISR+0x40>
 800d66c:	2301      	movs	r3, #1
 800d66e:	e000      	b.n	800d672 <xQueueGenericSendFromISR+0x42>
 800d670:	2300      	movs	r3, #0
 800d672:	2b00      	cmp	r3, #0
 800d674:	d10a      	bne.n	800d68c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d67a:	f383 8811 	msr	BASEPRI, r3
 800d67e:	f3bf 8f6f 	isb	sy
 800d682:	f3bf 8f4f 	dsb	sy
 800d686:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d688:	bf00      	nop
 800d68a:	e7fe      	b.n	800d68a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	2b02      	cmp	r3, #2
 800d690:	d103      	bne.n	800d69a <xQueueGenericSendFromISR+0x6a>
 800d692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d696:	2b01      	cmp	r3, #1
 800d698:	d101      	bne.n	800d69e <xQueueGenericSendFromISR+0x6e>
 800d69a:	2301      	movs	r3, #1
 800d69c:	e000      	b.n	800d6a0 <xQueueGenericSendFromISR+0x70>
 800d69e:	2300      	movs	r3, #0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d10a      	bne.n	800d6ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a8:	f383 8811 	msr	BASEPRI, r3
 800d6ac:	f3bf 8f6f 	isb	sy
 800d6b0:	f3bf 8f4f 	dsb	sy
 800d6b4:	623b      	str	r3, [r7, #32]
}
 800d6b6:	bf00      	nop
 800d6b8:	e7fe      	b.n	800d6b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d6ba:	f001 ff25 	bl	800f508 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d6be:	f3ef 8211 	mrs	r2, BASEPRI
 800d6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c6:	f383 8811 	msr	BASEPRI, r3
 800d6ca:	f3bf 8f6f 	isb	sy
 800d6ce:	f3bf 8f4f 	dsb	sy
 800d6d2:	61fa      	str	r2, [r7, #28]
 800d6d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d6d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d6d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d302      	bcc.n	800d6ec <xQueueGenericSendFromISR+0xbc>
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	2b02      	cmp	r3, #2
 800d6ea:	d12f      	bne.n	800d74c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d6fc:	683a      	ldr	r2, [r7, #0]
 800d6fe:	68b9      	ldr	r1, [r7, #8]
 800d700:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d702:	f000 f911 	bl	800d928 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d706:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d70e:	d112      	bne.n	800d736 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d714:	2b00      	cmp	r3, #0
 800d716:	d016      	beq.n	800d746 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d71a:	3324      	adds	r3, #36	; 0x24
 800d71c:	4618      	mov	r0, r3
 800d71e:	f000 fef7 	bl	800e510 <xTaskRemoveFromEventList>
 800d722:	4603      	mov	r3, r0
 800d724:	2b00      	cmp	r3, #0
 800d726:	d00e      	beq.n	800d746 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d00b      	beq.n	800d746 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2201      	movs	r2, #1
 800d732:	601a      	str	r2, [r3, #0]
 800d734:	e007      	b.n	800d746 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d736:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d73a:	3301      	adds	r3, #1
 800d73c:	b2db      	uxtb	r3, r3
 800d73e:	b25a      	sxtb	r2, r3
 800d740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d746:	2301      	movs	r3, #1
 800d748:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d74a:	e001      	b.n	800d750 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d74c:	2300      	movs	r3, #0
 800d74e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d752:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d75a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d75c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3740      	adds	r7, #64	; 0x40
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}
	...

0800d768 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b08c      	sub	sp, #48	; 0x30
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	60f8      	str	r0, [r7, #12]
 800d770:	60b9      	str	r1, [r7, #8]
 800d772:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d774:	2300      	movs	r3, #0
 800d776:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d10a      	bne.n	800d798 <xQueueReceive+0x30>
	__asm volatile
 800d782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d786:	f383 8811 	msr	BASEPRI, r3
 800d78a:	f3bf 8f6f 	isb	sy
 800d78e:	f3bf 8f4f 	dsb	sy
 800d792:	623b      	str	r3, [r7, #32]
}
 800d794:	bf00      	nop
 800d796:	e7fe      	b.n	800d796 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d103      	bne.n	800d7a6 <xQueueReceive+0x3e>
 800d79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d101      	bne.n	800d7aa <xQueueReceive+0x42>
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	e000      	b.n	800d7ac <xQueueReceive+0x44>
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d10a      	bne.n	800d7c6 <xQueueReceive+0x5e>
	__asm volatile
 800d7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b4:	f383 8811 	msr	BASEPRI, r3
 800d7b8:	f3bf 8f6f 	isb	sy
 800d7bc:	f3bf 8f4f 	dsb	sy
 800d7c0:	61fb      	str	r3, [r7, #28]
}
 800d7c2:	bf00      	nop
 800d7c4:	e7fe      	b.n	800d7c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d7c6:	f001 f865 	bl	800e894 <xTaskGetSchedulerState>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d102      	bne.n	800d7d6 <xQueueReceive+0x6e>
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d101      	bne.n	800d7da <xQueueReceive+0x72>
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	e000      	b.n	800d7dc <xQueueReceive+0x74>
 800d7da:	2300      	movs	r3, #0
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d10a      	bne.n	800d7f6 <xQueueReceive+0x8e>
	__asm volatile
 800d7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e4:	f383 8811 	msr	BASEPRI, r3
 800d7e8:	f3bf 8f6f 	isb	sy
 800d7ec:	f3bf 8f4f 	dsb	sy
 800d7f0:	61bb      	str	r3, [r7, #24]
}
 800d7f2:	bf00      	nop
 800d7f4:	e7fe      	b.n	800d7f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d7f6:	f001 fda5 	bl	800f344 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d802:	2b00      	cmp	r3, #0
 800d804:	d01f      	beq.n	800d846 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d806:	68b9      	ldr	r1, [r7, #8]
 800d808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d80a:	f000 f8f7 	bl	800d9fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d810:	1e5a      	subs	r2, r3, #1
 800d812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d814:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d818:	691b      	ldr	r3, [r3, #16]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d00f      	beq.n	800d83e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d820:	3310      	adds	r3, #16
 800d822:	4618      	mov	r0, r3
 800d824:	f000 fe74 	bl	800e510 <xTaskRemoveFromEventList>
 800d828:	4603      	mov	r3, r0
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d007      	beq.n	800d83e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d82e:	4b3d      	ldr	r3, [pc, #244]	; (800d924 <xQueueReceive+0x1bc>)
 800d830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d834:	601a      	str	r2, [r3, #0]
 800d836:	f3bf 8f4f 	dsb	sy
 800d83a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d83e:	f001 fdb1 	bl	800f3a4 <vPortExitCritical>
				return pdPASS;
 800d842:	2301      	movs	r3, #1
 800d844:	e069      	b.n	800d91a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d103      	bne.n	800d854 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d84c:	f001 fdaa 	bl	800f3a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d850:	2300      	movs	r3, #0
 800d852:	e062      	b.n	800d91a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d856:	2b00      	cmp	r3, #0
 800d858:	d106      	bne.n	800d868 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d85a:	f107 0310 	add.w	r3, r7, #16
 800d85e:	4618      	mov	r0, r3
 800d860:	f000 feba 	bl	800e5d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d864:	2301      	movs	r3, #1
 800d866:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d868:	f001 fd9c 	bl	800f3a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d86c:	f000 fc26 	bl	800e0bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d870:	f001 fd68 	bl	800f344 <vPortEnterCritical>
 800d874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d876:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d87a:	b25b      	sxtb	r3, r3
 800d87c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d880:	d103      	bne.n	800d88a <xQueueReceive+0x122>
 800d882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d884:	2200      	movs	r2, #0
 800d886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d88c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d890:	b25b      	sxtb	r3, r3
 800d892:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d896:	d103      	bne.n	800d8a0 <xQueueReceive+0x138>
 800d898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d89a:	2200      	movs	r2, #0
 800d89c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d8a0:	f001 fd80 	bl	800f3a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d8a4:	1d3a      	adds	r2, r7, #4
 800d8a6:	f107 0310 	add.w	r3, r7, #16
 800d8aa:	4611      	mov	r1, r2
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f000 fea9 	bl	800e604 <xTaskCheckForTimeOut>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d123      	bne.n	800d900 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d8b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8ba:	f000 f917 	bl	800daec <prvIsQueueEmpty>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d017      	beq.n	800d8f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c6:	3324      	adds	r3, #36	; 0x24
 800d8c8:	687a      	ldr	r2, [r7, #4]
 800d8ca:	4611      	mov	r1, r2
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f000 fdcf 	bl	800e470 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d8d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8d4:	f000 f8b8 	bl	800da48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d8d8:	f000 fbfe 	bl	800e0d8 <xTaskResumeAll>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d189      	bne.n	800d7f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d8e2:	4b10      	ldr	r3, [pc, #64]	; (800d924 <xQueueReceive+0x1bc>)
 800d8e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8e8:	601a      	str	r2, [r3, #0]
 800d8ea:	f3bf 8f4f 	dsb	sy
 800d8ee:	f3bf 8f6f 	isb	sy
 800d8f2:	e780      	b.n	800d7f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d8f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8f6:	f000 f8a7 	bl	800da48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d8fa:	f000 fbed 	bl	800e0d8 <xTaskResumeAll>
 800d8fe:	e77a      	b.n	800d7f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d902:	f000 f8a1 	bl	800da48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d906:	f000 fbe7 	bl	800e0d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d90a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d90c:	f000 f8ee 	bl	800daec <prvIsQueueEmpty>
 800d910:	4603      	mov	r3, r0
 800d912:	2b00      	cmp	r3, #0
 800d914:	f43f af6f 	beq.w	800d7f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d918:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	3730      	adds	r7, #48	; 0x30
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}
 800d922:	bf00      	nop
 800d924:	e000ed04 	.word	0xe000ed04

0800d928 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b086      	sub	sp, #24
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	60f8      	str	r0, [r7, #12]
 800d930:	60b9      	str	r1, [r7, #8]
 800d932:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d934:	2300      	movs	r3, #0
 800d936:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d93c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d942:	2b00      	cmp	r3, #0
 800d944:	d10d      	bne.n	800d962 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d14d      	bne.n	800d9ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	689b      	ldr	r3, [r3, #8]
 800d952:	4618      	mov	r0, r3
 800d954:	f000 ffbc 	bl	800e8d0 <xTaskPriorityDisinherit>
 800d958:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2200      	movs	r2, #0
 800d95e:	609a      	str	r2, [r3, #8]
 800d960:	e043      	b.n	800d9ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d119      	bne.n	800d99c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	6858      	ldr	r0, [r3, #4]
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d970:	461a      	mov	r2, r3
 800d972:	68b9      	ldr	r1, [r7, #8]
 800d974:	f002 f915 	bl	800fba2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	685a      	ldr	r2, [r3, #4]
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d980:	441a      	add	r2, r3
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	685a      	ldr	r2, [r3, #4]
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	689b      	ldr	r3, [r3, #8]
 800d98e:	429a      	cmp	r2, r3
 800d990:	d32b      	bcc.n	800d9ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	681a      	ldr	r2, [r3, #0]
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	605a      	str	r2, [r3, #4]
 800d99a:	e026      	b.n	800d9ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	68d8      	ldr	r0, [r3, #12]
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	68b9      	ldr	r1, [r7, #8]
 800d9a8:	f002 f8fb 	bl	800fba2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	68da      	ldr	r2, [r3, #12]
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9b4:	425b      	negs	r3, r3
 800d9b6:	441a      	add	r2, r3
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	68da      	ldr	r2, [r3, #12]
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d207      	bcs.n	800d9d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	689a      	ldr	r2, [r3, #8]
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9d0:	425b      	negs	r3, r3
 800d9d2:	441a      	add	r2, r3
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2b02      	cmp	r3, #2
 800d9dc:	d105      	bne.n	800d9ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d9de:	693b      	ldr	r3, [r7, #16]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d002      	beq.n	800d9ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	3b01      	subs	r3, #1
 800d9e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	1c5a      	adds	r2, r3, #1
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d9f2:	697b      	ldr	r3, [r7, #20]
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3718      	adds	r7, #24
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d018      	beq.n	800da40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	68da      	ldr	r2, [r3, #12]
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da16:	441a      	add	r2, r3
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	68da      	ldr	r2, [r3, #12]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	689b      	ldr	r3, [r3, #8]
 800da24:	429a      	cmp	r2, r3
 800da26:	d303      	bcc.n	800da30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681a      	ldr	r2, [r3, #0]
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	68d9      	ldr	r1, [r3, #12]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da38:	461a      	mov	r2, r3
 800da3a:	6838      	ldr	r0, [r7, #0]
 800da3c:	f002 f8b1 	bl	800fba2 <memcpy>
	}
}
 800da40:	bf00      	nop
 800da42:	3708      	adds	r7, #8
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}

0800da48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b084      	sub	sp, #16
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800da50:	f001 fc78 	bl	800f344 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800da5c:	e011      	b.n	800da82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da62:	2b00      	cmp	r3, #0
 800da64:	d012      	beq.n	800da8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	3324      	adds	r3, #36	; 0x24
 800da6a:	4618      	mov	r0, r3
 800da6c:	f000 fd50 	bl	800e510 <xTaskRemoveFromEventList>
 800da70:	4603      	mov	r3, r0
 800da72:	2b00      	cmp	r3, #0
 800da74:	d001      	beq.n	800da7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800da76:	f000 fe27 	bl	800e6c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800da7a:	7bfb      	ldrb	r3, [r7, #15]
 800da7c:	3b01      	subs	r3, #1
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800da82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da86:	2b00      	cmp	r3, #0
 800da88:	dce9      	bgt.n	800da5e <prvUnlockQueue+0x16>
 800da8a:	e000      	b.n	800da8e <prvUnlockQueue+0x46>
					break;
 800da8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	22ff      	movs	r2, #255	; 0xff
 800da92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800da96:	f001 fc85 	bl	800f3a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800da9a:	f001 fc53 	bl	800f344 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800daa4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800daa6:	e011      	b.n	800dacc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	691b      	ldr	r3, [r3, #16]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d012      	beq.n	800dad6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	3310      	adds	r3, #16
 800dab4:	4618      	mov	r0, r3
 800dab6:	f000 fd2b 	bl	800e510 <xTaskRemoveFromEventList>
 800daba:	4603      	mov	r3, r0
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d001      	beq.n	800dac4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dac0:	f000 fe02 	bl	800e6c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dac4:	7bbb      	ldrb	r3, [r7, #14]
 800dac6:	3b01      	subs	r3, #1
 800dac8:	b2db      	uxtb	r3, r3
 800daca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dacc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	dce9      	bgt.n	800daa8 <prvUnlockQueue+0x60>
 800dad4:	e000      	b.n	800dad8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dad6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	22ff      	movs	r2, #255	; 0xff
 800dadc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dae0:	f001 fc60 	bl	800f3a4 <vPortExitCritical>
}
 800dae4:	bf00      	nop
 800dae6:	3710      	adds	r7, #16
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}

0800daec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b084      	sub	sp, #16
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800daf4:	f001 fc26 	bl	800f344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d102      	bne.n	800db06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800db00:	2301      	movs	r3, #1
 800db02:	60fb      	str	r3, [r7, #12]
 800db04:	e001      	b.n	800db0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800db06:	2300      	movs	r3, #0
 800db08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800db0a:	f001 fc4b 	bl	800f3a4 <vPortExitCritical>

	return xReturn;
 800db0e:	68fb      	ldr	r3, [r7, #12]
}
 800db10:	4618      	mov	r0, r3
 800db12:	3710      	adds	r7, #16
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}

0800db18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b084      	sub	sp, #16
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800db20:	f001 fc10 	bl	800f344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db2c:	429a      	cmp	r2, r3
 800db2e:	d102      	bne.n	800db36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800db30:	2301      	movs	r3, #1
 800db32:	60fb      	str	r3, [r7, #12]
 800db34:	e001      	b.n	800db3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800db36:	2300      	movs	r3, #0
 800db38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800db3a:	f001 fc33 	bl	800f3a4 <vPortExitCritical>

	return xReturn;
 800db3e:	68fb      	ldr	r3, [r7, #12]
}
 800db40:	4618      	mov	r0, r3
 800db42:	3710      	adds	r7, #16
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}

0800db48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800db48:	b480      	push	{r7}
 800db4a:	b085      	sub	sp, #20
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
 800db50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800db52:	2300      	movs	r3, #0
 800db54:	60fb      	str	r3, [r7, #12]
 800db56:	e014      	b.n	800db82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800db58:	4a0f      	ldr	r2, [pc, #60]	; (800db98 <vQueueAddToRegistry+0x50>)
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d10b      	bne.n	800db7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800db64:	490c      	ldr	r1, [pc, #48]	; (800db98 <vQueueAddToRegistry+0x50>)
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	683a      	ldr	r2, [r7, #0]
 800db6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800db6e:	4a0a      	ldr	r2, [pc, #40]	; (800db98 <vQueueAddToRegistry+0x50>)
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	00db      	lsls	r3, r3, #3
 800db74:	4413      	add	r3, r2
 800db76:	687a      	ldr	r2, [r7, #4]
 800db78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800db7a:	e006      	b.n	800db8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	3301      	adds	r3, #1
 800db80:	60fb      	str	r3, [r7, #12]
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	2b07      	cmp	r3, #7
 800db86:	d9e7      	bls.n	800db58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800db88:	bf00      	nop
 800db8a:	bf00      	nop
 800db8c:	3714      	adds	r7, #20
 800db8e:	46bd      	mov	sp, r7
 800db90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db94:	4770      	bx	lr
 800db96:	bf00      	nop
 800db98:	20001468 	.word	0x20001468

0800db9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b086      	sub	sp, #24
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	60f8      	str	r0, [r7, #12]
 800dba4:	60b9      	str	r1, [r7, #8]
 800dba6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dbac:	f001 fbca 	bl	800f344 <vPortEnterCritical>
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dbb6:	b25b      	sxtb	r3, r3
 800dbb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbbc:	d103      	bne.n	800dbc6 <vQueueWaitForMessageRestricted+0x2a>
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dbcc:	b25b      	sxtb	r3, r3
 800dbce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbd2:	d103      	bne.n	800dbdc <vQueueWaitForMessageRestricted+0x40>
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dbdc:	f001 fbe2 	bl	800f3a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d106      	bne.n	800dbf6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	3324      	adds	r3, #36	; 0x24
 800dbec:	687a      	ldr	r2, [r7, #4]
 800dbee:	68b9      	ldr	r1, [r7, #8]
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f000 fc61 	bl	800e4b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dbf6:	6978      	ldr	r0, [r7, #20]
 800dbf8:	f7ff ff26 	bl	800da48 <prvUnlockQueue>
	}
 800dbfc:	bf00      	nop
 800dbfe:	3718      	adds	r7, #24
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}

0800dc04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b08e      	sub	sp, #56	; 0x38
 800dc08:	af04      	add	r7, sp, #16
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	60b9      	str	r1, [r7, #8]
 800dc0e:	607a      	str	r2, [r7, #4]
 800dc10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dc12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d10a      	bne.n	800dc2e <xTaskCreateStatic+0x2a>
	__asm volatile
 800dc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc1c:	f383 8811 	msr	BASEPRI, r3
 800dc20:	f3bf 8f6f 	isb	sy
 800dc24:	f3bf 8f4f 	dsb	sy
 800dc28:	623b      	str	r3, [r7, #32]
}
 800dc2a:	bf00      	nop
 800dc2c:	e7fe      	b.n	800dc2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dc2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d10a      	bne.n	800dc4a <xTaskCreateStatic+0x46>
	__asm volatile
 800dc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc38:	f383 8811 	msr	BASEPRI, r3
 800dc3c:	f3bf 8f6f 	isb	sy
 800dc40:	f3bf 8f4f 	dsb	sy
 800dc44:	61fb      	str	r3, [r7, #28]
}
 800dc46:	bf00      	nop
 800dc48:	e7fe      	b.n	800dc48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dc4a:	23bc      	movs	r3, #188	; 0xbc
 800dc4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dc4e:	693b      	ldr	r3, [r7, #16]
 800dc50:	2bbc      	cmp	r3, #188	; 0xbc
 800dc52:	d00a      	beq.n	800dc6a <xTaskCreateStatic+0x66>
	__asm volatile
 800dc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc58:	f383 8811 	msr	BASEPRI, r3
 800dc5c:	f3bf 8f6f 	isb	sy
 800dc60:	f3bf 8f4f 	dsb	sy
 800dc64:	61bb      	str	r3, [r7, #24]
}
 800dc66:	bf00      	nop
 800dc68:	e7fe      	b.n	800dc68 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dc6a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d01e      	beq.n	800dcb0 <xTaskCreateStatic+0xac>
 800dc72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d01b      	beq.n	800dcb0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc7a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc80:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc84:	2202      	movs	r2, #2
 800dc86:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	9303      	str	r3, [sp, #12]
 800dc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc90:	9302      	str	r3, [sp, #8]
 800dc92:	f107 0314 	add.w	r3, r7, #20
 800dc96:	9301      	str	r3, [sp, #4]
 800dc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9a:	9300      	str	r3, [sp, #0]
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	687a      	ldr	r2, [r7, #4]
 800dca0:	68b9      	ldr	r1, [r7, #8]
 800dca2:	68f8      	ldr	r0, [r7, #12]
 800dca4:	f000 f850 	bl	800dd48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dca8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dcaa:	f000 f8f3 	bl	800de94 <prvAddNewTaskToReadyList>
 800dcae:	e001      	b.n	800dcb4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dcb4:	697b      	ldr	r3, [r7, #20]
	}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3728      	adds	r7, #40	; 0x28
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}

0800dcbe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dcbe:	b580      	push	{r7, lr}
 800dcc0:	b08c      	sub	sp, #48	; 0x30
 800dcc2:	af04      	add	r7, sp, #16
 800dcc4:	60f8      	str	r0, [r7, #12]
 800dcc6:	60b9      	str	r1, [r7, #8]
 800dcc8:	603b      	str	r3, [r7, #0]
 800dcca:	4613      	mov	r3, r2
 800dccc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dcce:	88fb      	ldrh	r3, [r7, #6]
 800dcd0:	009b      	lsls	r3, r3, #2
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f001 fc58 	bl	800f588 <pvPortMalloc>
 800dcd8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d00e      	beq.n	800dcfe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dce0:	20bc      	movs	r0, #188	; 0xbc
 800dce2:	f001 fc51 	bl	800f588 <pvPortMalloc>
 800dce6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dce8:	69fb      	ldr	r3, [r7, #28]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d003      	beq.n	800dcf6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dcee:	69fb      	ldr	r3, [r7, #28]
 800dcf0:	697a      	ldr	r2, [r7, #20]
 800dcf2:	631a      	str	r2, [r3, #48]	; 0x30
 800dcf4:	e005      	b.n	800dd02 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dcf6:	6978      	ldr	r0, [r7, #20]
 800dcf8:	f001 fd12 	bl	800f720 <vPortFree>
 800dcfc:	e001      	b.n	800dd02 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dd02:	69fb      	ldr	r3, [r7, #28]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d017      	beq.n	800dd38 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dd08:	69fb      	ldr	r3, [r7, #28]
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dd10:	88fa      	ldrh	r2, [r7, #6]
 800dd12:	2300      	movs	r3, #0
 800dd14:	9303      	str	r3, [sp, #12]
 800dd16:	69fb      	ldr	r3, [r7, #28]
 800dd18:	9302      	str	r3, [sp, #8]
 800dd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd1c:	9301      	str	r3, [sp, #4]
 800dd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd20:	9300      	str	r3, [sp, #0]
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	68b9      	ldr	r1, [r7, #8]
 800dd26:	68f8      	ldr	r0, [r7, #12]
 800dd28:	f000 f80e 	bl	800dd48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dd2c:	69f8      	ldr	r0, [r7, #28]
 800dd2e:	f000 f8b1 	bl	800de94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dd32:	2301      	movs	r3, #1
 800dd34:	61bb      	str	r3, [r7, #24]
 800dd36:	e002      	b.n	800dd3e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dd38:	f04f 33ff 	mov.w	r3, #4294967295
 800dd3c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dd3e:	69bb      	ldr	r3, [r7, #24]
	}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3720      	adds	r7, #32
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b088      	sub	sp, #32
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	60f8      	str	r0, [r7, #12]
 800dd50:	60b9      	str	r1, [r7, #8]
 800dd52:	607a      	str	r2, [r7, #4]
 800dd54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	009b      	lsls	r3, r3, #2
 800dd5e:	461a      	mov	r2, r3
 800dd60:	21a5      	movs	r1, #165	; 0xa5
 800dd62:	f001 ff2c 	bl	800fbbe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dd70:	3b01      	subs	r3, #1
 800dd72:	009b      	lsls	r3, r3, #2
 800dd74:	4413      	add	r3, r2
 800dd76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dd78:	69bb      	ldr	r3, [r7, #24]
 800dd7a:	f023 0307 	bic.w	r3, r3, #7
 800dd7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dd80:	69bb      	ldr	r3, [r7, #24]
 800dd82:	f003 0307 	and.w	r3, r3, #7
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d00a      	beq.n	800dda0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800dd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd8e:	f383 8811 	msr	BASEPRI, r3
 800dd92:	f3bf 8f6f 	isb	sy
 800dd96:	f3bf 8f4f 	dsb	sy
 800dd9a:	617b      	str	r3, [r7, #20]
}
 800dd9c:	bf00      	nop
 800dd9e:	e7fe      	b.n	800dd9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d01f      	beq.n	800dde6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dda6:	2300      	movs	r3, #0
 800dda8:	61fb      	str	r3, [r7, #28]
 800ddaa:	e012      	b.n	800ddd2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ddac:	68ba      	ldr	r2, [r7, #8]
 800ddae:	69fb      	ldr	r3, [r7, #28]
 800ddb0:	4413      	add	r3, r2
 800ddb2:	7819      	ldrb	r1, [r3, #0]
 800ddb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddb6:	69fb      	ldr	r3, [r7, #28]
 800ddb8:	4413      	add	r3, r2
 800ddba:	3334      	adds	r3, #52	; 0x34
 800ddbc:	460a      	mov	r2, r1
 800ddbe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ddc0:	68ba      	ldr	r2, [r7, #8]
 800ddc2:	69fb      	ldr	r3, [r7, #28]
 800ddc4:	4413      	add	r3, r2
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d006      	beq.n	800ddda <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ddcc:	69fb      	ldr	r3, [r7, #28]
 800ddce:	3301      	adds	r3, #1
 800ddd0:	61fb      	str	r3, [r7, #28]
 800ddd2:	69fb      	ldr	r3, [r7, #28]
 800ddd4:	2b0f      	cmp	r3, #15
 800ddd6:	d9e9      	bls.n	800ddac <prvInitialiseNewTask+0x64>
 800ddd8:	e000      	b.n	800dddc <prvInitialiseNewTask+0x94>
			{
				break;
 800ddda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddde:	2200      	movs	r2, #0
 800dde0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dde4:	e003      	b.n	800ddee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde8:	2200      	movs	r2, #0
 800ddea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ddee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf0:	2b37      	cmp	r3, #55	; 0x37
 800ddf2:	d901      	bls.n	800ddf8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ddf4:	2337      	movs	r3, #55	; 0x37
 800ddf6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ddf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddfc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ddfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de02:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800de04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de06:	2200      	movs	r2, #0
 800de08:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800de0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de0c:	3304      	adds	r3, #4
 800de0e:	4618      	mov	r0, r3
 800de10:	f7ff f978 	bl	800d104 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800de14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de16:	3318      	adds	r3, #24
 800de18:	4618      	mov	r0, r3
 800de1a:	f7ff f973 	bl	800d104 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800de1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800de2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800de2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800de34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de36:	2200      	movs	r2, #0
 800de38:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800de3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de3e:	2200      	movs	r2, #0
 800de40:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800de44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de46:	3354      	adds	r3, #84	; 0x54
 800de48:	2260      	movs	r2, #96	; 0x60
 800de4a:	2100      	movs	r1, #0
 800de4c:	4618      	mov	r0, r3
 800de4e:	f001 feb6 	bl	800fbbe <memset>
 800de52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de54:	4a0c      	ldr	r2, [pc, #48]	; (800de88 <prvInitialiseNewTask+0x140>)
 800de56:	659a      	str	r2, [r3, #88]	; 0x58
 800de58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de5a:	4a0c      	ldr	r2, [pc, #48]	; (800de8c <prvInitialiseNewTask+0x144>)
 800de5c:	65da      	str	r2, [r3, #92]	; 0x5c
 800de5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de60:	4a0b      	ldr	r2, [pc, #44]	; (800de90 <prvInitialiseNewTask+0x148>)
 800de62:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800de64:	683a      	ldr	r2, [r7, #0]
 800de66:	68f9      	ldr	r1, [r7, #12]
 800de68:	69b8      	ldr	r0, [r7, #24]
 800de6a:	f001 f941 	bl	800f0f0 <pxPortInitialiseStack>
 800de6e:	4602      	mov	r2, r0
 800de70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800de74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de76:	2b00      	cmp	r3, #0
 800de78:	d002      	beq.n	800de80 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800de7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de80:	bf00      	nop
 800de82:	3720      	adds	r7, #32
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}
 800de88:	08013058 	.word	0x08013058
 800de8c:	08013078 	.word	0x08013078
 800de90:	08013038 	.word	0x08013038

0800de94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b082      	sub	sp, #8
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800de9c:	f001 fa52 	bl	800f344 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dea0:	4b2d      	ldr	r3, [pc, #180]	; (800df58 <prvAddNewTaskToReadyList+0xc4>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	3301      	adds	r3, #1
 800dea6:	4a2c      	ldr	r2, [pc, #176]	; (800df58 <prvAddNewTaskToReadyList+0xc4>)
 800dea8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800deaa:	4b2c      	ldr	r3, [pc, #176]	; (800df5c <prvAddNewTaskToReadyList+0xc8>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d109      	bne.n	800dec6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800deb2:	4a2a      	ldr	r2, [pc, #168]	; (800df5c <prvAddNewTaskToReadyList+0xc8>)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800deb8:	4b27      	ldr	r3, [pc, #156]	; (800df58 <prvAddNewTaskToReadyList+0xc4>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	2b01      	cmp	r3, #1
 800debe:	d110      	bne.n	800dee2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dec0:	f000 fc26 	bl	800e710 <prvInitialiseTaskLists>
 800dec4:	e00d      	b.n	800dee2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dec6:	4b26      	ldr	r3, [pc, #152]	; (800df60 <prvAddNewTaskToReadyList+0xcc>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d109      	bne.n	800dee2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dece:	4b23      	ldr	r3, [pc, #140]	; (800df5c <prvAddNewTaskToReadyList+0xc8>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ded8:	429a      	cmp	r2, r3
 800deda:	d802      	bhi.n	800dee2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dedc:	4a1f      	ldr	r2, [pc, #124]	; (800df5c <prvAddNewTaskToReadyList+0xc8>)
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dee2:	4b20      	ldr	r3, [pc, #128]	; (800df64 <prvAddNewTaskToReadyList+0xd0>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	3301      	adds	r3, #1
 800dee8:	4a1e      	ldr	r2, [pc, #120]	; (800df64 <prvAddNewTaskToReadyList+0xd0>)
 800deea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800deec:	4b1d      	ldr	r3, [pc, #116]	; (800df64 <prvAddNewTaskToReadyList+0xd0>)
 800deee:	681a      	ldr	r2, [r3, #0]
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800def8:	4b1b      	ldr	r3, [pc, #108]	; (800df68 <prvAddNewTaskToReadyList+0xd4>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	429a      	cmp	r2, r3
 800defe:	d903      	bls.n	800df08 <prvAddNewTaskToReadyList+0x74>
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df04:	4a18      	ldr	r2, [pc, #96]	; (800df68 <prvAddNewTaskToReadyList+0xd4>)
 800df06:	6013      	str	r3, [r2, #0]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df0c:	4613      	mov	r3, r2
 800df0e:	009b      	lsls	r3, r3, #2
 800df10:	4413      	add	r3, r2
 800df12:	009b      	lsls	r3, r3, #2
 800df14:	4a15      	ldr	r2, [pc, #84]	; (800df6c <prvAddNewTaskToReadyList+0xd8>)
 800df16:	441a      	add	r2, r3
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	3304      	adds	r3, #4
 800df1c:	4619      	mov	r1, r3
 800df1e:	4610      	mov	r0, r2
 800df20:	f7ff f8fd 	bl	800d11e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800df24:	f001 fa3e 	bl	800f3a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800df28:	4b0d      	ldr	r3, [pc, #52]	; (800df60 <prvAddNewTaskToReadyList+0xcc>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d00e      	beq.n	800df4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800df30:	4b0a      	ldr	r3, [pc, #40]	; (800df5c <prvAddNewTaskToReadyList+0xc8>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d207      	bcs.n	800df4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800df3e:	4b0c      	ldr	r3, [pc, #48]	; (800df70 <prvAddNewTaskToReadyList+0xdc>)
 800df40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df44:	601a      	str	r2, [r3, #0]
 800df46:	f3bf 8f4f 	dsb	sy
 800df4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df4e:	bf00      	nop
 800df50:	3708      	adds	r7, #8
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
 800df56:	bf00      	nop
 800df58:	2000197c 	.word	0x2000197c
 800df5c:	200014a8 	.word	0x200014a8
 800df60:	20001988 	.word	0x20001988
 800df64:	20001998 	.word	0x20001998
 800df68:	20001984 	.word	0x20001984
 800df6c:	200014ac 	.word	0x200014ac
 800df70:	e000ed04 	.word	0xe000ed04

0800df74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800df74:	b580      	push	{r7, lr}
 800df76:	b084      	sub	sp, #16
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800df7c:	2300      	movs	r3, #0
 800df7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d017      	beq.n	800dfb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800df86:	4b13      	ldr	r3, [pc, #76]	; (800dfd4 <vTaskDelay+0x60>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d00a      	beq.n	800dfa4 <vTaskDelay+0x30>
	__asm volatile
 800df8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df92:	f383 8811 	msr	BASEPRI, r3
 800df96:	f3bf 8f6f 	isb	sy
 800df9a:	f3bf 8f4f 	dsb	sy
 800df9e:	60bb      	str	r3, [r7, #8]
}
 800dfa0:	bf00      	nop
 800dfa2:	e7fe      	b.n	800dfa2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dfa4:	f000 f88a 	bl	800e0bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dfa8:	2100      	movs	r1, #0
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f000 fcfe 	bl	800e9ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dfb0:	f000 f892 	bl	800e0d8 <xTaskResumeAll>
 800dfb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d107      	bne.n	800dfcc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dfbc:	4b06      	ldr	r3, [pc, #24]	; (800dfd8 <vTaskDelay+0x64>)
 800dfbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfc2:	601a      	str	r2, [r3, #0]
 800dfc4:	f3bf 8f4f 	dsb	sy
 800dfc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dfcc:	bf00      	nop
 800dfce:	3710      	adds	r7, #16
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	bd80      	pop	{r7, pc}
 800dfd4:	200019a4 	.word	0x200019a4
 800dfd8:	e000ed04 	.word	0xe000ed04

0800dfdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b08a      	sub	sp, #40	; 0x28
 800dfe0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dfea:	463a      	mov	r2, r7
 800dfec:	1d39      	adds	r1, r7, #4
 800dfee:	f107 0308 	add.w	r3, r7, #8
 800dff2:	4618      	mov	r0, r3
 800dff4:	f7ff f832 	bl	800d05c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dff8:	6839      	ldr	r1, [r7, #0]
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	68ba      	ldr	r2, [r7, #8]
 800dffe:	9202      	str	r2, [sp, #8]
 800e000:	9301      	str	r3, [sp, #4]
 800e002:	2300      	movs	r3, #0
 800e004:	9300      	str	r3, [sp, #0]
 800e006:	2300      	movs	r3, #0
 800e008:	460a      	mov	r2, r1
 800e00a:	4924      	ldr	r1, [pc, #144]	; (800e09c <vTaskStartScheduler+0xc0>)
 800e00c:	4824      	ldr	r0, [pc, #144]	; (800e0a0 <vTaskStartScheduler+0xc4>)
 800e00e:	f7ff fdf9 	bl	800dc04 <xTaskCreateStatic>
 800e012:	4603      	mov	r3, r0
 800e014:	4a23      	ldr	r2, [pc, #140]	; (800e0a4 <vTaskStartScheduler+0xc8>)
 800e016:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e018:	4b22      	ldr	r3, [pc, #136]	; (800e0a4 <vTaskStartScheduler+0xc8>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d002      	beq.n	800e026 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e020:	2301      	movs	r3, #1
 800e022:	617b      	str	r3, [r7, #20]
 800e024:	e001      	b.n	800e02a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e026:	2300      	movs	r3, #0
 800e028:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	2b01      	cmp	r3, #1
 800e02e:	d102      	bne.n	800e036 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e030:	f000 fd10 	bl	800ea54 <xTimerCreateTimerTask>
 800e034:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	2b01      	cmp	r3, #1
 800e03a:	d11b      	bne.n	800e074 <vTaskStartScheduler+0x98>
	__asm volatile
 800e03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e040:	f383 8811 	msr	BASEPRI, r3
 800e044:	f3bf 8f6f 	isb	sy
 800e048:	f3bf 8f4f 	dsb	sy
 800e04c:	613b      	str	r3, [r7, #16]
}
 800e04e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e050:	4b15      	ldr	r3, [pc, #84]	; (800e0a8 <vTaskStartScheduler+0xcc>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	3354      	adds	r3, #84	; 0x54
 800e056:	4a15      	ldr	r2, [pc, #84]	; (800e0ac <vTaskStartScheduler+0xd0>)
 800e058:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e05a:	4b15      	ldr	r3, [pc, #84]	; (800e0b0 <vTaskStartScheduler+0xd4>)
 800e05c:	f04f 32ff 	mov.w	r2, #4294967295
 800e060:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e062:	4b14      	ldr	r3, [pc, #80]	; (800e0b4 <vTaskStartScheduler+0xd8>)
 800e064:	2201      	movs	r2, #1
 800e066:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e068:	4b13      	ldr	r3, [pc, #76]	; (800e0b8 <vTaskStartScheduler+0xdc>)
 800e06a:	2200      	movs	r2, #0
 800e06c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e06e:	f001 f8c7 	bl	800f200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e072:	e00e      	b.n	800e092 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e074:	697b      	ldr	r3, [r7, #20]
 800e076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e07a:	d10a      	bne.n	800e092 <vTaskStartScheduler+0xb6>
	__asm volatile
 800e07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e080:	f383 8811 	msr	BASEPRI, r3
 800e084:	f3bf 8f6f 	isb	sy
 800e088:	f3bf 8f4f 	dsb	sy
 800e08c:	60fb      	str	r3, [r7, #12]
}
 800e08e:	bf00      	nop
 800e090:	e7fe      	b.n	800e090 <vTaskStartScheduler+0xb4>
}
 800e092:	bf00      	nop
 800e094:	3718      	adds	r7, #24
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}
 800e09a:	bf00      	nop
 800e09c:	08012f70 	.word	0x08012f70
 800e0a0:	0800e6e1 	.word	0x0800e6e1
 800e0a4:	200019a0 	.word	0x200019a0
 800e0a8:	200014a8 	.word	0x200014a8
 800e0ac:	20000018 	.word	0x20000018
 800e0b0:	2000199c 	.word	0x2000199c
 800e0b4:	20001988 	.word	0x20001988
 800e0b8:	20001980 	.word	0x20001980

0800e0bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e0bc:	b480      	push	{r7}
 800e0be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e0c0:	4b04      	ldr	r3, [pc, #16]	; (800e0d4 <vTaskSuspendAll+0x18>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	4a03      	ldr	r2, [pc, #12]	; (800e0d4 <vTaskSuspendAll+0x18>)
 800e0c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e0ca:	bf00      	nop
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr
 800e0d4:	200019a4 	.word	0x200019a4

0800e0d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b084      	sub	sp, #16
 800e0dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e0e6:	4b42      	ldr	r3, [pc, #264]	; (800e1f0 <xTaskResumeAll+0x118>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d10a      	bne.n	800e104 <xTaskResumeAll+0x2c>
	__asm volatile
 800e0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0f2:	f383 8811 	msr	BASEPRI, r3
 800e0f6:	f3bf 8f6f 	isb	sy
 800e0fa:	f3bf 8f4f 	dsb	sy
 800e0fe:	603b      	str	r3, [r7, #0]
}
 800e100:	bf00      	nop
 800e102:	e7fe      	b.n	800e102 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e104:	f001 f91e 	bl	800f344 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e108:	4b39      	ldr	r3, [pc, #228]	; (800e1f0 <xTaskResumeAll+0x118>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	3b01      	subs	r3, #1
 800e10e:	4a38      	ldr	r2, [pc, #224]	; (800e1f0 <xTaskResumeAll+0x118>)
 800e110:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e112:	4b37      	ldr	r3, [pc, #220]	; (800e1f0 <xTaskResumeAll+0x118>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d162      	bne.n	800e1e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e11a:	4b36      	ldr	r3, [pc, #216]	; (800e1f4 <xTaskResumeAll+0x11c>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d05e      	beq.n	800e1e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e122:	e02f      	b.n	800e184 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e124:	4b34      	ldr	r3, [pc, #208]	; (800e1f8 <xTaskResumeAll+0x120>)
 800e126:	68db      	ldr	r3, [r3, #12]
 800e128:	68db      	ldr	r3, [r3, #12]
 800e12a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	3318      	adds	r3, #24
 800e130:	4618      	mov	r0, r3
 800e132:	f7ff f851 	bl	800d1d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	3304      	adds	r3, #4
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7ff f84c 	bl	800d1d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e144:	4b2d      	ldr	r3, [pc, #180]	; (800e1fc <xTaskResumeAll+0x124>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	429a      	cmp	r2, r3
 800e14a:	d903      	bls.n	800e154 <xTaskResumeAll+0x7c>
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e150:	4a2a      	ldr	r2, [pc, #168]	; (800e1fc <xTaskResumeAll+0x124>)
 800e152:	6013      	str	r3, [r2, #0]
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e158:	4613      	mov	r3, r2
 800e15a:	009b      	lsls	r3, r3, #2
 800e15c:	4413      	add	r3, r2
 800e15e:	009b      	lsls	r3, r3, #2
 800e160:	4a27      	ldr	r2, [pc, #156]	; (800e200 <xTaskResumeAll+0x128>)
 800e162:	441a      	add	r2, r3
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	3304      	adds	r3, #4
 800e168:	4619      	mov	r1, r3
 800e16a:	4610      	mov	r0, r2
 800e16c:	f7fe ffd7 	bl	800d11e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e174:	4b23      	ldr	r3, [pc, #140]	; (800e204 <xTaskResumeAll+0x12c>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d302      	bcc.n	800e184 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e17e:	4b22      	ldr	r3, [pc, #136]	; (800e208 <xTaskResumeAll+0x130>)
 800e180:	2201      	movs	r2, #1
 800e182:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e184:	4b1c      	ldr	r3, [pc, #112]	; (800e1f8 <xTaskResumeAll+0x120>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d1cb      	bne.n	800e124 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d001      	beq.n	800e196 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e192:	f000 fb5f 	bl	800e854 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e196:	4b1d      	ldr	r3, [pc, #116]	; (800e20c <xTaskResumeAll+0x134>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d010      	beq.n	800e1c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e1a2:	f000 f847 	bl	800e234 <xTaskIncrementTick>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d002      	beq.n	800e1b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e1ac:	4b16      	ldr	r3, [pc, #88]	; (800e208 <xTaskResumeAll+0x130>)
 800e1ae:	2201      	movs	r2, #1
 800e1b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	3b01      	subs	r3, #1
 800e1b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d1f1      	bne.n	800e1a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e1be:	4b13      	ldr	r3, [pc, #76]	; (800e20c <xTaskResumeAll+0x134>)
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e1c4:	4b10      	ldr	r3, [pc, #64]	; (800e208 <xTaskResumeAll+0x130>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d009      	beq.n	800e1e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e1cc:	2301      	movs	r3, #1
 800e1ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e1d0:	4b0f      	ldr	r3, [pc, #60]	; (800e210 <xTaskResumeAll+0x138>)
 800e1d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1d6:	601a      	str	r2, [r3, #0]
 800e1d8:	f3bf 8f4f 	dsb	sy
 800e1dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e1e0:	f001 f8e0 	bl	800f3a4 <vPortExitCritical>

	return xAlreadyYielded;
 800e1e4:	68bb      	ldr	r3, [r7, #8]
}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	3710      	adds	r7, #16
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}
 800e1ee:	bf00      	nop
 800e1f0:	200019a4 	.word	0x200019a4
 800e1f4:	2000197c 	.word	0x2000197c
 800e1f8:	2000193c 	.word	0x2000193c
 800e1fc:	20001984 	.word	0x20001984
 800e200:	200014ac 	.word	0x200014ac
 800e204:	200014a8 	.word	0x200014a8
 800e208:	20001990 	.word	0x20001990
 800e20c:	2000198c 	.word	0x2000198c
 800e210:	e000ed04 	.word	0xe000ed04

0800e214 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e214:	b480      	push	{r7}
 800e216:	b083      	sub	sp, #12
 800e218:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e21a:	4b05      	ldr	r3, [pc, #20]	; (800e230 <xTaskGetTickCount+0x1c>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e220:	687b      	ldr	r3, [r7, #4]
}
 800e222:	4618      	mov	r0, r3
 800e224:	370c      	adds	r7, #12
 800e226:	46bd      	mov	sp, r7
 800e228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22c:	4770      	bx	lr
 800e22e:	bf00      	nop
 800e230:	20001980 	.word	0x20001980

0800e234 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b086      	sub	sp, #24
 800e238:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e23a:	2300      	movs	r3, #0
 800e23c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e23e:	4b4f      	ldr	r3, [pc, #316]	; (800e37c <xTaskIncrementTick+0x148>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	2b00      	cmp	r3, #0
 800e244:	f040 808f 	bne.w	800e366 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e248:	4b4d      	ldr	r3, [pc, #308]	; (800e380 <xTaskIncrementTick+0x14c>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	3301      	adds	r3, #1
 800e24e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e250:	4a4b      	ldr	r2, [pc, #300]	; (800e380 <xTaskIncrementTick+0x14c>)
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d120      	bne.n	800e29e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e25c:	4b49      	ldr	r3, [pc, #292]	; (800e384 <xTaskIncrementTick+0x150>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d00a      	beq.n	800e27c <xTaskIncrementTick+0x48>
	__asm volatile
 800e266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e26a:	f383 8811 	msr	BASEPRI, r3
 800e26e:	f3bf 8f6f 	isb	sy
 800e272:	f3bf 8f4f 	dsb	sy
 800e276:	603b      	str	r3, [r7, #0]
}
 800e278:	bf00      	nop
 800e27a:	e7fe      	b.n	800e27a <xTaskIncrementTick+0x46>
 800e27c:	4b41      	ldr	r3, [pc, #260]	; (800e384 <xTaskIncrementTick+0x150>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	60fb      	str	r3, [r7, #12]
 800e282:	4b41      	ldr	r3, [pc, #260]	; (800e388 <xTaskIncrementTick+0x154>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	4a3f      	ldr	r2, [pc, #252]	; (800e384 <xTaskIncrementTick+0x150>)
 800e288:	6013      	str	r3, [r2, #0]
 800e28a:	4a3f      	ldr	r2, [pc, #252]	; (800e388 <xTaskIncrementTick+0x154>)
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	6013      	str	r3, [r2, #0]
 800e290:	4b3e      	ldr	r3, [pc, #248]	; (800e38c <xTaskIncrementTick+0x158>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	3301      	adds	r3, #1
 800e296:	4a3d      	ldr	r2, [pc, #244]	; (800e38c <xTaskIncrementTick+0x158>)
 800e298:	6013      	str	r3, [r2, #0]
 800e29a:	f000 fadb 	bl	800e854 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e29e:	4b3c      	ldr	r3, [pc, #240]	; (800e390 <xTaskIncrementTick+0x15c>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	693a      	ldr	r2, [r7, #16]
 800e2a4:	429a      	cmp	r2, r3
 800e2a6:	d349      	bcc.n	800e33c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e2a8:	4b36      	ldr	r3, [pc, #216]	; (800e384 <xTaskIncrementTick+0x150>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d104      	bne.n	800e2bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2b2:	4b37      	ldr	r3, [pc, #220]	; (800e390 <xTaskIncrementTick+0x15c>)
 800e2b4:	f04f 32ff 	mov.w	r2, #4294967295
 800e2b8:	601a      	str	r2, [r3, #0]
					break;
 800e2ba:	e03f      	b.n	800e33c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2bc:	4b31      	ldr	r3, [pc, #196]	; (800e384 <xTaskIncrementTick+0x150>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	68db      	ldr	r3, [r3, #12]
 800e2c2:	68db      	ldr	r3, [r3, #12]
 800e2c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	685b      	ldr	r3, [r3, #4]
 800e2ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e2cc:	693a      	ldr	r2, [r7, #16]
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	d203      	bcs.n	800e2dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e2d4:	4a2e      	ldr	r2, [pc, #184]	; (800e390 <xTaskIncrementTick+0x15c>)
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e2da:	e02f      	b.n	800e33c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	3304      	adds	r3, #4
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f7fe ff79 	bl	800d1d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d004      	beq.n	800e2f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e2ee:	68bb      	ldr	r3, [r7, #8]
 800e2f0:	3318      	adds	r3, #24
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f7fe ff70 	bl	800d1d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e2f8:	68bb      	ldr	r3, [r7, #8]
 800e2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2fc:	4b25      	ldr	r3, [pc, #148]	; (800e394 <xTaskIncrementTick+0x160>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	429a      	cmp	r2, r3
 800e302:	d903      	bls.n	800e30c <xTaskIncrementTick+0xd8>
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e308:	4a22      	ldr	r2, [pc, #136]	; (800e394 <xTaskIncrementTick+0x160>)
 800e30a:	6013      	str	r3, [r2, #0]
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e310:	4613      	mov	r3, r2
 800e312:	009b      	lsls	r3, r3, #2
 800e314:	4413      	add	r3, r2
 800e316:	009b      	lsls	r3, r3, #2
 800e318:	4a1f      	ldr	r2, [pc, #124]	; (800e398 <xTaskIncrementTick+0x164>)
 800e31a:	441a      	add	r2, r3
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	3304      	adds	r3, #4
 800e320:	4619      	mov	r1, r3
 800e322:	4610      	mov	r0, r2
 800e324:	f7fe fefb 	bl	800d11e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e32c:	4b1b      	ldr	r3, [pc, #108]	; (800e39c <xTaskIncrementTick+0x168>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e332:	429a      	cmp	r2, r3
 800e334:	d3b8      	bcc.n	800e2a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e336:	2301      	movs	r3, #1
 800e338:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e33a:	e7b5      	b.n	800e2a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e33c:	4b17      	ldr	r3, [pc, #92]	; (800e39c <xTaskIncrementTick+0x168>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e342:	4915      	ldr	r1, [pc, #84]	; (800e398 <xTaskIncrementTick+0x164>)
 800e344:	4613      	mov	r3, r2
 800e346:	009b      	lsls	r3, r3, #2
 800e348:	4413      	add	r3, r2
 800e34a:	009b      	lsls	r3, r3, #2
 800e34c:	440b      	add	r3, r1
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	2b01      	cmp	r3, #1
 800e352:	d901      	bls.n	800e358 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e354:	2301      	movs	r3, #1
 800e356:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e358:	4b11      	ldr	r3, [pc, #68]	; (800e3a0 <xTaskIncrementTick+0x16c>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d007      	beq.n	800e370 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e360:	2301      	movs	r3, #1
 800e362:	617b      	str	r3, [r7, #20]
 800e364:	e004      	b.n	800e370 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e366:	4b0f      	ldr	r3, [pc, #60]	; (800e3a4 <xTaskIncrementTick+0x170>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	3301      	adds	r3, #1
 800e36c:	4a0d      	ldr	r2, [pc, #52]	; (800e3a4 <xTaskIncrementTick+0x170>)
 800e36e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e370:	697b      	ldr	r3, [r7, #20]
}
 800e372:	4618      	mov	r0, r3
 800e374:	3718      	adds	r7, #24
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}
 800e37a:	bf00      	nop
 800e37c:	200019a4 	.word	0x200019a4
 800e380:	20001980 	.word	0x20001980
 800e384:	20001934 	.word	0x20001934
 800e388:	20001938 	.word	0x20001938
 800e38c:	20001994 	.word	0x20001994
 800e390:	2000199c 	.word	0x2000199c
 800e394:	20001984 	.word	0x20001984
 800e398:	200014ac 	.word	0x200014ac
 800e39c:	200014a8 	.word	0x200014a8
 800e3a0:	20001990 	.word	0x20001990
 800e3a4:	2000198c 	.word	0x2000198c

0800e3a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b085      	sub	sp, #20
 800e3ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e3ae:	4b2a      	ldr	r3, [pc, #168]	; (800e458 <vTaskSwitchContext+0xb0>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d003      	beq.n	800e3be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e3b6:	4b29      	ldr	r3, [pc, #164]	; (800e45c <vTaskSwitchContext+0xb4>)
 800e3b8:	2201      	movs	r2, #1
 800e3ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e3bc:	e046      	b.n	800e44c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e3be:	4b27      	ldr	r3, [pc, #156]	; (800e45c <vTaskSwitchContext+0xb4>)
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3c4:	4b26      	ldr	r3, [pc, #152]	; (800e460 <vTaskSwitchContext+0xb8>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	60fb      	str	r3, [r7, #12]
 800e3ca:	e010      	b.n	800e3ee <vTaskSwitchContext+0x46>
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d10a      	bne.n	800e3e8 <vTaskSwitchContext+0x40>
	__asm volatile
 800e3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d6:	f383 8811 	msr	BASEPRI, r3
 800e3da:	f3bf 8f6f 	isb	sy
 800e3de:	f3bf 8f4f 	dsb	sy
 800e3e2:	607b      	str	r3, [r7, #4]
}
 800e3e4:	bf00      	nop
 800e3e6:	e7fe      	b.n	800e3e6 <vTaskSwitchContext+0x3e>
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	3b01      	subs	r3, #1
 800e3ec:	60fb      	str	r3, [r7, #12]
 800e3ee:	491d      	ldr	r1, [pc, #116]	; (800e464 <vTaskSwitchContext+0xbc>)
 800e3f0:	68fa      	ldr	r2, [r7, #12]
 800e3f2:	4613      	mov	r3, r2
 800e3f4:	009b      	lsls	r3, r3, #2
 800e3f6:	4413      	add	r3, r2
 800e3f8:	009b      	lsls	r3, r3, #2
 800e3fa:	440b      	add	r3, r1
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d0e4      	beq.n	800e3cc <vTaskSwitchContext+0x24>
 800e402:	68fa      	ldr	r2, [r7, #12]
 800e404:	4613      	mov	r3, r2
 800e406:	009b      	lsls	r3, r3, #2
 800e408:	4413      	add	r3, r2
 800e40a:	009b      	lsls	r3, r3, #2
 800e40c:	4a15      	ldr	r2, [pc, #84]	; (800e464 <vTaskSwitchContext+0xbc>)
 800e40e:	4413      	add	r3, r2
 800e410:	60bb      	str	r3, [r7, #8]
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	685b      	ldr	r3, [r3, #4]
 800e416:	685a      	ldr	r2, [r3, #4]
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	605a      	str	r2, [r3, #4]
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	685a      	ldr	r2, [r3, #4]
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	3308      	adds	r3, #8
 800e424:	429a      	cmp	r2, r3
 800e426:	d104      	bne.n	800e432 <vTaskSwitchContext+0x8a>
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	685b      	ldr	r3, [r3, #4]
 800e42c:	685a      	ldr	r2, [r3, #4]
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	605a      	str	r2, [r3, #4]
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	685b      	ldr	r3, [r3, #4]
 800e436:	68db      	ldr	r3, [r3, #12]
 800e438:	4a0b      	ldr	r2, [pc, #44]	; (800e468 <vTaskSwitchContext+0xc0>)
 800e43a:	6013      	str	r3, [r2, #0]
 800e43c:	4a08      	ldr	r2, [pc, #32]	; (800e460 <vTaskSwitchContext+0xb8>)
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e442:	4b09      	ldr	r3, [pc, #36]	; (800e468 <vTaskSwitchContext+0xc0>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	3354      	adds	r3, #84	; 0x54
 800e448:	4a08      	ldr	r2, [pc, #32]	; (800e46c <vTaskSwitchContext+0xc4>)
 800e44a:	6013      	str	r3, [r2, #0]
}
 800e44c:	bf00      	nop
 800e44e:	3714      	adds	r7, #20
 800e450:	46bd      	mov	sp, r7
 800e452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e456:	4770      	bx	lr
 800e458:	200019a4 	.word	0x200019a4
 800e45c:	20001990 	.word	0x20001990
 800e460:	20001984 	.word	0x20001984
 800e464:	200014ac 	.word	0x200014ac
 800e468:	200014a8 	.word	0x200014a8
 800e46c:	20000018 	.word	0x20000018

0800e470 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b084      	sub	sp, #16
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
 800e478:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d10a      	bne.n	800e496 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e484:	f383 8811 	msr	BASEPRI, r3
 800e488:	f3bf 8f6f 	isb	sy
 800e48c:	f3bf 8f4f 	dsb	sy
 800e490:	60fb      	str	r3, [r7, #12]
}
 800e492:	bf00      	nop
 800e494:	e7fe      	b.n	800e494 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e496:	4b07      	ldr	r3, [pc, #28]	; (800e4b4 <vTaskPlaceOnEventList+0x44>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	3318      	adds	r3, #24
 800e49c:	4619      	mov	r1, r3
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f7fe fe61 	bl	800d166 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e4a4:	2101      	movs	r1, #1
 800e4a6:	6838      	ldr	r0, [r7, #0]
 800e4a8:	f000 fa80 	bl	800e9ac <prvAddCurrentTaskToDelayedList>
}
 800e4ac:	bf00      	nop
 800e4ae:	3710      	adds	r7, #16
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	bd80      	pop	{r7, pc}
 800e4b4:	200014a8 	.word	0x200014a8

0800e4b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b086      	sub	sp, #24
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	60f8      	str	r0, [r7, #12]
 800e4c0:	60b9      	str	r1, [r7, #8]
 800e4c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d10a      	bne.n	800e4e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ce:	f383 8811 	msr	BASEPRI, r3
 800e4d2:	f3bf 8f6f 	isb	sy
 800e4d6:	f3bf 8f4f 	dsb	sy
 800e4da:	617b      	str	r3, [r7, #20]
}
 800e4dc:	bf00      	nop
 800e4de:	e7fe      	b.n	800e4de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e4e0:	4b0a      	ldr	r3, [pc, #40]	; (800e50c <vTaskPlaceOnEventListRestricted+0x54>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	3318      	adds	r3, #24
 800e4e6:	4619      	mov	r1, r3
 800e4e8:	68f8      	ldr	r0, [r7, #12]
 800e4ea:	f7fe fe18 	bl	800d11e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d002      	beq.n	800e4fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e4f4:	f04f 33ff 	mov.w	r3, #4294967295
 800e4f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e4fa:	6879      	ldr	r1, [r7, #4]
 800e4fc:	68b8      	ldr	r0, [r7, #8]
 800e4fe:	f000 fa55 	bl	800e9ac <prvAddCurrentTaskToDelayedList>
	}
 800e502:	bf00      	nop
 800e504:	3718      	adds	r7, #24
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}
 800e50a:	bf00      	nop
 800e50c:	200014a8 	.word	0x200014a8

0800e510 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b086      	sub	sp, #24
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	68db      	ldr	r3, [r3, #12]
 800e51c:	68db      	ldr	r3, [r3, #12]
 800e51e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d10a      	bne.n	800e53c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e52a:	f383 8811 	msr	BASEPRI, r3
 800e52e:	f3bf 8f6f 	isb	sy
 800e532:	f3bf 8f4f 	dsb	sy
 800e536:	60fb      	str	r3, [r7, #12]
}
 800e538:	bf00      	nop
 800e53a:	e7fe      	b.n	800e53a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e53c:	693b      	ldr	r3, [r7, #16]
 800e53e:	3318      	adds	r3, #24
 800e540:	4618      	mov	r0, r3
 800e542:	f7fe fe49 	bl	800d1d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e546:	4b1e      	ldr	r3, [pc, #120]	; (800e5c0 <xTaskRemoveFromEventList+0xb0>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d11d      	bne.n	800e58a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	3304      	adds	r3, #4
 800e552:	4618      	mov	r0, r3
 800e554:	f7fe fe40 	bl	800d1d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e55c:	4b19      	ldr	r3, [pc, #100]	; (800e5c4 <xTaskRemoveFromEventList+0xb4>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	429a      	cmp	r2, r3
 800e562:	d903      	bls.n	800e56c <xTaskRemoveFromEventList+0x5c>
 800e564:	693b      	ldr	r3, [r7, #16]
 800e566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e568:	4a16      	ldr	r2, [pc, #88]	; (800e5c4 <xTaskRemoveFromEventList+0xb4>)
 800e56a:	6013      	str	r3, [r2, #0]
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e570:	4613      	mov	r3, r2
 800e572:	009b      	lsls	r3, r3, #2
 800e574:	4413      	add	r3, r2
 800e576:	009b      	lsls	r3, r3, #2
 800e578:	4a13      	ldr	r2, [pc, #76]	; (800e5c8 <xTaskRemoveFromEventList+0xb8>)
 800e57a:	441a      	add	r2, r3
 800e57c:	693b      	ldr	r3, [r7, #16]
 800e57e:	3304      	adds	r3, #4
 800e580:	4619      	mov	r1, r3
 800e582:	4610      	mov	r0, r2
 800e584:	f7fe fdcb 	bl	800d11e <vListInsertEnd>
 800e588:	e005      	b.n	800e596 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e58a:	693b      	ldr	r3, [r7, #16]
 800e58c:	3318      	adds	r3, #24
 800e58e:	4619      	mov	r1, r3
 800e590:	480e      	ldr	r0, [pc, #56]	; (800e5cc <xTaskRemoveFromEventList+0xbc>)
 800e592:	f7fe fdc4 	bl	800d11e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e59a:	4b0d      	ldr	r3, [pc, #52]	; (800e5d0 <xTaskRemoveFromEventList+0xc0>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d905      	bls.n	800e5b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e5a8:	4b0a      	ldr	r3, [pc, #40]	; (800e5d4 <xTaskRemoveFromEventList+0xc4>)
 800e5aa:	2201      	movs	r2, #1
 800e5ac:	601a      	str	r2, [r3, #0]
 800e5ae:	e001      	b.n	800e5b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e5b4:	697b      	ldr	r3, [r7, #20]
}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3718      	adds	r7, #24
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}
 800e5be:	bf00      	nop
 800e5c0:	200019a4 	.word	0x200019a4
 800e5c4:	20001984 	.word	0x20001984
 800e5c8:	200014ac 	.word	0x200014ac
 800e5cc:	2000193c 	.word	0x2000193c
 800e5d0:	200014a8 	.word	0x200014a8
 800e5d4:	20001990 	.word	0x20001990

0800e5d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b083      	sub	sp, #12
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e5e0:	4b06      	ldr	r3, [pc, #24]	; (800e5fc <vTaskInternalSetTimeOutState+0x24>)
 800e5e2:	681a      	ldr	r2, [r3, #0]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e5e8:	4b05      	ldr	r3, [pc, #20]	; (800e600 <vTaskInternalSetTimeOutState+0x28>)
 800e5ea:	681a      	ldr	r2, [r3, #0]
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	605a      	str	r2, [r3, #4]
}
 800e5f0:	bf00      	nop
 800e5f2:	370c      	adds	r7, #12
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fa:	4770      	bx	lr
 800e5fc:	20001994 	.word	0x20001994
 800e600:	20001980 	.word	0x20001980

0800e604 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b088      	sub	sp, #32
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d10a      	bne.n	800e62a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e618:	f383 8811 	msr	BASEPRI, r3
 800e61c:	f3bf 8f6f 	isb	sy
 800e620:	f3bf 8f4f 	dsb	sy
 800e624:	613b      	str	r3, [r7, #16]
}
 800e626:	bf00      	nop
 800e628:	e7fe      	b.n	800e628 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d10a      	bne.n	800e646 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e634:	f383 8811 	msr	BASEPRI, r3
 800e638:	f3bf 8f6f 	isb	sy
 800e63c:	f3bf 8f4f 	dsb	sy
 800e640:	60fb      	str	r3, [r7, #12]
}
 800e642:	bf00      	nop
 800e644:	e7fe      	b.n	800e644 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e646:	f000 fe7d 	bl	800f344 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e64a:	4b1d      	ldr	r3, [pc, #116]	; (800e6c0 <xTaskCheckForTimeOut+0xbc>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	685b      	ldr	r3, [r3, #4]
 800e654:	69ba      	ldr	r2, [r7, #24]
 800e656:	1ad3      	subs	r3, r2, r3
 800e658:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e662:	d102      	bne.n	800e66a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e664:	2300      	movs	r3, #0
 800e666:	61fb      	str	r3, [r7, #28]
 800e668:	e023      	b.n	800e6b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681a      	ldr	r2, [r3, #0]
 800e66e:	4b15      	ldr	r3, [pc, #84]	; (800e6c4 <xTaskCheckForTimeOut+0xc0>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	429a      	cmp	r2, r3
 800e674:	d007      	beq.n	800e686 <xTaskCheckForTimeOut+0x82>
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	685b      	ldr	r3, [r3, #4]
 800e67a:	69ba      	ldr	r2, [r7, #24]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d302      	bcc.n	800e686 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e680:	2301      	movs	r3, #1
 800e682:	61fb      	str	r3, [r7, #28]
 800e684:	e015      	b.n	800e6b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	697a      	ldr	r2, [r7, #20]
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d20b      	bcs.n	800e6a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	681a      	ldr	r2, [r3, #0]
 800e694:	697b      	ldr	r3, [r7, #20]
 800e696:	1ad2      	subs	r2, r2, r3
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f7ff ff9b 	bl	800e5d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	61fb      	str	r3, [r7, #28]
 800e6a6:	e004      	b.n	800e6b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e6b2:	f000 fe77 	bl	800f3a4 <vPortExitCritical>

	return xReturn;
 800e6b6:	69fb      	ldr	r3, [r7, #28]
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	3720      	adds	r7, #32
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}
 800e6c0:	20001980 	.word	0x20001980
 800e6c4:	20001994 	.word	0x20001994

0800e6c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e6cc:	4b03      	ldr	r3, [pc, #12]	; (800e6dc <vTaskMissedYield+0x14>)
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	601a      	str	r2, [r3, #0]
}
 800e6d2:	bf00      	nop
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6da:	4770      	bx	lr
 800e6dc:	20001990 	.word	0x20001990

0800e6e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e6e8:	f000 f852 	bl	800e790 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e6ec:	4b06      	ldr	r3, [pc, #24]	; (800e708 <prvIdleTask+0x28>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	2b01      	cmp	r3, #1
 800e6f2:	d9f9      	bls.n	800e6e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e6f4:	4b05      	ldr	r3, [pc, #20]	; (800e70c <prvIdleTask+0x2c>)
 800e6f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6fa:	601a      	str	r2, [r3, #0]
 800e6fc:	f3bf 8f4f 	dsb	sy
 800e700:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e704:	e7f0      	b.n	800e6e8 <prvIdleTask+0x8>
 800e706:	bf00      	nop
 800e708:	200014ac 	.word	0x200014ac
 800e70c:	e000ed04 	.word	0xe000ed04

0800e710 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b082      	sub	sp, #8
 800e714:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e716:	2300      	movs	r3, #0
 800e718:	607b      	str	r3, [r7, #4]
 800e71a:	e00c      	b.n	800e736 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e71c:	687a      	ldr	r2, [r7, #4]
 800e71e:	4613      	mov	r3, r2
 800e720:	009b      	lsls	r3, r3, #2
 800e722:	4413      	add	r3, r2
 800e724:	009b      	lsls	r3, r3, #2
 800e726:	4a12      	ldr	r2, [pc, #72]	; (800e770 <prvInitialiseTaskLists+0x60>)
 800e728:	4413      	add	r3, r2
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7fe fcca 	bl	800d0c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	3301      	adds	r3, #1
 800e734:	607b      	str	r3, [r7, #4]
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2b37      	cmp	r3, #55	; 0x37
 800e73a:	d9ef      	bls.n	800e71c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e73c:	480d      	ldr	r0, [pc, #52]	; (800e774 <prvInitialiseTaskLists+0x64>)
 800e73e:	f7fe fcc1 	bl	800d0c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e742:	480d      	ldr	r0, [pc, #52]	; (800e778 <prvInitialiseTaskLists+0x68>)
 800e744:	f7fe fcbe 	bl	800d0c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e748:	480c      	ldr	r0, [pc, #48]	; (800e77c <prvInitialiseTaskLists+0x6c>)
 800e74a:	f7fe fcbb 	bl	800d0c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e74e:	480c      	ldr	r0, [pc, #48]	; (800e780 <prvInitialiseTaskLists+0x70>)
 800e750:	f7fe fcb8 	bl	800d0c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e754:	480b      	ldr	r0, [pc, #44]	; (800e784 <prvInitialiseTaskLists+0x74>)
 800e756:	f7fe fcb5 	bl	800d0c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e75a:	4b0b      	ldr	r3, [pc, #44]	; (800e788 <prvInitialiseTaskLists+0x78>)
 800e75c:	4a05      	ldr	r2, [pc, #20]	; (800e774 <prvInitialiseTaskLists+0x64>)
 800e75e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e760:	4b0a      	ldr	r3, [pc, #40]	; (800e78c <prvInitialiseTaskLists+0x7c>)
 800e762:	4a05      	ldr	r2, [pc, #20]	; (800e778 <prvInitialiseTaskLists+0x68>)
 800e764:	601a      	str	r2, [r3, #0]
}
 800e766:	bf00      	nop
 800e768:	3708      	adds	r7, #8
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}
 800e76e:	bf00      	nop
 800e770:	200014ac 	.word	0x200014ac
 800e774:	2000190c 	.word	0x2000190c
 800e778:	20001920 	.word	0x20001920
 800e77c:	2000193c 	.word	0x2000193c
 800e780:	20001950 	.word	0x20001950
 800e784:	20001968 	.word	0x20001968
 800e788:	20001934 	.word	0x20001934
 800e78c:	20001938 	.word	0x20001938

0800e790 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b082      	sub	sp, #8
 800e794:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e796:	e019      	b.n	800e7cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e798:	f000 fdd4 	bl	800f344 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e79c:	4b10      	ldr	r3, [pc, #64]	; (800e7e0 <prvCheckTasksWaitingTermination+0x50>)
 800e79e:	68db      	ldr	r3, [r3, #12]
 800e7a0:	68db      	ldr	r3, [r3, #12]
 800e7a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	3304      	adds	r3, #4
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f7fe fd15 	bl	800d1d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e7ae:	4b0d      	ldr	r3, [pc, #52]	; (800e7e4 <prvCheckTasksWaitingTermination+0x54>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	3b01      	subs	r3, #1
 800e7b4:	4a0b      	ldr	r2, [pc, #44]	; (800e7e4 <prvCheckTasksWaitingTermination+0x54>)
 800e7b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e7b8:	4b0b      	ldr	r3, [pc, #44]	; (800e7e8 <prvCheckTasksWaitingTermination+0x58>)
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	3b01      	subs	r3, #1
 800e7be:	4a0a      	ldr	r2, [pc, #40]	; (800e7e8 <prvCheckTasksWaitingTermination+0x58>)
 800e7c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e7c2:	f000 fdef 	bl	800f3a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f000 f810 	bl	800e7ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e7cc:	4b06      	ldr	r3, [pc, #24]	; (800e7e8 <prvCheckTasksWaitingTermination+0x58>)
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d1e1      	bne.n	800e798 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e7d4:	bf00      	nop
 800e7d6:	bf00      	nop
 800e7d8:	3708      	adds	r7, #8
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}
 800e7de:	bf00      	nop
 800e7e0:	20001950 	.word	0x20001950
 800e7e4:	2000197c 	.word	0x2000197c
 800e7e8:	20001964 	.word	0x20001964

0800e7ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b084      	sub	sp, #16
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	3354      	adds	r3, #84	; 0x54
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f001 ff83 	bl	8010704 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e804:	2b00      	cmp	r3, #0
 800e806:	d108      	bne.n	800e81a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e80c:	4618      	mov	r0, r3
 800e80e:	f000 ff87 	bl	800f720 <vPortFree>
				vPortFree( pxTCB );
 800e812:	6878      	ldr	r0, [r7, #4]
 800e814:	f000 ff84 	bl	800f720 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e818:	e018      	b.n	800e84c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e820:	2b01      	cmp	r3, #1
 800e822:	d103      	bne.n	800e82c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f000 ff7b 	bl	800f720 <vPortFree>
	}
 800e82a:	e00f      	b.n	800e84c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e832:	2b02      	cmp	r3, #2
 800e834:	d00a      	beq.n	800e84c <prvDeleteTCB+0x60>
	__asm volatile
 800e836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e83a:	f383 8811 	msr	BASEPRI, r3
 800e83e:	f3bf 8f6f 	isb	sy
 800e842:	f3bf 8f4f 	dsb	sy
 800e846:	60fb      	str	r3, [r7, #12]
}
 800e848:	bf00      	nop
 800e84a:	e7fe      	b.n	800e84a <prvDeleteTCB+0x5e>
	}
 800e84c:	bf00      	nop
 800e84e:	3710      	adds	r7, #16
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}

0800e854 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e854:	b480      	push	{r7}
 800e856:	b083      	sub	sp, #12
 800e858:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e85a:	4b0c      	ldr	r3, [pc, #48]	; (800e88c <prvResetNextTaskUnblockTime+0x38>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d104      	bne.n	800e86e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e864:	4b0a      	ldr	r3, [pc, #40]	; (800e890 <prvResetNextTaskUnblockTime+0x3c>)
 800e866:	f04f 32ff 	mov.w	r2, #4294967295
 800e86a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e86c:	e008      	b.n	800e880 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e86e:	4b07      	ldr	r3, [pc, #28]	; (800e88c <prvResetNextTaskUnblockTime+0x38>)
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	68db      	ldr	r3, [r3, #12]
 800e874:	68db      	ldr	r3, [r3, #12]
 800e876:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	4a04      	ldr	r2, [pc, #16]	; (800e890 <prvResetNextTaskUnblockTime+0x3c>)
 800e87e:	6013      	str	r3, [r2, #0]
}
 800e880:	bf00      	nop
 800e882:	370c      	adds	r7, #12
 800e884:	46bd      	mov	sp, r7
 800e886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88a:	4770      	bx	lr
 800e88c:	20001934 	.word	0x20001934
 800e890:	2000199c 	.word	0x2000199c

0800e894 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e894:	b480      	push	{r7}
 800e896:	b083      	sub	sp, #12
 800e898:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e89a:	4b0b      	ldr	r3, [pc, #44]	; (800e8c8 <xTaskGetSchedulerState+0x34>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d102      	bne.n	800e8a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	607b      	str	r3, [r7, #4]
 800e8a6:	e008      	b.n	800e8ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8a8:	4b08      	ldr	r3, [pc, #32]	; (800e8cc <xTaskGetSchedulerState+0x38>)
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d102      	bne.n	800e8b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e8b0:	2302      	movs	r3, #2
 800e8b2:	607b      	str	r3, [r7, #4]
 800e8b4:	e001      	b.n	800e8ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e8ba:	687b      	ldr	r3, [r7, #4]
	}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	370c      	adds	r7, #12
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c6:	4770      	bx	lr
 800e8c8:	20001988 	.word	0x20001988
 800e8cc:	200019a4 	.word	0x200019a4

0800e8d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b086      	sub	sp, #24
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e8dc:	2300      	movs	r3, #0
 800e8de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d056      	beq.n	800e994 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e8e6:	4b2e      	ldr	r3, [pc, #184]	; (800e9a0 <xTaskPriorityDisinherit+0xd0>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	693a      	ldr	r2, [r7, #16]
 800e8ec:	429a      	cmp	r2, r3
 800e8ee:	d00a      	beq.n	800e906 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f4:	f383 8811 	msr	BASEPRI, r3
 800e8f8:	f3bf 8f6f 	isb	sy
 800e8fc:	f3bf 8f4f 	dsb	sy
 800e900:	60fb      	str	r3, [r7, #12]
}
 800e902:	bf00      	nop
 800e904:	e7fe      	b.n	800e904 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d10a      	bne.n	800e924 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e912:	f383 8811 	msr	BASEPRI, r3
 800e916:	f3bf 8f6f 	isb	sy
 800e91a:	f3bf 8f4f 	dsb	sy
 800e91e:	60bb      	str	r3, [r7, #8]
}
 800e920:	bf00      	nop
 800e922:	e7fe      	b.n	800e922 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e924:	693b      	ldr	r3, [r7, #16]
 800e926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e928:	1e5a      	subs	r2, r3, #1
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e936:	429a      	cmp	r2, r3
 800e938:	d02c      	beq.n	800e994 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d128      	bne.n	800e994 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	3304      	adds	r3, #4
 800e946:	4618      	mov	r0, r3
 800e948:	f7fe fc46 	bl	800d1d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e94c:	693b      	ldr	r3, [r7, #16]
 800e94e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e958:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e960:	693b      	ldr	r3, [r7, #16]
 800e962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e964:	4b0f      	ldr	r3, [pc, #60]	; (800e9a4 <xTaskPriorityDisinherit+0xd4>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	429a      	cmp	r2, r3
 800e96a:	d903      	bls.n	800e974 <xTaskPriorityDisinherit+0xa4>
 800e96c:	693b      	ldr	r3, [r7, #16]
 800e96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e970:	4a0c      	ldr	r2, [pc, #48]	; (800e9a4 <xTaskPriorityDisinherit+0xd4>)
 800e972:	6013      	str	r3, [r2, #0]
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e978:	4613      	mov	r3, r2
 800e97a:	009b      	lsls	r3, r3, #2
 800e97c:	4413      	add	r3, r2
 800e97e:	009b      	lsls	r3, r3, #2
 800e980:	4a09      	ldr	r2, [pc, #36]	; (800e9a8 <xTaskPriorityDisinherit+0xd8>)
 800e982:	441a      	add	r2, r3
 800e984:	693b      	ldr	r3, [r7, #16]
 800e986:	3304      	adds	r3, #4
 800e988:	4619      	mov	r1, r3
 800e98a:	4610      	mov	r0, r2
 800e98c:	f7fe fbc7 	bl	800d11e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e990:	2301      	movs	r3, #1
 800e992:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e994:	697b      	ldr	r3, [r7, #20]
	}
 800e996:	4618      	mov	r0, r3
 800e998:	3718      	adds	r7, #24
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	200014a8 	.word	0x200014a8
 800e9a4:	20001984 	.word	0x20001984
 800e9a8:	200014ac 	.word	0x200014ac

0800e9ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b084      	sub	sp, #16
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
 800e9b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e9b6:	4b21      	ldr	r3, [pc, #132]	; (800ea3c <prvAddCurrentTaskToDelayedList+0x90>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e9bc:	4b20      	ldr	r3, [pc, #128]	; (800ea40 <prvAddCurrentTaskToDelayedList+0x94>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	3304      	adds	r3, #4
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f7fe fc08 	bl	800d1d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9ce:	d10a      	bne.n	800e9e6 <prvAddCurrentTaskToDelayedList+0x3a>
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d007      	beq.n	800e9e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9d6:	4b1a      	ldr	r3, [pc, #104]	; (800ea40 <prvAddCurrentTaskToDelayedList+0x94>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	3304      	adds	r3, #4
 800e9dc:	4619      	mov	r1, r3
 800e9de:	4819      	ldr	r0, [pc, #100]	; (800ea44 <prvAddCurrentTaskToDelayedList+0x98>)
 800e9e0:	f7fe fb9d 	bl	800d11e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e9e4:	e026      	b.n	800ea34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e9e6:	68fa      	ldr	r2, [r7, #12]
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	4413      	add	r3, r2
 800e9ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e9ee:	4b14      	ldr	r3, [pc, #80]	; (800ea40 <prvAddCurrentTaskToDelayedList+0x94>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	68ba      	ldr	r2, [r7, #8]
 800e9f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e9f6:	68ba      	ldr	r2, [r7, #8]
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	d209      	bcs.n	800ea12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9fe:	4b12      	ldr	r3, [pc, #72]	; (800ea48 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ea00:	681a      	ldr	r2, [r3, #0]
 800ea02:	4b0f      	ldr	r3, [pc, #60]	; (800ea40 <prvAddCurrentTaskToDelayedList+0x94>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	3304      	adds	r3, #4
 800ea08:	4619      	mov	r1, r3
 800ea0a:	4610      	mov	r0, r2
 800ea0c:	f7fe fbab 	bl	800d166 <vListInsert>
}
 800ea10:	e010      	b.n	800ea34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ea12:	4b0e      	ldr	r3, [pc, #56]	; (800ea4c <prvAddCurrentTaskToDelayedList+0xa0>)
 800ea14:	681a      	ldr	r2, [r3, #0]
 800ea16:	4b0a      	ldr	r3, [pc, #40]	; (800ea40 <prvAddCurrentTaskToDelayedList+0x94>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	3304      	adds	r3, #4
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	4610      	mov	r0, r2
 800ea20:	f7fe fba1 	bl	800d166 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ea24:	4b0a      	ldr	r3, [pc, #40]	; (800ea50 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	68ba      	ldr	r2, [r7, #8]
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	d202      	bcs.n	800ea34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ea2e:	4a08      	ldr	r2, [pc, #32]	; (800ea50 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	6013      	str	r3, [r2, #0]
}
 800ea34:	bf00      	nop
 800ea36:	3710      	adds	r7, #16
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}
 800ea3c:	20001980 	.word	0x20001980
 800ea40:	200014a8 	.word	0x200014a8
 800ea44:	20001968 	.word	0x20001968
 800ea48:	20001938 	.word	0x20001938
 800ea4c:	20001934 	.word	0x20001934
 800ea50:	2000199c 	.word	0x2000199c

0800ea54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b08a      	sub	sp, #40	; 0x28
 800ea58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ea5e:	f000 fb07 	bl	800f070 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ea62:	4b1c      	ldr	r3, [pc, #112]	; (800ead4 <xTimerCreateTimerTask+0x80>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d021      	beq.n	800eaae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ea72:	1d3a      	adds	r2, r7, #4
 800ea74:	f107 0108 	add.w	r1, r7, #8
 800ea78:	f107 030c 	add.w	r3, r7, #12
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f7fe fb07 	bl	800d090 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ea82:	6879      	ldr	r1, [r7, #4]
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	68fa      	ldr	r2, [r7, #12]
 800ea88:	9202      	str	r2, [sp, #8]
 800ea8a:	9301      	str	r3, [sp, #4]
 800ea8c:	2302      	movs	r3, #2
 800ea8e:	9300      	str	r3, [sp, #0]
 800ea90:	2300      	movs	r3, #0
 800ea92:	460a      	mov	r2, r1
 800ea94:	4910      	ldr	r1, [pc, #64]	; (800ead8 <xTimerCreateTimerTask+0x84>)
 800ea96:	4811      	ldr	r0, [pc, #68]	; (800eadc <xTimerCreateTimerTask+0x88>)
 800ea98:	f7ff f8b4 	bl	800dc04 <xTaskCreateStatic>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	4a10      	ldr	r2, [pc, #64]	; (800eae0 <xTimerCreateTimerTask+0x8c>)
 800eaa0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800eaa2:	4b0f      	ldr	r3, [pc, #60]	; (800eae0 <xTimerCreateTimerTask+0x8c>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d001      	beq.n	800eaae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800eaaa:	2301      	movs	r3, #1
 800eaac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d10a      	bne.n	800eaca <xTimerCreateTimerTask+0x76>
	__asm volatile
 800eab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab8:	f383 8811 	msr	BASEPRI, r3
 800eabc:	f3bf 8f6f 	isb	sy
 800eac0:	f3bf 8f4f 	dsb	sy
 800eac4:	613b      	str	r3, [r7, #16]
}
 800eac6:	bf00      	nop
 800eac8:	e7fe      	b.n	800eac8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800eaca:	697b      	ldr	r3, [r7, #20]
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3718      	adds	r7, #24
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}
 800ead4:	200019d8 	.word	0x200019d8
 800ead8:	08012f78 	.word	0x08012f78
 800eadc:	0800ec19 	.word	0x0800ec19
 800eae0:	200019dc 	.word	0x200019dc

0800eae4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b08a      	sub	sp, #40	; 0x28
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	60f8      	str	r0, [r7, #12]
 800eaec:	60b9      	str	r1, [r7, #8]
 800eaee:	607a      	str	r2, [r7, #4]
 800eaf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d10a      	bne.n	800eb12 <xTimerGenericCommand+0x2e>
	__asm volatile
 800eafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb00:	f383 8811 	msr	BASEPRI, r3
 800eb04:	f3bf 8f6f 	isb	sy
 800eb08:	f3bf 8f4f 	dsb	sy
 800eb0c:	623b      	str	r3, [r7, #32]
}
 800eb0e:	bf00      	nop
 800eb10:	e7fe      	b.n	800eb10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800eb12:	4b1a      	ldr	r3, [pc, #104]	; (800eb7c <xTimerGenericCommand+0x98>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d02a      	beq.n	800eb70 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	2b05      	cmp	r3, #5
 800eb2a:	dc18      	bgt.n	800eb5e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800eb2c:	f7ff feb2 	bl	800e894 <xTaskGetSchedulerState>
 800eb30:	4603      	mov	r3, r0
 800eb32:	2b02      	cmp	r3, #2
 800eb34:	d109      	bne.n	800eb4a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800eb36:	4b11      	ldr	r3, [pc, #68]	; (800eb7c <xTimerGenericCommand+0x98>)
 800eb38:	6818      	ldr	r0, [r3, #0]
 800eb3a:	f107 0110 	add.w	r1, r7, #16
 800eb3e:	2300      	movs	r3, #0
 800eb40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb42:	f7fe fc77 	bl	800d434 <xQueueGenericSend>
 800eb46:	6278      	str	r0, [r7, #36]	; 0x24
 800eb48:	e012      	b.n	800eb70 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eb4a:	4b0c      	ldr	r3, [pc, #48]	; (800eb7c <xTimerGenericCommand+0x98>)
 800eb4c:	6818      	ldr	r0, [r3, #0]
 800eb4e:	f107 0110 	add.w	r1, r7, #16
 800eb52:	2300      	movs	r3, #0
 800eb54:	2200      	movs	r2, #0
 800eb56:	f7fe fc6d 	bl	800d434 <xQueueGenericSend>
 800eb5a:	6278      	str	r0, [r7, #36]	; 0x24
 800eb5c:	e008      	b.n	800eb70 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800eb5e:	4b07      	ldr	r3, [pc, #28]	; (800eb7c <xTimerGenericCommand+0x98>)
 800eb60:	6818      	ldr	r0, [r3, #0]
 800eb62:	f107 0110 	add.w	r1, r7, #16
 800eb66:	2300      	movs	r3, #0
 800eb68:	683a      	ldr	r2, [r7, #0]
 800eb6a:	f7fe fd61 	bl	800d630 <xQueueGenericSendFromISR>
 800eb6e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800eb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	3728      	adds	r7, #40	; 0x28
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}
 800eb7a:	bf00      	nop
 800eb7c:	200019d8 	.word	0x200019d8

0800eb80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b088      	sub	sp, #32
 800eb84:	af02      	add	r7, sp, #8
 800eb86:	6078      	str	r0, [r7, #4]
 800eb88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb8a:	4b22      	ldr	r3, [pc, #136]	; (800ec14 <prvProcessExpiredTimer+0x94>)
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	68db      	ldr	r3, [r3, #12]
 800eb90:	68db      	ldr	r3, [r3, #12]
 800eb92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb94:	697b      	ldr	r3, [r7, #20]
 800eb96:	3304      	adds	r3, #4
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f7fe fb1d 	bl	800d1d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eb9e:	697b      	ldr	r3, [r7, #20]
 800eba0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eba4:	f003 0304 	and.w	r3, r3, #4
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d022      	beq.n	800ebf2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	699a      	ldr	r2, [r3, #24]
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	18d1      	adds	r1, r2, r3
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	683a      	ldr	r2, [r7, #0]
 800ebb8:	6978      	ldr	r0, [r7, #20]
 800ebba:	f000 f8d1 	bl	800ed60 <prvInsertTimerInActiveList>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d01f      	beq.n	800ec04 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	9300      	str	r3, [sp, #0]
 800ebc8:	2300      	movs	r3, #0
 800ebca:	687a      	ldr	r2, [r7, #4]
 800ebcc:	2100      	movs	r1, #0
 800ebce:	6978      	ldr	r0, [r7, #20]
 800ebd0:	f7ff ff88 	bl	800eae4 <xTimerGenericCommand>
 800ebd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ebd6:	693b      	ldr	r3, [r7, #16]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d113      	bne.n	800ec04 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ebdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebe0:	f383 8811 	msr	BASEPRI, r3
 800ebe4:	f3bf 8f6f 	isb	sy
 800ebe8:	f3bf 8f4f 	dsb	sy
 800ebec:	60fb      	str	r3, [r7, #12]
}
 800ebee:	bf00      	nop
 800ebf0:	e7fe      	b.n	800ebf0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ebf8:	f023 0301 	bic.w	r3, r3, #1
 800ebfc:	b2da      	uxtb	r2, r3
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ec04:	697b      	ldr	r3, [r7, #20]
 800ec06:	6a1b      	ldr	r3, [r3, #32]
 800ec08:	6978      	ldr	r0, [r7, #20]
 800ec0a:	4798      	blx	r3
}
 800ec0c:	bf00      	nop
 800ec0e:	3718      	adds	r7, #24
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}
 800ec14:	200019d0 	.word	0x200019d0

0800ec18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b084      	sub	sp, #16
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ec20:	f107 0308 	add.w	r3, r7, #8
 800ec24:	4618      	mov	r0, r3
 800ec26:	f000 f857 	bl	800ecd8 <prvGetNextExpireTime>
 800ec2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ec2c:	68bb      	ldr	r3, [r7, #8]
 800ec2e:	4619      	mov	r1, r3
 800ec30:	68f8      	ldr	r0, [r7, #12]
 800ec32:	f000 f803 	bl	800ec3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ec36:	f000 f8d5 	bl	800ede4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ec3a:	e7f1      	b.n	800ec20 <prvTimerTask+0x8>

0800ec3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b084      	sub	sp, #16
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ec46:	f7ff fa39 	bl	800e0bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ec4a:	f107 0308 	add.w	r3, r7, #8
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f000 f866 	bl	800ed20 <prvSampleTimeNow>
 800ec54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d130      	bne.n	800ecbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d10a      	bne.n	800ec78 <prvProcessTimerOrBlockTask+0x3c>
 800ec62:	687a      	ldr	r2, [r7, #4]
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d806      	bhi.n	800ec78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ec6a:	f7ff fa35 	bl	800e0d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ec6e:	68f9      	ldr	r1, [r7, #12]
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f7ff ff85 	bl	800eb80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ec76:	e024      	b.n	800ecc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d008      	beq.n	800ec90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ec7e:	4b13      	ldr	r3, [pc, #76]	; (800eccc <prvProcessTimerOrBlockTask+0x90>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d101      	bne.n	800ec8c <prvProcessTimerOrBlockTask+0x50>
 800ec88:	2301      	movs	r3, #1
 800ec8a:	e000      	b.n	800ec8e <prvProcessTimerOrBlockTask+0x52>
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ec90:	4b0f      	ldr	r3, [pc, #60]	; (800ecd0 <prvProcessTimerOrBlockTask+0x94>)
 800ec92:	6818      	ldr	r0, [r3, #0]
 800ec94:	687a      	ldr	r2, [r7, #4]
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	1ad3      	subs	r3, r2, r3
 800ec9a:	683a      	ldr	r2, [r7, #0]
 800ec9c:	4619      	mov	r1, r3
 800ec9e:	f7fe ff7d 	bl	800db9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800eca2:	f7ff fa19 	bl	800e0d8 <xTaskResumeAll>
 800eca6:	4603      	mov	r3, r0
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d10a      	bne.n	800ecc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ecac:	4b09      	ldr	r3, [pc, #36]	; (800ecd4 <prvProcessTimerOrBlockTask+0x98>)
 800ecae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecb2:	601a      	str	r2, [r3, #0]
 800ecb4:	f3bf 8f4f 	dsb	sy
 800ecb8:	f3bf 8f6f 	isb	sy
}
 800ecbc:	e001      	b.n	800ecc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ecbe:	f7ff fa0b 	bl	800e0d8 <xTaskResumeAll>
}
 800ecc2:	bf00      	nop
 800ecc4:	3710      	adds	r7, #16
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}
 800ecca:	bf00      	nop
 800eccc:	200019d4 	.word	0x200019d4
 800ecd0:	200019d8 	.word	0x200019d8
 800ecd4:	e000ed04 	.word	0xe000ed04

0800ecd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ecd8:	b480      	push	{r7}
 800ecda:	b085      	sub	sp, #20
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ece0:	4b0e      	ldr	r3, [pc, #56]	; (800ed1c <prvGetNextExpireTime+0x44>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d101      	bne.n	800ecee <prvGetNextExpireTime+0x16>
 800ecea:	2201      	movs	r2, #1
 800ecec:	e000      	b.n	800ecf0 <prvGetNextExpireTime+0x18>
 800ecee:	2200      	movs	r2, #0
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d105      	bne.n	800ed08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ecfc:	4b07      	ldr	r3, [pc, #28]	; (800ed1c <prvGetNextExpireTime+0x44>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	68db      	ldr	r3, [r3, #12]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	60fb      	str	r3, [r7, #12]
 800ed06:	e001      	b.n	800ed0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
}
 800ed0e:	4618      	mov	r0, r3
 800ed10:	3714      	adds	r7, #20
 800ed12:	46bd      	mov	sp, r7
 800ed14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed18:	4770      	bx	lr
 800ed1a:	bf00      	nop
 800ed1c:	200019d0 	.word	0x200019d0

0800ed20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b084      	sub	sp, #16
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ed28:	f7ff fa74 	bl	800e214 <xTaskGetTickCount>
 800ed2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ed2e:	4b0b      	ldr	r3, [pc, #44]	; (800ed5c <prvSampleTimeNow+0x3c>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	68fa      	ldr	r2, [r7, #12]
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d205      	bcs.n	800ed44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ed38:	f000 f936 	bl	800efa8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2201      	movs	r2, #1
 800ed40:	601a      	str	r2, [r3, #0]
 800ed42:	e002      	b.n	800ed4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2200      	movs	r2, #0
 800ed48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ed4a:	4a04      	ldr	r2, [pc, #16]	; (800ed5c <prvSampleTimeNow+0x3c>)
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ed50:	68fb      	ldr	r3, [r7, #12]
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	3710      	adds	r7, #16
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	200019e0 	.word	0x200019e0

0800ed60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b086      	sub	sp, #24
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	60f8      	str	r0, [r7, #12]
 800ed68:	60b9      	str	r1, [r7, #8]
 800ed6a:	607a      	str	r2, [r7, #4]
 800ed6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	68ba      	ldr	r2, [r7, #8]
 800ed76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	68fa      	ldr	r2, [r7, #12]
 800ed7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ed7e:	68ba      	ldr	r2, [r7, #8]
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d812      	bhi.n	800edac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed86:	687a      	ldr	r2, [r7, #4]
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	1ad2      	subs	r2, r2, r3
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	699b      	ldr	r3, [r3, #24]
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d302      	bcc.n	800ed9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ed94:	2301      	movs	r3, #1
 800ed96:	617b      	str	r3, [r7, #20]
 800ed98:	e01b      	b.n	800edd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ed9a:	4b10      	ldr	r3, [pc, #64]	; (800eddc <prvInsertTimerInActiveList+0x7c>)
 800ed9c:	681a      	ldr	r2, [r3, #0]
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	3304      	adds	r3, #4
 800eda2:	4619      	mov	r1, r3
 800eda4:	4610      	mov	r0, r2
 800eda6:	f7fe f9de 	bl	800d166 <vListInsert>
 800edaa:	e012      	b.n	800edd2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800edac:	687a      	ldr	r2, [r7, #4]
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d206      	bcs.n	800edc2 <prvInsertTimerInActiveList+0x62>
 800edb4:	68ba      	ldr	r2, [r7, #8]
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	429a      	cmp	r2, r3
 800edba:	d302      	bcc.n	800edc2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800edbc:	2301      	movs	r3, #1
 800edbe:	617b      	str	r3, [r7, #20]
 800edc0:	e007      	b.n	800edd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800edc2:	4b07      	ldr	r3, [pc, #28]	; (800ede0 <prvInsertTimerInActiveList+0x80>)
 800edc4:	681a      	ldr	r2, [r3, #0]
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	3304      	adds	r3, #4
 800edca:	4619      	mov	r1, r3
 800edcc:	4610      	mov	r0, r2
 800edce:	f7fe f9ca 	bl	800d166 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800edd2:	697b      	ldr	r3, [r7, #20]
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	3718      	adds	r7, #24
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}
 800eddc:	200019d4 	.word	0x200019d4
 800ede0:	200019d0 	.word	0x200019d0

0800ede4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b08e      	sub	sp, #56	; 0x38
 800ede8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800edea:	e0ca      	b.n	800ef82 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	da18      	bge.n	800ee24 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800edf2:	1d3b      	adds	r3, r7, #4
 800edf4:	3304      	adds	r3, #4
 800edf6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800edf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d10a      	bne.n	800ee14 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800edfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee02:	f383 8811 	msr	BASEPRI, r3
 800ee06:	f3bf 8f6f 	isb	sy
 800ee0a:	f3bf 8f4f 	dsb	sy
 800ee0e:	61fb      	str	r3, [r7, #28]
}
 800ee10:	bf00      	nop
 800ee12:	e7fe      	b.n	800ee12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ee14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee1a:	6850      	ldr	r0, [r2, #4]
 800ee1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee1e:	6892      	ldr	r2, [r2, #8]
 800ee20:	4611      	mov	r1, r2
 800ee22:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	f2c0 80aa 	blt.w	800ef80 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ee30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee32:	695b      	ldr	r3, [r3, #20]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d004      	beq.n	800ee42 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee3a:	3304      	adds	r3, #4
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f7fe f9cb 	bl	800d1d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ee42:	463b      	mov	r3, r7
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7ff ff6b 	bl	800ed20 <prvSampleTimeNow>
 800ee4a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2b09      	cmp	r3, #9
 800ee50:	f200 8097 	bhi.w	800ef82 <prvProcessReceivedCommands+0x19e>
 800ee54:	a201      	add	r2, pc, #4	; (adr r2, 800ee5c <prvProcessReceivedCommands+0x78>)
 800ee56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee5a:	bf00      	nop
 800ee5c:	0800ee85 	.word	0x0800ee85
 800ee60:	0800ee85 	.word	0x0800ee85
 800ee64:	0800ee85 	.word	0x0800ee85
 800ee68:	0800eef9 	.word	0x0800eef9
 800ee6c:	0800ef0d 	.word	0x0800ef0d
 800ee70:	0800ef57 	.word	0x0800ef57
 800ee74:	0800ee85 	.word	0x0800ee85
 800ee78:	0800ee85 	.word	0x0800ee85
 800ee7c:	0800eef9 	.word	0x0800eef9
 800ee80:	0800ef0d 	.word	0x0800ef0d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ee84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee8a:	f043 0301 	orr.w	r3, r3, #1
 800ee8e:	b2da      	uxtb	r2, r3
 800ee90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ee96:	68ba      	ldr	r2, [r7, #8]
 800ee98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee9a:	699b      	ldr	r3, [r3, #24]
 800ee9c:	18d1      	adds	r1, r2, r3
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eea4:	f7ff ff5c 	bl	800ed60 <prvInsertTimerInActiveList>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d069      	beq.n	800ef82 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eeae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb0:	6a1b      	ldr	r3, [r3, #32]
 800eeb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eeb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eeb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eebc:	f003 0304 	and.w	r3, r3, #4
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d05e      	beq.n	800ef82 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800eec4:	68ba      	ldr	r2, [r7, #8]
 800eec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec8:	699b      	ldr	r3, [r3, #24]
 800eeca:	441a      	add	r2, r3
 800eecc:	2300      	movs	r3, #0
 800eece:	9300      	str	r3, [sp, #0]
 800eed0:	2300      	movs	r3, #0
 800eed2:	2100      	movs	r1, #0
 800eed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eed6:	f7ff fe05 	bl	800eae4 <xTimerGenericCommand>
 800eeda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800eedc:	6a3b      	ldr	r3, [r7, #32]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d14f      	bne.n	800ef82 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800eee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee6:	f383 8811 	msr	BASEPRI, r3
 800eeea:	f3bf 8f6f 	isb	sy
 800eeee:	f3bf 8f4f 	dsb	sy
 800eef2:	61bb      	str	r3, [r7, #24]
}
 800eef4:	bf00      	nop
 800eef6:	e7fe      	b.n	800eef6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eefa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eefe:	f023 0301 	bic.w	r3, r3, #1
 800ef02:	b2da      	uxtb	r2, r3
 800ef04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ef0a:	e03a      	b.n	800ef82 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ef0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef12:	f043 0301 	orr.w	r3, r3, #1
 800ef16:	b2da      	uxtb	r2, r3
 800ef18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ef1e:	68ba      	ldr	r2, [r7, #8]
 800ef20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef22:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ef24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef26:	699b      	ldr	r3, [r3, #24]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d10a      	bne.n	800ef42 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ef2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef30:	f383 8811 	msr	BASEPRI, r3
 800ef34:	f3bf 8f6f 	isb	sy
 800ef38:	f3bf 8f4f 	dsb	sy
 800ef3c:	617b      	str	r3, [r7, #20]
}
 800ef3e:	bf00      	nop
 800ef40:	e7fe      	b.n	800ef40 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ef42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef44:	699a      	ldr	r2, [r3, #24]
 800ef46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef48:	18d1      	adds	r1, r2, r3
 800ef4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef50:	f7ff ff06 	bl	800ed60 <prvInsertTimerInActiveList>
					break;
 800ef54:	e015      	b.n	800ef82 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ef56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef5c:	f003 0302 	and.w	r3, r3, #2
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d103      	bne.n	800ef6c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ef64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef66:	f000 fbdb 	bl	800f720 <vPortFree>
 800ef6a:	e00a      	b.n	800ef82 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ef6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef72:	f023 0301 	bic.w	r3, r3, #1
 800ef76:	b2da      	uxtb	r2, r3
 800ef78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ef7e:	e000      	b.n	800ef82 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ef80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ef82:	4b08      	ldr	r3, [pc, #32]	; (800efa4 <prvProcessReceivedCommands+0x1c0>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	1d39      	adds	r1, r7, #4
 800ef88:	2200      	movs	r2, #0
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f7fe fbec 	bl	800d768 <xQueueReceive>
 800ef90:	4603      	mov	r3, r0
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	f47f af2a 	bne.w	800edec <prvProcessReceivedCommands+0x8>
	}
}
 800ef98:	bf00      	nop
 800ef9a:	bf00      	nop
 800ef9c:	3730      	adds	r7, #48	; 0x30
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
 800efa2:	bf00      	nop
 800efa4:	200019d8 	.word	0x200019d8

0800efa8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b088      	sub	sp, #32
 800efac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800efae:	e048      	b.n	800f042 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800efb0:	4b2d      	ldr	r3, [pc, #180]	; (800f068 <prvSwitchTimerLists+0xc0>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	68db      	ldr	r3, [r3, #12]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efba:	4b2b      	ldr	r3, [pc, #172]	; (800f068 <prvSwitchTimerLists+0xc0>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	68db      	ldr	r3, [r3, #12]
 800efc0:	68db      	ldr	r3, [r3, #12]
 800efc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	3304      	adds	r3, #4
 800efc8:	4618      	mov	r0, r3
 800efca:	f7fe f905 	bl	800d1d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	6a1b      	ldr	r3, [r3, #32]
 800efd2:	68f8      	ldr	r0, [r7, #12]
 800efd4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800efdc:	f003 0304 	and.w	r3, r3, #4
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d02e      	beq.n	800f042 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	699b      	ldr	r3, [r3, #24]
 800efe8:	693a      	ldr	r2, [r7, #16]
 800efea:	4413      	add	r3, r2
 800efec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800efee:	68ba      	ldr	r2, [r7, #8]
 800eff0:	693b      	ldr	r3, [r7, #16]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d90e      	bls.n	800f014 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	68ba      	ldr	r2, [r7, #8]
 800effa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	68fa      	ldr	r2, [r7, #12]
 800f000:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f002:	4b19      	ldr	r3, [pc, #100]	; (800f068 <prvSwitchTimerLists+0xc0>)
 800f004:	681a      	ldr	r2, [r3, #0]
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	3304      	adds	r3, #4
 800f00a:	4619      	mov	r1, r3
 800f00c:	4610      	mov	r0, r2
 800f00e:	f7fe f8aa 	bl	800d166 <vListInsert>
 800f012:	e016      	b.n	800f042 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f014:	2300      	movs	r3, #0
 800f016:	9300      	str	r3, [sp, #0]
 800f018:	2300      	movs	r3, #0
 800f01a:	693a      	ldr	r2, [r7, #16]
 800f01c:	2100      	movs	r1, #0
 800f01e:	68f8      	ldr	r0, [r7, #12]
 800f020:	f7ff fd60 	bl	800eae4 <xTimerGenericCommand>
 800f024:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d10a      	bne.n	800f042 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f030:	f383 8811 	msr	BASEPRI, r3
 800f034:	f3bf 8f6f 	isb	sy
 800f038:	f3bf 8f4f 	dsb	sy
 800f03c:	603b      	str	r3, [r7, #0]
}
 800f03e:	bf00      	nop
 800f040:	e7fe      	b.n	800f040 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f042:	4b09      	ldr	r3, [pc, #36]	; (800f068 <prvSwitchTimerLists+0xc0>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d1b1      	bne.n	800efb0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f04c:	4b06      	ldr	r3, [pc, #24]	; (800f068 <prvSwitchTimerLists+0xc0>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f052:	4b06      	ldr	r3, [pc, #24]	; (800f06c <prvSwitchTimerLists+0xc4>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	4a04      	ldr	r2, [pc, #16]	; (800f068 <prvSwitchTimerLists+0xc0>)
 800f058:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f05a:	4a04      	ldr	r2, [pc, #16]	; (800f06c <prvSwitchTimerLists+0xc4>)
 800f05c:	697b      	ldr	r3, [r7, #20]
 800f05e:	6013      	str	r3, [r2, #0]
}
 800f060:	bf00      	nop
 800f062:	3718      	adds	r7, #24
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}
 800f068:	200019d0 	.word	0x200019d0
 800f06c:	200019d4 	.word	0x200019d4

0800f070 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b082      	sub	sp, #8
 800f074:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f076:	f000 f965 	bl	800f344 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f07a:	4b15      	ldr	r3, [pc, #84]	; (800f0d0 <prvCheckForValidListAndQueue+0x60>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d120      	bne.n	800f0c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f082:	4814      	ldr	r0, [pc, #80]	; (800f0d4 <prvCheckForValidListAndQueue+0x64>)
 800f084:	f7fe f81e 	bl	800d0c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f088:	4813      	ldr	r0, [pc, #76]	; (800f0d8 <prvCheckForValidListAndQueue+0x68>)
 800f08a:	f7fe f81b 	bl	800d0c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f08e:	4b13      	ldr	r3, [pc, #76]	; (800f0dc <prvCheckForValidListAndQueue+0x6c>)
 800f090:	4a10      	ldr	r2, [pc, #64]	; (800f0d4 <prvCheckForValidListAndQueue+0x64>)
 800f092:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f094:	4b12      	ldr	r3, [pc, #72]	; (800f0e0 <prvCheckForValidListAndQueue+0x70>)
 800f096:	4a10      	ldr	r2, [pc, #64]	; (800f0d8 <prvCheckForValidListAndQueue+0x68>)
 800f098:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f09a:	2300      	movs	r3, #0
 800f09c:	9300      	str	r3, [sp, #0]
 800f09e:	4b11      	ldr	r3, [pc, #68]	; (800f0e4 <prvCheckForValidListAndQueue+0x74>)
 800f0a0:	4a11      	ldr	r2, [pc, #68]	; (800f0e8 <prvCheckForValidListAndQueue+0x78>)
 800f0a2:	2110      	movs	r1, #16
 800f0a4:	200a      	movs	r0, #10
 800f0a6:	f7fe f929 	bl	800d2fc <xQueueGenericCreateStatic>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	4a08      	ldr	r2, [pc, #32]	; (800f0d0 <prvCheckForValidListAndQueue+0x60>)
 800f0ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f0b0:	4b07      	ldr	r3, [pc, #28]	; (800f0d0 <prvCheckForValidListAndQueue+0x60>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d005      	beq.n	800f0c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f0b8:	4b05      	ldr	r3, [pc, #20]	; (800f0d0 <prvCheckForValidListAndQueue+0x60>)
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	490b      	ldr	r1, [pc, #44]	; (800f0ec <prvCheckForValidListAndQueue+0x7c>)
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f7fe fd42 	bl	800db48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f0c4:	f000 f96e 	bl	800f3a4 <vPortExitCritical>
}
 800f0c8:	bf00      	nop
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}
 800f0ce:	bf00      	nop
 800f0d0:	200019d8 	.word	0x200019d8
 800f0d4:	200019a8 	.word	0x200019a8
 800f0d8:	200019bc 	.word	0x200019bc
 800f0dc:	200019d0 	.word	0x200019d0
 800f0e0:	200019d4 	.word	0x200019d4
 800f0e4:	20001a84 	.word	0x20001a84
 800f0e8:	200019e4 	.word	0x200019e4
 800f0ec:	08012f80 	.word	0x08012f80

0800f0f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f0f0:	b480      	push	{r7}
 800f0f2:	b085      	sub	sp, #20
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	60f8      	str	r0, [r7, #12]
 800f0f8:	60b9      	str	r1, [r7, #8]
 800f0fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	3b04      	subs	r3, #4
 800f100:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f108:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	3b04      	subs	r3, #4
 800f10e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f110:	68bb      	ldr	r3, [r7, #8]
 800f112:	f023 0201 	bic.w	r2, r3, #1
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	3b04      	subs	r3, #4
 800f11e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f120:	4a0c      	ldr	r2, [pc, #48]	; (800f154 <pxPortInitialiseStack+0x64>)
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	3b14      	subs	r3, #20
 800f12a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f12c:	687a      	ldr	r2, [r7, #4]
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	3b04      	subs	r3, #4
 800f136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	f06f 0202 	mvn.w	r2, #2
 800f13e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	3b20      	subs	r3, #32
 800f144:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f146:	68fb      	ldr	r3, [r7, #12]
}
 800f148:	4618      	mov	r0, r3
 800f14a:	3714      	adds	r7, #20
 800f14c:	46bd      	mov	sp, r7
 800f14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f152:	4770      	bx	lr
 800f154:	0800f159 	.word	0x0800f159

0800f158 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f158:	b480      	push	{r7}
 800f15a:	b085      	sub	sp, #20
 800f15c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f15e:	2300      	movs	r3, #0
 800f160:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f162:	4b12      	ldr	r3, [pc, #72]	; (800f1ac <prvTaskExitError+0x54>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f16a:	d00a      	beq.n	800f182 <prvTaskExitError+0x2a>
	__asm volatile
 800f16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f170:	f383 8811 	msr	BASEPRI, r3
 800f174:	f3bf 8f6f 	isb	sy
 800f178:	f3bf 8f4f 	dsb	sy
 800f17c:	60fb      	str	r3, [r7, #12]
}
 800f17e:	bf00      	nop
 800f180:	e7fe      	b.n	800f180 <prvTaskExitError+0x28>
	__asm volatile
 800f182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f186:	f383 8811 	msr	BASEPRI, r3
 800f18a:	f3bf 8f6f 	isb	sy
 800f18e:	f3bf 8f4f 	dsb	sy
 800f192:	60bb      	str	r3, [r7, #8]
}
 800f194:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f196:	bf00      	nop
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d0fc      	beq.n	800f198 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f19e:	bf00      	nop
 800f1a0:	bf00      	nop
 800f1a2:	3714      	adds	r7, #20
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1aa:	4770      	bx	lr
 800f1ac:	20000014 	.word	0x20000014

0800f1b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f1b0:	4b07      	ldr	r3, [pc, #28]	; (800f1d0 <pxCurrentTCBConst2>)
 800f1b2:	6819      	ldr	r1, [r3, #0]
 800f1b4:	6808      	ldr	r0, [r1, #0]
 800f1b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1ba:	f380 8809 	msr	PSP, r0
 800f1be:	f3bf 8f6f 	isb	sy
 800f1c2:	f04f 0000 	mov.w	r0, #0
 800f1c6:	f380 8811 	msr	BASEPRI, r0
 800f1ca:	4770      	bx	lr
 800f1cc:	f3af 8000 	nop.w

0800f1d0 <pxCurrentTCBConst2>:
 800f1d0:	200014a8 	.word	0x200014a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f1d4:	bf00      	nop
 800f1d6:	bf00      	nop

0800f1d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f1d8:	4808      	ldr	r0, [pc, #32]	; (800f1fc <prvPortStartFirstTask+0x24>)
 800f1da:	6800      	ldr	r0, [r0, #0]
 800f1dc:	6800      	ldr	r0, [r0, #0]
 800f1de:	f380 8808 	msr	MSP, r0
 800f1e2:	f04f 0000 	mov.w	r0, #0
 800f1e6:	f380 8814 	msr	CONTROL, r0
 800f1ea:	b662      	cpsie	i
 800f1ec:	b661      	cpsie	f
 800f1ee:	f3bf 8f4f 	dsb	sy
 800f1f2:	f3bf 8f6f 	isb	sy
 800f1f6:	df00      	svc	0
 800f1f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f1fa:	bf00      	nop
 800f1fc:	e000ed08 	.word	0xe000ed08

0800f200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b086      	sub	sp, #24
 800f204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f206:	4b46      	ldr	r3, [pc, #280]	; (800f320 <xPortStartScheduler+0x120>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	4a46      	ldr	r2, [pc, #280]	; (800f324 <xPortStartScheduler+0x124>)
 800f20c:	4293      	cmp	r3, r2
 800f20e:	d10a      	bne.n	800f226 <xPortStartScheduler+0x26>
	__asm volatile
 800f210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f214:	f383 8811 	msr	BASEPRI, r3
 800f218:	f3bf 8f6f 	isb	sy
 800f21c:	f3bf 8f4f 	dsb	sy
 800f220:	613b      	str	r3, [r7, #16]
}
 800f222:	bf00      	nop
 800f224:	e7fe      	b.n	800f224 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f226:	4b3e      	ldr	r3, [pc, #248]	; (800f320 <xPortStartScheduler+0x120>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	4a3f      	ldr	r2, [pc, #252]	; (800f328 <xPortStartScheduler+0x128>)
 800f22c:	4293      	cmp	r3, r2
 800f22e:	d10a      	bne.n	800f246 <xPortStartScheduler+0x46>
	__asm volatile
 800f230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f234:	f383 8811 	msr	BASEPRI, r3
 800f238:	f3bf 8f6f 	isb	sy
 800f23c:	f3bf 8f4f 	dsb	sy
 800f240:	60fb      	str	r3, [r7, #12]
}
 800f242:	bf00      	nop
 800f244:	e7fe      	b.n	800f244 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f246:	4b39      	ldr	r3, [pc, #228]	; (800f32c <xPortStartScheduler+0x12c>)
 800f248:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	781b      	ldrb	r3, [r3, #0]
 800f24e:	b2db      	uxtb	r3, r3
 800f250:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	22ff      	movs	r2, #255	; 0xff
 800f256:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	781b      	ldrb	r3, [r3, #0]
 800f25c:	b2db      	uxtb	r3, r3
 800f25e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f260:	78fb      	ldrb	r3, [r7, #3]
 800f262:	b2db      	uxtb	r3, r3
 800f264:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f268:	b2da      	uxtb	r2, r3
 800f26a:	4b31      	ldr	r3, [pc, #196]	; (800f330 <xPortStartScheduler+0x130>)
 800f26c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f26e:	4b31      	ldr	r3, [pc, #196]	; (800f334 <xPortStartScheduler+0x134>)
 800f270:	2207      	movs	r2, #7
 800f272:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f274:	e009      	b.n	800f28a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f276:	4b2f      	ldr	r3, [pc, #188]	; (800f334 <xPortStartScheduler+0x134>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	3b01      	subs	r3, #1
 800f27c:	4a2d      	ldr	r2, [pc, #180]	; (800f334 <xPortStartScheduler+0x134>)
 800f27e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f280:	78fb      	ldrb	r3, [r7, #3]
 800f282:	b2db      	uxtb	r3, r3
 800f284:	005b      	lsls	r3, r3, #1
 800f286:	b2db      	uxtb	r3, r3
 800f288:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f28a:	78fb      	ldrb	r3, [r7, #3]
 800f28c:	b2db      	uxtb	r3, r3
 800f28e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f292:	2b80      	cmp	r3, #128	; 0x80
 800f294:	d0ef      	beq.n	800f276 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f296:	4b27      	ldr	r3, [pc, #156]	; (800f334 <xPortStartScheduler+0x134>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	f1c3 0307 	rsb	r3, r3, #7
 800f29e:	2b04      	cmp	r3, #4
 800f2a0:	d00a      	beq.n	800f2b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800f2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2a6:	f383 8811 	msr	BASEPRI, r3
 800f2aa:	f3bf 8f6f 	isb	sy
 800f2ae:	f3bf 8f4f 	dsb	sy
 800f2b2:	60bb      	str	r3, [r7, #8]
}
 800f2b4:	bf00      	nop
 800f2b6:	e7fe      	b.n	800f2b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f2b8:	4b1e      	ldr	r3, [pc, #120]	; (800f334 <xPortStartScheduler+0x134>)
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	021b      	lsls	r3, r3, #8
 800f2be:	4a1d      	ldr	r2, [pc, #116]	; (800f334 <xPortStartScheduler+0x134>)
 800f2c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f2c2:	4b1c      	ldr	r3, [pc, #112]	; (800f334 <xPortStartScheduler+0x134>)
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f2ca:	4a1a      	ldr	r2, [pc, #104]	; (800f334 <xPortStartScheduler+0x134>)
 800f2cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	b2da      	uxtb	r2, r3
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f2d6:	4b18      	ldr	r3, [pc, #96]	; (800f338 <xPortStartScheduler+0x138>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	4a17      	ldr	r2, [pc, #92]	; (800f338 <xPortStartScheduler+0x138>)
 800f2dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f2e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f2e2:	4b15      	ldr	r3, [pc, #84]	; (800f338 <xPortStartScheduler+0x138>)
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	4a14      	ldr	r2, [pc, #80]	; (800f338 <xPortStartScheduler+0x138>)
 800f2e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f2ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f2ee:	f000 f8dd 	bl	800f4ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f2f2:	4b12      	ldr	r3, [pc, #72]	; (800f33c <xPortStartScheduler+0x13c>)
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f2f8:	f000 f8fc 	bl	800f4f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f2fc:	4b10      	ldr	r3, [pc, #64]	; (800f340 <xPortStartScheduler+0x140>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	4a0f      	ldr	r2, [pc, #60]	; (800f340 <xPortStartScheduler+0x140>)
 800f302:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f306:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f308:	f7ff ff66 	bl	800f1d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f30c:	f7ff f84c 	bl	800e3a8 <vTaskSwitchContext>
	prvTaskExitError();
 800f310:	f7ff ff22 	bl	800f158 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f314:	2300      	movs	r3, #0
}
 800f316:	4618      	mov	r0, r3
 800f318:	3718      	adds	r7, #24
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd80      	pop	{r7, pc}
 800f31e:	bf00      	nop
 800f320:	e000ed00 	.word	0xe000ed00
 800f324:	410fc271 	.word	0x410fc271
 800f328:	410fc270 	.word	0x410fc270
 800f32c:	e000e400 	.word	0xe000e400
 800f330:	20001ad4 	.word	0x20001ad4
 800f334:	20001ad8 	.word	0x20001ad8
 800f338:	e000ed20 	.word	0xe000ed20
 800f33c:	20000014 	.word	0x20000014
 800f340:	e000ef34 	.word	0xe000ef34

0800f344 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f344:	b480      	push	{r7}
 800f346:	b083      	sub	sp, #12
 800f348:	af00      	add	r7, sp, #0
	__asm volatile
 800f34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f34e:	f383 8811 	msr	BASEPRI, r3
 800f352:	f3bf 8f6f 	isb	sy
 800f356:	f3bf 8f4f 	dsb	sy
 800f35a:	607b      	str	r3, [r7, #4]
}
 800f35c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f35e:	4b0f      	ldr	r3, [pc, #60]	; (800f39c <vPortEnterCritical+0x58>)
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	3301      	adds	r3, #1
 800f364:	4a0d      	ldr	r2, [pc, #52]	; (800f39c <vPortEnterCritical+0x58>)
 800f366:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f368:	4b0c      	ldr	r3, [pc, #48]	; (800f39c <vPortEnterCritical+0x58>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	2b01      	cmp	r3, #1
 800f36e:	d10f      	bne.n	800f390 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f370:	4b0b      	ldr	r3, [pc, #44]	; (800f3a0 <vPortEnterCritical+0x5c>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	b2db      	uxtb	r3, r3
 800f376:	2b00      	cmp	r3, #0
 800f378:	d00a      	beq.n	800f390 <vPortEnterCritical+0x4c>
	__asm volatile
 800f37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f37e:	f383 8811 	msr	BASEPRI, r3
 800f382:	f3bf 8f6f 	isb	sy
 800f386:	f3bf 8f4f 	dsb	sy
 800f38a:	603b      	str	r3, [r7, #0]
}
 800f38c:	bf00      	nop
 800f38e:	e7fe      	b.n	800f38e <vPortEnterCritical+0x4a>
	}
}
 800f390:	bf00      	nop
 800f392:	370c      	adds	r7, #12
 800f394:	46bd      	mov	sp, r7
 800f396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39a:	4770      	bx	lr
 800f39c:	20000014 	.word	0x20000014
 800f3a0:	e000ed04 	.word	0xe000ed04

0800f3a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f3a4:	b480      	push	{r7}
 800f3a6:	b083      	sub	sp, #12
 800f3a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f3aa:	4b12      	ldr	r3, [pc, #72]	; (800f3f4 <vPortExitCritical+0x50>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d10a      	bne.n	800f3c8 <vPortExitCritical+0x24>
	__asm volatile
 800f3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3b6:	f383 8811 	msr	BASEPRI, r3
 800f3ba:	f3bf 8f6f 	isb	sy
 800f3be:	f3bf 8f4f 	dsb	sy
 800f3c2:	607b      	str	r3, [r7, #4]
}
 800f3c4:	bf00      	nop
 800f3c6:	e7fe      	b.n	800f3c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f3c8:	4b0a      	ldr	r3, [pc, #40]	; (800f3f4 <vPortExitCritical+0x50>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	3b01      	subs	r3, #1
 800f3ce:	4a09      	ldr	r2, [pc, #36]	; (800f3f4 <vPortExitCritical+0x50>)
 800f3d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f3d2:	4b08      	ldr	r3, [pc, #32]	; (800f3f4 <vPortExitCritical+0x50>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d105      	bne.n	800f3e6 <vPortExitCritical+0x42>
 800f3da:	2300      	movs	r3, #0
 800f3dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	f383 8811 	msr	BASEPRI, r3
}
 800f3e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f3e6:	bf00      	nop
 800f3e8:	370c      	adds	r7, #12
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f0:	4770      	bx	lr
 800f3f2:	bf00      	nop
 800f3f4:	20000014 	.word	0x20000014
	...

0800f400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f400:	f3ef 8009 	mrs	r0, PSP
 800f404:	f3bf 8f6f 	isb	sy
 800f408:	4b15      	ldr	r3, [pc, #84]	; (800f460 <pxCurrentTCBConst>)
 800f40a:	681a      	ldr	r2, [r3, #0]
 800f40c:	f01e 0f10 	tst.w	lr, #16
 800f410:	bf08      	it	eq
 800f412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f41a:	6010      	str	r0, [r2, #0]
 800f41c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f420:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f424:	f380 8811 	msr	BASEPRI, r0
 800f428:	f3bf 8f4f 	dsb	sy
 800f42c:	f3bf 8f6f 	isb	sy
 800f430:	f7fe ffba 	bl	800e3a8 <vTaskSwitchContext>
 800f434:	f04f 0000 	mov.w	r0, #0
 800f438:	f380 8811 	msr	BASEPRI, r0
 800f43c:	bc09      	pop	{r0, r3}
 800f43e:	6819      	ldr	r1, [r3, #0]
 800f440:	6808      	ldr	r0, [r1, #0]
 800f442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f446:	f01e 0f10 	tst.w	lr, #16
 800f44a:	bf08      	it	eq
 800f44c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f450:	f380 8809 	msr	PSP, r0
 800f454:	f3bf 8f6f 	isb	sy
 800f458:	4770      	bx	lr
 800f45a:	bf00      	nop
 800f45c:	f3af 8000 	nop.w

0800f460 <pxCurrentTCBConst>:
 800f460:	200014a8 	.word	0x200014a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f464:	bf00      	nop
 800f466:	bf00      	nop

0800f468 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b082      	sub	sp, #8
 800f46c:	af00      	add	r7, sp, #0
	__asm volatile
 800f46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f472:	f383 8811 	msr	BASEPRI, r3
 800f476:	f3bf 8f6f 	isb	sy
 800f47a:	f3bf 8f4f 	dsb	sy
 800f47e:	607b      	str	r3, [r7, #4]
}
 800f480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f482:	f7fe fed7 	bl	800e234 <xTaskIncrementTick>
 800f486:	4603      	mov	r3, r0
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d003      	beq.n	800f494 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f48c:	4b06      	ldr	r3, [pc, #24]	; (800f4a8 <xPortSysTickHandler+0x40>)
 800f48e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f492:	601a      	str	r2, [r3, #0]
 800f494:	2300      	movs	r3, #0
 800f496:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	f383 8811 	msr	BASEPRI, r3
}
 800f49e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f4a0:	bf00      	nop
 800f4a2:	3708      	adds	r7, #8
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}
 800f4a8:	e000ed04 	.word	0xe000ed04

0800f4ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f4ac:	b480      	push	{r7}
 800f4ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f4b0:	4b0b      	ldr	r3, [pc, #44]	; (800f4e0 <vPortSetupTimerInterrupt+0x34>)
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f4b6:	4b0b      	ldr	r3, [pc, #44]	; (800f4e4 <vPortSetupTimerInterrupt+0x38>)
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f4bc:	4b0a      	ldr	r3, [pc, #40]	; (800f4e8 <vPortSetupTimerInterrupt+0x3c>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	4a0a      	ldr	r2, [pc, #40]	; (800f4ec <vPortSetupTimerInterrupt+0x40>)
 800f4c2:	fba2 2303 	umull	r2, r3, r2, r3
 800f4c6:	099b      	lsrs	r3, r3, #6
 800f4c8:	4a09      	ldr	r2, [pc, #36]	; (800f4f0 <vPortSetupTimerInterrupt+0x44>)
 800f4ca:	3b01      	subs	r3, #1
 800f4cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f4ce:	4b04      	ldr	r3, [pc, #16]	; (800f4e0 <vPortSetupTimerInterrupt+0x34>)
 800f4d0:	2207      	movs	r2, #7
 800f4d2:	601a      	str	r2, [r3, #0]
}
 800f4d4:	bf00      	nop
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4dc:	4770      	bx	lr
 800f4de:	bf00      	nop
 800f4e0:	e000e010 	.word	0xe000e010
 800f4e4:	e000e018 	.word	0xe000e018
 800f4e8:	20000008 	.word	0x20000008
 800f4ec:	10624dd3 	.word	0x10624dd3
 800f4f0:	e000e014 	.word	0xe000e014

0800f4f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f4f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f504 <vPortEnableVFP+0x10>
 800f4f8:	6801      	ldr	r1, [r0, #0]
 800f4fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f4fe:	6001      	str	r1, [r0, #0]
 800f500:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f502:	bf00      	nop
 800f504:	e000ed88 	.word	0xe000ed88

0800f508 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f508:	b480      	push	{r7}
 800f50a:	b085      	sub	sp, #20
 800f50c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f50e:	f3ef 8305 	mrs	r3, IPSR
 800f512:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	2b0f      	cmp	r3, #15
 800f518:	d914      	bls.n	800f544 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f51a:	4a17      	ldr	r2, [pc, #92]	; (800f578 <vPortValidateInterruptPriority+0x70>)
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	4413      	add	r3, r2
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f524:	4b15      	ldr	r3, [pc, #84]	; (800f57c <vPortValidateInterruptPriority+0x74>)
 800f526:	781b      	ldrb	r3, [r3, #0]
 800f528:	7afa      	ldrb	r2, [r7, #11]
 800f52a:	429a      	cmp	r2, r3
 800f52c:	d20a      	bcs.n	800f544 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f532:	f383 8811 	msr	BASEPRI, r3
 800f536:	f3bf 8f6f 	isb	sy
 800f53a:	f3bf 8f4f 	dsb	sy
 800f53e:	607b      	str	r3, [r7, #4]
}
 800f540:	bf00      	nop
 800f542:	e7fe      	b.n	800f542 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f544:	4b0e      	ldr	r3, [pc, #56]	; (800f580 <vPortValidateInterruptPriority+0x78>)
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f54c:	4b0d      	ldr	r3, [pc, #52]	; (800f584 <vPortValidateInterruptPriority+0x7c>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	429a      	cmp	r2, r3
 800f552:	d90a      	bls.n	800f56a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f558:	f383 8811 	msr	BASEPRI, r3
 800f55c:	f3bf 8f6f 	isb	sy
 800f560:	f3bf 8f4f 	dsb	sy
 800f564:	603b      	str	r3, [r7, #0]
}
 800f566:	bf00      	nop
 800f568:	e7fe      	b.n	800f568 <vPortValidateInterruptPriority+0x60>
	}
 800f56a:	bf00      	nop
 800f56c:	3714      	adds	r7, #20
 800f56e:	46bd      	mov	sp, r7
 800f570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f574:	4770      	bx	lr
 800f576:	bf00      	nop
 800f578:	e000e3f0 	.word	0xe000e3f0
 800f57c:	20001ad4 	.word	0x20001ad4
 800f580:	e000ed0c 	.word	0xe000ed0c
 800f584:	20001ad8 	.word	0x20001ad8

0800f588 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b08a      	sub	sp, #40	; 0x28
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f590:	2300      	movs	r3, #0
 800f592:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f594:	f7fe fd92 	bl	800e0bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f598:	4b5b      	ldr	r3, [pc, #364]	; (800f708 <pvPortMalloc+0x180>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d101      	bne.n	800f5a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f5a0:	f000 f920 	bl	800f7e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f5a4:	4b59      	ldr	r3, [pc, #356]	; (800f70c <pvPortMalloc+0x184>)
 800f5a6:	681a      	ldr	r2, [r3, #0]
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	4013      	ands	r3, r2
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	f040 8093 	bne.w	800f6d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d01d      	beq.n	800f5f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f5b8:	2208      	movs	r2, #8
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	4413      	add	r3, r2
 800f5be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f003 0307 	and.w	r3, r3, #7
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d014      	beq.n	800f5f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f023 0307 	bic.w	r3, r3, #7
 800f5d0:	3308      	adds	r3, #8
 800f5d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f003 0307 	and.w	r3, r3, #7
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d00a      	beq.n	800f5f4 <pvPortMalloc+0x6c>
	__asm volatile
 800f5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5e2:	f383 8811 	msr	BASEPRI, r3
 800f5e6:	f3bf 8f6f 	isb	sy
 800f5ea:	f3bf 8f4f 	dsb	sy
 800f5ee:	617b      	str	r3, [r7, #20]
}
 800f5f0:	bf00      	nop
 800f5f2:	e7fe      	b.n	800f5f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d06e      	beq.n	800f6d8 <pvPortMalloc+0x150>
 800f5fa:	4b45      	ldr	r3, [pc, #276]	; (800f710 <pvPortMalloc+0x188>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	687a      	ldr	r2, [r7, #4]
 800f600:	429a      	cmp	r2, r3
 800f602:	d869      	bhi.n	800f6d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f604:	4b43      	ldr	r3, [pc, #268]	; (800f714 <pvPortMalloc+0x18c>)
 800f606:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f608:	4b42      	ldr	r3, [pc, #264]	; (800f714 <pvPortMalloc+0x18c>)
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f60e:	e004      	b.n	800f61a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f612:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61c:	685b      	ldr	r3, [r3, #4]
 800f61e:	687a      	ldr	r2, [r7, #4]
 800f620:	429a      	cmp	r2, r3
 800f622:	d903      	bls.n	800f62c <pvPortMalloc+0xa4>
 800f624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d1f1      	bne.n	800f610 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f62c:	4b36      	ldr	r3, [pc, #216]	; (800f708 <pvPortMalloc+0x180>)
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f632:	429a      	cmp	r2, r3
 800f634:	d050      	beq.n	800f6d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f636:	6a3b      	ldr	r3, [r7, #32]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	2208      	movs	r2, #8
 800f63c:	4413      	add	r3, r2
 800f63e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f642:	681a      	ldr	r2, [r3, #0]
 800f644:	6a3b      	ldr	r3, [r7, #32]
 800f646:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f64a:	685a      	ldr	r2, [r3, #4]
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	1ad2      	subs	r2, r2, r3
 800f650:	2308      	movs	r3, #8
 800f652:	005b      	lsls	r3, r3, #1
 800f654:	429a      	cmp	r2, r3
 800f656:	d91f      	bls.n	800f698 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	4413      	add	r3, r2
 800f65e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f660:	69bb      	ldr	r3, [r7, #24]
 800f662:	f003 0307 	and.w	r3, r3, #7
 800f666:	2b00      	cmp	r3, #0
 800f668:	d00a      	beq.n	800f680 <pvPortMalloc+0xf8>
	__asm volatile
 800f66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f66e:	f383 8811 	msr	BASEPRI, r3
 800f672:	f3bf 8f6f 	isb	sy
 800f676:	f3bf 8f4f 	dsb	sy
 800f67a:	613b      	str	r3, [r7, #16]
}
 800f67c:	bf00      	nop
 800f67e:	e7fe      	b.n	800f67e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f682:	685a      	ldr	r2, [r3, #4]
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	1ad2      	subs	r2, r2, r3
 800f688:	69bb      	ldr	r3, [r7, #24]
 800f68a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f68e:	687a      	ldr	r2, [r7, #4]
 800f690:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f692:	69b8      	ldr	r0, [r7, #24]
 800f694:	f000 f908 	bl	800f8a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f698:	4b1d      	ldr	r3, [pc, #116]	; (800f710 <pvPortMalloc+0x188>)
 800f69a:	681a      	ldr	r2, [r3, #0]
 800f69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f69e:	685b      	ldr	r3, [r3, #4]
 800f6a0:	1ad3      	subs	r3, r2, r3
 800f6a2:	4a1b      	ldr	r2, [pc, #108]	; (800f710 <pvPortMalloc+0x188>)
 800f6a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f6a6:	4b1a      	ldr	r3, [pc, #104]	; (800f710 <pvPortMalloc+0x188>)
 800f6a8:	681a      	ldr	r2, [r3, #0]
 800f6aa:	4b1b      	ldr	r3, [pc, #108]	; (800f718 <pvPortMalloc+0x190>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	d203      	bcs.n	800f6ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f6b2:	4b17      	ldr	r3, [pc, #92]	; (800f710 <pvPortMalloc+0x188>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	4a18      	ldr	r2, [pc, #96]	; (800f718 <pvPortMalloc+0x190>)
 800f6b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6bc:	685a      	ldr	r2, [r3, #4]
 800f6be:	4b13      	ldr	r3, [pc, #76]	; (800f70c <pvPortMalloc+0x184>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	431a      	orrs	r2, r3
 800f6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f6ce:	4b13      	ldr	r3, [pc, #76]	; (800f71c <pvPortMalloc+0x194>)
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	3301      	adds	r3, #1
 800f6d4:	4a11      	ldr	r2, [pc, #68]	; (800f71c <pvPortMalloc+0x194>)
 800f6d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f6d8:	f7fe fcfe 	bl	800e0d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f6dc:	69fb      	ldr	r3, [r7, #28]
 800f6de:	f003 0307 	and.w	r3, r3, #7
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d00a      	beq.n	800f6fc <pvPortMalloc+0x174>
	__asm volatile
 800f6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ea:	f383 8811 	msr	BASEPRI, r3
 800f6ee:	f3bf 8f6f 	isb	sy
 800f6f2:	f3bf 8f4f 	dsb	sy
 800f6f6:	60fb      	str	r3, [r7, #12]
}
 800f6f8:	bf00      	nop
 800f6fa:	e7fe      	b.n	800f6fa <pvPortMalloc+0x172>
	return pvReturn;
 800f6fc:	69fb      	ldr	r3, [r7, #28]
}
 800f6fe:	4618      	mov	r0, r3
 800f700:	3728      	adds	r7, #40	; 0x28
 800f702:	46bd      	mov	sp, r7
 800f704:	bd80      	pop	{r7, pc}
 800f706:	bf00      	nop
 800f708:	200056e4 	.word	0x200056e4
 800f70c:	200056f8 	.word	0x200056f8
 800f710:	200056e8 	.word	0x200056e8
 800f714:	200056dc 	.word	0x200056dc
 800f718:	200056ec 	.word	0x200056ec
 800f71c:	200056f0 	.word	0x200056f0

0800f720 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b086      	sub	sp, #24
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d04d      	beq.n	800f7ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f732:	2308      	movs	r3, #8
 800f734:	425b      	negs	r3, r3
 800f736:	697a      	ldr	r2, [r7, #20]
 800f738:	4413      	add	r3, r2
 800f73a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f73c:	697b      	ldr	r3, [r7, #20]
 800f73e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f740:	693b      	ldr	r3, [r7, #16]
 800f742:	685a      	ldr	r2, [r3, #4]
 800f744:	4b24      	ldr	r3, [pc, #144]	; (800f7d8 <vPortFree+0xb8>)
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	4013      	ands	r3, r2
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d10a      	bne.n	800f764 <vPortFree+0x44>
	__asm volatile
 800f74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f752:	f383 8811 	msr	BASEPRI, r3
 800f756:	f3bf 8f6f 	isb	sy
 800f75a:	f3bf 8f4f 	dsb	sy
 800f75e:	60fb      	str	r3, [r7, #12]
}
 800f760:	bf00      	nop
 800f762:	e7fe      	b.n	800f762 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f764:	693b      	ldr	r3, [r7, #16]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d00a      	beq.n	800f782 <vPortFree+0x62>
	__asm volatile
 800f76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f770:	f383 8811 	msr	BASEPRI, r3
 800f774:	f3bf 8f6f 	isb	sy
 800f778:	f3bf 8f4f 	dsb	sy
 800f77c:	60bb      	str	r3, [r7, #8]
}
 800f77e:	bf00      	nop
 800f780:	e7fe      	b.n	800f780 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f782:	693b      	ldr	r3, [r7, #16]
 800f784:	685a      	ldr	r2, [r3, #4]
 800f786:	4b14      	ldr	r3, [pc, #80]	; (800f7d8 <vPortFree+0xb8>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	4013      	ands	r3, r2
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d01e      	beq.n	800f7ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f790:	693b      	ldr	r3, [r7, #16]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d11a      	bne.n	800f7ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f798:	693b      	ldr	r3, [r7, #16]
 800f79a:	685a      	ldr	r2, [r3, #4]
 800f79c:	4b0e      	ldr	r3, [pc, #56]	; (800f7d8 <vPortFree+0xb8>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	43db      	mvns	r3, r3
 800f7a2:	401a      	ands	r2, r3
 800f7a4:	693b      	ldr	r3, [r7, #16]
 800f7a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f7a8:	f7fe fc88 	bl	800e0bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f7ac:	693b      	ldr	r3, [r7, #16]
 800f7ae:	685a      	ldr	r2, [r3, #4]
 800f7b0:	4b0a      	ldr	r3, [pc, #40]	; (800f7dc <vPortFree+0xbc>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	4413      	add	r3, r2
 800f7b6:	4a09      	ldr	r2, [pc, #36]	; (800f7dc <vPortFree+0xbc>)
 800f7b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f7ba:	6938      	ldr	r0, [r7, #16]
 800f7bc:	f000 f874 	bl	800f8a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f7c0:	4b07      	ldr	r3, [pc, #28]	; (800f7e0 <vPortFree+0xc0>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	3301      	adds	r3, #1
 800f7c6:	4a06      	ldr	r2, [pc, #24]	; (800f7e0 <vPortFree+0xc0>)
 800f7c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f7ca:	f7fe fc85 	bl	800e0d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f7ce:	bf00      	nop
 800f7d0:	3718      	adds	r7, #24
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}
 800f7d6:	bf00      	nop
 800f7d8:	200056f8 	.word	0x200056f8
 800f7dc:	200056e8 	.word	0x200056e8
 800f7e0:	200056f4 	.word	0x200056f4

0800f7e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f7e4:	b480      	push	{r7}
 800f7e6:	b085      	sub	sp, #20
 800f7e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f7ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f7ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f7f0:	4b27      	ldr	r3, [pc, #156]	; (800f890 <prvHeapInit+0xac>)
 800f7f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	f003 0307 	and.w	r3, r3, #7
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d00c      	beq.n	800f818 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	3307      	adds	r3, #7
 800f802:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	f023 0307 	bic.w	r3, r3, #7
 800f80a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f80c:	68ba      	ldr	r2, [r7, #8]
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	1ad3      	subs	r3, r2, r3
 800f812:	4a1f      	ldr	r2, [pc, #124]	; (800f890 <prvHeapInit+0xac>)
 800f814:	4413      	add	r3, r2
 800f816:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f81c:	4a1d      	ldr	r2, [pc, #116]	; (800f894 <prvHeapInit+0xb0>)
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f822:	4b1c      	ldr	r3, [pc, #112]	; (800f894 <prvHeapInit+0xb0>)
 800f824:	2200      	movs	r2, #0
 800f826:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	68ba      	ldr	r2, [r7, #8]
 800f82c:	4413      	add	r3, r2
 800f82e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f830:	2208      	movs	r2, #8
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	1a9b      	subs	r3, r3, r2
 800f836:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	f023 0307 	bic.w	r3, r3, #7
 800f83e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	4a15      	ldr	r2, [pc, #84]	; (800f898 <prvHeapInit+0xb4>)
 800f844:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f846:	4b14      	ldr	r3, [pc, #80]	; (800f898 <prvHeapInit+0xb4>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	2200      	movs	r2, #0
 800f84c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f84e:	4b12      	ldr	r3, [pc, #72]	; (800f898 <prvHeapInit+0xb4>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	2200      	movs	r2, #0
 800f854:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	68fa      	ldr	r2, [r7, #12]
 800f85e:	1ad2      	subs	r2, r2, r3
 800f860:	683b      	ldr	r3, [r7, #0]
 800f862:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f864:	4b0c      	ldr	r3, [pc, #48]	; (800f898 <prvHeapInit+0xb4>)
 800f866:	681a      	ldr	r2, [r3, #0]
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	685b      	ldr	r3, [r3, #4]
 800f870:	4a0a      	ldr	r2, [pc, #40]	; (800f89c <prvHeapInit+0xb8>)
 800f872:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f874:	683b      	ldr	r3, [r7, #0]
 800f876:	685b      	ldr	r3, [r3, #4]
 800f878:	4a09      	ldr	r2, [pc, #36]	; (800f8a0 <prvHeapInit+0xbc>)
 800f87a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f87c:	4b09      	ldr	r3, [pc, #36]	; (800f8a4 <prvHeapInit+0xc0>)
 800f87e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f882:	601a      	str	r2, [r3, #0]
}
 800f884:	bf00      	nop
 800f886:	3714      	adds	r7, #20
 800f888:	46bd      	mov	sp, r7
 800f88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88e:	4770      	bx	lr
 800f890:	20001adc 	.word	0x20001adc
 800f894:	200056dc 	.word	0x200056dc
 800f898:	200056e4 	.word	0x200056e4
 800f89c:	200056ec 	.word	0x200056ec
 800f8a0:	200056e8 	.word	0x200056e8
 800f8a4:	200056f8 	.word	0x200056f8

0800f8a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f8a8:	b480      	push	{r7}
 800f8aa:	b085      	sub	sp, #20
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f8b0:	4b28      	ldr	r3, [pc, #160]	; (800f954 <prvInsertBlockIntoFreeList+0xac>)
 800f8b2:	60fb      	str	r3, [r7, #12]
 800f8b4:	e002      	b.n	800f8bc <prvInsertBlockIntoFreeList+0x14>
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	60fb      	str	r3, [r7, #12]
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	687a      	ldr	r2, [r7, #4]
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	d8f7      	bhi.n	800f8b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	685b      	ldr	r3, [r3, #4]
 800f8ce:	68ba      	ldr	r2, [r7, #8]
 800f8d0:	4413      	add	r3, r2
 800f8d2:	687a      	ldr	r2, [r7, #4]
 800f8d4:	429a      	cmp	r2, r3
 800f8d6:	d108      	bne.n	800f8ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	685a      	ldr	r2, [r3, #4]
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	685b      	ldr	r3, [r3, #4]
 800f8e0:	441a      	add	r2, r3
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	685b      	ldr	r3, [r3, #4]
 800f8f2:	68ba      	ldr	r2, [r7, #8]
 800f8f4:	441a      	add	r2, r3
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d118      	bne.n	800f930 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	681a      	ldr	r2, [r3, #0]
 800f902:	4b15      	ldr	r3, [pc, #84]	; (800f958 <prvInsertBlockIntoFreeList+0xb0>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	429a      	cmp	r2, r3
 800f908:	d00d      	beq.n	800f926 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	685a      	ldr	r2, [r3, #4]
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	685b      	ldr	r3, [r3, #4]
 800f914:	441a      	add	r2, r3
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	681a      	ldr	r2, [r3, #0]
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	601a      	str	r2, [r3, #0]
 800f924:	e008      	b.n	800f938 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f926:	4b0c      	ldr	r3, [pc, #48]	; (800f958 <prvInsertBlockIntoFreeList+0xb0>)
 800f928:	681a      	ldr	r2, [r3, #0]
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	601a      	str	r2, [r3, #0]
 800f92e:	e003      	b.n	800f938 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	681a      	ldr	r2, [r3, #0]
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f938:	68fa      	ldr	r2, [r7, #12]
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	429a      	cmp	r2, r3
 800f93e:	d002      	beq.n	800f946 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	687a      	ldr	r2, [r7, #4]
 800f944:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f946:	bf00      	nop
 800f948:	3714      	adds	r7, #20
 800f94a:	46bd      	mov	sp, r7
 800f94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f950:	4770      	bx	lr
 800f952:	bf00      	nop
 800f954:	200056dc 	.word	0x200056dc
 800f958:	200056e4 	.word	0x200056e4

0800f95c <__errno>:
 800f95c:	4b01      	ldr	r3, [pc, #4]	; (800f964 <__errno+0x8>)
 800f95e:	6818      	ldr	r0, [r3, #0]
 800f960:	4770      	bx	lr
 800f962:	bf00      	nop
 800f964:	20000018 	.word	0x20000018

0800f968 <std>:
 800f968:	2300      	movs	r3, #0
 800f96a:	b510      	push	{r4, lr}
 800f96c:	4604      	mov	r4, r0
 800f96e:	e9c0 3300 	strd	r3, r3, [r0]
 800f972:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f976:	6083      	str	r3, [r0, #8]
 800f978:	8181      	strh	r1, [r0, #12]
 800f97a:	6643      	str	r3, [r0, #100]	; 0x64
 800f97c:	81c2      	strh	r2, [r0, #14]
 800f97e:	6183      	str	r3, [r0, #24]
 800f980:	4619      	mov	r1, r3
 800f982:	2208      	movs	r2, #8
 800f984:	305c      	adds	r0, #92	; 0x5c
 800f986:	f000 f91a 	bl	800fbbe <memset>
 800f98a:	4b05      	ldr	r3, [pc, #20]	; (800f9a0 <std+0x38>)
 800f98c:	6263      	str	r3, [r4, #36]	; 0x24
 800f98e:	4b05      	ldr	r3, [pc, #20]	; (800f9a4 <std+0x3c>)
 800f990:	62a3      	str	r3, [r4, #40]	; 0x28
 800f992:	4b05      	ldr	r3, [pc, #20]	; (800f9a8 <std+0x40>)
 800f994:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f996:	4b05      	ldr	r3, [pc, #20]	; (800f9ac <std+0x44>)
 800f998:	6224      	str	r4, [r4, #32]
 800f99a:	6323      	str	r3, [r4, #48]	; 0x30
 800f99c:	bd10      	pop	{r4, pc}
 800f99e:	bf00      	nop
 800f9a0:	080107dd 	.word	0x080107dd
 800f9a4:	080107ff 	.word	0x080107ff
 800f9a8:	08010837 	.word	0x08010837
 800f9ac:	0801085b 	.word	0x0801085b

0800f9b0 <_cleanup_r>:
 800f9b0:	4901      	ldr	r1, [pc, #4]	; (800f9b8 <_cleanup_r+0x8>)
 800f9b2:	f000 b8af 	b.w	800fb14 <_fwalk_reent>
 800f9b6:	bf00      	nop
 800f9b8:	08011829 	.word	0x08011829

0800f9bc <__sfmoreglue>:
 800f9bc:	b570      	push	{r4, r5, r6, lr}
 800f9be:	2268      	movs	r2, #104	; 0x68
 800f9c0:	1e4d      	subs	r5, r1, #1
 800f9c2:	4355      	muls	r5, r2
 800f9c4:	460e      	mov	r6, r1
 800f9c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f9ca:	f000 f921 	bl	800fc10 <_malloc_r>
 800f9ce:	4604      	mov	r4, r0
 800f9d0:	b140      	cbz	r0, 800f9e4 <__sfmoreglue+0x28>
 800f9d2:	2100      	movs	r1, #0
 800f9d4:	e9c0 1600 	strd	r1, r6, [r0]
 800f9d8:	300c      	adds	r0, #12
 800f9da:	60a0      	str	r0, [r4, #8]
 800f9dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f9e0:	f000 f8ed 	bl	800fbbe <memset>
 800f9e4:	4620      	mov	r0, r4
 800f9e6:	bd70      	pop	{r4, r5, r6, pc}

0800f9e8 <__sfp_lock_acquire>:
 800f9e8:	4801      	ldr	r0, [pc, #4]	; (800f9f0 <__sfp_lock_acquire+0x8>)
 800f9ea:	f000 b8d8 	b.w	800fb9e <__retarget_lock_acquire_recursive>
 800f9ee:	bf00      	nop
 800f9f0:	200056fd 	.word	0x200056fd

0800f9f4 <__sfp_lock_release>:
 800f9f4:	4801      	ldr	r0, [pc, #4]	; (800f9fc <__sfp_lock_release+0x8>)
 800f9f6:	f000 b8d3 	b.w	800fba0 <__retarget_lock_release_recursive>
 800f9fa:	bf00      	nop
 800f9fc:	200056fd 	.word	0x200056fd

0800fa00 <__sinit_lock_acquire>:
 800fa00:	4801      	ldr	r0, [pc, #4]	; (800fa08 <__sinit_lock_acquire+0x8>)
 800fa02:	f000 b8cc 	b.w	800fb9e <__retarget_lock_acquire_recursive>
 800fa06:	bf00      	nop
 800fa08:	200056fe 	.word	0x200056fe

0800fa0c <__sinit_lock_release>:
 800fa0c:	4801      	ldr	r0, [pc, #4]	; (800fa14 <__sinit_lock_release+0x8>)
 800fa0e:	f000 b8c7 	b.w	800fba0 <__retarget_lock_release_recursive>
 800fa12:	bf00      	nop
 800fa14:	200056fe 	.word	0x200056fe

0800fa18 <__sinit>:
 800fa18:	b510      	push	{r4, lr}
 800fa1a:	4604      	mov	r4, r0
 800fa1c:	f7ff fff0 	bl	800fa00 <__sinit_lock_acquire>
 800fa20:	69a3      	ldr	r3, [r4, #24]
 800fa22:	b11b      	cbz	r3, 800fa2c <__sinit+0x14>
 800fa24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa28:	f7ff bff0 	b.w	800fa0c <__sinit_lock_release>
 800fa2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fa30:	6523      	str	r3, [r4, #80]	; 0x50
 800fa32:	4b13      	ldr	r3, [pc, #76]	; (800fa80 <__sinit+0x68>)
 800fa34:	4a13      	ldr	r2, [pc, #76]	; (800fa84 <__sinit+0x6c>)
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	62a2      	str	r2, [r4, #40]	; 0x28
 800fa3a:	42a3      	cmp	r3, r4
 800fa3c:	bf04      	itt	eq
 800fa3e:	2301      	moveq	r3, #1
 800fa40:	61a3      	streq	r3, [r4, #24]
 800fa42:	4620      	mov	r0, r4
 800fa44:	f000 f820 	bl	800fa88 <__sfp>
 800fa48:	6060      	str	r0, [r4, #4]
 800fa4a:	4620      	mov	r0, r4
 800fa4c:	f000 f81c 	bl	800fa88 <__sfp>
 800fa50:	60a0      	str	r0, [r4, #8]
 800fa52:	4620      	mov	r0, r4
 800fa54:	f000 f818 	bl	800fa88 <__sfp>
 800fa58:	2200      	movs	r2, #0
 800fa5a:	60e0      	str	r0, [r4, #12]
 800fa5c:	2104      	movs	r1, #4
 800fa5e:	6860      	ldr	r0, [r4, #4]
 800fa60:	f7ff ff82 	bl	800f968 <std>
 800fa64:	68a0      	ldr	r0, [r4, #8]
 800fa66:	2201      	movs	r2, #1
 800fa68:	2109      	movs	r1, #9
 800fa6a:	f7ff ff7d 	bl	800f968 <std>
 800fa6e:	68e0      	ldr	r0, [r4, #12]
 800fa70:	2202      	movs	r2, #2
 800fa72:	2112      	movs	r1, #18
 800fa74:	f7ff ff78 	bl	800f968 <std>
 800fa78:	2301      	movs	r3, #1
 800fa7a:	61a3      	str	r3, [r4, #24]
 800fa7c:	e7d2      	b.n	800fa24 <__sinit+0xc>
 800fa7e:	bf00      	nop
 800fa80:	08013098 	.word	0x08013098
 800fa84:	0800f9b1 	.word	0x0800f9b1

0800fa88 <__sfp>:
 800fa88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa8a:	4607      	mov	r7, r0
 800fa8c:	f7ff ffac 	bl	800f9e8 <__sfp_lock_acquire>
 800fa90:	4b1e      	ldr	r3, [pc, #120]	; (800fb0c <__sfp+0x84>)
 800fa92:	681e      	ldr	r6, [r3, #0]
 800fa94:	69b3      	ldr	r3, [r6, #24]
 800fa96:	b913      	cbnz	r3, 800fa9e <__sfp+0x16>
 800fa98:	4630      	mov	r0, r6
 800fa9a:	f7ff ffbd 	bl	800fa18 <__sinit>
 800fa9e:	3648      	adds	r6, #72	; 0x48
 800faa0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800faa4:	3b01      	subs	r3, #1
 800faa6:	d503      	bpl.n	800fab0 <__sfp+0x28>
 800faa8:	6833      	ldr	r3, [r6, #0]
 800faaa:	b30b      	cbz	r3, 800faf0 <__sfp+0x68>
 800faac:	6836      	ldr	r6, [r6, #0]
 800faae:	e7f7      	b.n	800faa0 <__sfp+0x18>
 800fab0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fab4:	b9d5      	cbnz	r5, 800faec <__sfp+0x64>
 800fab6:	4b16      	ldr	r3, [pc, #88]	; (800fb10 <__sfp+0x88>)
 800fab8:	60e3      	str	r3, [r4, #12]
 800faba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fabe:	6665      	str	r5, [r4, #100]	; 0x64
 800fac0:	f000 f86c 	bl	800fb9c <__retarget_lock_init_recursive>
 800fac4:	f7ff ff96 	bl	800f9f4 <__sfp_lock_release>
 800fac8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800facc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fad0:	6025      	str	r5, [r4, #0]
 800fad2:	61a5      	str	r5, [r4, #24]
 800fad4:	2208      	movs	r2, #8
 800fad6:	4629      	mov	r1, r5
 800fad8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fadc:	f000 f86f 	bl	800fbbe <memset>
 800fae0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fae4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fae8:	4620      	mov	r0, r4
 800faea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800faec:	3468      	adds	r4, #104	; 0x68
 800faee:	e7d9      	b.n	800faa4 <__sfp+0x1c>
 800faf0:	2104      	movs	r1, #4
 800faf2:	4638      	mov	r0, r7
 800faf4:	f7ff ff62 	bl	800f9bc <__sfmoreglue>
 800faf8:	4604      	mov	r4, r0
 800fafa:	6030      	str	r0, [r6, #0]
 800fafc:	2800      	cmp	r0, #0
 800fafe:	d1d5      	bne.n	800faac <__sfp+0x24>
 800fb00:	f7ff ff78 	bl	800f9f4 <__sfp_lock_release>
 800fb04:	230c      	movs	r3, #12
 800fb06:	603b      	str	r3, [r7, #0]
 800fb08:	e7ee      	b.n	800fae8 <__sfp+0x60>
 800fb0a:	bf00      	nop
 800fb0c:	08013098 	.word	0x08013098
 800fb10:	ffff0001 	.word	0xffff0001

0800fb14 <_fwalk_reent>:
 800fb14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb18:	4606      	mov	r6, r0
 800fb1a:	4688      	mov	r8, r1
 800fb1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fb20:	2700      	movs	r7, #0
 800fb22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fb26:	f1b9 0901 	subs.w	r9, r9, #1
 800fb2a:	d505      	bpl.n	800fb38 <_fwalk_reent+0x24>
 800fb2c:	6824      	ldr	r4, [r4, #0]
 800fb2e:	2c00      	cmp	r4, #0
 800fb30:	d1f7      	bne.n	800fb22 <_fwalk_reent+0xe>
 800fb32:	4638      	mov	r0, r7
 800fb34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb38:	89ab      	ldrh	r3, [r5, #12]
 800fb3a:	2b01      	cmp	r3, #1
 800fb3c:	d907      	bls.n	800fb4e <_fwalk_reent+0x3a>
 800fb3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fb42:	3301      	adds	r3, #1
 800fb44:	d003      	beq.n	800fb4e <_fwalk_reent+0x3a>
 800fb46:	4629      	mov	r1, r5
 800fb48:	4630      	mov	r0, r6
 800fb4a:	47c0      	blx	r8
 800fb4c:	4307      	orrs	r7, r0
 800fb4e:	3568      	adds	r5, #104	; 0x68
 800fb50:	e7e9      	b.n	800fb26 <_fwalk_reent+0x12>
	...

0800fb54 <__libc_init_array>:
 800fb54:	b570      	push	{r4, r5, r6, lr}
 800fb56:	4d0d      	ldr	r5, [pc, #52]	; (800fb8c <__libc_init_array+0x38>)
 800fb58:	4c0d      	ldr	r4, [pc, #52]	; (800fb90 <__libc_init_array+0x3c>)
 800fb5a:	1b64      	subs	r4, r4, r5
 800fb5c:	10a4      	asrs	r4, r4, #2
 800fb5e:	2600      	movs	r6, #0
 800fb60:	42a6      	cmp	r6, r4
 800fb62:	d109      	bne.n	800fb78 <__libc_init_array+0x24>
 800fb64:	4d0b      	ldr	r5, [pc, #44]	; (800fb94 <__libc_init_array+0x40>)
 800fb66:	4c0c      	ldr	r4, [pc, #48]	; (800fb98 <__libc_init_array+0x44>)
 800fb68:	f002 fd38 	bl	80125dc <_init>
 800fb6c:	1b64      	subs	r4, r4, r5
 800fb6e:	10a4      	asrs	r4, r4, #2
 800fb70:	2600      	movs	r6, #0
 800fb72:	42a6      	cmp	r6, r4
 800fb74:	d105      	bne.n	800fb82 <__libc_init_array+0x2e>
 800fb76:	bd70      	pop	{r4, r5, r6, pc}
 800fb78:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb7c:	4798      	blx	r3
 800fb7e:	3601      	adds	r6, #1
 800fb80:	e7ee      	b.n	800fb60 <__libc_init_array+0xc>
 800fb82:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb86:	4798      	blx	r3
 800fb88:	3601      	adds	r6, #1
 800fb8a:	e7f2      	b.n	800fb72 <__libc_init_array+0x1e>
 800fb8c:	0801341c 	.word	0x0801341c
 800fb90:	0801341c 	.word	0x0801341c
 800fb94:	0801341c 	.word	0x0801341c
 800fb98:	08013420 	.word	0x08013420

0800fb9c <__retarget_lock_init_recursive>:
 800fb9c:	4770      	bx	lr

0800fb9e <__retarget_lock_acquire_recursive>:
 800fb9e:	4770      	bx	lr

0800fba0 <__retarget_lock_release_recursive>:
 800fba0:	4770      	bx	lr

0800fba2 <memcpy>:
 800fba2:	440a      	add	r2, r1
 800fba4:	4291      	cmp	r1, r2
 800fba6:	f100 33ff 	add.w	r3, r0, #4294967295
 800fbaa:	d100      	bne.n	800fbae <memcpy+0xc>
 800fbac:	4770      	bx	lr
 800fbae:	b510      	push	{r4, lr}
 800fbb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fbb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fbb8:	4291      	cmp	r1, r2
 800fbba:	d1f9      	bne.n	800fbb0 <memcpy+0xe>
 800fbbc:	bd10      	pop	{r4, pc}

0800fbbe <memset>:
 800fbbe:	4402      	add	r2, r0
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	4293      	cmp	r3, r2
 800fbc4:	d100      	bne.n	800fbc8 <memset+0xa>
 800fbc6:	4770      	bx	lr
 800fbc8:	f803 1b01 	strb.w	r1, [r3], #1
 800fbcc:	e7f9      	b.n	800fbc2 <memset+0x4>
	...

0800fbd0 <sbrk_aligned>:
 800fbd0:	b570      	push	{r4, r5, r6, lr}
 800fbd2:	4e0e      	ldr	r6, [pc, #56]	; (800fc0c <sbrk_aligned+0x3c>)
 800fbd4:	460c      	mov	r4, r1
 800fbd6:	6831      	ldr	r1, [r6, #0]
 800fbd8:	4605      	mov	r5, r0
 800fbda:	b911      	cbnz	r1, 800fbe2 <sbrk_aligned+0x12>
 800fbdc:	f000 fdee 	bl	80107bc <_sbrk_r>
 800fbe0:	6030      	str	r0, [r6, #0]
 800fbe2:	4621      	mov	r1, r4
 800fbe4:	4628      	mov	r0, r5
 800fbe6:	f000 fde9 	bl	80107bc <_sbrk_r>
 800fbea:	1c43      	adds	r3, r0, #1
 800fbec:	d00a      	beq.n	800fc04 <sbrk_aligned+0x34>
 800fbee:	1cc4      	adds	r4, r0, #3
 800fbf0:	f024 0403 	bic.w	r4, r4, #3
 800fbf4:	42a0      	cmp	r0, r4
 800fbf6:	d007      	beq.n	800fc08 <sbrk_aligned+0x38>
 800fbf8:	1a21      	subs	r1, r4, r0
 800fbfa:	4628      	mov	r0, r5
 800fbfc:	f000 fdde 	bl	80107bc <_sbrk_r>
 800fc00:	3001      	adds	r0, #1
 800fc02:	d101      	bne.n	800fc08 <sbrk_aligned+0x38>
 800fc04:	f04f 34ff 	mov.w	r4, #4294967295
 800fc08:	4620      	mov	r0, r4
 800fc0a:	bd70      	pop	{r4, r5, r6, pc}
 800fc0c:	20005704 	.word	0x20005704

0800fc10 <_malloc_r>:
 800fc10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc14:	1ccd      	adds	r5, r1, #3
 800fc16:	f025 0503 	bic.w	r5, r5, #3
 800fc1a:	3508      	adds	r5, #8
 800fc1c:	2d0c      	cmp	r5, #12
 800fc1e:	bf38      	it	cc
 800fc20:	250c      	movcc	r5, #12
 800fc22:	2d00      	cmp	r5, #0
 800fc24:	4607      	mov	r7, r0
 800fc26:	db01      	blt.n	800fc2c <_malloc_r+0x1c>
 800fc28:	42a9      	cmp	r1, r5
 800fc2a:	d905      	bls.n	800fc38 <_malloc_r+0x28>
 800fc2c:	230c      	movs	r3, #12
 800fc2e:	603b      	str	r3, [r7, #0]
 800fc30:	2600      	movs	r6, #0
 800fc32:	4630      	mov	r0, r6
 800fc34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc38:	4e2e      	ldr	r6, [pc, #184]	; (800fcf4 <_malloc_r+0xe4>)
 800fc3a:	f001 feb5 	bl	80119a8 <__malloc_lock>
 800fc3e:	6833      	ldr	r3, [r6, #0]
 800fc40:	461c      	mov	r4, r3
 800fc42:	bb34      	cbnz	r4, 800fc92 <_malloc_r+0x82>
 800fc44:	4629      	mov	r1, r5
 800fc46:	4638      	mov	r0, r7
 800fc48:	f7ff ffc2 	bl	800fbd0 <sbrk_aligned>
 800fc4c:	1c43      	adds	r3, r0, #1
 800fc4e:	4604      	mov	r4, r0
 800fc50:	d14d      	bne.n	800fcee <_malloc_r+0xde>
 800fc52:	6834      	ldr	r4, [r6, #0]
 800fc54:	4626      	mov	r6, r4
 800fc56:	2e00      	cmp	r6, #0
 800fc58:	d140      	bne.n	800fcdc <_malloc_r+0xcc>
 800fc5a:	6823      	ldr	r3, [r4, #0]
 800fc5c:	4631      	mov	r1, r6
 800fc5e:	4638      	mov	r0, r7
 800fc60:	eb04 0803 	add.w	r8, r4, r3
 800fc64:	f000 fdaa 	bl	80107bc <_sbrk_r>
 800fc68:	4580      	cmp	r8, r0
 800fc6a:	d13a      	bne.n	800fce2 <_malloc_r+0xd2>
 800fc6c:	6821      	ldr	r1, [r4, #0]
 800fc6e:	3503      	adds	r5, #3
 800fc70:	1a6d      	subs	r5, r5, r1
 800fc72:	f025 0503 	bic.w	r5, r5, #3
 800fc76:	3508      	adds	r5, #8
 800fc78:	2d0c      	cmp	r5, #12
 800fc7a:	bf38      	it	cc
 800fc7c:	250c      	movcc	r5, #12
 800fc7e:	4629      	mov	r1, r5
 800fc80:	4638      	mov	r0, r7
 800fc82:	f7ff ffa5 	bl	800fbd0 <sbrk_aligned>
 800fc86:	3001      	adds	r0, #1
 800fc88:	d02b      	beq.n	800fce2 <_malloc_r+0xd2>
 800fc8a:	6823      	ldr	r3, [r4, #0]
 800fc8c:	442b      	add	r3, r5
 800fc8e:	6023      	str	r3, [r4, #0]
 800fc90:	e00e      	b.n	800fcb0 <_malloc_r+0xa0>
 800fc92:	6822      	ldr	r2, [r4, #0]
 800fc94:	1b52      	subs	r2, r2, r5
 800fc96:	d41e      	bmi.n	800fcd6 <_malloc_r+0xc6>
 800fc98:	2a0b      	cmp	r2, #11
 800fc9a:	d916      	bls.n	800fcca <_malloc_r+0xba>
 800fc9c:	1961      	adds	r1, r4, r5
 800fc9e:	42a3      	cmp	r3, r4
 800fca0:	6025      	str	r5, [r4, #0]
 800fca2:	bf18      	it	ne
 800fca4:	6059      	strne	r1, [r3, #4]
 800fca6:	6863      	ldr	r3, [r4, #4]
 800fca8:	bf08      	it	eq
 800fcaa:	6031      	streq	r1, [r6, #0]
 800fcac:	5162      	str	r2, [r4, r5]
 800fcae:	604b      	str	r3, [r1, #4]
 800fcb0:	4638      	mov	r0, r7
 800fcb2:	f104 060b 	add.w	r6, r4, #11
 800fcb6:	f001 fe7d 	bl	80119b4 <__malloc_unlock>
 800fcba:	f026 0607 	bic.w	r6, r6, #7
 800fcbe:	1d23      	adds	r3, r4, #4
 800fcc0:	1af2      	subs	r2, r6, r3
 800fcc2:	d0b6      	beq.n	800fc32 <_malloc_r+0x22>
 800fcc4:	1b9b      	subs	r3, r3, r6
 800fcc6:	50a3      	str	r3, [r4, r2]
 800fcc8:	e7b3      	b.n	800fc32 <_malloc_r+0x22>
 800fcca:	6862      	ldr	r2, [r4, #4]
 800fccc:	42a3      	cmp	r3, r4
 800fcce:	bf0c      	ite	eq
 800fcd0:	6032      	streq	r2, [r6, #0]
 800fcd2:	605a      	strne	r2, [r3, #4]
 800fcd4:	e7ec      	b.n	800fcb0 <_malloc_r+0xa0>
 800fcd6:	4623      	mov	r3, r4
 800fcd8:	6864      	ldr	r4, [r4, #4]
 800fcda:	e7b2      	b.n	800fc42 <_malloc_r+0x32>
 800fcdc:	4634      	mov	r4, r6
 800fcde:	6876      	ldr	r6, [r6, #4]
 800fce0:	e7b9      	b.n	800fc56 <_malloc_r+0x46>
 800fce2:	230c      	movs	r3, #12
 800fce4:	603b      	str	r3, [r7, #0]
 800fce6:	4638      	mov	r0, r7
 800fce8:	f001 fe64 	bl	80119b4 <__malloc_unlock>
 800fcec:	e7a1      	b.n	800fc32 <_malloc_r+0x22>
 800fcee:	6025      	str	r5, [r4, #0]
 800fcf0:	e7de      	b.n	800fcb0 <_malloc_r+0xa0>
 800fcf2:	bf00      	nop
 800fcf4:	20005700 	.word	0x20005700

0800fcf8 <__cvt>:
 800fcf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fcfc:	ec55 4b10 	vmov	r4, r5, d0
 800fd00:	2d00      	cmp	r5, #0
 800fd02:	460e      	mov	r6, r1
 800fd04:	4619      	mov	r1, r3
 800fd06:	462b      	mov	r3, r5
 800fd08:	bfbb      	ittet	lt
 800fd0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fd0e:	461d      	movlt	r5, r3
 800fd10:	2300      	movge	r3, #0
 800fd12:	232d      	movlt	r3, #45	; 0x2d
 800fd14:	700b      	strb	r3, [r1, #0]
 800fd16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd18:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fd1c:	4691      	mov	r9, r2
 800fd1e:	f023 0820 	bic.w	r8, r3, #32
 800fd22:	bfbc      	itt	lt
 800fd24:	4622      	movlt	r2, r4
 800fd26:	4614      	movlt	r4, r2
 800fd28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fd2c:	d005      	beq.n	800fd3a <__cvt+0x42>
 800fd2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fd32:	d100      	bne.n	800fd36 <__cvt+0x3e>
 800fd34:	3601      	adds	r6, #1
 800fd36:	2102      	movs	r1, #2
 800fd38:	e000      	b.n	800fd3c <__cvt+0x44>
 800fd3a:	2103      	movs	r1, #3
 800fd3c:	ab03      	add	r3, sp, #12
 800fd3e:	9301      	str	r3, [sp, #4]
 800fd40:	ab02      	add	r3, sp, #8
 800fd42:	9300      	str	r3, [sp, #0]
 800fd44:	ec45 4b10 	vmov	d0, r4, r5
 800fd48:	4653      	mov	r3, sl
 800fd4a:	4632      	mov	r2, r6
 800fd4c:	f000 fef8 	bl	8010b40 <_dtoa_r>
 800fd50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fd54:	4607      	mov	r7, r0
 800fd56:	d102      	bne.n	800fd5e <__cvt+0x66>
 800fd58:	f019 0f01 	tst.w	r9, #1
 800fd5c:	d022      	beq.n	800fda4 <__cvt+0xac>
 800fd5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fd62:	eb07 0906 	add.w	r9, r7, r6
 800fd66:	d110      	bne.n	800fd8a <__cvt+0x92>
 800fd68:	783b      	ldrb	r3, [r7, #0]
 800fd6a:	2b30      	cmp	r3, #48	; 0x30
 800fd6c:	d10a      	bne.n	800fd84 <__cvt+0x8c>
 800fd6e:	2200      	movs	r2, #0
 800fd70:	2300      	movs	r3, #0
 800fd72:	4620      	mov	r0, r4
 800fd74:	4629      	mov	r1, r5
 800fd76:	f7f0 fea7 	bl	8000ac8 <__aeabi_dcmpeq>
 800fd7a:	b918      	cbnz	r0, 800fd84 <__cvt+0x8c>
 800fd7c:	f1c6 0601 	rsb	r6, r6, #1
 800fd80:	f8ca 6000 	str.w	r6, [sl]
 800fd84:	f8da 3000 	ldr.w	r3, [sl]
 800fd88:	4499      	add	r9, r3
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	4620      	mov	r0, r4
 800fd90:	4629      	mov	r1, r5
 800fd92:	f7f0 fe99 	bl	8000ac8 <__aeabi_dcmpeq>
 800fd96:	b108      	cbz	r0, 800fd9c <__cvt+0xa4>
 800fd98:	f8cd 900c 	str.w	r9, [sp, #12]
 800fd9c:	2230      	movs	r2, #48	; 0x30
 800fd9e:	9b03      	ldr	r3, [sp, #12]
 800fda0:	454b      	cmp	r3, r9
 800fda2:	d307      	bcc.n	800fdb4 <__cvt+0xbc>
 800fda4:	9b03      	ldr	r3, [sp, #12]
 800fda6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fda8:	1bdb      	subs	r3, r3, r7
 800fdaa:	4638      	mov	r0, r7
 800fdac:	6013      	str	r3, [r2, #0]
 800fdae:	b004      	add	sp, #16
 800fdb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdb4:	1c59      	adds	r1, r3, #1
 800fdb6:	9103      	str	r1, [sp, #12]
 800fdb8:	701a      	strb	r2, [r3, #0]
 800fdba:	e7f0      	b.n	800fd9e <__cvt+0xa6>

0800fdbc <__exponent>:
 800fdbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	2900      	cmp	r1, #0
 800fdc2:	bfb8      	it	lt
 800fdc4:	4249      	neglt	r1, r1
 800fdc6:	f803 2b02 	strb.w	r2, [r3], #2
 800fdca:	bfb4      	ite	lt
 800fdcc:	222d      	movlt	r2, #45	; 0x2d
 800fdce:	222b      	movge	r2, #43	; 0x2b
 800fdd0:	2909      	cmp	r1, #9
 800fdd2:	7042      	strb	r2, [r0, #1]
 800fdd4:	dd2a      	ble.n	800fe2c <__exponent+0x70>
 800fdd6:	f10d 0407 	add.w	r4, sp, #7
 800fdda:	46a4      	mov	ip, r4
 800fddc:	270a      	movs	r7, #10
 800fdde:	46a6      	mov	lr, r4
 800fde0:	460a      	mov	r2, r1
 800fde2:	fb91 f6f7 	sdiv	r6, r1, r7
 800fde6:	fb07 1516 	mls	r5, r7, r6, r1
 800fdea:	3530      	adds	r5, #48	; 0x30
 800fdec:	2a63      	cmp	r2, #99	; 0x63
 800fdee:	f104 34ff 	add.w	r4, r4, #4294967295
 800fdf2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fdf6:	4631      	mov	r1, r6
 800fdf8:	dcf1      	bgt.n	800fdde <__exponent+0x22>
 800fdfa:	3130      	adds	r1, #48	; 0x30
 800fdfc:	f1ae 0502 	sub.w	r5, lr, #2
 800fe00:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fe04:	1c44      	adds	r4, r0, #1
 800fe06:	4629      	mov	r1, r5
 800fe08:	4561      	cmp	r1, ip
 800fe0a:	d30a      	bcc.n	800fe22 <__exponent+0x66>
 800fe0c:	f10d 0209 	add.w	r2, sp, #9
 800fe10:	eba2 020e 	sub.w	r2, r2, lr
 800fe14:	4565      	cmp	r5, ip
 800fe16:	bf88      	it	hi
 800fe18:	2200      	movhi	r2, #0
 800fe1a:	4413      	add	r3, r2
 800fe1c:	1a18      	subs	r0, r3, r0
 800fe1e:	b003      	add	sp, #12
 800fe20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe26:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fe2a:	e7ed      	b.n	800fe08 <__exponent+0x4c>
 800fe2c:	2330      	movs	r3, #48	; 0x30
 800fe2e:	3130      	adds	r1, #48	; 0x30
 800fe30:	7083      	strb	r3, [r0, #2]
 800fe32:	70c1      	strb	r1, [r0, #3]
 800fe34:	1d03      	adds	r3, r0, #4
 800fe36:	e7f1      	b.n	800fe1c <__exponent+0x60>

0800fe38 <_printf_float>:
 800fe38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe3c:	ed2d 8b02 	vpush	{d8}
 800fe40:	b08d      	sub	sp, #52	; 0x34
 800fe42:	460c      	mov	r4, r1
 800fe44:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fe48:	4616      	mov	r6, r2
 800fe4a:	461f      	mov	r7, r3
 800fe4c:	4605      	mov	r5, r0
 800fe4e:	f001 fd27 	bl	80118a0 <_localeconv_r>
 800fe52:	f8d0 a000 	ldr.w	sl, [r0]
 800fe56:	4650      	mov	r0, sl
 800fe58:	f7f0 f9ba 	bl	80001d0 <strlen>
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	930a      	str	r3, [sp, #40]	; 0x28
 800fe60:	6823      	ldr	r3, [r4, #0]
 800fe62:	9305      	str	r3, [sp, #20]
 800fe64:	f8d8 3000 	ldr.w	r3, [r8]
 800fe68:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fe6c:	3307      	adds	r3, #7
 800fe6e:	f023 0307 	bic.w	r3, r3, #7
 800fe72:	f103 0208 	add.w	r2, r3, #8
 800fe76:	f8c8 2000 	str.w	r2, [r8]
 800fe7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe7e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fe82:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fe86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fe8a:	9307      	str	r3, [sp, #28]
 800fe8c:	f8cd 8018 	str.w	r8, [sp, #24]
 800fe90:	ee08 0a10 	vmov	s16, r0
 800fe94:	4b9f      	ldr	r3, [pc, #636]	; (8010114 <_printf_float+0x2dc>)
 800fe96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fe9a:	f04f 32ff 	mov.w	r2, #4294967295
 800fe9e:	f7f0 fe45 	bl	8000b2c <__aeabi_dcmpun>
 800fea2:	bb88      	cbnz	r0, 800ff08 <_printf_float+0xd0>
 800fea4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fea8:	4b9a      	ldr	r3, [pc, #616]	; (8010114 <_printf_float+0x2dc>)
 800feaa:	f04f 32ff 	mov.w	r2, #4294967295
 800feae:	f7f0 fe1f 	bl	8000af0 <__aeabi_dcmple>
 800feb2:	bb48      	cbnz	r0, 800ff08 <_printf_float+0xd0>
 800feb4:	2200      	movs	r2, #0
 800feb6:	2300      	movs	r3, #0
 800feb8:	4640      	mov	r0, r8
 800feba:	4649      	mov	r1, r9
 800febc:	f7f0 fe0e 	bl	8000adc <__aeabi_dcmplt>
 800fec0:	b110      	cbz	r0, 800fec8 <_printf_float+0x90>
 800fec2:	232d      	movs	r3, #45	; 0x2d
 800fec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fec8:	4b93      	ldr	r3, [pc, #588]	; (8010118 <_printf_float+0x2e0>)
 800feca:	4894      	ldr	r0, [pc, #592]	; (801011c <_printf_float+0x2e4>)
 800fecc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800fed0:	bf94      	ite	ls
 800fed2:	4698      	movls	r8, r3
 800fed4:	4680      	movhi	r8, r0
 800fed6:	2303      	movs	r3, #3
 800fed8:	6123      	str	r3, [r4, #16]
 800feda:	9b05      	ldr	r3, [sp, #20]
 800fedc:	f023 0204 	bic.w	r2, r3, #4
 800fee0:	6022      	str	r2, [r4, #0]
 800fee2:	f04f 0900 	mov.w	r9, #0
 800fee6:	9700      	str	r7, [sp, #0]
 800fee8:	4633      	mov	r3, r6
 800feea:	aa0b      	add	r2, sp, #44	; 0x2c
 800feec:	4621      	mov	r1, r4
 800feee:	4628      	mov	r0, r5
 800fef0:	f000 f9d8 	bl	80102a4 <_printf_common>
 800fef4:	3001      	adds	r0, #1
 800fef6:	f040 8090 	bne.w	801001a <_printf_float+0x1e2>
 800fefa:	f04f 30ff 	mov.w	r0, #4294967295
 800fefe:	b00d      	add	sp, #52	; 0x34
 800ff00:	ecbd 8b02 	vpop	{d8}
 800ff04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff08:	4642      	mov	r2, r8
 800ff0a:	464b      	mov	r3, r9
 800ff0c:	4640      	mov	r0, r8
 800ff0e:	4649      	mov	r1, r9
 800ff10:	f7f0 fe0c 	bl	8000b2c <__aeabi_dcmpun>
 800ff14:	b140      	cbz	r0, 800ff28 <_printf_float+0xf0>
 800ff16:	464b      	mov	r3, r9
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	bfbc      	itt	lt
 800ff1c:	232d      	movlt	r3, #45	; 0x2d
 800ff1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ff22:	487f      	ldr	r0, [pc, #508]	; (8010120 <_printf_float+0x2e8>)
 800ff24:	4b7f      	ldr	r3, [pc, #508]	; (8010124 <_printf_float+0x2ec>)
 800ff26:	e7d1      	b.n	800fecc <_printf_float+0x94>
 800ff28:	6863      	ldr	r3, [r4, #4]
 800ff2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ff2e:	9206      	str	r2, [sp, #24]
 800ff30:	1c5a      	adds	r2, r3, #1
 800ff32:	d13f      	bne.n	800ffb4 <_printf_float+0x17c>
 800ff34:	2306      	movs	r3, #6
 800ff36:	6063      	str	r3, [r4, #4]
 800ff38:	9b05      	ldr	r3, [sp, #20]
 800ff3a:	6861      	ldr	r1, [r4, #4]
 800ff3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ff40:	2300      	movs	r3, #0
 800ff42:	9303      	str	r3, [sp, #12]
 800ff44:	ab0a      	add	r3, sp, #40	; 0x28
 800ff46:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ff4a:	ab09      	add	r3, sp, #36	; 0x24
 800ff4c:	ec49 8b10 	vmov	d0, r8, r9
 800ff50:	9300      	str	r3, [sp, #0]
 800ff52:	6022      	str	r2, [r4, #0]
 800ff54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ff58:	4628      	mov	r0, r5
 800ff5a:	f7ff fecd 	bl	800fcf8 <__cvt>
 800ff5e:	9b06      	ldr	r3, [sp, #24]
 800ff60:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ff62:	2b47      	cmp	r3, #71	; 0x47
 800ff64:	4680      	mov	r8, r0
 800ff66:	d108      	bne.n	800ff7a <_printf_float+0x142>
 800ff68:	1cc8      	adds	r0, r1, #3
 800ff6a:	db02      	blt.n	800ff72 <_printf_float+0x13a>
 800ff6c:	6863      	ldr	r3, [r4, #4]
 800ff6e:	4299      	cmp	r1, r3
 800ff70:	dd41      	ble.n	800fff6 <_printf_float+0x1be>
 800ff72:	f1ab 0b02 	sub.w	fp, fp, #2
 800ff76:	fa5f fb8b 	uxtb.w	fp, fp
 800ff7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ff7e:	d820      	bhi.n	800ffc2 <_printf_float+0x18a>
 800ff80:	3901      	subs	r1, #1
 800ff82:	465a      	mov	r2, fp
 800ff84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ff88:	9109      	str	r1, [sp, #36]	; 0x24
 800ff8a:	f7ff ff17 	bl	800fdbc <__exponent>
 800ff8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ff90:	1813      	adds	r3, r2, r0
 800ff92:	2a01      	cmp	r2, #1
 800ff94:	4681      	mov	r9, r0
 800ff96:	6123      	str	r3, [r4, #16]
 800ff98:	dc02      	bgt.n	800ffa0 <_printf_float+0x168>
 800ff9a:	6822      	ldr	r2, [r4, #0]
 800ff9c:	07d2      	lsls	r2, r2, #31
 800ff9e:	d501      	bpl.n	800ffa4 <_printf_float+0x16c>
 800ffa0:	3301      	adds	r3, #1
 800ffa2:	6123      	str	r3, [r4, #16]
 800ffa4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d09c      	beq.n	800fee6 <_printf_float+0xae>
 800ffac:	232d      	movs	r3, #45	; 0x2d
 800ffae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ffb2:	e798      	b.n	800fee6 <_printf_float+0xae>
 800ffb4:	9a06      	ldr	r2, [sp, #24]
 800ffb6:	2a47      	cmp	r2, #71	; 0x47
 800ffb8:	d1be      	bne.n	800ff38 <_printf_float+0x100>
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d1bc      	bne.n	800ff38 <_printf_float+0x100>
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	e7b9      	b.n	800ff36 <_printf_float+0xfe>
 800ffc2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ffc6:	d118      	bne.n	800fffa <_printf_float+0x1c2>
 800ffc8:	2900      	cmp	r1, #0
 800ffca:	6863      	ldr	r3, [r4, #4]
 800ffcc:	dd0b      	ble.n	800ffe6 <_printf_float+0x1ae>
 800ffce:	6121      	str	r1, [r4, #16]
 800ffd0:	b913      	cbnz	r3, 800ffd8 <_printf_float+0x1a0>
 800ffd2:	6822      	ldr	r2, [r4, #0]
 800ffd4:	07d0      	lsls	r0, r2, #31
 800ffd6:	d502      	bpl.n	800ffde <_printf_float+0x1a6>
 800ffd8:	3301      	adds	r3, #1
 800ffda:	440b      	add	r3, r1
 800ffdc:	6123      	str	r3, [r4, #16]
 800ffde:	65a1      	str	r1, [r4, #88]	; 0x58
 800ffe0:	f04f 0900 	mov.w	r9, #0
 800ffe4:	e7de      	b.n	800ffa4 <_printf_float+0x16c>
 800ffe6:	b913      	cbnz	r3, 800ffee <_printf_float+0x1b6>
 800ffe8:	6822      	ldr	r2, [r4, #0]
 800ffea:	07d2      	lsls	r2, r2, #31
 800ffec:	d501      	bpl.n	800fff2 <_printf_float+0x1ba>
 800ffee:	3302      	adds	r3, #2
 800fff0:	e7f4      	b.n	800ffdc <_printf_float+0x1a4>
 800fff2:	2301      	movs	r3, #1
 800fff4:	e7f2      	b.n	800ffdc <_printf_float+0x1a4>
 800fff6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800fffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fffc:	4299      	cmp	r1, r3
 800fffe:	db05      	blt.n	801000c <_printf_float+0x1d4>
 8010000:	6823      	ldr	r3, [r4, #0]
 8010002:	6121      	str	r1, [r4, #16]
 8010004:	07d8      	lsls	r0, r3, #31
 8010006:	d5ea      	bpl.n	800ffde <_printf_float+0x1a6>
 8010008:	1c4b      	adds	r3, r1, #1
 801000a:	e7e7      	b.n	800ffdc <_printf_float+0x1a4>
 801000c:	2900      	cmp	r1, #0
 801000e:	bfd4      	ite	le
 8010010:	f1c1 0202 	rsble	r2, r1, #2
 8010014:	2201      	movgt	r2, #1
 8010016:	4413      	add	r3, r2
 8010018:	e7e0      	b.n	800ffdc <_printf_float+0x1a4>
 801001a:	6823      	ldr	r3, [r4, #0]
 801001c:	055a      	lsls	r2, r3, #21
 801001e:	d407      	bmi.n	8010030 <_printf_float+0x1f8>
 8010020:	6923      	ldr	r3, [r4, #16]
 8010022:	4642      	mov	r2, r8
 8010024:	4631      	mov	r1, r6
 8010026:	4628      	mov	r0, r5
 8010028:	47b8      	blx	r7
 801002a:	3001      	adds	r0, #1
 801002c:	d12c      	bne.n	8010088 <_printf_float+0x250>
 801002e:	e764      	b.n	800fefa <_printf_float+0xc2>
 8010030:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010034:	f240 80e0 	bls.w	80101f8 <_printf_float+0x3c0>
 8010038:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801003c:	2200      	movs	r2, #0
 801003e:	2300      	movs	r3, #0
 8010040:	f7f0 fd42 	bl	8000ac8 <__aeabi_dcmpeq>
 8010044:	2800      	cmp	r0, #0
 8010046:	d034      	beq.n	80100b2 <_printf_float+0x27a>
 8010048:	4a37      	ldr	r2, [pc, #220]	; (8010128 <_printf_float+0x2f0>)
 801004a:	2301      	movs	r3, #1
 801004c:	4631      	mov	r1, r6
 801004e:	4628      	mov	r0, r5
 8010050:	47b8      	blx	r7
 8010052:	3001      	adds	r0, #1
 8010054:	f43f af51 	beq.w	800fefa <_printf_float+0xc2>
 8010058:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801005c:	429a      	cmp	r2, r3
 801005e:	db02      	blt.n	8010066 <_printf_float+0x22e>
 8010060:	6823      	ldr	r3, [r4, #0]
 8010062:	07d8      	lsls	r0, r3, #31
 8010064:	d510      	bpl.n	8010088 <_printf_float+0x250>
 8010066:	ee18 3a10 	vmov	r3, s16
 801006a:	4652      	mov	r2, sl
 801006c:	4631      	mov	r1, r6
 801006e:	4628      	mov	r0, r5
 8010070:	47b8      	blx	r7
 8010072:	3001      	adds	r0, #1
 8010074:	f43f af41 	beq.w	800fefa <_printf_float+0xc2>
 8010078:	f04f 0800 	mov.w	r8, #0
 801007c:	f104 091a 	add.w	r9, r4, #26
 8010080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010082:	3b01      	subs	r3, #1
 8010084:	4543      	cmp	r3, r8
 8010086:	dc09      	bgt.n	801009c <_printf_float+0x264>
 8010088:	6823      	ldr	r3, [r4, #0]
 801008a:	079b      	lsls	r3, r3, #30
 801008c:	f100 8105 	bmi.w	801029a <_printf_float+0x462>
 8010090:	68e0      	ldr	r0, [r4, #12]
 8010092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010094:	4298      	cmp	r0, r3
 8010096:	bfb8      	it	lt
 8010098:	4618      	movlt	r0, r3
 801009a:	e730      	b.n	800fefe <_printf_float+0xc6>
 801009c:	2301      	movs	r3, #1
 801009e:	464a      	mov	r2, r9
 80100a0:	4631      	mov	r1, r6
 80100a2:	4628      	mov	r0, r5
 80100a4:	47b8      	blx	r7
 80100a6:	3001      	adds	r0, #1
 80100a8:	f43f af27 	beq.w	800fefa <_printf_float+0xc2>
 80100ac:	f108 0801 	add.w	r8, r8, #1
 80100b0:	e7e6      	b.n	8010080 <_printf_float+0x248>
 80100b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	dc39      	bgt.n	801012c <_printf_float+0x2f4>
 80100b8:	4a1b      	ldr	r2, [pc, #108]	; (8010128 <_printf_float+0x2f0>)
 80100ba:	2301      	movs	r3, #1
 80100bc:	4631      	mov	r1, r6
 80100be:	4628      	mov	r0, r5
 80100c0:	47b8      	blx	r7
 80100c2:	3001      	adds	r0, #1
 80100c4:	f43f af19 	beq.w	800fefa <_printf_float+0xc2>
 80100c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80100cc:	4313      	orrs	r3, r2
 80100ce:	d102      	bne.n	80100d6 <_printf_float+0x29e>
 80100d0:	6823      	ldr	r3, [r4, #0]
 80100d2:	07d9      	lsls	r1, r3, #31
 80100d4:	d5d8      	bpl.n	8010088 <_printf_float+0x250>
 80100d6:	ee18 3a10 	vmov	r3, s16
 80100da:	4652      	mov	r2, sl
 80100dc:	4631      	mov	r1, r6
 80100de:	4628      	mov	r0, r5
 80100e0:	47b8      	blx	r7
 80100e2:	3001      	adds	r0, #1
 80100e4:	f43f af09 	beq.w	800fefa <_printf_float+0xc2>
 80100e8:	f04f 0900 	mov.w	r9, #0
 80100ec:	f104 0a1a 	add.w	sl, r4, #26
 80100f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100f2:	425b      	negs	r3, r3
 80100f4:	454b      	cmp	r3, r9
 80100f6:	dc01      	bgt.n	80100fc <_printf_float+0x2c4>
 80100f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100fa:	e792      	b.n	8010022 <_printf_float+0x1ea>
 80100fc:	2301      	movs	r3, #1
 80100fe:	4652      	mov	r2, sl
 8010100:	4631      	mov	r1, r6
 8010102:	4628      	mov	r0, r5
 8010104:	47b8      	blx	r7
 8010106:	3001      	adds	r0, #1
 8010108:	f43f aef7 	beq.w	800fefa <_printf_float+0xc2>
 801010c:	f109 0901 	add.w	r9, r9, #1
 8010110:	e7ee      	b.n	80100f0 <_printf_float+0x2b8>
 8010112:	bf00      	nop
 8010114:	7fefffff 	.word	0x7fefffff
 8010118:	0801309c 	.word	0x0801309c
 801011c:	080130a0 	.word	0x080130a0
 8010120:	080130a8 	.word	0x080130a8
 8010124:	080130a4 	.word	0x080130a4
 8010128:	080130ac 	.word	0x080130ac
 801012c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801012e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010130:	429a      	cmp	r2, r3
 8010132:	bfa8      	it	ge
 8010134:	461a      	movge	r2, r3
 8010136:	2a00      	cmp	r2, #0
 8010138:	4691      	mov	r9, r2
 801013a:	dc37      	bgt.n	80101ac <_printf_float+0x374>
 801013c:	f04f 0b00 	mov.w	fp, #0
 8010140:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010144:	f104 021a 	add.w	r2, r4, #26
 8010148:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801014a:	9305      	str	r3, [sp, #20]
 801014c:	eba3 0309 	sub.w	r3, r3, r9
 8010150:	455b      	cmp	r3, fp
 8010152:	dc33      	bgt.n	80101bc <_printf_float+0x384>
 8010154:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010158:	429a      	cmp	r2, r3
 801015a:	db3b      	blt.n	80101d4 <_printf_float+0x39c>
 801015c:	6823      	ldr	r3, [r4, #0]
 801015e:	07da      	lsls	r2, r3, #31
 8010160:	d438      	bmi.n	80101d4 <_printf_float+0x39c>
 8010162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010164:	9a05      	ldr	r2, [sp, #20]
 8010166:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010168:	1a9a      	subs	r2, r3, r2
 801016a:	eba3 0901 	sub.w	r9, r3, r1
 801016e:	4591      	cmp	r9, r2
 8010170:	bfa8      	it	ge
 8010172:	4691      	movge	r9, r2
 8010174:	f1b9 0f00 	cmp.w	r9, #0
 8010178:	dc35      	bgt.n	80101e6 <_printf_float+0x3ae>
 801017a:	f04f 0800 	mov.w	r8, #0
 801017e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010182:	f104 0a1a 	add.w	sl, r4, #26
 8010186:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801018a:	1a9b      	subs	r3, r3, r2
 801018c:	eba3 0309 	sub.w	r3, r3, r9
 8010190:	4543      	cmp	r3, r8
 8010192:	f77f af79 	ble.w	8010088 <_printf_float+0x250>
 8010196:	2301      	movs	r3, #1
 8010198:	4652      	mov	r2, sl
 801019a:	4631      	mov	r1, r6
 801019c:	4628      	mov	r0, r5
 801019e:	47b8      	blx	r7
 80101a0:	3001      	adds	r0, #1
 80101a2:	f43f aeaa 	beq.w	800fefa <_printf_float+0xc2>
 80101a6:	f108 0801 	add.w	r8, r8, #1
 80101aa:	e7ec      	b.n	8010186 <_printf_float+0x34e>
 80101ac:	4613      	mov	r3, r2
 80101ae:	4631      	mov	r1, r6
 80101b0:	4642      	mov	r2, r8
 80101b2:	4628      	mov	r0, r5
 80101b4:	47b8      	blx	r7
 80101b6:	3001      	adds	r0, #1
 80101b8:	d1c0      	bne.n	801013c <_printf_float+0x304>
 80101ba:	e69e      	b.n	800fefa <_printf_float+0xc2>
 80101bc:	2301      	movs	r3, #1
 80101be:	4631      	mov	r1, r6
 80101c0:	4628      	mov	r0, r5
 80101c2:	9205      	str	r2, [sp, #20]
 80101c4:	47b8      	blx	r7
 80101c6:	3001      	adds	r0, #1
 80101c8:	f43f ae97 	beq.w	800fefa <_printf_float+0xc2>
 80101cc:	9a05      	ldr	r2, [sp, #20]
 80101ce:	f10b 0b01 	add.w	fp, fp, #1
 80101d2:	e7b9      	b.n	8010148 <_printf_float+0x310>
 80101d4:	ee18 3a10 	vmov	r3, s16
 80101d8:	4652      	mov	r2, sl
 80101da:	4631      	mov	r1, r6
 80101dc:	4628      	mov	r0, r5
 80101de:	47b8      	blx	r7
 80101e0:	3001      	adds	r0, #1
 80101e2:	d1be      	bne.n	8010162 <_printf_float+0x32a>
 80101e4:	e689      	b.n	800fefa <_printf_float+0xc2>
 80101e6:	9a05      	ldr	r2, [sp, #20]
 80101e8:	464b      	mov	r3, r9
 80101ea:	4442      	add	r2, r8
 80101ec:	4631      	mov	r1, r6
 80101ee:	4628      	mov	r0, r5
 80101f0:	47b8      	blx	r7
 80101f2:	3001      	adds	r0, #1
 80101f4:	d1c1      	bne.n	801017a <_printf_float+0x342>
 80101f6:	e680      	b.n	800fefa <_printf_float+0xc2>
 80101f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80101fa:	2a01      	cmp	r2, #1
 80101fc:	dc01      	bgt.n	8010202 <_printf_float+0x3ca>
 80101fe:	07db      	lsls	r3, r3, #31
 8010200:	d538      	bpl.n	8010274 <_printf_float+0x43c>
 8010202:	2301      	movs	r3, #1
 8010204:	4642      	mov	r2, r8
 8010206:	4631      	mov	r1, r6
 8010208:	4628      	mov	r0, r5
 801020a:	47b8      	blx	r7
 801020c:	3001      	adds	r0, #1
 801020e:	f43f ae74 	beq.w	800fefa <_printf_float+0xc2>
 8010212:	ee18 3a10 	vmov	r3, s16
 8010216:	4652      	mov	r2, sl
 8010218:	4631      	mov	r1, r6
 801021a:	4628      	mov	r0, r5
 801021c:	47b8      	blx	r7
 801021e:	3001      	adds	r0, #1
 8010220:	f43f ae6b 	beq.w	800fefa <_printf_float+0xc2>
 8010224:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010228:	2200      	movs	r2, #0
 801022a:	2300      	movs	r3, #0
 801022c:	f7f0 fc4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8010230:	b9d8      	cbnz	r0, 801026a <_printf_float+0x432>
 8010232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010234:	f108 0201 	add.w	r2, r8, #1
 8010238:	3b01      	subs	r3, #1
 801023a:	4631      	mov	r1, r6
 801023c:	4628      	mov	r0, r5
 801023e:	47b8      	blx	r7
 8010240:	3001      	adds	r0, #1
 8010242:	d10e      	bne.n	8010262 <_printf_float+0x42a>
 8010244:	e659      	b.n	800fefa <_printf_float+0xc2>
 8010246:	2301      	movs	r3, #1
 8010248:	4652      	mov	r2, sl
 801024a:	4631      	mov	r1, r6
 801024c:	4628      	mov	r0, r5
 801024e:	47b8      	blx	r7
 8010250:	3001      	adds	r0, #1
 8010252:	f43f ae52 	beq.w	800fefa <_printf_float+0xc2>
 8010256:	f108 0801 	add.w	r8, r8, #1
 801025a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801025c:	3b01      	subs	r3, #1
 801025e:	4543      	cmp	r3, r8
 8010260:	dcf1      	bgt.n	8010246 <_printf_float+0x40e>
 8010262:	464b      	mov	r3, r9
 8010264:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010268:	e6dc      	b.n	8010024 <_printf_float+0x1ec>
 801026a:	f04f 0800 	mov.w	r8, #0
 801026e:	f104 0a1a 	add.w	sl, r4, #26
 8010272:	e7f2      	b.n	801025a <_printf_float+0x422>
 8010274:	2301      	movs	r3, #1
 8010276:	4642      	mov	r2, r8
 8010278:	e7df      	b.n	801023a <_printf_float+0x402>
 801027a:	2301      	movs	r3, #1
 801027c:	464a      	mov	r2, r9
 801027e:	4631      	mov	r1, r6
 8010280:	4628      	mov	r0, r5
 8010282:	47b8      	blx	r7
 8010284:	3001      	adds	r0, #1
 8010286:	f43f ae38 	beq.w	800fefa <_printf_float+0xc2>
 801028a:	f108 0801 	add.w	r8, r8, #1
 801028e:	68e3      	ldr	r3, [r4, #12]
 8010290:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010292:	1a5b      	subs	r3, r3, r1
 8010294:	4543      	cmp	r3, r8
 8010296:	dcf0      	bgt.n	801027a <_printf_float+0x442>
 8010298:	e6fa      	b.n	8010090 <_printf_float+0x258>
 801029a:	f04f 0800 	mov.w	r8, #0
 801029e:	f104 0919 	add.w	r9, r4, #25
 80102a2:	e7f4      	b.n	801028e <_printf_float+0x456>

080102a4 <_printf_common>:
 80102a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102a8:	4616      	mov	r6, r2
 80102aa:	4699      	mov	r9, r3
 80102ac:	688a      	ldr	r2, [r1, #8]
 80102ae:	690b      	ldr	r3, [r1, #16]
 80102b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80102b4:	4293      	cmp	r3, r2
 80102b6:	bfb8      	it	lt
 80102b8:	4613      	movlt	r3, r2
 80102ba:	6033      	str	r3, [r6, #0]
 80102bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80102c0:	4607      	mov	r7, r0
 80102c2:	460c      	mov	r4, r1
 80102c4:	b10a      	cbz	r2, 80102ca <_printf_common+0x26>
 80102c6:	3301      	adds	r3, #1
 80102c8:	6033      	str	r3, [r6, #0]
 80102ca:	6823      	ldr	r3, [r4, #0]
 80102cc:	0699      	lsls	r1, r3, #26
 80102ce:	bf42      	ittt	mi
 80102d0:	6833      	ldrmi	r3, [r6, #0]
 80102d2:	3302      	addmi	r3, #2
 80102d4:	6033      	strmi	r3, [r6, #0]
 80102d6:	6825      	ldr	r5, [r4, #0]
 80102d8:	f015 0506 	ands.w	r5, r5, #6
 80102dc:	d106      	bne.n	80102ec <_printf_common+0x48>
 80102de:	f104 0a19 	add.w	sl, r4, #25
 80102e2:	68e3      	ldr	r3, [r4, #12]
 80102e4:	6832      	ldr	r2, [r6, #0]
 80102e6:	1a9b      	subs	r3, r3, r2
 80102e8:	42ab      	cmp	r3, r5
 80102ea:	dc26      	bgt.n	801033a <_printf_common+0x96>
 80102ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80102f0:	1e13      	subs	r3, r2, #0
 80102f2:	6822      	ldr	r2, [r4, #0]
 80102f4:	bf18      	it	ne
 80102f6:	2301      	movne	r3, #1
 80102f8:	0692      	lsls	r2, r2, #26
 80102fa:	d42b      	bmi.n	8010354 <_printf_common+0xb0>
 80102fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010300:	4649      	mov	r1, r9
 8010302:	4638      	mov	r0, r7
 8010304:	47c0      	blx	r8
 8010306:	3001      	adds	r0, #1
 8010308:	d01e      	beq.n	8010348 <_printf_common+0xa4>
 801030a:	6823      	ldr	r3, [r4, #0]
 801030c:	68e5      	ldr	r5, [r4, #12]
 801030e:	6832      	ldr	r2, [r6, #0]
 8010310:	f003 0306 	and.w	r3, r3, #6
 8010314:	2b04      	cmp	r3, #4
 8010316:	bf08      	it	eq
 8010318:	1aad      	subeq	r5, r5, r2
 801031a:	68a3      	ldr	r3, [r4, #8]
 801031c:	6922      	ldr	r2, [r4, #16]
 801031e:	bf0c      	ite	eq
 8010320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010324:	2500      	movne	r5, #0
 8010326:	4293      	cmp	r3, r2
 8010328:	bfc4      	itt	gt
 801032a:	1a9b      	subgt	r3, r3, r2
 801032c:	18ed      	addgt	r5, r5, r3
 801032e:	2600      	movs	r6, #0
 8010330:	341a      	adds	r4, #26
 8010332:	42b5      	cmp	r5, r6
 8010334:	d11a      	bne.n	801036c <_printf_common+0xc8>
 8010336:	2000      	movs	r0, #0
 8010338:	e008      	b.n	801034c <_printf_common+0xa8>
 801033a:	2301      	movs	r3, #1
 801033c:	4652      	mov	r2, sl
 801033e:	4649      	mov	r1, r9
 8010340:	4638      	mov	r0, r7
 8010342:	47c0      	blx	r8
 8010344:	3001      	adds	r0, #1
 8010346:	d103      	bne.n	8010350 <_printf_common+0xac>
 8010348:	f04f 30ff 	mov.w	r0, #4294967295
 801034c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010350:	3501      	adds	r5, #1
 8010352:	e7c6      	b.n	80102e2 <_printf_common+0x3e>
 8010354:	18e1      	adds	r1, r4, r3
 8010356:	1c5a      	adds	r2, r3, #1
 8010358:	2030      	movs	r0, #48	; 0x30
 801035a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801035e:	4422      	add	r2, r4
 8010360:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010364:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010368:	3302      	adds	r3, #2
 801036a:	e7c7      	b.n	80102fc <_printf_common+0x58>
 801036c:	2301      	movs	r3, #1
 801036e:	4622      	mov	r2, r4
 8010370:	4649      	mov	r1, r9
 8010372:	4638      	mov	r0, r7
 8010374:	47c0      	blx	r8
 8010376:	3001      	adds	r0, #1
 8010378:	d0e6      	beq.n	8010348 <_printf_common+0xa4>
 801037a:	3601      	adds	r6, #1
 801037c:	e7d9      	b.n	8010332 <_printf_common+0x8e>
	...

08010380 <_printf_i>:
 8010380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010384:	7e0f      	ldrb	r7, [r1, #24]
 8010386:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010388:	2f78      	cmp	r7, #120	; 0x78
 801038a:	4691      	mov	r9, r2
 801038c:	4680      	mov	r8, r0
 801038e:	460c      	mov	r4, r1
 8010390:	469a      	mov	sl, r3
 8010392:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010396:	d807      	bhi.n	80103a8 <_printf_i+0x28>
 8010398:	2f62      	cmp	r7, #98	; 0x62
 801039a:	d80a      	bhi.n	80103b2 <_printf_i+0x32>
 801039c:	2f00      	cmp	r7, #0
 801039e:	f000 80d8 	beq.w	8010552 <_printf_i+0x1d2>
 80103a2:	2f58      	cmp	r7, #88	; 0x58
 80103a4:	f000 80a3 	beq.w	80104ee <_printf_i+0x16e>
 80103a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80103ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80103b0:	e03a      	b.n	8010428 <_printf_i+0xa8>
 80103b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80103b6:	2b15      	cmp	r3, #21
 80103b8:	d8f6      	bhi.n	80103a8 <_printf_i+0x28>
 80103ba:	a101      	add	r1, pc, #4	; (adr r1, 80103c0 <_printf_i+0x40>)
 80103bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80103c0:	08010419 	.word	0x08010419
 80103c4:	0801042d 	.word	0x0801042d
 80103c8:	080103a9 	.word	0x080103a9
 80103cc:	080103a9 	.word	0x080103a9
 80103d0:	080103a9 	.word	0x080103a9
 80103d4:	080103a9 	.word	0x080103a9
 80103d8:	0801042d 	.word	0x0801042d
 80103dc:	080103a9 	.word	0x080103a9
 80103e0:	080103a9 	.word	0x080103a9
 80103e4:	080103a9 	.word	0x080103a9
 80103e8:	080103a9 	.word	0x080103a9
 80103ec:	08010539 	.word	0x08010539
 80103f0:	0801045d 	.word	0x0801045d
 80103f4:	0801051b 	.word	0x0801051b
 80103f8:	080103a9 	.word	0x080103a9
 80103fc:	080103a9 	.word	0x080103a9
 8010400:	0801055b 	.word	0x0801055b
 8010404:	080103a9 	.word	0x080103a9
 8010408:	0801045d 	.word	0x0801045d
 801040c:	080103a9 	.word	0x080103a9
 8010410:	080103a9 	.word	0x080103a9
 8010414:	08010523 	.word	0x08010523
 8010418:	682b      	ldr	r3, [r5, #0]
 801041a:	1d1a      	adds	r2, r3, #4
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	602a      	str	r2, [r5, #0]
 8010420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010428:	2301      	movs	r3, #1
 801042a:	e0a3      	b.n	8010574 <_printf_i+0x1f4>
 801042c:	6820      	ldr	r0, [r4, #0]
 801042e:	6829      	ldr	r1, [r5, #0]
 8010430:	0606      	lsls	r6, r0, #24
 8010432:	f101 0304 	add.w	r3, r1, #4
 8010436:	d50a      	bpl.n	801044e <_printf_i+0xce>
 8010438:	680e      	ldr	r6, [r1, #0]
 801043a:	602b      	str	r3, [r5, #0]
 801043c:	2e00      	cmp	r6, #0
 801043e:	da03      	bge.n	8010448 <_printf_i+0xc8>
 8010440:	232d      	movs	r3, #45	; 0x2d
 8010442:	4276      	negs	r6, r6
 8010444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010448:	485e      	ldr	r0, [pc, #376]	; (80105c4 <_printf_i+0x244>)
 801044a:	230a      	movs	r3, #10
 801044c:	e019      	b.n	8010482 <_printf_i+0x102>
 801044e:	680e      	ldr	r6, [r1, #0]
 8010450:	602b      	str	r3, [r5, #0]
 8010452:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010456:	bf18      	it	ne
 8010458:	b236      	sxthne	r6, r6
 801045a:	e7ef      	b.n	801043c <_printf_i+0xbc>
 801045c:	682b      	ldr	r3, [r5, #0]
 801045e:	6820      	ldr	r0, [r4, #0]
 8010460:	1d19      	adds	r1, r3, #4
 8010462:	6029      	str	r1, [r5, #0]
 8010464:	0601      	lsls	r1, r0, #24
 8010466:	d501      	bpl.n	801046c <_printf_i+0xec>
 8010468:	681e      	ldr	r6, [r3, #0]
 801046a:	e002      	b.n	8010472 <_printf_i+0xf2>
 801046c:	0646      	lsls	r6, r0, #25
 801046e:	d5fb      	bpl.n	8010468 <_printf_i+0xe8>
 8010470:	881e      	ldrh	r6, [r3, #0]
 8010472:	4854      	ldr	r0, [pc, #336]	; (80105c4 <_printf_i+0x244>)
 8010474:	2f6f      	cmp	r7, #111	; 0x6f
 8010476:	bf0c      	ite	eq
 8010478:	2308      	moveq	r3, #8
 801047a:	230a      	movne	r3, #10
 801047c:	2100      	movs	r1, #0
 801047e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010482:	6865      	ldr	r5, [r4, #4]
 8010484:	60a5      	str	r5, [r4, #8]
 8010486:	2d00      	cmp	r5, #0
 8010488:	bfa2      	ittt	ge
 801048a:	6821      	ldrge	r1, [r4, #0]
 801048c:	f021 0104 	bicge.w	r1, r1, #4
 8010490:	6021      	strge	r1, [r4, #0]
 8010492:	b90e      	cbnz	r6, 8010498 <_printf_i+0x118>
 8010494:	2d00      	cmp	r5, #0
 8010496:	d04d      	beq.n	8010534 <_printf_i+0x1b4>
 8010498:	4615      	mov	r5, r2
 801049a:	fbb6 f1f3 	udiv	r1, r6, r3
 801049e:	fb03 6711 	mls	r7, r3, r1, r6
 80104a2:	5dc7      	ldrb	r7, [r0, r7]
 80104a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80104a8:	4637      	mov	r7, r6
 80104aa:	42bb      	cmp	r3, r7
 80104ac:	460e      	mov	r6, r1
 80104ae:	d9f4      	bls.n	801049a <_printf_i+0x11a>
 80104b0:	2b08      	cmp	r3, #8
 80104b2:	d10b      	bne.n	80104cc <_printf_i+0x14c>
 80104b4:	6823      	ldr	r3, [r4, #0]
 80104b6:	07de      	lsls	r6, r3, #31
 80104b8:	d508      	bpl.n	80104cc <_printf_i+0x14c>
 80104ba:	6923      	ldr	r3, [r4, #16]
 80104bc:	6861      	ldr	r1, [r4, #4]
 80104be:	4299      	cmp	r1, r3
 80104c0:	bfde      	ittt	le
 80104c2:	2330      	movle	r3, #48	; 0x30
 80104c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80104c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80104cc:	1b52      	subs	r2, r2, r5
 80104ce:	6122      	str	r2, [r4, #16]
 80104d0:	f8cd a000 	str.w	sl, [sp]
 80104d4:	464b      	mov	r3, r9
 80104d6:	aa03      	add	r2, sp, #12
 80104d8:	4621      	mov	r1, r4
 80104da:	4640      	mov	r0, r8
 80104dc:	f7ff fee2 	bl	80102a4 <_printf_common>
 80104e0:	3001      	adds	r0, #1
 80104e2:	d14c      	bne.n	801057e <_printf_i+0x1fe>
 80104e4:	f04f 30ff 	mov.w	r0, #4294967295
 80104e8:	b004      	add	sp, #16
 80104ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104ee:	4835      	ldr	r0, [pc, #212]	; (80105c4 <_printf_i+0x244>)
 80104f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80104f4:	6829      	ldr	r1, [r5, #0]
 80104f6:	6823      	ldr	r3, [r4, #0]
 80104f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80104fc:	6029      	str	r1, [r5, #0]
 80104fe:	061d      	lsls	r5, r3, #24
 8010500:	d514      	bpl.n	801052c <_printf_i+0x1ac>
 8010502:	07df      	lsls	r7, r3, #31
 8010504:	bf44      	itt	mi
 8010506:	f043 0320 	orrmi.w	r3, r3, #32
 801050a:	6023      	strmi	r3, [r4, #0]
 801050c:	b91e      	cbnz	r6, 8010516 <_printf_i+0x196>
 801050e:	6823      	ldr	r3, [r4, #0]
 8010510:	f023 0320 	bic.w	r3, r3, #32
 8010514:	6023      	str	r3, [r4, #0]
 8010516:	2310      	movs	r3, #16
 8010518:	e7b0      	b.n	801047c <_printf_i+0xfc>
 801051a:	6823      	ldr	r3, [r4, #0]
 801051c:	f043 0320 	orr.w	r3, r3, #32
 8010520:	6023      	str	r3, [r4, #0]
 8010522:	2378      	movs	r3, #120	; 0x78
 8010524:	4828      	ldr	r0, [pc, #160]	; (80105c8 <_printf_i+0x248>)
 8010526:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801052a:	e7e3      	b.n	80104f4 <_printf_i+0x174>
 801052c:	0659      	lsls	r1, r3, #25
 801052e:	bf48      	it	mi
 8010530:	b2b6      	uxthmi	r6, r6
 8010532:	e7e6      	b.n	8010502 <_printf_i+0x182>
 8010534:	4615      	mov	r5, r2
 8010536:	e7bb      	b.n	80104b0 <_printf_i+0x130>
 8010538:	682b      	ldr	r3, [r5, #0]
 801053a:	6826      	ldr	r6, [r4, #0]
 801053c:	6961      	ldr	r1, [r4, #20]
 801053e:	1d18      	adds	r0, r3, #4
 8010540:	6028      	str	r0, [r5, #0]
 8010542:	0635      	lsls	r5, r6, #24
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	d501      	bpl.n	801054c <_printf_i+0x1cc>
 8010548:	6019      	str	r1, [r3, #0]
 801054a:	e002      	b.n	8010552 <_printf_i+0x1d2>
 801054c:	0670      	lsls	r0, r6, #25
 801054e:	d5fb      	bpl.n	8010548 <_printf_i+0x1c8>
 8010550:	8019      	strh	r1, [r3, #0]
 8010552:	2300      	movs	r3, #0
 8010554:	6123      	str	r3, [r4, #16]
 8010556:	4615      	mov	r5, r2
 8010558:	e7ba      	b.n	80104d0 <_printf_i+0x150>
 801055a:	682b      	ldr	r3, [r5, #0]
 801055c:	1d1a      	adds	r2, r3, #4
 801055e:	602a      	str	r2, [r5, #0]
 8010560:	681d      	ldr	r5, [r3, #0]
 8010562:	6862      	ldr	r2, [r4, #4]
 8010564:	2100      	movs	r1, #0
 8010566:	4628      	mov	r0, r5
 8010568:	f7ef fe3a 	bl	80001e0 <memchr>
 801056c:	b108      	cbz	r0, 8010572 <_printf_i+0x1f2>
 801056e:	1b40      	subs	r0, r0, r5
 8010570:	6060      	str	r0, [r4, #4]
 8010572:	6863      	ldr	r3, [r4, #4]
 8010574:	6123      	str	r3, [r4, #16]
 8010576:	2300      	movs	r3, #0
 8010578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801057c:	e7a8      	b.n	80104d0 <_printf_i+0x150>
 801057e:	6923      	ldr	r3, [r4, #16]
 8010580:	462a      	mov	r2, r5
 8010582:	4649      	mov	r1, r9
 8010584:	4640      	mov	r0, r8
 8010586:	47d0      	blx	sl
 8010588:	3001      	adds	r0, #1
 801058a:	d0ab      	beq.n	80104e4 <_printf_i+0x164>
 801058c:	6823      	ldr	r3, [r4, #0]
 801058e:	079b      	lsls	r3, r3, #30
 8010590:	d413      	bmi.n	80105ba <_printf_i+0x23a>
 8010592:	68e0      	ldr	r0, [r4, #12]
 8010594:	9b03      	ldr	r3, [sp, #12]
 8010596:	4298      	cmp	r0, r3
 8010598:	bfb8      	it	lt
 801059a:	4618      	movlt	r0, r3
 801059c:	e7a4      	b.n	80104e8 <_printf_i+0x168>
 801059e:	2301      	movs	r3, #1
 80105a0:	4632      	mov	r2, r6
 80105a2:	4649      	mov	r1, r9
 80105a4:	4640      	mov	r0, r8
 80105a6:	47d0      	blx	sl
 80105a8:	3001      	adds	r0, #1
 80105aa:	d09b      	beq.n	80104e4 <_printf_i+0x164>
 80105ac:	3501      	adds	r5, #1
 80105ae:	68e3      	ldr	r3, [r4, #12]
 80105b0:	9903      	ldr	r1, [sp, #12]
 80105b2:	1a5b      	subs	r3, r3, r1
 80105b4:	42ab      	cmp	r3, r5
 80105b6:	dcf2      	bgt.n	801059e <_printf_i+0x21e>
 80105b8:	e7eb      	b.n	8010592 <_printf_i+0x212>
 80105ba:	2500      	movs	r5, #0
 80105bc:	f104 0619 	add.w	r6, r4, #25
 80105c0:	e7f5      	b.n	80105ae <_printf_i+0x22e>
 80105c2:	bf00      	nop
 80105c4:	080130ae 	.word	0x080130ae
 80105c8:	080130bf 	.word	0x080130bf

080105cc <iprintf>:
 80105cc:	b40f      	push	{r0, r1, r2, r3}
 80105ce:	4b0a      	ldr	r3, [pc, #40]	; (80105f8 <iprintf+0x2c>)
 80105d0:	b513      	push	{r0, r1, r4, lr}
 80105d2:	681c      	ldr	r4, [r3, #0]
 80105d4:	b124      	cbz	r4, 80105e0 <iprintf+0x14>
 80105d6:	69a3      	ldr	r3, [r4, #24]
 80105d8:	b913      	cbnz	r3, 80105e0 <iprintf+0x14>
 80105da:	4620      	mov	r0, r4
 80105dc:	f7ff fa1c 	bl	800fa18 <__sinit>
 80105e0:	ab05      	add	r3, sp, #20
 80105e2:	9a04      	ldr	r2, [sp, #16]
 80105e4:	68a1      	ldr	r1, [r4, #8]
 80105e6:	9301      	str	r3, [sp, #4]
 80105e8:	4620      	mov	r0, r4
 80105ea:	f001 fdf9 	bl	80121e0 <_vfiprintf_r>
 80105ee:	b002      	add	sp, #8
 80105f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105f4:	b004      	add	sp, #16
 80105f6:	4770      	bx	lr
 80105f8:	20000018 	.word	0x20000018

080105fc <_puts_r>:
 80105fc:	b570      	push	{r4, r5, r6, lr}
 80105fe:	460e      	mov	r6, r1
 8010600:	4605      	mov	r5, r0
 8010602:	b118      	cbz	r0, 801060c <_puts_r+0x10>
 8010604:	6983      	ldr	r3, [r0, #24]
 8010606:	b90b      	cbnz	r3, 801060c <_puts_r+0x10>
 8010608:	f7ff fa06 	bl	800fa18 <__sinit>
 801060c:	69ab      	ldr	r3, [r5, #24]
 801060e:	68ac      	ldr	r4, [r5, #8]
 8010610:	b913      	cbnz	r3, 8010618 <_puts_r+0x1c>
 8010612:	4628      	mov	r0, r5
 8010614:	f7ff fa00 	bl	800fa18 <__sinit>
 8010618:	4b2c      	ldr	r3, [pc, #176]	; (80106cc <_puts_r+0xd0>)
 801061a:	429c      	cmp	r4, r3
 801061c:	d120      	bne.n	8010660 <_puts_r+0x64>
 801061e:	686c      	ldr	r4, [r5, #4]
 8010620:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010622:	07db      	lsls	r3, r3, #31
 8010624:	d405      	bmi.n	8010632 <_puts_r+0x36>
 8010626:	89a3      	ldrh	r3, [r4, #12]
 8010628:	0598      	lsls	r0, r3, #22
 801062a:	d402      	bmi.n	8010632 <_puts_r+0x36>
 801062c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801062e:	f7ff fab6 	bl	800fb9e <__retarget_lock_acquire_recursive>
 8010632:	89a3      	ldrh	r3, [r4, #12]
 8010634:	0719      	lsls	r1, r3, #28
 8010636:	d51d      	bpl.n	8010674 <_puts_r+0x78>
 8010638:	6923      	ldr	r3, [r4, #16]
 801063a:	b1db      	cbz	r3, 8010674 <_puts_r+0x78>
 801063c:	3e01      	subs	r6, #1
 801063e:	68a3      	ldr	r3, [r4, #8]
 8010640:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010644:	3b01      	subs	r3, #1
 8010646:	60a3      	str	r3, [r4, #8]
 8010648:	bb39      	cbnz	r1, 801069a <_puts_r+0x9e>
 801064a:	2b00      	cmp	r3, #0
 801064c:	da38      	bge.n	80106c0 <_puts_r+0xc4>
 801064e:	4622      	mov	r2, r4
 8010650:	210a      	movs	r1, #10
 8010652:	4628      	mov	r0, r5
 8010654:	f000 f906 	bl	8010864 <__swbuf_r>
 8010658:	3001      	adds	r0, #1
 801065a:	d011      	beq.n	8010680 <_puts_r+0x84>
 801065c:	250a      	movs	r5, #10
 801065e:	e011      	b.n	8010684 <_puts_r+0x88>
 8010660:	4b1b      	ldr	r3, [pc, #108]	; (80106d0 <_puts_r+0xd4>)
 8010662:	429c      	cmp	r4, r3
 8010664:	d101      	bne.n	801066a <_puts_r+0x6e>
 8010666:	68ac      	ldr	r4, [r5, #8]
 8010668:	e7da      	b.n	8010620 <_puts_r+0x24>
 801066a:	4b1a      	ldr	r3, [pc, #104]	; (80106d4 <_puts_r+0xd8>)
 801066c:	429c      	cmp	r4, r3
 801066e:	bf08      	it	eq
 8010670:	68ec      	ldreq	r4, [r5, #12]
 8010672:	e7d5      	b.n	8010620 <_puts_r+0x24>
 8010674:	4621      	mov	r1, r4
 8010676:	4628      	mov	r0, r5
 8010678:	f000 f958 	bl	801092c <__swsetup_r>
 801067c:	2800      	cmp	r0, #0
 801067e:	d0dd      	beq.n	801063c <_puts_r+0x40>
 8010680:	f04f 35ff 	mov.w	r5, #4294967295
 8010684:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010686:	07da      	lsls	r2, r3, #31
 8010688:	d405      	bmi.n	8010696 <_puts_r+0x9a>
 801068a:	89a3      	ldrh	r3, [r4, #12]
 801068c:	059b      	lsls	r3, r3, #22
 801068e:	d402      	bmi.n	8010696 <_puts_r+0x9a>
 8010690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010692:	f7ff fa85 	bl	800fba0 <__retarget_lock_release_recursive>
 8010696:	4628      	mov	r0, r5
 8010698:	bd70      	pop	{r4, r5, r6, pc}
 801069a:	2b00      	cmp	r3, #0
 801069c:	da04      	bge.n	80106a8 <_puts_r+0xac>
 801069e:	69a2      	ldr	r2, [r4, #24]
 80106a0:	429a      	cmp	r2, r3
 80106a2:	dc06      	bgt.n	80106b2 <_puts_r+0xb6>
 80106a4:	290a      	cmp	r1, #10
 80106a6:	d004      	beq.n	80106b2 <_puts_r+0xb6>
 80106a8:	6823      	ldr	r3, [r4, #0]
 80106aa:	1c5a      	adds	r2, r3, #1
 80106ac:	6022      	str	r2, [r4, #0]
 80106ae:	7019      	strb	r1, [r3, #0]
 80106b0:	e7c5      	b.n	801063e <_puts_r+0x42>
 80106b2:	4622      	mov	r2, r4
 80106b4:	4628      	mov	r0, r5
 80106b6:	f000 f8d5 	bl	8010864 <__swbuf_r>
 80106ba:	3001      	adds	r0, #1
 80106bc:	d1bf      	bne.n	801063e <_puts_r+0x42>
 80106be:	e7df      	b.n	8010680 <_puts_r+0x84>
 80106c0:	6823      	ldr	r3, [r4, #0]
 80106c2:	250a      	movs	r5, #10
 80106c4:	1c5a      	adds	r2, r3, #1
 80106c6:	6022      	str	r2, [r4, #0]
 80106c8:	701d      	strb	r5, [r3, #0]
 80106ca:	e7db      	b.n	8010684 <_puts_r+0x88>
 80106cc:	08013058 	.word	0x08013058
 80106d0:	08013078 	.word	0x08013078
 80106d4:	08013038 	.word	0x08013038

080106d8 <puts>:
 80106d8:	4b02      	ldr	r3, [pc, #8]	; (80106e4 <puts+0xc>)
 80106da:	4601      	mov	r1, r0
 80106dc:	6818      	ldr	r0, [r3, #0]
 80106de:	f7ff bf8d 	b.w	80105fc <_puts_r>
 80106e2:	bf00      	nop
 80106e4:	20000018 	.word	0x20000018

080106e8 <cleanup_glue>:
 80106e8:	b538      	push	{r3, r4, r5, lr}
 80106ea:	460c      	mov	r4, r1
 80106ec:	6809      	ldr	r1, [r1, #0]
 80106ee:	4605      	mov	r5, r0
 80106f0:	b109      	cbz	r1, 80106f6 <cleanup_glue+0xe>
 80106f2:	f7ff fff9 	bl	80106e8 <cleanup_glue>
 80106f6:	4621      	mov	r1, r4
 80106f8:	4628      	mov	r0, r5
 80106fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106fe:	f001 bcf9 	b.w	80120f4 <_free_r>
	...

08010704 <_reclaim_reent>:
 8010704:	4b2c      	ldr	r3, [pc, #176]	; (80107b8 <_reclaim_reent+0xb4>)
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	4283      	cmp	r3, r0
 801070a:	b570      	push	{r4, r5, r6, lr}
 801070c:	4604      	mov	r4, r0
 801070e:	d051      	beq.n	80107b4 <_reclaim_reent+0xb0>
 8010710:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010712:	b143      	cbz	r3, 8010726 <_reclaim_reent+0x22>
 8010714:	68db      	ldr	r3, [r3, #12]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d14a      	bne.n	80107b0 <_reclaim_reent+0xac>
 801071a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801071c:	6819      	ldr	r1, [r3, #0]
 801071e:	b111      	cbz	r1, 8010726 <_reclaim_reent+0x22>
 8010720:	4620      	mov	r0, r4
 8010722:	f001 fce7 	bl	80120f4 <_free_r>
 8010726:	6961      	ldr	r1, [r4, #20]
 8010728:	b111      	cbz	r1, 8010730 <_reclaim_reent+0x2c>
 801072a:	4620      	mov	r0, r4
 801072c:	f001 fce2 	bl	80120f4 <_free_r>
 8010730:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010732:	b111      	cbz	r1, 801073a <_reclaim_reent+0x36>
 8010734:	4620      	mov	r0, r4
 8010736:	f001 fcdd 	bl	80120f4 <_free_r>
 801073a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801073c:	b111      	cbz	r1, 8010744 <_reclaim_reent+0x40>
 801073e:	4620      	mov	r0, r4
 8010740:	f001 fcd8 	bl	80120f4 <_free_r>
 8010744:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8010746:	b111      	cbz	r1, 801074e <_reclaim_reent+0x4a>
 8010748:	4620      	mov	r0, r4
 801074a:	f001 fcd3 	bl	80120f4 <_free_r>
 801074e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010750:	b111      	cbz	r1, 8010758 <_reclaim_reent+0x54>
 8010752:	4620      	mov	r0, r4
 8010754:	f001 fcce 	bl	80120f4 <_free_r>
 8010758:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801075a:	b111      	cbz	r1, 8010762 <_reclaim_reent+0x5e>
 801075c:	4620      	mov	r0, r4
 801075e:	f001 fcc9 	bl	80120f4 <_free_r>
 8010762:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8010764:	b111      	cbz	r1, 801076c <_reclaim_reent+0x68>
 8010766:	4620      	mov	r0, r4
 8010768:	f001 fcc4 	bl	80120f4 <_free_r>
 801076c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801076e:	b111      	cbz	r1, 8010776 <_reclaim_reent+0x72>
 8010770:	4620      	mov	r0, r4
 8010772:	f001 fcbf 	bl	80120f4 <_free_r>
 8010776:	69a3      	ldr	r3, [r4, #24]
 8010778:	b1e3      	cbz	r3, 80107b4 <_reclaim_reent+0xb0>
 801077a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801077c:	4620      	mov	r0, r4
 801077e:	4798      	blx	r3
 8010780:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010782:	b1b9      	cbz	r1, 80107b4 <_reclaim_reent+0xb0>
 8010784:	4620      	mov	r0, r4
 8010786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801078a:	f7ff bfad 	b.w	80106e8 <cleanup_glue>
 801078e:	5949      	ldr	r1, [r1, r5]
 8010790:	b941      	cbnz	r1, 80107a4 <_reclaim_reent+0xa0>
 8010792:	3504      	adds	r5, #4
 8010794:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010796:	2d80      	cmp	r5, #128	; 0x80
 8010798:	68d9      	ldr	r1, [r3, #12]
 801079a:	d1f8      	bne.n	801078e <_reclaim_reent+0x8a>
 801079c:	4620      	mov	r0, r4
 801079e:	f001 fca9 	bl	80120f4 <_free_r>
 80107a2:	e7ba      	b.n	801071a <_reclaim_reent+0x16>
 80107a4:	680e      	ldr	r6, [r1, #0]
 80107a6:	4620      	mov	r0, r4
 80107a8:	f001 fca4 	bl	80120f4 <_free_r>
 80107ac:	4631      	mov	r1, r6
 80107ae:	e7ef      	b.n	8010790 <_reclaim_reent+0x8c>
 80107b0:	2500      	movs	r5, #0
 80107b2:	e7ef      	b.n	8010794 <_reclaim_reent+0x90>
 80107b4:	bd70      	pop	{r4, r5, r6, pc}
 80107b6:	bf00      	nop
 80107b8:	20000018 	.word	0x20000018

080107bc <_sbrk_r>:
 80107bc:	b538      	push	{r3, r4, r5, lr}
 80107be:	4d06      	ldr	r5, [pc, #24]	; (80107d8 <_sbrk_r+0x1c>)
 80107c0:	2300      	movs	r3, #0
 80107c2:	4604      	mov	r4, r0
 80107c4:	4608      	mov	r0, r1
 80107c6:	602b      	str	r3, [r5, #0]
 80107c8:	f7f2 fb1e 	bl	8002e08 <_sbrk>
 80107cc:	1c43      	adds	r3, r0, #1
 80107ce:	d102      	bne.n	80107d6 <_sbrk_r+0x1a>
 80107d0:	682b      	ldr	r3, [r5, #0]
 80107d2:	b103      	cbz	r3, 80107d6 <_sbrk_r+0x1a>
 80107d4:	6023      	str	r3, [r4, #0]
 80107d6:	bd38      	pop	{r3, r4, r5, pc}
 80107d8:	20005708 	.word	0x20005708

080107dc <__sread>:
 80107dc:	b510      	push	{r4, lr}
 80107de:	460c      	mov	r4, r1
 80107e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107e4:	f001 fe2c 	bl	8012440 <_read_r>
 80107e8:	2800      	cmp	r0, #0
 80107ea:	bfab      	itete	ge
 80107ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80107ee:	89a3      	ldrhlt	r3, [r4, #12]
 80107f0:	181b      	addge	r3, r3, r0
 80107f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80107f6:	bfac      	ite	ge
 80107f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80107fa:	81a3      	strhlt	r3, [r4, #12]
 80107fc:	bd10      	pop	{r4, pc}

080107fe <__swrite>:
 80107fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010802:	461f      	mov	r7, r3
 8010804:	898b      	ldrh	r3, [r1, #12]
 8010806:	05db      	lsls	r3, r3, #23
 8010808:	4605      	mov	r5, r0
 801080a:	460c      	mov	r4, r1
 801080c:	4616      	mov	r6, r2
 801080e:	d505      	bpl.n	801081c <__swrite+0x1e>
 8010810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010814:	2302      	movs	r3, #2
 8010816:	2200      	movs	r2, #0
 8010818:	f001 f846 	bl	80118a8 <_lseek_r>
 801081c:	89a3      	ldrh	r3, [r4, #12]
 801081e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010822:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010826:	81a3      	strh	r3, [r4, #12]
 8010828:	4632      	mov	r2, r6
 801082a:	463b      	mov	r3, r7
 801082c:	4628      	mov	r0, r5
 801082e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010832:	f000 b869 	b.w	8010908 <_write_r>

08010836 <__sseek>:
 8010836:	b510      	push	{r4, lr}
 8010838:	460c      	mov	r4, r1
 801083a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801083e:	f001 f833 	bl	80118a8 <_lseek_r>
 8010842:	1c43      	adds	r3, r0, #1
 8010844:	89a3      	ldrh	r3, [r4, #12]
 8010846:	bf15      	itete	ne
 8010848:	6560      	strne	r0, [r4, #84]	; 0x54
 801084a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801084e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010852:	81a3      	strheq	r3, [r4, #12]
 8010854:	bf18      	it	ne
 8010856:	81a3      	strhne	r3, [r4, #12]
 8010858:	bd10      	pop	{r4, pc}

0801085a <__sclose>:
 801085a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801085e:	f000 b8d3 	b.w	8010a08 <_close_r>
	...

08010864 <__swbuf_r>:
 8010864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010866:	460e      	mov	r6, r1
 8010868:	4614      	mov	r4, r2
 801086a:	4605      	mov	r5, r0
 801086c:	b118      	cbz	r0, 8010876 <__swbuf_r+0x12>
 801086e:	6983      	ldr	r3, [r0, #24]
 8010870:	b90b      	cbnz	r3, 8010876 <__swbuf_r+0x12>
 8010872:	f7ff f8d1 	bl	800fa18 <__sinit>
 8010876:	4b21      	ldr	r3, [pc, #132]	; (80108fc <__swbuf_r+0x98>)
 8010878:	429c      	cmp	r4, r3
 801087a:	d12b      	bne.n	80108d4 <__swbuf_r+0x70>
 801087c:	686c      	ldr	r4, [r5, #4]
 801087e:	69a3      	ldr	r3, [r4, #24]
 8010880:	60a3      	str	r3, [r4, #8]
 8010882:	89a3      	ldrh	r3, [r4, #12]
 8010884:	071a      	lsls	r2, r3, #28
 8010886:	d52f      	bpl.n	80108e8 <__swbuf_r+0x84>
 8010888:	6923      	ldr	r3, [r4, #16]
 801088a:	b36b      	cbz	r3, 80108e8 <__swbuf_r+0x84>
 801088c:	6923      	ldr	r3, [r4, #16]
 801088e:	6820      	ldr	r0, [r4, #0]
 8010890:	1ac0      	subs	r0, r0, r3
 8010892:	6963      	ldr	r3, [r4, #20]
 8010894:	b2f6      	uxtb	r6, r6
 8010896:	4283      	cmp	r3, r0
 8010898:	4637      	mov	r7, r6
 801089a:	dc04      	bgt.n	80108a6 <__swbuf_r+0x42>
 801089c:	4621      	mov	r1, r4
 801089e:	4628      	mov	r0, r5
 80108a0:	f000 ffc2 	bl	8011828 <_fflush_r>
 80108a4:	bb30      	cbnz	r0, 80108f4 <__swbuf_r+0x90>
 80108a6:	68a3      	ldr	r3, [r4, #8]
 80108a8:	3b01      	subs	r3, #1
 80108aa:	60a3      	str	r3, [r4, #8]
 80108ac:	6823      	ldr	r3, [r4, #0]
 80108ae:	1c5a      	adds	r2, r3, #1
 80108b0:	6022      	str	r2, [r4, #0]
 80108b2:	701e      	strb	r6, [r3, #0]
 80108b4:	6963      	ldr	r3, [r4, #20]
 80108b6:	3001      	adds	r0, #1
 80108b8:	4283      	cmp	r3, r0
 80108ba:	d004      	beq.n	80108c6 <__swbuf_r+0x62>
 80108bc:	89a3      	ldrh	r3, [r4, #12]
 80108be:	07db      	lsls	r3, r3, #31
 80108c0:	d506      	bpl.n	80108d0 <__swbuf_r+0x6c>
 80108c2:	2e0a      	cmp	r6, #10
 80108c4:	d104      	bne.n	80108d0 <__swbuf_r+0x6c>
 80108c6:	4621      	mov	r1, r4
 80108c8:	4628      	mov	r0, r5
 80108ca:	f000 ffad 	bl	8011828 <_fflush_r>
 80108ce:	b988      	cbnz	r0, 80108f4 <__swbuf_r+0x90>
 80108d0:	4638      	mov	r0, r7
 80108d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108d4:	4b0a      	ldr	r3, [pc, #40]	; (8010900 <__swbuf_r+0x9c>)
 80108d6:	429c      	cmp	r4, r3
 80108d8:	d101      	bne.n	80108de <__swbuf_r+0x7a>
 80108da:	68ac      	ldr	r4, [r5, #8]
 80108dc:	e7cf      	b.n	801087e <__swbuf_r+0x1a>
 80108de:	4b09      	ldr	r3, [pc, #36]	; (8010904 <__swbuf_r+0xa0>)
 80108e0:	429c      	cmp	r4, r3
 80108e2:	bf08      	it	eq
 80108e4:	68ec      	ldreq	r4, [r5, #12]
 80108e6:	e7ca      	b.n	801087e <__swbuf_r+0x1a>
 80108e8:	4621      	mov	r1, r4
 80108ea:	4628      	mov	r0, r5
 80108ec:	f000 f81e 	bl	801092c <__swsetup_r>
 80108f0:	2800      	cmp	r0, #0
 80108f2:	d0cb      	beq.n	801088c <__swbuf_r+0x28>
 80108f4:	f04f 37ff 	mov.w	r7, #4294967295
 80108f8:	e7ea      	b.n	80108d0 <__swbuf_r+0x6c>
 80108fa:	bf00      	nop
 80108fc:	08013058 	.word	0x08013058
 8010900:	08013078 	.word	0x08013078
 8010904:	08013038 	.word	0x08013038

08010908 <_write_r>:
 8010908:	b538      	push	{r3, r4, r5, lr}
 801090a:	4d07      	ldr	r5, [pc, #28]	; (8010928 <_write_r+0x20>)
 801090c:	4604      	mov	r4, r0
 801090e:	4608      	mov	r0, r1
 8010910:	4611      	mov	r1, r2
 8010912:	2200      	movs	r2, #0
 8010914:	602a      	str	r2, [r5, #0]
 8010916:	461a      	mov	r2, r3
 8010918:	f7f2 fa25 	bl	8002d66 <_write>
 801091c:	1c43      	adds	r3, r0, #1
 801091e:	d102      	bne.n	8010926 <_write_r+0x1e>
 8010920:	682b      	ldr	r3, [r5, #0]
 8010922:	b103      	cbz	r3, 8010926 <_write_r+0x1e>
 8010924:	6023      	str	r3, [r4, #0]
 8010926:	bd38      	pop	{r3, r4, r5, pc}
 8010928:	20005708 	.word	0x20005708

0801092c <__swsetup_r>:
 801092c:	4b32      	ldr	r3, [pc, #200]	; (80109f8 <__swsetup_r+0xcc>)
 801092e:	b570      	push	{r4, r5, r6, lr}
 8010930:	681d      	ldr	r5, [r3, #0]
 8010932:	4606      	mov	r6, r0
 8010934:	460c      	mov	r4, r1
 8010936:	b125      	cbz	r5, 8010942 <__swsetup_r+0x16>
 8010938:	69ab      	ldr	r3, [r5, #24]
 801093a:	b913      	cbnz	r3, 8010942 <__swsetup_r+0x16>
 801093c:	4628      	mov	r0, r5
 801093e:	f7ff f86b 	bl	800fa18 <__sinit>
 8010942:	4b2e      	ldr	r3, [pc, #184]	; (80109fc <__swsetup_r+0xd0>)
 8010944:	429c      	cmp	r4, r3
 8010946:	d10f      	bne.n	8010968 <__swsetup_r+0x3c>
 8010948:	686c      	ldr	r4, [r5, #4]
 801094a:	89a3      	ldrh	r3, [r4, #12]
 801094c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010950:	0719      	lsls	r1, r3, #28
 8010952:	d42c      	bmi.n	80109ae <__swsetup_r+0x82>
 8010954:	06dd      	lsls	r5, r3, #27
 8010956:	d411      	bmi.n	801097c <__swsetup_r+0x50>
 8010958:	2309      	movs	r3, #9
 801095a:	6033      	str	r3, [r6, #0]
 801095c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010960:	81a3      	strh	r3, [r4, #12]
 8010962:	f04f 30ff 	mov.w	r0, #4294967295
 8010966:	e03e      	b.n	80109e6 <__swsetup_r+0xba>
 8010968:	4b25      	ldr	r3, [pc, #148]	; (8010a00 <__swsetup_r+0xd4>)
 801096a:	429c      	cmp	r4, r3
 801096c:	d101      	bne.n	8010972 <__swsetup_r+0x46>
 801096e:	68ac      	ldr	r4, [r5, #8]
 8010970:	e7eb      	b.n	801094a <__swsetup_r+0x1e>
 8010972:	4b24      	ldr	r3, [pc, #144]	; (8010a04 <__swsetup_r+0xd8>)
 8010974:	429c      	cmp	r4, r3
 8010976:	bf08      	it	eq
 8010978:	68ec      	ldreq	r4, [r5, #12]
 801097a:	e7e6      	b.n	801094a <__swsetup_r+0x1e>
 801097c:	0758      	lsls	r0, r3, #29
 801097e:	d512      	bpl.n	80109a6 <__swsetup_r+0x7a>
 8010980:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010982:	b141      	cbz	r1, 8010996 <__swsetup_r+0x6a>
 8010984:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010988:	4299      	cmp	r1, r3
 801098a:	d002      	beq.n	8010992 <__swsetup_r+0x66>
 801098c:	4630      	mov	r0, r6
 801098e:	f001 fbb1 	bl	80120f4 <_free_r>
 8010992:	2300      	movs	r3, #0
 8010994:	6363      	str	r3, [r4, #52]	; 0x34
 8010996:	89a3      	ldrh	r3, [r4, #12]
 8010998:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801099c:	81a3      	strh	r3, [r4, #12]
 801099e:	2300      	movs	r3, #0
 80109a0:	6063      	str	r3, [r4, #4]
 80109a2:	6923      	ldr	r3, [r4, #16]
 80109a4:	6023      	str	r3, [r4, #0]
 80109a6:	89a3      	ldrh	r3, [r4, #12]
 80109a8:	f043 0308 	orr.w	r3, r3, #8
 80109ac:	81a3      	strh	r3, [r4, #12]
 80109ae:	6923      	ldr	r3, [r4, #16]
 80109b0:	b94b      	cbnz	r3, 80109c6 <__swsetup_r+0x9a>
 80109b2:	89a3      	ldrh	r3, [r4, #12]
 80109b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80109b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80109bc:	d003      	beq.n	80109c6 <__swsetup_r+0x9a>
 80109be:	4621      	mov	r1, r4
 80109c0:	4630      	mov	r0, r6
 80109c2:	f000 ffa9 	bl	8011918 <__smakebuf_r>
 80109c6:	89a0      	ldrh	r0, [r4, #12]
 80109c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80109cc:	f010 0301 	ands.w	r3, r0, #1
 80109d0:	d00a      	beq.n	80109e8 <__swsetup_r+0xbc>
 80109d2:	2300      	movs	r3, #0
 80109d4:	60a3      	str	r3, [r4, #8]
 80109d6:	6963      	ldr	r3, [r4, #20]
 80109d8:	425b      	negs	r3, r3
 80109da:	61a3      	str	r3, [r4, #24]
 80109dc:	6923      	ldr	r3, [r4, #16]
 80109de:	b943      	cbnz	r3, 80109f2 <__swsetup_r+0xc6>
 80109e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80109e4:	d1ba      	bne.n	801095c <__swsetup_r+0x30>
 80109e6:	bd70      	pop	{r4, r5, r6, pc}
 80109e8:	0781      	lsls	r1, r0, #30
 80109ea:	bf58      	it	pl
 80109ec:	6963      	ldrpl	r3, [r4, #20]
 80109ee:	60a3      	str	r3, [r4, #8]
 80109f0:	e7f4      	b.n	80109dc <__swsetup_r+0xb0>
 80109f2:	2000      	movs	r0, #0
 80109f4:	e7f7      	b.n	80109e6 <__swsetup_r+0xba>
 80109f6:	bf00      	nop
 80109f8:	20000018 	.word	0x20000018
 80109fc:	08013058 	.word	0x08013058
 8010a00:	08013078 	.word	0x08013078
 8010a04:	08013038 	.word	0x08013038

08010a08 <_close_r>:
 8010a08:	b538      	push	{r3, r4, r5, lr}
 8010a0a:	4d06      	ldr	r5, [pc, #24]	; (8010a24 <_close_r+0x1c>)
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	4604      	mov	r4, r0
 8010a10:	4608      	mov	r0, r1
 8010a12:	602b      	str	r3, [r5, #0]
 8010a14:	f7f2 f9c3 	bl	8002d9e <_close>
 8010a18:	1c43      	adds	r3, r0, #1
 8010a1a:	d102      	bne.n	8010a22 <_close_r+0x1a>
 8010a1c:	682b      	ldr	r3, [r5, #0]
 8010a1e:	b103      	cbz	r3, 8010a22 <_close_r+0x1a>
 8010a20:	6023      	str	r3, [r4, #0]
 8010a22:	bd38      	pop	{r3, r4, r5, pc}
 8010a24:	20005708 	.word	0x20005708

08010a28 <quorem>:
 8010a28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a2c:	6903      	ldr	r3, [r0, #16]
 8010a2e:	690c      	ldr	r4, [r1, #16]
 8010a30:	42a3      	cmp	r3, r4
 8010a32:	4607      	mov	r7, r0
 8010a34:	f2c0 8081 	blt.w	8010b3a <quorem+0x112>
 8010a38:	3c01      	subs	r4, #1
 8010a3a:	f101 0814 	add.w	r8, r1, #20
 8010a3e:	f100 0514 	add.w	r5, r0, #20
 8010a42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010a46:	9301      	str	r3, [sp, #4]
 8010a48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010a4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010a50:	3301      	adds	r3, #1
 8010a52:	429a      	cmp	r2, r3
 8010a54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010a58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010a5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8010a60:	d331      	bcc.n	8010ac6 <quorem+0x9e>
 8010a62:	f04f 0e00 	mov.w	lr, #0
 8010a66:	4640      	mov	r0, r8
 8010a68:	46ac      	mov	ip, r5
 8010a6a:	46f2      	mov	sl, lr
 8010a6c:	f850 2b04 	ldr.w	r2, [r0], #4
 8010a70:	b293      	uxth	r3, r2
 8010a72:	fb06 e303 	mla	r3, r6, r3, lr
 8010a76:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010a7a:	b29b      	uxth	r3, r3
 8010a7c:	ebaa 0303 	sub.w	r3, sl, r3
 8010a80:	f8dc a000 	ldr.w	sl, [ip]
 8010a84:	0c12      	lsrs	r2, r2, #16
 8010a86:	fa13 f38a 	uxtah	r3, r3, sl
 8010a8a:	fb06 e202 	mla	r2, r6, r2, lr
 8010a8e:	9300      	str	r3, [sp, #0]
 8010a90:	9b00      	ldr	r3, [sp, #0]
 8010a92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010a96:	b292      	uxth	r2, r2
 8010a98:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010a9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010aa0:	f8bd 3000 	ldrh.w	r3, [sp]
 8010aa4:	4581      	cmp	r9, r0
 8010aa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010aaa:	f84c 3b04 	str.w	r3, [ip], #4
 8010aae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010ab2:	d2db      	bcs.n	8010a6c <quorem+0x44>
 8010ab4:	f855 300b 	ldr.w	r3, [r5, fp]
 8010ab8:	b92b      	cbnz	r3, 8010ac6 <quorem+0x9e>
 8010aba:	9b01      	ldr	r3, [sp, #4]
 8010abc:	3b04      	subs	r3, #4
 8010abe:	429d      	cmp	r5, r3
 8010ac0:	461a      	mov	r2, r3
 8010ac2:	d32e      	bcc.n	8010b22 <quorem+0xfa>
 8010ac4:	613c      	str	r4, [r7, #16]
 8010ac6:	4638      	mov	r0, r7
 8010ac8:	f001 f9fc 	bl	8011ec4 <__mcmp>
 8010acc:	2800      	cmp	r0, #0
 8010ace:	db24      	blt.n	8010b1a <quorem+0xf2>
 8010ad0:	3601      	adds	r6, #1
 8010ad2:	4628      	mov	r0, r5
 8010ad4:	f04f 0c00 	mov.w	ip, #0
 8010ad8:	f858 2b04 	ldr.w	r2, [r8], #4
 8010adc:	f8d0 e000 	ldr.w	lr, [r0]
 8010ae0:	b293      	uxth	r3, r2
 8010ae2:	ebac 0303 	sub.w	r3, ip, r3
 8010ae6:	0c12      	lsrs	r2, r2, #16
 8010ae8:	fa13 f38e 	uxtah	r3, r3, lr
 8010aec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010af0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010af4:	b29b      	uxth	r3, r3
 8010af6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010afa:	45c1      	cmp	r9, r8
 8010afc:	f840 3b04 	str.w	r3, [r0], #4
 8010b00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010b04:	d2e8      	bcs.n	8010ad8 <quorem+0xb0>
 8010b06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010b0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010b0e:	b922      	cbnz	r2, 8010b1a <quorem+0xf2>
 8010b10:	3b04      	subs	r3, #4
 8010b12:	429d      	cmp	r5, r3
 8010b14:	461a      	mov	r2, r3
 8010b16:	d30a      	bcc.n	8010b2e <quorem+0x106>
 8010b18:	613c      	str	r4, [r7, #16]
 8010b1a:	4630      	mov	r0, r6
 8010b1c:	b003      	add	sp, #12
 8010b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b22:	6812      	ldr	r2, [r2, #0]
 8010b24:	3b04      	subs	r3, #4
 8010b26:	2a00      	cmp	r2, #0
 8010b28:	d1cc      	bne.n	8010ac4 <quorem+0x9c>
 8010b2a:	3c01      	subs	r4, #1
 8010b2c:	e7c7      	b.n	8010abe <quorem+0x96>
 8010b2e:	6812      	ldr	r2, [r2, #0]
 8010b30:	3b04      	subs	r3, #4
 8010b32:	2a00      	cmp	r2, #0
 8010b34:	d1f0      	bne.n	8010b18 <quorem+0xf0>
 8010b36:	3c01      	subs	r4, #1
 8010b38:	e7eb      	b.n	8010b12 <quorem+0xea>
 8010b3a:	2000      	movs	r0, #0
 8010b3c:	e7ee      	b.n	8010b1c <quorem+0xf4>
	...

08010b40 <_dtoa_r>:
 8010b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b44:	ed2d 8b04 	vpush	{d8-d9}
 8010b48:	ec57 6b10 	vmov	r6, r7, d0
 8010b4c:	b093      	sub	sp, #76	; 0x4c
 8010b4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010b50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010b54:	9106      	str	r1, [sp, #24]
 8010b56:	ee10 aa10 	vmov	sl, s0
 8010b5a:	4604      	mov	r4, r0
 8010b5c:	9209      	str	r2, [sp, #36]	; 0x24
 8010b5e:	930c      	str	r3, [sp, #48]	; 0x30
 8010b60:	46bb      	mov	fp, r7
 8010b62:	b975      	cbnz	r5, 8010b82 <_dtoa_r+0x42>
 8010b64:	2010      	movs	r0, #16
 8010b66:	f000 ff17 	bl	8011998 <malloc>
 8010b6a:	4602      	mov	r2, r0
 8010b6c:	6260      	str	r0, [r4, #36]	; 0x24
 8010b6e:	b920      	cbnz	r0, 8010b7a <_dtoa_r+0x3a>
 8010b70:	4ba7      	ldr	r3, [pc, #668]	; (8010e10 <_dtoa_r+0x2d0>)
 8010b72:	21ea      	movs	r1, #234	; 0xea
 8010b74:	48a7      	ldr	r0, [pc, #668]	; (8010e14 <_dtoa_r+0x2d4>)
 8010b76:	f001 fc75 	bl	8012464 <__assert_func>
 8010b7a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010b7e:	6005      	str	r5, [r0, #0]
 8010b80:	60c5      	str	r5, [r0, #12]
 8010b82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b84:	6819      	ldr	r1, [r3, #0]
 8010b86:	b151      	cbz	r1, 8010b9e <_dtoa_r+0x5e>
 8010b88:	685a      	ldr	r2, [r3, #4]
 8010b8a:	604a      	str	r2, [r1, #4]
 8010b8c:	2301      	movs	r3, #1
 8010b8e:	4093      	lsls	r3, r2
 8010b90:	608b      	str	r3, [r1, #8]
 8010b92:	4620      	mov	r0, r4
 8010b94:	f000 ff54 	bl	8011a40 <_Bfree>
 8010b98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	601a      	str	r2, [r3, #0]
 8010b9e:	1e3b      	subs	r3, r7, #0
 8010ba0:	bfaa      	itet	ge
 8010ba2:	2300      	movge	r3, #0
 8010ba4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010ba8:	f8c8 3000 	strge.w	r3, [r8]
 8010bac:	4b9a      	ldr	r3, [pc, #616]	; (8010e18 <_dtoa_r+0x2d8>)
 8010bae:	bfbc      	itt	lt
 8010bb0:	2201      	movlt	r2, #1
 8010bb2:	f8c8 2000 	strlt.w	r2, [r8]
 8010bb6:	ea33 030b 	bics.w	r3, r3, fp
 8010bba:	d11b      	bne.n	8010bf4 <_dtoa_r+0xb4>
 8010bbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010bbe:	f242 730f 	movw	r3, #9999	; 0x270f
 8010bc2:	6013      	str	r3, [r2, #0]
 8010bc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010bc8:	4333      	orrs	r3, r6
 8010bca:	f000 8592 	beq.w	80116f2 <_dtoa_r+0xbb2>
 8010bce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010bd0:	b963      	cbnz	r3, 8010bec <_dtoa_r+0xac>
 8010bd2:	4b92      	ldr	r3, [pc, #584]	; (8010e1c <_dtoa_r+0x2dc>)
 8010bd4:	e022      	b.n	8010c1c <_dtoa_r+0xdc>
 8010bd6:	4b92      	ldr	r3, [pc, #584]	; (8010e20 <_dtoa_r+0x2e0>)
 8010bd8:	9301      	str	r3, [sp, #4]
 8010bda:	3308      	adds	r3, #8
 8010bdc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010bde:	6013      	str	r3, [r2, #0]
 8010be0:	9801      	ldr	r0, [sp, #4]
 8010be2:	b013      	add	sp, #76	; 0x4c
 8010be4:	ecbd 8b04 	vpop	{d8-d9}
 8010be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bec:	4b8b      	ldr	r3, [pc, #556]	; (8010e1c <_dtoa_r+0x2dc>)
 8010bee:	9301      	str	r3, [sp, #4]
 8010bf0:	3303      	adds	r3, #3
 8010bf2:	e7f3      	b.n	8010bdc <_dtoa_r+0x9c>
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	4650      	mov	r0, sl
 8010bfa:	4659      	mov	r1, fp
 8010bfc:	f7ef ff64 	bl	8000ac8 <__aeabi_dcmpeq>
 8010c00:	ec4b ab19 	vmov	d9, sl, fp
 8010c04:	4680      	mov	r8, r0
 8010c06:	b158      	cbz	r0, 8010c20 <_dtoa_r+0xe0>
 8010c08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	6013      	str	r3, [r2, #0]
 8010c0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	f000 856b 	beq.w	80116ec <_dtoa_r+0xbac>
 8010c16:	4883      	ldr	r0, [pc, #524]	; (8010e24 <_dtoa_r+0x2e4>)
 8010c18:	6018      	str	r0, [r3, #0]
 8010c1a:	1e43      	subs	r3, r0, #1
 8010c1c:	9301      	str	r3, [sp, #4]
 8010c1e:	e7df      	b.n	8010be0 <_dtoa_r+0xa0>
 8010c20:	ec4b ab10 	vmov	d0, sl, fp
 8010c24:	aa10      	add	r2, sp, #64	; 0x40
 8010c26:	a911      	add	r1, sp, #68	; 0x44
 8010c28:	4620      	mov	r0, r4
 8010c2a:	f001 f9f1 	bl	8012010 <__d2b>
 8010c2e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010c32:	ee08 0a10 	vmov	s16, r0
 8010c36:	2d00      	cmp	r5, #0
 8010c38:	f000 8084 	beq.w	8010d44 <_dtoa_r+0x204>
 8010c3c:	ee19 3a90 	vmov	r3, s19
 8010c40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010c44:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010c48:	4656      	mov	r6, sl
 8010c4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010c4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010c52:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010c56:	4b74      	ldr	r3, [pc, #464]	; (8010e28 <_dtoa_r+0x2e8>)
 8010c58:	2200      	movs	r2, #0
 8010c5a:	4630      	mov	r0, r6
 8010c5c:	4639      	mov	r1, r7
 8010c5e:	f7ef fb13 	bl	8000288 <__aeabi_dsub>
 8010c62:	a365      	add	r3, pc, #404	; (adr r3, 8010df8 <_dtoa_r+0x2b8>)
 8010c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c68:	f7ef fcc6 	bl	80005f8 <__aeabi_dmul>
 8010c6c:	a364      	add	r3, pc, #400	; (adr r3, 8010e00 <_dtoa_r+0x2c0>)
 8010c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c72:	f7ef fb0b 	bl	800028c <__adddf3>
 8010c76:	4606      	mov	r6, r0
 8010c78:	4628      	mov	r0, r5
 8010c7a:	460f      	mov	r7, r1
 8010c7c:	f7ef fc52 	bl	8000524 <__aeabi_i2d>
 8010c80:	a361      	add	r3, pc, #388	; (adr r3, 8010e08 <_dtoa_r+0x2c8>)
 8010c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c86:	f7ef fcb7 	bl	80005f8 <__aeabi_dmul>
 8010c8a:	4602      	mov	r2, r0
 8010c8c:	460b      	mov	r3, r1
 8010c8e:	4630      	mov	r0, r6
 8010c90:	4639      	mov	r1, r7
 8010c92:	f7ef fafb 	bl	800028c <__adddf3>
 8010c96:	4606      	mov	r6, r0
 8010c98:	460f      	mov	r7, r1
 8010c9a:	f7ef ff5d 	bl	8000b58 <__aeabi_d2iz>
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	9000      	str	r0, [sp, #0]
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	4630      	mov	r0, r6
 8010ca6:	4639      	mov	r1, r7
 8010ca8:	f7ef ff18 	bl	8000adc <__aeabi_dcmplt>
 8010cac:	b150      	cbz	r0, 8010cc4 <_dtoa_r+0x184>
 8010cae:	9800      	ldr	r0, [sp, #0]
 8010cb0:	f7ef fc38 	bl	8000524 <__aeabi_i2d>
 8010cb4:	4632      	mov	r2, r6
 8010cb6:	463b      	mov	r3, r7
 8010cb8:	f7ef ff06 	bl	8000ac8 <__aeabi_dcmpeq>
 8010cbc:	b910      	cbnz	r0, 8010cc4 <_dtoa_r+0x184>
 8010cbe:	9b00      	ldr	r3, [sp, #0]
 8010cc0:	3b01      	subs	r3, #1
 8010cc2:	9300      	str	r3, [sp, #0]
 8010cc4:	9b00      	ldr	r3, [sp, #0]
 8010cc6:	2b16      	cmp	r3, #22
 8010cc8:	d85a      	bhi.n	8010d80 <_dtoa_r+0x240>
 8010cca:	9a00      	ldr	r2, [sp, #0]
 8010ccc:	4b57      	ldr	r3, [pc, #348]	; (8010e2c <_dtoa_r+0x2ec>)
 8010cce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cd6:	ec51 0b19 	vmov	r0, r1, d9
 8010cda:	f7ef feff 	bl	8000adc <__aeabi_dcmplt>
 8010cde:	2800      	cmp	r0, #0
 8010ce0:	d050      	beq.n	8010d84 <_dtoa_r+0x244>
 8010ce2:	9b00      	ldr	r3, [sp, #0]
 8010ce4:	3b01      	subs	r3, #1
 8010ce6:	9300      	str	r3, [sp, #0]
 8010ce8:	2300      	movs	r3, #0
 8010cea:	930b      	str	r3, [sp, #44]	; 0x2c
 8010cec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010cee:	1b5d      	subs	r5, r3, r5
 8010cf0:	1e6b      	subs	r3, r5, #1
 8010cf2:	9305      	str	r3, [sp, #20]
 8010cf4:	bf45      	ittet	mi
 8010cf6:	f1c5 0301 	rsbmi	r3, r5, #1
 8010cfa:	9304      	strmi	r3, [sp, #16]
 8010cfc:	2300      	movpl	r3, #0
 8010cfe:	2300      	movmi	r3, #0
 8010d00:	bf4c      	ite	mi
 8010d02:	9305      	strmi	r3, [sp, #20]
 8010d04:	9304      	strpl	r3, [sp, #16]
 8010d06:	9b00      	ldr	r3, [sp, #0]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	db3d      	blt.n	8010d88 <_dtoa_r+0x248>
 8010d0c:	9b05      	ldr	r3, [sp, #20]
 8010d0e:	9a00      	ldr	r2, [sp, #0]
 8010d10:	920a      	str	r2, [sp, #40]	; 0x28
 8010d12:	4413      	add	r3, r2
 8010d14:	9305      	str	r3, [sp, #20]
 8010d16:	2300      	movs	r3, #0
 8010d18:	9307      	str	r3, [sp, #28]
 8010d1a:	9b06      	ldr	r3, [sp, #24]
 8010d1c:	2b09      	cmp	r3, #9
 8010d1e:	f200 8089 	bhi.w	8010e34 <_dtoa_r+0x2f4>
 8010d22:	2b05      	cmp	r3, #5
 8010d24:	bfc4      	itt	gt
 8010d26:	3b04      	subgt	r3, #4
 8010d28:	9306      	strgt	r3, [sp, #24]
 8010d2a:	9b06      	ldr	r3, [sp, #24]
 8010d2c:	f1a3 0302 	sub.w	r3, r3, #2
 8010d30:	bfcc      	ite	gt
 8010d32:	2500      	movgt	r5, #0
 8010d34:	2501      	movle	r5, #1
 8010d36:	2b03      	cmp	r3, #3
 8010d38:	f200 8087 	bhi.w	8010e4a <_dtoa_r+0x30a>
 8010d3c:	e8df f003 	tbb	[pc, r3]
 8010d40:	59383a2d 	.word	0x59383a2d
 8010d44:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010d48:	441d      	add	r5, r3
 8010d4a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010d4e:	2b20      	cmp	r3, #32
 8010d50:	bfc1      	itttt	gt
 8010d52:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010d56:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010d5a:	fa0b f303 	lslgt.w	r3, fp, r3
 8010d5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010d62:	bfda      	itte	le
 8010d64:	f1c3 0320 	rsble	r3, r3, #32
 8010d68:	fa06 f003 	lslle.w	r0, r6, r3
 8010d6c:	4318      	orrgt	r0, r3
 8010d6e:	f7ef fbc9 	bl	8000504 <__aeabi_ui2d>
 8010d72:	2301      	movs	r3, #1
 8010d74:	4606      	mov	r6, r0
 8010d76:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010d7a:	3d01      	subs	r5, #1
 8010d7c:	930e      	str	r3, [sp, #56]	; 0x38
 8010d7e:	e76a      	b.n	8010c56 <_dtoa_r+0x116>
 8010d80:	2301      	movs	r3, #1
 8010d82:	e7b2      	b.n	8010cea <_dtoa_r+0x1aa>
 8010d84:	900b      	str	r0, [sp, #44]	; 0x2c
 8010d86:	e7b1      	b.n	8010cec <_dtoa_r+0x1ac>
 8010d88:	9b04      	ldr	r3, [sp, #16]
 8010d8a:	9a00      	ldr	r2, [sp, #0]
 8010d8c:	1a9b      	subs	r3, r3, r2
 8010d8e:	9304      	str	r3, [sp, #16]
 8010d90:	4253      	negs	r3, r2
 8010d92:	9307      	str	r3, [sp, #28]
 8010d94:	2300      	movs	r3, #0
 8010d96:	930a      	str	r3, [sp, #40]	; 0x28
 8010d98:	e7bf      	b.n	8010d1a <_dtoa_r+0x1da>
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	9308      	str	r3, [sp, #32]
 8010d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	dc55      	bgt.n	8010e50 <_dtoa_r+0x310>
 8010da4:	2301      	movs	r3, #1
 8010da6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010daa:	461a      	mov	r2, r3
 8010dac:	9209      	str	r2, [sp, #36]	; 0x24
 8010dae:	e00c      	b.n	8010dca <_dtoa_r+0x28a>
 8010db0:	2301      	movs	r3, #1
 8010db2:	e7f3      	b.n	8010d9c <_dtoa_r+0x25c>
 8010db4:	2300      	movs	r3, #0
 8010db6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010db8:	9308      	str	r3, [sp, #32]
 8010dba:	9b00      	ldr	r3, [sp, #0]
 8010dbc:	4413      	add	r3, r2
 8010dbe:	9302      	str	r3, [sp, #8]
 8010dc0:	3301      	adds	r3, #1
 8010dc2:	2b01      	cmp	r3, #1
 8010dc4:	9303      	str	r3, [sp, #12]
 8010dc6:	bfb8      	it	lt
 8010dc8:	2301      	movlt	r3, #1
 8010dca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010dcc:	2200      	movs	r2, #0
 8010dce:	6042      	str	r2, [r0, #4]
 8010dd0:	2204      	movs	r2, #4
 8010dd2:	f102 0614 	add.w	r6, r2, #20
 8010dd6:	429e      	cmp	r6, r3
 8010dd8:	6841      	ldr	r1, [r0, #4]
 8010dda:	d93d      	bls.n	8010e58 <_dtoa_r+0x318>
 8010ddc:	4620      	mov	r0, r4
 8010dde:	f000 fdef 	bl	80119c0 <_Balloc>
 8010de2:	9001      	str	r0, [sp, #4]
 8010de4:	2800      	cmp	r0, #0
 8010de6:	d13b      	bne.n	8010e60 <_dtoa_r+0x320>
 8010de8:	4b11      	ldr	r3, [pc, #68]	; (8010e30 <_dtoa_r+0x2f0>)
 8010dea:	4602      	mov	r2, r0
 8010dec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010df0:	e6c0      	b.n	8010b74 <_dtoa_r+0x34>
 8010df2:	2301      	movs	r3, #1
 8010df4:	e7df      	b.n	8010db6 <_dtoa_r+0x276>
 8010df6:	bf00      	nop
 8010df8:	636f4361 	.word	0x636f4361
 8010dfc:	3fd287a7 	.word	0x3fd287a7
 8010e00:	8b60c8b3 	.word	0x8b60c8b3
 8010e04:	3fc68a28 	.word	0x3fc68a28
 8010e08:	509f79fb 	.word	0x509f79fb
 8010e0c:	3fd34413 	.word	0x3fd34413
 8010e10:	080130dd 	.word	0x080130dd
 8010e14:	080130f4 	.word	0x080130f4
 8010e18:	7ff00000 	.word	0x7ff00000
 8010e1c:	080130d9 	.word	0x080130d9
 8010e20:	080130d0 	.word	0x080130d0
 8010e24:	080130ad 	.word	0x080130ad
 8010e28:	3ff80000 	.word	0x3ff80000
 8010e2c:	080131e8 	.word	0x080131e8
 8010e30:	0801314f 	.word	0x0801314f
 8010e34:	2501      	movs	r5, #1
 8010e36:	2300      	movs	r3, #0
 8010e38:	9306      	str	r3, [sp, #24]
 8010e3a:	9508      	str	r5, [sp, #32]
 8010e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8010e40:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010e44:	2200      	movs	r2, #0
 8010e46:	2312      	movs	r3, #18
 8010e48:	e7b0      	b.n	8010dac <_dtoa_r+0x26c>
 8010e4a:	2301      	movs	r3, #1
 8010e4c:	9308      	str	r3, [sp, #32]
 8010e4e:	e7f5      	b.n	8010e3c <_dtoa_r+0x2fc>
 8010e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e52:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010e56:	e7b8      	b.n	8010dca <_dtoa_r+0x28a>
 8010e58:	3101      	adds	r1, #1
 8010e5a:	6041      	str	r1, [r0, #4]
 8010e5c:	0052      	lsls	r2, r2, #1
 8010e5e:	e7b8      	b.n	8010dd2 <_dtoa_r+0x292>
 8010e60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e62:	9a01      	ldr	r2, [sp, #4]
 8010e64:	601a      	str	r2, [r3, #0]
 8010e66:	9b03      	ldr	r3, [sp, #12]
 8010e68:	2b0e      	cmp	r3, #14
 8010e6a:	f200 809d 	bhi.w	8010fa8 <_dtoa_r+0x468>
 8010e6e:	2d00      	cmp	r5, #0
 8010e70:	f000 809a 	beq.w	8010fa8 <_dtoa_r+0x468>
 8010e74:	9b00      	ldr	r3, [sp, #0]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	dd32      	ble.n	8010ee0 <_dtoa_r+0x3a0>
 8010e7a:	4ab7      	ldr	r2, [pc, #732]	; (8011158 <_dtoa_r+0x618>)
 8010e7c:	f003 030f 	and.w	r3, r3, #15
 8010e80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010e84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010e88:	9b00      	ldr	r3, [sp, #0]
 8010e8a:	05d8      	lsls	r0, r3, #23
 8010e8c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010e90:	d516      	bpl.n	8010ec0 <_dtoa_r+0x380>
 8010e92:	4bb2      	ldr	r3, [pc, #712]	; (801115c <_dtoa_r+0x61c>)
 8010e94:	ec51 0b19 	vmov	r0, r1, d9
 8010e98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010e9c:	f7ef fcd6 	bl	800084c <__aeabi_ddiv>
 8010ea0:	f007 070f 	and.w	r7, r7, #15
 8010ea4:	4682      	mov	sl, r0
 8010ea6:	468b      	mov	fp, r1
 8010ea8:	2503      	movs	r5, #3
 8010eaa:	4eac      	ldr	r6, [pc, #688]	; (801115c <_dtoa_r+0x61c>)
 8010eac:	b957      	cbnz	r7, 8010ec4 <_dtoa_r+0x384>
 8010eae:	4642      	mov	r2, r8
 8010eb0:	464b      	mov	r3, r9
 8010eb2:	4650      	mov	r0, sl
 8010eb4:	4659      	mov	r1, fp
 8010eb6:	f7ef fcc9 	bl	800084c <__aeabi_ddiv>
 8010eba:	4682      	mov	sl, r0
 8010ebc:	468b      	mov	fp, r1
 8010ebe:	e028      	b.n	8010f12 <_dtoa_r+0x3d2>
 8010ec0:	2502      	movs	r5, #2
 8010ec2:	e7f2      	b.n	8010eaa <_dtoa_r+0x36a>
 8010ec4:	07f9      	lsls	r1, r7, #31
 8010ec6:	d508      	bpl.n	8010eda <_dtoa_r+0x39a>
 8010ec8:	4640      	mov	r0, r8
 8010eca:	4649      	mov	r1, r9
 8010ecc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010ed0:	f7ef fb92 	bl	80005f8 <__aeabi_dmul>
 8010ed4:	3501      	adds	r5, #1
 8010ed6:	4680      	mov	r8, r0
 8010ed8:	4689      	mov	r9, r1
 8010eda:	107f      	asrs	r7, r7, #1
 8010edc:	3608      	adds	r6, #8
 8010ede:	e7e5      	b.n	8010eac <_dtoa_r+0x36c>
 8010ee0:	f000 809b 	beq.w	801101a <_dtoa_r+0x4da>
 8010ee4:	9b00      	ldr	r3, [sp, #0]
 8010ee6:	4f9d      	ldr	r7, [pc, #628]	; (801115c <_dtoa_r+0x61c>)
 8010ee8:	425e      	negs	r6, r3
 8010eea:	4b9b      	ldr	r3, [pc, #620]	; (8011158 <_dtoa_r+0x618>)
 8010eec:	f006 020f 	and.w	r2, r6, #15
 8010ef0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef8:	ec51 0b19 	vmov	r0, r1, d9
 8010efc:	f7ef fb7c 	bl	80005f8 <__aeabi_dmul>
 8010f00:	1136      	asrs	r6, r6, #4
 8010f02:	4682      	mov	sl, r0
 8010f04:	468b      	mov	fp, r1
 8010f06:	2300      	movs	r3, #0
 8010f08:	2502      	movs	r5, #2
 8010f0a:	2e00      	cmp	r6, #0
 8010f0c:	d17a      	bne.n	8011004 <_dtoa_r+0x4c4>
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d1d3      	bne.n	8010eba <_dtoa_r+0x37a>
 8010f12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	f000 8082 	beq.w	801101e <_dtoa_r+0x4de>
 8010f1a:	4b91      	ldr	r3, [pc, #580]	; (8011160 <_dtoa_r+0x620>)
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	4650      	mov	r0, sl
 8010f20:	4659      	mov	r1, fp
 8010f22:	f7ef fddb 	bl	8000adc <__aeabi_dcmplt>
 8010f26:	2800      	cmp	r0, #0
 8010f28:	d079      	beq.n	801101e <_dtoa_r+0x4de>
 8010f2a:	9b03      	ldr	r3, [sp, #12]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d076      	beq.n	801101e <_dtoa_r+0x4de>
 8010f30:	9b02      	ldr	r3, [sp, #8]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	dd36      	ble.n	8010fa4 <_dtoa_r+0x464>
 8010f36:	9b00      	ldr	r3, [sp, #0]
 8010f38:	4650      	mov	r0, sl
 8010f3a:	4659      	mov	r1, fp
 8010f3c:	1e5f      	subs	r7, r3, #1
 8010f3e:	2200      	movs	r2, #0
 8010f40:	4b88      	ldr	r3, [pc, #544]	; (8011164 <_dtoa_r+0x624>)
 8010f42:	f7ef fb59 	bl	80005f8 <__aeabi_dmul>
 8010f46:	9e02      	ldr	r6, [sp, #8]
 8010f48:	4682      	mov	sl, r0
 8010f4a:	468b      	mov	fp, r1
 8010f4c:	3501      	adds	r5, #1
 8010f4e:	4628      	mov	r0, r5
 8010f50:	f7ef fae8 	bl	8000524 <__aeabi_i2d>
 8010f54:	4652      	mov	r2, sl
 8010f56:	465b      	mov	r3, fp
 8010f58:	f7ef fb4e 	bl	80005f8 <__aeabi_dmul>
 8010f5c:	4b82      	ldr	r3, [pc, #520]	; (8011168 <_dtoa_r+0x628>)
 8010f5e:	2200      	movs	r2, #0
 8010f60:	f7ef f994 	bl	800028c <__adddf3>
 8010f64:	46d0      	mov	r8, sl
 8010f66:	46d9      	mov	r9, fp
 8010f68:	4682      	mov	sl, r0
 8010f6a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010f6e:	2e00      	cmp	r6, #0
 8010f70:	d158      	bne.n	8011024 <_dtoa_r+0x4e4>
 8010f72:	4b7e      	ldr	r3, [pc, #504]	; (801116c <_dtoa_r+0x62c>)
 8010f74:	2200      	movs	r2, #0
 8010f76:	4640      	mov	r0, r8
 8010f78:	4649      	mov	r1, r9
 8010f7a:	f7ef f985 	bl	8000288 <__aeabi_dsub>
 8010f7e:	4652      	mov	r2, sl
 8010f80:	465b      	mov	r3, fp
 8010f82:	4680      	mov	r8, r0
 8010f84:	4689      	mov	r9, r1
 8010f86:	f7ef fdc7 	bl	8000b18 <__aeabi_dcmpgt>
 8010f8a:	2800      	cmp	r0, #0
 8010f8c:	f040 8295 	bne.w	80114ba <_dtoa_r+0x97a>
 8010f90:	4652      	mov	r2, sl
 8010f92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010f96:	4640      	mov	r0, r8
 8010f98:	4649      	mov	r1, r9
 8010f9a:	f7ef fd9f 	bl	8000adc <__aeabi_dcmplt>
 8010f9e:	2800      	cmp	r0, #0
 8010fa0:	f040 8289 	bne.w	80114b6 <_dtoa_r+0x976>
 8010fa4:	ec5b ab19 	vmov	sl, fp, d9
 8010fa8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	f2c0 8148 	blt.w	8011240 <_dtoa_r+0x700>
 8010fb0:	9a00      	ldr	r2, [sp, #0]
 8010fb2:	2a0e      	cmp	r2, #14
 8010fb4:	f300 8144 	bgt.w	8011240 <_dtoa_r+0x700>
 8010fb8:	4b67      	ldr	r3, [pc, #412]	; (8011158 <_dtoa_r+0x618>)
 8010fba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010fbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	f280 80d5 	bge.w	8011174 <_dtoa_r+0x634>
 8010fca:	9b03      	ldr	r3, [sp, #12]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	f300 80d1 	bgt.w	8011174 <_dtoa_r+0x634>
 8010fd2:	f040 826f 	bne.w	80114b4 <_dtoa_r+0x974>
 8010fd6:	4b65      	ldr	r3, [pc, #404]	; (801116c <_dtoa_r+0x62c>)
 8010fd8:	2200      	movs	r2, #0
 8010fda:	4640      	mov	r0, r8
 8010fdc:	4649      	mov	r1, r9
 8010fde:	f7ef fb0b 	bl	80005f8 <__aeabi_dmul>
 8010fe2:	4652      	mov	r2, sl
 8010fe4:	465b      	mov	r3, fp
 8010fe6:	f7ef fd8d 	bl	8000b04 <__aeabi_dcmpge>
 8010fea:	9e03      	ldr	r6, [sp, #12]
 8010fec:	4637      	mov	r7, r6
 8010fee:	2800      	cmp	r0, #0
 8010ff0:	f040 8245 	bne.w	801147e <_dtoa_r+0x93e>
 8010ff4:	9d01      	ldr	r5, [sp, #4]
 8010ff6:	2331      	movs	r3, #49	; 0x31
 8010ff8:	f805 3b01 	strb.w	r3, [r5], #1
 8010ffc:	9b00      	ldr	r3, [sp, #0]
 8010ffe:	3301      	adds	r3, #1
 8011000:	9300      	str	r3, [sp, #0]
 8011002:	e240      	b.n	8011486 <_dtoa_r+0x946>
 8011004:	07f2      	lsls	r2, r6, #31
 8011006:	d505      	bpl.n	8011014 <_dtoa_r+0x4d4>
 8011008:	e9d7 2300 	ldrd	r2, r3, [r7]
 801100c:	f7ef faf4 	bl	80005f8 <__aeabi_dmul>
 8011010:	3501      	adds	r5, #1
 8011012:	2301      	movs	r3, #1
 8011014:	1076      	asrs	r6, r6, #1
 8011016:	3708      	adds	r7, #8
 8011018:	e777      	b.n	8010f0a <_dtoa_r+0x3ca>
 801101a:	2502      	movs	r5, #2
 801101c:	e779      	b.n	8010f12 <_dtoa_r+0x3d2>
 801101e:	9f00      	ldr	r7, [sp, #0]
 8011020:	9e03      	ldr	r6, [sp, #12]
 8011022:	e794      	b.n	8010f4e <_dtoa_r+0x40e>
 8011024:	9901      	ldr	r1, [sp, #4]
 8011026:	4b4c      	ldr	r3, [pc, #304]	; (8011158 <_dtoa_r+0x618>)
 8011028:	4431      	add	r1, r6
 801102a:	910d      	str	r1, [sp, #52]	; 0x34
 801102c:	9908      	ldr	r1, [sp, #32]
 801102e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011032:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011036:	2900      	cmp	r1, #0
 8011038:	d043      	beq.n	80110c2 <_dtoa_r+0x582>
 801103a:	494d      	ldr	r1, [pc, #308]	; (8011170 <_dtoa_r+0x630>)
 801103c:	2000      	movs	r0, #0
 801103e:	f7ef fc05 	bl	800084c <__aeabi_ddiv>
 8011042:	4652      	mov	r2, sl
 8011044:	465b      	mov	r3, fp
 8011046:	f7ef f91f 	bl	8000288 <__aeabi_dsub>
 801104a:	9d01      	ldr	r5, [sp, #4]
 801104c:	4682      	mov	sl, r0
 801104e:	468b      	mov	fp, r1
 8011050:	4649      	mov	r1, r9
 8011052:	4640      	mov	r0, r8
 8011054:	f7ef fd80 	bl	8000b58 <__aeabi_d2iz>
 8011058:	4606      	mov	r6, r0
 801105a:	f7ef fa63 	bl	8000524 <__aeabi_i2d>
 801105e:	4602      	mov	r2, r0
 8011060:	460b      	mov	r3, r1
 8011062:	4640      	mov	r0, r8
 8011064:	4649      	mov	r1, r9
 8011066:	f7ef f90f 	bl	8000288 <__aeabi_dsub>
 801106a:	3630      	adds	r6, #48	; 0x30
 801106c:	f805 6b01 	strb.w	r6, [r5], #1
 8011070:	4652      	mov	r2, sl
 8011072:	465b      	mov	r3, fp
 8011074:	4680      	mov	r8, r0
 8011076:	4689      	mov	r9, r1
 8011078:	f7ef fd30 	bl	8000adc <__aeabi_dcmplt>
 801107c:	2800      	cmp	r0, #0
 801107e:	d163      	bne.n	8011148 <_dtoa_r+0x608>
 8011080:	4642      	mov	r2, r8
 8011082:	464b      	mov	r3, r9
 8011084:	4936      	ldr	r1, [pc, #216]	; (8011160 <_dtoa_r+0x620>)
 8011086:	2000      	movs	r0, #0
 8011088:	f7ef f8fe 	bl	8000288 <__aeabi_dsub>
 801108c:	4652      	mov	r2, sl
 801108e:	465b      	mov	r3, fp
 8011090:	f7ef fd24 	bl	8000adc <__aeabi_dcmplt>
 8011094:	2800      	cmp	r0, #0
 8011096:	f040 80b5 	bne.w	8011204 <_dtoa_r+0x6c4>
 801109a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801109c:	429d      	cmp	r5, r3
 801109e:	d081      	beq.n	8010fa4 <_dtoa_r+0x464>
 80110a0:	4b30      	ldr	r3, [pc, #192]	; (8011164 <_dtoa_r+0x624>)
 80110a2:	2200      	movs	r2, #0
 80110a4:	4650      	mov	r0, sl
 80110a6:	4659      	mov	r1, fp
 80110a8:	f7ef faa6 	bl	80005f8 <__aeabi_dmul>
 80110ac:	4b2d      	ldr	r3, [pc, #180]	; (8011164 <_dtoa_r+0x624>)
 80110ae:	4682      	mov	sl, r0
 80110b0:	468b      	mov	fp, r1
 80110b2:	4640      	mov	r0, r8
 80110b4:	4649      	mov	r1, r9
 80110b6:	2200      	movs	r2, #0
 80110b8:	f7ef fa9e 	bl	80005f8 <__aeabi_dmul>
 80110bc:	4680      	mov	r8, r0
 80110be:	4689      	mov	r9, r1
 80110c0:	e7c6      	b.n	8011050 <_dtoa_r+0x510>
 80110c2:	4650      	mov	r0, sl
 80110c4:	4659      	mov	r1, fp
 80110c6:	f7ef fa97 	bl	80005f8 <__aeabi_dmul>
 80110ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80110cc:	9d01      	ldr	r5, [sp, #4]
 80110ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80110d0:	4682      	mov	sl, r0
 80110d2:	468b      	mov	fp, r1
 80110d4:	4649      	mov	r1, r9
 80110d6:	4640      	mov	r0, r8
 80110d8:	f7ef fd3e 	bl	8000b58 <__aeabi_d2iz>
 80110dc:	4606      	mov	r6, r0
 80110de:	f7ef fa21 	bl	8000524 <__aeabi_i2d>
 80110e2:	3630      	adds	r6, #48	; 0x30
 80110e4:	4602      	mov	r2, r0
 80110e6:	460b      	mov	r3, r1
 80110e8:	4640      	mov	r0, r8
 80110ea:	4649      	mov	r1, r9
 80110ec:	f7ef f8cc 	bl	8000288 <__aeabi_dsub>
 80110f0:	f805 6b01 	strb.w	r6, [r5], #1
 80110f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80110f6:	429d      	cmp	r5, r3
 80110f8:	4680      	mov	r8, r0
 80110fa:	4689      	mov	r9, r1
 80110fc:	f04f 0200 	mov.w	r2, #0
 8011100:	d124      	bne.n	801114c <_dtoa_r+0x60c>
 8011102:	4b1b      	ldr	r3, [pc, #108]	; (8011170 <_dtoa_r+0x630>)
 8011104:	4650      	mov	r0, sl
 8011106:	4659      	mov	r1, fp
 8011108:	f7ef f8c0 	bl	800028c <__adddf3>
 801110c:	4602      	mov	r2, r0
 801110e:	460b      	mov	r3, r1
 8011110:	4640      	mov	r0, r8
 8011112:	4649      	mov	r1, r9
 8011114:	f7ef fd00 	bl	8000b18 <__aeabi_dcmpgt>
 8011118:	2800      	cmp	r0, #0
 801111a:	d173      	bne.n	8011204 <_dtoa_r+0x6c4>
 801111c:	4652      	mov	r2, sl
 801111e:	465b      	mov	r3, fp
 8011120:	4913      	ldr	r1, [pc, #76]	; (8011170 <_dtoa_r+0x630>)
 8011122:	2000      	movs	r0, #0
 8011124:	f7ef f8b0 	bl	8000288 <__aeabi_dsub>
 8011128:	4602      	mov	r2, r0
 801112a:	460b      	mov	r3, r1
 801112c:	4640      	mov	r0, r8
 801112e:	4649      	mov	r1, r9
 8011130:	f7ef fcd4 	bl	8000adc <__aeabi_dcmplt>
 8011134:	2800      	cmp	r0, #0
 8011136:	f43f af35 	beq.w	8010fa4 <_dtoa_r+0x464>
 801113a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801113c:	1e6b      	subs	r3, r5, #1
 801113e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011140:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011144:	2b30      	cmp	r3, #48	; 0x30
 8011146:	d0f8      	beq.n	801113a <_dtoa_r+0x5fa>
 8011148:	9700      	str	r7, [sp, #0]
 801114a:	e049      	b.n	80111e0 <_dtoa_r+0x6a0>
 801114c:	4b05      	ldr	r3, [pc, #20]	; (8011164 <_dtoa_r+0x624>)
 801114e:	f7ef fa53 	bl	80005f8 <__aeabi_dmul>
 8011152:	4680      	mov	r8, r0
 8011154:	4689      	mov	r9, r1
 8011156:	e7bd      	b.n	80110d4 <_dtoa_r+0x594>
 8011158:	080131e8 	.word	0x080131e8
 801115c:	080131c0 	.word	0x080131c0
 8011160:	3ff00000 	.word	0x3ff00000
 8011164:	40240000 	.word	0x40240000
 8011168:	401c0000 	.word	0x401c0000
 801116c:	40140000 	.word	0x40140000
 8011170:	3fe00000 	.word	0x3fe00000
 8011174:	9d01      	ldr	r5, [sp, #4]
 8011176:	4656      	mov	r6, sl
 8011178:	465f      	mov	r7, fp
 801117a:	4642      	mov	r2, r8
 801117c:	464b      	mov	r3, r9
 801117e:	4630      	mov	r0, r6
 8011180:	4639      	mov	r1, r7
 8011182:	f7ef fb63 	bl	800084c <__aeabi_ddiv>
 8011186:	f7ef fce7 	bl	8000b58 <__aeabi_d2iz>
 801118a:	4682      	mov	sl, r0
 801118c:	f7ef f9ca 	bl	8000524 <__aeabi_i2d>
 8011190:	4642      	mov	r2, r8
 8011192:	464b      	mov	r3, r9
 8011194:	f7ef fa30 	bl	80005f8 <__aeabi_dmul>
 8011198:	4602      	mov	r2, r0
 801119a:	460b      	mov	r3, r1
 801119c:	4630      	mov	r0, r6
 801119e:	4639      	mov	r1, r7
 80111a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80111a4:	f7ef f870 	bl	8000288 <__aeabi_dsub>
 80111a8:	f805 6b01 	strb.w	r6, [r5], #1
 80111ac:	9e01      	ldr	r6, [sp, #4]
 80111ae:	9f03      	ldr	r7, [sp, #12]
 80111b0:	1bae      	subs	r6, r5, r6
 80111b2:	42b7      	cmp	r7, r6
 80111b4:	4602      	mov	r2, r0
 80111b6:	460b      	mov	r3, r1
 80111b8:	d135      	bne.n	8011226 <_dtoa_r+0x6e6>
 80111ba:	f7ef f867 	bl	800028c <__adddf3>
 80111be:	4642      	mov	r2, r8
 80111c0:	464b      	mov	r3, r9
 80111c2:	4606      	mov	r6, r0
 80111c4:	460f      	mov	r7, r1
 80111c6:	f7ef fca7 	bl	8000b18 <__aeabi_dcmpgt>
 80111ca:	b9d0      	cbnz	r0, 8011202 <_dtoa_r+0x6c2>
 80111cc:	4642      	mov	r2, r8
 80111ce:	464b      	mov	r3, r9
 80111d0:	4630      	mov	r0, r6
 80111d2:	4639      	mov	r1, r7
 80111d4:	f7ef fc78 	bl	8000ac8 <__aeabi_dcmpeq>
 80111d8:	b110      	cbz	r0, 80111e0 <_dtoa_r+0x6a0>
 80111da:	f01a 0f01 	tst.w	sl, #1
 80111de:	d110      	bne.n	8011202 <_dtoa_r+0x6c2>
 80111e0:	4620      	mov	r0, r4
 80111e2:	ee18 1a10 	vmov	r1, s16
 80111e6:	f000 fc2b 	bl	8011a40 <_Bfree>
 80111ea:	2300      	movs	r3, #0
 80111ec:	9800      	ldr	r0, [sp, #0]
 80111ee:	702b      	strb	r3, [r5, #0]
 80111f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80111f2:	3001      	adds	r0, #1
 80111f4:	6018      	str	r0, [r3, #0]
 80111f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	f43f acf1 	beq.w	8010be0 <_dtoa_r+0xa0>
 80111fe:	601d      	str	r5, [r3, #0]
 8011200:	e4ee      	b.n	8010be0 <_dtoa_r+0xa0>
 8011202:	9f00      	ldr	r7, [sp, #0]
 8011204:	462b      	mov	r3, r5
 8011206:	461d      	mov	r5, r3
 8011208:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801120c:	2a39      	cmp	r2, #57	; 0x39
 801120e:	d106      	bne.n	801121e <_dtoa_r+0x6de>
 8011210:	9a01      	ldr	r2, [sp, #4]
 8011212:	429a      	cmp	r2, r3
 8011214:	d1f7      	bne.n	8011206 <_dtoa_r+0x6c6>
 8011216:	9901      	ldr	r1, [sp, #4]
 8011218:	2230      	movs	r2, #48	; 0x30
 801121a:	3701      	adds	r7, #1
 801121c:	700a      	strb	r2, [r1, #0]
 801121e:	781a      	ldrb	r2, [r3, #0]
 8011220:	3201      	adds	r2, #1
 8011222:	701a      	strb	r2, [r3, #0]
 8011224:	e790      	b.n	8011148 <_dtoa_r+0x608>
 8011226:	4ba6      	ldr	r3, [pc, #664]	; (80114c0 <_dtoa_r+0x980>)
 8011228:	2200      	movs	r2, #0
 801122a:	f7ef f9e5 	bl	80005f8 <__aeabi_dmul>
 801122e:	2200      	movs	r2, #0
 8011230:	2300      	movs	r3, #0
 8011232:	4606      	mov	r6, r0
 8011234:	460f      	mov	r7, r1
 8011236:	f7ef fc47 	bl	8000ac8 <__aeabi_dcmpeq>
 801123a:	2800      	cmp	r0, #0
 801123c:	d09d      	beq.n	801117a <_dtoa_r+0x63a>
 801123e:	e7cf      	b.n	80111e0 <_dtoa_r+0x6a0>
 8011240:	9a08      	ldr	r2, [sp, #32]
 8011242:	2a00      	cmp	r2, #0
 8011244:	f000 80d7 	beq.w	80113f6 <_dtoa_r+0x8b6>
 8011248:	9a06      	ldr	r2, [sp, #24]
 801124a:	2a01      	cmp	r2, #1
 801124c:	f300 80ba 	bgt.w	80113c4 <_dtoa_r+0x884>
 8011250:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011252:	2a00      	cmp	r2, #0
 8011254:	f000 80b2 	beq.w	80113bc <_dtoa_r+0x87c>
 8011258:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801125c:	9e07      	ldr	r6, [sp, #28]
 801125e:	9d04      	ldr	r5, [sp, #16]
 8011260:	9a04      	ldr	r2, [sp, #16]
 8011262:	441a      	add	r2, r3
 8011264:	9204      	str	r2, [sp, #16]
 8011266:	9a05      	ldr	r2, [sp, #20]
 8011268:	2101      	movs	r1, #1
 801126a:	441a      	add	r2, r3
 801126c:	4620      	mov	r0, r4
 801126e:	9205      	str	r2, [sp, #20]
 8011270:	f000 fc9e 	bl	8011bb0 <__i2b>
 8011274:	4607      	mov	r7, r0
 8011276:	2d00      	cmp	r5, #0
 8011278:	dd0c      	ble.n	8011294 <_dtoa_r+0x754>
 801127a:	9b05      	ldr	r3, [sp, #20]
 801127c:	2b00      	cmp	r3, #0
 801127e:	dd09      	ble.n	8011294 <_dtoa_r+0x754>
 8011280:	42ab      	cmp	r3, r5
 8011282:	9a04      	ldr	r2, [sp, #16]
 8011284:	bfa8      	it	ge
 8011286:	462b      	movge	r3, r5
 8011288:	1ad2      	subs	r2, r2, r3
 801128a:	9204      	str	r2, [sp, #16]
 801128c:	9a05      	ldr	r2, [sp, #20]
 801128e:	1aed      	subs	r5, r5, r3
 8011290:	1ad3      	subs	r3, r2, r3
 8011292:	9305      	str	r3, [sp, #20]
 8011294:	9b07      	ldr	r3, [sp, #28]
 8011296:	b31b      	cbz	r3, 80112e0 <_dtoa_r+0x7a0>
 8011298:	9b08      	ldr	r3, [sp, #32]
 801129a:	2b00      	cmp	r3, #0
 801129c:	f000 80af 	beq.w	80113fe <_dtoa_r+0x8be>
 80112a0:	2e00      	cmp	r6, #0
 80112a2:	dd13      	ble.n	80112cc <_dtoa_r+0x78c>
 80112a4:	4639      	mov	r1, r7
 80112a6:	4632      	mov	r2, r6
 80112a8:	4620      	mov	r0, r4
 80112aa:	f000 fd41 	bl	8011d30 <__pow5mult>
 80112ae:	ee18 2a10 	vmov	r2, s16
 80112b2:	4601      	mov	r1, r0
 80112b4:	4607      	mov	r7, r0
 80112b6:	4620      	mov	r0, r4
 80112b8:	f000 fc90 	bl	8011bdc <__multiply>
 80112bc:	ee18 1a10 	vmov	r1, s16
 80112c0:	4680      	mov	r8, r0
 80112c2:	4620      	mov	r0, r4
 80112c4:	f000 fbbc 	bl	8011a40 <_Bfree>
 80112c8:	ee08 8a10 	vmov	s16, r8
 80112cc:	9b07      	ldr	r3, [sp, #28]
 80112ce:	1b9a      	subs	r2, r3, r6
 80112d0:	d006      	beq.n	80112e0 <_dtoa_r+0x7a0>
 80112d2:	ee18 1a10 	vmov	r1, s16
 80112d6:	4620      	mov	r0, r4
 80112d8:	f000 fd2a 	bl	8011d30 <__pow5mult>
 80112dc:	ee08 0a10 	vmov	s16, r0
 80112e0:	2101      	movs	r1, #1
 80112e2:	4620      	mov	r0, r4
 80112e4:	f000 fc64 	bl	8011bb0 <__i2b>
 80112e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	4606      	mov	r6, r0
 80112ee:	f340 8088 	ble.w	8011402 <_dtoa_r+0x8c2>
 80112f2:	461a      	mov	r2, r3
 80112f4:	4601      	mov	r1, r0
 80112f6:	4620      	mov	r0, r4
 80112f8:	f000 fd1a 	bl	8011d30 <__pow5mult>
 80112fc:	9b06      	ldr	r3, [sp, #24]
 80112fe:	2b01      	cmp	r3, #1
 8011300:	4606      	mov	r6, r0
 8011302:	f340 8081 	ble.w	8011408 <_dtoa_r+0x8c8>
 8011306:	f04f 0800 	mov.w	r8, #0
 801130a:	6933      	ldr	r3, [r6, #16]
 801130c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011310:	6918      	ldr	r0, [r3, #16]
 8011312:	f000 fbfd 	bl	8011b10 <__hi0bits>
 8011316:	f1c0 0020 	rsb	r0, r0, #32
 801131a:	9b05      	ldr	r3, [sp, #20]
 801131c:	4418      	add	r0, r3
 801131e:	f010 001f 	ands.w	r0, r0, #31
 8011322:	f000 8092 	beq.w	801144a <_dtoa_r+0x90a>
 8011326:	f1c0 0320 	rsb	r3, r0, #32
 801132a:	2b04      	cmp	r3, #4
 801132c:	f340 808a 	ble.w	8011444 <_dtoa_r+0x904>
 8011330:	f1c0 001c 	rsb	r0, r0, #28
 8011334:	9b04      	ldr	r3, [sp, #16]
 8011336:	4403      	add	r3, r0
 8011338:	9304      	str	r3, [sp, #16]
 801133a:	9b05      	ldr	r3, [sp, #20]
 801133c:	4403      	add	r3, r0
 801133e:	4405      	add	r5, r0
 8011340:	9305      	str	r3, [sp, #20]
 8011342:	9b04      	ldr	r3, [sp, #16]
 8011344:	2b00      	cmp	r3, #0
 8011346:	dd07      	ble.n	8011358 <_dtoa_r+0x818>
 8011348:	ee18 1a10 	vmov	r1, s16
 801134c:	461a      	mov	r2, r3
 801134e:	4620      	mov	r0, r4
 8011350:	f000 fd48 	bl	8011de4 <__lshift>
 8011354:	ee08 0a10 	vmov	s16, r0
 8011358:	9b05      	ldr	r3, [sp, #20]
 801135a:	2b00      	cmp	r3, #0
 801135c:	dd05      	ble.n	801136a <_dtoa_r+0x82a>
 801135e:	4631      	mov	r1, r6
 8011360:	461a      	mov	r2, r3
 8011362:	4620      	mov	r0, r4
 8011364:	f000 fd3e 	bl	8011de4 <__lshift>
 8011368:	4606      	mov	r6, r0
 801136a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801136c:	2b00      	cmp	r3, #0
 801136e:	d06e      	beq.n	801144e <_dtoa_r+0x90e>
 8011370:	ee18 0a10 	vmov	r0, s16
 8011374:	4631      	mov	r1, r6
 8011376:	f000 fda5 	bl	8011ec4 <__mcmp>
 801137a:	2800      	cmp	r0, #0
 801137c:	da67      	bge.n	801144e <_dtoa_r+0x90e>
 801137e:	9b00      	ldr	r3, [sp, #0]
 8011380:	3b01      	subs	r3, #1
 8011382:	ee18 1a10 	vmov	r1, s16
 8011386:	9300      	str	r3, [sp, #0]
 8011388:	220a      	movs	r2, #10
 801138a:	2300      	movs	r3, #0
 801138c:	4620      	mov	r0, r4
 801138e:	f000 fb79 	bl	8011a84 <__multadd>
 8011392:	9b08      	ldr	r3, [sp, #32]
 8011394:	ee08 0a10 	vmov	s16, r0
 8011398:	2b00      	cmp	r3, #0
 801139a:	f000 81b1 	beq.w	8011700 <_dtoa_r+0xbc0>
 801139e:	2300      	movs	r3, #0
 80113a0:	4639      	mov	r1, r7
 80113a2:	220a      	movs	r2, #10
 80113a4:	4620      	mov	r0, r4
 80113a6:	f000 fb6d 	bl	8011a84 <__multadd>
 80113aa:	9b02      	ldr	r3, [sp, #8]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	4607      	mov	r7, r0
 80113b0:	f300 808e 	bgt.w	80114d0 <_dtoa_r+0x990>
 80113b4:	9b06      	ldr	r3, [sp, #24]
 80113b6:	2b02      	cmp	r3, #2
 80113b8:	dc51      	bgt.n	801145e <_dtoa_r+0x91e>
 80113ba:	e089      	b.n	80114d0 <_dtoa_r+0x990>
 80113bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80113be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80113c2:	e74b      	b.n	801125c <_dtoa_r+0x71c>
 80113c4:	9b03      	ldr	r3, [sp, #12]
 80113c6:	1e5e      	subs	r6, r3, #1
 80113c8:	9b07      	ldr	r3, [sp, #28]
 80113ca:	42b3      	cmp	r3, r6
 80113cc:	bfbf      	itttt	lt
 80113ce:	9b07      	ldrlt	r3, [sp, #28]
 80113d0:	9607      	strlt	r6, [sp, #28]
 80113d2:	1af2      	sublt	r2, r6, r3
 80113d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80113d6:	bfb6      	itet	lt
 80113d8:	189b      	addlt	r3, r3, r2
 80113da:	1b9e      	subge	r6, r3, r6
 80113dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80113de:	9b03      	ldr	r3, [sp, #12]
 80113e0:	bfb8      	it	lt
 80113e2:	2600      	movlt	r6, #0
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	bfb7      	itett	lt
 80113e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80113ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80113f0:	1a9d      	sublt	r5, r3, r2
 80113f2:	2300      	movlt	r3, #0
 80113f4:	e734      	b.n	8011260 <_dtoa_r+0x720>
 80113f6:	9e07      	ldr	r6, [sp, #28]
 80113f8:	9d04      	ldr	r5, [sp, #16]
 80113fa:	9f08      	ldr	r7, [sp, #32]
 80113fc:	e73b      	b.n	8011276 <_dtoa_r+0x736>
 80113fe:	9a07      	ldr	r2, [sp, #28]
 8011400:	e767      	b.n	80112d2 <_dtoa_r+0x792>
 8011402:	9b06      	ldr	r3, [sp, #24]
 8011404:	2b01      	cmp	r3, #1
 8011406:	dc18      	bgt.n	801143a <_dtoa_r+0x8fa>
 8011408:	f1ba 0f00 	cmp.w	sl, #0
 801140c:	d115      	bne.n	801143a <_dtoa_r+0x8fa>
 801140e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011412:	b993      	cbnz	r3, 801143a <_dtoa_r+0x8fa>
 8011414:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011418:	0d1b      	lsrs	r3, r3, #20
 801141a:	051b      	lsls	r3, r3, #20
 801141c:	b183      	cbz	r3, 8011440 <_dtoa_r+0x900>
 801141e:	9b04      	ldr	r3, [sp, #16]
 8011420:	3301      	adds	r3, #1
 8011422:	9304      	str	r3, [sp, #16]
 8011424:	9b05      	ldr	r3, [sp, #20]
 8011426:	3301      	adds	r3, #1
 8011428:	9305      	str	r3, [sp, #20]
 801142a:	f04f 0801 	mov.w	r8, #1
 801142e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011430:	2b00      	cmp	r3, #0
 8011432:	f47f af6a 	bne.w	801130a <_dtoa_r+0x7ca>
 8011436:	2001      	movs	r0, #1
 8011438:	e76f      	b.n	801131a <_dtoa_r+0x7da>
 801143a:	f04f 0800 	mov.w	r8, #0
 801143e:	e7f6      	b.n	801142e <_dtoa_r+0x8ee>
 8011440:	4698      	mov	r8, r3
 8011442:	e7f4      	b.n	801142e <_dtoa_r+0x8ee>
 8011444:	f43f af7d 	beq.w	8011342 <_dtoa_r+0x802>
 8011448:	4618      	mov	r0, r3
 801144a:	301c      	adds	r0, #28
 801144c:	e772      	b.n	8011334 <_dtoa_r+0x7f4>
 801144e:	9b03      	ldr	r3, [sp, #12]
 8011450:	2b00      	cmp	r3, #0
 8011452:	dc37      	bgt.n	80114c4 <_dtoa_r+0x984>
 8011454:	9b06      	ldr	r3, [sp, #24]
 8011456:	2b02      	cmp	r3, #2
 8011458:	dd34      	ble.n	80114c4 <_dtoa_r+0x984>
 801145a:	9b03      	ldr	r3, [sp, #12]
 801145c:	9302      	str	r3, [sp, #8]
 801145e:	9b02      	ldr	r3, [sp, #8]
 8011460:	b96b      	cbnz	r3, 801147e <_dtoa_r+0x93e>
 8011462:	4631      	mov	r1, r6
 8011464:	2205      	movs	r2, #5
 8011466:	4620      	mov	r0, r4
 8011468:	f000 fb0c 	bl	8011a84 <__multadd>
 801146c:	4601      	mov	r1, r0
 801146e:	4606      	mov	r6, r0
 8011470:	ee18 0a10 	vmov	r0, s16
 8011474:	f000 fd26 	bl	8011ec4 <__mcmp>
 8011478:	2800      	cmp	r0, #0
 801147a:	f73f adbb 	bgt.w	8010ff4 <_dtoa_r+0x4b4>
 801147e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011480:	9d01      	ldr	r5, [sp, #4]
 8011482:	43db      	mvns	r3, r3
 8011484:	9300      	str	r3, [sp, #0]
 8011486:	f04f 0800 	mov.w	r8, #0
 801148a:	4631      	mov	r1, r6
 801148c:	4620      	mov	r0, r4
 801148e:	f000 fad7 	bl	8011a40 <_Bfree>
 8011492:	2f00      	cmp	r7, #0
 8011494:	f43f aea4 	beq.w	80111e0 <_dtoa_r+0x6a0>
 8011498:	f1b8 0f00 	cmp.w	r8, #0
 801149c:	d005      	beq.n	80114aa <_dtoa_r+0x96a>
 801149e:	45b8      	cmp	r8, r7
 80114a0:	d003      	beq.n	80114aa <_dtoa_r+0x96a>
 80114a2:	4641      	mov	r1, r8
 80114a4:	4620      	mov	r0, r4
 80114a6:	f000 facb 	bl	8011a40 <_Bfree>
 80114aa:	4639      	mov	r1, r7
 80114ac:	4620      	mov	r0, r4
 80114ae:	f000 fac7 	bl	8011a40 <_Bfree>
 80114b2:	e695      	b.n	80111e0 <_dtoa_r+0x6a0>
 80114b4:	2600      	movs	r6, #0
 80114b6:	4637      	mov	r7, r6
 80114b8:	e7e1      	b.n	801147e <_dtoa_r+0x93e>
 80114ba:	9700      	str	r7, [sp, #0]
 80114bc:	4637      	mov	r7, r6
 80114be:	e599      	b.n	8010ff4 <_dtoa_r+0x4b4>
 80114c0:	40240000 	.word	0x40240000
 80114c4:	9b08      	ldr	r3, [sp, #32]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	f000 80ca 	beq.w	8011660 <_dtoa_r+0xb20>
 80114cc:	9b03      	ldr	r3, [sp, #12]
 80114ce:	9302      	str	r3, [sp, #8]
 80114d0:	2d00      	cmp	r5, #0
 80114d2:	dd05      	ble.n	80114e0 <_dtoa_r+0x9a0>
 80114d4:	4639      	mov	r1, r7
 80114d6:	462a      	mov	r2, r5
 80114d8:	4620      	mov	r0, r4
 80114da:	f000 fc83 	bl	8011de4 <__lshift>
 80114de:	4607      	mov	r7, r0
 80114e0:	f1b8 0f00 	cmp.w	r8, #0
 80114e4:	d05b      	beq.n	801159e <_dtoa_r+0xa5e>
 80114e6:	6879      	ldr	r1, [r7, #4]
 80114e8:	4620      	mov	r0, r4
 80114ea:	f000 fa69 	bl	80119c0 <_Balloc>
 80114ee:	4605      	mov	r5, r0
 80114f0:	b928      	cbnz	r0, 80114fe <_dtoa_r+0x9be>
 80114f2:	4b87      	ldr	r3, [pc, #540]	; (8011710 <_dtoa_r+0xbd0>)
 80114f4:	4602      	mov	r2, r0
 80114f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80114fa:	f7ff bb3b 	b.w	8010b74 <_dtoa_r+0x34>
 80114fe:	693a      	ldr	r2, [r7, #16]
 8011500:	3202      	adds	r2, #2
 8011502:	0092      	lsls	r2, r2, #2
 8011504:	f107 010c 	add.w	r1, r7, #12
 8011508:	300c      	adds	r0, #12
 801150a:	f7fe fb4a 	bl	800fba2 <memcpy>
 801150e:	2201      	movs	r2, #1
 8011510:	4629      	mov	r1, r5
 8011512:	4620      	mov	r0, r4
 8011514:	f000 fc66 	bl	8011de4 <__lshift>
 8011518:	9b01      	ldr	r3, [sp, #4]
 801151a:	f103 0901 	add.w	r9, r3, #1
 801151e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011522:	4413      	add	r3, r2
 8011524:	9305      	str	r3, [sp, #20]
 8011526:	f00a 0301 	and.w	r3, sl, #1
 801152a:	46b8      	mov	r8, r7
 801152c:	9304      	str	r3, [sp, #16]
 801152e:	4607      	mov	r7, r0
 8011530:	4631      	mov	r1, r6
 8011532:	ee18 0a10 	vmov	r0, s16
 8011536:	f7ff fa77 	bl	8010a28 <quorem>
 801153a:	4641      	mov	r1, r8
 801153c:	9002      	str	r0, [sp, #8]
 801153e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011542:	ee18 0a10 	vmov	r0, s16
 8011546:	f000 fcbd 	bl	8011ec4 <__mcmp>
 801154a:	463a      	mov	r2, r7
 801154c:	9003      	str	r0, [sp, #12]
 801154e:	4631      	mov	r1, r6
 8011550:	4620      	mov	r0, r4
 8011552:	f000 fcd3 	bl	8011efc <__mdiff>
 8011556:	68c2      	ldr	r2, [r0, #12]
 8011558:	f109 3bff 	add.w	fp, r9, #4294967295
 801155c:	4605      	mov	r5, r0
 801155e:	bb02      	cbnz	r2, 80115a2 <_dtoa_r+0xa62>
 8011560:	4601      	mov	r1, r0
 8011562:	ee18 0a10 	vmov	r0, s16
 8011566:	f000 fcad 	bl	8011ec4 <__mcmp>
 801156a:	4602      	mov	r2, r0
 801156c:	4629      	mov	r1, r5
 801156e:	4620      	mov	r0, r4
 8011570:	9207      	str	r2, [sp, #28]
 8011572:	f000 fa65 	bl	8011a40 <_Bfree>
 8011576:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801157a:	ea43 0102 	orr.w	r1, r3, r2
 801157e:	9b04      	ldr	r3, [sp, #16]
 8011580:	430b      	orrs	r3, r1
 8011582:	464d      	mov	r5, r9
 8011584:	d10f      	bne.n	80115a6 <_dtoa_r+0xa66>
 8011586:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801158a:	d02a      	beq.n	80115e2 <_dtoa_r+0xaa2>
 801158c:	9b03      	ldr	r3, [sp, #12]
 801158e:	2b00      	cmp	r3, #0
 8011590:	dd02      	ble.n	8011598 <_dtoa_r+0xa58>
 8011592:	9b02      	ldr	r3, [sp, #8]
 8011594:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011598:	f88b a000 	strb.w	sl, [fp]
 801159c:	e775      	b.n	801148a <_dtoa_r+0x94a>
 801159e:	4638      	mov	r0, r7
 80115a0:	e7ba      	b.n	8011518 <_dtoa_r+0x9d8>
 80115a2:	2201      	movs	r2, #1
 80115a4:	e7e2      	b.n	801156c <_dtoa_r+0xa2c>
 80115a6:	9b03      	ldr	r3, [sp, #12]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	db04      	blt.n	80115b6 <_dtoa_r+0xa76>
 80115ac:	9906      	ldr	r1, [sp, #24]
 80115ae:	430b      	orrs	r3, r1
 80115b0:	9904      	ldr	r1, [sp, #16]
 80115b2:	430b      	orrs	r3, r1
 80115b4:	d122      	bne.n	80115fc <_dtoa_r+0xabc>
 80115b6:	2a00      	cmp	r2, #0
 80115b8:	ddee      	ble.n	8011598 <_dtoa_r+0xa58>
 80115ba:	ee18 1a10 	vmov	r1, s16
 80115be:	2201      	movs	r2, #1
 80115c0:	4620      	mov	r0, r4
 80115c2:	f000 fc0f 	bl	8011de4 <__lshift>
 80115c6:	4631      	mov	r1, r6
 80115c8:	ee08 0a10 	vmov	s16, r0
 80115cc:	f000 fc7a 	bl	8011ec4 <__mcmp>
 80115d0:	2800      	cmp	r0, #0
 80115d2:	dc03      	bgt.n	80115dc <_dtoa_r+0xa9c>
 80115d4:	d1e0      	bne.n	8011598 <_dtoa_r+0xa58>
 80115d6:	f01a 0f01 	tst.w	sl, #1
 80115da:	d0dd      	beq.n	8011598 <_dtoa_r+0xa58>
 80115dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80115e0:	d1d7      	bne.n	8011592 <_dtoa_r+0xa52>
 80115e2:	2339      	movs	r3, #57	; 0x39
 80115e4:	f88b 3000 	strb.w	r3, [fp]
 80115e8:	462b      	mov	r3, r5
 80115ea:	461d      	mov	r5, r3
 80115ec:	3b01      	subs	r3, #1
 80115ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80115f2:	2a39      	cmp	r2, #57	; 0x39
 80115f4:	d071      	beq.n	80116da <_dtoa_r+0xb9a>
 80115f6:	3201      	adds	r2, #1
 80115f8:	701a      	strb	r2, [r3, #0]
 80115fa:	e746      	b.n	801148a <_dtoa_r+0x94a>
 80115fc:	2a00      	cmp	r2, #0
 80115fe:	dd07      	ble.n	8011610 <_dtoa_r+0xad0>
 8011600:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011604:	d0ed      	beq.n	80115e2 <_dtoa_r+0xaa2>
 8011606:	f10a 0301 	add.w	r3, sl, #1
 801160a:	f88b 3000 	strb.w	r3, [fp]
 801160e:	e73c      	b.n	801148a <_dtoa_r+0x94a>
 8011610:	9b05      	ldr	r3, [sp, #20]
 8011612:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011616:	4599      	cmp	r9, r3
 8011618:	d047      	beq.n	80116aa <_dtoa_r+0xb6a>
 801161a:	ee18 1a10 	vmov	r1, s16
 801161e:	2300      	movs	r3, #0
 8011620:	220a      	movs	r2, #10
 8011622:	4620      	mov	r0, r4
 8011624:	f000 fa2e 	bl	8011a84 <__multadd>
 8011628:	45b8      	cmp	r8, r7
 801162a:	ee08 0a10 	vmov	s16, r0
 801162e:	f04f 0300 	mov.w	r3, #0
 8011632:	f04f 020a 	mov.w	r2, #10
 8011636:	4641      	mov	r1, r8
 8011638:	4620      	mov	r0, r4
 801163a:	d106      	bne.n	801164a <_dtoa_r+0xb0a>
 801163c:	f000 fa22 	bl	8011a84 <__multadd>
 8011640:	4680      	mov	r8, r0
 8011642:	4607      	mov	r7, r0
 8011644:	f109 0901 	add.w	r9, r9, #1
 8011648:	e772      	b.n	8011530 <_dtoa_r+0x9f0>
 801164a:	f000 fa1b 	bl	8011a84 <__multadd>
 801164e:	4639      	mov	r1, r7
 8011650:	4680      	mov	r8, r0
 8011652:	2300      	movs	r3, #0
 8011654:	220a      	movs	r2, #10
 8011656:	4620      	mov	r0, r4
 8011658:	f000 fa14 	bl	8011a84 <__multadd>
 801165c:	4607      	mov	r7, r0
 801165e:	e7f1      	b.n	8011644 <_dtoa_r+0xb04>
 8011660:	9b03      	ldr	r3, [sp, #12]
 8011662:	9302      	str	r3, [sp, #8]
 8011664:	9d01      	ldr	r5, [sp, #4]
 8011666:	ee18 0a10 	vmov	r0, s16
 801166a:	4631      	mov	r1, r6
 801166c:	f7ff f9dc 	bl	8010a28 <quorem>
 8011670:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011674:	9b01      	ldr	r3, [sp, #4]
 8011676:	f805 ab01 	strb.w	sl, [r5], #1
 801167a:	1aea      	subs	r2, r5, r3
 801167c:	9b02      	ldr	r3, [sp, #8]
 801167e:	4293      	cmp	r3, r2
 8011680:	dd09      	ble.n	8011696 <_dtoa_r+0xb56>
 8011682:	ee18 1a10 	vmov	r1, s16
 8011686:	2300      	movs	r3, #0
 8011688:	220a      	movs	r2, #10
 801168a:	4620      	mov	r0, r4
 801168c:	f000 f9fa 	bl	8011a84 <__multadd>
 8011690:	ee08 0a10 	vmov	s16, r0
 8011694:	e7e7      	b.n	8011666 <_dtoa_r+0xb26>
 8011696:	9b02      	ldr	r3, [sp, #8]
 8011698:	2b00      	cmp	r3, #0
 801169a:	bfc8      	it	gt
 801169c:	461d      	movgt	r5, r3
 801169e:	9b01      	ldr	r3, [sp, #4]
 80116a0:	bfd8      	it	le
 80116a2:	2501      	movle	r5, #1
 80116a4:	441d      	add	r5, r3
 80116a6:	f04f 0800 	mov.w	r8, #0
 80116aa:	ee18 1a10 	vmov	r1, s16
 80116ae:	2201      	movs	r2, #1
 80116b0:	4620      	mov	r0, r4
 80116b2:	f000 fb97 	bl	8011de4 <__lshift>
 80116b6:	4631      	mov	r1, r6
 80116b8:	ee08 0a10 	vmov	s16, r0
 80116bc:	f000 fc02 	bl	8011ec4 <__mcmp>
 80116c0:	2800      	cmp	r0, #0
 80116c2:	dc91      	bgt.n	80115e8 <_dtoa_r+0xaa8>
 80116c4:	d102      	bne.n	80116cc <_dtoa_r+0xb8c>
 80116c6:	f01a 0f01 	tst.w	sl, #1
 80116ca:	d18d      	bne.n	80115e8 <_dtoa_r+0xaa8>
 80116cc:	462b      	mov	r3, r5
 80116ce:	461d      	mov	r5, r3
 80116d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80116d4:	2a30      	cmp	r2, #48	; 0x30
 80116d6:	d0fa      	beq.n	80116ce <_dtoa_r+0xb8e>
 80116d8:	e6d7      	b.n	801148a <_dtoa_r+0x94a>
 80116da:	9a01      	ldr	r2, [sp, #4]
 80116dc:	429a      	cmp	r2, r3
 80116de:	d184      	bne.n	80115ea <_dtoa_r+0xaaa>
 80116e0:	9b00      	ldr	r3, [sp, #0]
 80116e2:	3301      	adds	r3, #1
 80116e4:	9300      	str	r3, [sp, #0]
 80116e6:	2331      	movs	r3, #49	; 0x31
 80116e8:	7013      	strb	r3, [r2, #0]
 80116ea:	e6ce      	b.n	801148a <_dtoa_r+0x94a>
 80116ec:	4b09      	ldr	r3, [pc, #36]	; (8011714 <_dtoa_r+0xbd4>)
 80116ee:	f7ff ba95 	b.w	8010c1c <_dtoa_r+0xdc>
 80116f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	f47f aa6e 	bne.w	8010bd6 <_dtoa_r+0x96>
 80116fa:	4b07      	ldr	r3, [pc, #28]	; (8011718 <_dtoa_r+0xbd8>)
 80116fc:	f7ff ba8e 	b.w	8010c1c <_dtoa_r+0xdc>
 8011700:	9b02      	ldr	r3, [sp, #8]
 8011702:	2b00      	cmp	r3, #0
 8011704:	dcae      	bgt.n	8011664 <_dtoa_r+0xb24>
 8011706:	9b06      	ldr	r3, [sp, #24]
 8011708:	2b02      	cmp	r3, #2
 801170a:	f73f aea8 	bgt.w	801145e <_dtoa_r+0x91e>
 801170e:	e7a9      	b.n	8011664 <_dtoa_r+0xb24>
 8011710:	0801314f 	.word	0x0801314f
 8011714:	080130ac 	.word	0x080130ac
 8011718:	080130d0 	.word	0x080130d0

0801171c <__sflush_r>:
 801171c:	898a      	ldrh	r2, [r1, #12]
 801171e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011722:	4605      	mov	r5, r0
 8011724:	0710      	lsls	r0, r2, #28
 8011726:	460c      	mov	r4, r1
 8011728:	d458      	bmi.n	80117dc <__sflush_r+0xc0>
 801172a:	684b      	ldr	r3, [r1, #4]
 801172c:	2b00      	cmp	r3, #0
 801172e:	dc05      	bgt.n	801173c <__sflush_r+0x20>
 8011730:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011732:	2b00      	cmp	r3, #0
 8011734:	dc02      	bgt.n	801173c <__sflush_r+0x20>
 8011736:	2000      	movs	r0, #0
 8011738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801173c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801173e:	2e00      	cmp	r6, #0
 8011740:	d0f9      	beq.n	8011736 <__sflush_r+0x1a>
 8011742:	2300      	movs	r3, #0
 8011744:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011748:	682f      	ldr	r7, [r5, #0]
 801174a:	602b      	str	r3, [r5, #0]
 801174c:	d032      	beq.n	80117b4 <__sflush_r+0x98>
 801174e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011750:	89a3      	ldrh	r3, [r4, #12]
 8011752:	075a      	lsls	r2, r3, #29
 8011754:	d505      	bpl.n	8011762 <__sflush_r+0x46>
 8011756:	6863      	ldr	r3, [r4, #4]
 8011758:	1ac0      	subs	r0, r0, r3
 801175a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801175c:	b10b      	cbz	r3, 8011762 <__sflush_r+0x46>
 801175e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011760:	1ac0      	subs	r0, r0, r3
 8011762:	2300      	movs	r3, #0
 8011764:	4602      	mov	r2, r0
 8011766:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011768:	6a21      	ldr	r1, [r4, #32]
 801176a:	4628      	mov	r0, r5
 801176c:	47b0      	blx	r6
 801176e:	1c43      	adds	r3, r0, #1
 8011770:	89a3      	ldrh	r3, [r4, #12]
 8011772:	d106      	bne.n	8011782 <__sflush_r+0x66>
 8011774:	6829      	ldr	r1, [r5, #0]
 8011776:	291d      	cmp	r1, #29
 8011778:	d82c      	bhi.n	80117d4 <__sflush_r+0xb8>
 801177a:	4a2a      	ldr	r2, [pc, #168]	; (8011824 <__sflush_r+0x108>)
 801177c:	40ca      	lsrs	r2, r1
 801177e:	07d6      	lsls	r6, r2, #31
 8011780:	d528      	bpl.n	80117d4 <__sflush_r+0xb8>
 8011782:	2200      	movs	r2, #0
 8011784:	6062      	str	r2, [r4, #4]
 8011786:	04d9      	lsls	r1, r3, #19
 8011788:	6922      	ldr	r2, [r4, #16]
 801178a:	6022      	str	r2, [r4, #0]
 801178c:	d504      	bpl.n	8011798 <__sflush_r+0x7c>
 801178e:	1c42      	adds	r2, r0, #1
 8011790:	d101      	bne.n	8011796 <__sflush_r+0x7a>
 8011792:	682b      	ldr	r3, [r5, #0]
 8011794:	b903      	cbnz	r3, 8011798 <__sflush_r+0x7c>
 8011796:	6560      	str	r0, [r4, #84]	; 0x54
 8011798:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801179a:	602f      	str	r7, [r5, #0]
 801179c:	2900      	cmp	r1, #0
 801179e:	d0ca      	beq.n	8011736 <__sflush_r+0x1a>
 80117a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80117a4:	4299      	cmp	r1, r3
 80117a6:	d002      	beq.n	80117ae <__sflush_r+0x92>
 80117a8:	4628      	mov	r0, r5
 80117aa:	f000 fca3 	bl	80120f4 <_free_r>
 80117ae:	2000      	movs	r0, #0
 80117b0:	6360      	str	r0, [r4, #52]	; 0x34
 80117b2:	e7c1      	b.n	8011738 <__sflush_r+0x1c>
 80117b4:	6a21      	ldr	r1, [r4, #32]
 80117b6:	2301      	movs	r3, #1
 80117b8:	4628      	mov	r0, r5
 80117ba:	47b0      	blx	r6
 80117bc:	1c41      	adds	r1, r0, #1
 80117be:	d1c7      	bne.n	8011750 <__sflush_r+0x34>
 80117c0:	682b      	ldr	r3, [r5, #0]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d0c4      	beq.n	8011750 <__sflush_r+0x34>
 80117c6:	2b1d      	cmp	r3, #29
 80117c8:	d001      	beq.n	80117ce <__sflush_r+0xb2>
 80117ca:	2b16      	cmp	r3, #22
 80117cc:	d101      	bne.n	80117d2 <__sflush_r+0xb6>
 80117ce:	602f      	str	r7, [r5, #0]
 80117d0:	e7b1      	b.n	8011736 <__sflush_r+0x1a>
 80117d2:	89a3      	ldrh	r3, [r4, #12]
 80117d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117d8:	81a3      	strh	r3, [r4, #12]
 80117da:	e7ad      	b.n	8011738 <__sflush_r+0x1c>
 80117dc:	690f      	ldr	r7, [r1, #16]
 80117de:	2f00      	cmp	r7, #0
 80117e0:	d0a9      	beq.n	8011736 <__sflush_r+0x1a>
 80117e2:	0793      	lsls	r3, r2, #30
 80117e4:	680e      	ldr	r6, [r1, #0]
 80117e6:	bf08      	it	eq
 80117e8:	694b      	ldreq	r3, [r1, #20]
 80117ea:	600f      	str	r7, [r1, #0]
 80117ec:	bf18      	it	ne
 80117ee:	2300      	movne	r3, #0
 80117f0:	eba6 0807 	sub.w	r8, r6, r7
 80117f4:	608b      	str	r3, [r1, #8]
 80117f6:	f1b8 0f00 	cmp.w	r8, #0
 80117fa:	dd9c      	ble.n	8011736 <__sflush_r+0x1a>
 80117fc:	6a21      	ldr	r1, [r4, #32]
 80117fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011800:	4643      	mov	r3, r8
 8011802:	463a      	mov	r2, r7
 8011804:	4628      	mov	r0, r5
 8011806:	47b0      	blx	r6
 8011808:	2800      	cmp	r0, #0
 801180a:	dc06      	bgt.n	801181a <__sflush_r+0xfe>
 801180c:	89a3      	ldrh	r3, [r4, #12]
 801180e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011812:	81a3      	strh	r3, [r4, #12]
 8011814:	f04f 30ff 	mov.w	r0, #4294967295
 8011818:	e78e      	b.n	8011738 <__sflush_r+0x1c>
 801181a:	4407      	add	r7, r0
 801181c:	eba8 0800 	sub.w	r8, r8, r0
 8011820:	e7e9      	b.n	80117f6 <__sflush_r+0xda>
 8011822:	bf00      	nop
 8011824:	20400001 	.word	0x20400001

08011828 <_fflush_r>:
 8011828:	b538      	push	{r3, r4, r5, lr}
 801182a:	690b      	ldr	r3, [r1, #16]
 801182c:	4605      	mov	r5, r0
 801182e:	460c      	mov	r4, r1
 8011830:	b913      	cbnz	r3, 8011838 <_fflush_r+0x10>
 8011832:	2500      	movs	r5, #0
 8011834:	4628      	mov	r0, r5
 8011836:	bd38      	pop	{r3, r4, r5, pc}
 8011838:	b118      	cbz	r0, 8011842 <_fflush_r+0x1a>
 801183a:	6983      	ldr	r3, [r0, #24]
 801183c:	b90b      	cbnz	r3, 8011842 <_fflush_r+0x1a>
 801183e:	f7fe f8eb 	bl	800fa18 <__sinit>
 8011842:	4b14      	ldr	r3, [pc, #80]	; (8011894 <_fflush_r+0x6c>)
 8011844:	429c      	cmp	r4, r3
 8011846:	d11b      	bne.n	8011880 <_fflush_r+0x58>
 8011848:	686c      	ldr	r4, [r5, #4]
 801184a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d0ef      	beq.n	8011832 <_fflush_r+0xa>
 8011852:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011854:	07d0      	lsls	r0, r2, #31
 8011856:	d404      	bmi.n	8011862 <_fflush_r+0x3a>
 8011858:	0599      	lsls	r1, r3, #22
 801185a:	d402      	bmi.n	8011862 <_fflush_r+0x3a>
 801185c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801185e:	f7fe f99e 	bl	800fb9e <__retarget_lock_acquire_recursive>
 8011862:	4628      	mov	r0, r5
 8011864:	4621      	mov	r1, r4
 8011866:	f7ff ff59 	bl	801171c <__sflush_r>
 801186a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801186c:	07da      	lsls	r2, r3, #31
 801186e:	4605      	mov	r5, r0
 8011870:	d4e0      	bmi.n	8011834 <_fflush_r+0xc>
 8011872:	89a3      	ldrh	r3, [r4, #12]
 8011874:	059b      	lsls	r3, r3, #22
 8011876:	d4dd      	bmi.n	8011834 <_fflush_r+0xc>
 8011878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801187a:	f7fe f991 	bl	800fba0 <__retarget_lock_release_recursive>
 801187e:	e7d9      	b.n	8011834 <_fflush_r+0xc>
 8011880:	4b05      	ldr	r3, [pc, #20]	; (8011898 <_fflush_r+0x70>)
 8011882:	429c      	cmp	r4, r3
 8011884:	d101      	bne.n	801188a <_fflush_r+0x62>
 8011886:	68ac      	ldr	r4, [r5, #8]
 8011888:	e7df      	b.n	801184a <_fflush_r+0x22>
 801188a:	4b04      	ldr	r3, [pc, #16]	; (801189c <_fflush_r+0x74>)
 801188c:	429c      	cmp	r4, r3
 801188e:	bf08      	it	eq
 8011890:	68ec      	ldreq	r4, [r5, #12]
 8011892:	e7da      	b.n	801184a <_fflush_r+0x22>
 8011894:	08013058 	.word	0x08013058
 8011898:	08013078 	.word	0x08013078
 801189c:	08013038 	.word	0x08013038

080118a0 <_localeconv_r>:
 80118a0:	4800      	ldr	r0, [pc, #0]	; (80118a4 <_localeconv_r+0x4>)
 80118a2:	4770      	bx	lr
 80118a4:	2000016c 	.word	0x2000016c

080118a8 <_lseek_r>:
 80118a8:	b538      	push	{r3, r4, r5, lr}
 80118aa:	4d07      	ldr	r5, [pc, #28]	; (80118c8 <_lseek_r+0x20>)
 80118ac:	4604      	mov	r4, r0
 80118ae:	4608      	mov	r0, r1
 80118b0:	4611      	mov	r1, r2
 80118b2:	2200      	movs	r2, #0
 80118b4:	602a      	str	r2, [r5, #0]
 80118b6:	461a      	mov	r2, r3
 80118b8:	f7f1 fa98 	bl	8002dec <_lseek>
 80118bc:	1c43      	adds	r3, r0, #1
 80118be:	d102      	bne.n	80118c6 <_lseek_r+0x1e>
 80118c0:	682b      	ldr	r3, [r5, #0]
 80118c2:	b103      	cbz	r3, 80118c6 <_lseek_r+0x1e>
 80118c4:	6023      	str	r3, [r4, #0]
 80118c6:	bd38      	pop	{r3, r4, r5, pc}
 80118c8:	20005708 	.word	0x20005708

080118cc <__swhatbuf_r>:
 80118cc:	b570      	push	{r4, r5, r6, lr}
 80118ce:	460e      	mov	r6, r1
 80118d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118d4:	2900      	cmp	r1, #0
 80118d6:	b096      	sub	sp, #88	; 0x58
 80118d8:	4614      	mov	r4, r2
 80118da:	461d      	mov	r5, r3
 80118dc:	da08      	bge.n	80118f0 <__swhatbuf_r+0x24>
 80118de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80118e2:	2200      	movs	r2, #0
 80118e4:	602a      	str	r2, [r5, #0]
 80118e6:	061a      	lsls	r2, r3, #24
 80118e8:	d410      	bmi.n	801190c <__swhatbuf_r+0x40>
 80118ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80118ee:	e00e      	b.n	801190e <__swhatbuf_r+0x42>
 80118f0:	466a      	mov	r2, sp
 80118f2:	f000 fde7 	bl	80124c4 <_fstat_r>
 80118f6:	2800      	cmp	r0, #0
 80118f8:	dbf1      	blt.n	80118de <__swhatbuf_r+0x12>
 80118fa:	9a01      	ldr	r2, [sp, #4]
 80118fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011900:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011904:	425a      	negs	r2, r3
 8011906:	415a      	adcs	r2, r3
 8011908:	602a      	str	r2, [r5, #0]
 801190a:	e7ee      	b.n	80118ea <__swhatbuf_r+0x1e>
 801190c:	2340      	movs	r3, #64	; 0x40
 801190e:	2000      	movs	r0, #0
 8011910:	6023      	str	r3, [r4, #0]
 8011912:	b016      	add	sp, #88	; 0x58
 8011914:	bd70      	pop	{r4, r5, r6, pc}
	...

08011918 <__smakebuf_r>:
 8011918:	898b      	ldrh	r3, [r1, #12]
 801191a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801191c:	079d      	lsls	r5, r3, #30
 801191e:	4606      	mov	r6, r0
 8011920:	460c      	mov	r4, r1
 8011922:	d507      	bpl.n	8011934 <__smakebuf_r+0x1c>
 8011924:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011928:	6023      	str	r3, [r4, #0]
 801192a:	6123      	str	r3, [r4, #16]
 801192c:	2301      	movs	r3, #1
 801192e:	6163      	str	r3, [r4, #20]
 8011930:	b002      	add	sp, #8
 8011932:	bd70      	pop	{r4, r5, r6, pc}
 8011934:	ab01      	add	r3, sp, #4
 8011936:	466a      	mov	r2, sp
 8011938:	f7ff ffc8 	bl	80118cc <__swhatbuf_r>
 801193c:	9900      	ldr	r1, [sp, #0]
 801193e:	4605      	mov	r5, r0
 8011940:	4630      	mov	r0, r6
 8011942:	f7fe f965 	bl	800fc10 <_malloc_r>
 8011946:	b948      	cbnz	r0, 801195c <__smakebuf_r+0x44>
 8011948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801194c:	059a      	lsls	r2, r3, #22
 801194e:	d4ef      	bmi.n	8011930 <__smakebuf_r+0x18>
 8011950:	f023 0303 	bic.w	r3, r3, #3
 8011954:	f043 0302 	orr.w	r3, r3, #2
 8011958:	81a3      	strh	r3, [r4, #12]
 801195a:	e7e3      	b.n	8011924 <__smakebuf_r+0xc>
 801195c:	4b0d      	ldr	r3, [pc, #52]	; (8011994 <__smakebuf_r+0x7c>)
 801195e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011960:	89a3      	ldrh	r3, [r4, #12]
 8011962:	6020      	str	r0, [r4, #0]
 8011964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011968:	81a3      	strh	r3, [r4, #12]
 801196a:	9b00      	ldr	r3, [sp, #0]
 801196c:	6163      	str	r3, [r4, #20]
 801196e:	9b01      	ldr	r3, [sp, #4]
 8011970:	6120      	str	r0, [r4, #16]
 8011972:	b15b      	cbz	r3, 801198c <__smakebuf_r+0x74>
 8011974:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011978:	4630      	mov	r0, r6
 801197a:	f000 fdb5 	bl	80124e8 <_isatty_r>
 801197e:	b128      	cbz	r0, 801198c <__smakebuf_r+0x74>
 8011980:	89a3      	ldrh	r3, [r4, #12]
 8011982:	f023 0303 	bic.w	r3, r3, #3
 8011986:	f043 0301 	orr.w	r3, r3, #1
 801198a:	81a3      	strh	r3, [r4, #12]
 801198c:	89a0      	ldrh	r0, [r4, #12]
 801198e:	4305      	orrs	r5, r0
 8011990:	81a5      	strh	r5, [r4, #12]
 8011992:	e7cd      	b.n	8011930 <__smakebuf_r+0x18>
 8011994:	0800f9b1 	.word	0x0800f9b1

08011998 <malloc>:
 8011998:	4b02      	ldr	r3, [pc, #8]	; (80119a4 <malloc+0xc>)
 801199a:	4601      	mov	r1, r0
 801199c:	6818      	ldr	r0, [r3, #0]
 801199e:	f7fe b937 	b.w	800fc10 <_malloc_r>
 80119a2:	bf00      	nop
 80119a4:	20000018 	.word	0x20000018

080119a8 <__malloc_lock>:
 80119a8:	4801      	ldr	r0, [pc, #4]	; (80119b0 <__malloc_lock+0x8>)
 80119aa:	f7fe b8f8 	b.w	800fb9e <__retarget_lock_acquire_recursive>
 80119ae:	bf00      	nop
 80119b0:	200056fc 	.word	0x200056fc

080119b4 <__malloc_unlock>:
 80119b4:	4801      	ldr	r0, [pc, #4]	; (80119bc <__malloc_unlock+0x8>)
 80119b6:	f7fe b8f3 	b.w	800fba0 <__retarget_lock_release_recursive>
 80119ba:	bf00      	nop
 80119bc:	200056fc 	.word	0x200056fc

080119c0 <_Balloc>:
 80119c0:	b570      	push	{r4, r5, r6, lr}
 80119c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80119c4:	4604      	mov	r4, r0
 80119c6:	460d      	mov	r5, r1
 80119c8:	b976      	cbnz	r6, 80119e8 <_Balloc+0x28>
 80119ca:	2010      	movs	r0, #16
 80119cc:	f7ff ffe4 	bl	8011998 <malloc>
 80119d0:	4602      	mov	r2, r0
 80119d2:	6260      	str	r0, [r4, #36]	; 0x24
 80119d4:	b920      	cbnz	r0, 80119e0 <_Balloc+0x20>
 80119d6:	4b18      	ldr	r3, [pc, #96]	; (8011a38 <_Balloc+0x78>)
 80119d8:	4818      	ldr	r0, [pc, #96]	; (8011a3c <_Balloc+0x7c>)
 80119da:	2166      	movs	r1, #102	; 0x66
 80119dc:	f000 fd42 	bl	8012464 <__assert_func>
 80119e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80119e4:	6006      	str	r6, [r0, #0]
 80119e6:	60c6      	str	r6, [r0, #12]
 80119e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80119ea:	68f3      	ldr	r3, [r6, #12]
 80119ec:	b183      	cbz	r3, 8011a10 <_Balloc+0x50>
 80119ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80119f0:	68db      	ldr	r3, [r3, #12]
 80119f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80119f6:	b9b8      	cbnz	r0, 8011a28 <_Balloc+0x68>
 80119f8:	2101      	movs	r1, #1
 80119fa:	fa01 f605 	lsl.w	r6, r1, r5
 80119fe:	1d72      	adds	r2, r6, #5
 8011a00:	0092      	lsls	r2, r2, #2
 8011a02:	4620      	mov	r0, r4
 8011a04:	f000 fb60 	bl	80120c8 <_calloc_r>
 8011a08:	b160      	cbz	r0, 8011a24 <_Balloc+0x64>
 8011a0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011a0e:	e00e      	b.n	8011a2e <_Balloc+0x6e>
 8011a10:	2221      	movs	r2, #33	; 0x21
 8011a12:	2104      	movs	r1, #4
 8011a14:	4620      	mov	r0, r4
 8011a16:	f000 fb57 	bl	80120c8 <_calloc_r>
 8011a1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a1c:	60f0      	str	r0, [r6, #12]
 8011a1e:	68db      	ldr	r3, [r3, #12]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d1e4      	bne.n	80119ee <_Balloc+0x2e>
 8011a24:	2000      	movs	r0, #0
 8011a26:	bd70      	pop	{r4, r5, r6, pc}
 8011a28:	6802      	ldr	r2, [r0, #0]
 8011a2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011a2e:	2300      	movs	r3, #0
 8011a30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011a34:	e7f7      	b.n	8011a26 <_Balloc+0x66>
 8011a36:	bf00      	nop
 8011a38:	080130dd 	.word	0x080130dd
 8011a3c:	08013160 	.word	0x08013160

08011a40 <_Bfree>:
 8011a40:	b570      	push	{r4, r5, r6, lr}
 8011a42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011a44:	4605      	mov	r5, r0
 8011a46:	460c      	mov	r4, r1
 8011a48:	b976      	cbnz	r6, 8011a68 <_Bfree+0x28>
 8011a4a:	2010      	movs	r0, #16
 8011a4c:	f7ff ffa4 	bl	8011998 <malloc>
 8011a50:	4602      	mov	r2, r0
 8011a52:	6268      	str	r0, [r5, #36]	; 0x24
 8011a54:	b920      	cbnz	r0, 8011a60 <_Bfree+0x20>
 8011a56:	4b09      	ldr	r3, [pc, #36]	; (8011a7c <_Bfree+0x3c>)
 8011a58:	4809      	ldr	r0, [pc, #36]	; (8011a80 <_Bfree+0x40>)
 8011a5a:	218a      	movs	r1, #138	; 0x8a
 8011a5c:	f000 fd02 	bl	8012464 <__assert_func>
 8011a60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011a64:	6006      	str	r6, [r0, #0]
 8011a66:	60c6      	str	r6, [r0, #12]
 8011a68:	b13c      	cbz	r4, 8011a7a <_Bfree+0x3a>
 8011a6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011a6c:	6862      	ldr	r2, [r4, #4]
 8011a6e:	68db      	ldr	r3, [r3, #12]
 8011a70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011a74:	6021      	str	r1, [r4, #0]
 8011a76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011a7a:	bd70      	pop	{r4, r5, r6, pc}
 8011a7c:	080130dd 	.word	0x080130dd
 8011a80:	08013160 	.word	0x08013160

08011a84 <__multadd>:
 8011a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a88:	690d      	ldr	r5, [r1, #16]
 8011a8a:	4607      	mov	r7, r0
 8011a8c:	460c      	mov	r4, r1
 8011a8e:	461e      	mov	r6, r3
 8011a90:	f101 0c14 	add.w	ip, r1, #20
 8011a94:	2000      	movs	r0, #0
 8011a96:	f8dc 3000 	ldr.w	r3, [ip]
 8011a9a:	b299      	uxth	r1, r3
 8011a9c:	fb02 6101 	mla	r1, r2, r1, r6
 8011aa0:	0c1e      	lsrs	r6, r3, #16
 8011aa2:	0c0b      	lsrs	r3, r1, #16
 8011aa4:	fb02 3306 	mla	r3, r2, r6, r3
 8011aa8:	b289      	uxth	r1, r1
 8011aaa:	3001      	adds	r0, #1
 8011aac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011ab0:	4285      	cmp	r5, r0
 8011ab2:	f84c 1b04 	str.w	r1, [ip], #4
 8011ab6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011aba:	dcec      	bgt.n	8011a96 <__multadd+0x12>
 8011abc:	b30e      	cbz	r6, 8011b02 <__multadd+0x7e>
 8011abe:	68a3      	ldr	r3, [r4, #8]
 8011ac0:	42ab      	cmp	r3, r5
 8011ac2:	dc19      	bgt.n	8011af8 <__multadd+0x74>
 8011ac4:	6861      	ldr	r1, [r4, #4]
 8011ac6:	4638      	mov	r0, r7
 8011ac8:	3101      	adds	r1, #1
 8011aca:	f7ff ff79 	bl	80119c0 <_Balloc>
 8011ace:	4680      	mov	r8, r0
 8011ad0:	b928      	cbnz	r0, 8011ade <__multadd+0x5a>
 8011ad2:	4602      	mov	r2, r0
 8011ad4:	4b0c      	ldr	r3, [pc, #48]	; (8011b08 <__multadd+0x84>)
 8011ad6:	480d      	ldr	r0, [pc, #52]	; (8011b0c <__multadd+0x88>)
 8011ad8:	21b5      	movs	r1, #181	; 0xb5
 8011ada:	f000 fcc3 	bl	8012464 <__assert_func>
 8011ade:	6922      	ldr	r2, [r4, #16]
 8011ae0:	3202      	adds	r2, #2
 8011ae2:	f104 010c 	add.w	r1, r4, #12
 8011ae6:	0092      	lsls	r2, r2, #2
 8011ae8:	300c      	adds	r0, #12
 8011aea:	f7fe f85a 	bl	800fba2 <memcpy>
 8011aee:	4621      	mov	r1, r4
 8011af0:	4638      	mov	r0, r7
 8011af2:	f7ff ffa5 	bl	8011a40 <_Bfree>
 8011af6:	4644      	mov	r4, r8
 8011af8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011afc:	3501      	adds	r5, #1
 8011afe:	615e      	str	r6, [r3, #20]
 8011b00:	6125      	str	r5, [r4, #16]
 8011b02:	4620      	mov	r0, r4
 8011b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b08:	0801314f 	.word	0x0801314f
 8011b0c:	08013160 	.word	0x08013160

08011b10 <__hi0bits>:
 8011b10:	0c03      	lsrs	r3, r0, #16
 8011b12:	041b      	lsls	r3, r3, #16
 8011b14:	b9d3      	cbnz	r3, 8011b4c <__hi0bits+0x3c>
 8011b16:	0400      	lsls	r0, r0, #16
 8011b18:	2310      	movs	r3, #16
 8011b1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011b1e:	bf04      	itt	eq
 8011b20:	0200      	lsleq	r0, r0, #8
 8011b22:	3308      	addeq	r3, #8
 8011b24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011b28:	bf04      	itt	eq
 8011b2a:	0100      	lsleq	r0, r0, #4
 8011b2c:	3304      	addeq	r3, #4
 8011b2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011b32:	bf04      	itt	eq
 8011b34:	0080      	lsleq	r0, r0, #2
 8011b36:	3302      	addeq	r3, #2
 8011b38:	2800      	cmp	r0, #0
 8011b3a:	db05      	blt.n	8011b48 <__hi0bits+0x38>
 8011b3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011b40:	f103 0301 	add.w	r3, r3, #1
 8011b44:	bf08      	it	eq
 8011b46:	2320      	moveq	r3, #32
 8011b48:	4618      	mov	r0, r3
 8011b4a:	4770      	bx	lr
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	e7e4      	b.n	8011b1a <__hi0bits+0xa>

08011b50 <__lo0bits>:
 8011b50:	6803      	ldr	r3, [r0, #0]
 8011b52:	f013 0207 	ands.w	r2, r3, #7
 8011b56:	4601      	mov	r1, r0
 8011b58:	d00b      	beq.n	8011b72 <__lo0bits+0x22>
 8011b5a:	07da      	lsls	r2, r3, #31
 8011b5c:	d423      	bmi.n	8011ba6 <__lo0bits+0x56>
 8011b5e:	0798      	lsls	r0, r3, #30
 8011b60:	bf49      	itett	mi
 8011b62:	085b      	lsrmi	r3, r3, #1
 8011b64:	089b      	lsrpl	r3, r3, #2
 8011b66:	2001      	movmi	r0, #1
 8011b68:	600b      	strmi	r3, [r1, #0]
 8011b6a:	bf5c      	itt	pl
 8011b6c:	600b      	strpl	r3, [r1, #0]
 8011b6e:	2002      	movpl	r0, #2
 8011b70:	4770      	bx	lr
 8011b72:	b298      	uxth	r0, r3
 8011b74:	b9a8      	cbnz	r0, 8011ba2 <__lo0bits+0x52>
 8011b76:	0c1b      	lsrs	r3, r3, #16
 8011b78:	2010      	movs	r0, #16
 8011b7a:	b2da      	uxtb	r2, r3
 8011b7c:	b90a      	cbnz	r2, 8011b82 <__lo0bits+0x32>
 8011b7e:	3008      	adds	r0, #8
 8011b80:	0a1b      	lsrs	r3, r3, #8
 8011b82:	071a      	lsls	r2, r3, #28
 8011b84:	bf04      	itt	eq
 8011b86:	091b      	lsreq	r3, r3, #4
 8011b88:	3004      	addeq	r0, #4
 8011b8a:	079a      	lsls	r2, r3, #30
 8011b8c:	bf04      	itt	eq
 8011b8e:	089b      	lsreq	r3, r3, #2
 8011b90:	3002      	addeq	r0, #2
 8011b92:	07da      	lsls	r2, r3, #31
 8011b94:	d403      	bmi.n	8011b9e <__lo0bits+0x4e>
 8011b96:	085b      	lsrs	r3, r3, #1
 8011b98:	f100 0001 	add.w	r0, r0, #1
 8011b9c:	d005      	beq.n	8011baa <__lo0bits+0x5a>
 8011b9e:	600b      	str	r3, [r1, #0]
 8011ba0:	4770      	bx	lr
 8011ba2:	4610      	mov	r0, r2
 8011ba4:	e7e9      	b.n	8011b7a <__lo0bits+0x2a>
 8011ba6:	2000      	movs	r0, #0
 8011ba8:	4770      	bx	lr
 8011baa:	2020      	movs	r0, #32
 8011bac:	4770      	bx	lr
	...

08011bb0 <__i2b>:
 8011bb0:	b510      	push	{r4, lr}
 8011bb2:	460c      	mov	r4, r1
 8011bb4:	2101      	movs	r1, #1
 8011bb6:	f7ff ff03 	bl	80119c0 <_Balloc>
 8011bba:	4602      	mov	r2, r0
 8011bbc:	b928      	cbnz	r0, 8011bca <__i2b+0x1a>
 8011bbe:	4b05      	ldr	r3, [pc, #20]	; (8011bd4 <__i2b+0x24>)
 8011bc0:	4805      	ldr	r0, [pc, #20]	; (8011bd8 <__i2b+0x28>)
 8011bc2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011bc6:	f000 fc4d 	bl	8012464 <__assert_func>
 8011bca:	2301      	movs	r3, #1
 8011bcc:	6144      	str	r4, [r0, #20]
 8011bce:	6103      	str	r3, [r0, #16]
 8011bd0:	bd10      	pop	{r4, pc}
 8011bd2:	bf00      	nop
 8011bd4:	0801314f 	.word	0x0801314f
 8011bd8:	08013160 	.word	0x08013160

08011bdc <__multiply>:
 8011bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011be0:	4691      	mov	r9, r2
 8011be2:	690a      	ldr	r2, [r1, #16]
 8011be4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011be8:	429a      	cmp	r2, r3
 8011bea:	bfb8      	it	lt
 8011bec:	460b      	movlt	r3, r1
 8011bee:	460c      	mov	r4, r1
 8011bf0:	bfbc      	itt	lt
 8011bf2:	464c      	movlt	r4, r9
 8011bf4:	4699      	movlt	r9, r3
 8011bf6:	6927      	ldr	r7, [r4, #16]
 8011bf8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011bfc:	68a3      	ldr	r3, [r4, #8]
 8011bfe:	6861      	ldr	r1, [r4, #4]
 8011c00:	eb07 060a 	add.w	r6, r7, sl
 8011c04:	42b3      	cmp	r3, r6
 8011c06:	b085      	sub	sp, #20
 8011c08:	bfb8      	it	lt
 8011c0a:	3101      	addlt	r1, #1
 8011c0c:	f7ff fed8 	bl	80119c0 <_Balloc>
 8011c10:	b930      	cbnz	r0, 8011c20 <__multiply+0x44>
 8011c12:	4602      	mov	r2, r0
 8011c14:	4b44      	ldr	r3, [pc, #272]	; (8011d28 <__multiply+0x14c>)
 8011c16:	4845      	ldr	r0, [pc, #276]	; (8011d2c <__multiply+0x150>)
 8011c18:	f240 115d 	movw	r1, #349	; 0x15d
 8011c1c:	f000 fc22 	bl	8012464 <__assert_func>
 8011c20:	f100 0514 	add.w	r5, r0, #20
 8011c24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011c28:	462b      	mov	r3, r5
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	4543      	cmp	r3, r8
 8011c2e:	d321      	bcc.n	8011c74 <__multiply+0x98>
 8011c30:	f104 0314 	add.w	r3, r4, #20
 8011c34:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011c38:	f109 0314 	add.w	r3, r9, #20
 8011c3c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011c40:	9202      	str	r2, [sp, #8]
 8011c42:	1b3a      	subs	r2, r7, r4
 8011c44:	3a15      	subs	r2, #21
 8011c46:	f022 0203 	bic.w	r2, r2, #3
 8011c4a:	3204      	adds	r2, #4
 8011c4c:	f104 0115 	add.w	r1, r4, #21
 8011c50:	428f      	cmp	r7, r1
 8011c52:	bf38      	it	cc
 8011c54:	2204      	movcc	r2, #4
 8011c56:	9201      	str	r2, [sp, #4]
 8011c58:	9a02      	ldr	r2, [sp, #8]
 8011c5a:	9303      	str	r3, [sp, #12]
 8011c5c:	429a      	cmp	r2, r3
 8011c5e:	d80c      	bhi.n	8011c7a <__multiply+0x9e>
 8011c60:	2e00      	cmp	r6, #0
 8011c62:	dd03      	ble.n	8011c6c <__multiply+0x90>
 8011c64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d05a      	beq.n	8011d22 <__multiply+0x146>
 8011c6c:	6106      	str	r6, [r0, #16]
 8011c6e:	b005      	add	sp, #20
 8011c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c74:	f843 2b04 	str.w	r2, [r3], #4
 8011c78:	e7d8      	b.n	8011c2c <__multiply+0x50>
 8011c7a:	f8b3 a000 	ldrh.w	sl, [r3]
 8011c7e:	f1ba 0f00 	cmp.w	sl, #0
 8011c82:	d024      	beq.n	8011cce <__multiply+0xf2>
 8011c84:	f104 0e14 	add.w	lr, r4, #20
 8011c88:	46a9      	mov	r9, r5
 8011c8a:	f04f 0c00 	mov.w	ip, #0
 8011c8e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011c92:	f8d9 1000 	ldr.w	r1, [r9]
 8011c96:	fa1f fb82 	uxth.w	fp, r2
 8011c9a:	b289      	uxth	r1, r1
 8011c9c:	fb0a 110b 	mla	r1, sl, fp, r1
 8011ca0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011ca4:	f8d9 2000 	ldr.w	r2, [r9]
 8011ca8:	4461      	add	r1, ip
 8011caa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011cae:	fb0a c20b 	mla	r2, sl, fp, ip
 8011cb2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011cb6:	b289      	uxth	r1, r1
 8011cb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011cbc:	4577      	cmp	r7, lr
 8011cbe:	f849 1b04 	str.w	r1, [r9], #4
 8011cc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011cc6:	d8e2      	bhi.n	8011c8e <__multiply+0xb2>
 8011cc8:	9a01      	ldr	r2, [sp, #4]
 8011cca:	f845 c002 	str.w	ip, [r5, r2]
 8011cce:	9a03      	ldr	r2, [sp, #12]
 8011cd0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011cd4:	3304      	adds	r3, #4
 8011cd6:	f1b9 0f00 	cmp.w	r9, #0
 8011cda:	d020      	beq.n	8011d1e <__multiply+0x142>
 8011cdc:	6829      	ldr	r1, [r5, #0]
 8011cde:	f104 0c14 	add.w	ip, r4, #20
 8011ce2:	46ae      	mov	lr, r5
 8011ce4:	f04f 0a00 	mov.w	sl, #0
 8011ce8:	f8bc b000 	ldrh.w	fp, [ip]
 8011cec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011cf0:	fb09 220b 	mla	r2, r9, fp, r2
 8011cf4:	4492      	add	sl, r2
 8011cf6:	b289      	uxth	r1, r1
 8011cf8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011cfc:	f84e 1b04 	str.w	r1, [lr], #4
 8011d00:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011d04:	f8be 1000 	ldrh.w	r1, [lr]
 8011d08:	0c12      	lsrs	r2, r2, #16
 8011d0a:	fb09 1102 	mla	r1, r9, r2, r1
 8011d0e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011d12:	4567      	cmp	r7, ip
 8011d14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011d18:	d8e6      	bhi.n	8011ce8 <__multiply+0x10c>
 8011d1a:	9a01      	ldr	r2, [sp, #4]
 8011d1c:	50a9      	str	r1, [r5, r2]
 8011d1e:	3504      	adds	r5, #4
 8011d20:	e79a      	b.n	8011c58 <__multiply+0x7c>
 8011d22:	3e01      	subs	r6, #1
 8011d24:	e79c      	b.n	8011c60 <__multiply+0x84>
 8011d26:	bf00      	nop
 8011d28:	0801314f 	.word	0x0801314f
 8011d2c:	08013160 	.word	0x08013160

08011d30 <__pow5mult>:
 8011d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d34:	4615      	mov	r5, r2
 8011d36:	f012 0203 	ands.w	r2, r2, #3
 8011d3a:	4606      	mov	r6, r0
 8011d3c:	460f      	mov	r7, r1
 8011d3e:	d007      	beq.n	8011d50 <__pow5mult+0x20>
 8011d40:	4c25      	ldr	r4, [pc, #148]	; (8011dd8 <__pow5mult+0xa8>)
 8011d42:	3a01      	subs	r2, #1
 8011d44:	2300      	movs	r3, #0
 8011d46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011d4a:	f7ff fe9b 	bl	8011a84 <__multadd>
 8011d4e:	4607      	mov	r7, r0
 8011d50:	10ad      	asrs	r5, r5, #2
 8011d52:	d03d      	beq.n	8011dd0 <__pow5mult+0xa0>
 8011d54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011d56:	b97c      	cbnz	r4, 8011d78 <__pow5mult+0x48>
 8011d58:	2010      	movs	r0, #16
 8011d5a:	f7ff fe1d 	bl	8011998 <malloc>
 8011d5e:	4602      	mov	r2, r0
 8011d60:	6270      	str	r0, [r6, #36]	; 0x24
 8011d62:	b928      	cbnz	r0, 8011d70 <__pow5mult+0x40>
 8011d64:	4b1d      	ldr	r3, [pc, #116]	; (8011ddc <__pow5mult+0xac>)
 8011d66:	481e      	ldr	r0, [pc, #120]	; (8011de0 <__pow5mult+0xb0>)
 8011d68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011d6c:	f000 fb7a 	bl	8012464 <__assert_func>
 8011d70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011d74:	6004      	str	r4, [r0, #0]
 8011d76:	60c4      	str	r4, [r0, #12]
 8011d78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011d7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011d80:	b94c      	cbnz	r4, 8011d96 <__pow5mult+0x66>
 8011d82:	f240 2171 	movw	r1, #625	; 0x271
 8011d86:	4630      	mov	r0, r6
 8011d88:	f7ff ff12 	bl	8011bb0 <__i2b>
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011d92:	4604      	mov	r4, r0
 8011d94:	6003      	str	r3, [r0, #0]
 8011d96:	f04f 0900 	mov.w	r9, #0
 8011d9a:	07eb      	lsls	r3, r5, #31
 8011d9c:	d50a      	bpl.n	8011db4 <__pow5mult+0x84>
 8011d9e:	4639      	mov	r1, r7
 8011da0:	4622      	mov	r2, r4
 8011da2:	4630      	mov	r0, r6
 8011da4:	f7ff ff1a 	bl	8011bdc <__multiply>
 8011da8:	4639      	mov	r1, r7
 8011daa:	4680      	mov	r8, r0
 8011dac:	4630      	mov	r0, r6
 8011dae:	f7ff fe47 	bl	8011a40 <_Bfree>
 8011db2:	4647      	mov	r7, r8
 8011db4:	106d      	asrs	r5, r5, #1
 8011db6:	d00b      	beq.n	8011dd0 <__pow5mult+0xa0>
 8011db8:	6820      	ldr	r0, [r4, #0]
 8011dba:	b938      	cbnz	r0, 8011dcc <__pow5mult+0x9c>
 8011dbc:	4622      	mov	r2, r4
 8011dbe:	4621      	mov	r1, r4
 8011dc0:	4630      	mov	r0, r6
 8011dc2:	f7ff ff0b 	bl	8011bdc <__multiply>
 8011dc6:	6020      	str	r0, [r4, #0]
 8011dc8:	f8c0 9000 	str.w	r9, [r0]
 8011dcc:	4604      	mov	r4, r0
 8011dce:	e7e4      	b.n	8011d9a <__pow5mult+0x6a>
 8011dd0:	4638      	mov	r0, r7
 8011dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011dd6:	bf00      	nop
 8011dd8:	080132b0 	.word	0x080132b0
 8011ddc:	080130dd 	.word	0x080130dd
 8011de0:	08013160 	.word	0x08013160

08011de4 <__lshift>:
 8011de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011de8:	460c      	mov	r4, r1
 8011dea:	6849      	ldr	r1, [r1, #4]
 8011dec:	6923      	ldr	r3, [r4, #16]
 8011dee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011df2:	68a3      	ldr	r3, [r4, #8]
 8011df4:	4607      	mov	r7, r0
 8011df6:	4691      	mov	r9, r2
 8011df8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011dfc:	f108 0601 	add.w	r6, r8, #1
 8011e00:	42b3      	cmp	r3, r6
 8011e02:	db0b      	blt.n	8011e1c <__lshift+0x38>
 8011e04:	4638      	mov	r0, r7
 8011e06:	f7ff fddb 	bl	80119c0 <_Balloc>
 8011e0a:	4605      	mov	r5, r0
 8011e0c:	b948      	cbnz	r0, 8011e22 <__lshift+0x3e>
 8011e0e:	4602      	mov	r2, r0
 8011e10:	4b2a      	ldr	r3, [pc, #168]	; (8011ebc <__lshift+0xd8>)
 8011e12:	482b      	ldr	r0, [pc, #172]	; (8011ec0 <__lshift+0xdc>)
 8011e14:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011e18:	f000 fb24 	bl	8012464 <__assert_func>
 8011e1c:	3101      	adds	r1, #1
 8011e1e:	005b      	lsls	r3, r3, #1
 8011e20:	e7ee      	b.n	8011e00 <__lshift+0x1c>
 8011e22:	2300      	movs	r3, #0
 8011e24:	f100 0114 	add.w	r1, r0, #20
 8011e28:	f100 0210 	add.w	r2, r0, #16
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	4553      	cmp	r3, sl
 8011e30:	db37      	blt.n	8011ea2 <__lshift+0xbe>
 8011e32:	6920      	ldr	r0, [r4, #16]
 8011e34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011e38:	f104 0314 	add.w	r3, r4, #20
 8011e3c:	f019 091f 	ands.w	r9, r9, #31
 8011e40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011e44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011e48:	d02f      	beq.n	8011eaa <__lshift+0xc6>
 8011e4a:	f1c9 0e20 	rsb	lr, r9, #32
 8011e4e:	468a      	mov	sl, r1
 8011e50:	f04f 0c00 	mov.w	ip, #0
 8011e54:	681a      	ldr	r2, [r3, #0]
 8011e56:	fa02 f209 	lsl.w	r2, r2, r9
 8011e5a:	ea42 020c 	orr.w	r2, r2, ip
 8011e5e:	f84a 2b04 	str.w	r2, [sl], #4
 8011e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e66:	4298      	cmp	r0, r3
 8011e68:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011e6c:	d8f2      	bhi.n	8011e54 <__lshift+0x70>
 8011e6e:	1b03      	subs	r3, r0, r4
 8011e70:	3b15      	subs	r3, #21
 8011e72:	f023 0303 	bic.w	r3, r3, #3
 8011e76:	3304      	adds	r3, #4
 8011e78:	f104 0215 	add.w	r2, r4, #21
 8011e7c:	4290      	cmp	r0, r2
 8011e7e:	bf38      	it	cc
 8011e80:	2304      	movcc	r3, #4
 8011e82:	f841 c003 	str.w	ip, [r1, r3]
 8011e86:	f1bc 0f00 	cmp.w	ip, #0
 8011e8a:	d001      	beq.n	8011e90 <__lshift+0xac>
 8011e8c:	f108 0602 	add.w	r6, r8, #2
 8011e90:	3e01      	subs	r6, #1
 8011e92:	4638      	mov	r0, r7
 8011e94:	612e      	str	r6, [r5, #16]
 8011e96:	4621      	mov	r1, r4
 8011e98:	f7ff fdd2 	bl	8011a40 <_Bfree>
 8011e9c:	4628      	mov	r0, r5
 8011e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ea2:	f842 0f04 	str.w	r0, [r2, #4]!
 8011ea6:	3301      	adds	r3, #1
 8011ea8:	e7c1      	b.n	8011e2e <__lshift+0x4a>
 8011eaa:	3904      	subs	r1, #4
 8011eac:	f853 2b04 	ldr.w	r2, [r3], #4
 8011eb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8011eb4:	4298      	cmp	r0, r3
 8011eb6:	d8f9      	bhi.n	8011eac <__lshift+0xc8>
 8011eb8:	e7ea      	b.n	8011e90 <__lshift+0xac>
 8011eba:	bf00      	nop
 8011ebc:	0801314f 	.word	0x0801314f
 8011ec0:	08013160 	.word	0x08013160

08011ec4 <__mcmp>:
 8011ec4:	b530      	push	{r4, r5, lr}
 8011ec6:	6902      	ldr	r2, [r0, #16]
 8011ec8:	690c      	ldr	r4, [r1, #16]
 8011eca:	1b12      	subs	r2, r2, r4
 8011ecc:	d10e      	bne.n	8011eec <__mcmp+0x28>
 8011ece:	f100 0314 	add.w	r3, r0, #20
 8011ed2:	3114      	adds	r1, #20
 8011ed4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011ed8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011edc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011ee0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011ee4:	42a5      	cmp	r5, r4
 8011ee6:	d003      	beq.n	8011ef0 <__mcmp+0x2c>
 8011ee8:	d305      	bcc.n	8011ef6 <__mcmp+0x32>
 8011eea:	2201      	movs	r2, #1
 8011eec:	4610      	mov	r0, r2
 8011eee:	bd30      	pop	{r4, r5, pc}
 8011ef0:	4283      	cmp	r3, r0
 8011ef2:	d3f3      	bcc.n	8011edc <__mcmp+0x18>
 8011ef4:	e7fa      	b.n	8011eec <__mcmp+0x28>
 8011ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8011efa:	e7f7      	b.n	8011eec <__mcmp+0x28>

08011efc <__mdiff>:
 8011efc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f00:	460c      	mov	r4, r1
 8011f02:	4606      	mov	r6, r0
 8011f04:	4611      	mov	r1, r2
 8011f06:	4620      	mov	r0, r4
 8011f08:	4690      	mov	r8, r2
 8011f0a:	f7ff ffdb 	bl	8011ec4 <__mcmp>
 8011f0e:	1e05      	subs	r5, r0, #0
 8011f10:	d110      	bne.n	8011f34 <__mdiff+0x38>
 8011f12:	4629      	mov	r1, r5
 8011f14:	4630      	mov	r0, r6
 8011f16:	f7ff fd53 	bl	80119c0 <_Balloc>
 8011f1a:	b930      	cbnz	r0, 8011f2a <__mdiff+0x2e>
 8011f1c:	4b3a      	ldr	r3, [pc, #232]	; (8012008 <__mdiff+0x10c>)
 8011f1e:	4602      	mov	r2, r0
 8011f20:	f240 2132 	movw	r1, #562	; 0x232
 8011f24:	4839      	ldr	r0, [pc, #228]	; (801200c <__mdiff+0x110>)
 8011f26:	f000 fa9d 	bl	8012464 <__assert_func>
 8011f2a:	2301      	movs	r3, #1
 8011f2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011f30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f34:	bfa4      	itt	ge
 8011f36:	4643      	movge	r3, r8
 8011f38:	46a0      	movge	r8, r4
 8011f3a:	4630      	mov	r0, r6
 8011f3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011f40:	bfa6      	itte	ge
 8011f42:	461c      	movge	r4, r3
 8011f44:	2500      	movge	r5, #0
 8011f46:	2501      	movlt	r5, #1
 8011f48:	f7ff fd3a 	bl	80119c0 <_Balloc>
 8011f4c:	b920      	cbnz	r0, 8011f58 <__mdiff+0x5c>
 8011f4e:	4b2e      	ldr	r3, [pc, #184]	; (8012008 <__mdiff+0x10c>)
 8011f50:	4602      	mov	r2, r0
 8011f52:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011f56:	e7e5      	b.n	8011f24 <__mdiff+0x28>
 8011f58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011f5c:	6926      	ldr	r6, [r4, #16]
 8011f5e:	60c5      	str	r5, [r0, #12]
 8011f60:	f104 0914 	add.w	r9, r4, #20
 8011f64:	f108 0514 	add.w	r5, r8, #20
 8011f68:	f100 0e14 	add.w	lr, r0, #20
 8011f6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011f70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011f74:	f108 0210 	add.w	r2, r8, #16
 8011f78:	46f2      	mov	sl, lr
 8011f7a:	2100      	movs	r1, #0
 8011f7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8011f80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011f84:	fa1f f883 	uxth.w	r8, r3
 8011f88:	fa11 f18b 	uxtah	r1, r1, fp
 8011f8c:	0c1b      	lsrs	r3, r3, #16
 8011f8e:	eba1 0808 	sub.w	r8, r1, r8
 8011f92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011f96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011f9a:	fa1f f888 	uxth.w	r8, r8
 8011f9e:	1419      	asrs	r1, r3, #16
 8011fa0:	454e      	cmp	r6, r9
 8011fa2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011fa6:	f84a 3b04 	str.w	r3, [sl], #4
 8011faa:	d8e7      	bhi.n	8011f7c <__mdiff+0x80>
 8011fac:	1b33      	subs	r3, r6, r4
 8011fae:	3b15      	subs	r3, #21
 8011fb0:	f023 0303 	bic.w	r3, r3, #3
 8011fb4:	3304      	adds	r3, #4
 8011fb6:	3415      	adds	r4, #21
 8011fb8:	42a6      	cmp	r6, r4
 8011fba:	bf38      	it	cc
 8011fbc:	2304      	movcc	r3, #4
 8011fbe:	441d      	add	r5, r3
 8011fc0:	4473      	add	r3, lr
 8011fc2:	469e      	mov	lr, r3
 8011fc4:	462e      	mov	r6, r5
 8011fc6:	4566      	cmp	r6, ip
 8011fc8:	d30e      	bcc.n	8011fe8 <__mdiff+0xec>
 8011fca:	f10c 0203 	add.w	r2, ip, #3
 8011fce:	1b52      	subs	r2, r2, r5
 8011fd0:	f022 0203 	bic.w	r2, r2, #3
 8011fd4:	3d03      	subs	r5, #3
 8011fd6:	45ac      	cmp	ip, r5
 8011fd8:	bf38      	it	cc
 8011fda:	2200      	movcc	r2, #0
 8011fdc:	441a      	add	r2, r3
 8011fde:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011fe2:	b17b      	cbz	r3, 8012004 <__mdiff+0x108>
 8011fe4:	6107      	str	r7, [r0, #16]
 8011fe6:	e7a3      	b.n	8011f30 <__mdiff+0x34>
 8011fe8:	f856 8b04 	ldr.w	r8, [r6], #4
 8011fec:	fa11 f288 	uxtah	r2, r1, r8
 8011ff0:	1414      	asrs	r4, r2, #16
 8011ff2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011ff6:	b292      	uxth	r2, r2
 8011ff8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011ffc:	f84e 2b04 	str.w	r2, [lr], #4
 8012000:	1421      	asrs	r1, r4, #16
 8012002:	e7e0      	b.n	8011fc6 <__mdiff+0xca>
 8012004:	3f01      	subs	r7, #1
 8012006:	e7ea      	b.n	8011fde <__mdiff+0xe2>
 8012008:	0801314f 	.word	0x0801314f
 801200c:	08013160 	.word	0x08013160

08012010 <__d2b>:
 8012010:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012014:	4689      	mov	r9, r1
 8012016:	2101      	movs	r1, #1
 8012018:	ec57 6b10 	vmov	r6, r7, d0
 801201c:	4690      	mov	r8, r2
 801201e:	f7ff fccf 	bl	80119c0 <_Balloc>
 8012022:	4604      	mov	r4, r0
 8012024:	b930      	cbnz	r0, 8012034 <__d2b+0x24>
 8012026:	4602      	mov	r2, r0
 8012028:	4b25      	ldr	r3, [pc, #148]	; (80120c0 <__d2b+0xb0>)
 801202a:	4826      	ldr	r0, [pc, #152]	; (80120c4 <__d2b+0xb4>)
 801202c:	f240 310a 	movw	r1, #778	; 0x30a
 8012030:	f000 fa18 	bl	8012464 <__assert_func>
 8012034:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012038:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801203c:	bb35      	cbnz	r5, 801208c <__d2b+0x7c>
 801203e:	2e00      	cmp	r6, #0
 8012040:	9301      	str	r3, [sp, #4]
 8012042:	d028      	beq.n	8012096 <__d2b+0x86>
 8012044:	4668      	mov	r0, sp
 8012046:	9600      	str	r6, [sp, #0]
 8012048:	f7ff fd82 	bl	8011b50 <__lo0bits>
 801204c:	9900      	ldr	r1, [sp, #0]
 801204e:	b300      	cbz	r0, 8012092 <__d2b+0x82>
 8012050:	9a01      	ldr	r2, [sp, #4]
 8012052:	f1c0 0320 	rsb	r3, r0, #32
 8012056:	fa02 f303 	lsl.w	r3, r2, r3
 801205a:	430b      	orrs	r3, r1
 801205c:	40c2      	lsrs	r2, r0
 801205e:	6163      	str	r3, [r4, #20]
 8012060:	9201      	str	r2, [sp, #4]
 8012062:	9b01      	ldr	r3, [sp, #4]
 8012064:	61a3      	str	r3, [r4, #24]
 8012066:	2b00      	cmp	r3, #0
 8012068:	bf14      	ite	ne
 801206a:	2202      	movne	r2, #2
 801206c:	2201      	moveq	r2, #1
 801206e:	6122      	str	r2, [r4, #16]
 8012070:	b1d5      	cbz	r5, 80120a8 <__d2b+0x98>
 8012072:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012076:	4405      	add	r5, r0
 8012078:	f8c9 5000 	str.w	r5, [r9]
 801207c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012080:	f8c8 0000 	str.w	r0, [r8]
 8012084:	4620      	mov	r0, r4
 8012086:	b003      	add	sp, #12
 8012088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801208c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012090:	e7d5      	b.n	801203e <__d2b+0x2e>
 8012092:	6161      	str	r1, [r4, #20]
 8012094:	e7e5      	b.n	8012062 <__d2b+0x52>
 8012096:	a801      	add	r0, sp, #4
 8012098:	f7ff fd5a 	bl	8011b50 <__lo0bits>
 801209c:	9b01      	ldr	r3, [sp, #4]
 801209e:	6163      	str	r3, [r4, #20]
 80120a0:	2201      	movs	r2, #1
 80120a2:	6122      	str	r2, [r4, #16]
 80120a4:	3020      	adds	r0, #32
 80120a6:	e7e3      	b.n	8012070 <__d2b+0x60>
 80120a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80120ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80120b0:	f8c9 0000 	str.w	r0, [r9]
 80120b4:	6918      	ldr	r0, [r3, #16]
 80120b6:	f7ff fd2b 	bl	8011b10 <__hi0bits>
 80120ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80120be:	e7df      	b.n	8012080 <__d2b+0x70>
 80120c0:	0801314f 	.word	0x0801314f
 80120c4:	08013160 	.word	0x08013160

080120c8 <_calloc_r>:
 80120c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80120ca:	fba1 2402 	umull	r2, r4, r1, r2
 80120ce:	b94c      	cbnz	r4, 80120e4 <_calloc_r+0x1c>
 80120d0:	4611      	mov	r1, r2
 80120d2:	9201      	str	r2, [sp, #4]
 80120d4:	f7fd fd9c 	bl	800fc10 <_malloc_r>
 80120d8:	9a01      	ldr	r2, [sp, #4]
 80120da:	4605      	mov	r5, r0
 80120dc:	b930      	cbnz	r0, 80120ec <_calloc_r+0x24>
 80120de:	4628      	mov	r0, r5
 80120e0:	b003      	add	sp, #12
 80120e2:	bd30      	pop	{r4, r5, pc}
 80120e4:	220c      	movs	r2, #12
 80120e6:	6002      	str	r2, [r0, #0]
 80120e8:	2500      	movs	r5, #0
 80120ea:	e7f8      	b.n	80120de <_calloc_r+0x16>
 80120ec:	4621      	mov	r1, r4
 80120ee:	f7fd fd66 	bl	800fbbe <memset>
 80120f2:	e7f4      	b.n	80120de <_calloc_r+0x16>

080120f4 <_free_r>:
 80120f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80120f6:	2900      	cmp	r1, #0
 80120f8:	d044      	beq.n	8012184 <_free_r+0x90>
 80120fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80120fe:	9001      	str	r0, [sp, #4]
 8012100:	2b00      	cmp	r3, #0
 8012102:	f1a1 0404 	sub.w	r4, r1, #4
 8012106:	bfb8      	it	lt
 8012108:	18e4      	addlt	r4, r4, r3
 801210a:	f7ff fc4d 	bl	80119a8 <__malloc_lock>
 801210e:	4a1e      	ldr	r2, [pc, #120]	; (8012188 <_free_r+0x94>)
 8012110:	9801      	ldr	r0, [sp, #4]
 8012112:	6813      	ldr	r3, [r2, #0]
 8012114:	b933      	cbnz	r3, 8012124 <_free_r+0x30>
 8012116:	6063      	str	r3, [r4, #4]
 8012118:	6014      	str	r4, [r2, #0]
 801211a:	b003      	add	sp, #12
 801211c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012120:	f7ff bc48 	b.w	80119b4 <__malloc_unlock>
 8012124:	42a3      	cmp	r3, r4
 8012126:	d908      	bls.n	801213a <_free_r+0x46>
 8012128:	6825      	ldr	r5, [r4, #0]
 801212a:	1961      	adds	r1, r4, r5
 801212c:	428b      	cmp	r3, r1
 801212e:	bf01      	itttt	eq
 8012130:	6819      	ldreq	r1, [r3, #0]
 8012132:	685b      	ldreq	r3, [r3, #4]
 8012134:	1949      	addeq	r1, r1, r5
 8012136:	6021      	streq	r1, [r4, #0]
 8012138:	e7ed      	b.n	8012116 <_free_r+0x22>
 801213a:	461a      	mov	r2, r3
 801213c:	685b      	ldr	r3, [r3, #4]
 801213e:	b10b      	cbz	r3, 8012144 <_free_r+0x50>
 8012140:	42a3      	cmp	r3, r4
 8012142:	d9fa      	bls.n	801213a <_free_r+0x46>
 8012144:	6811      	ldr	r1, [r2, #0]
 8012146:	1855      	adds	r5, r2, r1
 8012148:	42a5      	cmp	r5, r4
 801214a:	d10b      	bne.n	8012164 <_free_r+0x70>
 801214c:	6824      	ldr	r4, [r4, #0]
 801214e:	4421      	add	r1, r4
 8012150:	1854      	adds	r4, r2, r1
 8012152:	42a3      	cmp	r3, r4
 8012154:	6011      	str	r1, [r2, #0]
 8012156:	d1e0      	bne.n	801211a <_free_r+0x26>
 8012158:	681c      	ldr	r4, [r3, #0]
 801215a:	685b      	ldr	r3, [r3, #4]
 801215c:	6053      	str	r3, [r2, #4]
 801215e:	4421      	add	r1, r4
 8012160:	6011      	str	r1, [r2, #0]
 8012162:	e7da      	b.n	801211a <_free_r+0x26>
 8012164:	d902      	bls.n	801216c <_free_r+0x78>
 8012166:	230c      	movs	r3, #12
 8012168:	6003      	str	r3, [r0, #0]
 801216a:	e7d6      	b.n	801211a <_free_r+0x26>
 801216c:	6825      	ldr	r5, [r4, #0]
 801216e:	1961      	adds	r1, r4, r5
 8012170:	428b      	cmp	r3, r1
 8012172:	bf04      	itt	eq
 8012174:	6819      	ldreq	r1, [r3, #0]
 8012176:	685b      	ldreq	r3, [r3, #4]
 8012178:	6063      	str	r3, [r4, #4]
 801217a:	bf04      	itt	eq
 801217c:	1949      	addeq	r1, r1, r5
 801217e:	6021      	streq	r1, [r4, #0]
 8012180:	6054      	str	r4, [r2, #4]
 8012182:	e7ca      	b.n	801211a <_free_r+0x26>
 8012184:	b003      	add	sp, #12
 8012186:	bd30      	pop	{r4, r5, pc}
 8012188:	20005700 	.word	0x20005700

0801218c <__sfputc_r>:
 801218c:	6893      	ldr	r3, [r2, #8]
 801218e:	3b01      	subs	r3, #1
 8012190:	2b00      	cmp	r3, #0
 8012192:	b410      	push	{r4}
 8012194:	6093      	str	r3, [r2, #8]
 8012196:	da08      	bge.n	80121aa <__sfputc_r+0x1e>
 8012198:	6994      	ldr	r4, [r2, #24]
 801219a:	42a3      	cmp	r3, r4
 801219c:	db01      	blt.n	80121a2 <__sfputc_r+0x16>
 801219e:	290a      	cmp	r1, #10
 80121a0:	d103      	bne.n	80121aa <__sfputc_r+0x1e>
 80121a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121a6:	f7fe bb5d 	b.w	8010864 <__swbuf_r>
 80121aa:	6813      	ldr	r3, [r2, #0]
 80121ac:	1c58      	adds	r0, r3, #1
 80121ae:	6010      	str	r0, [r2, #0]
 80121b0:	7019      	strb	r1, [r3, #0]
 80121b2:	4608      	mov	r0, r1
 80121b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121b8:	4770      	bx	lr

080121ba <__sfputs_r>:
 80121ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121bc:	4606      	mov	r6, r0
 80121be:	460f      	mov	r7, r1
 80121c0:	4614      	mov	r4, r2
 80121c2:	18d5      	adds	r5, r2, r3
 80121c4:	42ac      	cmp	r4, r5
 80121c6:	d101      	bne.n	80121cc <__sfputs_r+0x12>
 80121c8:	2000      	movs	r0, #0
 80121ca:	e007      	b.n	80121dc <__sfputs_r+0x22>
 80121cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121d0:	463a      	mov	r2, r7
 80121d2:	4630      	mov	r0, r6
 80121d4:	f7ff ffda 	bl	801218c <__sfputc_r>
 80121d8:	1c43      	adds	r3, r0, #1
 80121da:	d1f3      	bne.n	80121c4 <__sfputs_r+0xa>
 80121dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080121e0 <_vfiprintf_r>:
 80121e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121e4:	460d      	mov	r5, r1
 80121e6:	b09d      	sub	sp, #116	; 0x74
 80121e8:	4614      	mov	r4, r2
 80121ea:	4698      	mov	r8, r3
 80121ec:	4606      	mov	r6, r0
 80121ee:	b118      	cbz	r0, 80121f8 <_vfiprintf_r+0x18>
 80121f0:	6983      	ldr	r3, [r0, #24]
 80121f2:	b90b      	cbnz	r3, 80121f8 <_vfiprintf_r+0x18>
 80121f4:	f7fd fc10 	bl	800fa18 <__sinit>
 80121f8:	4b89      	ldr	r3, [pc, #548]	; (8012420 <_vfiprintf_r+0x240>)
 80121fa:	429d      	cmp	r5, r3
 80121fc:	d11b      	bne.n	8012236 <_vfiprintf_r+0x56>
 80121fe:	6875      	ldr	r5, [r6, #4]
 8012200:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012202:	07d9      	lsls	r1, r3, #31
 8012204:	d405      	bmi.n	8012212 <_vfiprintf_r+0x32>
 8012206:	89ab      	ldrh	r3, [r5, #12]
 8012208:	059a      	lsls	r2, r3, #22
 801220a:	d402      	bmi.n	8012212 <_vfiprintf_r+0x32>
 801220c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801220e:	f7fd fcc6 	bl	800fb9e <__retarget_lock_acquire_recursive>
 8012212:	89ab      	ldrh	r3, [r5, #12]
 8012214:	071b      	lsls	r3, r3, #28
 8012216:	d501      	bpl.n	801221c <_vfiprintf_r+0x3c>
 8012218:	692b      	ldr	r3, [r5, #16]
 801221a:	b9eb      	cbnz	r3, 8012258 <_vfiprintf_r+0x78>
 801221c:	4629      	mov	r1, r5
 801221e:	4630      	mov	r0, r6
 8012220:	f7fe fb84 	bl	801092c <__swsetup_r>
 8012224:	b1c0      	cbz	r0, 8012258 <_vfiprintf_r+0x78>
 8012226:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012228:	07dc      	lsls	r4, r3, #31
 801222a:	d50e      	bpl.n	801224a <_vfiprintf_r+0x6a>
 801222c:	f04f 30ff 	mov.w	r0, #4294967295
 8012230:	b01d      	add	sp, #116	; 0x74
 8012232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012236:	4b7b      	ldr	r3, [pc, #492]	; (8012424 <_vfiprintf_r+0x244>)
 8012238:	429d      	cmp	r5, r3
 801223a:	d101      	bne.n	8012240 <_vfiprintf_r+0x60>
 801223c:	68b5      	ldr	r5, [r6, #8]
 801223e:	e7df      	b.n	8012200 <_vfiprintf_r+0x20>
 8012240:	4b79      	ldr	r3, [pc, #484]	; (8012428 <_vfiprintf_r+0x248>)
 8012242:	429d      	cmp	r5, r3
 8012244:	bf08      	it	eq
 8012246:	68f5      	ldreq	r5, [r6, #12]
 8012248:	e7da      	b.n	8012200 <_vfiprintf_r+0x20>
 801224a:	89ab      	ldrh	r3, [r5, #12]
 801224c:	0598      	lsls	r0, r3, #22
 801224e:	d4ed      	bmi.n	801222c <_vfiprintf_r+0x4c>
 8012250:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012252:	f7fd fca5 	bl	800fba0 <__retarget_lock_release_recursive>
 8012256:	e7e9      	b.n	801222c <_vfiprintf_r+0x4c>
 8012258:	2300      	movs	r3, #0
 801225a:	9309      	str	r3, [sp, #36]	; 0x24
 801225c:	2320      	movs	r3, #32
 801225e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012262:	f8cd 800c 	str.w	r8, [sp, #12]
 8012266:	2330      	movs	r3, #48	; 0x30
 8012268:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801242c <_vfiprintf_r+0x24c>
 801226c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012270:	f04f 0901 	mov.w	r9, #1
 8012274:	4623      	mov	r3, r4
 8012276:	469a      	mov	sl, r3
 8012278:	f813 2b01 	ldrb.w	r2, [r3], #1
 801227c:	b10a      	cbz	r2, 8012282 <_vfiprintf_r+0xa2>
 801227e:	2a25      	cmp	r2, #37	; 0x25
 8012280:	d1f9      	bne.n	8012276 <_vfiprintf_r+0x96>
 8012282:	ebba 0b04 	subs.w	fp, sl, r4
 8012286:	d00b      	beq.n	80122a0 <_vfiprintf_r+0xc0>
 8012288:	465b      	mov	r3, fp
 801228a:	4622      	mov	r2, r4
 801228c:	4629      	mov	r1, r5
 801228e:	4630      	mov	r0, r6
 8012290:	f7ff ff93 	bl	80121ba <__sfputs_r>
 8012294:	3001      	adds	r0, #1
 8012296:	f000 80aa 	beq.w	80123ee <_vfiprintf_r+0x20e>
 801229a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801229c:	445a      	add	r2, fp
 801229e:	9209      	str	r2, [sp, #36]	; 0x24
 80122a0:	f89a 3000 	ldrb.w	r3, [sl]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	f000 80a2 	beq.w	80123ee <_vfiprintf_r+0x20e>
 80122aa:	2300      	movs	r3, #0
 80122ac:	f04f 32ff 	mov.w	r2, #4294967295
 80122b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80122b4:	f10a 0a01 	add.w	sl, sl, #1
 80122b8:	9304      	str	r3, [sp, #16]
 80122ba:	9307      	str	r3, [sp, #28]
 80122bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80122c0:	931a      	str	r3, [sp, #104]	; 0x68
 80122c2:	4654      	mov	r4, sl
 80122c4:	2205      	movs	r2, #5
 80122c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122ca:	4858      	ldr	r0, [pc, #352]	; (801242c <_vfiprintf_r+0x24c>)
 80122cc:	f7ed ff88 	bl	80001e0 <memchr>
 80122d0:	9a04      	ldr	r2, [sp, #16]
 80122d2:	b9d8      	cbnz	r0, 801230c <_vfiprintf_r+0x12c>
 80122d4:	06d1      	lsls	r1, r2, #27
 80122d6:	bf44      	itt	mi
 80122d8:	2320      	movmi	r3, #32
 80122da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80122de:	0713      	lsls	r3, r2, #28
 80122e0:	bf44      	itt	mi
 80122e2:	232b      	movmi	r3, #43	; 0x2b
 80122e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80122e8:	f89a 3000 	ldrb.w	r3, [sl]
 80122ec:	2b2a      	cmp	r3, #42	; 0x2a
 80122ee:	d015      	beq.n	801231c <_vfiprintf_r+0x13c>
 80122f0:	9a07      	ldr	r2, [sp, #28]
 80122f2:	4654      	mov	r4, sl
 80122f4:	2000      	movs	r0, #0
 80122f6:	f04f 0c0a 	mov.w	ip, #10
 80122fa:	4621      	mov	r1, r4
 80122fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012300:	3b30      	subs	r3, #48	; 0x30
 8012302:	2b09      	cmp	r3, #9
 8012304:	d94e      	bls.n	80123a4 <_vfiprintf_r+0x1c4>
 8012306:	b1b0      	cbz	r0, 8012336 <_vfiprintf_r+0x156>
 8012308:	9207      	str	r2, [sp, #28]
 801230a:	e014      	b.n	8012336 <_vfiprintf_r+0x156>
 801230c:	eba0 0308 	sub.w	r3, r0, r8
 8012310:	fa09 f303 	lsl.w	r3, r9, r3
 8012314:	4313      	orrs	r3, r2
 8012316:	9304      	str	r3, [sp, #16]
 8012318:	46a2      	mov	sl, r4
 801231a:	e7d2      	b.n	80122c2 <_vfiprintf_r+0xe2>
 801231c:	9b03      	ldr	r3, [sp, #12]
 801231e:	1d19      	adds	r1, r3, #4
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	9103      	str	r1, [sp, #12]
 8012324:	2b00      	cmp	r3, #0
 8012326:	bfbb      	ittet	lt
 8012328:	425b      	neglt	r3, r3
 801232a:	f042 0202 	orrlt.w	r2, r2, #2
 801232e:	9307      	strge	r3, [sp, #28]
 8012330:	9307      	strlt	r3, [sp, #28]
 8012332:	bfb8      	it	lt
 8012334:	9204      	strlt	r2, [sp, #16]
 8012336:	7823      	ldrb	r3, [r4, #0]
 8012338:	2b2e      	cmp	r3, #46	; 0x2e
 801233a:	d10c      	bne.n	8012356 <_vfiprintf_r+0x176>
 801233c:	7863      	ldrb	r3, [r4, #1]
 801233e:	2b2a      	cmp	r3, #42	; 0x2a
 8012340:	d135      	bne.n	80123ae <_vfiprintf_r+0x1ce>
 8012342:	9b03      	ldr	r3, [sp, #12]
 8012344:	1d1a      	adds	r2, r3, #4
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	9203      	str	r2, [sp, #12]
 801234a:	2b00      	cmp	r3, #0
 801234c:	bfb8      	it	lt
 801234e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012352:	3402      	adds	r4, #2
 8012354:	9305      	str	r3, [sp, #20]
 8012356:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801243c <_vfiprintf_r+0x25c>
 801235a:	7821      	ldrb	r1, [r4, #0]
 801235c:	2203      	movs	r2, #3
 801235e:	4650      	mov	r0, sl
 8012360:	f7ed ff3e 	bl	80001e0 <memchr>
 8012364:	b140      	cbz	r0, 8012378 <_vfiprintf_r+0x198>
 8012366:	2340      	movs	r3, #64	; 0x40
 8012368:	eba0 000a 	sub.w	r0, r0, sl
 801236c:	fa03 f000 	lsl.w	r0, r3, r0
 8012370:	9b04      	ldr	r3, [sp, #16]
 8012372:	4303      	orrs	r3, r0
 8012374:	3401      	adds	r4, #1
 8012376:	9304      	str	r3, [sp, #16]
 8012378:	f814 1b01 	ldrb.w	r1, [r4], #1
 801237c:	482c      	ldr	r0, [pc, #176]	; (8012430 <_vfiprintf_r+0x250>)
 801237e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012382:	2206      	movs	r2, #6
 8012384:	f7ed ff2c 	bl	80001e0 <memchr>
 8012388:	2800      	cmp	r0, #0
 801238a:	d03f      	beq.n	801240c <_vfiprintf_r+0x22c>
 801238c:	4b29      	ldr	r3, [pc, #164]	; (8012434 <_vfiprintf_r+0x254>)
 801238e:	bb1b      	cbnz	r3, 80123d8 <_vfiprintf_r+0x1f8>
 8012390:	9b03      	ldr	r3, [sp, #12]
 8012392:	3307      	adds	r3, #7
 8012394:	f023 0307 	bic.w	r3, r3, #7
 8012398:	3308      	adds	r3, #8
 801239a:	9303      	str	r3, [sp, #12]
 801239c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801239e:	443b      	add	r3, r7
 80123a0:	9309      	str	r3, [sp, #36]	; 0x24
 80123a2:	e767      	b.n	8012274 <_vfiprintf_r+0x94>
 80123a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80123a8:	460c      	mov	r4, r1
 80123aa:	2001      	movs	r0, #1
 80123ac:	e7a5      	b.n	80122fa <_vfiprintf_r+0x11a>
 80123ae:	2300      	movs	r3, #0
 80123b0:	3401      	adds	r4, #1
 80123b2:	9305      	str	r3, [sp, #20]
 80123b4:	4619      	mov	r1, r3
 80123b6:	f04f 0c0a 	mov.w	ip, #10
 80123ba:	4620      	mov	r0, r4
 80123bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80123c0:	3a30      	subs	r2, #48	; 0x30
 80123c2:	2a09      	cmp	r2, #9
 80123c4:	d903      	bls.n	80123ce <_vfiprintf_r+0x1ee>
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d0c5      	beq.n	8012356 <_vfiprintf_r+0x176>
 80123ca:	9105      	str	r1, [sp, #20]
 80123cc:	e7c3      	b.n	8012356 <_vfiprintf_r+0x176>
 80123ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80123d2:	4604      	mov	r4, r0
 80123d4:	2301      	movs	r3, #1
 80123d6:	e7f0      	b.n	80123ba <_vfiprintf_r+0x1da>
 80123d8:	ab03      	add	r3, sp, #12
 80123da:	9300      	str	r3, [sp, #0]
 80123dc:	462a      	mov	r2, r5
 80123de:	4b16      	ldr	r3, [pc, #88]	; (8012438 <_vfiprintf_r+0x258>)
 80123e0:	a904      	add	r1, sp, #16
 80123e2:	4630      	mov	r0, r6
 80123e4:	f7fd fd28 	bl	800fe38 <_printf_float>
 80123e8:	4607      	mov	r7, r0
 80123ea:	1c78      	adds	r0, r7, #1
 80123ec:	d1d6      	bne.n	801239c <_vfiprintf_r+0x1bc>
 80123ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80123f0:	07d9      	lsls	r1, r3, #31
 80123f2:	d405      	bmi.n	8012400 <_vfiprintf_r+0x220>
 80123f4:	89ab      	ldrh	r3, [r5, #12]
 80123f6:	059a      	lsls	r2, r3, #22
 80123f8:	d402      	bmi.n	8012400 <_vfiprintf_r+0x220>
 80123fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80123fc:	f7fd fbd0 	bl	800fba0 <__retarget_lock_release_recursive>
 8012400:	89ab      	ldrh	r3, [r5, #12]
 8012402:	065b      	lsls	r3, r3, #25
 8012404:	f53f af12 	bmi.w	801222c <_vfiprintf_r+0x4c>
 8012408:	9809      	ldr	r0, [sp, #36]	; 0x24
 801240a:	e711      	b.n	8012230 <_vfiprintf_r+0x50>
 801240c:	ab03      	add	r3, sp, #12
 801240e:	9300      	str	r3, [sp, #0]
 8012410:	462a      	mov	r2, r5
 8012412:	4b09      	ldr	r3, [pc, #36]	; (8012438 <_vfiprintf_r+0x258>)
 8012414:	a904      	add	r1, sp, #16
 8012416:	4630      	mov	r0, r6
 8012418:	f7fd ffb2 	bl	8010380 <_printf_i>
 801241c:	e7e4      	b.n	80123e8 <_vfiprintf_r+0x208>
 801241e:	bf00      	nop
 8012420:	08013058 	.word	0x08013058
 8012424:	08013078 	.word	0x08013078
 8012428:	08013038 	.word	0x08013038
 801242c:	080132bc 	.word	0x080132bc
 8012430:	080132c6 	.word	0x080132c6
 8012434:	0800fe39 	.word	0x0800fe39
 8012438:	080121bb 	.word	0x080121bb
 801243c:	080132c2 	.word	0x080132c2

08012440 <_read_r>:
 8012440:	b538      	push	{r3, r4, r5, lr}
 8012442:	4d07      	ldr	r5, [pc, #28]	; (8012460 <_read_r+0x20>)
 8012444:	4604      	mov	r4, r0
 8012446:	4608      	mov	r0, r1
 8012448:	4611      	mov	r1, r2
 801244a:	2200      	movs	r2, #0
 801244c:	602a      	str	r2, [r5, #0]
 801244e:	461a      	mov	r2, r3
 8012450:	f7f0 fc6c 	bl	8002d2c <_read>
 8012454:	1c43      	adds	r3, r0, #1
 8012456:	d102      	bne.n	801245e <_read_r+0x1e>
 8012458:	682b      	ldr	r3, [r5, #0]
 801245a:	b103      	cbz	r3, 801245e <_read_r+0x1e>
 801245c:	6023      	str	r3, [r4, #0]
 801245e:	bd38      	pop	{r3, r4, r5, pc}
 8012460:	20005708 	.word	0x20005708

08012464 <__assert_func>:
 8012464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012466:	4614      	mov	r4, r2
 8012468:	461a      	mov	r2, r3
 801246a:	4b09      	ldr	r3, [pc, #36]	; (8012490 <__assert_func+0x2c>)
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	4605      	mov	r5, r0
 8012470:	68d8      	ldr	r0, [r3, #12]
 8012472:	b14c      	cbz	r4, 8012488 <__assert_func+0x24>
 8012474:	4b07      	ldr	r3, [pc, #28]	; (8012494 <__assert_func+0x30>)
 8012476:	9100      	str	r1, [sp, #0]
 8012478:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801247c:	4906      	ldr	r1, [pc, #24]	; (8012498 <__assert_func+0x34>)
 801247e:	462b      	mov	r3, r5
 8012480:	f000 f80e 	bl	80124a0 <fiprintf>
 8012484:	f000 f85f 	bl	8012546 <abort>
 8012488:	4b04      	ldr	r3, [pc, #16]	; (801249c <__assert_func+0x38>)
 801248a:	461c      	mov	r4, r3
 801248c:	e7f3      	b.n	8012476 <__assert_func+0x12>
 801248e:	bf00      	nop
 8012490:	20000018 	.word	0x20000018
 8012494:	080132cd 	.word	0x080132cd
 8012498:	080132da 	.word	0x080132da
 801249c:	08013308 	.word	0x08013308

080124a0 <fiprintf>:
 80124a0:	b40e      	push	{r1, r2, r3}
 80124a2:	b503      	push	{r0, r1, lr}
 80124a4:	4601      	mov	r1, r0
 80124a6:	ab03      	add	r3, sp, #12
 80124a8:	4805      	ldr	r0, [pc, #20]	; (80124c0 <fiprintf+0x20>)
 80124aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80124ae:	6800      	ldr	r0, [r0, #0]
 80124b0:	9301      	str	r3, [sp, #4]
 80124b2:	f7ff fe95 	bl	80121e0 <_vfiprintf_r>
 80124b6:	b002      	add	sp, #8
 80124b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80124bc:	b003      	add	sp, #12
 80124be:	4770      	bx	lr
 80124c0:	20000018 	.word	0x20000018

080124c4 <_fstat_r>:
 80124c4:	b538      	push	{r3, r4, r5, lr}
 80124c6:	4d07      	ldr	r5, [pc, #28]	; (80124e4 <_fstat_r+0x20>)
 80124c8:	2300      	movs	r3, #0
 80124ca:	4604      	mov	r4, r0
 80124cc:	4608      	mov	r0, r1
 80124ce:	4611      	mov	r1, r2
 80124d0:	602b      	str	r3, [r5, #0]
 80124d2:	f7f0 fc70 	bl	8002db6 <_fstat>
 80124d6:	1c43      	adds	r3, r0, #1
 80124d8:	d102      	bne.n	80124e0 <_fstat_r+0x1c>
 80124da:	682b      	ldr	r3, [r5, #0]
 80124dc:	b103      	cbz	r3, 80124e0 <_fstat_r+0x1c>
 80124de:	6023      	str	r3, [r4, #0]
 80124e0:	bd38      	pop	{r3, r4, r5, pc}
 80124e2:	bf00      	nop
 80124e4:	20005708 	.word	0x20005708

080124e8 <_isatty_r>:
 80124e8:	b538      	push	{r3, r4, r5, lr}
 80124ea:	4d06      	ldr	r5, [pc, #24]	; (8012504 <_isatty_r+0x1c>)
 80124ec:	2300      	movs	r3, #0
 80124ee:	4604      	mov	r4, r0
 80124f0:	4608      	mov	r0, r1
 80124f2:	602b      	str	r3, [r5, #0]
 80124f4:	f7f0 fc6f 	bl	8002dd6 <_isatty>
 80124f8:	1c43      	adds	r3, r0, #1
 80124fa:	d102      	bne.n	8012502 <_isatty_r+0x1a>
 80124fc:	682b      	ldr	r3, [r5, #0]
 80124fe:	b103      	cbz	r3, 8012502 <_isatty_r+0x1a>
 8012500:	6023      	str	r3, [r4, #0]
 8012502:	bd38      	pop	{r3, r4, r5, pc}
 8012504:	20005708 	.word	0x20005708

08012508 <__ascii_mbtowc>:
 8012508:	b082      	sub	sp, #8
 801250a:	b901      	cbnz	r1, 801250e <__ascii_mbtowc+0x6>
 801250c:	a901      	add	r1, sp, #4
 801250e:	b142      	cbz	r2, 8012522 <__ascii_mbtowc+0x1a>
 8012510:	b14b      	cbz	r3, 8012526 <__ascii_mbtowc+0x1e>
 8012512:	7813      	ldrb	r3, [r2, #0]
 8012514:	600b      	str	r3, [r1, #0]
 8012516:	7812      	ldrb	r2, [r2, #0]
 8012518:	1e10      	subs	r0, r2, #0
 801251a:	bf18      	it	ne
 801251c:	2001      	movne	r0, #1
 801251e:	b002      	add	sp, #8
 8012520:	4770      	bx	lr
 8012522:	4610      	mov	r0, r2
 8012524:	e7fb      	b.n	801251e <__ascii_mbtowc+0x16>
 8012526:	f06f 0001 	mvn.w	r0, #1
 801252a:	e7f8      	b.n	801251e <__ascii_mbtowc+0x16>

0801252c <__ascii_wctomb>:
 801252c:	b149      	cbz	r1, 8012542 <__ascii_wctomb+0x16>
 801252e:	2aff      	cmp	r2, #255	; 0xff
 8012530:	bf85      	ittet	hi
 8012532:	238a      	movhi	r3, #138	; 0x8a
 8012534:	6003      	strhi	r3, [r0, #0]
 8012536:	700a      	strbls	r2, [r1, #0]
 8012538:	f04f 30ff 	movhi.w	r0, #4294967295
 801253c:	bf98      	it	ls
 801253e:	2001      	movls	r0, #1
 8012540:	4770      	bx	lr
 8012542:	4608      	mov	r0, r1
 8012544:	4770      	bx	lr

08012546 <abort>:
 8012546:	b508      	push	{r3, lr}
 8012548:	2006      	movs	r0, #6
 801254a:	f000 f82b 	bl	80125a4 <raise>
 801254e:	2001      	movs	r0, #1
 8012550:	f7f0 fbe2 	bl	8002d18 <_exit>

08012554 <_raise_r>:
 8012554:	291f      	cmp	r1, #31
 8012556:	b538      	push	{r3, r4, r5, lr}
 8012558:	4604      	mov	r4, r0
 801255a:	460d      	mov	r5, r1
 801255c:	d904      	bls.n	8012568 <_raise_r+0x14>
 801255e:	2316      	movs	r3, #22
 8012560:	6003      	str	r3, [r0, #0]
 8012562:	f04f 30ff 	mov.w	r0, #4294967295
 8012566:	bd38      	pop	{r3, r4, r5, pc}
 8012568:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801256a:	b112      	cbz	r2, 8012572 <_raise_r+0x1e>
 801256c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012570:	b94b      	cbnz	r3, 8012586 <_raise_r+0x32>
 8012572:	4620      	mov	r0, r4
 8012574:	f000 f830 	bl	80125d8 <_getpid_r>
 8012578:	462a      	mov	r2, r5
 801257a:	4601      	mov	r1, r0
 801257c:	4620      	mov	r0, r4
 801257e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012582:	f000 b817 	b.w	80125b4 <_kill_r>
 8012586:	2b01      	cmp	r3, #1
 8012588:	d00a      	beq.n	80125a0 <_raise_r+0x4c>
 801258a:	1c59      	adds	r1, r3, #1
 801258c:	d103      	bne.n	8012596 <_raise_r+0x42>
 801258e:	2316      	movs	r3, #22
 8012590:	6003      	str	r3, [r0, #0]
 8012592:	2001      	movs	r0, #1
 8012594:	e7e7      	b.n	8012566 <_raise_r+0x12>
 8012596:	2400      	movs	r4, #0
 8012598:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801259c:	4628      	mov	r0, r5
 801259e:	4798      	blx	r3
 80125a0:	2000      	movs	r0, #0
 80125a2:	e7e0      	b.n	8012566 <_raise_r+0x12>

080125a4 <raise>:
 80125a4:	4b02      	ldr	r3, [pc, #8]	; (80125b0 <raise+0xc>)
 80125a6:	4601      	mov	r1, r0
 80125a8:	6818      	ldr	r0, [r3, #0]
 80125aa:	f7ff bfd3 	b.w	8012554 <_raise_r>
 80125ae:	bf00      	nop
 80125b0:	20000018 	.word	0x20000018

080125b4 <_kill_r>:
 80125b4:	b538      	push	{r3, r4, r5, lr}
 80125b6:	4d07      	ldr	r5, [pc, #28]	; (80125d4 <_kill_r+0x20>)
 80125b8:	2300      	movs	r3, #0
 80125ba:	4604      	mov	r4, r0
 80125bc:	4608      	mov	r0, r1
 80125be:	4611      	mov	r1, r2
 80125c0:	602b      	str	r3, [r5, #0]
 80125c2:	f7f0 fb99 	bl	8002cf8 <_kill>
 80125c6:	1c43      	adds	r3, r0, #1
 80125c8:	d102      	bne.n	80125d0 <_kill_r+0x1c>
 80125ca:	682b      	ldr	r3, [r5, #0]
 80125cc:	b103      	cbz	r3, 80125d0 <_kill_r+0x1c>
 80125ce:	6023      	str	r3, [r4, #0]
 80125d0:	bd38      	pop	{r3, r4, r5, pc}
 80125d2:	bf00      	nop
 80125d4:	20005708 	.word	0x20005708

080125d8 <_getpid_r>:
 80125d8:	f7f0 bb86 	b.w	8002ce8 <_getpid>

080125dc <_init>:
 80125dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125de:	bf00      	nop
 80125e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125e2:	bc08      	pop	{r3}
 80125e4:	469e      	mov	lr, r3
 80125e6:	4770      	bx	lr

080125e8 <_fini>:
 80125e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125ea:	bf00      	nop
 80125ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125ee:	bc08      	pop	{r3}
 80125f0:	469e      	mov	lr, r3
 80125f2:	4770      	bx	lr
