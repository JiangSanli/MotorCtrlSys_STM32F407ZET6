
MotorCtrlSys_STM32F407ZET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001113c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e34  080112d0  080112d0  000212d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012104  08012104  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08012104  08012104  00022104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801210c  0801210c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801210c  0801210c  0002210c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012110  08012110  00022110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08012114  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301dc  2**0
                  CONTENTS
 10 .bss          00005650  200001dc  200001dc  000301dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000582c  2000582c  000301dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00027044  00000000  00000000  0003024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005a42  00000000  00000000  00057293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f70  00000000  00000000  0005ccd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000184a  00000000  00000000  0005ec48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002aeb2  00000000  00000000  00060492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002afd0  00000000  00000000  0008b344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ef22f  00000000  00000000  000b6314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000091dc  00000000  00000000  001a5544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  001ae720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080112b4 	.word	0x080112b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080112b4 	.word	0x080112b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eb6:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <MX_ADC1_Init+0x98>)
 8000eb8:	4a21      	ldr	r2, [pc, #132]	; (8000f40 <MX_ADC1_Init+0x9c>)
 8000eba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <MX_ADC1_Init+0x98>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec2:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <MX_ADC1_Init+0x98>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ec8:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <MX_ADC1_Init+0x98>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ece:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <MX_ADC1_Init+0x98>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ed4:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <MX_ADC1_Init+0x98>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000edc:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <MX_ADC1_Init+0x98>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee2:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <MX_ADC1_Init+0x98>)
 8000ee4:	4a17      	ldr	r2, [pc, #92]	; (8000f44 <MX_ADC1_Init+0xa0>)
 8000ee6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <MX_ADC1_Init+0x98>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000eee:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <MX_ADC1_Init+0x98>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <MX_ADC1_Init+0x98>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <MX_ADC1_Init+0x98>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f02:	480e      	ldr	r0, [pc, #56]	; (8000f3c <MX_ADC1_Init+0x98>)
 8000f04:	f005 fb30 	bl	8006568 <HAL_ADC_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f0e:	f001 f991 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f12:	230a      	movs	r3, #10
 8000f14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f16:	2301      	movs	r3, #1
 8000f18:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1e:	463b      	mov	r3, r7
 8000f20:	4619      	mov	r1, r3
 8000f22:	4806      	ldr	r0, [pc, #24]	; (8000f3c <MX_ADC1_Init+0x98>)
 8000f24:	f005 fb64 	bl	80065f0 <HAL_ADC_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f2e:	f001 f981 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200001f8 	.word	0x200001f8
 8000f40:	40012000 	.word	0x40012000
 8000f44:	0f000001 	.word	0x0f000001

08000f48 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f4e:	463b      	mov	r3, r7
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000f5a:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <MX_ADC2_Init+0x98>)
 8000f5c:	4a21      	ldr	r2, [pc, #132]	; (8000fe4 <MX_ADC2_Init+0x9c>)
 8000f5e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f60:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <MX_ADC2_Init+0x98>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f66:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <MX_ADC2_Init+0x98>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000f6c:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <MX_ADC2_Init+0x98>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f72:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <MX_ADC2_Init+0x98>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f78:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <MX_ADC2_Init+0x98>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f80:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <MX_ADC2_Init+0x98>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f86:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <MX_ADC2_Init+0x98>)
 8000f88:	4a17      	ldr	r2, [pc, #92]	; (8000fe8 <MX_ADC2_Init+0xa0>)
 8000f8a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <MX_ADC2_Init+0x98>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000f92:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <MX_ADC2_Init+0x98>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_ADC2_Init+0x98>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_ADC2_Init+0x98>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fa6:	480e      	ldr	r0, [pc, #56]	; (8000fe0 <MX_ADC2_Init+0x98>)
 8000fa8:	f005 fade 	bl	8006568 <HAL_ADC_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000fb2:	f001 f93f 	bl	8002234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000fb6:	230c      	movs	r3, #12
 8000fb8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <MX_ADC2_Init+0x98>)
 8000fc8:	f005 fb12 	bl	80065f0 <HAL_ADC_ConfigChannel>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000fd2:	f001 f92f 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000240 	.word	0x20000240
 8000fe4:	40012100 	.word	0x40012100
 8000fe8:	0f000001 	.word	0x0f000001

08000fec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08c      	sub	sp, #48	; 0x30
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 031c 	add.w	r3, r7, #28
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a2e      	ldr	r2, [pc, #184]	; (80010c4 <HAL_ADC_MspInit+0xd8>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d128      	bne.n	8001060 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
 8001012:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <HAL_ADC_MspInit+0xdc>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	4a2c      	ldr	r2, [pc, #176]	; (80010c8 <HAL_ADC_MspInit+0xdc>)
 8001018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101c:	6453      	str	r3, [r2, #68]	; 0x44
 800101e:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <HAL_ADC_MspInit+0xdc>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001026:	61bb      	str	r3, [r7, #24]
 8001028:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	4b26      	ldr	r3, [pc, #152]	; (80010c8 <HAL_ADC_MspInit+0xdc>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a25      	ldr	r2, [pc, #148]	; (80010c8 <HAL_ADC_MspInit+0xdc>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <HAL_ADC_MspInit+0xdc>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = VM6_SensA_ADC_Pin|VM6_SensB_ADC_Pin;
 8001046:	2303      	movs	r3, #3
 8001048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800104a:	2303      	movs	r3, #3
 800104c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001052:	f107 031c 	add.w	r3, r7, #28
 8001056:	4619      	mov	r1, r3
 8001058:	481c      	ldr	r0, [pc, #112]	; (80010cc <HAL_ADC_MspInit+0xe0>)
 800105a:	f006 fb2f 	bl	80076bc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800105e:	e02c      	b.n	80010ba <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a1a      	ldr	r2, [pc, #104]	; (80010d0 <HAL_ADC_MspInit+0xe4>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d127      	bne.n	80010ba <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <HAL_ADC_MspInit+0xdc>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a15      	ldr	r2, [pc, #84]	; (80010c8 <HAL_ADC_MspInit+0xdc>)
 8001074:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001078:	6453      	str	r3, [r2, #68]	; 0x44
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <HAL_ADC_MspInit+0xdc>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <HAL_ADC_MspInit+0xdc>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <HAL_ADC_MspInit+0xdc>)
 8001090:	f043 0304 	orr.w	r3, r3, #4
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <HAL_ADC_MspInit+0xdc>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0304 	and.w	r3, r3, #4
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VM8_SensA_ADC_Pin|VM8_SensB_ADC_Pin;
 80010a2:	230c      	movs	r3, #12
 80010a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a6:	2303      	movs	r3, #3
 80010a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	4619      	mov	r1, r3
 80010b4:	4805      	ldr	r0, [pc, #20]	; (80010cc <HAL_ADC_MspInit+0xe0>)
 80010b6:	f006 fb01 	bl	80076bc <HAL_GPIO_Init>
}
 80010ba:	bf00      	nop
 80010bc:	3730      	adds	r7, #48	; 0x30
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40012000 	.word	0x40012000
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40020800 	.word	0x40020800
 80010d0:	40012100 	.word	0x40012100

080010d4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80010d8:	4b16      	ldr	r3, [pc, #88]	; (8001134 <MX_CAN1_Init+0x60>)
 80010da:	4a17      	ldr	r2, [pc, #92]	; (8001138 <MX_CAN1_Init+0x64>)
 80010dc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <MX_CAN1_Init+0x60>)
 80010e0:	2210      	movs	r2, #16
 80010e2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <MX_CAN1_Init+0x60>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <MX_CAN1_Init+0x60>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80010f0:	4b10      	ldr	r3, [pc, #64]	; (8001134 <MX_CAN1_Init+0x60>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_CAN1_Init+0x60>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <MX_CAN1_Init+0x60>)
 80010fe:	2200      	movs	r2, #0
 8001100:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_CAN1_Init+0x60>)
 8001104:	2200      	movs	r2, #0
 8001106:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <MX_CAN1_Init+0x60>)
 800110a:	2200      	movs	r2, #0
 800110c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_CAN1_Init+0x60>)
 8001110:	2200      	movs	r2, #0
 8001112:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <MX_CAN1_Init+0x60>)
 8001116:	2200      	movs	r2, #0
 8001118:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_CAN1_Init+0x60>)
 800111c:	2200      	movs	r2, #0
 800111e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001120:	4804      	ldr	r0, [pc, #16]	; (8001134 <MX_CAN1_Init+0x60>)
 8001122:	f005 fc83 	bl	8006a2c <HAL_CAN_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800112c:	f001 f882 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000288 	.word	0x20000288
 8001138:	40006400 	.word	0x40006400

0800113c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a19      	ldr	r2, [pc, #100]	; (80011c0 <HAL_CAN_MspInit+0x84>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d12c      	bne.n	80011b8 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <HAL_CAN_MspInit+0x88>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	4a17      	ldr	r2, [pc, #92]	; (80011c4 <HAL_CAN_MspInit+0x88>)
 8001168:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800116c:	6413      	str	r3, [r2, #64]	; 0x40
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <HAL_CAN_MspInit+0x88>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <HAL_CAN_MspInit+0x88>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a10      	ldr	r2, [pc, #64]	; (80011c4 <HAL_CAN_MspInit+0x88>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <HAL_CAN_MspInit+0x88>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001196:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800119a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80011a8:	2309      	movs	r3, #9
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4619      	mov	r1, r3
 80011b2:	4805      	ldr	r0, [pc, #20]	; (80011c8 <HAL_CAN_MspInit+0x8c>)
 80011b4:	f006 fa82 	bl	80076bc <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80011b8:	bf00      	nop
 80011ba:	3728      	adds	r7, #40	; 0x28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40006400 	.word	0x40006400
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020000 	.word	0x40020000

080011cc <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011d2:	463b      	mov	r3, r7
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <MX_DAC_Init+0x4c>)
 80011dc:	4a0f      	ldr	r2, [pc, #60]	; (800121c <MX_DAC_Init+0x50>)
 80011de:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011e0:	480d      	ldr	r0, [pc, #52]	; (8001218 <MX_DAC_Init+0x4c>)
 80011e2:	f005 fe01 	bl	8006de8 <HAL_DAC_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011ec:	f001 f822 	bl	8002234 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011f8:	463b      	mov	r3, r7
 80011fa:	2200      	movs	r2, #0
 80011fc:	4619      	mov	r1, r3
 80011fe:	4806      	ldr	r0, [pc, #24]	; (8001218 <MX_DAC_Init+0x4c>)
 8001200:	f005 fe78 	bl	8006ef4 <HAL_DAC_ConfigChannel>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800120a:	f001 f813 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200002b0 	.word	0x200002b0
 800121c:	40007400 	.word	0x40007400

08001220 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a1b      	ldr	r2, [pc, #108]	; (80012ac <HAL_DAC_MspInit+0x8c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d12f      	bne.n	80012a2 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <HAL_DAC_MspInit+0x90>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	4a19      	ldr	r2, [pc, #100]	; (80012b0 <HAL_DAC_MspInit+0x90>)
 800124c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001250:	6413      	str	r3, [r2, #64]	; 0x40
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <HAL_DAC_MspInit+0x90>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <HAL_DAC_MspInit+0x90>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <HAL_DAC_MspInit+0x90>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <HAL_DAC_MspInit+0x90>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800127a:	2310      	movs	r3, #16
 800127c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127e:	2303      	movs	r3, #3
 8001280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	4809      	ldr	r0, [pc, #36]	; (80012b4 <HAL_DAC_MspInit+0x94>)
 800128e:	f006 fa15 	bl	80076bc <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 7, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2107      	movs	r1, #7
 8001296:	2036      	movs	r0, #54	; 0x36
 8001298:	f005 fd7c 	bl	8006d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800129c:	2036      	movs	r0, #54	; 0x36
 800129e:	f005 fd95 	bl	8006dcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80012a2:	bf00      	nop
 80012a4:	3728      	adds	r7, #40	; 0x28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40007400 	.word	0x40007400
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020000 	.word	0x40020000

080012b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_DMA_Init+0x3c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <MX_DMA_Init+0x3c>)
 80012c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_DMA_Init+0x3c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 7, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2107      	movs	r1, #7
 80012de:	200d      	movs	r0, #13
 80012e0:	f005 fd58 	bl	8006d94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80012e4:	200d      	movs	r0, #13
 80012e6:	f005 fd71 	bl	8006dcc <HAL_NVIC_EnableIRQ>

}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800

080012f8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012fc:	4a10      	ldr	r2, [pc, #64]	; (8001340 <MX_FREERTOS_Init+0x48>)
 80012fe:	2100      	movs	r1, #0
 8001300:	4810      	ldr	r0, [pc, #64]	; (8001344 <MX_FREERTOS_Init+0x4c>)
 8001302:	f00a fd3d 	bl	800bd80 <osThreadNew>
 8001306:	4603      	mov	r3, r0
 8001308:	4a0f      	ldr	r2, [pc, #60]	; (8001348 <MX_FREERTOS_Init+0x50>)
 800130a:	6013      	str	r3, [r2, #0]

  /* creation of messageTask */
  messageTaskHandle = osThreadNew(StartmessageTask, NULL, &messageTask_attributes);
 800130c:	4a0f      	ldr	r2, [pc, #60]	; (800134c <MX_FREERTOS_Init+0x54>)
 800130e:	2100      	movs	r1, #0
 8001310:	480f      	ldr	r0, [pc, #60]	; (8001350 <MX_FREERTOS_Init+0x58>)
 8001312:	f00a fd35 	bl	800bd80 <osThreadNew>
 8001316:	4603      	mov	r3, r0
 8001318:	4a0e      	ldr	r2, [pc, #56]	; (8001354 <MX_FREERTOS_Init+0x5c>)
 800131a:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 800131c:	4a0e      	ldr	r2, [pc, #56]	; (8001358 <MX_FREERTOS_Init+0x60>)
 800131e:	2100      	movs	r1, #0
 8001320:	480e      	ldr	r0, [pc, #56]	; (800135c <MX_FREERTOS_Init+0x64>)
 8001322:	f00a fd2d 	bl	800bd80 <osThreadNew>
 8001326:	4603      	mov	r3, r0
 8001328:	4a0d      	ldr	r2, [pc, #52]	; (8001360 <MX_FREERTOS_Init+0x68>)
 800132a:	6013      	str	r3, [r2, #0]

  /* creation of DetectionTask */
  DetectionTaskHandle = osThreadNew(StartDetectionTask, NULL, &DetectionTask_attributes);
 800132c:	4a0d      	ldr	r2, [pc, #52]	; (8001364 <MX_FREERTOS_Init+0x6c>)
 800132e:	2100      	movs	r1, #0
 8001330:	480d      	ldr	r0, [pc, #52]	; (8001368 <MX_FREERTOS_Init+0x70>)
 8001332:	f00a fd25 	bl	800bd80 <osThreadNew>
 8001336:	4603      	mov	r3, r0
 8001338:	4a0c      	ldr	r2, [pc, #48]	; (800136c <MX_FREERTOS_Init+0x74>)
 800133a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	08011ce0 	.word	0x08011ce0
 8001344:	08001371 	.word	0x08001371
 8001348:	200002c4 	.word	0x200002c4
 800134c:	08011d04 	.word	0x08011d04
 8001350:	08005ac9 	.word	0x08005ac9
 8001354:	200002c8 	.word	0x200002c8
 8001358:	08011d28 	.word	0x08011d28
 800135c:	08005e91 	.word	0x08005e91
 8001360:	200002cc 	.word	0x200002cc
 8001364:	08011d4c 	.word	0x08011d4c
 8001368:	08001391 	.word	0x08001391
 800136c:	200002d0 	.word	0x200002d0

08001370 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  LED_Heart_Toggle();
 8001378:	2120      	movs	r1, #32
 800137a:	4804      	ldr	r0, [pc, #16]	; (800138c <StartDefaultTask+0x1c>)
 800137c:	f006 fb6b 	bl	8007a56 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8001380:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001384:	f00a fd8e 	bl	800bea4 <osDelay>
	  LED_Heart_Toggle();
 8001388:	e7f6      	b.n	8001378 <StartDefaultTask+0x8>
 800138a:	bf00      	nop
 800138c:	40021800 	.word	0x40021800

08001390 <StartDetectionTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDetectionTask */
__weak void StartDetectionTask(void *argument)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDetectionTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 8001398:	f242 7010 	movw	r0, #10000	; 0x2710
 800139c:	f00a fd82 	bl	800bea4 <osDelay>
 80013a0:	e7fa      	b.n	8001398 <StartDetectionTask+0x8>
	...

080013a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08e      	sub	sp, #56	; 0x38
 80013a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
 80013be:	4bb5      	ldr	r3, [pc, #724]	; (8001694 <MX_GPIO_Init+0x2f0>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4ab4      	ldr	r2, [pc, #720]	; (8001694 <MX_GPIO_Init+0x2f0>)
 80013c4:	f043 0310 	orr.w	r3, r3, #16
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4bb2      	ldr	r3, [pc, #712]	; (8001694 <MX_GPIO_Init+0x2f0>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0310 	and.w	r3, r3, #16
 80013d2:	623b      	str	r3, [r7, #32]
 80013d4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
 80013da:	4bae      	ldr	r3, [pc, #696]	; (8001694 <MX_GPIO_Init+0x2f0>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4aad      	ldr	r2, [pc, #692]	; (8001694 <MX_GPIO_Init+0x2f0>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4bab      	ldr	r3, [pc, #684]	; (8001694 <MX_GPIO_Init+0x2f0>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	61fb      	str	r3, [r7, #28]
 80013f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
 80013f6:	4ba7      	ldr	r3, [pc, #668]	; (8001694 <MX_GPIO_Init+0x2f0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4aa6      	ldr	r2, [pc, #664]	; (8001694 <MX_GPIO_Init+0x2f0>)
 80013fc:	f043 0320 	orr.w	r3, r3, #32
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4ba4      	ldr	r3, [pc, #656]	; (8001694 <MX_GPIO_Init+0x2f0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0320 	and.w	r3, r3, #32
 800140a:	61bb      	str	r3, [r7, #24]
 800140c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	4ba0      	ldr	r3, [pc, #640]	; (8001694 <MX_GPIO_Init+0x2f0>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a9f      	ldr	r2, [pc, #636]	; (8001694 <MX_GPIO_Init+0x2f0>)
 8001418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b9d      	ldr	r3, [pc, #628]	; (8001694 <MX_GPIO_Init+0x2f0>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b99      	ldr	r3, [pc, #612]	; (8001694 <MX_GPIO_Init+0x2f0>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a98      	ldr	r2, [pc, #608]	; (8001694 <MX_GPIO_Init+0x2f0>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b96      	ldr	r3, [pc, #600]	; (8001694 <MX_GPIO_Init+0x2f0>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b92      	ldr	r3, [pc, #584]	; (8001694 <MX_GPIO_Init+0x2f0>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a91      	ldr	r2, [pc, #580]	; (8001694 <MX_GPIO_Init+0x2f0>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b8f      	ldr	r3, [pc, #572]	; (8001694 <MX_GPIO_Init+0x2f0>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	4b8b      	ldr	r3, [pc, #556]	; (8001694 <MX_GPIO_Init+0x2f0>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a8a      	ldr	r2, [pc, #552]	; (8001694 <MX_GPIO_Init+0x2f0>)
 800146c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b88      	ldr	r3, [pc, #544]	; (8001694 <MX_GPIO_Init+0x2f0>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b84      	ldr	r3, [pc, #528]	; (8001694 <MX_GPIO_Init+0x2f0>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a83      	ldr	r2, [pc, #524]	; (8001694 <MX_GPIO_Init+0x2f0>)
 8001488:	f043 0308 	orr.w	r3, r3, #8
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b81      	ldr	r3, [pc, #516]	; (8001694 <MX_GPIO_Init+0x2f0>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VM4_Step_Pin|VM4_Dir_Pin|VM6_IN1_Pin|VM6_IN2_Pin
 800149a:	2200      	movs	r2, #0
 800149c:	f248 31f6 	movw	r1, #33782	; 0x83f6
 80014a0:	487d      	ldr	r0, [pc, #500]	; (8001698 <MX_GPIO_Init+0x2f4>)
 80014a2:	f006 fabf 	bl	8007a24 <HAL_GPIO_WritePin>
                          |VM6_EnA_Pin|VM5_EnB_Pin|VM5_EnA_Pin|BEEP_Pin
                          |VM3_Dir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VM4_En_Pin|VM3_En_Pin, GPIO_PIN_SET);
 80014a6:	2201      	movs	r2, #1
 80014a8:	2109      	movs	r1, #9
 80014aa:	487b      	ldr	r0, [pc, #492]	; (8001698 <MX_GPIO_Init+0x2f4>)
 80014ac:	f006 faba 	bl	8007a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, FDCshutdown_Pin|OUT6_Pin|OUT5_Pin|OUT4_Pin
 80014b0:	2200      	movs	r2, #0
 80014b2:	f24e 71e8 	movw	r1, #59368	; 0xe7e8
 80014b6:	4879      	ldr	r0, [pc, #484]	; (800169c <MX_GPIO_Init+0x2f8>)
 80014b8:	f006 fab4 	bl	8007a24 <HAL_GPIO_WritePin>
                          |OUT3_Pin|OUT2_Pin|OUT1_Pin|VM8_EnB_Pin
                          |VM8_EnA_Pin|VM7_EnB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VM8_IN3_Pin|VM8_IN4_Pin, GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	210c      	movs	r1, #12
 80014c0:	4877      	ldr	r0, [pc, #476]	; (80016a0 <MX_GPIO_Init+0x2fc>)
 80014c2:	f006 faaf 	bl	8007a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VM7_IN3_Pin|VM7_IN4_Pin|VM7_IN1_Pin|VM7_IN2_Pin
 80014c6:	2200      	movs	r2, #0
 80014c8:	f64f 716b 	movw	r1, #65387	; 0xff6b
 80014cc:	4875      	ldr	r0, [pc, #468]	; (80016a4 <MX_GPIO_Init+0x300>)
 80014ce:	f006 faa9 	bl	8007a24 <HAL_GPIO_WritePin>
                          |VM5_IN1_Pin|VM5_IN2_Pin|VM5_IN3_Pin|VM5_IN4_Pin
                          |VM1_Step_Pin|VM1_Dir_Pin|VM2_Step_Pin|VM2_Dir_Pin
                          |VM3_Step_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, VM7_EnA_Pin|VM6_EnB_Pin|LED_Heart_Pin, GPIO_PIN_RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2123      	movs	r1, #35	; 0x23
 80014d6:	4874      	ldr	r0, [pc, #464]	; (80016a8 <MX_GPIO_Init+0x304>)
 80014d8:	f006 faa4 	bl	8007a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, VM8_IN1_Pin|VM8_IN2_Pin, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80014e2:	4872      	ldr	r0, [pc, #456]	; (80016ac <MX_GPIO_Init+0x308>)
 80014e4:	f006 fa9e 	bl	8007a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED2_Pin|LED1_Pin|LED0_Pin, GPIO_PIN_SET);
 80014e8:	2201      	movs	r2, #1
 80014ea:	211c      	movs	r1, #28
 80014ec:	486e      	ldr	r0, [pc, #440]	; (80016a8 <MX_GPIO_Init+0x304>)
 80014ee:	f006 fa99 	bl	8007a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VM6_IN3_Pin|VM6_IN4_Pin, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	f44f 7140 	mov.w	r1, #768	; 0x300
 80014f8:	486d      	ldr	r0, [pc, #436]	; (80016b0 <MX_GPIO_Init+0x30c>)
 80014fa:	f006 fa93 	bl	8007a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VM1_En_Pin|VM2_En_Pin, GPIO_PIN_SET);
 80014fe:	2201      	movs	r2, #1
 8001500:	2190      	movs	r1, #144	; 0x90
 8001502:	4868      	ldr	r0, [pc, #416]	; (80016a4 <MX_GPIO_Init+0x300>)
 8001504:	f006 fa8e 	bl	8007a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VM4_Step_Pin;
 8001508:	2304      	movs	r3, #4
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001514:	2303      	movs	r3, #3
 8001516:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(VM4_Step_GPIO_Port, &GPIO_InitStruct);
 8001518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151c:	4619      	mov	r1, r3
 800151e:	485e      	ldr	r0, [pc, #376]	; (8001698 <MX_GPIO_Init+0x2f4>)
 8001520:	f006 f8cc 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = VM4_En_Pin|VM4_Dir_Pin|BEEP_Pin|VM3_En_Pin
 8001524:	f248 031b 	movw	r3, #32795	; 0x801b
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
                          |VM3_Dir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152a:	2301      	movs	r3, #1
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153a:	4619      	mov	r1, r3
 800153c:	4856      	ldr	r0, [pc, #344]	; (8001698 <MX_GPIO_Init+0x2f4>)
 800153e:	f006 f8bd 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = VM6_IN1_Pin|VM6_IN2_Pin;
 8001542:	2360      	movs	r3, #96	; 0x60
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001546:	2301      	movs	r3, #1
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800154e:	2302      	movs	r3, #2
 8001550:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001556:	4619      	mov	r1, r3
 8001558:	484f      	ldr	r0, [pc, #316]	; (8001698 <MX_GPIO_Init+0x2f4>)
 800155a:	f006 f8af 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FDCINTB_Pin;
 800155e:	2304      	movs	r3, #4
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001562:	2300      	movs	r3, #0
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(FDCINTB_GPIO_Port, &GPIO_InitStruct);
 800156a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156e:	4619      	mov	r1, r3
 8001570:	484a      	ldr	r0, [pc, #296]	; (800169c <MX_GPIO_Init+0x2f8>)
 8001572:	f006 f8a3 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FDCshutdown_Pin;
 8001576:	2308      	movs	r3, #8
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157a:	2301      	movs	r3, #1
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FDCshutdown_GPIO_Port, &GPIO_InitStruct);
 8001586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158a:	4619      	mov	r1, r3
 800158c:	4843      	ldr	r0, [pc, #268]	; (800169c <MX_GPIO_Init+0x2f8>)
 800158e:	f006 f895 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = OUT6_Pin|OUT5_Pin|OUT4_Pin|OUT3_Pin
 8001592:	f24e 73e0 	movw	r3, #59360	; 0xe7e0
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT2_Pin|OUT1_Pin|VM8_EnB_Pin|VM8_EnA_Pin
                          |VM7_EnB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001598:	2301      	movs	r3, #1
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800159c:	2302      	movs	r3, #2
 800159e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2300      	movs	r3, #0
 80015a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a8:	4619      	mov	r1, r3
 80015aa:	483c      	ldr	r0, [pc, #240]	; (800169c <MX_GPIO_Init+0x2f8>)
 80015ac:	f006 f886 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Liquid_Detect_Pin;
 80015b0:	2301      	movs	r3, #1
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80015b4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ba:	2301      	movs	r3, #1
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Liquid_Detect_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c2:	4619      	mov	r1, r3
 80015c4:	4836      	ldr	r0, [pc, #216]	; (80016a0 <MX_GPIO_Init+0x2fc>)
 80015c6:	f006 f879 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VM8_IN3_Pin|VM8_IN4_Pin;
 80015ca:	230c      	movs	r3, #12
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d6:	2302      	movs	r3, #2
 80015d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015de:	4619      	mov	r1, r3
 80015e0:	482f      	ldr	r0, [pc, #188]	; (80016a0 <MX_GPIO_Init+0x2fc>)
 80015e2:	f006 f86b 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Encoder3_Z_Pin|Encoder4_Z_Pin;
 80015e6:	2330      	movs	r3, #48	; 0x30
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f6:	4619      	mov	r1, r3
 80015f8:	482d      	ldr	r0, [pc, #180]	; (80016b0 <MX_GPIO_Init+0x30c>)
 80015fa:	f006 f85f 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = VM7_IN3_Pin|VM7_IN4_Pin|VM7_IN1_Pin|VM7_IN2_Pin
 80015fe:	f64f 4303 	movw	r3, #64515	; 0xfc03
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
                          |VM5_IN1_Pin|VM5_IN2_Pin|VM5_IN3_Pin|VM5_IN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001604:	2301      	movs	r3, #1
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800160c:	2302      	movs	r3, #2
 800160e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001614:	4619      	mov	r1, r3
 8001616:	4823      	ldr	r0, [pc, #140]	; (80016a4 <MX_GPIO_Init+0x300>)
 8001618:	f006 f850 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = VM7_EnA_Pin|VM6_EnB_Pin;
 800161c:	2303      	movs	r3, #3
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001620:	2301      	movs	r3, #1
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001624:	2302      	movs	r3, #2
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800162c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001630:	4619      	mov	r1, r3
 8001632:	481d      	ldr	r0, [pc, #116]	; (80016a8 <MX_GPIO_Init+0x304>)
 8001634:	f006 f842 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VM6_EnA_Pin|VM5_EnB_Pin|VM5_EnA_Pin;
 8001638:	f44f 7360 	mov.w	r3, #896	; 0x380
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163e:	2301      	movs	r3, #1
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001642:	2302      	movs	r3, #2
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2300      	movs	r3, #0
 8001648:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800164a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164e:	4619      	mov	r1, r3
 8001650:	4811      	ldr	r0, [pc, #68]	; (8001698 <MX_GPIO_Init+0x2f4>)
 8001652:	f006 f833 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encoder2_Z_Pin;
 8001656:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165c:	2300      	movs	r3, #0
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Encoder2_Z_GPIO_Port, &GPIO_InitStruct);
 8001664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001668:	4619      	mov	r1, r3
 800166a:	4810      	ldr	r0, [pc, #64]	; (80016ac <MX_GPIO_Init+0x308>)
 800166c:	f006 f826 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = VM8_IN1_Pin|VM8_IN2_Pin;
 8001670:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001676:	2301      	movs	r3, #1
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800167e:	2302      	movs	r3, #2
 8001680:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001686:	4619      	mov	r1, r3
 8001688:	4808      	ldr	r0, [pc, #32]	; (80016ac <MX_GPIO_Init+0x308>)
 800168a:	f006 f817 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|LED0_Pin|LED_Heart_Pin;
 800168e:	233c      	movs	r3, #60	; 0x3c
 8001690:	e010      	b.n	80016b4 <MX_GPIO_Init+0x310>
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800
 8001698:	40021000 	.word	0x40021000
 800169c:	40021400 	.word	0x40021400
 80016a0:	40020000 	.word	0x40020000
 80016a4:	40020400 	.word	0x40020400
 80016a8:	40021800 	.word	0x40021800
 80016ac:	40020c00 	.word	0x40020c00
 80016b0:	40020800 	.word	0x40020800
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c6:	4619      	mov	r1, r3
 80016c8:	4848      	ldr	r0, [pc, #288]	; (80017ec <MX_GPIO_Init+0x448>)
 80016ca:	f005 fff7 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin|KEY2_Pin;
 80016ce:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d8:	2301      	movs	r3, #1
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e0:	4619      	mov	r1, r3
 80016e2:	4842      	ldr	r0, [pc, #264]	; (80017ec <MX_GPIO_Init+0x448>)
 80016e4:	f005 ffea 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VM6_IN3_Pin|VM6_IN4_Pin;
 80016e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ee:	2301      	movs	r3, #1
 80016f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016f6:	2302      	movs	r3, #2
 80016f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fe:	4619      	mov	r1, r3
 8001700:	483b      	ldr	r0, [pc, #236]	; (80017f0 <MX_GPIO_Init+0x44c>)
 8001702:	f005 ffdb 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encoder1_Z_Pin;
 8001706:	f44f 7380 	mov.w	r3, #256	; 0x100
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170c:	2300      	movs	r3, #0
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Encoder1_Z_GPIO_Port, &GPIO_InitStruct);
 8001714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001718:	4619      	mov	r1, r3
 800171a:	4836      	ldr	r0, [pc, #216]	; (80017f4 <MX_GPIO_Init+0x450>)
 800171c:	f005 ffce 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = OPT_IN1_Pin|OPT_IN2_Pin|OPT_IN3_Pin|OPT_IN4_Pin
 8001720:	23f8      	movs	r3, #248	; 0xf8
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
                          |OPT_IN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001724:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800172e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001732:	4619      	mov	r1, r3
 8001734:	4830      	ldr	r0, [pc, #192]	; (80017f8 <MX_GPIO_Init+0x454>)
 8001736:	f005 ffc1 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OPT_IN6_Pin|OPT_IN7_Pin|OPT_IN8_Pin|OPT_IN9_Pin
 800173a:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
                          |OPT_IN10_Pin|OPT_IN11_Pin|OPT_IN12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001740:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001744:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800174a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174e:	4619      	mov	r1, r3
 8001750:	4826      	ldr	r0, [pc, #152]	; (80017ec <MX_GPIO_Init+0x448>)
 8001752:	f005 ffb3 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = VM1_Step_Pin|VM2_Step_Pin|VM3_Step_Pin;
 8001756:	f44f 7312 	mov.w	r3, #584	; 0x248
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175c:	2301      	movs	r3, #1
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001764:	2303      	movs	r3, #3
 8001766:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176c:	4619      	mov	r1, r3
 800176e:	4823      	ldr	r0, [pc, #140]	; (80017fc <MX_GPIO_Init+0x458>)
 8001770:	f005 ffa4 	bl	80076bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = VM1_En_Pin|VM1_Dir_Pin|VM2_En_Pin|VM2_Dir_Pin;
 8001774:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177a:	2301      	movs	r3, #1
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	2300      	movs	r3, #0
 8001784:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178a:	4619      	mov	r1, r3
 800178c:	481b      	ldr	r0, [pc, #108]	; (80017fc <MX_GPIO_Init+0x458>)
 800178e:	f005 ff95 	bl	80076bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	2105      	movs	r1, #5
 8001796:	2006      	movs	r0, #6
 8001798:	f005 fafc 	bl	8006d94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800179c:	2006      	movs	r0, #6
 800179e:	f005 fb15 	bl	8006dcc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2105      	movs	r1, #5
 80017a6:	2009      	movs	r0, #9
 80017a8:	f005 faf4 	bl	8006d94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80017ac:	2009      	movs	r0, #9
 80017ae:	f005 fb0d 	bl	8006dcc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2105      	movs	r1, #5
 80017b6:	200a      	movs	r0, #10
 80017b8:	f005 faec 	bl	8006d94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80017bc:	200a      	movs	r0, #10
 80017be:	f005 fb05 	bl	8006dcc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2105      	movs	r1, #5
 80017c6:	2017      	movs	r0, #23
 80017c8:	f005 fae4 	bl	8006d94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017cc:	2017      	movs	r0, #23
 80017ce:	f005 fafd 	bl	8006dcc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2105      	movs	r1, #5
 80017d6:	2028      	movs	r0, #40	; 0x28
 80017d8:	f005 fadc 	bl	8006d94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017dc:	2028      	movs	r0, #40	; 0x28
 80017de:	f005 faf5 	bl	8006dcc <HAL_NVIC_EnableIRQ>

}
 80017e2:	bf00      	nop
 80017e4:	3738      	adds	r7, #56	; 0x38
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40021800 	.word	0x40021800
 80017f0:	40020800 	.word	0x40020800
 80017f4:	40020000 	.word	0x40020000
 80017f8:	40020c00 	.word	0x40020c00
 80017fc:	40020400 	.word	0x40020400

08001800 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	80fb      	strh	r3, [r7, #6]
    switch(GPIO_Pin)
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001810:	d042      	beq.n	8001898 <HAL_GPIO_EXTI_Callback+0x98>
 8001812:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001816:	dc53      	bgt.n	80018c0 <HAL_GPIO_EXTI_Callback+0xc0>
 8001818:	2b80      	cmp	r3, #128	; 0x80
 800181a:	d032      	beq.n	8001882 <HAL_GPIO_EXTI_Callback+0x82>
 800181c:	2b80      	cmp	r3, #128	; 0x80
 800181e:	dc4f      	bgt.n	80018c0 <HAL_GPIO_EXTI_Callback+0xc0>
 8001820:	2b40      	cmp	r3, #64	; 0x40
 8001822:	d023      	beq.n	800186c <HAL_GPIO_EXTI_Callback+0x6c>
 8001824:	2b40      	cmp	r3, #64	; 0x40
 8001826:	dc4b      	bgt.n	80018c0 <HAL_GPIO_EXTI_Callback+0xc0>
 8001828:	2b20      	cmp	r3, #32
 800182a:	d014      	beq.n	8001856 <HAL_GPIO_EXTI_Callback+0x56>
 800182c:	2b20      	cmp	r3, #32
 800182e:	dc47      	bgt.n	80018c0 <HAL_GPIO_EXTI_Callback+0xc0>
 8001830:	2b01      	cmp	r3, #1
 8001832:	d002      	beq.n	800183a <HAL_GPIO_EXTI_Callback+0x3a>
 8001834:	2b10      	cmp	r3, #16
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_EXTI_Callback+0x40>
        	}
            break;
#endif

    }
}
 8001838:	e042      	b.n	80018c0 <HAL_GPIO_EXTI_Callback+0xc0>
        	if (Liquid_Detect_GPIO_Port->IDR & Liquid_Detect_Pin){ 	// if Rising edge trigger
 800183a:	4b24      	ldr	r3, [pc, #144]	; (80018cc <HAL_GPIO_EXTI_Callback+0xcc>)
 800183c:	691b      	ldr	r3, [r3, #16]
            break;
 800183e:	e03f      	b.n	80018c0 <HAL_GPIO_EXTI_Callback+0xc0>
        	if (OPT_IN2_GPIO_Port->IDR & OPT_IN2_Pin){ 	// if Rising edge trigger
 8001840:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	f003 0310 	and.w	r3, r3, #16
 8001848:	2b00      	cmp	r3, #0
 800184a:	d130      	bne.n	80018ae <HAL_GPIO_EXTI_Callback+0xae>
        		Motor[2].StepPosition =0 ;
 800184c:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <HAL_GPIO_EXTI_Callback+0xd4>)
 800184e:	2200      	movs	r2, #0
 8001850:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
        	break;
 8001854:	e02b      	b.n	80018ae <HAL_GPIO_EXTI_Callback+0xae>
        	if (OPT_IN3_GPIO_Port->IDR & OPT_IN3_Pin) { 	// if Rising edge trigger
 8001856:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	f003 0320 	and.w	r3, r3, #32
 800185e:	2b00      	cmp	r3, #0
 8001860:	d127      	bne.n	80018b2 <HAL_GPIO_EXTI_Callback+0xb2>
        		Motor[3].StepPosition =0 ;
 8001862:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001864:	2200      	movs	r2, #0
 8001866:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        	break;
 800186a:	e022      	b.n	80018b2 <HAL_GPIO_EXTI_Callback+0xb2>
        	if (OPT_IN4_GPIO_Port->IDR & OPT_IN4_Pin) { 	// if Rising edge trigger
 800186c:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <HAL_GPIO_EXTI_Callback+0xd0>)
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001874:	2b00      	cmp	r3, #0
 8001876:	d01e      	beq.n	80018b6 <HAL_GPIO_EXTI_Callback+0xb6>
        		Motor[4].StepPosition =0 ;
 8001878:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <HAL_GPIO_EXTI_Callback+0xd4>)
 800187a:	2200      	movs	r2, #0
 800187c:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
            break;
 8001880:	e019      	b.n	80018b6 <HAL_GPIO_EXTI_Callback+0xb6>
        	if (OPT_IN5_GPIO_Port->IDR & OPT_IN5_Pin) { 	// if Rising edge trigger
 8001882:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800188a:	2b00      	cmp	r3, #0
 800188c:	d115      	bne.n	80018ba <HAL_GPIO_EXTI_Callback+0xba>
        		Motor[5].StepPosition =0 ;
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001890:	2200      	movs	r2, #0
 8001892:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
            break;
 8001896:	e010      	b.n	80018ba <HAL_GPIO_EXTI_Callback+0xba>
        	if (OPT_IN6_GPIO_Port->IDR & OPT_IN6_Pin) { 	// if Rising edge trigger
 8001898:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <HAL_GPIO_EXTI_Callback+0xd8>)
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10c      	bne.n	80018be <HAL_GPIO_EXTI_Callback+0xbe>
        		Motor[6].StepPosition =0 ;
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_GPIO_EXTI_Callback+0xd4>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
            break;
 80018ac:	e007      	b.n	80018be <HAL_GPIO_EXTI_Callback+0xbe>
        	break;
 80018ae:	bf00      	nop
 80018b0:	e006      	b.n	80018c0 <HAL_GPIO_EXTI_Callback+0xc0>
        	break;
 80018b2:	bf00      	nop
 80018b4:	e004      	b.n	80018c0 <HAL_GPIO_EXTI_Callback+0xc0>
            break;
 80018b6:	bf00      	nop
 80018b8:	e002      	b.n	80018c0 <HAL_GPIO_EXTI_Callback+0xc0>
            break;
 80018ba:	bf00      	nop
 80018bc:	e000      	b.n	80018c0 <HAL_GPIO_EXTI_Callback+0xc0>
            break;
 80018be:	bf00      	nop
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	40020000 	.word	0x40020000
 80018d0:	40020c00 	.word	0x40020c00
 80018d4:	2000088c 	.word	0x2000088c
 80018d8:	40021800 	.word	0x40021800

080018dc <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c2_rx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <MX_I2C2_Init+0x50>)
 80018e2:	4a13      	ldr	r2, [pc, #76]	; (8001930 <MX_I2C2_Init+0x54>)
 80018e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <MX_I2C2_Init+0x50>)
 80018e8:	4a12      	ldr	r2, [pc, #72]	; (8001934 <MX_I2C2_Init+0x58>)
 80018ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <MX_I2C2_Init+0x50>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <MX_I2C2_Init+0x50>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <MX_I2C2_Init+0x50>)
 80018fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018fe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001900:	4b0a      	ldr	r3, [pc, #40]	; (800192c <MX_I2C2_Init+0x50>)
 8001902:	2200      	movs	r2, #0
 8001904:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <MX_I2C2_Init+0x50>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800190c:	4b07      	ldr	r3, [pc, #28]	; (800192c <MX_I2C2_Init+0x50>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <MX_I2C2_Init+0x50>)
 8001914:	2200      	movs	r2, #0
 8001916:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001918:	4804      	ldr	r0, [pc, #16]	; (800192c <MX_I2C2_Init+0x50>)
 800191a:	f006 f8cf 	bl	8007abc <HAL_I2C_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001924:	f000 fc86 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	200002d4 	.word	0x200002d4
 8001930:	40005800 	.word	0x40005800
 8001934:	000186a0 	.word	0x000186a0

08001938 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08a      	sub	sp, #40	; 0x28
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a39      	ldr	r2, [pc, #228]	; (8001a3c <HAL_I2C_MspInit+0x104>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d16b      	bne.n	8001a32 <HAL_I2C_MspInit+0xfa>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	4b38      	ldr	r3, [pc, #224]	; (8001a40 <HAL_I2C_MspInit+0x108>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a37      	ldr	r2, [pc, #220]	; (8001a40 <HAL_I2C_MspInit+0x108>)
 8001964:	f043 0320 	orr.w	r3, r3, #32
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b35      	ldr	r3, [pc, #212]	; (8001a40 <HAL_I2C_MspInit+0x108>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0320 	and.w	r3, r3, #32
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001976:	2303      	movs	r3, #3
 8001978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800197a:	2312      	movs	r3, #18
 800197c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001982:	2303      	movs	r3, #3
 8001984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001986:	2304      	movs	r3, #4
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	482c      	ldr	r0, [pc, #176]	; (8001a44 <HAL_I2C_MspInit+0x10c>)
 8001992:	f005 fe93 	bl	80076bc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <HAL_I2C_MspInit+0x108>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	4a28      	ldr	r2, [pc, #160]	; (8001a40 <HAL_I2C_MspInit+0x108>)
 80019a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019a4:	6413      	str	r3, [r2, #64]	; 0x40
 80019a6:	4b26      	ldr	r3, [pc, #152]	; (8001a40 <HAL_I2C_MspInit+0x108>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 80019b2:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <HAL_I2C_MspInit+0x110>)
 80019b4:	4a25      	ldr	r2, [pc, #148]	; (8001a4c <HAL_I2C_MspInit+0x114>)
 80019b6:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80019b8:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <HAL_I2C_MspInit+0x110>)
 80019ba:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80019be:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019c0:	4b21      	ldr	r3, [pc, #132]	; (8001a48 <HAL_I2C_MspInit+0x110>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019c6:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <HAL_I2C_MspInit+0x110>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019cc:	4b1e      	ldr	r3, [pc, #120]	; (8001a48 <HAL_I2C_MspInit+0x110>)
 80019ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019d2:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019d4:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <HAL_I2C_MspInit+0x110>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019da:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <HAL_I2C_MspInit+0x110>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_CIRCULAR;
 80019e0:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_I2C_MspInit+0x110>)
 80019e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019e6:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80019e8:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <HAL_I2C_MspInit+0x110>)
 80019ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019ee:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019f0:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_I2C_MspInit+0x110>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80019f6:	4814      	ldr	r0, [pc, #80]	; (8001a48 <HAL_I2C_MspInit+0x110>)
 80019f8:	f005 fad6 	bl	8006fa8 <HAL_DMA_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8001a02:	f000 fc17 	bl	8002234 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a0f      	ldr	r2, [pc, #60]	; (8001a48 <HAL_I2C_MspInit+0x110>)
 8001a0a:	639a      	str	r2, [r3, #56]	; 0x38
 8001a0c:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <HAL_I2C_MspInit+0x110>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2105      	movs	r1, #5
 8001a16:	2021      	movs	r0, #33	; 0x21
 8001a18:	f005 f9bc 	bl	8006d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001a1c:	2021      	movs	r0, #33	; 0x21
 8001a1e:	f005 f9d5 	bl	8006dcc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2105      	movs	r1, #5
 8001a26:	2022      	movs	r0, #34	; 0x22
 8001a28:	f005 f9b4 	bl	8006d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001a2c:	2022      	movs	r0, #34	; 0x22
 8001a2e:	f005 f9cd 	bl	8006dcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001a32:	bf00      	nop
 8001a34:	3728      	adds	r7, #40	; 0x28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40005800 	.word	0x40005800
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40021400 	.word	0x40021400
 8001a48:	20000328 	.word	0x20000328
 8001a4c:	40026040 	.word	0x40026040

08001a50 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart5, (uint8_t*)&ch,1,HAL_MAX_DELAY);
 8001a58:	1d39      	adds	r1, r7, #4
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5e:	2201      	movs	r2, #1
 8001a60:	4803      	ldr	r0, [pc, #12]	; (8001a70 <__io_putchar+0x20>)
 8001a62:	f009 f890 	bl	800ab86 <HAL_UART_Transmit>
    return ch;
 8001a66:	687b      	ldr	r3, [r7, #4]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	200007c0 	.word	0x200007c0

08001a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a78:	f004 fd10 	bl	800649c <HAL_Init>
  /* USER CODE BEGIN Init */
  //HAL_Delay(6000);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a7c:	f000 f836 	bl	8001aec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 8001a80:	f7ff fc90 	bl	80013a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a84:	f7ff fc18 	bl	80012b8 <MX_DMA_Init>
  MX_CAN1_Init();
 8001a88:	f7ff fb24 	bl	80010d4 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8001a8c:	f001 fab4 	bl	8002ff8 <MX_USART1_UART_Init>
  MX_DAC_Init();
 8001a90:	f7ff fb9c 	bl	80011cc <MX_DAC_Init>
  MX_TIM2_Init();
 8001a94:	f000 fe40 	bl	8002718 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a98:	f000 fe92 	bl	80027c0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001a9c:	f000 fee4 	bl	8002868 <MX_TIM4_Init>
  MX_UART4_Init();
 8001aa0:	f001 fa50 	bl	8002f44 <MX_UART4_Init>
  MX_UART5_Init();
 8001aa4:	f001 fa78 	bl	8002f98 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8001aa8:	f001 fad0 	bl	800304c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001aac:	f7ff f9fa 	bl	8000ea4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001ab0:	f7ff fa4a 	bl	8000f48 <MX_ADC2_Init>
  MX_I2C2_Init();
 8001ab4:	f7ff ff12 	bl	80018dc <MX_I2C2_Init>
  MX_TIM10_Init();
 8001ab8:	f000 ffca 	bl	8002a50 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001abc:	f000 ffea 	bl	8002a94 <MX_TIM11_Init>
  MX_TIM13_Init();
 8001ac0:	f001 f842 	bl	8002b48 <MX_TIM13_Init>
  MX_TIM14_Init();
 8001ac4:	f001 f862 	bl	8002b8c <MX_TIM14_Init>
  MX_TIM9_Init();
 8001ac8:	f000 ff8a 	bl	80029e0 <MX_TIM9_Init>
  MX_TIM7_Init();
 8001acc:	f000 ff54 	bl	8002978 <MX_TIM7_Init>
  MX_TIM6_Init();
 8001ad0:	f000 ff1e 	bl	8002910 <MX_TIM6_Init>
  MX_TIM12_Init();
 8001ad4:	f001 f800 	bl	8002ad8 <MX_TIM12_Init>
  MX_TIM7_Init();
  MX_TIM6_Init();
  MX_TIM12_Init();
  /* USER CODE BEGIN 2 */
#endif
  ALL_Motors_Disable();
 8001ad8:	f001 fd76 	bl	80035c8 <ALL_Motors_Disable>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001adc:	f00a f906 	bl	800bcec <osKernelInitialize>
  MX_FREERTOS_Init();
 8001ae0:	f7ff fc0a 	bl	80012f8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001ae4:	f00a f926 	bl	800bd34 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <main+0x74>
	...

08001aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b094      	sub	sp, #80	; 0x50
 8001af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001af2:	f107 0320 	add.w	r3, r7, #32
 8001af6:	2230      	movs	r2, #48	; 0x30
 8001af8:	2100      	movs	r1, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f00d fcca 	bl	800f494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b10:	2300      	movs	r3, #0
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	4b28      	ldr	r3, [pc, #160]	; (8001bb8 <SystemClock_Config+0xcc>)
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	4a27      	ldr	r2, [pc, #156]	; (8001bb8 <SystemClock_Config+0xcc>)
 8001b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b20:	4b25      	ldr	r3, [pc, #148]	; (8001bb8 <SystemClock_Config+0xcc>)
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <SystemClock_Config+0xd0>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a21      	ldr	r2, [pc, #132]	; (8001bbc <SystemClock_Config+0xd0>)
 8001b36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	4b1f      	ldr	r3, [pc, #124]	; (8001bbc <SystemClock_Config+0xd0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b44:	607b      	str	r3, [r7, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b52:	2302      	movs	r3, #2
 8001b54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b5c:	2304      	movs	r3, #4
 8001b5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001b60:	23a0      	movs	r3, #160	; 0xa0
 8001b62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b64:	2302      	movs	r3, #2
 8001b66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b68:	2304      	movs	r3, #4
 8001b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b6c:	f107 0320 	add.w	r3, r7, #32
 8001b70:	4618      	mov	r0, r3
 8001b72:	f007 fd9b 	bl	80096ac <HAL_RCC_OscConfig>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b7c:	f000 fb5a 	bl	8002234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b80:	230f      	movs	r3, #15
 8001b82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b84:	2302      	movs	r3, #2
 8001b86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001b92:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b98:	f107 030c 	add.w	r3, r7, #12
 8001b9c:	2105      	movs	r1, #5
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f007 fffc 	bl	8009b9c <HAL_RCC_ClockConfig>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001baa:	f000 fb43 	bl	8002234 <Error_Handler>
  }
}
 8001bae:	bf00      	nop
 8001bb0:	3750      	adds	r7, #80	; 0x50
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40007000 	.word	0x40007000

08001bc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a9d      	ldr	r2, [pc, #628]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d101      	bne.n	8001bd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bd2:	f004 fc85 	bl	80064e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

	if (htim->Instance == TIM9) {	// 计时器周期为0.1ms
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a9b      	ldr	r2, [pc, #620]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d126      	bne.n	8001c2e <HAL_TIM_PeriodElapsedCallback+0x6e>
		uart_reieve_timeoutCount++;
 8001be0:	4b9a      	ldr	r3, [pc, #616]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	3301      	adds	r3, #1
 8001be6:	4a99      	ldr	r2, [pc, #612]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001be8:	6013      	str	r3, [r2, #0]
		if( (USART_RX_STA&0x8000) || (USART_RX_STA==0) ){	// 判断串口接收超时
 8001bea:	4b99      	ldr	r3, [pc, #612]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	b21b      	sxth	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	db03      	blt.n	8001bfc <HAL_TIM_PeriodElapsedCallback+0x3c>
 8001bf4:	4b96      	ldr	r3, [pc, #600]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d106      	bne.n	8001c0a <HAL_TIM_PeriodElapsedCallback+0x4a>
			uart_reieve_timeoutCount = 0;
 8001bfc:	4b93      	ldr	r3, [pc, #588]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim9);
 8001c02:	4894      	ldr	r0, [pc, #592]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c04:	f008 fadc 	bl	800a1c0 <HAL_TIM_Base_Stop_IT>
 8001c08:	e011      	b.n	8001c2e <HAL_TIM_PeriodElapsedCallback+0x6e>
		}
		else{
			if(uart_reieve_timeoutCount > 5000){
 8001c0a:	4b90      	ldr	r3, [pc, #576]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d90b      	bls.n	8001c2e <HAL_TIM_PeriodElapsedCallback+0x6e>
				printf("[WRONG] Data Input Timeout ! \r\n");
 8001c16:	4890      	ldr	r0, [pc, #576]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001c18:	f00d fb5c 	bl	800f2d4 <puts>
				uart_reieve_timeoutCount = 0;
 8001c1c:	4b8b      	ldr	r3, [pc, #556]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
				USART_RX_STA = 0;
 8001c22:	4b8b      	ldr	r3, [pc, #556]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	801a      	strh	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim9);
 8001c28:	488a      	ldr	r0, [pc, #552]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c2a:	f008 fac9 	bl	800a1c0 <HAL_TIM_Base_Stop_IT>
			}
		}
	}

	if (htim->Instance == TIM10)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a8a      	ldr	r2, [pc, #552]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	f040 80c0 	bne.w	8001dba <HAL_TIM_PeriodElapsedCallback+0x1fa>
	{
			timecount_TIM10++;
 8001c3a:	4b89      	ldr	r3, [pc, #548]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	4a87      	ldr	r2, [pc, #540]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c42:	6013      	str	r3, [r2, #0]
			AccelDecelcount_TIM10++;
 8001c44:	4b87      	ldr	r3, [pc, #540]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	4a86      	ldr	r2, [pc, #536]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c4c:	6013      	str	r3, [r2, #0]
			if(timecount_TIM10 <= Pluse_High)
 8001c4e:	4b84      	ldr	r3, [pc, #528]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4b85      	ldr	r3, [pc, #532]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d805      	bhi.n	8001c66 <HAL_TIM_PeriodElapsedCallback+0xa6>
			{
				Motorpluse1_High();
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	2108      	movs	r1, #8
 8001c5e:	4883      	ldr	r0, [pc, #524]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001c60:	f005 fee0 	bl	8007a24 <HAL_GPIO_WritePin>
 8001c64:	e00a      	b.n	8001c7c <HAL_TIM_PeriodElapsedCallback+0xbc>
			}
			else if(timecount_TIM10 > Pluse_High)
 8001c66:	4b7e      	ldr	r3, [pc, #504]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	4b7f      	ldr	r3, [pc, #508]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d904      	bls.n	8001c7c <HAL_TIM_PeriodElapsedCallback+0xbc>
			{
				Motorpluse1_Low();
 8001c72:	2200      	movs	r2, #0
 8001c74:	2108      	movs	r1, #8
 8001c76:	487d      	ldr	r0, [pc, #500]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001c78:	f005 fed4 	bl	8007a24 <HAL_GPIO_WritePin>
			}
			if(timecount_TIM10 >= Motor[1].StepperSpeedTMR)
 8001c7c:	4b7c      	ldr	r3, [pc, #496]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001c7e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8001c82:	4b77      	ldr	r3, [pc, #476]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d843      	bhi.n	8001d12 <HAL_TIM_PeriodElapsedCallback+0x152>
			{
				timecount_TIM10 = 0 ;
 8001c8a:	4b75      	ldr	r3, [pc, #468]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
				Motor[1].NumberofSteps--;
 8001c90:	4b77      	ldr	r3, [pc, #476]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001c92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001c96:	3b01      	subs	r3, #1
 8001c98:	4a75      	ldr	r2, [pc, #468]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001c9a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
				if (Motor[1].MotorDirection == 1){
 8001c9e:	4b74      	ldr	r3, [pc, #464]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001ca0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d11c      	bne.n	8001ce2 <HAL_TIM_PeriodElapsedCallback+0x122>
					Motor[1].StepPosition++;
 8001ca8:	4b71      	ldr	r3, [pc, #452]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cae:	3301      	adds	r3, #1
 8001cb0:	4a6f      	ldr	r2, [pc, #444]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001cb2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					if (Motor[1].StepPosition >= Motor[1].StepsInOneCircle){
 8001cb6:	4b6e      	ldr	r3, [pc, #440]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b6c      	ldr	r3, [pc, #432]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001cc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d324      	bcc.n	8001d12 <HAL_TIM_PeriodElapsedCallback+0x152>
						Motor[1].StepPosition = Motor[1].StepPosition - Motor[1].StepsInOneCircle ;
 8001cc8:	4b69      	ldr	r3, [pc, #420]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b67      	ldr	r3, [pc, #412]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001cd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b65      	ldr	r3, [pc, #404]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001cdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8001ce0:	e017      	b.n	8001d12 <HAL_TIM_PeriodElapsedCallback+0x152>
					}
				}
				else{
					Motor[1].StepPosition--;
 8001ce2:	4b63      	ldr	r3, [pc, #396]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	4a61      	ldr	r2, [pc, #388]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					if (Motor[1].StepPosition < 0){
 8001cf0:	4b5f      	ldr	r3, [pc, #380]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	da0b      	bge.n	8001d12 <HAL_TIM_PeriodElapsedCallback+0x152>
						Motor[1].StepPosition = Motor[1].StepPosition + Motor[1].StepsInOneCircle ;
 8001cfa:	4b5d      	ldr	r3, [pc, #372]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b5b      	ldr	r3, [pc, #364]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d08:	4413      	add	r3, r2
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4b58      	ldr	r3, [pc, #352]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}
				}
			}
			if(Motor[1].StepPosition == Motor[1].TargetPosition)
 8001d12:	4b57      	ldr	r3, [pc, #348]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d14:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d18:	4b55      	ldr	r3, [pc, #340]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d10e      	bne.n	8001d40 <HAL_TIM_PeriodElapsedCallback+0x180>
			{
				Motor[1].Status = 0;
 8001d22:	4b53      	ldr	r3, [pc, #332]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
				printf("---Motor1 Steps Position:%ld---\r\n",Motor[1].StepPosition);
 8001d2a:	4b51      	ldr	r3, [pc, #324]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d30:	4619      	mov	r1, r3
 8001d32:	4850      	ldr	r0, [pc, #320]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d34:	f00d fa68 	bl	800f208 <iprintf>
				HAL_TIM_Base_Stop_IT(&htim10);
 8001d38:	484f      	ldr	r0, [pc, #316]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001d3a:	f008 fa41 	bl	800a1c0 <HAL_TIM_Base_Stop_IT>
 8001d3e:	e00b      	b.n	8001d58 <HAL_TIM_PeriodElapsedCallback+0x198>
			}
			else if (Motor[1].NumberofSteps <= 0){
 8001d40:	4b4b      	ldr	r3, [pc, #300]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d106      	bne.n	8001d58 <HAL_TIM_PeriodElapsedCallback+0x198>
				Motor[1].Status = 0;
 8001d4a:	4b49      	ldr	r3, [pc, #292]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
				//printf("[WRONG]Motor1 Goto Target Position Failed!---Current_Position:%ld---\r\n",Motor[1].StepPosition);
				HAL_TIM_Base_Stop_IT(&htim10);
 8001d52:	4849      	ldr	r0, [pc, #292]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001d54:	f008 fa34 	bl	800a1c0 <HAL_TIM_Base_Stop_IT>
			}

			if (Motor[1].NumberofSteps > Motor[1].NumberofSteps_StopAccel)  // if.. begin Acceleration
 8001d58:	4b45      	ldr	r3, [pc, #276]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d5a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001d5e:	4b44      	ldr	r3, [pc, #272]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d90f      	bls.n	8001d88 <HAL_TIM_PeriodElapsedCallback+0x1c8>
			{
				if(AccelDecelcount_TIM10 >= Motor[1].AccelerationTimeTMR)
 8001d68:	4b41      	ldr	r3, [pc, #260]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d6a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001d6e:	4b3d      	ldr	r3, [pc, #244]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	f200 824f 	bhi.w	8002216 <HAL_TIM_PeriodElapsedCallback+0x656>
				{
					AccelDecelcount_TIM10=0;
 8001d78:	4b3a      	ldr	r3, [pc, #232]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
					AccelDecel(ACCEL,&Motor[1]);
 8001d7e:	493f      	ldr	r1, [pc, #252]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001d80:	2001      	movs	r0, #1
 8001d82:	f001 fcff 	bl	8003784 <AccelDecel>
				}
			}
	}
#endif
  /* USER CODE END Callback 1 */
}
 8001d86:	e246      	b.n	8002216 <HAL_TIM_PeriodElapsedCallback+0x656>
			else if (Motor[1].NumberofSteps < Motor[1].NumberofSteps_BeginDecel)  // if.. begin Deceleration
 8001d88:	4b39      	ldr	r3, [pc, #228]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d8a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001d8e:	4b38      	ldr	r3, [pc, #224]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001d94:	429a      	cmp	r2, r3
 8001d96:	f080 823e 	bcs.w	8002216 <HAL_TIM_PeriodElapsedCallback+0x656>
				if(AccelDecelcount_TIM10 >= Motor[1].DecelerationTimeTMR)
 8001d9a:	4b35      	ldr	r3, [pc, #212]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d9c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001da0:	4b30      	ldr	r3, [pc, #192]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	f200 8236 	bhi.w	8002216 <HAL_TIM_PeriodElapsedCallback+0x656>
					AccelDecelcount_TIM10=0;
 8001daa:	4b2e      	ldr	r3, [pc, #184]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
					AccelDecel(DECEL,&Motor[1]);
 8001db0:	4932      	ldr	r1, [pc, #200]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001db2:	2002      	movs	r0, #2
 8001db4:	f001 fce6 	bl	8003784 <AccelDecel>
}
 8001db8:	e22d      	b.n	8002216 <HAL_TIM_PeriodElapsedCallback+0x656>
	else if (htim->Instance == TIM11)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a30      	ldr	r2, [pc, #192]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	f040 80be 	bne.w	8001f42 <HAL_TIM_PeriodElapsedCallback+0x382>
			timecount_TIM11++;
 8001dc6:	4b2f      	ldr	r3, [pc, #188]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	4a2d      	ldr	r2, [pc, #180]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001dce:	6013      	str	r3, [r2, #0]
			AccelDecelcount_TIM11++;
 8001dd0:	4b2d      	ldr	r3, [pc, #180]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	4a2c      	ldr	r2, [pc, #176]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001dd8:	6013      	str	r3, [r2, #0]
			if(timecount_TIM11 <= Pluse_High)
 8001dda:	4b2a      	ldr	r3, [pc, #168]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d805      	bhi.n	8001df2 <HAL_TIM_PeriodElapsedCallback+0x232>
				Motorpluse2_High();
 8001de6:	2201      	movs	r2, #1
 8001de8:	2140      	movs	r1, #64	; 0x40
 8001dea:	4820      	ldr	r0, [pc, #128]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001dec:	f005 fe1a 	bl	8007a24 <HAL_GPIO_WritePin>
 8001df0:	e00a      	b.n	8001e08 <HAL_TIM_PeriodElapsedCallback+0x248>
			else if(timecount_TIM11 > Pluse_High)
 8001df2:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d904      	bls.n	8001e08 <HAL_TIM_PeriodElapsedCallback+0x248>
				Motorpluse2_Low();
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2140      	movs	r1, #64	; 0x40
 8001e02:	481a      	ldr	r0, [pc, #104]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001e04:	f005 fe0e 	bl	8007a24 <HAL_GPIO_WritePin>
			if(timecount_TIM11 >= Motor[2].StepperSpeedTMR)
 8001e08:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001e0a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d841      	bhi.n	8001e9a <HAL_TIM_PeriodElapsedCallback+0x2da>
				timecount_TIM11 = 0 ;
 8001e16:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
				Motor[2].NumberofSteps--;
 8001e1c:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001e1e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001e22:	3b01      	subs	r3, #1
 8001e24:	4a12      	ldr	r2, [pc, #72]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001e26:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
				if (Motor[2].MotorDirection == 1){
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001e2c:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d12b      	bne.n	8001e8c <HAL_TIM_PeriodElapsedCallback+0x2cc>
					Motor[2].StepPosition++;
 8001e34:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001e36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	4a0c      	ldr	r2, [pc, #48]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001e3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e42:	e02a      	b.n	8001e9a <HAL_TIM_PeriodElapsedCallback+0x2da>
 8001e44:	40010000 	.word	0x40010000
 8001e48:	40014000 	.word	0x40014000
 8001e4c:	20000388 	.word	0x20000388
 8001e50:	20000778 	.word	0x20000778
 8001e54:	20000560 	.word	0x20000560
 8001e58:	08011304 	.word	0x08011304
 8001e5c:	40014400 	.word	0x40014400
 8001e60:	2000038c 	.word	0x2000038c
 8001e64:	20000390 	.word	0x20000390
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	40020400 	.word	0x40020400
 8001e70:	2000088c 	.word	0x2000088c
 8001e74:	08011324 	.word	0x08011324
 8001e78:	200005a8 	.word	0x200005a8
 8001e7c:	200008ec 	.word	0x200008ec
 8001e80:	40014800 	.word	0x40014800
 8001e84:	20000394 	.word	0x20000394
 8001e88:	20000398 	.word	0x20000398
					Motor[2].StepPosition--;
 8001e8c:	4ba4      	ldr	r3, [pc, #656]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001e8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e92:	3b01      	subs	r3, #1
 8001e94:	4aa2      	ldr	r2, [pc, #648]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001e96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
			if(Motor[2].StepPosition == Motor[2].TargetPosition){
 8001e9a:	4ba1      	ldr	r3, [pc, #644]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001e9c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001ea0:	4b9f      	ldr	r3, [pc, #636]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001ea2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d10e      	bne.n	8001ec8 <HAL_TIM_PeriodElapsedCallback+0x308>
				Motor[2].Status = 0;
 8001eaa:	4b9d      	ldr	r3, [pc, #628]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				printf("---Motor2 Steps Position:%ld---\r\n",Motor[2].StepPosition);
 8001eb2:	4b9b      	ldr	r3, [pc, #620]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001eb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001eb8:	4619      	mov	r1, r3
 8001eba:	489a      	ldr	r0, [pc, #616]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001ebc:	f00d f9a4 	bl	800f208 <iprintf>
				HAL_TIM_Base_Stop_IT(&htim11);
 8001ec0:	4899      	ldr	r0, [pc, #612]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001ec2:	f008 f97d 	bl	800a1c0 <HAL_TIM_Base_Stop_IT>
 8001ec6:	e00b      	b.n	8001ee0 <HAL_TIM_PeriodElapsedCallback+0x320>
			else if (Motor[2].NumberofSteps <= 0){
 8001ec8:	4b95      	ldr	r3, [pc, #596]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001eca:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d106      	bne.n	8001ee0 <HAL_TIM_PeriodElapsedCallback+0x320>
				Motor[2].Status = 0;
 8001ed2:	4b93      	ldr	r3, [pc, #588]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				HAL_TIM_Base_Stop_IT(&htim11);
 8001eda:	4893      	ldr	r0, [pc, #588]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001edc:	f008 f970 	bl	800a1c0 <HAL_TIM_Base_Stop_IT>
			if (Motor[2].NumberofSteps > Motor[2].NumberofSteps_StopAccel)
 8001ee0:	4b8f      	ldr	r3, [pc, #572]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001ee2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001ee6:	4b8e      	ldr	r3, [pc, #568]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001ee8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d90f      	bls.n	8001f10 <HAL_TIM_PeriodElapsedCallback+0x350>
				if(AccelDecelcount_TIM11 >= Motor[2].AccelerationTimeTMR)
 8001ef0:	4b8b      	ldr	r3, [pc, #556]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001ef2:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8001ef6:	4b8d      	ldr	r3, [pc, #564]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	f200 818b 	bhi.w	8002216 <HAL_TIM_PeriodElapsedCallback+0x656>
					AccelDecelcount_TIM11=0;
 8001f00:	4b8a      	ldr	r3, [pc, #552]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
					AccelDecel(ACCEL,&Motor[2]);
 8001f06:	498a      	ldr	r1, [pc, #552]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8001f08:	2001      	movs	r0, #1
 8001f0a:	f001 fc3b 	bl	8003784 <AccelDecel>
}
 8001f0e:	e182      	b.n	8002216 <HAL_TIM_PeriodElapsedCallback+0x656>
			else if (Motor[2].NumberofSteps < Motor[2].NumberofSteps_BeginDecel)
 8001f10:	4b83      	ldr	r3, [pc, #524]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001f12:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001f16:	4b82      	ldr	r3, [pc, #520]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001f18:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	f080 817a 	bcs.w	8002216 <HAL_TIM_PeriodElapsedCallback+0x656>
				if(AccelDecelcount_TIM11 >= Motor[2].DecelerationTimeTMR)
 8001f22:	4b7f      	ldr	r3, [pc, #508]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001f24:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8001f28:	4b80      	ldr	r3, [pc, #512]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	f200 8172 	bhi.w	8002216 <HAL_TIM_PeriodElapsedCallback+0x656>
					AccelDecelcount_TIM11=0;
 8001f32:	4b7e      	ldr	r3, [pc, #504]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
					AccelDecel(DECEL,&Motor[2]);
 8001f38:	497d      	ldr	r1, [pc, #500]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8001f3a:	2002      	movs	r0, #2
 8001f3c:	f001 fc22 	bl	8003784 <AccelDecel>
}
 8001f40:	e169      	b.n	8002216 <HAL_TIM_PeriodElapsedCallback+0x656>
	else if (htim->Instance == TIM13)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a7b      	ldr	r2, [pc, #492]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	f040 80a3 	bne.w	8002094 <HAL_TIM_PeriodElapsedCallback+0x4d4>
			timecount_TIM13++;
 8001f4e:	4b7a      	ldr	r3, [pc, #488]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	3301      	adds	r3, #1
 8001f54:	4a78      	ldr	r2, [pc, #480]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8001f56:	6013      	str	r3, [r2, #0]
			AccelDecelcount_TIM13++;
 8001f58:	4b78      	ldr	r3, [pc, #480]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	4a77      	ldr	r2, [pc, #476]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8001f60:	6013      	str	r3, [r2, #0]
				if(timecount_TIM13 <= Pluse_High){
 8001f62:	4b75      	ldr	r3, [pc, #468]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	4b76      	ldr	r3, [pc, #472]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d806      	bhi.n	8001f7c <HAL_TIM_PeriodElapsedCallback+0x3bc>
					Motorpluse3_High();
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f74:	4873      	ldr	r0, [pc, #460]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8001f76:	f005 fd55 	bl	8007a24 <HAL_GPIO_WritePin>
 8001f7a:	e00b      	b.n	8001f94 <HAL_TIM_PeriodElapsedCallback+0x3d4>
				else if(timecount_TIM13 > Pluse_High){
 8001f7c:	4b6e      	ldr	r3, [pc, #440]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b6f      	ldr	r3, [pc, #444]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d905      	bls.n	8001f94 <HAL_TIM_PeriodElapsedCallback+0x3d4>
					Motorpluse3_Low();
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f8e:	486d      	ldr	r0, [pc, #436]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8001f90:	f005 fd48 	bl	8007a24 <HAL_GPIO_WritePin>
				if(timecount_TIM13 >= Motor[3].StepperSpeedTMR){
 8001f94:	4b62      	ldr	r3, [pc, #392]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001f96:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8001f9a:	4b67      	ldr	r3, [pc, #412]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d81d      	bhi.n	8001fde <HAL_TIM_PeriodElapsedCallback+0x41e>
					timecount_TIM13 = 0 ;
 8001fa2:	4b65      	ldr	r3, [pc, #404]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
					Motor[3].NumberofSteps--;
 8001fa8:	4b5d      	ldr	r3, [pc, #372]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001faa:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	4a5b      	ldr	r2, [pc, #364]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001fb2:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
					if (Motor[3].MotorDirection == 1){
 8001fb6:	4b5a      	ldr	r3, [pc, #360]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001fb8:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d107      	bne.n	8001fd0 <HAL_TIM_PeriodElapsedCallback+0x410>
						Motor[3].StepPosition++;
 8001fc0:	4b57      	ldr	r3, [pc, #348]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001fc2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	4a55      	ldr	r2, [pc, #340]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001fca:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001fce:	e006      	b.n	8001fde <HAL_TIM_PeriodElapsedCallback+0x41e>
						Motor[3].StepPosition--;
 8001fd0:	4b53      	ldr	r3, [pc, #332]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001fd2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	4a51      	ldr	r2, [pc, #324]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001fda:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
				if(Motor[3].StepPosition == Motor[3].TargetPosition){
 8001fde:	4b50      	ldr	r3, [pc, #320]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001fe0:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8001fe4:	4b4e      	ldr	r3, [pc, #312]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001fe6:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d10e      	bne.n	800200c <HAL_TIM_PeriodElapsedCallback+0x44c>
					Motor[3].Status = 0;
 8001fee:	4b4c      	ldr	r3, [pc, #304]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
					printf("---Motor3 Steps Position:%ld---\r\n",Motor[3].StepPosition);
 8001ff6:	4b4a      	ldr	r3, [pc, #296]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001ff8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4852      	ldr	r0, [pc, #328]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8002000:	f00d f902 	bl	800f208 <iprintf>
					HAL_TIM_Base_Stop_IT(&htim13);
 8002004:	4851      	ldr	r0, [pc, #324]	; (800214c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8002006:	f008 f8db 	bl	800a1c0 <HAL_TIM_Base_Stop_IT>
 800200a:	e012      	b.n	8002032 <HAL_TIM_PeriodElapsedCallback+0x472>
				else if (Motor[3].NumberofSteps <= 0){
 800200c:	4b44      	ldr	r3, [pc, #272]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 800200e:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10d      	bne.n	8002032 <HAL_TIM_PeriodElapsedCallback+0x472>
					Motor[3].Status = 0;
 8002016:	4b42      	ldr	r3, [pc, #264]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
					printf("[WRONG]Motor3 Goto Target Position Failed!---Current_Position:%ld---\r\n",Motor[3].StepPosition);
 800201e:	4b40      	ldr	r3, [pc, #256]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002020:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002024:	4619      	mov	r1, r3
 8002026:	484a      	ldr	r0, [pc, #296]	; (8002150 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8002028:	f00d f8ee 	bl	800f208 <iprintf>
					HAL_TIM_Base_Stop_IT(&htim13);
 800202c:	4847      	ldr	r0, [pc, #284]	; (800214c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 800202e:	f008 f8c7 	bl	800a1c0 <HAL_TIM_Base_Stop_IT>
				if (Motor[3].NumberofSteps > Motor[3].NumberofSteps_StopAccel){
 8002032:	4b3b      	ldr	r3, [pc, #236]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002034:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 8002038:	4b39      	ldr	r3, [pc, #228]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 800203a:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800203e:	429a      	cmp	r2, r3
 8002040:	d90f      	bls.n	8002062 <HAL_TIM_PeriodElapsedCallback+0x4a2>
					if(AccelDecelcount_TIM13 >= Motor[3].AccelerationTimeTMR){
 8002042:	4b37      	ldr	r3, [pc, #220]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002044:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 8002048:	4b3c      	ldr	r3, [pc, #240]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x57c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	f200 80e2 	bhi.w	8002216 <HAL_TIM_PeriodElapsedCallback+0x656>
						AccelDecelcount_TIM13=0;
 8002052:	4b3a      	ldr	r3, [pc, #232]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
						AccelDecel(ACCEL,&Motor[3]);
 8002058:	493e      	ldr	r1, [pc, #248]	; (8002154 <HAL_TIM_PeriodElapsedCallback+0x594>)
 800205a:	2001      	movs	r0, #1
 800205c:	f001 fb92 	bl	8003784 <AccelDecel>
}
 8002060:	e0d9      	b.n	8002216 <HAL_TIM_PeriodElapsedCallback+0x656>
				else if (Motor[3].NumberofSteps < Motor[3].NumberofSteps_BeginDecel){
 8002062:	4b2f      	ldr	r3, [pc, #188]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002064:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 8002068:	4b2d      	ldr	r3, [pc, #180]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 800206a:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800206e:	429a      	cmp	r2, r3
 8002070:	f080 80d1 	bcs.w	8002216 <HAL_TIM_PeriodElapsedCallback+0x656>
					if(AccelDecelcount_TIM13 >= Motor[3].DecelerationTimeTMR){
 8002074:	4b2a      	ldr	r3, [pc, #168]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002076:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800207a:	4b30      	ldr	r3, [pc, #192]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x57c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	f200 80c9 	bhi.w	8002216 <HAL_TIM_PeriodElapsedCallback+0x656>
						AccelDecelcount_TIM13=0;
 8002084:	4b2d      	ldr	r3, [pc, #180]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
						AccelDecel(DECEL,&Motor[3]);
 800208a:	4932      	ldr	r1, [pc, #200]	; (8002154 <HAL_TIM_PeriodElapsedCallback+0x594>)
 800208c:	2002      	movs	r0, #2
 800208e:	f001 fb79 	bl	8003784 <AccelDecel>
}
 8002092:	e0c0      	b.n	8002216 <HAL_TIM_PeriodElapsedCallback+0x656>
	else if (htim->Instance == TIM14)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a2f      	ldr	r2, [pc, #188]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800209a:	4293      	cmp	r3, r2
 800209c:	f040 80bb 	bne.w	8002216 <HAL_TIM_PeriodElapsedCallback+0x656>
			timecount_TIM14++;
 80020a0:	4b2e      	ldr	r3, [pc, #184]	; (800215c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	3301      	adds	r3, #1
 80020a6:	4a2d      	ldr	r2, [pc, #180]	; (800215c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80020a8:	6013      	str	r3, [r2, #0]
			AccelDecelcount_TIM14++;
 80020aa:	4b2d      	ldr	r3, [pc, #180]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	3301      	adds	r3, #1
 80020b0:	4a2b      	ldr	r2, [pc, #172]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80020b2:	6013      	str	r3, [r2, #0]
			if(timecount_TIM14 <= Pluse_High)
 80020b4:	4b29      	ldr	r3, [pc, #164]	; (800215c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b21      	ldr	r3, [pc, #132]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x580>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d805      	bhi.n	80020cc <HAL_TIM_PeriodElapsedCallback+0x50c>
				Motorpluse4_High();
 80020c0:	2201      	movs	r2, #1
 80020c2:	2104      	movs	r1, #4
 80020c4:	4827      	ldr	r0, [pc, #156]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80020c6:	f005 fcad 	bl	8007a24 <HAL_GPIO_WritePin>
 80020ca:	e00a      	b.n	80020e2 <HAL_TIM_PeriodElapsedCallback+0x522>
			else if(timecount_TIM14 > Pluse_High)
 80020cc:	4b23      	ldr	r3, [pc, #140]	; (800215c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x580>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d904      	bls.n	80020e2 <HAL_TIM_PeriodElapsedCallback+0x522>
				Motorpluse4_Low();
 80020d8:	2200      	movs	r2, #0
 80020da:	2104      	movs	r1, #4
 80020dc:	4821      	ldr	r0, [pc, #132]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80020de:	f005 fca1 	bl	8007a24 <HAL_GPIO_WritePin>
			if(timecount_TIM14 >= Motor[4].StepperSpeedTMR)
 80020e2:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 80020e4:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 80020e8:	4b1c      	ldr	r3, [pc, #112]	; (800215c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d842      	bhi.n	8002176 <HAL_TIM_PeriodElapsedCallback+0x5b6>
				timecount_TIM14 = 0 ;
 80020f0:	4b1a      	ldr	r3, [pc, #104]	; (800215c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
				Motor[4].NumberofSteps--;
 80020f6:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 80020f8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80020fc:	3b01      	subs	r3, #1
 80020fe:	4a08      	ldr	r2, [pc, #32]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002100:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
				if (Motor[4].MotorDirection == 1){
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002106:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800210a:	2b01      	cmp	r3, #1
 800210c:	d12c      	bne.n	8002168 <HAL_TIM_PeriodElapsedCallback+0x5a8>
					Motor[4].StepPosition++;
 800210e:	4b04      	ldr	r3, [pc, #16]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002110:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8002114:	3301      	adds	r3, #1
 8002116:	4a02      	ldr	r2, [pc, #8]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002118:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
 800211c:	e02b      	b.n	8002176 <HAL_TIM_PeriodElapsedCallback+0x5b6>
 800211e:	bf00      	nop
 8002120:	2000088c 	.word	0x2000088c
 8002124:	08011348 	.word	0x08011348
 8002128:	200005f0 	.word	0x200005f0
 800212c:	20000398 	.word	0x20000398
 8002130:	2000094c 	.word	0x2000094c
 8002134:	40001c00 	.word	0x40001c00
 8002138:	2000039c 	.word	0x2000039c
 800213c:	200003a0 	.word	0x200003a0
 8002140:	20000000 	.word	0x20000000
 8002144:	40020400 	.word	0x40020400
 8002148:	0801136c 	.word	0x0801136c
 800214c:	20000680 	.word	0x20000680
 8002150:	08011390 	.word	0x08011390
 8002154:	200009ac 	.word	0x200009ac
 8002158:	40002000 	.word	0x40002000
 800215c:	200003a4 	.word	0x200003a4
 8002160:	200003a8 	.word	0x200003a8
 8002164:	40021000 	.word	0x40021000
					Motor[4].StepPosition--;
 8002168:	4b2d      	ldr	r3, [pc, #180]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x660>)
 800216a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800216e:	3b01      	subs	r3, #1
 8002170:	4a2b      	ldr	r2, [pc, #172]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8002172:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
			if(Motor[4].StepPosition == Motor[4].TargetPosition)
 8002176:	4b2a      	ldr	r3, [pc, #168]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8002178:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 800217c:	4b28      	ldr	r3, [pc, #160]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x660>)
 800217e:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002182:	429a      	cmp	r2, r3
 8002184:	d107      	bne.n	8002196 <HAL_TIM_PeriodElapsedCallback+0x5d6>
				Motor[4].Status = 0;
 8002186:	4b26      	ldr	r3, [pc, #152]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8002188:	2200      	movs	r2, #0
 800218a:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
				HAL_TIM_Base_Stop_IT(&htim14);
 800218e:	4825      	ldr	r0, [pc, #148]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x664>)
 8002190:	f008 f816 	bl	800a1c0 <HAL_TIM_Base_Stop_IT>
 8002194:	e012      	b.n	80021bc <HAL_TIM_PeriodElapsedCallback+0x5fc>
			else if (Motor[4].NumberofSteps <= 0){
 8002196:	4b22      	ldr	r3, [pc, #136]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8002198:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10d      	bne.n	80021bc <HAL_TIM_PeriodElapsedCallback+0x5fc>
				Motor[4].Status = 0;
 80021a0:	4b1f      	ldr	r3, [pc, #124]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x660>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
				printf("[WRONG]Motor4 Goto Target Position Failed!---Current_Position:%ld---\r\n",Motor[4].StepPosition);
 80021a8:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x660>)
 80021aa:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 80021ae:	4619      	mov	r1, r3
 80021b0:	481d      	ldr	r0, [pc, #116]	; (8002228 <HAL_TIM_PeriodElapsedCallback+0x668>)
 80021b2:	f00d f829 	bl	800f208 <iprintf>
				HAL_TIM_Base_Stop_IT(&htim14);
 80021b6:	481b      	ldr	r0, [pc, #108]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x664>)
 80021b8:	f008 f802 	bl	800a1c0 <HAL_TIM_Base_Stop_IT>
			if (Motor[4].NumberofSteps > Motor[4].NumberofSteps_StopAccel)
 80021bc:	4b18      	ldr	r3, [pc, #96]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x660>)
 80021be:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 80021c2:	4b17      	ldr	r3, [pc, #92]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x660>)
 80021c4:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d90e      	bls.n	80021ea <HAL_TIM_PeriodElapsedCallback+0x62a>
				if(AccelDecelcount_TIM14 >= Motor[4].AccelerationTimeTMR)
 80021cc:	4b14      	ldr	r3, [pc, #80]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x660>)
 80021ce:	f8d3 21d8 	ldr.w	r2, [r3, #472]	; 0x1d8
 80021d2:	4b16      	ldr	r3, [pc, #88]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x66c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d81d      	bhi.n	8002216 <HAL_TIM_PeriodElapsedCallback+0x656>
					AccelDecelcount_TIM14=0;
 80021da:	4b14      	ldr	r3, [pc, #80]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x66c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
					AccelDecel(ACCEL,&Motor[4]);
 80021e0:	4913      	ldr	r1, [pc, #76]	; (8002230 <HAL_TIM_PeriodElapsedCallback+0x670>)
 80021e2:	2001      	movs	r0, #1
 80021e4:	f001 face 	bl	8003784 <AccelDecel>
}
 80021e8:	e015      	b.n	8002216 <HAL_TIM_PeriodElapsedCallback+0x656>
			else if (Motor[4].NumberofSteps < Motor[4].NumberofSteps_BeginDecel)
 80021ea:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x660>)
 80021ec:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x660>)
 80021f2:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d20d      	bcs.n	8002216 <HAL_TIM_PeriodElapsedCallback+0x656>
				if(AccelDecelcount_TIM14 >= Motor[4].DecelerationTimeTMR)
 80021fa:	4b09      	ldr	r3, [pc, #36]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x660>)
 80021fc:	f8d3 21dc 	ldr.w	r2, [r3, #476]	; 0x1dc
 8002200:	4b0a      	ldr	r3, [pc, #40]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x66c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d806      	bhi.n	8002216 <HAL_TIM_PeriodElapsedCallback+0x656>
					AccelDecelcount_TIM14=0;
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x66c>)
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
					AccelDecel(DECEL,&Motor[4]);
 800220e:	4908      	ldr	r1, [pc, #32]	; (8002230 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8002210:	2002      	movs	r0, #2
 8002212:	f001 fab7 	bl	8003784 <AccelDecel>
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	2000088c 	.word	0x2000088c
 8002224:	200006c8 	.word	0x200006c8
 8002228:	080113d8 	.word	0x080113d8
 800222c:	200003a8 	.word	0x200003a8
 8002230:	20000a0c 	.word	0x20000a0c

08002234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002238:	b672      	cpsid	i
}
 800223a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800223c:	e7fe      	b.n	800223c <Error_Handler+0x8>
	...

08002240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_MspInit+0x54>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	4a11      	ldr	r2, [pc, #68]	; (8002294 <HAL_MspInit+0x54>)
 8002250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002254:	6453      	str	r3, [r2, #68]	; 0x44
 8002256:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <HAL_MspInit+0x54>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800225e:	607b      	str	r3, [r7, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_MspInit+0x54>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <HAL_MspInit+0x54>)
 800226c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002270:	6413      	str	r3, [r2, #64]	; 0x40
 8002272:	4b08      	ldr	r3, [pc, #32]	; (8002294 <HAL_MspInit+0x54>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	210f      	movs	r1, #15
 8002282:	f06f 0001 	mvn.w	r0, #1
 8002286:	f004 fd85 	bl	8006d94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40023800 	.word	0x40023800

08002298 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08c      	sub	sp, #48	; 0x30
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80022a8:	2300      	movs	r3, #0
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	4b2f      	ldr	r3, [pc, #188]	; (800236c <HAL_InitTick+0xd4>)
 80022ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b0:	4a2e      	ldr	r2, [pc, #184]	; (800236c <HAL_InitTick+0xd4>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	6453      	str	r3, [r2, #68]	; 0x44
 80022b8:	4b2c      	ldr	r3, [pc, #176]	; (800236c <HAL_InitTick+0xd4>)
 80022ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022c4:	f107 020c 	add.w	r2, r7, #12
 80022c8:	f107 0310 	add.w	r3, r7, #16
 80022cc:	4611      	mov	r1, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f007 fe84 	bl	8009fdc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80022d4:	f007 fe6e 	bl	8009fb4 <HAL_RCC_GetPCLK2Freq>
 80022d8:	4603      	mov	r3, r0
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e0:	4a23      	ldr	r2, [pc, #140]	; (8002370 <HAL_InitTick+0xd8>)
 80022e2:	fba2 2303 	umull	r2, r3, r2, r3
 80022e6:	0c9b      	lsrs	r3, r3, #18
 80022e8:	3b01      	subs	r3, #1
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80022ec:	4b21      	ldr	r3, [pc, #132]	; (8002374 <HAL_InitTick+0xdc>)
 80022ee:	4a22      	ldr	r2, [pc, #136]	; (8002378 <HAL_InitTick+0xe0>)
 80022f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80022f2:	4b20      	ldr	r3, [pc, #128]	; (8002374 <HAL_InitTick+0xdc>)
 80022f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022f8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80022fa:	4a1e      	ldr	r2, [pc, #120]	; (8002374 <HAL_InitTick+0xdc>)
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002300:	4b1c      	ldr	r3, [pc, #112]	; (8002374 <HAL_InitTick+0xdc>)
 8002302:	2200      	movs	r2, #0
 8002304:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002306:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <HAL_InitTick+0xdc>)
 8002308:	2200      	movs	r2, #0
 800230a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800230c:	4b19      	ldr	r3, [pc, #100]	; (8002374 <HAL_InitTick+0xdc>)
 800230e:	2200      	movs	r2, #0
 8002310:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002312:	4818      	ldr	r0, [pc, #96]	; (8002374 <HAL_InitTick+0xdc>)
 8002314:	f007 fe94 	bl	800a040 <HAL_TIM_Base_Init>
 8002318:	4603      	mov	r3, r0
 800231a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800231e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002322:	2b00      	cmp	r3, #0
 8002324:	d11b      	bne.n	800235e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002326:	4813      	ldr	r0, [pc, #76]	; (8002374 <HAL_InitTick+0xdc>)
 8002328:	f007 feda 	bl	800a0e0 <HAL_TIM_Base_Start_IT>
 800232c:	4603      	mov	r3, r0
 800232e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002332:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002336:	2b00      	cmp	r3, #0
 8002338:	d111      	bne.n	800235e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800233a:	2019      	movs	r0, #25
 800233c:	f004 fd46 	bl	8006dcc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b0f      	cmp	r3, #15
 8002344:	d808      	bhi.n	8002358 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002346:	2200      	movs	r2, #0
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	2019      	movs	r0, #25
 800234c:	f004 fd22 	bl	8006d94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002350:	4a0a      	ldr	r2, [pc, #40]	; (800237c <HAL_InitTick+0xe4>)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	e002      	b.n	800235e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800235e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002362:	4618      	mov	r0, r3
 8002364:	3730      	adds	r7, #48	; 0x30
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800
 8002370:	431bde83 	.word	0x431bde83
 8002374:	200003ac 	.word	0x200003ac
 8002378:	40010000 	.word	0x40010000
 800237c:	20000008 	.word	0x20000008

08002380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002384:	e7fe      	b.n	8002384 <NMI_Handler+0x4>

08002386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800238a:	e7fe      	b.n	800238a <HardFault_Handler+0x4>

0800238c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002390:	e7fe      	b.n	8002390 <MemManage_Handler+0x4>

08002392 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002396:	e7fe      	b.n	8002396 <BusFault_Handler+0x4>

08002398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800239c:	e7fe      	b.n	800239c <UsageFault_Handler+0x4>

0800239e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Liquid_Detect_Pin);
 80023b0:	2001      	movs	r0, #1
 80023b2:	f005 fb6b 	bl	8007a8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}

080023ba <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPT_IN1_Pin);
 80023be:	2008      	movs	r0, #8
 80023c0:	f005 fb64 	bl	8007a8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80023c4:	bf00      	nop
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPT_IN2_Pin);
 80023cc:	2010      	movs	r0, #16
 80023ce:	f005 fb5d 	bl	8007a8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80023dc:	4802      	ldr	r0, [pc, #8]	; (80023e8 <DMA1_Stream2_IRQHandler+0x10>)
 80023de:	f004 ff23 	bl	8007228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000328 	.word	0x20000328

080023ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPT_IN3_Pin);
 80023f0:	2020      	movs	r0, #32
 80023f2:	f005 fb4b 	bl	8007a8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN4_Pin);
 80023f6:	2040      	movs	r0, #64	; 0x40
 80023f8:	f005 fb48 	bl	8007a8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN5_Pin);
 80023fc:	2080      	movs	r0, #128	; 0x80
 80023fe:	f005 fb45 	bl	8007a8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN6_Pin);
 8002402:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002406:	f005 fb41 	bl	8007a8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002414:	4802      	ldr	r0, [pc, #8]	; (8002420 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002416:	f007 ffa8 	bl	800a36a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000560 	.word	0x20000560

08002424 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002428:	4803      	ldr	r0, [pc, #12]	; (8002438 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800242a:	f007 ff9e 	bl	800a36a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800242e:	4803      	ldr	r0, [pc, #12]	; (800243c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002430:	f007 ff9b 	bl	800a36a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}
 8002438:	200003ac 	.word	0x200003ac
 800243c:	200005a8 	.word	0x200005a8

08002440 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002444:	4802      	ldr	r0, [pc, #8]	; (8002450 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002446:	f007 ff90 	bl	800a36a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200005f0 	.word	0x200005f0

08002454 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
#ifdef JiaYangZhen_EncoderMode
	Motor[3].StepPosition = Encoder3_0position_number - (__HAL_TIM_GET_COUNTER(&htim3)) ;
#endif

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002458:	4802      	ldr	r0, [pc, #8]	; (8002464 <TIM3_IRQHandler+0x10>)
 800245a:	f007 ff86 	bl	800a36a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000440 	.word	0x20000440

08002468 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
#ifdef JiaYangZhen_EncoderMode
	Motor[2].StepPosition = __HAL_TIM_GET_COUNTER(&htim4) - Encoder2_0position_number ;
#endif

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <TIM4_IRQHandler+0x10>)
 800246e:	f007 ff7c 	bl	800a36a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000488 	.word	0x20000488

0800247c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <I2C2_EV_IRQHandler+0x10>)
 8002482:	f005 fc5f 	bl	8007d44 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200002d4 	.word	0x200002d4

08002490 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <I2C2_ER_IRQHandler+0x10>)
 8002496:	f005 fda8 	bl	8007fea <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200002d4 	.word	0x200002d4

080024a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPT_IN7_Pin);
 80024a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80024ac:	f005 faee 	bl	8007a8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN8_Pin);
 80024b0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80024b4:	f005 faea 	bl	8007a8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN9_Pin);
 80024b8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80024bc:	f005 fae6 	bl	8007a8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN10_Pin);
 80024c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024c4:	f005 fae2 	bl	8007a8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN11_Pin);
 80024c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80024cc:	f005 fade 	bl	8007a8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN12_Pin);
 80024d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80024d4:	f005 fada 	bl	8007a8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024d8:	bf00      	nop
 80024da:	bd80      	pop	{r7, pc}

080024dc <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80024e0:	4802      	ldr	r0, [pc, #8]	; (80024ec <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80024e2:	f007 ff42 	bl	800a36a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000638 	.word	0x20000638

080024f0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80024f4:	4802      	ldr	r0, [pc, #8]	; (8002500 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80024f6:	f007 ff38 	bl	800a36a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000680 	.word	0x20000680

08002504 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002508:	4802      	ldr	r0, [pc, #8]	; (8002514 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800250a:	f007 ff2e 	bl	800a36a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	200006c8 	.word	0x200006c8

08002518 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800251c:	4804      	ldr	r0, [pc, #16]	; (8002530 <UART5_IRQHandler+0x18>)
 800251e:	f008 fc39 	bl	800ad94 <HAL_UART_IRQHandler>
//  while(HAL_UART_Receive_IT(&huart5, (uint8_t *)aRxBuffer, 1) != HAL_OK)	//每次中断处理完成之后，重新开启中断并设置RxXferCount 1
//  {
//	 timeout++; 	//超时处理
//	 if(timeout>HAL_MAX_DELAY) break;
//  }
  	HAL_UART_Receive_IT(&huart5, (uint8_t *)aRxBuffer, 1);
 8002522:	2201      	movs	r2, #1
 8002524:	4903      	ldr	r1, [pc, #12]	; (8002534 <UART5_IRQHandler+0x1c>)
 8002526:	4802      	ldr	r0, [pc, #8]	; (8002530 <UART5_IRQHandler+0x18>)
 8002528:	f008 fc04 	bl	800ad34 <HAL_UART_Receive_IT>

  /* USER CODE END UART5_IRQn 1 */
}
 800252c:	bf00      	nop
 800252e:	bd80      	pop	{r7, pc}
 8002530:	200007c0 	.word	0x200007c0
 8002534:	20000710 	.word	0x20000710

08002538 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 800253c:	4803      	ldr	r0, [pc, #12]	; (800254c <TIM6_DAC_IRQHandler+0x14>)
 800253e:	f004 fc75 	bl	8006e2c <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002542:	4803      	ldr	r0, [pc, #12]	; (8002550 <TIM6_DAC_IRQHandler+0x18>)
 8002544:	f007 ff11 	bl	800a36a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}
 800254c:	200002b0 	.word	0x200002b0
 8002550:	200004d0 	.word	0x200004d0

08002554 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002558:	4802      	ldr	r0, [pc, #8]	; (8002564 <TIM7_IRQHandler+0x10>)
 800255a:	f007 ff06 	bl	800a36a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000518 	.word	0x20000518

08002568 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
	return 1;
 800256c:	2301      	movs	r3, #1
}
 800256e:	4618      	mov	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <_kill>:

int _kill(int pid, int sig)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002582:	f00d f82f 	bl	800f5e4 <__errno>
 8002586:	4603      	mov	r3, r0
 8002588:	2216      	movs	r2, #22
 800258a:	601a      	str	r2, [r3, #0]
	return -1;
 800258c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002590:	4618      	mov	r0, r3
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <_exit>:

void _exit (int status)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025a0:	f04f 31ff 	mov.w	r1, #4294967295
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff ffe7 	bl	8002578 <_kill>
	while (1) {}		/* Make sure we hang here */
 80025aa:	e7fe      	b.n	80025aa <_exit+0x12>

080025ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	e00a      	b.n	80025d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025be:	f3af 8000 	nop.w
 80025c2:	4601      	mov	r1, r0
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	60ba      	str	r2, [r7, #8]
 80025ca:	b2ca      	uxtb	r2, r1
 80025cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	3301      	adds	r3, #1
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	429a      	cmp	r2, r3
 80025da:	dbf0      	blt.n	80025be <_read+0x12>
	}

return len;
 80025dc:	687b      	ldr	r3, [r7, #4]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b086      	sub	sp, #24
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	e009      	b.n	800260c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	60ba      	str	r2, [r7, #8]
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fa25 	bl	8001a50 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	3301      	adds	r3, #1
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	429a      	cmp	r2, r3
 8002612:	dbf1      	blt.n	80025f8 <_write+0x12>
	}
	return len;
 8002614:	687b      	ldr	r3, [r7, #4]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <_close>:

int _close(int file)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
	return -1;
 8002626:	f04f 33ff 	mov.w	r3, #4294967295
}
 800262a:	4618      	mov	r0, r3
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002646:	605a      	str	r2, [r3, #4]
	return 0;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <_isatty>:

int _isatty(int file)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
	return 1;
 800265e:	2301      	movs	r3, #1
}
 8002660:	4618      	mov	r0, r3
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
	return 0;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
	...

08002688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002690:	4a14      	ldr	r2, [pc, #80]	; (80026e4 <_sbrk+0x5c>)
 8002692:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <_sbrk+0x60>)
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800269c:	4b13      	ldr	r3, [pc, #76]	; (80026ec <_sbrk+0x64>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d102      	bne.n	80026aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026a4:	4b11      	ldr	r3, [pc, #68]	; (80026ec <_sbrk+0x64>)
 80026a6:	4a12      	ldr	r2, [pc, #72]	; (80026f0 <_sbrk+0x68>)
 80026a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026aa:	4b10      	ldr	r3, [pc, #64]	; (80026ec <_sbrk+0x64>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4413      	add	r3, r2
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d207      	bcs.n	80026c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026b8:	f00c ff94 	bl	800f5e4 <__errno>
 80026bc:	4603      	mov	r3, r0
 80026be:	220c      	movs	r2, #12
 80026c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026c2:	f04f 33ff 	mov.w	r3, #4294967295
 80026c6:	e009      	b.n	80026dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026c8:	4b08      	ldr	r3, [pc, #32]	; (80026ec <_sbrk+0x64>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ce:	4b07      	ldr	r3, [pc, #28]	; (80026ec <_sbrk+0x64>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	4a05      	ldr	r2, [pc, #20]	; (80026ec <_sbrk+0x64>)
 80026d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026da:	68fb      	ldr	r3, [r7, #12]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20020000 	.word	0x20020000
 80026e8:	00000400 	.word	0x00000400
 80026ec:	200003f4 	.word	0x200003f4
 80026f0:	20005830 	.word	0x20005830

080026f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <SystemInit+0x20>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fe:	4a05      	ldr	r2, [pc, #20]	; (8002714 <SystemInit+0x20>)
 8002700:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002704:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <MX_TIM2_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08c      	sub	sp, #48	; 0x30
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800271e:	f107 030c 	add.w	r3, r7, #12
 8002722:	2224      	movs	r2, #36	; 0x24
 8002724:	2100      	movs	r1, #0
 8002726:	4618      	mov	r0, r3
 8002728:	f00c feb4 	bl	800f494 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800272c:	1d3b      	adds	r3, r7, #4
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002734:	4b21      	ldr	r3, [pc, #132]	; (80027bc <MX_TIM2_Init+0xa4>)
 8002736:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800273a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 800273c:	4b1f      	ldr	r3, [pc, #124]	; (80027bc <MX_TIM2_Init+0xa4>)
 800273e:	2203      	movs	r2, #3
 8002740:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002742:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <MX_TIM2_Init+0xa4>)
 8002744:	2200      	movs	r2, #0
 8002746:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002748:	4b1c      	ldr	r3, [pc, #112]	; (80027bc <MX_TIM2_Init+0xa4>)
 800274a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800274e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002750:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <MX_TIM2_Init+0xa4>)
 8002752:	2200      	movs	r2, #0
 8002754:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002756:	4b19      	ldr	r3, [pc, #100]	; (80027bc <MX_TIM2_Init+0xa4>)
 8002758:	2200      	movs	r2, #0
 800275a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800275c:	2301      	movs	r3, #1
 800275e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002760:	2300      	movs	r3, #0
 8002762:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002764:	2301      	movs	r3, #1
 8002766:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002768:	2300      	movs	r3, #0
 800276a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002770:	2300      	movs	r3, #0
 8002772:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002774:	2301      	movs	r3, #1
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002778:	2300      	movs	r3, #0
 800277a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002780:	f107 030c 	add.w	r3, r7, #12
 8002784:	4619      	mov	r1, r3
 8002786:	480d      	ldr	r0, [pc, #52]	; (80027bc <MX_TIM2_Init+0xa4>)
 8002788:	f007 fd49 	bl	800a21e <HAL_TIM_Encoder_Init>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002792:	f7ff fd4f 	bl	8002234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002796:	2300      	movs	r3, #0
 8002798:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800279a:	2300      	movs	r3, #0
 800279c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800279e:	1d3b      	adds	r3, r7, #4
 80027a0:	4619      	mov	r1, r3
 80027a2:	4806      	ldr	r0, [pc, #24]	; (80027bc <MX_TIM2_Init+0xa4>)
 80027a4:	f008 f912 	bl	800a9cc <HAL_TIMEx_MasterConfigSynchronization>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80027ae:	f7ff fd41 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80027b2:	bf00      	nop
 80027b4:	3730      	adds	r7, #48	; 0x30
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	200003f8 	.word	0x200003f8

080027c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08c      	sub	sp, #48	; 0x30
 80027c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80027c6:	f107 030c 	add.w	r3, r7, #12
 80027ca:	2224      	movs	r2, #36	; 0x24
 80027cc:	2100      	movs	r1, #0
 80027ce:	4618      	mov	r0, r3
 80027d0:	f00c fe60 	bl	800f494 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027d4:	1d3b      	adds	r3, r7, #4
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027dc:	4b20      	ldr	r3, [pc, #128]	; (8002860 <MX_TIM3_Init+0xa0>)
 80027de:	4a21      	ldr	r2, [pc, #132]	; (8002864 <MX_TIM3_Init+0xa4>)
 80027e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 80027e2:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <MX_TIM3_Init+0xa0>)
 80027e4:	2203      	movs	r2, #3
 80027e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <MX_TIM3_Init+0xa0>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80027ee:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <MX_TIM3_Init+0xa0>)
 80027f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027f6:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <MX_TIM3_Init+0xa0>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027fc:	4b18      	ldr	r3, [pc, #96]	; (8002860 <MX_TIM3_Init+0xa0>)
 80027fe:	2200      	movs	r2, #0
 8002800:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002802:	2303      	movs	r3, #3
 8002804:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002806:	2300      	movs	r3, #0
 8002808:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800280a:	2301      	movs	r3, #1
 800280c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800280e:	2300      	movs	r3, #0
 8002810:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002812:	230f      	movs	r3, #15
 8002814:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002816:	2300      	movs	r3, #0
 8002818:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800281a:	2301      	movs	r3, #1
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800281e:	2300      	movs	r3, #0
 8002820:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002822:	230f      	movs	r3, #15
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002826:	f107 030c 	add.w	r3, r7, #12
 800282a:	4619      	mov	r1, r3
 800282c:	480c      	ldr	r0, [pc, #48]	; (8002860 <MX_TIM3_Init+0xa0>)
 800282e:	f007 fcf6 	bl	800a21e <HAL_TIM_Encoder_Init>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002838:	f7ff fcfc 	bl	8002234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800283c:	2300      	movs	r3, #0
 800283e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002840:	2300      	movs	r3, #0
 8002842:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002844:	1d3b      	adds	r3, r7, #4
 8002846:	4619      	mov	r1, r3
 8002848:	4805      	ldr	r0, [pc, #20]	; (8002860 <MX_TIM3_Init+0xa0>)
 800284a:	f008 f8bf 	bl	800a9cc <HAL_TIMEx_MasterConfigSynchronization>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002854:	f7ff fcee 	bl	8002234 <Error_Handler>
#ifdef JiaYangZhen_EncoderMode
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
#endif
  /* USER CODE END TIM3_Init 2 */

}
 8002858:	bf00      	nop
 800285a:	3730      	adds	r7, #48	; 0x30
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20000440 	.word	0x20000440
 8002864:	40000400 	.word	0x40000400

08002868 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08c      	sub	sp, #48	; 0x30
 800286c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800286e:	f107 030c 	add.w	r3, r7, #12
 8002872:	2224      	movs	r2, #36	; 0x24
 8002874:	2100      	movs	r1, #0
 8002876:	4618      	mov	r0, r3
 8002878:	f00c fe0c 	bl	800f494 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800287c:	1d3b      	adds	r3, r7, #4
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002884:	4b20      	ldr	r3, [pc, #128]	; (8002908 <MX_TIM4_Init+0xa0>)
 8002886:	4a21      	ldr	r2, [pc, #132]	; (800290c <MX_TIM4_Init+0xa4>)
 8002888:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 800288a:	4b1f      	ldr	r3, [pc, #124]	; (8002908 <MX_TIM4_Init+0xa0>)
 800288c:	2203      	movs	r2, #3
 800288e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002890:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <MX_TIM4_Init+0xa0>)
 8002892:	2200      	movs	r2, #0
 8002894:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002896:	4b1c      	ldr	r3, [pc, #112]	; (8002908 <MX_TIM4_Init+0xa0>)
 8002898:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800289c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800289e:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <MX_TIM4_Init+0xa0>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028a4:	4b18      	ldr	r3, [pc, #96]	; (8002908 <MX_TIM4_Init+0xa0>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80028aa:	2303      	movs	r3, #3
 80028ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80028b2:	2301      	movs	r3, #1
 80028b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80028ba:	230f      	movs	r3, #15
 80028bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80028be:	2300      	movs	r3, #0
 80028c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80028c2:	2301      	movs	r3, #1
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80028c6:	2300      	movs	r3, #0
 80028c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80028ca:	230f      	movs	r3, #15
 80028cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80028ce:	f107 030c 	add.w	r3, r7, #12
 80028d2:	4619      	mov	r1, r3
 80028d4:	480c      	ldr	r0, [pc, #48]	; (8002908 <MX_TIM4_Init+0xa0>)
 80028d6:	f007 fca2 	bl	800a21e <HAL_TIM_Encoder_Init>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80028e0:	f7ff fca8 	bl	8002234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028e4:	2300      	movs	r3, #0
 80028e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80028ec:	1d3b      	adds	r3, r7, #4
 80028ee:	4619      	mov	r1, r3
 80028f0:	4805      	ldr	r0, [pc, #20]	; (8002908 <MX_TIM4_Init+0xa0>)
 80028f2:	f008 f86b 	bl	800a9cc <HAL_TIMEx_MasterConfigSynchronization>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80028fc:	f7ff fc9a 	bl	8002234 <Error_Handler>
#ifdef JiaYangZhen_EncoderMode
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
#endif
  /* USER CODE END TIM4_Init 2 */

}
 8002900:	bf00      	nop
 8002902:	3730      	adds	r7, #48	; 0x30
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	20000488 	.word	0x20000488
 800290c:	40000800 	.word	0x40000800

08002910 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002916:	463b      	mov	r3, r7
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800291e:	4b14      	ldr	r3, [pc, #80]	; (8002970 <MX_TIM6_Init+0x60>)
 8002920:	4a14      	ldr	r2, [pc, #80]	; (8002974 <MX_TIM6_Init+0x64>)
 8002922:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 8002924:	4b12      	ldr	r3, [pc, #72]	; (8002970 <MX_TIM6_Init+0x60>)
 8002926:	224f      	movs	r2, #79	; 0x4f
 8002928:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800292a:	4b11      	ldr	r3, [pc, #68]	; (8002970 <MX_TIM6_Init+0x60>)
 800292c:	2200      	movs	r2, #0
 800292e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8002930:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <MX_TIM6_Init+0x60>)
 8002932:	2209      	movs	r2, #9
 8002934:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002936:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <MX_TIM6_Init+0x60>)
 8002938:	2200      	movs	r2, #0
 800293a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800293c:	480c      	ldr	r0, [pc, #48]	; (8002970 <MX_TIM6_Init+0x60>)
 800293e:	f007 fb7f 	bl	800a040 <HAL_TIM_Base_Init>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8002948:	f7ff fc74 	bl	8002234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800294c:	2300      	movs	r3, #0
 800294e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002950:	2300      	movs	r3, #0
 8002952:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002954:	463b      	mov	r3, r7
 8002956:	4619      	mov	r1, r3
 8002958:	4805      	ldr	r0, [pc, #20]	; (8002970 <MX_TIM6_Init+0x60>)
 800295a:	f008 f837 	bl	800a9cc <HAL_TIMEx_MasterConfigSynchronization>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8002964:	f7ff fc66 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002968:	bf00      	nop
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	200004d0 	.word	0x200004d0
 8002974:	40001000 	.word	0x40001000

08002978 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800297e:	463b      	mov	r3, r7
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002986:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <MX_TIM7_Init+0x60>)
 8002988:	4a14      	ldr	r2, [pc, #80]	; (80029dc <MX_TIM7_Init+0x64>)
 800298a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 79;
 800298c:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <MX_TIM7_Init+0x60>)
 800298e:	224f      	movs	r2, #79	; 0x4f
 8002990:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002992:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <MX_TIM7_Init+0x60>)
 8002994:	2200      	movs	r2, #0
 8002996:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8002998:	4b0f      	ldr	r3, [pc, #60]	; (80029d8 <MX_TIM7_Init+0x60>)
 800299a:	2209      	movs	r2, #9
 800299c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800299e:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <MX_TIM7_Init+0x60>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80029a4:	480c      	ldr	r0, [pc, #48]	; (80029d8 <MX_TIM7_Init+0x60>)
 80029a6:	f007 fb4b 	bl	800a040 <HAL_TIM_Base_Init>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80029b0:	f7ff fc40 	bl	8002234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029b4:	2300      	movs	r3, #0
 80029b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029b8:	2300      	movs	r3, #0
 80029ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80029bc:	463b      	mov	r3, r7
 80029be:	4619      	mov	r1, r3
 80029c0:	4805      	ldr	r0, [pc, #20]	; (80029d8 <MX_TIM7_Init+0x60>)
 80029c2:	f008 f803 	bl	800a9cc <HAL_TIMEx_MasterConfigSynchronization>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80029cc:	f7ff fc32 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80029d0:	bf00      	nop
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20000518 	.word	0x20000518
 80029dc:	40001400 	.word	0x40001400

080029e0 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029e6:	463b      	mov	r3, r7
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80029f2:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <MX_TIM9_Init+0x68>)
 80029f4:	4a15      	ldr	r2, [pc, #84]	; (8002a4c <MX_TIM9_Init+0x6c>)
 80029f6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 79;
 80029f8:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <MX_TIM9_Init+0x68>)
 80029fa:	224f      	movs	r2, #79	; 0x4f
 80029fc:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029fe:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <MX_TIM9_Init+0x68>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 99;
 8002a04:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <MX_TIM9_Init+0x68>)
 8002a06:	2263      	movs	r2, #99	; 0x63
 8002a08:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a0a:	4b0f      	ldr	r3, [pc, #60]	; (8002a48 <MX_TIM9_Init+0x68>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a10:	4b0d      	ldr	r3, [pc, #52]	; (8002a48 <MX_TIM9_Init+0x68>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002a16:	480c      	ldr	r0, [pc, #48]	; (8002a48 <MX_TIM9_Init+0x68>)
 8002a18:	f007 fb12 	bl	800a040 <HAL_TIM_Base_Init>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <MX_TIM9_Init+0x46>
  {
    Error_Handler();
 8002a22:	f7ff fc07 	bl	8002234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a2a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002a2c:	463b      	mov	r3, r7
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4805      	ldr	r0, [pc, #20]	; (8002a48 <MX_TIM9_Init+0x68>)
 8002a32:	f007 fda2 	bl	800a57a <HAL_TIM_ConfigClockSource>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_TIM9_Init+0x60>
  {
    Error_Handler();
 8002a3c:	f7ff fbfa 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	20000560 	.word	0x20000560
 8002a4c:	40014000 	.word	0x40014000

08002a50 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002a54:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <MX_TIM10_Init+0x3c>)
 8002a56:	4a0e      	ldr	r2, [pc, #56]	; (8002a90 <MX_TIM10_Init+0x40>)
 8002a58:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 79;
 8002a5a:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <MX_TIM10_Init+0x3c>)
 8002a5c:	224f      	movs	r2, #79	; 0x4f
 8002a5e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a60:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <MX_TIM10_Init+0x3c>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9;
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <MX_TIM10_Init+0x3c>)
 8002a68:	2209      	movs	r2, #9
 8002a6a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a6c:	4b07      	ldr	r3, [pc, #28]	; (8002a8c <MX_TIM10_Init+0x3c>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <MX_TIM10_Init+0x3c>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002a78:	4804      	ldr	r0, [pc, #16]	; (8002a8c <MX_TIM10_Init+0x3c>)
 8002a7a:	f007 fae1 	bl	800a040 <HAL_TIM_Base_Init>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 8002a84:	f7ff fbd6 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002a88:	bf00      	nop
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	200005a8 	.word	0x200005a8
 8002a90:	40014400 	.word	0x40014400

08002a94 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002a98:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <MX_TIM11_Init+0x3c>)
 8002a9a:	4a0e      	ldr	r2, [pc, #56]	; (8002ad4 <MX_TIM11_Init+0x40>)
 8002a9c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 79;
 8002a9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <MX_TIM11_Init+0x3c>)
 8002aa0:	224f      	movs	r2, #79	; 0x4f
 8002aa2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa4:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <MX_TIM11_Init+0x3c>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9;
 8002aaa:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <MX_TIM11_Init+0x3c>)
 8002aac:	2209      	movs	r2, #9
 8002aae:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ab0:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <MX_TIM11_Init+0x3c>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ab6:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <MX_TIM11_Init+0x3c>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002abc:	4804      	ldr	r0, [pc, #16]	; (8002ad0 <MX_TIM11_Init+0x3c>)
 8002abe:	f007 fabf 	bl	800a040 <HAL_TIM_Base_Init>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 8002ac8:	f7ff fbb4 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002acc:	bf00      	nop
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	200005f0 	.word	0x200005f0
 8002ad4:	40014800 	.word	0x40014800

08002ad8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ade:	463b      	mov	r3, r7
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002aea:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <MX_TIM12_Init+0x68>)
 8002aec:	4a15      	ldr	r2, [pc, #84]	; (8002b44 <MX_TIM12_Init+0x6c>)
 8002aee:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 79;
 8002af0:	4b13      	ldr	r3, [pc, #76]	; (8002b40 <MX_TIM12_Init+0x68>)
 8002af2:	224f      	movs	r2, #79	; 0x4f
 8002af4:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002af6:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <MX_TIM12_Init+0x68>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 9;
 8002afc:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <MX_TIM12_Init+0x68>)
 8002afe:	2209      	movs	r2, #9
 8002b00:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b02:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <MX_TIM12_Init+0x68>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b08:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <MX_TIM12_Init+0x68>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002b0e:	480c      	ldr	r0, [pc, #48]	; (8002b40 <MX_TIM12_Init+0x68>)
 8002b10:	f007 fa96 	bl	800a040 <HAL_TIM_Base_Init>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <MX_TIM12_Init+0x46>
  {
    Error_Handler();
 8002b1a:	f7ff fb8b 	bl	8002234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b22:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002b24:	463b      	mov	r3, r7
 8002b26:	4619      	mov	r1, r3
 8002b28:	4805      	ldr	r0, [pc, #20]	; (8002b40 <MX_TIM12_Init+0x68>)
 8002b2a:	f007 fd26 	bl	800a57a <HAL_TIM_ConfigClockSource>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <MX_TIM12_Init+0x60>
  {
    Error_Handler();
 8002b34:	f7ff fb7e 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8002b38:	bf00      	nop
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	20000638 	.word	0x20000638
 8002b44:	40001800 	.word	0x40001800

08002b48 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002b4c:	4b0d      	ldr	r3, [pc, #52]	; (8002b84 <MX_TIM13_Init+0x3c>)
 8002b4e:	4a0e      	ldr	r2, [pc, #56]	; (8002b88 <MX_TIM13_Init+0x40>)
 8002b50:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 79;
 8002b52:	4b0c      	ldr	r3, [pc, #48]	; (8002b84 <MX_TIM13_Init+0x3c>)
 8002b54:	224f      	movs	r2, #79	; 0x4f
 8002b56:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b58:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <MX_TIM13_Init+0x3c>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9;
 8002b5e:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <MX_TIM13_Init+0x3c>)
 8002b60:	2209      	movs	r2, #9
 8002b62:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b64:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <MX_TIM13_Init+0x3c>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b6a:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <MX_TIM13_Init+0x3c>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002b70:	4804      	ldr	r0, [pc, #16]	; (8002b84 <MX_TIM13_Init+0x3c>)
 8002b72:	f007 fa65 	bl	800a040 <HAL_TIM_Base_Init>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <MX_TIM13_Init+0x38>
  {
    Error_Handler();
 8002b7c:	f7ff fb5a 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002b80:	bf00      	nop
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20000680 	.word	0x20000680
 8002b88:	40001c00 	.word	0x40001c00

08002b8c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002b90:	4b0d      	ldr	r3, [pc, #52]	; (8002bc8 <MX_TIM14_Init+0x3c>)
 8002b92:	4a0e      	ldr	r2, [pc, #56]	; (8002bcc <MX_TIM14_Init+0x40>)
 8002b94:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 79;
 8002b96:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <MX_TIM14_Init+0x3c>)
 8002b98:	224f      	movs	r2, #79	; 0x4f
 8002b9a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b9c:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <MX_TIM14_Init+0x3c>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9;
 8002ba2:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <MX_TIM14_Init+0x3c>)
 8002ba4:	2209      	movs	r2, #9
 8002ba6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ba8:	4b07      	ldr	r3, [pc, #28]	; (8002bc8 <MX_TIM14_Init+0x3c>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bae:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <MX_TIM14_Init+0x3c>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002bb4:	4804      	ldr	r0, [pc, #16]	; (8002bc8 <MX_TIM14_Init+0x3c>)
 8002bb6:	f007 fa43 	bl	800a040 <HAL_TIM_Base_Init>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8002bc0:	f7ff fb38 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002bc4:	bf00      	nop
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	200006c8 	.word	0x200006c8
 8002bcc:	40002000 	.word	0x40002000

08002bd0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08e      	sub	sp, #56	; 0x38
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	60da      	str	r2, [r3, #12]
 8002be6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf0:	d12c      	bne.n	8002c4c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	623b      	str	r3, [r7, #32]
 8002bf6:	4b51      	ldr	r3, [pc, #324]	; (8002d3c <HAL_TIM_Encoder_MspInit+0x16c>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	4a50      	ldr	r2, [pc, #320]	; (8002d3c <HAL_TIM_Encoder_MspInit+0x16c>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	6413      	str	r3, [r2, #64]	; 0x40
 8002c02:	4b4e      	ldr	r3, [pc, #312]	; (8002d3c <HAL_TIM_Encoder_MspInit+0x16c>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	623b      	str	r3, [r7, #32]
 8002c0c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61fb      	str	r3, [r7, #28]
 8002c12:	4b4a      	ldr	r3, [pc, #296]	; (8002d3c <HAL_TIM_Encoder_MspInit+0x16c>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	4a49      	ldr	r2, [pc, #292]	; (8002d3c <HAL_TIM_Encoder_MspInit+0x16c>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1e:	4b47      	ldr	r3, [pc, #284]	; (8002d3c <HAL_TIM_Encoder_MspInit+0x16c>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	61fb      	str	r3, [r7, #28]
 8002c28:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Encoder4_B_Pin|Encoder4_A_Pin;
 8002c2a:	2322      	movs	r3, #34	; 0x22
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c36:	2300      	movs	r3, #0
 8002c38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c42:	4619      	mov	r1, r3
 8002c44:	483e      	ldr	r0, [pc, #248]	; (8002d40 <HAL_TIM_Encoder_MspInit+0x170>)
 8002c46:	f004 fd39 	bl	80076bc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002c4a:	e073      	b.n	8002d34 <HAL_TIM_Encoder_MspInit+0x164>
  else if(tim_encoderHandle->Instance==TIM3)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a3c      	ldr	r2, [pc, #240]	; (8002d44 <HAL_TIM_Encoder_MspInit+0x174>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d134      	bne.n	8002cc0 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	61bb      	str	r3, [r7, #24]
 8002c5a:	4b38      	ldr	r3, [pc, #224]	; (8002d3c <HAL_TIM_Encoder_MspInit+0x16c>)
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	4a37      	ldr	r2, [pc, #220]	; (8002d3c <HAL_TIM_Encoder_MspInit+0x16c>)
 8002c60:	f043 0302 	orr.w	r3, r3, #2
 8002c64:	6413      	str	r3, [r2, #64]	; 0x40
 8002c66:	4b35      	ldr	r3, [pc, #212]	; (8002d3c <HAL_TIM_Encoder_MspInit+0x16c>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	61bb      	str	r3, [r7, #24]
 8002c70:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	4b31      	ldr	r3, [pc, #196]	; (8002d3c <HAL_TIM_Encoder_MspInit+0x16c>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	4a30      	ldr	r2, [pc, #192]	; (8002d3c <HAL_TIM_Encoder_MspInit+0x16c>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	6313      	str	r3, [r2, #48]	; 0x30
 8002c82:	4b2e      	ldr	r3, [pc, #184]	; (8002d3c <HAL_TIM_Encoder_MspInit+0x16c>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Encoder3_A_Pin|Encoder3_B_Pin;
 8002c8e:	23c0      	movs	r3, #192	; 0xc0
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c92:	2302      	movs	r3, #2
 8002c94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4825      	ldr	r0, [pc, #148]	; (8002d40 <HAL_TIM_Encoder_MspInit+0x170>)
 8002caa:	f004 fd07 	bl	80076bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002cae:	2200      	movs	r2, #0
 8002cb0:	2105      	movs	r1, #5
 8002cb2:	201d      	movs	r0, #29
 8002cb4:	f004 f86e 	bl	8006d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002cb8:	201d      	movs	r0, #29
 8002cba:	f004 f887 	bl	8006dcc <HAL_NVIC_EnableIRQ>
}
 8002cbe:	e039      	b.n	8002d34 <HAL_TIM_Encoder_MspInit+0x164>
  else if(tim_encoderHandle->Instance==TIM4)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a20      	ldr	r2, [pc, #128]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x178>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d134      	bne.n	8002d34 <HAL_TIM_Encoder_MspInit+0x164>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <HAL_TIM_Encoder_MspInit+0x16c>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	4a1a      	ldr	r2, [pc, #104]	; (8002d3c <HAL_TIM_Encoder_MspInit+0x16c>)
 8002cd4:	f043 0304 	orr.w	r3, r3, #4
 8002cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cda:	4b18      	ldr	r3, [pc, #96]	; (8002d3c <HAL_TIM_Encoder_MspInit+0x16c>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	613b      	str	r3, [r7, #16]
 8002ce4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <HAL_TIM_Encoder_MspInit+0x16c>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	4a13      	ldr	r2, [pc, #76]	; (8002d3c <HAL_TIM_Encoder_MspInit+0x16c>)
 8002cf0:	f043 0308 	orr.w	r3, r3, #8
 8002cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf6:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <HAL_TIM_Encoder_MspInit+0x16c>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 8002d02:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d10:	2300      	movs	r3, #0
 8002d12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d14:	2302      	movs	r3, #2
 8002d16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	480b      	ldr	r0, [pc, #44]	; (8002d4c <HAL_TIM_Encoder_MspInit+0x17c>)
 8002d20:	f004 fccc 	bl	80076bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002d24:	2200      	movs	r2, #0
 8002d26:	2105      	movs	r1, #5
 8002d28:	201e      	movs	r0, #30
 8002d2a:	f004 f833 	bl	8006d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d2e:	201e      	movs	r0, #30
 8002d30:	f004 f84c 	bl	8006dcc <HAL_NVIC_EnableIRQ>
}
 8002d34:	bf00      	nop
 8002d36:	3738      	adds	r7, #56	; 0x38
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40020000 	.word	0x40020000
 8002d44:	40000400 	.word	0x40000400
 8002d48:	40000800 	.word	0x40000800
 8002d4c:	40020c00 	.word	0x40020c00

08002d50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08a      	sub	sp, #40	; 0x28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a70      	ldr	r2, [pc, #448]	; (8002f20 <HAL_TIM_Base_MspInit+0x1d0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d116      	bne.n	8002d90 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
 8002d66:	4b6f      	ldr	r3, [pc, #444]	; (8002f24 <HAL_TIM_Base_MspInit+0x1d4>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	4a6e      	ldr	r2, [pc, #440]	; (8002f24 <HAL_TIM_Base_MspInit+0x1d4>)
 8002d6c:	f043 0310 	orr.w	r3, r3, #16
 8002d70:	6413      	str	r3, [r2, #64]	; 0x40
 8002d72:	4b6c      	ldr	r3, [pc, #432]	; (8002f24 <HAL_TIM_Base_MspInit+0x1d4>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 7, 0);
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2107      	movs	r1, #7
 8002d82:	2036      	movs	r0, #54	; 0x36
 8002d84:	f004 f806 	bl	8006d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d88:	2036      	movs	r0, #54	; 0x36
 8002d8a:	f004 f81f 	bl	8006dcc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8002d8e:	e0c2      	b.n	8002f16 <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM7)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a64      	ldr	r2, [pc, #400]	; (8002f28 <HAL_TIM_Base_MspInit+0x1d8>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d116      	bne.n	8002dc8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	623b      	str	r3, [r7, #32]
 8002d9e:	4b61      	ldr	r3, [pc, #388]	; (8002f24 <HAL_TIM_Base_MspInit+0x1d4>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	4a60      	ldr	r2, [pc, #384]	; (8002f24 <HAL_TIM_Base_MspInit+0x1d4>)
 8002da4:	f043 0320 	orr.w	r3, r3, #32
 8002da8:	6413      	str	r3, [r2, #64]	; 0x40
 8002daa:	4b5e      	ldr	r3, [pc, #376]	; (8002f24 <HAL_TIM_Base_MspInit+0x1d4>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f003 0320 	and.w	r3, r3, #32
 8002db2:	623b      	str	r3, [r7, #32]
 8002db4:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM7_IRQn, 6, 0);
 8002db6:	2200      	movs	r2, #0
 8002db8:	2106      	movs	r1, #6
 8002dba:	2037      	movs	r0, #55	; 0x37
 8002dbc:	f003 ffea 	bl	8006d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002dc0:	2037      	movs	r0, #55	; 0x37
 8002dc2:	f004 f803 	bl	8006dcc <HAL_NVIC_EnableIRQ>
}
 8002dc6:	e0a6      	b.n	8002f16 <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM9)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a57      	ldr	r2, [pc, #348]	; (8002f2c <HAL_TIM_Base_MspInit+0x1dc>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d116      	bne.n	8002e00 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
 8002dd6:	4b53      	ldr	r3, [pc, #332]	; (8002f24 <HAL_TIM_Base_MspInit+0x1d4>)
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dda:	4a52      	ldr	r2, [pc, #328]	; (8002f24 <HAL_TIM_Base_MspInit+0x1d4>)
 8002ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de0:	6453      	str	r3, [r2, #68]	; 0x44
 8002de2:	4b50      	ldr	r3, [pc, #320]	; (8002f24 <HAL_TIM_Base_MspInit+0x1d4>)
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dea:	61fb      	str	r3, [r7, #28]
 8002dec:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8002dee:	2200      	movs	r2, #0
 8002df0:	2105      	movs	r1, #5
 8002df2:	2018      	movs	r0, #24
 8002df4:	f003 ffce 	bl	8006d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002df8:	2018      	movs	r0, #24
 8002dfa:	f003 ffe7 	bl	8006dcc <HAL_NVIC_EnableIRQ>
}
 8002dfe:	e08a      	b.n	8002f16 <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM10)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a4a      	ldr	r2, [pc, #296]	; (8002f30 <HAL_TIM_Base_MspInit+0x1e0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d116      	bne.n	8002e38 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61bb      	str	r3, [r7, #24]
 8002e0e:	4b45      	ldr	r3, [pc, #276]	; (8002f24 <HAL_TIM_Base_MspInit+0x1d4>)
 8002e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e12:	4a44      	ldr	r2, [pc, #272]	; (8002f24 <HAL_TIM_Base_MspInit+0x1d4>)
 8002e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e18:	6453      	str	r3, [r2, #68]	; 0x44
 8002e1a:	4b42      	ldr	r3, [pc, #264]	; (8002f24 <HAL_TIM_Base_MspInit+0x1d4>)
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e22:	61bb      	str	r3, [r7, #24]
 8002e24:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002e26:	2200      	movs	r2, #0
 8002e28:	2105      	movs	r1, #5
 8002e2a:	2019      	movs	r0, #25
 8002e2c:	f003 ffb2 	bl	8006d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002e30:	2019      	movs	r0, #25
 8002e32:	f003 ffcb 	bl	8006dcc <HAL_NVIC_EnableIRQ>
}
 8002e36:	e06e      	b.n	8002f16 <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM11)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a3d      	ldr	r2, [pc, #244]	; (8002f34 <HAL_TIM_Base_MspInit+0x1e4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d116      	bne.n	8002e70 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	4b37      	ldr	r3, [pc, #220]	; (8002f24 <HAL_TIM_Base_MspInit+0x1d4>)
 8002e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4a:	4a36      	ldr	r2, [pc, #216]	; (8002f24 <HAL_TIM_Base_MspInit+0x1d4>)
 8002e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e50:	6453      	str	r3, [r2, #68]	; 0x44
 8002e52:	4b34      	ldr	r3, [pc, #208]	; (8002f24 <HAL_TIM_Base_MspInit+0x1d4>)
 8002e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2105      	movs	r1, #5
 8002e62:	201a      	movs	r0, #26
 8002e64:	f003 ff96 	bl	8006d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002e68:	201a      	movs	r0, #26
 8002e6a:	f003 ffaf 	bl	8006dcc <HAL_NVIC_EnableIRQ>
}
 8002e6e:	e052      	b.n	8002f16 <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM12)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a30      	ldr	r2, [pc, #192]	; (8002f38 <HAL_TIM_Base_MspInit+0x1e8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d116      	bne.n	8002ea8 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	4b29      	ldr	r3, [pc, #164]	; (8002f24 <HAL_TIM_Base_MspInit+0x1d4>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	4a28      	ldr	r2, [pc, #160]	; (8002f24 <HAL_TIM_Base_MspInit+0x1d4>)
 8002e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e88:	6413      	str	r3, [r2, #64]	; 0x40
 8002e8a:	4b26      	ldr	r3, [pc, #152]	; (8002f24 <HAL_TIM_Base_MspInit+0x1d4>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e92:	613b      	str	r3, [r7, #16]
 8002e94:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8002e96:	2200      	movs	r2, #0
 8002e98:	2105      	movs	r1, #5
 8002e9a:	202b      	movs	r0, #43	; 0x2b
 8002e9c:	f003 ff7a 	bl	8006d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002ea0:	202b      	movs	r0, #43	; 0x2b
 8002ea2:	f003 ff93 	bl	8006dcc <HAL_NVIC_EnableIRQ>
}
 8002ea6:	e036      	b.n	8002f16 <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM13)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a23      	ldr	r2, [pc, #140]	; (8002f3c <HAL_TIM_Base_MspInit+0x1ec>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d116      	bne.n	8002ee0 <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	4b1b      	ldr	r3, [pc, #108]	; (8002f24 <HAL_TIM_Base_MspInit+0x1d4>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	4a1a      	ldr	r2, [pc, #104]	; (8002f24 <HAL_TIM_Base_MspInit+0x1d4>)
 8002ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec2:	4b18      	ldr	r3, [pc, #96]	; (8002f24 <HAL_TIM_Base_MspInit+0x1d4>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2105      	movs	r1, #5
 8002ed2:	202c      	movs	r0, #44	; 0x2c
 8002ed4:	f003 ff5e 	bl	8006d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002ed8:	202c      	movs	r0, #44	; 0x2c
 8002eda:	f003 ff77 	bl	8006dcc <HAL_NVIC_EnableIRQ>
}
 8002ede:	e01a      	b.n	8002f16 <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM14)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a16      	ldr	r2, [pc, #88]	; (8002f40 <HAL_TIM_Base_MspInit+0x1f0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d115      	bne.n	8002f16 <HAL_TIM_Base_MspInit+0x1c6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002eea:	2300      	movs	r3, #0
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <HAL_TIM_Base_MspInit+0x1d4>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	4a0c      	ldr	r2, [pc, #48]	; (8002f24 <HAL_TIM_Base_MspInit+0x1d4>)
 8002ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8002efa:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <HAL_TIM_Base_MspInit+0x1d4>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f02:	60bb      	str	r3, [r7, #8]
 8002f04:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8002f06:	2200      	movs	r2, #0
 8002f08:	2105      	movs	r1, #5
 8002f0a:	202d      	movs	r0, #45	; 0x2d
 8002f0c:	f003 ff42 	bl	8006d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002f10:	202d      	movs	r0, #45	; 0x2d
 8002f12:	f003 ff5b 	bl	8006dcc <HAL_NVIC_EnableIRQ>
}
 8002f16:	bf00      	nop
 8002f18:	3728      	adds	r7, #40	; 0x28
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40001000 	.word	0x40001000
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40001400 	.word	0x40001400
 8002f2c:	40014000 	.word	0x40014000
 8002f30:	40014400 	.word	0x40014400
 8002f34:	40014800 	.word	0x40014800
 8002f38:	40001800 	.word	0x40001800
 8002f3c:	40001c00 	.word	0x40001c00
 8002f40:	40002000 	.word	0x40002000

08002f44 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002f48:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <MX_UART4_Init+0x4c>)
 8002f4a:	4a12      	ldr	r2, [pc, #72]	; (8002f94 <MX_UART4_Init+0x50>)
 8002f4c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002f4e:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <MX_UART4_Init+0x4c>)
 8002f50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f54:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002f56:	4b0e      	ldr	r3, [pc, #56]	; (8002f90 <MX_UART4_Init+0x4c>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002f5c:	4b0c      	ldr	r3, [pc, #48]	; (8002f90 <MX_UART4_Init+0x4c>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002f62:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <MX_UART4_Init+0x4c>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002f68:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <MX_UART4_Init+0x4c>)
 8002f6a:	220c      	movs	r2, #12
 8002f6c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f6e:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <MX_UART4_Init+0x4c>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <MX_UART4_Init+0x4c>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002f7a:	4805      	ldr	r0, [pc, #20]	; (8002f90 <MX_UART4_Init+0x4c>)
 8002f7c:	f007 fdb6 	bl	800aaec <HAL_UART_Init>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002f86:	f7ff f955 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002f8a:	bf00      	nop
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	2000077c 	.word	0x2000077c
 8002f94:	40004c00 	.word	0x40004c00

08002f98 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */
#ifndef DushuModule
  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002f9c:	4b13      	ldr	r3, [pc, #76]	; (8002fec <MX_UART5_Init+0x54>)
 8002f9e:	4a14      	ldr	r2, [pc, #80]	; (8002ff0 <MX_UART5_Init+0x58>)
 8002fa0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002fa2:	4b12      	ldr	r3, [pc, #72]	; (8002fec <MX_UART5_Init+0x54>)
 8002fa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fa8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002faa:	4b10      	ldr	r3, [pc, #64]	; (8002fec <MX_UART5_Init+0x54>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002fb0:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <MX_UART5_Init+0x54>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002fb6:	4b0d      	ldr	r3, [pc, #52]	; (8002fec <MX_UART5_Init+0x54>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <MX_UART5_Init+0x54>)
 8002fbe:	220c      	movs	r2, #12
 8002fc0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fc2:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <MX_UART5_Init+0x54>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fc8:	4b08      	ldr	r3, [pc, #32]	; (8002fec <MX_UART5_Init+0x54>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002fce:	4807      	ldr	r0, [pc, #28]	; (8002fec <MX_UART5_Init+0x54>)
 8002fd0:	f007 fd8c 	bl	800aaec <HAL_UART_Init>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002fda:	f7ff f92b 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
  HAL_UART_Receive_IT(&huart5, (uint8_t *)aRxBuffer, 1);
 8002fde:	2201      	movs	r2, #1
 8002fe0:	4904      	ldr	r1, [pc, #16]	; (8002ff4 <MX_UART5_Init+0x5c>)
 8002fe2:	4802      	ldr	r0, [pc, #8]	; (8002fec <MX_UART5_Init+0x54>)
 8002fe4:	f007 fea6 	bl	800ad34 <HAL_UART_Receive_IT>
  }
  HAL_UART_Receive_IT(&huart5, (uint8_t *)aRxBuffer, 1);	//接收中断：标志位UART_IT_RXNE，并且设置接收缓冲以及接收缓冲接收最大数据量
#endif
  /* USER CODE END UART5_Init 2 */

}
 8002fe8:	bf00      	nop
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	200007c0 	.word	0x200007c0
 8002ff0:	40005000 	.word	0x40005000
 8002ff4:	20000710 	.word	0x20000710

08002ff8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ffc:	4b11      	ldr	r3, [pc, #68]	; (8003044 <MX_USART1_UART_Init+0x4c>)
 8002ffe:	4a12      	ldr	r2, [pc, #72]	; (8003048 <MX_USART1_UART_Init+0x50>)
 8003000:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003002:	4b10      	ldr	r3, [pc, #64]	; (8003044 <MX_USART1_UART_Init+0x4c>)
 8003004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003008:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800300a:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <MX_USART1_UART_Init+0x4c>)
 800300c:	2200      	movs	r2, #0
 800300e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003010:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <MX_USART1_UART_Init+0x4c>)
 8003012:	2200      	movs	r2, #0
 8003014:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003016:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <MX_USART1_UART_Init+0x4c>)
 8003018:	2200      	movs	r2, #0
 800301a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800301c:	4b09      	ldr	r3, [pc, #36]	; (8003044 <MX_USART1_UART_Init+0x4c>)
 800301e:	220c      	movs	r2, #12
 8003020:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003022:	4b08      	ldr	r3, [pc, #32]	; (8003044 <MX_USART1_UART_Init+0x4c>)
 8003024:	2200      	movs	r2, #0
 8003026:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <MX_USART1_UART_Init+0x4c>)
 800302a:	2200      	movs	r2, #0
 800302c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800302e:	4805      	ldr	r0, [pc, #20]	; (8003044 <MX_USART1_UART_Init+0x4c>)
 8003030:	f007 fd5c 	bl	800aaec <HAL_UART_Init>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800303a:	f7ff f8fb 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800303e:	bf00      	nop
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	20000804 	.word	0x20000804
 8003048:	40011000 	.word	0x40011000

0800304c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003050:	4b11      	ldr	r3, [pc, #68]	; (8003098 <MX_USART3_UART_Init+0x4c>)
 8003052:	4a12      	ldr	r2, [pc, #72]	; (800309c <MX_USART3_UART_Init+0x50>)
 8003054:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003056:	4b10      	ldr	r3, [pc, #64]	; (8003098 <MX_USART3_UART_Init+0x4c>)
 8003058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800305c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800305e:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <MX_USART3_UART_Init+0x4c>)
 8003060:	2200      	movs	r2, #0
 8003062:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003064:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <MX_USART3_UART_Init+0x4c>)
 8003066:	2200      	movs	r2, #0
 8003068:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800306a:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <MX_USART3_UART_Init+0x4c>)
 800306c:	2200      	movs	r2, #0
 800306e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003070:	4b09      	ldr	r3, [pc, #36]	; (8003098 <MX_USART3_UART_Init+0x4c>)
 8003072:	220c      	movs	r2, #12
 8003074:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003076:	4b08      	ldr	r3, [pc, #32]	; (8003098 <MX_USART3_UART_Init+0x4c>)
 8003078:	2200      	movs	r2, #0
 800307a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <MX_USART3_UART_Init+0x4c>)
 800307e:	2200      	movs	r2, #0
 8003080:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003082:	4805      	ldr	r0, [pc, #20]	; (8003098 <MX_USART3_UART_Init+0x4c>)
 8003084:	f007 fd32 	bl	800aaec <HAL_UART_Init>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800308e:	f7ff f8d1 	bl	8002234 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20000848 	.word	0x20000848
 800309c:	40004800 	.word	0x40004800

080030a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b090      	sub	sp, #64	; 0x40
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	60da      	str	r2, [r3, #12]
 80030b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a79      	ldr	r2, [pc, #484]	; (80032a4 <HAL_UART_MspInit+0x204>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d12d      	bne.n	800311e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030c6:	4b78      	ldr	r3, [pc, #480]	; (80032a8 <HAL_UART_MspInit+0x208>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	4a77      	ldr	r2, [pc, #476]	; (80032a8 <HAL_UART_MspInit+0x208>)
 80030cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80030d0:	6413      	str	r3, [r2, #64]	; 0x40
 80030d2:	4b75      	ldr	r3, [pc, #468]	; (80032a8 <HAL_UART_MspInit+0x208>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030da:	62bb      	str	r3, [r7, #40]	; 0x28
 80030dc:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
 80030e2:	4b71      	ldr	r3, [pc, #452]	; (80032a8 <HAL_UART_MspInit+0x208>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	4a70      	ldr	r2, [pc, #448]	; (80032a8 <HAL_UART_MspInit+0x208>)
 80030e8:	f043 0304 	orr.w	r3, r3, #4
 80030ec:	6313      	str	r3, [r2, #48]	; 0x30
 80030ee:	4b6e      	ldr	r3, [pc, #440]	; (80032a8 <HAL_UART_MspInit+0x208>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	f003 0304 	and.w	r3, r3, #4
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80030fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80030fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003100:	2302      	movs	r3, #2
 8003102:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003104:	2300      	movs	r3, #0
 8003106:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003108:	2303      	movs	r3, #3
 800310a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800310c:	2308      	movs	r3, #8
 800310e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003110:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003114:	4619      	mov	r1, r3
 8003116:	4865      	ldr	r0, [pc, #404]	; (80032ac <HAL_UART_MspInit+0x20c>)
 8003118:	f004 fad0 	bl	80076bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800311c:	e0bd      	b.n	800329a <HAL_UART_MspInit+0x1fa>
  else if(uartHandle->Instance==UART5)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a63      	ldr	r2, [pc, #396]	; (80032b0 <HAL_UART_MspInit+0x210>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d153      	bne.n	80031d0 <HAL_UART_MspInit+0x130>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003128:	2300      	movs	r3, #0
 800312a:	623b      	str	r3, [r7, #32]
 800312c:	4b5e      	ldr	r3, [pc, #376]	; (80032a8 <HAL_UART_MspInit+0x208>)
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	4a5d      	ldr	r2, [pc, #372]	; (80032a8 <HAL_UART_MspInit+0x208>)
 8003132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003136:	6413      	str	r3, [r2, #64]	; 0x40
 8003138:	4b5b      	ldr	r3, [pc, #364]	; (80032a8 <HAL_UART_MspInit+0x208>)
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003140:	623b      	str	r3, [r7, #32]
 8003142:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003144:	2300      	movs	r3, #0
 8003146:	61fb      	str	r3, [r7, #28]
 8003148:	4b57      	ldr	r3, [pc, #348]	; (80032a8 <HAL_UART_MspInit+0x208>)
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	4a56      	ldr	r2, [pc, #344]	; (80032a8 <HAL_UART_MspInit+0x208>)
 800314e:	f043 0304 	orr.w	r3, r3, #4
 8003152:	6313      	str	r3, [r2, #48]	; 0x30
 8003154:	4b54      	ldr	r3, [pc, #336]	; (80032a8 <HAL_UART_MspInit+0x208>)
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	61fb      	str	r3, [r7, #28]
 800315e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003160:	2300      	movs	r3, #0
 8003162:	61bb      	str	r3, [r7, #24]
 8003164:	4b50      	ldr	r3, [pc, #320]	; (80032a8 <HAL_UART_MspInit+0x208>)
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	4a4f      	ldr	r2, [pc, #316]	; (80032a8 <HAL_UART_MspInit+0x208>)
 800316a:	f043 0308 	orr.w	r3, r3, #8
 800316e:	6313      	str	r3, [r2, #48]	; 0x30
 8003170:	4b4d      	ldr	r3, [pc, #308]	; (80032a8 <HAL_UART_MspInit+0x208>)
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	61bb      	str	r3, [r7, #24]
 800317a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800317c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003180:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003182:	2302      	movs	r3, #2
 8003184:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003186:	2300      	movs	r3, #0
 8003188:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800318a:	2303      	movs	r3, #3
 800318c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800318e:	2308      	movs	r3, #8
 8003190:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003192:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003196:	4619      	mov	r1, r3
 8003198:	4844      	ldr	r0, [pc, #272]	; (80032ac <HAL_UART_MspInit+0x20c>)
 800319a:	f004 fa8f 	bl	80076bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800319e:	2304      	movs	r3, #4
 80031a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a2:	2302      	movs	r3, #2
 80031a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a6:	2300      	movs	r3, #0
 80031a8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031aa:	2303      	movs	r3, #3
 80031ac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80031ae:	2308      	movs	r3, #8
 80031b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031b6:	4619      	mov	r1, r3
 80031b8:	483e      	ldr	r0, [pc, #248]	; (80032b4 <HAL_UART_MspInit+0x214>)
 80031ba:	f004 fa7f 	bl	80076bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 9, 0);
 80031be:	2200      	movs	r2, #0
 80031c0:	2109      	movs	r1, #9
 80031c2:	2035      	movs	r0, #53	; 0x35
 80031c4:	f003 fde6 	bl	8006d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80031c8:	2035      	movs	r0, #53	; 0x35
 80031ca:	f003 fdff 	bl	8006dcc <HAL_NVIC_EnableIRQ>
}
 80031ce:	e064      	b.n	800329a <HAL_UART_MspInit+0x1fa>
  else if(uartHandle->Instance==USART1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a38      	ldr	r2, [pc, #224]	; (80032b8 <HAL_UART_MspInit+0x218>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d12d      	bne.n	8003236 <HAL_UART_MspInit+0x196>
    __HAL_RCC_USART1_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
 80031de:	4b32      	ldr	r3, [pc, #200]	; (80032a8 <HAL_UART_MspInit+0x208>)
 80031e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e2:	4a31      	ldr	r2, [pc, #196]	; (80032a8 <HAL_UART_MspInit+0x208>)
 80031e4:	f043 0310 	orr.w	r3, r3, #16
 80031e8:	6453      	str	r3, [r2, #68]	; 0x44
 80031ea:	4b2f      	ldr	r3, [pc, #188]	; (80032a8 <HAL_UART_MspInit+0x208>)
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	f003 0310 	and.w	r3, r3, #16
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031f6:	2300      	movs	r3, #0
 80031f8:	613b      	str	r3, [r7, #16]
 80031fa:	4b2b      	ldr	r3, [pc, #172]	; (80032a8 <HAL_UART_MspInit+0x208>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fe:	4a2a      	ldr	r2, [pc, #168]	; (80032a8 <HAL_UART_MspInit+0x208>)
 8003200:	f043 0301 	orr.w	r3, r3, #1
 8003204:	6313      	str	r3, [r2, #48]	; 0x30
 8003206:	4b28      	ldr	r3, [pc, #160]	; (80032a8 <HAL_UART_MspInit+0x208>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003212:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003216:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003218:	2302      	movs	r3, #2
 800321a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321c:	2300      	movs	r3, #0
 800321e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003220:	2303      	movs	r3, #3
 8003222:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003224:	2307      	movs	r3, #7
 8003226:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003228:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800322c:	4619      	mov	r1, r3
 800322e:	4823      	ldr	r0, [pc, #140]	; (80032bc <HAL_UART_MspInit+0x21c>)
 8003230:	f004 fa44 	bl	80076bc <HAL_GPIO_Init>
}
 8003234:	e031      	b.n	800329a <HAL_UART_MspInit+0x1fa>
  else if(uartHandle->Instance==USART3)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a21      	ldr	r2, [pc, #132]	; (80032c0 <HAL_UART_MspInit+0x220>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d12c      	bne.n	800329a <HAL_UART_MspInit+0x1fa>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003240:	2300      	movs	r3, #0
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	4b18      	ldr	r3, [pc, #96]	; (80032a8 <HAL_UART_MspInit+0x208>)
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	4a17      	ldr	r2, [pc, #92]	; (80032a8 <HAL_UART_MspInit+0x208>)
 800324a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800324e:	6413      	str	r3, [r2, #64]	; 0x40
 8003250:	4b15      	ldr	r3, [pc, #84]	; (80032a8 <HAL_UART_MspInit+0x208>)
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800325c:	2300      	movs	r3, #0
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	4b11      	ldr	r3, [pc, #68]	; (80032a8 <HAL_UART_MspInit+0x208>)
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003264:	4a10      	ldr	r2, [pc, #64]	; (80032a8 <HAL_UART_MspInit+0x208>)
 8003266:	f043 0308 	orr.w	r3, r3, #8
 800326a:	6313      	str	r3, [r2, #48]	; 0x30
 800326c:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <HAL_UART_MspInit+0x208>)
 800326e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003278:	f44f 7340 	mov.w	r3, #768	; 0x300
 800327c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327e:	2302      	movs	r3, #2
 8003280:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003282:	2300      	movs	r3, #0
 8003284:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003286:	2303      	movs	r3, #3
 8003288:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800328a:	2307      	movs	r3, #7
 800328c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800328e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003292:	4619      	mov	r1, r3
 8003294:	4807      	ldr	r0, [pc, #28]	; (80032b4 <HAL_UART_MspInit+0x214>)
 8003296:	f004 fa11 	bl	80076bc <HAL_GPIO_Init>
}
 800329a:	bf00      	nop
 800329c:	3740      	adds	r7, #64	; 0x40
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40004c00 	.word	0x40004c00
 80032a8:	40023800 	.word	0x40023800
 80032ac:	40020800 	.word	0x40020800
 80032b0:	40005000 	.word	0x40005000
 80032b4:	40020c00 	.word	0x40020c00
 80032b8:	40011000 	.word	0x40011000
 80032bc:	40020000 	.word	0x40020000
 80032c0:	40004800 	.word	0x40004800

080032c4 <HAL_UART_RxCpltCallback>:
	}
}

#else
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
	if(huart->Instance==UART5)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a2e      	ldr	r2, [pc, #184]	; (800338c <HAL_UART_RxCpltCallback+0xc8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d155      	bne.n	8003382 <HAL_UART_RxCpltCallback+0xbe>
	{
		if ( USART_RX_STA&0x8000 ){		// 判断是否已经完成接收(bit15-1则已接收完成)
 80032d6:	4b2e      	ldr	r3, [pc, #184]	; (8003390 <HAL_UART_RxCpltCallback+0xcc>)
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	b21b      	sxth	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	db50      	blt.n	8003382 <HAL_UART_RxCpltCallback+0xbe>
			;							// 如果完成接收数据接收且尚未处理，则不接受后续data
		}
		else{
			if( USART_RX_STA&0x4000 ){		// 判断是否已收到起始位
 80032e0:	4b2b      	ldr	r3, [pc, #172]	; (8003390 <HAL_UART_RxCpltCallback+0xcc>)
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d02a      	beq.n	8003342 <HAL_UART_RxCpltCallback+0x7e>
				if( aRxBuffer[0]==0x55 ){	// 判断是否已收到结束位
 80032ec:	4b29      	ldr	r3, [pc, #164]	; (8003394 <HAL_UART_RxCpltCallback+0xd0>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b55      	cmp	r3, #85	; 0x55
 80032f2:	d117      	bne.n	8003324 <HAL_UART_RxCpltCallback+0x60>
					USART_RX_STA|=0x8000;
 80032f4:	4b26      	ldr	r3, [pc, #152]	; (8003390 <HAL_UART_RxCpltCallback+0xcc>)
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003300:	b29a      	uxth	r2, r3
 8003302:	4b23      	ldr	r3, [pc, #140]	; (8003390 <HAL_UART_RxCpltCallback+0xcc>)
 8003304:	801a      	strh	r2, [r3, #0]
					USART5_RX_BUF[USART_RX_STA&0X3FFF]=aRxBuffer[0] ;
 8003306:	4b22      	ldr	r3, [pc, #136]	; (8003390 <HAL_UART_RxCpltCallback+0xcc>)
 8003308:	881b      	ldrh	r3, [r3, #0]
 800330a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800330e:	4a21      	ldr	r2, [pc, #132]	; (8003394 <HAL_UART_RxCpltCallback+0xd0>)
 8003310:	7811      	ldrb	r1, [r2, #0]
 8003312:	4a21      	ldr	r2, [pc, #132]	; (8003398 <HAL_UART_RxCpltCallback+0xd4>)
 8003314:	54d1      	strb	r1, [r2, r3]
					USART_RX_STA++;
 8003316:	4b1e      	ldr	r3, [pc, #120]	; (8003390 <HAL_UART_RxCpltCallback+0xcc>)
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	3301      	adds	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	4b1c      	ldr	r3, [pc, #112]	; (8003390 <HAL_UART_RxCpltCallback+0xcc>)
 8003320:	801a      	strh	r2, [r3, #0]
					USART_RX_STA=0;
				}
			}
		}
	}
}
 8003322:	e02e      	b.n	8003382 <HAL_UART_RxCpltCallback+0xbe>
					USART5_RX_BUF[USART_RX_STA&0X3FFF]=aRxBuffer[0] ;
 8003324:	4b1a      	ldr	r3, [pc, #104]	; (8003390 <HAL_UART_RxCpltCallback+0xcc>)
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800332c:	4a19      	ldr	r2, [pc, #100]	; (8003394 <HAL_UART_RxCpltCallback+0xd0>)
 800332e:	7811      	ldrb	r1, [r2, #0]
 8003330:	4a19      	ldr	r2, [pc, #100]	; (8003398 <HAL_UART_RxCpltCallback+0xd4>)
 8003332:	54d1      	strb	r1, [r2, r3]
					USART_RX_STA++;
 8003334:	4b16      	ldr	r3, [pc, #88]	; (8003390 <HAL_UART_RxCpltCallback+0xcc>)
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	3301      	adds	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	4b14      	ldr	r3, [pc, #80]	; (8003390 <HAL_UART_RxCpltCallback+0xcc>)
 800333e:	801a      	strh	r2, [r3, #0]
}
 8003340:	e01f      	b.n	8003382 <HAL_UART_RxCpltCallback+0xbe>
				if(aRxBuffer[0]==0xAA){
 8003342:	4b14      	ldr	r3, [pc, #80]	; (8003394 <HAL_UART_RxCpltCallback+0xd0>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	2baa      	cmp	r3, #170	; 0xaa
 8003348:	d118      	bne.n	800337c <HAL_UART_RxCpltCallback+0xb8>
					USART_RX_STA|=0x4000;
 800334a:	4b11      	ldr	r3, [pc, #68]	; (8003390 <HAL_UART_RxCpltCallback+0xcc>)
 800334c:	881b      	ldrh	r3, [r3, #0]
 800334e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003352:	b29a      	uxth	r2, r3
 8003354:	4b0e      	ldr	r3, [pc, #56]	; (8003390 <HAL_UART_RxCpltCallback+0xcc>)
 8003356:	801a      	strh	r2, [r3, #0]
					USART5_RX_BUF[USART_RX_STA&0X3FFF]=aRxBuffer[0] ;
 8003358:	4b0d      	ldr	r3, [pc, #52]	; (8003390 <HAL_UART_RxCpltCallback+0xcc>)
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003360:	4a0c      	ldr	r2, [pc, #48]	; (8003394 <HAL_UART_RxCpltCallback+0xd0>)
 8003362:	7811      	ldrb	r1, [r2, #0]
 8003364:	4a0c      	ldr	r2, [pc, #48]	; (8003398 <HAL_UART_RxCpltCallback+0xd4>)
 8003366:	54d1      	strb	r1, [r2, r3]
					USART_RX_STA++;
 8003368:	4b09      	ldr	r3, [pc, #36]	; (8003390 <HAL_UART_RxCpltCallback+0xcc>)
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	3301      	adds	r3, #1
 800336e:	b29a      	uxth	r2, r3
 8003370:	4b07      	ldr	r3, [pc, #28]	; (8003390 <HAL_UART_RxCpltCallback+0xcc>)
 8003372:	801a      	strh	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(&htim9);
 8003374:	4809      	ldr	r0, [pc, #36]	; (800339c <HAL_UART_RxCpltCallback+0xd8>)
 8003376:	f006 feb3 	bl	800a0e0 <HAL_TIM_Base_Start_IT>
}
 800337a:	e002      	b.n	8003382 <HAL_UART_RxCpltCallback+0xbe>
					USART_RX_STA=0;
 800337c:	4b04      	ldr	r3, [pc, #16]	; (8003390 <HAL_UART_RxCpltCallback+0xcc>)
 800337e:	2200      	movs	r2, #0
 8003380:	801a      	strh	r2, [r3, #0]
}
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40005000 	.word	0x40005000
 8003390:	20000778 	.word	0x20000778
 8003394:	20000710 	.word	0x20000710
 8003398:	20000714 	.word	0x20000714
 800339c:	20000560 	.word	0x20000560

080033a0 <Motor_Data_Init>:
#include "stdlib.h"

struct MotorDefine Motor[10];

void Motor_Data_Init(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
	Motor[3].decelerationRate = 10000;
#endif

#ifdef DuoTongDao
	/*  Motor2: 多通道垂直方向28步进电机，编码器为1000P/R */
		Motor[2].MotorNumber = 2;
 80033a4:	4b78      	ldr	r3, [pc, #480]	; (8003588 <Motor_Data_Init+0x1e8>)
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
		Motor[2].Status = 0,
 80033ac:	4b76      	ldr	r3, [pc, #472]	; (8003588 <Motor_Data_Init+0x1e8>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
		Motor[2].htim_x = &htim11,
 80033b4:	4b74      	ldr	r3, [pc, #464]	; (8003588 <Motor_Data_Init+0x1e8>)
 80033b6:	4a75      	ldr	r2, [pc, #468]	; (800358c <Motor_Data_Init+0x1ec>)
 80033b8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
		//机械参数
		Motor[2].deceleration_ratio = 1;
 80033bc:	4b72      	ldr	r3, [pc, #456]	; (8003588 <Motor_Data_Init+0x1e8>)
 80033be:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80033c2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		Motor[2].step_angle = 1.8;
 80033c6:	4b70      	ldr	r3, [pc, #448]	; (8003588 <Motor_Data_Init+0x1e8>)
 80033c8:	4a71      	ldr	r2, [pc, #452]	; (8003590 <Motor_Data_Init+0x1f0>)
 80033ca:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		Motor[2].mircro_steps = 32;
 80033ce:	4b6e      	ldr	r3, [pc, #440]	; (8003588 <Motor_Data_Init+0x1e8>)
 80033d0:	2220      	movs	r2, #32
 80033d2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		Motor[2].MaxSpeedInRads= 6;
 80033d6:	4b6c      	ldr	r3, [pc, #432]	; (8003588 <Motor_Data_Init+0x1e8>)
 80033d8:	4a6e      	ldr	r2, [pc, #440]	; (8003594 <Motor_Data_Init+0x1f4>)
 80033da:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		//Motor[2].Encoder_PulsePerRad = 1000;
		//设定默认速度参数，以下为实测优化后结果，可以通过参数控制模式修改
		Motor[2].StartupSpeedInRads = 2;
 80033de:	4b6a      	ldr	r3, [pc, #424]	; (8003588 <Motor_Data_Init+0x1e8>)
 80033e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033e4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		Motor[2].DesiredSpeedInRads = 4.5;
 80033e8:	4b67      	ldr	r3, [pc, #412]	; (8003588 <Motor_Data_Init+0x1e8>)
 80033ea:	4a6b      	ldr	r2, [pc, #428]	; (8003598 <Motor_Data_Init+0x1f8>)
 80033ec:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		Motor[2].accelerationRate = 20000;
 80033f0:	4b65      	ldr	r3, [pc, #404]	; (8003588 <Motor_Data_Init+0x1e8>)
 80033f2:	f644 6220 	movw	r2, #20000	; 0x4e20
 80033f6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		Motor[2].decelerationRate = 20000;
 80033fa:	4b63      	ldr	r3, [pc, #396]	; (8003588 <Motor_Data_Init+0x1e8>)
 80033fc:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003400:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

	/*  Motor3: 水平方向步进电机  */
		Motor[3].MotorNumber = 3;
 8003404:	4b60      	ldr	r3, [pc, #384]	; (8003588 <Motor_Data_Init+0x1e8>)
 8003406:	2203      	movs	r2, #3
 8003408:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
		Motor[3].Status = 0,
 800340c:	4b5e      	ldr	r3, [pc, #376]	; (8003588 <Motor_Data_Init+0x1e8>)
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
		Motor[3].htim_x = &htim13,
 8003414:	4b5c      	ldr	r3, [pc, #368]	; (8003588 <Motor_Data_Init+0x1e8>)
 8003416:	4a61      	ldr	r2, [pc, #388]	; (800359c <Motor_Data_Init+0x1fc>)
 8003418:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
		//机械参数
		Motor[3].deceleration_ratio = 1;
 800341c:	4b5a      	ldr	r3, [pc, #360]	; (8003588 <Motor_Data_Init+0x1e8>)
 800341e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003422:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		Motor[3].step_angle = 1.8;
 8003426:	4b58      	ldr	r3, [pc, #352]	; (8003588 <Motor_Data_Init+0x1e8>)
 8003428:	4a59      	ldr	r2, [pc, #356]	; (8003590 <Motor_Data_Init+0x1f0>)
 800342a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		Motor[3].mircro_steps = 32;
 800342e:	4b56      	ldr	r3, [pc, #344]	; (8003588 <Motor_Data_Init+0x1e8>)
 8003430:	2220      	movs	r2, #32
 8003432:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
		Motor[3].MaxSpeedInRads= 6;
 8003436:	4b54      	ldr	r3, [pc, #336]	; (8003588 <Motor_Data_Init+0x1e8>)
 8003438:	4a56      	ldr	r2, [pc, #344]	; (8003594 <Motor_Data_Init+0x1f4>)
 800343a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		//设定默认速度参数，以下为实测优化后结果，可以通过参数控制模式修改
		Motor[3].StartupSpeedInRads = 2;
 800343e:	4b52      	ldr	r3, [pc, #328]	; (8003588 <Motor_Data_Init+0x1e8>)
 8003440:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003444:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
		Motor[3].DesiredSpeedInRads = 5;
 8003448:	4b4f      	ldr	r3, [pc, #316]	; (8003588 <Motor_Data_Init+0x1e8>)
 800344a:	4a55      	ldr	r2, [pc, #340]	; (80035a0 <Motor_Data_Init+0x200>)
 800344c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		Motor[3].accelerationRate = 60000;
 8003450:	4b4d      	ldr	r3, [pc, #308]	; (8003588 <Motor_Data_Init+0x1e8>)
 8003452:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003456:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		Motor[3].decelerationRate = 60000;
 800345a:	4b4b      	ldr	r3, [pc, #300]	; (8003588 <Motor_Data_Init+0x1e8>)
 800345c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003460:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

	/*  Motor5 : 试剂条暂存电机   */
		Motor[5].MotorNumber = 5;
 8003464:	4b48      	ldr	r3, [pc, #288]	; (8003588 <Motor_Data_Init+0x1e8>)
 8003466:	2205      	movs	r2, #5
 8003468:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
		Motor[5].Status = 0,
 800346c:	4b46      	ldr	r3, [pc, #280]	; (8003588 <Motor_Data_Init+0x1e8>)
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
		Motor[5].htim_x = &htim6,
 8003474:	4b44      	ldr	r3, [pc, #272]	; (8003588 <Motor_Data_Init+0x1e8>)
 8003476:	4a4b      	ldr	r2, [pc, #300]	; (80035a4 <Motor_Data_Init+0x204>)
 8003478:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
		//机械参数
		Motor[5].deceleration_ratio = 20;	//实际减速比为100，方便指令控制改为20
 800347c:	4b42      	ldr	r3, [pc, #264]	; (8003588 <Motor_Data_Init+0x1e8>)
 800347e:	4a4a      	ldr	r2, [pc, #296]	; (80035a8 <Motor_Data_Init+0x208>)
 8003480:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
		Motor[5].step_angle = 18;
 8003484:	4b40      	ldr	r3, [pc, #256]	; (8003588 <Motor_Data_Init+0x1e8>)
 8003486:	4a49      	ldr	r2, [pc, #292]	; (80035ac <Motor_Data_Init+0x20c>)
 8003488:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
		Motor[5].mircro_steps = 1;
 800348c:	4b3e      	ldr	r3, [pc, #248]	; (8003588 <Motor_Data_Init+0x1e8>)
 800348e:	2201      	movs	r2, #1
 8003490:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
		Motor[5].MaxSpeedInRads= 3;
 8003494:	4b3c      	ldr	r3, [pc, #240]	; (8003588 <Motor_Data_Init+0x1e8>)
 8003496:	4a46      	ldr	r2, [pc, #280]	; (80035b0 <Motor_Data_Init+0x210>)
 8003498:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
		//设定默认速度参数，以下为实测优化后结果，可以通过参数控制模式修改
		Motor[5].StartupSpeedInRads = 1.5;
 800349c:	4b3a      	ldr	r3, [pc, #232]	; (8003588 <Motor_Data_Init+0x1e8>)
 800349e:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80034a2:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
		Motor[5].DesiredSpeedInRads = 1.8;
 80034a6:	4b38      	ldr	r3, [pc, #224]	; (8003588 <Motor_Data_Init+0x1e8>)
 80034a8:	4a39      	ldr	r2, [pc, #228]	; (8003590 <Motor_Data_Init+0x1f0>)
 80034aa:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		Motor[5].accelerationRate = 8000;
 80034ae:	4b36      	ldr	r3, [pc, #216]	; (8003588 <Motor_Data_Init+0x1e8>)
 80034b0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80034b4:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
		Motor[5].decelerationRate = 8000;
 80034b8:	4b33      	ldr	r3, [pc, #204]	; (8003588 <Motor_Data_Init+0x1e8>)
 80034ba:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80034be:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc

	/*  Motor6 : 推杆旋转电机   */
		Motor[6].MotorNumber = 6;
 80034c2:	4b31      	ldr	r3, [pc, #196]	; (8003588 <Motor_Data_Init+0x1e8>)
 80034c4:	2206      	movs	r2, #6
 80034c6:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
		Motor[6].Status = 0,
 80034ca:	4b2f      	ldr	r3, [pc, #188]	; (8003588 <Motor_Data_Init+0x1e8>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
		Motor[6].htim_x = &htim7,
 80034d2:	4b2d      	ldr	r3, [pc, #180]	; (8003588 <Motor_Data_Init+0x1e8>)
 80034d4:	4a37      	ldr	r2, [pc, #220]	; (80035b4 <Motor_Data_Init+0x214>)
 80034d6:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
		//机械参数
		Motor[6].deceleration_ratio = 20;	//实际减速比为100，方便指令控制改为20
 80034da:	4b2b      	ldr	r3, [pc, #172]	; (8003588 <Motor_Data_Init+0x1e8>)
 80034dc:	4a32      	ldr	r2, [pc, #200]	; (80035a8 <Motor_Data_Init+0x208>)
 80034de:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
		Motor[6].step_angle = 18;
 80034e2:	4b29      	ldr	r3, [pc, #164]	; (8003588 <Motor_Data_Init+0x1e8>)
 80034e4:	4a31      	ldr	r2, [pc, #196]	; (80035ac <Motor_Data_Init+0x20c>)
 80034e6:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
		Motor[6].mircro_steps = 1;
 80034ea:	4b27      	ldr	r3, [pc, #156]	; (8003588 <Motor_Data_Init+0x1e8>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
		Motor[6].MaxSpeedInRads= 3;
 80034f2:	4b25      	ldr	r3, [pc, #148]	; (8003588 <Motor_Data_Init+0x1e8>)
 80034f4:	4a2e      	ldr	r2, [pc, #184]	; (80035b0 <Motor_Data_Init+0x210>)
 80034f6:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
		//设定默认速度参数，以下为实测优化后结果，可以通过参数控制模式修改
		Motor[6].StartupSpeedInRads = 1.6;
 80034fa:	4b23      	ldr	r3, [pc, #140]	; (8003588 <Motor_Data_Init+0x1e8>)
 80034fc:	4a2e      	ldr	r2, [pc, #184]	; (80035b8 <Motor_Data_Init+0x218>)
 80034fe:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
		Motor[6].DesiredSpeedInRads = 2;
 8003502:	4b21      	ldr	r3, [pc, #132]	; (8003588 <Motor_Data_Init+0x1e8>)
 8003504:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003508:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
		Motor[6].accelerationRate = 8000;
 800350c:	4b1e      	ldr	r3, [pc, #120]	; (8003588 <Motor_Data_Init+0x1e8>)
 800350e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003512:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
		Motor[6].decelerationRate = 8000;
 8003516:	4b1c      	ldr	r3, [pc, #112]	; (8003588 <Motor_Data_Init+0x1e8>)
 8003518:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800351c:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
#endif

/*  Motor4 : 柱塞泵，负责注液（也可以抽液），最大排量1000uL，总行程10rads（2000步），每步0.5uL  */
		Motor[4].MotorNumber = 4;
 8003520:	4b19      	ldr	r3, [pc, #100]	; (8003588 <Motor_Data_Init+0x1e8>)
 8003522:	2204      	movs	r2, #4
 8003524:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
		Motor[4].Status = 0,
 8003528:	4b17      	ldr	r3, [pc, #92]	; (8003588 <Motor_Data_Init+0x1e8>)
 800352a:	2200      	movs	r2, #0
 800352c:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
		Motor[4].htim_x = &htim14,
 8003530:	4b15      	ldr	r3, [pc, #84]	; (8003588 <Motor_Data_Init+0x1e8>)
 8003532:	4a22      	ldr	r2, [pc, #136]	; (80035bc <Motor_Data_Init+0x21c>)
 8003534:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		//机械参数
		Motor[4].deceleration_ratio = 1;
 8003538:	4b13      	ldr	r3, [pc, #76]	; (8003588 <Motor_Data_Init+0x1e8>)
 800353a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800353e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		Motor[4].step_angle = 1.8;
 8003542:	4b11      	ldr	r3, [pc, #68]	; (8003588 <Motor_Data_Init+0x1e8>)
 8003544:	4a12      	ldr	r2, [pc, #72]	; (8003590 <Motor_Data_Init+0x1f0>)
 8003546:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
		Motor[4].mircro_steps = 16;
 800354a:	4b0f      	ldr	r3, [pc, #60]	; (8003588 <Motor_Data_Init+0x1e8>)
 800354c:	2210      	movs	r2, #16
 800354e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		Motor[4].MaxSpeedInRads= 13;
 8003552:	4b0d      	ldr	r3, [pc, #52]	; (8003588 <Motor_Data_Init+0x1e8>)
 8003554:	4a1a      	ldr	r2, [pc, #104]	; (80035c0 <Motor_Data_Init+0x220>)
 8003556:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
		//设定默认速度参数，以下为实测优化后结果，可以通过参数控制模式修改
		Motor[4].StartupSpeedInRads = 5;
 800355a:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <Motor_Data_Init+0x1e8>)
 800355c:	4a10      	ldr	r2, [pc, #64]	; (80035a0 <Motor_Data_Init+0x200>)
 800355e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
		Motor[4].DesiredSpeedInRads = 10;
 8003562:	4b09      	ldr	r3, [pc, #36]	; (8003588 <Motor_Data_Init+0x1e8>)
 8003564:	4a17      	ldr	r2, [pc, #92]	; (80035c4 <Motor_Data_Init+0x224>)
 8003566:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
		Motor[4].accelerationRate = 20000;
 800356a:	4b07      	ldr	r3, [pc, #28]	; (8003588 <Motor_Data_Init+0x1e8>)
 800356c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003570:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
		Motor[4].decelerationRate = 10000;
 8003574:	4b04      	ldr	r3, [pc, #16]	; (8003588 <Motor_Data_Init+0x1e8>)
 8003576:	f242 7210 	movw	r2, #10000	; 0x2710
 800357a:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	Motor[6].StartupSpeedInRads = 1;
	Motor[6].DesiredSpeedInRads = 10;
	Motor[6].accelerationRate = 10000;
	Motor[6].decelerationRate = 10000;
#endif
}
 800357e:	bf00      	nop
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	2000088c 	.word	0x2000088c
 800358c:	200005f0 	.word	0x200005f0
 8003590:	3fe66666 	.word	0x3fe66666
 8003594:	40c00000 	.word	0x40c00000
 8003598:	40900000 	.word	0x40900000
 800359c:	20000680 	.word	0x20000680
 80035a0:	40a00000 	.word	0x40a00000
 80035a4:	200004d0 	.word	0x200004d0
 80035a8:	41a00000 	.word	0x41a00000
 80035ac:	41900000 	.word	0x41900000
 80035b0:	40400000 	.word	0x40400000
 80035b4:	20000518 	.word	0x20000518
 80035b8:	3fcccccd 	.word	0x3fcccccd
 80035bc:	200006c8 	.word	0x200006c8
 80035c0:	41500000 	.word	0x41500000
 80035c4:	41200000 	.word	0x41200000

080035c8 <ALL_Motors_Disable>:
	printf("DecelerationTimeTMR:%ld\r\n",a->DecelerationTimeTMR);
	printf("********************\r\n");
}

void ALL_Motors_Disable(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
	Motor1_Disable();	Motor2_Disable();	Motor3_Disable();	Motor4_Disable();
 80035cc:	2201      	movs	r2, #1
 80035ce:	2110      	movs	r1, #16
 80035d0:	4857      	ldr	r0, [pc, #348]	; (8003730 <ALL_Motors_Disable+0x168>)
 80035d2:	f004 fa27 	bl	8007a24 <HAL_GPIO_WritePin>
 80035d6:	2201      	movs	r2, #1
 80035d8:	2180      	movs	r1, #128	; 0x80
 80035da:	4855      	ldr	r0, [pc, #340]	; (8003730 <ALL_Motors_Disable+0x168>)
 80035dc:	f004 fa22 	bl	8007a24 <HAL_GPIO_WritePin>
 80035e0:	2201      	movs	r2, #1
 80035e2:	2101      	movs	r1, #1
 80035e4:	4853      	ldr	r0, [pc, #332]	; (8003734 <ALL_Motors_Disable+0x16c>)
 80035e6:	f004 fa1d 	bl	8007a24 <HAL_GPIO_WritePin>
 80035ea:	2201      	movs	r2, #1
 80035ec:	2108      	movs	r1, #8
 80035ee:	4851      	ldr	r0, [pc, #324]	; (8003734 <ALL_Motors_Disable+0x16c>)
 80035f0:	f004 fa18 	bl	8007a24 <HAL_GPIO_WritePin>
	VM5_Disable_A();	VM5_Disable_B();	VM6_Disable_A();	VM6_Disable_B();
 80035f4:	2200      	movs	r2, #0
 80035f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035fa:	484e      	ldr	r0, [pc, #312]	; (8003734 <ALL_Motors_Disable+0x16c>)
 80035fc:	f004 fa12 	bl	8007a24 <HAL_GPIO_WritePin>
 8003600:	2200      	movs	r2, #0
 8003602:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003606:	484b      	ldr	r0, [pc, #300]	; (8003734 <ALL_Motors_Disable+0x16c>)
 8003608:	f004 fa0c 	bl	8007a24 <HAL_GPIO_WritePin>
 800360c:	2200      	movs	r2, #0
 800360e:	2180      	movs	r1, #128	; 0x80
 8003610:	4848      	ldr	r0, [pc, #288]	; (8003734 <ALL_Motors_Disable+0x16c>)
 8003612:	f004 fa07 	bl	8007a24 <HAL_GPIO_WritePin>
 8003616:	2200      	movs	r2, #0
 8003618:	2102      	movs	r1, #2
 800361a:	4847      	ldr	r0, [pc, #284]	; (8003738 <ALL_Motors_Disable+0x170>)
 800361c:	f004 fa02 	bl	8007a24 <HAL_GPIO_WritePin>
	VM7_Disable_A();	VM7_Disable_B();	VM8_Disable_A();	VM8_Disable_B();
 8003620:	2200      	movs	r2, #0
 8003622:	2101      	movs	r1, #1
 8003624:	4844      	ldr	r0, [pc, #272]	; (8003738 <ALL_Motors_Disable+0x170>)
 8003626:	f004 f9fd 	bl	8007a24 <HAL_GPIO_WritePin>
 800362a:	2200      	movs	r2, #0
 800362c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003630:	4842      	ldr	r0, [pc, #264]	; (800373c <ALL_Motors_Disable+0x174>)
 8003632:	f004 f9f7 	bl	8007a24 <HAL_GPIO_WritePin>
 8003636:	2200      	movs	r2, #0
 8003638:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800363c:	483f      	ldr	r0, [pc, #252]	; (800373c <ALL_Motors_Disable+0x174>)
 800363e:	f004 f9f1 	bl	8007a24 <HAL_GPIO_WritePin>
 8003642:	2200      	movs	r2, #0
 8003644:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003648:	483c      	ldr	r0, [pc, #240]	; (800373c <ALL_Motors_Disable+0x174>)
 800364a:	f004 f9eb 	bl	8007a24 <HAL_GPIO_WritePin>
	Motorpluse1_Low();	Motorpluse2_Low();	Motorpluse3_Low();	Motorpluse4_Low();
 800364e:	2200      	movs	r2, #0
 8003650:	2108      	movs	r1, #8
 8003652:	4837      	ldr	r0, [pc, #220]	; (8003730 <ALL_Motors_Disable+0x168>)
 8003654:	f004 f9e6 	bl	8007a24 <HAL_GPIO_WritePin>
 8003658:	2200      	movs	r2, #0
 800365a:	2140      	movs	r1, #64	; 0x40
 800365c:	4834      	ldr	r0, [pc, #208]	; (8003730 <ALL_Motors_Disable+0x168>)
 800365e:	f004 f9e1 	bl	8007a24 <HAL_GPIO_WritePin>
 8003662:	2200      	movs	r2, #0
 8003664:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003668:	4831      	ldr	r0, [pc, #196]	; (8003730 <ALL_Motors_Disable+0x168>)
 800366a:	f004 f9db 	bl	8007a24 <HAL_GPIO_WritePin>
 800366e:	2200      	movs	r2, #0
 8003670:	2104      	movs	r1, #4
 8003672:	4830      	ldr	r0, [pc, #192]	; (8003734 <ALL_Motors_Disable+0x16c>)
 8003674:	f004 f9d6 	bl	8007a24 <HAL_GPIO_WritePin>
	VM5_IN1_L();	VM5_IN2_L();	VM5_IN3_L();	VM5_IN4_L();
 8003678:	2200      	movs	r2, #0
 800367a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800367e:	482c      	ldr	r0, [pc, #176]	; (8003730 <ALL_Motors_Disable+0x168>)
 8003680:	f004 f9d0 	bl	8007a24 <HAL_GPIO_WritePin>
 8003684:	2200      	movs	r2, #0
 8003686:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800368a:	4829      	ldr	r0, [pc, #164]	; (8003730 <ALL_Motors_Disable+0x168>)
 800368c:	f004 f9ca 	bl	8007a24 <HAL_GPIO_WritePin>
 8003690:	2200      	movs	r2, #0
 8003692:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003696:	4826      	ldr	r0, [pc, #152]	; (8003730 <ALL_Motors_Disable+0x168>)
 8003698:	f004 f9c4 	bl	8007a24 <HAL_GPIO_WritePin>
 800369c:	2200      	movs	r2, #0
 800369e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036a2:	4823      	ldr	r0, [pc, #140]	; (8003730 <ALL_Motors_Disable+0x168>)
 80036a4:	f004 f9be 	bl	8007a24 <HAL_GPIO_WritePin>
	VM6_IN1_L();	VM6_IN2_L();	VM6_IN3_L();	VM6_IN4_L();
 80036a8:	2200      	movs	r2, #0
 80036aa:	2120      	movs	r1, #32
 80036ac:	4821      	ldr	r0, [pc, #132]	; (8003734 <ALL_Motors_Disable+0x16c>)
 80036ae:	f004 f9b9 	bl	8007a24 <HAL_GPIO_WritePin>
 80036b2:	2200      	movs	r2, #0
 80036b4:	2140      	movs	r1, #64	; 0x40
 80036b6:	481f      	ldr	r0, [pc, #124]	; (8003734 <ALL_Motors_Disable+0x16c>)
 80036b8:	f004 f9b4 	bl	8007a24 <HAL_GPIO_WritePin>
 80036bc:	2200      	movs	r2, #0
 80036be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036c2:	481f      	ldr	r0, [pc, #124]	; (8003740 <ALL_Motors_Disable+0x178>)
 80036c4:	f004 f9ae 	bl	8007a24 <HAL_GPIO_WritePin>
 80036c8:	2200      	movs	r2, #0
 80036ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036ce:	481c      	ldr	r0, [pc, #112]	; (8003740 <ALL_Motors_Disable+0x178>)
 80036d0:	f004 f9a8 	bl	8007a24 <HAL_GPIO_WritePin>
	VM7_IN1_L();	VM7_IN2_L();	VM7_IN3_L();	VM7_IN4_L();
 80036d4:	2200      	movs	r2, #0
 80036d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036da:	4815      	ldr	r0, [pc, #84]	; (8003730 <ALL_Motors_Disable+0x168>)
 80036dc:	f004 f9a2 	bl	8007a24 <HAL_GPIO_WritePin>
 80036e0:	2200      	movs	r2, #0
 80036e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80036e6:	4812      	ldr	r0, [pc, #72]	; (8003730 <ALL_Motors_Disable+0x168>)
 80036e8:	f004 f99c 	bl	8007a24 <HAL_GPIO_WritePin>
 80036ec:	2200      	movs	r2, #0
 80036ee:	2101      	movs	r1, #1
 80036f0:	480f      	ldr	r0, [pc, #60]	; (8003730 <ALL_Motors_Disable+0x168>)
 80036f2:	f004 f997 	bl	8007a24 <HAL_GPIO_WritePin>
 80036f6:	2200      	movs	r2, #0
 80036f8:	2102      	movs	r1, #2
 80036fa:	480d      	ldr	r0, [pc, #52]	; (8003730 <ALL_Motors_Disable+0x168>)
 80036fc:	f004 f992 	bl	8007a24 <HAL_GPIO_WritePin>
	VM8_IN1_L();	VM8_IN2_L();	VM8_IN3_L();	VM8_IN4_L();
 8003700:	2200      	movs	r2, #0
 8003702:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003706:	480f      	ldr	r0, [pc, #60]	; (8003744 <ALL_Motors_Disable+0x17c>)
 8003708:	f004 f98c 	bl	8007a24 <HAL_GPIO_WritePin>
 800370c:	2200      	movs	r2, #0
 800370e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003712:	480c      	ldr	r0, [pc, #48]	; (8003744 <ALL_Motors_Disable+0x17c>)
 8003714:	f004 f986 	bl	8007a24 <HAL_GPIO_WritePin>
 8003718:	2200      	movs	r2, #0
 800371a:	2104      	movs	r1, #4
 800371c:	480a      	ldr	r0, [pc, #40]	; (8003748 <ALL_Motors_Disable+0x180>)
 800371e:	f004 f981 	bl	8007a24 <HAL_GPIO_WritePin>
 8003722:	2200      	movs	r2, #0
 8003724:	2108      	movs	r1, #8
 8003726:	4808      	ldr	r0, [pc, #32]	; (8003748 <ALL_Motors_Disable+0x180>)
 8003728:	f004 f97c 	bl	8007a24 <HAL_GPIO_WritePin>
}
 800372c:	bf00      	nop
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40020400 	.word	0x40020400
 8003734:	40021000 	.word	0x40021000
 8003738:	40021800 	.word	0x40021800
 800373c:	40021400 	.word	0x40021400
 8003740:	40020800 	.word	0x40020800
 8003744:	40020c00 	.word	0x40020c00
 8003748:	40020000 	.word	0x40020000

0800374c <AccelDecelTimeCompute>:
	printf("Reseting Motors Result:0x%x ...\r\n",Motor_Init_Result);
	return Motor_Init_Result;
}

uint32_t AccelDecelTimeCompute(uint32_t AccelDecelRate)  //根据输入的加减速率，计算加减速计时器的TMR
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
	uint32_t temp_AccelDecelTimeTMR;
	if(AccelDecelRate > MOTORTIM_TMR){
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a09      	ldr	r2, [pc, #36]	; (800377c <AccelDecelTimeCompute+0x30>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d905      	bls.n	8003768 <AccelDecelTimeCompute+0x1c>
		printf("[WRONG]AccelDecel Rate Oversize!\r\n"); //如果加减速超过MOTORTIM_TMR（100000Hz/s），判断过快报错
 800375c:	4808      	ldr	r0, [pc, #32]	; (8003780 <AccelDecelTimeCompute+0x34>)
 800375e:	f00b fdb9 	bl	800f2d4 <puts>
		return 10000;  // 返回一个较大的加速度增量10kHz
 8003762:	f242 7310 	movw	r3, #10000	; 0x2710
 8003766:	e005      	b.n	8003774 <AccelDecelTimeCompute+0x28>
	}
	temp_AccelDecelTimeTMR = MOTORTIM_TMR / AccelDecelRate ;  // 计算对应的加减速计时器TMR
 8003768:	4a04      	ldr	r2, [pc, #16]	; (800377c <AccelDecelTimeCompute+0x30>)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003770:	60fb      	str	r3, [r7, #12]
	return temp_AccelDecelTimeTMR;
 8003772:	68fb      	ldr	r3, [r7, #12]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	000186a0 	.word	0x000186a0
 8003780:	080116c0 	.word	0x080116c0

08003784 <AccelDecel>:

void AccelDecel(uint32_t AccelDecelState,struct MotorDefine *a)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
	switch (AccelDecelState){
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b02      	cmp	r3, #2
 8003792:	d022      	beq.n	80037da <AccelDecel+0x56>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d839      	bhi.n	800380e <AccelDecel+0x8a>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d035      	beq.n	800380c <AccelDecel+0x88>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d000      	beq.n	80037a8 <AccelDecel+0x24>
			a->ActualSpeedInHz = a->StartupSpeedInHz;
			AccelDecelState = 0;
		}
		a->StepperSpeedTMR = MOTORTIM_TMR / a->ActualSpeedInHz;
	}
}
 80037a6:	e032      	b.n	800380e <AccelDecel+0x8a>
		a->ActualSpeedInHz ++ ;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40
		if (a->ActualSpeedInHz >= a->DesiredSpeedInHz){
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d305      	bcc.n	80037ca <AccelDecel+0x46>
			a->ActualSpeedInHz = a->DesiredSpeedInHz;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	641a      	str	r2, [r3, #64]	; 0x40
			AccelDecelState = 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	607b      	str	r3, [r7, #4]
		a->StepperSpeedTMR = MOTORTIM_TMR / a->ActualSpeedInHz;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	4a13      	ldr	r2, [pc, #76]	; (800381c <AccelDecel+0x98>)
 80037d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	649a      	str	r2, [r3, #72]	; 0x48
	break;
 80037d8:	e019      	b.n	800380e <AccelDecel+0x8a>
		a->ActualSpeedInHz -- ;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	1e5a      	subs	r2, r3, #1
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	641a      	str	r2, [r3, #64]	; 0x40
		if (a->ActualSpeedInHz <= a->StartupSpeedInHz){
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d805      	bhi.n	80037fc <AccelDecel+0x78>
			a->ActualSpeedInHz = a->StartupSpeedInHz;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	641a      	str	r2, [r3, #64]	; 0x40
			AccelDecelState = 0;
 80037f8:	2300      	movs	r3, #0
 80037fa:	607b      	str	r3, [r7, #4]
		a->StepperSpeedTMR = MOTORTIM_TMR / a->ActualSpeedInHz;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	4a06      	ldr	r2, [pc, #24]	; (800381c <AccelDecel+0x98>)
 8003802:	fbb2 f2f3 	udiv	r2, r2, r3
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	649a      	str	r2, [r3, #72]	; 0x48
}
 800380a:	e000      	b.n	800380e <AccelDecel+0x8a>
	break;
 800380c:	bf00      	nop
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	000186a0 	.word	0x000186a0

08003820 <Motor_AccelDecel_waveCalculate>:

void Motor_AccelDecel_waveCalculate(struct MotorDefine *a)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
	uint32_t DesiredNumberofSteptoAccel ;
	uint32_t DesiredNumberofSteptoDecel ;
	float DesiredAccellTimeInSeconds ;
	float DesiredDecellTimeInSeconds ;

	a->AccelerationTimeTMR = AccelDecelTimeCompute(a->accelerationRate);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff ff8d 	bl	800374c <AccelDecelTimeCompute>
 8003832:	4602      	mov	r2, r0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	659a      	str	r2, [r3, #88]	; 0x58
	a->DecelerationTimeTMR = AccelDecelTimeCompute(a->decelerationRate);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69db      	ldr	r3, [r3, #28]
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff ff85 	bl	800374c <AccelDecelTimeCompute>
 8003842:	4602      	mov	r2, r0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	65da      	str	r2, [r3, #92]	; 0x5c

	DesiredAccellTimeInSeconds = ((float)a->DesiredSpeedInHz-a->StartupSpeedInHz) / a->accelerationRate;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384c:	ee07 3a90 	vmov	s15, r3
 8003850:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003858:	ee07 3a90 	vmov	s15, r3
 800385c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003860:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	ee07 3a90 	vmov	s15, r3
 800386c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003874:	edc7 7a05 	vstr	s15, [r7, #20]
	DesiredDecellTimeInSeconds = ((float)a->DesiredSpeedInHz-a->StartupSpeedInHz) / a->decelerationRate;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387c:	ee07 3a90 	vmov	s15, r3
 8003880:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003888:	ee07 3a90 	vmov	s15, r3
 800388c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003890:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	ee07 3a90 	vmov	s15, r3
 800389c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038a4:	edc7 7a04 	vstr	s15, [r7, #16]
	DesiredNumberofSteptoAccel =  DesiredAccellTimeInSeconds * (a->DesiredSpeedInHz-a->StartupSpeedInHz) /2 + a->StartupSpeedInHz*DesiredAccellTimeInSeconds; //对速度曲线求积分，理论计算完成加速需要的步数
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	ee07 3a90 	vmov	s15, r3
 80038b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80038be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038c2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80038c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ce:	ee07 3a90 	vmov	s15, r3
 80038d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80038da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038e6:	ee17 3a90 	vmov	r3, s15
 80038ea:	60fb      	str	r3, [r7, #12]
	DesiredNumberofSteptoDecel =  DesiredDecellTimeInSeconds * (a->DesiredSpeedInHz-a->StartupSpeedInHz) /2 + a->StartupSpeedInHz*DesiredDecellTimeInSeconds ; //对速度曲线求积分，理论计算完成减速需要的步数
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	ee07 3a90 	vmov	s15, r3
 80038fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8003902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003906:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800390a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003912:	ee07 3a90 	vmov	s15, r3
 8003916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800391a:	edd7 7a04 	vldr	s15, [r7, #16]
 800391e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003926:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800392a:	ee17 3a90 	vmov	r3, s15
 800392e:	60bb      	str	r3, [r7, #8]

	if ( (DesiredNumberofSteptoAccel + DesiredNumberofSteptoDecel) <= a->NumberofSteps ) //如果加减速需要的步数和，小于总步数，则进行完整加减速
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	441a      	add	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393a:	429a      	cmp	r2, r3
 800393c:	d809      	bhi.n	8003952 <Motor_AccelDecel_waveCalculate+0x132>
	{
		a->NumberofSteps_StopAccel = a->NumberofSteps - DesiredNumberofSteptoAccel ;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	1ad2      	subs	r2, r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	651a      	str	r2, [r3, #80]	; 0x50
		a->NumberofSteps_BeginDecel =  DesiredNumberofSteptoDecel ;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	655a      	str	r2, [r3, #84]	; 0x54
 8003950:	e010      	b.n	8003974 <Motor_AccelDecel_waveCalculate+0x154>
	}
	else  // 如果行进距离不能完成完整的加减速曲线，则前1/3加速，后1/3减速
	{
		a->NumberofSteps_StopAccel = a->NumberofSteps /3*2 ;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003956:	4a0d      	ldr	r2, [pc, #52]	; (800398c <Motor_AccelDecel_waveCalculate+0x16c>)
 8003958:	fba2 2303 	umull	r2, r3, r2, r3
 800395c:	085b      	lsrs	r3, r3, #1
 800395e:	005a      	lsls	r2, r3, #1
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	651a      	str	r2, [r3, #80]	; 0x50
		a->NumberofSteps_BeginDecel = a->NumberofSteps /3 ;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003968:	4a08      	ldr	r2, [pc, #32]	; (800398c <Motor_AccelDecel_waveCalculate+0x16c>)
 800396a:	fba2 2303 	umull	r2, r3, r2, r3
 800396e:	085a      	lsrs	r2, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	655a      	str	r2, [r3, #84]	; 0x54
	}
	if ( a->MotorNumber == 4 ){		// 电机4柱塞泵，防止注液时挂液，取消减速使电机高速注液
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3020 	ldrb.w	r3, [r3, #32]
 800397a:	2b04      	cmp	r3, #4
 800397c:	d102      	bne.n	8003984 <Motor_AccelDecel_waveCalculate+0x164>
		a->NumberofSteps_BeginDecel = 0 ;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	655a      	str	r2, [r3, #84]	; 0x54
	}
}
 8003984:	bf00      	nop
 8003986:	3718      	adds	r7, #24
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	aaaaaaab 	.word	0xaaaaaaab

08003990 <MotorDirection_SetUp>:

void MotorDirection_SetUp(struct MotorDefine *a)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
	if (a->MotorNumber == 1){
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d110      	bne.n	80039c4 <MotorDirection_SetUp+0x34>
		if(a->MotorDirection == 1){
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d105      	bne.n	80039b8 <MotorDirection_SetUp+0x28>
			Motor1_Nreset_direction;
 80039ac:	2200      	movs	r2, #0
 80039ae:	2120      	movs	r1, #32
 80039b0:	4828      	ldr	r0, [pc, #160]	; (8003a54 <MotorDirection_SetUp+0xc4>)
 80039b2:	f004 f837 	bl	8007a24 <HAL_GPIO_WritePin>
		else{
			Motor4_reset_direction;
		}
	}

}
 80039b6:	e048      	b.n	8003a4a <MotorDirection_SetUp+0xba>
			Motor1_reset_direction;
 80039b8:	2201      	movs	r2, #1
 80039ba:	2120      	movs	r1, #32
 80039bc:	4825      	ldr	r0, [pc, #148]	; (8003a54 <MotorDirection_SetUp+0xc4>)
 80039be:	f004 f831 	bl	8007a24 <HAL_GPIO_WritePin>
}
 80039c2:	e042      	b.n	8003a4a <MotorDirection_SetUp+0xba>
	else if (a->MotorNumber == 2){
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d112      	bne.n	80039f4 <MotorDirection_SetUp+0x64>
		if(a->MotorDirection == 1){
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d106      	bne.n	80039e6 <MotorDirection_SetUp+0x56>
			Motor2_Nreset_direction;
 80039d8:	2201      	movs	r2, #1
 80039da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039de:	481d      	ldr	r0, [pc, #116]	; (8003a54 <MotorDirection_SetUp+0xc4>)
 80039e0:	f004 f820 	bl	8007a24 <HAL_GPIO_WritePin>
}
 80039e4:	e031      	b.n	8003a4a <MotorDirection_SetUp+0xba>
			Motor2_reset_direction;
 80039e6:	2200      	movs	r2, #0
 80039e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039ec:	4819      	ldr	r0, [pc, #100]	; (8003a54 <MotorDirection_SetUp+0xc4>)
 80039ee:	f004 f819 	bl	8007a24 <HAL_GPIO_WritePin>
}
 80039f2:	e02a      	b.n	8003a4a <MotorDirection_SetUp+0xba>
	else if (a->MotorNumber == 3){
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039fa:	2b03      	cmp	r3, #3
 80039fc:	d110      	bne.n	8003a20 <MotorDirection_SetUp+0x90>
		if(a->MotorDirection == 1){
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d105      	bne.n	8003a14 <MotorDirection_SetUp+0x84>
			Motor3_Nreset_direction;
 8003a08:	2200      	movs	r2, #0
 8003a0a:	2102      	movs	r1, #2
 8003a0c:	4812      	ldr	r0, [pc, #72]	; (8003a58 <MotorDirection_SetUp+0xc8>)
 8003a0e:	f004 f809 	bl	8007a24 <HAL_GPIO_WritePin>
}
 8003a12:	e01a      	b.n	8003a4a <MotorDirection_SetUp+0xba>
			Motor3_reset_direction;
 8003a14:	2201      	movs	r2, #1
 8003a16:	2102      	movs	r1, #2
 8003a18:	480f      	ldr	r0, [pc, #60]	; (8003a58 <MotorDirection_SetUp+0xc8>)
 8003a1a:	f004 f803 	bl	8007a24 <HAL_GPIO_WritePin>
}
 8003a1e:	e014      	b.n	8003a4a <MotorDirection_SetUp+0xba>
	else if (a->MotorNumber == 4){
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	d10f      	bne.n	8003a4a <MotorDirection_SetUp+0xba>
		if(a->MotorDirection == 1){
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d105      	bne.n	8003a40 <MotorDirection_SetUp+0xb0>
			Motor4_Nreset_direction;
 8003a34:	2200      	movs	r2, #0
 8003a36:	2110      	movs	r1, #16
 8003a38:	4807      	ldr	r0, [pc, #28]	; (8003a58 <MotorDirection_SetUp+0xc8>)
 8003a3a:	f003 fff3 	bl	8007a24 <HAL_GPIO_WritePin>
}
 8003a3e:	e004      	b.n	8003a4a <MotorDirection_SetUp+0xba>
			Motor4_reset_direction;
 8003a40:	2201      	movs	r2, #1
 8003a42:	2110      	movs	r1, #16
 8003a44:	4804      	ldr	r0, [pc, #16]	; (8003a58 <MotorDirection_SetUp+0xc8>)
 8003a46:	f003 ffed 	bl	8007a24 <HAL_GPIO_WritePin>
}
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40020400 	.word	0x40020400
 8003a58:	40021000 	.word	0x40021000

08003a5c <MotorMove_steps>:

/*            *****************    0x40-0b01000000 电机参数控制模式 ：  ******************
根据协议，通过USART5进行出串口通讯，输入步进电机的【编号、方向、速度、距离、启动速度、加减速频率】电机运动参数
***特别注意： 调试模式如果增加打印信息，在连续执行函数时，会造成10-20ms的延时，***/
void MotorMove_steps(struct MotorDefine *temp)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
	if (Motor[temp->MotorNumber].Status == 1){
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4a47      	ldr	r2, [pc, #284]	; (8003b8c <MotorMove_steps+0x130>)
 8003a6e:	460b      	mov	r3, r1
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	440b      	add	r3, r1
 8003a74:	015b      	lsls	r3, r3, #5
 8003a76:	4413      	add	r3, r2
 8003a78:	3330      	adds	r3, #48	; 0x30
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d110      	bne.n	8003aa2 <MotorMove_steps+0x46>
		printf("[WRONG] Motor Moved Failed,Motor%d is busy!\r\n",Motor[temp->MotorNumber].MotorNumber);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a86:	4619      	mov	r1, r3
 8003a88:	4a40      	ldr	r2, [pc, #256]	; (8003b8c <MotorMove_steps+0x130>)
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	440b      	add	r3, r1
 8003a90:	015b      	lsls	r3, r3, #5
 8003a92:	4413      	add	r3, r2
 8003a94:	3320      	adds	r3, #32
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	4619      	mov	r1, r3
 8003a9a:	483d      	ldr	r0, [pc, #244]	; (8003b90 <MotorMove_steps+0x134>)
 8003a9c:	f00b fbb4 	bl	800f208 <iprintf>
		return ;
 8003aa0:	e19c      	b.n	8003ddc <MotorMove_steps+0x380>
	}
	else {
		Motor[temp->MotorNumber].Status = 1 ;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4a38      	ldr	r2, [pc, #224]	; (8003b8c <MotorMove_steps+0x130>)
 8003aac:	460b      	mov	r3, r1
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	440b      	add	r3, r1
 8003ab2:	015b      	lsls	r3, r3, #5
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3330      	adds	r3, #48	; 0x30
 8003ab8:	2201      	movs	r2, #1
 8003aba:	701a      	strb	r2, [r3, #0]
	}

	temp->deceleration_ratio = Motor[temp->MotorNumber].deceleration_ratio ;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4a31      	ldr	r2, [pc, #196]	; (8003b8c <MotorMove_steps+0x130>)
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	440b      	add	r3, r1
 8003acc:	015b      	lsls	r3, r3, #5
 8003ace:	4413      	add	r3, r2
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	601a      	str	r2, [r3, #0]
	temp->step_angle = Motor[temp->MotorNumber].step_angle ;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003adc:	4619      	mov	r1, r3
 8003ade:	4a2b      	ldr	r2, [pc, #172]	; (8003b8c <MotorMove_steps+0x130>)
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	440b      	add	r3, r1
 8003ae6:	015b      	lsls	r3, r3, #5
 8003ae8:	4413      	add	r3, r2
 8003aea:	3304      	adds	r3, #4
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	605a      	str	r2, [r3, #4]
	temp->mircro_steps = Motor[temp->MotorNumber].mircro_steps ;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003af8:	4619      	mov	r1, r3
 8003afa:	4a24      	ldr	r2, [pc, #144]	; (8003b8c <MotorMove_steps+0x130>)
 8003afc:	460b      	mov	r3, r1
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	440b      	add	r3, r1
 8003b02:	015b      	lsls	r3, r3, #5
 8003b04:	4413      	add	r3, r2
 8003b06:	3308      	adds	r3, #8
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	609a      	str	r2, [r3, #8]
	temp->MaxSpeedInRads = Motor[temp->MotorNumber].MaxSpeedInRads ;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b14:	4619      	mov	r1, r3
 8003b16:	4a1d      	ldr	r2, [pc, #116]	; (8003b8c <MotorMove_steps+0x130>)
 8003b18:	460b      	mov	r3, r1
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	440b      	add	r3, r1
 8003b1e:	015b      	lsls	r3, r3, #5
 8003b20:	4413      	add	r3, r2
 8003b22:	330c      	adds	r3, #12
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	60da      	str	r2, [r3, #12]
	temp->htim_x = Motor[temp->MotorNumber].htim_x ;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b30:	4619      	mov	r1, r3
 8003b32:	4a16      	ldr	r2, [pc, #88]	; (8003b8c <MotorMove_steps+0x130>)
 8003b34:	460b      	mov	r3, r1
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	440b      	add	r3, r1
 8003b3a:	015b      	lsls	r3, r3, #5
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3334      	adds	r3, #52	; 0x34
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	635a      	str	r2, [r3, #52]	; 0x34

	if(temp->DesiredSpeedInRads > temp->MaxSpeedInRads)  // 判断电机设置速度是否超过最大转速
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	ed93 7a05 	vldr	s14, [r3, #20]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b5a:	dd1f      	ble.n	8003b9c <MotorMove_steps+0x140>
	{
		printf("[WRONG] Setup Speed faster than max speed:%.2f rad/s !\r\n",temp->MaxSpeedInRads);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fc fcf1 	bl	8000548 <__aeabi_f2d>
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	480a      	ldr	r0, [pc, #40]	; (8003b94 <MotorMove_steps+0x138>)
 8003b6c:	f00b fb4c 	bl	800f208 <iprintf>
		Motor[temp->MotorNumber].Status = 0 ;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b76:	4619      	mov	r1, r3
 8003b78:	4a04      	ldr	r2, [pc, #16]	; (8003b8c <MotorMove_steps+0x130>)
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	440b      	add	r3, r1
 8003b80:	015b      	lsls	r3, r3, #5
 8003b82:	4413      	add	r3, r2
 8003b84:	3330      	adds	r3, #48	; 0x30
 8003b86:	2200      	movs	r2, #0
 8003b88:	701a      	strb	r2, [r3, #0]
		return ;
 8003b8a:	e127      	b.n	8003ddc <MotorMove_steps+0x380>
 8003b8c:	2000088c 	.word	0x2000088c
 8003b90:	080116e4 	.word	0x080116e4
 8003b94:	08011714 	.word	0x08011714
 8003b98:	43b40000 	.word	0x43b40000
	}

	// 计算： 单圈步数、启动速度、目标速度、行进步数、加减速时间
	temp->StepsInOneCircle = (360 / temp->step_angle) * temp->deceleration_ratio * temp->mircro_steps;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ba2:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8003b98 <MotorMove_steps+0x13c>
 8003ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	edd3 7a00 	vldr	s15, [r3]
 8003bb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	ee07 3a90 	vmov	s15, r3
 8003bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bc8:	ee17 2a90 	vmov	r2, s15
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	639a      	str	r2, [r3, #56]	; 0x38
	temp->StartupSpeedInHz = temp->StepsInOneCircle * temp->StartupSpeedInRads ;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd4:	ee07 3a90 	vmov	s15, r3
 8003bd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	edd3 7a04 	vldr	s15, [r3, #16]
 8003be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003be6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bea:	ee17 2a90 	vmov	r2, s15
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	63da      	str	r2, [r3, #60]	; 0x3c
	temp->ActualSpeedInHz = temp->StartupSpeedInHz;						// 设定初始实际频率为启动频率
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	641a      	str	r2, [r3, #64]	; 0x40
	temp->DesiredSpeedInHz = temp->StepsInOneCircle * temp->DesiredSpeedInRads ;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfe:	ee07 3a90 	vmov	s15, r3
 8003c02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	edd3 7a05 	vldr	s15, [r3, #20]
 8003c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c14:	ee17 2a90 	vmov	r2, s15
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	645a      	str	r2, [r3, #68]	; 0x44
	temp->StepperSpeedTMR = MOTORTIM_TMR / temp->ActualSpeedInHz;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	4a70      	ldr	r2, [pc, #448]	; (8003de4 <MotorMove_steps+0x388>)
 8003c22:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	649a      	str	r2, [r3, #72]	; 0x48
	temp->NumberofSteps = temp->NumberofRads * temp->StepsInOneCircle ;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c34:	ee07 3a90 	vmov	s15, r3
 8003c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c44:	ee17 2a90 	vmov	r2, s15
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	64da      	str	r2, [r3, #76]	; 0x4c

	Motor_AccelDecel_waveCalculate(temp);  // 计算电机加减速曲线
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff fde7 	bl	8003820 <Motor_AccelDecel_waveCalculate>

	Motor[temp->MotorNumber].StepsInOneCircle = temp->StepsInOneCircle ;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c5e:	4962      	ldr	r1, [pc, #392]	; (8003de8 <MotorMove_steps+0x38c>)
 8003c60:	4603      	mov	r3, r0
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	4403      	add	r3, r0
 8003c66:	015b      	lsls	r3, r3, #5
 8003c68:	440b      	add	r3, r1
 8003c6a:	3338      	adds	r3, #56	; 0x38
 8003c6c:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].StartupSpeedInHz = temp->StartupSpeedInHz ;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c74:	4618      	mov	r0, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c7a:	495b      	ldr	r1, [pc, #364]	; (8003de8 <MotorMove_steps+0x38c>)
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	4403      	add	r3, r0
 8003c82:	015b      	lsls	r3, r3, #5
 8003c84:	440b      	add	r3, r1
 8003c86:	333c      	adds	r3, #60	; 0x3c
 8003c88:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].ActualSpeedInHz = temp->ActualSpeedInHz ;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c90:	4618      	mov	r0, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c96:	4954      	ldr	r1, [pc, #336]	; (8003de8 <MotorMove_steps+0x38c>)
 8003c98:	4603      	mov	r3, r0
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	4403      	add	r3, r0
 8003c9e:	015b      	lsls	r3, r3, #5
 8003ca0:	440b      	add	r3, r1
 8003ca2:	3340      	adds	r3, #64	; 0x40
 8003ca4:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].DesiredSpeedInHz = temp->DesiredSpeedInHz ;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cac:	4618      	mov	r0, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cb2:	494d      	ldr	r1, [pc, #308]	; (8003de8 <MotorMove_steps+0x38c>)
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	4403      	add	r3, r0
 8003cba:	015b      	lsls	r3, r3, #5
 8003cbc:	440b      	add	r3, r1
 8003cbe:	3344      	adds	r3, #68	; 0x44
 8003cc0:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].StepperSpeedTMR = temp->StepperSpeedTMR ;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cce:	4946      	ldr	r1, [pc, #280]	; (8003de8 <MotorMove_steps+0x38c>)
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	4403      	add	r3, r0
 8003cd6:	015b      	lsls	r3, r3, #5
 8003cd8:	440b      	add	r3, r1
 8003cda:	3348      	adds	r3, #72	; 0x48
 8003cdc:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].NumberofSteps = temp->NumberofSteps ;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cea:	493f      	ldr	r1, [pc, #252]	; (8003de8 <MotorMove_steps+0x38c>)
 8003cec:	4603      	mov	r3, r0
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	4403      	add	r3, r0
 8003cf2:	015b      	lsls	r3, r3, #5
 8003cf4:	440b      	add	r3, r1
 8003cf6:	334c      	adds	r3, #76	; 0x4c
 8003cf8:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].MotorDirection = temp->MotorDirection ;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d00:	4619      	mov	r1, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
 8003d08:	4a37      	ldr	r2, [pc, #220]	; (8003de8 <MotorMove_steps+0x38c>)
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	440b      	add	r3, r1
 8003d10:	015b      	lsls	r3, r3, #5
 8003d12:	4413      	add	r3, r2
 8003d14:	3321      	adds	r3, #33	; 0x21
 8003d16:	4602      	mov	r2, r0
 8003d18:	701a      	strb	r2, [r3, #0]
	Motor[temp->MotorNumber].NumberofSteps_StopAccel = temp->NumberofSteps_StopAccel ;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d20:	4618      	mov	r0, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d26:	4930      	ldr	r1, [pc, #192]	; (8003de8 <MotorMove_steps+0x38c>)
 8003d28:	4603      	mov	r3, r0
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	4403      	add	r3, r0
 8003d2e:	015b      	lsls	r3, r3, #5
 8003d30:	440b      	add	r3, r1
 8003d32:	3350      	adds	r3, #80	; 0x50
 8003d34:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].NumberofSteps_BeginDecel = temp->NumberofSteps_BeginDecel ;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d42:	4929      	ldr	r1, [pc, #164]	; (8003de8 <MotorMove_steps+0x38c>)
 8003d44:	4603      	mov	r3, r0
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	4403      	add	r3, r0
 8003d4a:	015b      	lsls	r3, r3, #5
 8003d4c:	440b      	add	r3, r1
 8003d4e:	3354      	adds	r3, #84	; 0x54
 8003d50:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].AccelerationTimeTMR = temp->AccelerationTimeTMR ;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003d5e:	4922      	ldr	r1, [pc, #136]	; (8003de8 <MotorMove_steps+0x38c>)
 8003d60:	4603      	mov	r3, r0
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	4403      	add	r3, r0
 8003d66:	015b      	lsls	r3, r3, #5
 8003d68:	440b      	add	r3, r1
 8003d6a:	3358      	adds	r3, #88	; 0x58
 8003d6c:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].DecelerationTimeTMR = temp->DecelerationTimeTMR ;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d74:	4618      	mov	r0, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d7a:	491b      	ldr	r1, [pc, #108]	; (8003de8 <MotorMove_steps+0x38c>)
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	4403      	add	r3, r0
 8003d82:	015b      	lsls	r3, r3, #5
 8003d84:	440b      	add	r3, r1
 8003d86:	335c      	adds	r3, #92	; 0x5c
 8003d88:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].TargetPosition = -16777200 ; //暂时设置目标位置为无法达到的值，参数控制模式用步进数控制中断停止
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d90:	4619      	mov	r1, r3
 8003d92:	4a15      	ldr	r2, [pc, #84]	; (8003de8 <MotorMove_steps+0x38c>)
 8003d94:	460b      	mov	r3, r1
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	440b      	add	r3, r1
 8003d9a:	015b      	lsls	r3, r3, #5
 8003d9c:	4413      	add	r3, r2
 8003d9e:	332c      	adds	r3, #44	; 0x2c
 8003da0:	4a12      	ldr	r2, [pc, #72]	; (8003dec <MotorMove_steps+0x390>)
 8003da2:	601a      	str	r2, [r3, #0]

	MotorDirection_SetUp(&Motor[temp->MotorNumber]) ;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003daa:	461a      	mov	r2, r3
 8003dac:	4613      	mov	r3, r2
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	4413      	add	r3, r2
 8003db2:	015b      	lsls	r3, r3, #5
 8003db4:	4a0c      	ldr	r2, [pc, #48]	; (8003de8 <MotorMove_steps+0x38c>)
 8003db6:	4413      	add	r3, r2
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff fde9 	bl	8003990 <MotorDirection_SetUp>
	HAL_TIM_Base_Start_IT(Motor[temp->MotorNumber].htim_x);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4a08      	ldr	r2, [pc, #32]	; (8003de8 <MotorMove_steps+0x38c>)
 8003dc8:	460b      	mov	r3, r1
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	440b      	add	r3, r1
 8003dce:	015b      	lsls	r3, r3, #5
 8003dd0:	4413      	add	r3, r2
 8003dd2:	3334      	adds	r3, #52	; 0x34
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f006 f982 	bl	800a0e0 <HAL_TIM_Base_Start_IT>
}
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	000186a0 	.word	0x000186a0
 8003de8:	2000088c 	.word	0x2000088c
 8003dec:	ff000010 	.word	0xff000010

08003df0 <MotorMove_position>:

/*            *****************    0x80-0b10000000 电机位置控制模式 ：  ******************
根据协议，通过USART5进行出串口通讯，输入步进电机的 【地址+目标位置】 即可，使用程序本身的电机参数控制运动
***特别注意： 调试模式如果增加打印信息，在连续执行函数时，会造成10-20ms的延时，***/
void MotorMove_position(struct MotorDefine *temp  , int32_t targer_position)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
	if (Motor[temp->MotorNumber].Status == 1){
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e00:	4619      	mov	r1, r3
 8003e02:	4acf      	ldr	r2, [pc, #828]	; (8004140 <MotorMove_position+0x350>)
 8003e04:	460b      	mov	r3, r1
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	440b      	add	r3, r1
 8003e0a:	015b      	lsls	r3, r3, #5
 8003e0c:	4413      	add	r3, r2
 8003e0e:	3330      	adds	r3, #48	; 0x30
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d110      	bne.n	8003e38 <MotorMove_position+0x48>
		printf("[WRONG] Position Set Failed,Motor%d is busy!\r\n",Motor[temp->MotorNumber].MotorNumber);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4ac8      	ldr	r2, [pc, #800]	; (8004140 <MotorMove_position+0x350>)
 8003e20:	460b      	mov	r3, r1
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	440b      	add	r3, r1
 8003e26:	015b      	lsls	r3, r3, #5
 8003e28:	4413      	add	r3, r2
 8003e2a:	3320      	adds	r3, #32
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	4619      	mov	r1, r3
 8003e30:	48c4      	ldr	r0, [pc, #784]	; (8004144 <MotorMove_position+0x354>)
 8003e32:	f00b f9e9 	bl	800f208 <iprintf>
		return ;
 8003e36:	e2fb      	b.n	8004430 <MotorMove_position+0x640>
	}
	else {
		Motor[temp->MotorNumber].Status = 1 ;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4abf      	ldr	r2, [pc, #764]	; (8004140 <MotorMove_position+0x350>)
 8003e42:	460b      	mov	r3, r1
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	440b      	add	r3, r1
 8003e48:	015b      	lsls	r3, r3, #5
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3330      	adds	r3, #48	; 0x30
 8003e4e:	2201      	movs	r2, #1
 8003e50:	701a      	strb	r2, [r3, #0]
	}

	Motor[temp->MotorNumber].StepsInOneCircle = (360 / Motor[temp->MotorNumber].step_angle) * Motor[temp->MotorNumber].deceleration_ratio * Motor[temp->MotorNumber].mircro_steps;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4ab9      	ldr	r2, [pc, #740]	; (8004140 <MotorMove_position+0x350>)
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	440b      	add	r3, r1
 8003e62:	015b      	lsls	r3, r3, #5
 8003e64:	4413      	add	r3, r2
 8003e66:	3304      	adds	r3, #4
 8003e68:	edd3 7a00 	vldr	s15, [r3]
 8003e6c:	eddf 6ab6 	vldr	s13, [pc, #728]	; 8004148 <MotorMove_position+0x358>
 8003e70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4ab0      	ldr	r2, [pc, #704]	; (8004140 <MotorMove_position+0x350>)
 8003e7e:	460b      	mov	r3, r1
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	440b      	add	r3, r1
 8003e84:	015b      	lsls	r3, r3, #5
 8003e86:	4413      	add	r3, r2
 8003e88:	edd3 7a00 	vldr	s15, [r3]
 8003e8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e96:	4619      	mov	r1, r3
 8003e98:	4aa9      	ldr	r2, [pc, #676]	; (8004140 <MotorMove_position+0x350>)
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	440b      	add	r3, r1
 8003ea0:	015b      	lsls	r3, r3, #5
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3308      	adds	r3, #8
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	ee07 3a90 	vmov	s15, r3
 8003eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003eba:	4619      	mov	r1, r3
 8003ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ec0:	ee17 0a90 	vmov	r0, s15
 8003ec4:	4a9e      	ldr	r2, [pc, #632]	; (8004140 <MotorMove_position+0x350>)
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	440b      	add	r3, r1
 8003ecc:	015b      	lsls	r3, r3, #5
 8003ece:	4413      	add	r3, r2
 8003ed0:	3338      	adds	r3, #56	; 0x38
 8003ed2:	6018      	str	r0, [r3, #0]
	Motor[temp->MotorNumber].StartupSpeedInHz = Motor[temp->MotorNumber].StepsInOneCircle * Motor[temp->MotorNumber].StartupSpeedInRads ;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003eda:	4619      	mov	r1, r3
 8003edc:	4a98      	ldr	r2, [pc, #608]	; (8004140 <MotorMove_position+0x350>)
 8003ede:	460b      	mov	r3, r1
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	440b      	add	r3, r1
 8003ee4:	015b      	lsls	r3, r3, #5
 8003ee6:	4413      	add	r3, r2
 8003ee8:	3338      	adds	r3, #56	; 0x38
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	ee07 3a90 	vmov	s15, r3
 8003ef0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003efa:	4619      	mov	r1, r3
 8003efc:	4a90      	ldr	r2, [pc, #576]	; (8004140 <MotorMove_position+0x350>)
 8003efe:	460b      	mov	r3, r1
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	440b      	add	r3, r1
 8003f04:	015b      	lsls	r3, r3, #5
 8003f06:	4413      	add	r3, r2
 8003f08:	3310      	adds	r3, #16
 8003f0a:	edd3 7a00 	vldr	s15, [r3]
 8003f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f1e:	ee17 0a90 	vmov	r0, s15
 8003f22:	4a87      	ldr	r2, [pc, #540]	; (8004140 <MotorMove_position+0x350>)
 8003f24:	460b      	mov	r3, r1
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	440b      	add	r3, r1
 8003f2a:	015b      	lsls	r3, r3, #5
 8003f2c:	4413      	add	r3, r2
 8003f2e:	333c      	adds	r3, #60	; 0x3c
 8003f30:	6018      	str	r0, [r3, #0]
	Motor[temp->MotorNumber].ActualSpeedInHz = Motor[temp->MotorNumber].StartupSpeedInHz;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f38:	4619      	mov	r1, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f40:	4618      	mov	r0, r3
 8003f42:	4a7f      	ldr	r2, [pc, #508]	; (8004140 <MotorMove_position+0x350>)
 8003f44:	460b      	mov	r3, r1
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	440b      	add	r3, r1
 8003f4a:	015b      	lsls	r3, r3, #5
 8003f4c:	4413      	add	r3, r2
 8003f4e:	333c      	adds	r3, #60	; 0x3c
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	497b      	ldr	r1, [pc, #492]	; (8004140 <MotorMove_position+0x350>)
 8003f54:	4603      	mov	r3, r0
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	4403      	add	r3, r0
 8003f5a:	015b      	lsls	r3, r3, #5
 8003f5c:	440b      	add	r3, r1
 8003f5e:	3340      	adds	r3, #64	; 0x40
 8003f60:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].DesiredSpeedInHz = Motor[temp->MotorNumber].StepsInOneCircle * Motor[temp->MotorNumber].DesiredSpeedInRads ;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4a75      	ldr	r2, [pc, #468]	; (8004140 <MotorMove_position+0x350>)
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	440b      	add	r3, r1
 8003f72:	015b      	lsls	r3, r3, #5
 8003f74:	4413      	add	r3, r2
 8003f76:	3338      	adds	r3, #56	; 0x38
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	ee07 3a90 	vmov	s15, r3
 8003f7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4a6d      	ldr	r2, [pc, #436]	; (8004140 <MotorMove_position+0x350>)
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	440b      	add	r3, r1
 8003f92:	015b      	lsls	r3, r3, #5
 8003f94:	4413      	add	r3, r2
 8003f96:	3314      	adds	r3, #20
 8003f98:	edd3 7a00 	vldr	s15, [r3]
 8003f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fac:	ee17 0a90 	vmov	r0, s15
 8003fb0:	4a63      	ldr	r2, [pc, #396]	; (8004140 <MotorMove_position+0x350>)
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	440b      	add	r3, r1
 8003fb8:	015b      	lsls	r3, r3, #5
 8003fba:	4413      	add	r3, r2
 8003fbc:	3344      	adds	r3, #68	; 0x44
 8003fbe:	6018      	str	r0, [r3, #0]
	Motor[temp->MotorNumber].StepperSpeedTMR = MOTORTIM_TMR / Motor[temp->MotorNumber].ActualSpeedInHz;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4a5d      	ldr	r2, [pc, #372]	; (8004140 <MotorMove_position+0x350>)
 8003fca:	460b      	mov	r3, r1
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	440b      	add	r3, r1
 8003fd0:	015b      	lsls	r3, r3, #5
 8003fd2:	4413      	add	r3, r2
 8003fd4:	3340      	adds	r3, #64	; 0x40
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003fde:	4610      	mov	r0, r2
 8003fe0:	4a5a      	ldr	r2, [pc, #360]	; (800414c <MotorMove_position+0x35c>)
 8003fe2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fe6:	4956      	ldr	r1, [pc, #344]	; (8004140 <MotorMove_position+0x350>)
 8003fe8:	4603      	mov	r3, r0
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	4403      	add	r3, r0
 8003fee:	015b      	lsls	r3, r3, #5
 8003ff0:	440b      	add	r3, r1
 8003ff2:	3348      	adds	r3, #72	; 0x48
 8003ff4:	601a      	str	r2, [r3, #0]

	Motor[temp->MotorNumber].TargetPosition = targer_position ;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4a50      	ldr	r2, [pc, #320]	; (8004140 <MotorMove_position+0x350>)
 8004000:	460b      	mov	r3, r1
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	440b      	add	r3, r1
 8004006:	015b      	lsls	r3, r3, #5
 8004008:	4413      	add	r3, r2
 800400a:	332c      	adds	r3, #44	; 0x2c
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].NumberofSteps = abs(Motor[temp->MotorNumber].TargetPosition  -  Motor[temp->MotorNumber].StepPosition) ;//计算总步数
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004016:	4619      	mov	r1, r3
 8004018:	4a49      	ldr	r2, [pc, #292]	; (8004140 <MotorMove_position+0x350>)
 800401a:	460b      	mov	r3, r1
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	440b      	add	r3, r1
 8004020:	015b      	lsls	r3, r3, #5
 8004022:	4413      	add	r3, r2
 8004024:	332c      	adds	r3, #44	; 0x2c
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800402e:	4618      	mov	r0, r3
 8004030:	4943      	ldr	r1, [pc, #268]	; (8004140 <MotorMove_position+0x350>)
 8004032:	4603      	mov	r3, r0
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	4403      	add	r3, r0
 8004038:	015b      	lsls	r3, r3, #5
 800403a:	440b      	add	r3, r1
 800403c:	3328      	adds	r3, #40	; 0x28
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004046:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004050:	4619      	mov	r1, r3
 8004052:	4610      	mov	r0, r2
 8004054:	4a3a      	ldr	r2, [pc, #232]	; (8004140 <MotorMove_position+0x350>)
 8004056:	460b      	mov	r3, r1
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	440b      	add	r3, r1
 800405c:	015b      	lsls	r3, r3, #5
 800405e:	4413      	add	r3, r2
 8004060:	334c      	adds	r3, #76	; 0x4c
 8004062:	6018      	str	r0, [r3, #0]
	if (Motor[temp->MotorNumber].TargetPosition == Motor[temp->MotorNumber].StepPosition){
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 3020 	ldrb.w	r3, [r3, #32]
 800406a:	4619      	mov	r1, r3
 800406c:	4a34      	ldr	r2, [pc, #208]	; (8004140 <MotorMove_position+0x350>)
 800406e:	460b      	mov	r3, r1
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	440b      	add	r3, r1
 8004074:	015b      	lsls	r3, r3, #5
 8004076:	4413      	add	r3, r2
 8004078:	332c      	adds	r3, #44	; 0x2c
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004082:	4618      	mov	r0, r3
 8004084:	492e      	ldr	r1, [pc, #184]	; (8004140 <MotorMove_position+0x350>)
 8004086:	4603      	mov	r3, r0
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	4403      	add	r3, r0
 800408c:	015b      	lsls	r3, r3, #5
 800408e:	440b      	add	r3, r1
 8004090:	3328      	adds	r3, #40	; 0x28
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d12b      	bne.n	80040f0 <MotorMove_position+0x300>
		Motor[temp->MotorNumber].Status = 0 ;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800409e:	4619      	mov	r1, r3
 80040a0:	4a27      	ldr	r2, [pc, #156]	; (8004140 <MotorMove_position+0x350>)
 80040a2:	460b      	mov	r3, r1
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	440b      	add	r3, r1
 80040a8:	015b      	lsls	r3, r3, #5
 80040aa:	4413      	add	r3, r2
 80040ac:	3330      	adds	r3, #48	; 0x30
 80040ae:	2200      	movs	r2, #0
 80040b0:	701a      	strb	r2, [r3, #0]
		printf("---KEEP---Motor%d Steps Position:%ld---\r\n",Motor[temp->MotorNumber].MotorNumber,Motor[temp->MotorNumber].StepPosition);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040b8:	4619      	mov	r1, r3
 80040ba:	4a21      	ldr	r2, [pc, #132]	; (8004140 <MotorMove_position+0x350>)
 80040bc:	460b      	mov	r3, r1
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	440b      	add	r3, r1
 80040c2:	015b      	lsls	r3, r3, #5
 80040c4:	4413      	add	r3, r2
 80040c6:	3320      	adds	r3, #32
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040d2:	4619      	mov	r1, r3
 80040d4:	4a1a      	ldr	r2, [pc, #104]	; (8004140 <MotorMove_position+0x350>)
 80040d6:	460b      	mov	r3, r1
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	440b      	add	r3, r1
 80040dc:	015b      	lsls	r3, r3, #5
 80040de:	4413      	add	r3, r2
 80040e0:	3328      	adds	r3, #40	; 0x28
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	461a      	mov	r2, r3
 80040e6:	4601      	mov	r1, r0
 80040e8:	4819      	ldr	r0, [pc, #100]	; (8004150 <MotorMove_position+0x360>)
 80040ea:	f00b f88d 	bl	800f208 <iprintf>
		return ;
 80040ee:	e19f      	b.n	8004430 <MotorMove_position+0x640>
	}
	else if (Motor[temp->MotorNumber].TargetPosition > Motor[temp->MotorNumber].StepPosition ){
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040f6:	4619      	mov	r1, r3
 80040f8:	4a11      	ldr	r2, [pc, #68]	; (8004140 <MotorMove_position+0x350>)
 80040fa:	460b      	mov	r3, r1
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	440b      	add	r3, r1
 8004100:	015b      	lsls	r3, r3, #5
 8004102:	4413      	add	r3, r2
 8004104:	332c      	adds	r3, #44	; 0x2c
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800410e:	4618      	mov	r0, r3
 8004110:	490b      	ldr	r1, [pc, #44]	; (8004140 <MotorMove_position+0x350>)
 8004112:	4603      	mov	r3, r0
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	4403      	add	r3, r0
 8004118:	015b      	lsls	r3, r3, #5
 800411a:	440b      	add	r3, r1
 800411c:	3328      	adds	r3, #40	; 0x28
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	dd17      	ble.n	8004154 <MotorMove_position+0x364>
		Motor[temp->MotorNumber].MotorDirection = 1 ;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3020 	ldrb.w	r3, [r3, #32]
 800412a:	4619      	mov	r1, r3
 800412c:	4a04      	ldr	r2, [pc, #16]	; (8004140 <MotorMove_position+0x350>)
 800412e:	460b      	mov	r3, r1
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	440b      	add	r3, r1
 8004134:	015b      	lsls	r3, r3, #5
 8004136:	4413      	add	r3, r2
 8004138:	3321      	adds	r3, #33	; 0x21
 800413a:	2201      	movs	r2, #1
 800413c:	701a      	strb	r2, [r3, #0]
 800413e:	e016      	b.n	800416e <MotorMove_position+0x37e>
 8004140:	2000088c 	.word	0x2000088c
 8004144:	08011750 	.word	0x08011750
 8004148:	43b40000 	.word	0x43b40000
 800414c:	000186a0 	.word	0x000186a0
 8004150:	08011780 	.word	0x08011780
	}
	else{
		Motor[temp->MotorNumber].MotorDirection = 0 ;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3020 	ldrb.w	r3, [r3, #32]
 800415a:	4619      	mov	r1, r3
 800415c:	4ab6      	ldr	r2, [pc, #728]	; (8004438 <MotorMove_position+0x648>)
 800415e:	460b      	mov	r3, r1
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	440b      	add	r3, r1
 8004164:	015b      	lsls	r3, r3, #5
 8004166:	4413      	add	r3, r2
 8004168:	3321      	adds	r3, #33	; 0x21
 800416a:	2200      	movs	r2, #0
 800416c:	701a      	strb	r2, [r3, #0]
	}

	Motor_AccelDecel_waveCalculate(&Motor[temp->MotorNumber]);  // 计算电机加减速曲线
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004174:	461a      	mov	r2, r3
 8004176:	4613      	mov	r3, r2
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	4413      	add	r3, r2
 800417c:	015b      	lsls	r3, r3, #5
 800417e:	4aae      	ldr	r2, [pc, #696]	; (8004438 <MotorMove_position+0x648>)
 8004180:	4413      	add	r3, r2
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff fb4c 	bl	8003820 <Motor_AccelDecel_waveCalculate>

	if (Motor[temp->MotorNumber].MotorNumber == 1)   // Motor1为传送带形式步进电机，非丝杆直线电机，方向控制和直线电机不一样
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800418e:	4619      	mov	r1, r3
 8004190:	4aa9      	ldr	r2, [pc, #676]	; (8004438 <MotorMove_position+0x648>)
 8004192:	460b      	mov	r3, r1
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	440b      	add	r3, r1
 8004198:	015b      	lsls	r3, r3, #5
 800419a:	4413      	add	r3, r2
 800419c:	3320      	adds	r3, #32
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	f040 8101 	bne.w	80043a8 <MotorMove_position+0x5b8>
	{
		Motor[temp->MotorNumber].NumberofSteps = Motor[temp->MotorNumber].NumberofSteps % Motor[temp->MotorNumber].StepsInOneCircle ;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041ac:	4619      	mov	r1, r3
 80041ae:	4aa2      	ldr	r2, [pc, #648]	; (8004438 <MotorMove_position+0x648>)
 80041b0:	460b      	mov	r3, r1
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	440b      	add	r3, r1
 80041b6:	015b      	lsls	r3, r3, #5
 80041b8:	4413      	add	r3, r2
 80041ba:	334c      	adds	r3, #76	; 0x4c
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041c4:	4618      	mov	r0, r3
 80041c6:	499c      	ldr	r1, [pc, #624]	; (8004438 <MotorMove_position+0x648>)
 80041c8:	4603      	mov	r3, r0
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	4403      	add	r3, r0
 80041ce:	015b      	lsls	r3, r3, #5
 80041d0:	440b      	add	r3, r1
 80041d2:	3338      	adds	r3, #56	; 0x38
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	f891 1020 	ldrb.w	r1, [r1, #32]
 80041dc:	4608      	mov	r0, r1
 80041de:	fbb2 f1f3 	udiv	r1, r2, r3
 80041e2:	fb01 f303 	mul.w	r3, r1, r3
 80041e6:	1ad2      	subs	r2, r2, r3
 80041e8:	4993      	ldr	r1, [pc, #588]	; (8004438 <MotorMove_position+0x648>)
 80041ea:	4603      	mov	r3, r0
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	4403      	add	r3, r0
 80041f0:	015b      	lsls	r3, r3, #5
 80041f2:	440b      	add	r3, r1
 80041f4:	334c      	adds	r3, #76	; 0x4c
 80041f6:	601a      	str	r2, [r3, #0]
		Motor[temp->MotorNumber].TargetPosition = Motor[temp->MotorNumber].TargetPosition % Motor[temp->MotorNumber].StepsInOneCircle ;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041fe:	4619      	mov	r1, r3
 8004200:	4a8d      	ldr	r2, [pc, #564]	; (8004438 <MotorMove_position+0x648>)
 8004202:	460b      	mov	r3, r1
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	440b      	add	r3, r1
 8004208:	015b      	lsls	r3, r3, #5
 800420a:	4413      	add	r3, r2
 800420c:	332c      	adds	r3, #44	; 0x2c
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	461a      	mov	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004218:	4618      	mov	r0, r3
 800421a:	4987      	ldr	r1, [pc, #540]	; (8004438 <MotorMove_position+0x648>)
 800421c:	4603      	mov	r3, r0
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	4403      	add	r3, r0
 8004222:	015b      	lsls	r3, r3, #5
 8004224:	440b      	add	r3, r1
 8004226:	3338      	adds	r3, #56	; 0x38
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	fbb2 f1f3 	udiv	r1, r2, r3
 800422e:	fb01 f303 	mul.w	r3, r1, r3
 8004232:	1ad2      	subs	r2, r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 3020 	ldrb.w	r3, [r3, #32]
 800423a:	4619      	mov	r1, r3
 800423c:	4610      	mov	r0, r2
 800423e:	4a7e      	ldr	r2, [pc, #504]	; (8004438 <MotorMove_position+0x648>)
 8004240:	460b      	mov	r3, r1
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	440b      	add	r3, r1
 8004246:	015b      	lsls	r3, r3, #5
 8004248:	4413      	add	r3, r2
 800424a:	332c      	adds	r3, #44	; 0x2c
 800424c:	6018      	str	r0, [r3, #0]
		if( Motor[temp->MotorNumber].NumberofSteps <= (Motor[temp->MotorNumber].StepsInOneCircle/2) ){  //如果计算出的步数小于半圈，则按照既定计算方向及进行
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004254:	4619      	mov	r1, r3
 8004256:	4a78      	ldr	r2, [pc, #480]	; (8004438 <MotorMove_position+0x648>)
 8004258:	460b      	mov	r3, r1
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	440b      	add	r3, r1
 800425e:	015b      	lsls	r3, r3, #5
 8004260:	4413      	add	r3, r2
 8004262:	334c      	adds	r3, #76	; 0x4c
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800426c:	4618      	mov	r0, r3
 800426e:	4972      	ldr	r1, [pc, #456]	; (8004438 <MotorMove_position+0x648>)
 8004270:	4603      	mov	r3, r0
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	4403      	add	r3, r0
 8004276:	015b      	lsls	r3, r3, #5
 8004278:	440b      	add	r3, r1
 800427a:	3338      	adds	r3, #56	; 0x38
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	085b      	lsrs	r3, r3, #1
 8004280:	429a      	cmp	r2, r3
 8004282:	d826      	bhi.n	80042d2 <MotorMove_position+0x4e2>
			Motor_AccelDecel_waveCalculate(&Motor[temp->MotorNumber]);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3020 	ldrb.w	r3, [r3, #32]
 800428a:	461a      	mov	r2, r3
 800428c:	4613      	mov	r3, r2
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	4413      	add	r3, r2
 8004292:	015b      	lsls	r3, r3, #5
 8004294:	4a68      	ldr	r2, [pc, #416]	; (8004438 <MotorMove_position+0x648>)
 8004296:	4413      	add	r3, r2
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff fac1 	bl	8003820 <Motor_AccelDecel_waveCalculate>
			if(Motor[temp->MotorNumber].MotorDirection == 1){
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042a4:	4619      	mov	r1, r3
 80042a6:	4a64      	ldr	r2, [pc, #400]	; (8004438 <MotorMove_position+0x648>)
 80042a8:	460b      	mov	r3, r1
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	440b      	add	r3, r1
 80042ae:	015b      	lsls	r3, r3, #5
 80042b0:	4413      	add	r3, r2
 80042b2:	3321      	adds	r3, #33	; 0x21
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d105      	bne.n	80042c6 <MotorMove_position+0x4d6>
				Motor1_Nreset_direction;
 80042ba:	2200      	movs	r2, #0
 80042bc:	2120      	movs	r1, #32
 80042be:	485f      	ldr	r0, [pc, #380]	; (800443c <MotorMove_position+0x64c>)
 80042c0:	f003 fbb0 	bl	8007a24 <HAL_GPIO_WritePin>
 80042c4:	e07d      	b.n	80043c2 <MotorMove_position+0x5d2>
			}
			else{
				Motor1_reset_direction;
 80042c6:	2201      	movs	r2, #1
 80042c8:	2120      	movs	r1, #32
 80042ca:	485c      	ldr	r0, [pc, #368]	; (800443c <MotorMove_position+0x64c>)
 80042cc:	f003 fbaa 	bl	8007a24 <HAL_GPIO_WritePin>
 80042d0:	e077      	b.n	80043c2 <MotorMove_position+0x5d2>
			}
		}
		else{
			Motor[temp->MotorNumber].NumberofSteps = abs (Motor[temp->MotorNumber].StepsInOneCircle - Motor[temp->MotorNumber].NumberofSteps);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042d8:	4619      	mov	r1, r3
 80042da:	4a57      	ldr	r2, [pc, #348]	; (8004438 <MotorMove_position+0x648>)
 80042dc:	460b      	mov	r3, r1
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	440b      	add	r3, r1
 80042e2:	015b      	lsls	r3, r3, #5
 80042e4:	4413      	add	r3, r2
 80042e6:	3338      	adds	r3, #56	; 0x38
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042f0:	4618      	mov	r0, r3
 80042f2:	4951      	ldr	r1, [pc, #324]	; (8004438 <MotorMove_position+0x648>)
 80042f4:	4603      	mov	r3, r0
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	4403      	add	r3, r0
 80042fa:	015b      	lsls	r3, r3, #5
 80042fc:	440b      	add	r3, r1
 80042fe:	334c      	adds	r3, #76	; 0x4c
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004308:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004312:	4619      	mov	r1, r3
 8004314:	4610      	mov	r0, r2
 8004316:	4a48      	ldr	r2, [pc, #288]	; (8004438 <MotorMove_position+0x648>)
 8004318:	460b      	mov	r3, r1
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	440b      	add	r3, r1
 800431e:	015b      	lsls	r3, r3, #5
 8004320:	4413      	add	r3, r2
 8004322:	334c      	adds	r3, #76	; 0x4c
 8004324:	6018      	str	r0, [r3, #0]
			Motor_AccelDecel_waveCalculate(&Motor[temp->MotorNumber]);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 3020 	ldrb.w	r3, [r3, #32]
 800432c:	461a      	mov	r2, r3
 800432e:	4613      	mov	r3, r2
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	4413      	add	r3, r2
 8004334:	015b      	lsls	r3, r3, #5
 8004336:	4a40      	ldr	r2, [pc, #256]	; (8004438 <MotorMove_position+0x648>)
 8004338:	4413      	add	r3, r2
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff fa70 	bl	8003820 <Motor_AccelDecel_waveCalculate>
			if(Motor[temp->MotorNumber].MotorDirection == 1){
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004346:	4619      	mov	r1, r3
 8004348:	4a3b      	ldr	r2, [pc, #236]	; (8004438 <MotorMove_position+0x648>)
 800434a:	460b      	mov	r3, r1
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	440b      	add	r3, r1
 8004350:	015b      	lsls	r3, r3, #5
 8004352:	4413      	add	r3, r2
 8004354:	3321      	adds	r3, #33	; 0x21
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d112      	bne.n	8004382 <MotorMove_position+0x592>
				Motor[temp->MotorNumber].MotorDirection = 0;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004362:	4619      	mov	r1, r3
 8004364:	4a34      	ldr	r2, [pc, #208]	; (8004438 <MotorMove_position+0x648>)
 8004366:	460b      	mov	r3, r1
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	440b      	add	r3, r1
 800436c:	015b      	lsls	r3, r3, #5
 800436e:	4413      	add	r3, r2
 8004370:	3321      	adds	r3, #33	; 0x21
 8004372:	2200      	movs	r2, #0
 8004374:	701a      	strb	r2, [r3, #0]
				Motor1_reset_direction;
 8004376:	2201      	movs	r2, #1
 8004378:	2120      	movs	r1, #32
 800437a:	4830      	ldr	r0, [pc, #192]	; (800443c <MotorMove_position+0x64c>)
 800437c:	f003 fb52 	bl	8007a24 <HAL_GPIO_WritePin>
 8004380:	e01f      	b.n	80043c2 <MotorMove_position+0x5d2>
			}
			else{
				Motor[temp->MotorNumber].MotorDirection = 1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004388:	4619      	mov	r1, r3
 800438a:	4a2b      	ldr	r2, [pc, #172]	; (8004438 <MotorMove_position+0x648>)
 800438c:	460b      	mov	r3, r1
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	440b      	add	r3, r1
 8004392:	015b      	lsls	r3, r3, #5
 8004394:	4413      	add	r3, r2
 8004396:	3321      	adds	r3, #33	; 0x21
 8004398:	2201      	movs	r2, #1
 800439a:	701a      	strb	r2, [r3, #0]
				Motor1_Nreset_direction;
 800439c:	2200      	movs	r2, #0
 800439e:	2120      	movs	r1, #32
 80043a0:	4826      	ldr	r0, [pc, #152]	; (800443c <MotorMove_position+0x64c>)
 80043a2:	f003 fb3f 	bl	8007a24 <HAL_GPIO_WritePin>
 80043a6:	e00c      	b.n	80043c2 <MotorMove_position+0x5d2>
			}
		}
	}
	else{
		MotorDirection_SetUp(&Motor[temp->MotorNumber]) ;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043ae:	461a      	mov	r2, r3
 80043b0:	4613      	mov	r3, r2
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	4413      	add	r3, r2
 80043b6:	015b      	lsls	r3, r3, #5
 80043b8:	4a1f      	ldr	r2, [pc, #124]	; (8004438 <MotorMove_position+0x648>)
 80043ba:	4413      	add	r3, r2
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff fae7 	bl	8003990 <MotorDirection_SetUp>
	}
	//位置控制情况下，允许总步数多走10步，如果仍没有到达目标位置，则判定超时失败
	Motor[temp->MotorNumber].NumberofSteps = Motor[temp->MotorNumber].NumberofSteps + 5*Motor[temp->MotorNumber].mircro_steps;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043c8:	4619      	mov	r1, r3
 80043ca:	4a1b      	ldr	r2, [pc, #108]	; (8004438 <MotorMove_position+0x648>)
 80043cc:	460b      	mov	r3, r1
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	440b      	add	r3, r1
 80043d2:	015b      	lsls	r3, r3, #5
 80043d4:	4413      	add	r3, r2
 80043d6:	334c      	adds	r3, #76	; 0x4c
 80043d8:	6819      	ldr	r1, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043e0:	4618      	mov	r0, r3
 80043e2:	4a15      	ldr	r2, [pc, #84]	; (8004438 <MotorMove_position+0x648>)
 80043e4:	4603      	mov	r3, r0
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	4403      	add	r3, r0
 80043ea:	015b      	lsls	r3, r3, #5
 80043ec:	4413      	add	r3, r2
 80043ee:	3308      	adds	r3, #8
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	f892 2020 	ldrb.w	r2, [r2, #32]
 80043fe:	4610      	mov	r0, r2
 8004400:	18ca      	adds	r2, r1, r3
 8004402:	490d      	ldr	r1, [pc, #52]	; (8004438 <MotorMove_position+0x648>)
 8004404:	4603      	mov	r3, r0
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	4403      	add	r3, r0
 800440a:	015b      	lsls	r3, r3, #5
 800440c:	440b      	add	r3, r1
 800440e:	334c      	adds	r3, #76	; 0x4c
 8004410:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(Motor[temp->MotorNumber].htim_x);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004418:	4619      	mov	r1, r3
 800441a:	4a07      	ldr	r2, [pc, #28]	; (8004438 <MotorMove_position+0x648>)
 800441c:	460b      	mov	r3, r1
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	440b      	add	r3, r1
 8004422:	015b      	lsls	r3, r3, #5
 8004424:	4413      	add	r3, r2
 8004426:	3334      	adds	r3, #52	; 0x34
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f005 fe58 	bl	800a0e0 <HAL_TIM_Base_Start_IT>
}
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	2000088c 	.word	0x2000088c
 800443c:	40020400 	.word	0x40020400

08004440 <MotorMove_position_lowspeed>:

void MotorMove_position_lowspeed(struct MotorDefine *temp  , int32_t targer_position , float low_speed )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	ed87 0a01 	vstr	s0, [r7, #4]
	if (Motor[temp->MotorNumber].Status == 1){
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004454:	4619      	mov	r1, r3
 8004456:	4aa6      	ldr	r2, [pc, #664]	; (80046f0 <MotorMove_position_lowspeed+0x2b0>)
 8004458:	460b      	mov	r3, r1
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	440b      	add	r3, r1
 800445e:	015b      	lsls	r3, r3, #5
 8004460:	4413      	add	r3, r2
 8004462:	3330      	adds	r3, #48	; 0x30
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d110      	bne.n	800448c <MotorMove_position_lowspeed+0x4c>
		printf("[WRONG] Position Set Failed,Motor%d is busy!\r\n",Motor[temp->MotorNumber].MotorNumber);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004470:	4619      	mov	r1, r3
 8004472:	4a9f      	ldr	r2, [pc, #636]	; (80046f0 <MotorMove_position_lowspeed+0x2b0>)
 8004474:	460b      	mov	r3, r1
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	440b      	add	r3, r1
 800447a:	015b      	lsls	r3, r3, #5
 800447c:	4413      	add	r3, r2
 800447e:	3320      	adds	r3, #32
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	4619      	mov	r1, r3
 8004484:	489b      	ldr	r0, [pc, #620]	; (80046f4 <MotorMove_position_lowspeed+0x2b4>)
 8004486:	f00a febf 	bl	800f208 <iprintf>
		return ;
 800448a:	e299      	b.n	80049c0 <MotorMove_position_lowspeed+0x580>
	}
	else {
		Motor[temp->MotorNumber].Status = 1 ;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004492:	4619      	mov	r1, r3
 8004494:	4a96      	ldr	r2, [pc, #600]	; (80046f0 <MotorMove_position_lowspeed+0x2b0>)
 8004496:	460b      	mov	r3, r1
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	440b      	add	r3, r1
 800449c:	015b      	lsls	r3, r3, #5
 800449e:	4413      	add	r3, r2
 80044a0:	3330      	adds	r3, #48	; 0x30
 80044a2:	2201      	movs	r2, #1
 80044a4:	701a      	strb	r2, [r3, #0]
	}

	Motor[temp->MotorNumber].StepsInOneCircle = (360 / Motor[temp->MotorNumber].step_angle) * Motor[temp->MotorNumber].deceleration_ratio * Motor[temp->MotorNumber].mircro_steps;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044ac:	4619      	mov	r1, r3
 80044ae:	4a90      	ldr	r2, [pc, #576]	; (80046f0 <MotorMove_position_lowspeed+0x2b0>)
 80044b0:	460b      	mov	r3, r1
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	440b      	add	r3, r1
 80044b6:	015b      	lsls	r3, r3, #5
 80044b8:	4413      	add	r3, r2
 80044ba:	3304      	adds	r3, #4
 80044bc:	edd3 7a00 	vldr	s15, [r3]
 80044c0:	eddf 6a8d 	vldr	s13, [pc, #564]	; 80046f8 <MotorMove_position_lowspeed+0x2b8>
 80044c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044ce:	4619      	mov	r1, r3
 80044d0:	4a87      	ldr	r2, [pc, #540]	; (80046f0 <MotorMove_position_lowspeed+0x2b0>)
 80044d2:	460b      	mov	r3, r1
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	440b      	add	r3, r1
 80044d8:	015b      	lsls	r3, r3, #5
 80044da:	4413      	add	r3, r2
 80044dc:	edd3 7a00 	vldr	s15, [r3]
 80044e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044ea:	4619      	mov	r1, r3
 80044ec:	4a80      	ldr	r2, [pc, #512]	; (80046f0 <MotorMove_position_lowspeed+0x2b0>)
 80044ee:	460b      	mov	r3, r1
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	440b      	add	r3, r1
 80044f4:	015b      	lsls	r3, r3, #5
 80044f6:	4413      	add	r3, r2
 80044f8:	3308      	adds	r3, #8
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	ee07 3a90 	vmov	s15, r3
 8004500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004504:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800450e:	4619      	mov	r1, r3
 8004510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004514:	ee17 0a90 	vmov	r0, s15
 8004518:	4a75      	ldr	r2, [pc, #468]	; (80046f0 <MotorMove_position_lowspeed+0x2b0>)
 800451a:	460b      	mov	r3, r1
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	440b      	add	r3, r1
 8004520:	015b      	lsls	r3, r3, #5
 8004522:	4413      	add	r3, r2
 8004524:	3338      	adds	r3, #56	; 0x38
 8004526:	6018      	str	r0, [r3, #0]
	//Motor[temp->MotorNumber].StartupSpeedInHz = Motor[temp->MotorNumber].StepsInOneCircle * Motor[temp->MotorNumber].StartupSpeedInRads ;
	//Motor[temp->MotorNumber].ActualSpeedInHz = Motor[temp->MotorNumber].StartupSpeedInHz;
	Motor[temp->MotorNumber].ActualSpeedInHz = Motor[temp->MotorNumber].StepsInOneCircle * low_speed;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800452e:	4619      	mov	r1, r3
 8004530:	4a6f      	ldr	r2, [pc, #444]	; (80046f0 <MotorMove_position_lowspeed+0x2b0>)
 8004532:	460b      	mov	r3, r1
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	440b      	add	r3, r1
 8004538:	015b      	lsls	r3, r3, #5
 800453a:	4413      	add	r3, r2
 800453c:	3338      	adds	r3, #56	; 0x38
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	ee07 3a90 	vmov	s15, r3
 8004544:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004548:	edd7 7a01 	vldr	s15, [r7, #4]
 800454c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004556:	4619      	mov	r1, r3
 8004558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800455c:	ee17 0a90 	vmov	r0, s15
 8004560:	4a63      	ldr	r2, [pc, #396]	; (80046f0 <MotorMove_position_lowspeed+0x2b0>)
 8004562:	460b      	mov	r3, r1
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	440b      	add	r3, r1
 8004568:	015b      	lsls	r3, r3, #5
 800456a:	4413      	add	r3, r2
 800456c:	3340      	adds	r3, #64	; 0x40
 800456e:	6018      	str	r0, [r3, #0]
	//Motor[temp->MotorNumber].DesiredSpeedInHz = Motor[temp->MotorNumber].StepsInOneCircle * Motor[temp->MotorNumber].DesiredSpeedInRads ;
	Motor[temp->MotorNumber].StepperSpeedTMR = MOTORTIM_TMR / Motor[temp->MotorNumber].ActualSpeedInHz;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004576:	4619      	mov	r1, r3
 8004578:	4a5d      	ldr	r2, [pc, #372]	; (80046f0 <MotorMove_position_lowspeed+0x2b0>)
 800457a:	460b      	mov	r3, r1
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	440b      	add	r3, r1
 8004580:	015b      	lsls	r3, r3, #5
 8004582:	4413      	add	r3, r2
 8004584:	3340      	adds	r3, #64	; 0x40
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800458e:	4610      	mov	r0, r2
 8004590:	4a5a      	ldr	r2, [pc, #360]	; (80046fc <MotorMove_position_lowspeed+0x2bc>)
 8004592:	fbb2 f2f3 	udiv	r2, r2, r3
 8004596:	4956      	ldr	r1, [pc, #344]	; (80046f0 <MotorMove_position_lowspeed+0x2b0>)
 8004598:	4603      	mov	r3, r0
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	4403      	add	r3, r0
 800459e:	015b      	lsls	r3, r3, #5
 80045a0:	440b      	add	r3, r1
 80045a2:	3348      	adds	r3, #72	; 0x48
 80045a4:	601a      	str	r2, [r3, #0]

	Motor[temp->MotorNumber].TargetPosition = targer_position ;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045ac:	4619      	mov	r1, r3
 80045ae:	4a50      	ldr	r2, [pc, #320]	; (80046f0 <MotorMove_position_lowspeed+0x2b0>)
 80045b0:	460b      	mov	r3, r1
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	440b      	add	r3, r1
 80045b6:	015b      	lsls	r3, r3, #5
 80045b8:	4413      	add	r3, r2
 80045ba:	332c      	adds	r3, #44	; 0x2c
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].NumberofSteps = abs(Motor[temp->MotorNumber].TargetPosition  -  Motor[temp->MotorNumber].StepPosition) ;//计算总步数
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045c6:	4619      	mov	r1, r3
 80045c8:	4a49      	ldr	r2, [pc, #292]	; (80046f0 <MotorMove_position_lowspeed+0x2b0>)
 80045ca:	460b      	mov	r3, r1
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	440b      	add	r3, r1
 80045d0:	015b      	lsls	r3, r3, #5
 80045d2:	4413      	add	r3, r2
 80045d4:	332c      	adds	r3, #44	; 0x2c
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045de:	4618      	mov	r0, r3
 80045e0:	4943      	ldr	r1, [pc, #268]	; (80046f0 <MotorMove_position_lowspeed+0x2b0>)
 80045e2:	4603      	mov	r3, r0
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	4403      	add	r3, r0
 80045e8:	015b      	lsls	r3, r3, #5
 80045ea:	440b      	add	r3, r1
 80045ec:	3328      	adds	r3, #40	; 0x28
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80045f6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004600:	4619      	mov	r1, r3
 8004602:	4610      	mov	r0, r2
 8004604:	4a3a      	ldr	r2, [pc, #232]	; (80046f0 <MotorMove_position_lowspeed+0x2b0>)
 8004606:	460b      	mov	r3, r1
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	440b      	add	r3, r1
 800460c:	015b      	lsls	r3, r3, #5
 800460e:	4413      	add	r3, r2
 8004610:	334c      	adds	r3, #76	; 0x4c
 8004612:	6018      	str	r0, [r3, #0]
	if (Motor[temp->MotorNumber].TargetPosition == Motor[temp->MotorNumber].StepPosition){
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f893 3020 	ldrb.w	r3, [r3, #32]
 800461a:	4619      	mov	r1, r3
 800461c:	4a34      	ldr	r2, [pc, #208]	; (80046f0 <MotorMove_position_lowspeed+0x2b0>)
 800461e:	460b      	mov	r3, r1
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	440b      	add	r3, r1
 8004624:	015b      	lsls	r3, r3, #5
 8004626:	4413      	add	r3, r2
 8004628:	332c      	adds	r3, #44	; 0x2c
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004632:	4618      	mov	r0, r3
 8004634:	492e      	ldr	r1, [pc, #184]	; (80046f0 <MotorMove_position_lowspeed+0x2b0>)
 8004636:	4603      	mov	r3, r0
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	4403      	add	r3, r0
 800463c:	015b      	lsls	r3, r3, #5
 800463e:	440b      	add	r3, r1
 8004640:	3328      	adds	r3, #40	; 0x28
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d12b      	bne.n	80046a0 <MotorMove_position_lowspeed+0x260>
		Motor[temp->MotorNumber].Status = 0 ;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800464e:	4619      	mov	r1, r3
 8004650:	4a27      	ldr	r2, [pc, #156]	; (80046f0 <MotorMove_position_lowspeed+0x2b0>)
 8004652:	460b      	mov	r3, r1
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	440b      	add	r3, r1
 8004658:	015b      	lsls	r3, r3, #5
 800465a:	4413      	add	r3, r2
 800465c:	3330      	adds	r3, #48	; 0x30
 800465e:	2200      	movs	r2, #0
 8004660:	701a      	strb	r2, [r3, #0]
		printf("---KEEP---Motor%d Steps Position:%ld---\r\n",Motor[temp->MotorNumber].MotorNumber,Motor[temp->MotorNumber].StepPosition);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004668:	4619      	mov	r1, r3
 800466a:	4a21      	ldr	r2, [pc, #132]	; (80046f0 <MotorMove_position_lowspeed+0x2b0>)
 800466c:	460b      	mov	r3, r1
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	440b      	add	r3, r1
 8004672:	015b      	lsls	r3, r3, #5
 8004674:	4413      	add	r3, r2
 8004676:	3320      	adds	r3, #32
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	4618      	mov	r0, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004682:	4619      	mov	r1, r3
 8004684:	4a1a      	ldr	r2, [pc, #104]	; (80046f0 <MotorMove_position_lowspeed+0x2b0>)
 8004686:	460b      	mov	r3, r1
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	440b      	add	r3, r1
 800468c:	015b      	lsls	r3, r3, #5
 800468e:	4413      	add	r3, r2
 8004690:	3328      	adds	r3, #40	; 0x28
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	4601      	mov	r1, r0
 8004698:	4819      	ldr	r0, [pc, #100]	; (8004700 <MotorMove_position_lowspeed+0x2c0>)
 800469a:	f00a fdb5 	bl	800f208 <iprintf>
		return ;
 800469e:	e18f      	b.n	80049c0 <MotorMove_position_lowspeed+0x580>
	}
	else if (Motor[temp->MotorNumber].TargetPosition > Motor[temp->MotorNumber].StepPosition ){
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046a6:	4619      	mov	r1, r3
 80046a8:	4a11      	ldr	r2, [pc, #68]	; (80046f0 <MotorMove_position_lowspeed+0x2b0>)
 80046aa:	460b      	mov	r3, r1
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	440b      	add	r3, r1
 80046b0:	015b      	lsls	r3, r3, #5
 80046b2:	4413      	add	r3, r2
 80046b4:	332c      	adds	r3, #44	; 0x2c
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046be:	4618      	mov	r0, r3
 80046c0:	490b      	ldr	r1, [pc, #44]	; (80046f0 <MotorMove_position_lowspeed+0x2b0>)
 80046c2:	4603      	mov	r3, r0
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	4403      	add	r3, r0
 80046c8:	015b      	lsls	r3, r3, #5
 80046ca:	440b      	add	r3, r1
 80046cc:	3328      	adds	r3, #40	; 0x28
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	dd17      	ble.n	8004704 <MotorMove_position_lowspeed+0x2c4>
		Motor[temp->MotorNumber].MotorDirection = 1 ;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046da:	4619      	mov	r1, r3
 80046dc:	4a04      	ldr	r2, [pc, #16]	; (80046f0 <MotorMove_position_lowspeed+0x2b0>)
 80046de:	460b      	mov	r3, r1
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	440b      	add	r3, r1
 80046e4:	015b      	lsls	r3, r3, #5
 80046e6:	4413      	add	r3, r2
 80046e8:	3321      	adds	r3, #33	; 0x21
 80046ea:	2201      	movs	r2, #1
 80046ec:	701a      	strb	r2, [r3, #0]
 80046ee:	e016      	b.n	800471e <MotorMove_position_lowspeed+0x2de>
 80046f0:	2000088c 	.word	0x2000088c
 80046f4:	08011750 	.word	0x08011750
 80046f8:	43b40000 	.word	0x43b40000
 80046fc:	000186a0 	.word	0x000186a0
 8004700:	08011780 	.word	0x08011780
	}
	else{
		Motor[temp->MotorNumber].MotorDirection = 0 ;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f893 3020 	ldrb.w	r3, [r3, #32]
 800470a:	4619      	mov	r1, r3
 800470c:	4aae      	ldr	r2, [pc, #696]	; (80049c8 <MotorMove_position_lowspeed+0x588>)
 800470e:	460b      	mov	r3, r1
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	440b      	add	r3, r1
 8004714:	015b      	lsls	r3, r3, #5
 8004716:	4413      	add	r3, r2
 8004718:	3321      	adds	r3, #33	; 0x21
 800471a:	2200      	movs	r2, #0
 800471c:	701a      	strb	r2, [r3, #0]
	}

	//Motor_AccelDecel_waveCalculate(&Motor[temp->MotorNumber]);  // 计算电机加减速曲线
	Motor[temp->MotorNumber].NumberofSteps_StopAccel = Motor[temp->MotorNumber].NumberofSteps;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004724:	4619      	mov	r1, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f893 3020 	ldrb.w	r3, [r3, #32]
 800472c:	4618      	mov	r0, r3
 800472e:	4aa6      	ldr	r2, [pc, #664]	; (80049c8 <MotorMove_position_lowspeed+0x588>)
 8004730:	460b      	mov	r3, r1
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	440b      	add	r3, r1
 8004736:	015b      	lsls	r3, r3, #5
 8004738:	4413      	add	r3, r2
 800473a:	334c      	adds	r3, #76	; 0x4c
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	49a2      	ldr	r1, [pc, #648]	; (80049c8 <MotorMove_position_lowspeed+0x588>)
 8004740:	4603      	mov	r3, r0
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	4403      	add	r3, r0
 8004746:	015b      	lsls	r3, r3, #5
 8004748:	440b      	add	r3, r1
 800474a:	3350      	adds	r3, #80	; 0x50
 800474c:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].NumberofSteps_BeginDecel = 0;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004754:	4619      	mov	r1, r3
 8004756:	4a9c      	ldr	r2, [pc, #624]	; (80049c8 <MotorMove_position_lowspeed+0x588>)
 8004758:	460b      	mov	r3, r1
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	440b      	add	r3, r1
 800475e:	015b      	lsls	r3, r3, #5
 8004760:	4413      	add	r3, r2
 8004762:	3354      	adds	r3, #84	; 0x54
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]

	if (Motor[temp->MotorNumber].MotorNumber == 1)   // Motor1为传送带形式步进电机，非丝杆直线电机，方向控制和直线电机不一样
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800476e:	4619      	mov	r1, r3
 8004770:	4a95      	ldr	r2, [pc, #596]	; (80049c8 <MotorMove_position_lowspeed+0x588>)
 8004772:	460b      	mov	r3, r1
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	440b      	add	r3, r1
 8004778:	015b      	lsls	r3, r3, #5
 800477a:	4413      	add	r3, r2
 800477c:	3320      	adds	r3, #32
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	2b01      	cmp	r3, #1
 8004782:	f040 8101 	bne.w	8004988 <MotorMove_position_lowspeed+0x548>
	{
		Motor[temp->MotorNumber].NumberofSteps = Motor[temp->MotorNumber].NumberofSteps % Motor[temp->MotorNumber].StepsInOneCircle ;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f893 3020 	ldrb.w	r3, [r3, #32]
 800478c:	4619      	mov	r1, r3
 800478e:	4a8e      	ldr	r2, [pc, #568]	; (80049c8 <MotorMove_position_lowspeed+0x588>)
 8004790:	460b      	mov	r3, r1
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	440b      	add	r3, r1
 8004796:	015b      	lsls	r3, r3, #5
 8004798:	4413      	add	r3, r2
 800479a:	334c      	adds	r3, #76	; 0x4c
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047a4:	4618      	mov	r0, r3
 80047a6:	4988      	ldr	r1, [pc, #544]	; (80049c8 <MotorMove_position_lowspeed+0x588>)
 80047a8:	4603      	mov	r3, r0
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	4403      	add	r3, r0
 80047ae:	015b      	lsls	r3, r3, #5
 80047b0:	440b      	add	r3, r1
 80047b2:	3338      	adds	r3, #56	; 0x38
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68f9      	ldr	r1, [r7, #12]
 80047b8:	f891 1020 	ldrb.w	r1, [r1, #32]
 80047bc:	4608      	mov	r0, r1
 80047be:	fbb2 f1f3 	udiv	r1, r2, r3
 80047c2:	fb01 f303 	mul.w	r3, r1, r3
 80047c6:	1ad2      	subs	r2, r2, r3
 80047c8:	497f      	ldr	r1, [pc, #508]	; (80049c8 <MotorMove_position_lowspeed+0x588>)
 80047ca:	4603      	mov	r3, r0
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	4403      	add	r3, r0
 80047d0:	015b      	lsls	r3, r3, #5
 80047d2:	440b      	add	r3, r1
 80047d4:	334c      	adds	r3, #76	; 0x4c
 80047d6:	601a      	str	r2, [r3, #0]
		Motor[temp->MotorNumber].TargetPosition = Motor[temp->MotorNumber].TargetPosition % Motor[temp->MotorNumber].StepsInOneCircle ;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047de:	4619      	mov	r1, r3
 80047e0:	4a79      	ldr	r2, [pc, #484]	; (80049c8 <MotorMove_position_lowspeed+0x588>)
 80047e2:	460b      	mov	r3, r1
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	440b      	add	r3, r1
 80047e8:	015b      	lsls	r3, r3, #5
 80047ea:	4413      	add	r3, r2
 80047ec:	332c      	adds	r3, #44	; 0x2c
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	461a      	mov	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047f8:	4618      	mov	r0, r3
 80047fa:	4973      	ldr	r1, [pc, #460]	; (80049c8 <MotorMove_position_lowspeed+0x588>)
 80047fc:	4603      	mov	r3, r0
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	4403      	add	r3, r0
 8004802:	015b      	lsls	r3, r3, #5
 8004804:	440b      	add	r3, r1
 8004806:	3338      	adds	r3, #56	; 0x38
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	fbb2 f1f3 	udiv	r1, r2, r3
 800480e:	fb01 f303 	mul.w	r3, r1, r3
 8004812:	1ad2      	subs	r2, r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f893 3020 	ldrb.w	r3, [r3, #32]
 800481a:	4619      	mov	r1, r3
 800481c:	4610      	mov	r0, r2
 800481e:	4a6a      	ldr	r2, [pc, #424]	; (80049c8 <MotorMove_position_lowspeed+0x588>)
 8004820:	460b      	mov	r3, r1
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	440b      	add	r3, r1
 8004826:	015b      	lsls	r3, r3, #5
 8004828:	4413      	add	r3, r2
 800482a:	332c      	adds	r3, #44	; 0x2c
 800482c:	6018      	str	r0, [r3, #0]
		if( Motor[temp->MotorNumber].NumberofSteps <= (Motor[temp->MotorNumber].StepsInOneCircle/2) ){  //如果计算出的步数小于半圈，则按照既定计算方向及进行
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004834:	4619      	mov	r1, r3
 8004836:	4a64      	ldr	r2, [pc, #400]	; (80049c8 <MotorMove_position_lowspeed+0x588>)
 8004838:	460b      	mov	r3, r1
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	440b      	add	r3, r1
 800483e:	015b      	lsls	r3, r3, #5
 8004840:	4413      	add	r3, r2
 8004842:	334c      	adds	r3, #76	; 0x4c
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f893 3020 	ldrb.w	r3, [r3, #32]
 800484c:	4618      	mov	r0, r3
 800484e:	495e      	ldr	r1, [pc, #376]	; (80049c8 <MotorMove_position_lowspeed+0x588>)
 8004850:	4603      	mov	r3, r0
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	4403      	add	r3, r0
 8004856:	015b      	lsls	r3, r3, #5
 8004858:	440b      	add	r3, r1
 800485a:	3338      	adds	r3, #56	; 0x38
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	085b      	lsrs	r3, r3, #1
 8004860:	429a      	cmp	r2, r3
 8004862:	d826      	bhi.n	80048b2 <MotorMove_position_lowspeed+0x472>
			Motor_AccelDecel_waveCalculate(&Motor[temp->MotorNumber]);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f893 3020 	ldrb.w	r3, [r3, #32]
 800486a:	461a      	mov	r2, r3
 800486c:	4613      	mov	r3, r2
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	4413      	add	r3, r2
 8004872:	015b      	lsls	r3, r3, #5
 8004874:	4a54      	ldr	r2, [pc, #336]	; (80049c8 <MotorMove_position_lowspeed+0x588>)
 8004876:	4413      	add	r3, r2
 8004878:	4618      	mov	r0, r3
 800487a:	f7fe ffd1 	bl	8003820 <Motor_AccelDecel_waveCalculate>
			if(Motor[temp->MotorNumber].MotorDirection == 1){
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004884:	4619      	mov	r1, r3
 8004886:	4a50      	ldr	r2, [pc, #320]	; (80049c8 <MotorMove_position_lowspeed+0x588>)
 8004888:	460b      	mov	r3, r1
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	440b      	add	r3, r1
 800488e:	015b      	lsls	r3, r3, #5
 8004890:	4413      	add	r3, r2
 8004892:	3321      	adds	r3, #33	; 0x21
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d105      	bne.n	80048a6 <MotorMove_position_lowspeed+0x466>
				Motor1_Nreset_direction;
 800489a:	2200      	movs	r2, #0
 800489c:	2120      	movs	r1, #32
 800489e:	484b      	ldr	r0, [pc, #300]	; (80049cc <MotorMove_position_lowspeed+0x58c>)
 80048a0:	f003 f8c0 	bl	8007a24 <HAL_GPIO_WritePin>
 80048a4:	e07d      	b.n	80049a2 <MotorMove_position_lowspeed+0x562>
			}
			else{
				Motor1_reset_direction;
 80048a6:	2201      	movs	r2, #1
 80048a8:	2120      	movs	r1, #32
 80048aa:	4848      	ldr	r0, [pc, #288]	; (80049cc <MotorMove_position_lowspeed+0x58c>)
 80048ac:	f003 f8ba 	bl	8007a24 <HAL_GPIO_WritePin>
 80048b0:	e077      	b.n	80049a2 <MotorMove_position_lowspeed+0x562>
			}
		}
		else{
			Motor[temp->MotorNumber].NumberofSteps = abs (Motor[temp->MotorNumber].StepsInOneCircle - Motor[temp->MotorNumber].NumberofSteps);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048b8:	4619      	mov	r1, r3
 80048ba:	4a43      	ldr	r2, [pc, #268]	; (80049c8 <MotorMove_position_lowspeed+0x588>)
 80048bc:	460b      	mov	r3, r1
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	440b      	add	r3, r1
 80048c2:	015b      	lsls	r3, r3, #5
 80048c4:	4413      	add	r3, r2
 80048c6:	3338      	adds	r3, #56	; 0x38
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048d0:	4618      	mov	r0, r3
 80048d2:	493d      	ldr	r1, [pc, #244]	; (80049c8 <MotorMove_position_lowspeed+0x588>)
 80048d4:	4603      	mov	r3, r0
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	4403      	add	r3, r0
 80048da:	015b      	lsls	r3, r3, #5
 80048dc:	440b      	add	r3, r1
 80048de:	334c      	adds	r3, #76	; 0x4c
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80048e8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048f2:	4619      	mov	r1, r3
 80048f4:	4610      	mov	r0, r2
 80048f6:	4a34      	ldr	r2, [pc, #208]	; (80049c8 <MotorMove_position_lowspeed+0x588>)
 80048f8:	460b      	mov	r3, r1
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	440b      	add	r3, r1
 80048fe:	015b      	lsls	r3, r3, #5
 8004900:	4413      	add	r3, r2
 8004902:	334c      	adds	r3, #76	; 0x4c
 8004904:	6018      	str	r0, [r3, #0]
			Motor_AccelDecel_waveCalculate(&Motor[temp->MotorNumber]);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f893 3020 	ldrb.w	r3, [r3, #32]
 800490c:	461a      	mov	r2, r3
 800490e:	4613      	mov	r3, r2
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	4413      	add	r3, r2
 8004914:	015b      	lsls	r3, r3, #5
 8004916:	4a2c      	ldr	r2, [pc, #176]	; (80049c8 <MotorMove_position_lowspeed+0x588>)
 8004918:	4413      	add	r3, r2
 800491a:	4618      	mov	r0, r3
 800491c:	f7fe ff80 	bl	8003820 <Motor_AccelDecel_waveCalculate>
			if(Motor[temp->MotorNumber].MotorDirection == 1){
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004926:	4619      	mov	r1, r3
 8004928:	4a27      	ldr	r2, [pc, #156]	; (80049c8 <MotorMove_position_lowspeed+0x588>)
 800492a:	460b      	mov	r3, r1
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	440b      	add	r3, r1
 8004930:	015b      	lsls	r3, r3, #5
 8004932:	4413      	add	r3, r2
 8004934:	3321      	adds	r3, #33	; 0x21
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d112      	bne.n	8004962 <MotorMove_position_lowspeed+0x522>
				Motor[temp->MotorNumber].MotorDirection = 0;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004942:	4619      	mov	r1, r3
 8004944:	4a20      	ldr	r2, [pc, #128]	; (80049c8 <MotorMove_position_lowspeed+0x588>)
 8004946:	460b      	mov	r3, r1
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	440b      	add	r3, r1
 800494c:	015b      	lsls	r3, r3, #5
 800494e:	4413      	add	r3, r2
 8004950:	3321      	adds	r3, #33	; 0x21
 8004952:	2200      	movs	r2, #0
 8004954:	701a      	strb	r2, [r3, #0]
				Motor1_reset_direction;
 8004956:	2201      	movs	r2, #1
 8004958:	2120      	movs	r1, #32
 800495a:	481c      	ldr	r0, [pc, #112]	; (80049cc <MotorMove_position_lowspeed+0x58c>)
 800495c:	f003 f862 	bl	8007a24 <HAL_GPIO_WritePin>
 8004960:	e01f      	b.n	80049a2 <MotorMove_position_lowspeed+0x562>
			}
			else{
				Motor[temp->MotorNumber].MotorDirection = 1;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004968:	4619      	mov	r1, r3
 800496a:	4a17      	ldr	r2, [pc, #92]	; (80049c8 <MotorMove_position_lowspeed+0x588>)
 800496c:	460b      	mov	r3, r1
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	440b      	add	r3, r1
 8004972:	015b      	lsls	r3, r3, #5
 8004974:	4413      	add	r3, r2
 8004976:	3321      	adds	r3, #33	; 0x21
 8004978:	2201      	movs	r2, #1
 800497a:	701a      	strb	r2, [r3, #0]
				Motor1_Nreset_direction;
 800497c:	2200      	movs	r2, #0
 800497e:	2120      	movs	r1, #32
 8004980:	4812      	ldr	r0, [pc, #72]	; (80049cc <MotorMove_position_lowspeed+0x58c>)
 8004982:	f003 f84f 	bl	8007a24 <HAL_GPIO_WritePin>
 8004986:	e00c      	b.n	80049a2 <MotorMove_position_lowspeed+0x562>
			}
		}
	}
	else{
		MotorDirection_SetUp(&Motor[temp->MotorNumber]) ;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800498e:	461a      	mov	r2, r3
 8004990:	4613      	mov	r3, r2
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	4413      	add	r3, r2
 8004996:	015b      	lsls	r3, r3, #5
 8004998:	4a0b      	ldr	r2, [pc, #44]	; (80049c8 <MotorMove_position_lowspeed+0x588>)
 800499a:	4413      	add	r3, r2
 800499c:	4618      	mov	r0, r3
 800499e:	f7fe fff7 	bl	8003990 <MotorDirection_SetUp>
	}
	HAL_TIM_Base_Start_IT(Motor[temp->MotorNumber].htim_x);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049a8:	4619      	mov	r1, r3
 80049aa:	4a07      	ldr	r2, [pc, #28]	; (80049c8 <MotorMove_position_lowspeed+0x588>)
 80049ac:	460b      	mov	r3, r1
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	440b      	add	r3, r1
 80049b2:	015b      	lsls	r3, r3, #5
 80049b4:	4413      	add	r3, r2
 80049b6:	3334      	adds	r3, #52	; 0x34
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f005 fb90 	bl	800a0e0 <HAL_TIM_Base_Start_IT>
}
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	2000088c 	.word	0x2000088c
 80049cc:	40020400 	.word	0x40020400

080049d0 <MotorRun_LowSpeed>:
	HAL_TIM_Base_Start_IT(Motor[temp->MotorNumber].htim_x);
}
#endif

void MotorRun_LowSpeed(struct MotorDefine *temp)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
	if (Motor[temp->MotorNumber].Status == 1){
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049de:	4619      	mov	r1, r3
 80049e0:	4aad      	ldr	r2, [pc, #692]	; (8004c98 <MotorRun_LowSpeed+0x2c8>)
 80049e2:	460b      	mov	r3, r1
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	440b      	add	r3, r1
 80049e8:	015b      	lsls	r3, r3, #5
 80049ea:	4413      	add	r3, r2
 80049ec:	3330      	adds	r3, #48	; 0x30
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d110      	bne.n	8004a16 <MotorRun_LowSpeed+0x46>
		printf("[WRONG]MotorRun_LowSpeed Failed,Motor%d is busy!\r\n",Motor[temp->MotorNumber].MotorNumber);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049fa:	4619      	mov	r1, r3
 80049fc:	4aa6      	ldr	r2, [pc, #664]	; (8004c98 <MotorRun_LowSpeed+0x2c8>)
 80049fe:	460b      	mov	r3, r1
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	440b      	add	r3, r1
 8004a04:	015b      	lsls	r3, r3, #5
 8004a06:	4413      	add	r3, r2
 8004a08:	3320      	adds	r3, #32
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	48a3      	ldr	r0, [pc, #652]	; (8004c9c <MotorRun_LowSpeed+0x2cc>)
 8004a10:	f00a fbfa 	bl	800f208 <iprintf>
		return ;
 8004a14:	e13c      	b.n	8004c90 <MotorRun_LowSpeed+0x2c0>
	}
	else {
		Motor[temp->MotorNumber].Status = 1 ;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4a9e      	ldr	r2, [pc, #632]	; (8004c98 <MotorRun_LowSpeed+0x2c8>)
 8004a20:	460b      	mov	r3, r1
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	440b      	add	r3, r1
 8004a26:	015b      	lsls	r3, r3, #5
 8004a28:	4413      	add	r3, r2
 8004a2a:	3330      	adds	r3, #48	; 0x30
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	701a      	strb	r2, [r3, #0]
	}

	temp->deceleration_ratio = Motor[temp->MotorNumber].deceleration_ratio ;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a36:	4619      	mov	r1, r3
 8004a38:	4a97      	ldr	r2, [pc, #604]	; (8004c98 <MotorRun_LowSpeed+0x2c8>)
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	440b      	add	r3, r1
 8004a40:	015b      	lsls	r3, r3, #5
 8004a42:	4413      	add	r3, r2
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	601a      	str	r2, [r3, #0]
	temp->step_angle = Motor[temp->MotorNumber].step_angle ;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a50:	4619      	mov	r1, r3
 8004a52:	4a91      	ldr	r2, [pc, #580]	; (8004c98 <MotorRun_LowSpeed+0x2c8>)
 8004a54:	460b      	mov	r3, r1
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	440b      	add	r3, r1
 8004a5a:	015b      	lsls	r3, r3, #5
 8004a5c:	4413      	add	r3, r2
 8004a5e:	3304      	adds	r3, #4
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	605a      	str	r2, [r3, #4]
	temp->mircro_steps = Motor[temp->MotorNumber].mircro_steps ;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4a8a      	ldr	r2, [pc, #552]	; (8004c98 <MotorRun_LowSpeed+0x2c8>)
 8004a70:	460b      	mov	r3, r1
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	440b      	add	r3, r1
 8004a76:	015b      	lsls	r3, r3, #5
 8004a78:	4413      	add	r3, r2
 8004a7a:	3308      	adds	r3, #8
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	609a      	str	r2, [r3, #8]
	temp->MaxSpeedInRads = Motor[temp->MotorNumber].MaxSpeedInRads ;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4a83      	ldr	r2, [pc, #524]	; (8004c98 <MotorRun_LowSpeed+0x2c8>)
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	440b      	add	r3, r1
 8004a92:	015b      	lsls	r3, r3, #5
 8004a94:	4413      	add	r3, r2
 8004a96:	330c      	adds	r3, #12
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	60da      	str	r2, [r3, #12]
	temp->htim_x = Motor[temp->MotorNumber].htim_x ;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4a7c      	ldr	r2, [pc, #496]	; (8004c98 <MotorRun_LowSpeed+0x2c8>)
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	440b      	add	r3, r1
 8004aae:	015b      	lsls	r3, r3, #5
 8004ab0:	4413      	add	r3, r2
 8004ab2:	3334      	adds	r3, #52	; 0x34
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	635a      	str	r2, [r3, #52]	; 0x34

	// 计算： 单圈步数、启动速度、目标速度、行进步数、加减速时间
	temp->StepsInOneCircle = (360 / temp->step_angle) * temp->deceleration_ratio * temp->mircro_steps;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ac0:	eddf 6a77 	vldr	s13, [pc, #476]	; 8004ca0 <MotorRun_LowSpeed+0x2d0>
 8004ac4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	edd3 7a00 	vldr	s15, [r3]
 8004ace:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	ee07 3a90 	vmov	s15, r3
 8004ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ae6:	ee17 2a90 	vmov	r2, s15
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	639a      	str	r2, [r3, #56]	; 0x38
	temp->StartupSpeedInHz = temp->StepsInOneCircle * temp->StartupSpeedInRads ;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af2:	ee07 3a90 	vmov	s15, r3
 8004af6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	edd3 7a04 	vldr	s15, [r3, #16]
 8004b00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b08:	ee17 2a90 	vmov	r2, s15
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	63da      	str	r2, [r3, #60]	; 0x3c
	temp->StepperSpeedTMR = MOTORTIM_TMR / temp->StartupSpeedInHz;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b14:	4a63      	ldr	r2, [pc, #396]	; (8004ca4 <MotorRun_LowSpeed+0x2d4>)
 8004b16:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	649a      	str	r2, [r3, #72]	; 0x48
	temp->NumberofSteps = temp->NumberofRads * temp->StepsInOneCircle ;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b28:	ee07 3a90 	vmov	s15, r3
 8004b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b38:	ee17 2a90 	vmov	r2, s15
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	64da      	str	r2, [r3, #76]	; 0x4c

	//不进行加减速，电机保持最小速度运行
	Motor[temp->MotorNumber].NumberofSteps_StopAccel = temp->NumberofSteps;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b46:	4618      	mov	r0, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b4c:	4952      	ldr	r1, [pc, #328]	; (8004c98 <MotorRun_LowSpeed+0x2c8>)
 8004b4e:	4603      	mov	r3, r0
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	4403      	add	r3, r0
 8004b54:	015b      	lsls	r3, r3, #5
 8004b56:	440b      	add	r3, r1
 8004b58:	3350      	adds	r3, #80	; 0x50
 8004b5a:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].NumberofSteps_BeginDecel = 0;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b62:	4619      	mov	r1, r3
 8004b64:	4a4c      	ldr	r2, [pc, #304]	; (8004c98 <MotorRun_LowSpeed+0x2c8>)
 8004b66:	460b      	mov	r3, r1
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	440b      	add	r3, r1
 8004b6c:	015b      	lsls	r3, r3, #5
 8004b6e:	4413      	add	r3, r2
 8004b70:	3354      	adds	r3, #84	; 0x54
 8004b72:	2200      	movs	r2, #0
 8004b74:	601a      	str	r2, [r3, #0]

	Motor[temp->MotorNumber].StepsInOneCircle = temp->StepsInOneCircle ;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b82:	4945      	ldr	r1, [pc, #276]	; (8004c98 <MotorRun_LowSpeed+0x2c8>)
 8004b84:	4603      	mov	r3, r0
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	4403      	add	r3, r0
 8004b8a:	015b      	lsls	r3, r3, #5
 8004b8c:	440b      	add	r3, r1
 8004b8e:	3338      	adds	r3, #56	; 0x38
 8004b90:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].StartupSpeedInHz = temp->StartupSpeedInHz ;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b9e:	493e      	ldr	r1, [pc, #248]	; (8004c98 <MotorRun_LowSpeed+0x2c8>)
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	4403      	add	r3, r0
 8004ba6:	015b      	lsls	r3, r3, #5
 8004ba8:	440b      	add	r3, r1
 8004baa:	333c      	adds	r3, #60	; 0x3c
 8004bac:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].StepperSpeedTMR = temp->StepperSpeedTMR ;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bba:	4937      	ldr	r1, [pc, #220]	; (8004c98 <MotorRun_LowSpeed+0x2c8>)
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	005b      	lsls	r3, r3, #1
 8004bc0:	4403      	add	r3, r0
 8004bc2:	015b      	lsls	r3, r3, #5
 8004bc4:	440b      	add	r3, r1
 8004bc6:	3348      	adds	r3, #72	; 0x48
 8004bc8:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].NumberofSteps = temp->NumberofSteps ;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bd6:	4930      	ldr	r1, [pc, #192]	; (8004c98 <MotorRun_LowSpeed+0x2c8>)
 8004bd8:	4603      	mov	r3, r0
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	4403      	add	r3, r0
 8004bde:	015b      	lsls	r3, r3, #5
 8004be0:	440b      	add	r3, r1
 8004be2:	334c      	adds	r3, #76	; 0x4c
 8004be4:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].MotorDirection = temp->MotorDirection ;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bec:	4619      	mov	r1, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
 8004bf4:	4a28      	ldr	r2, [pc, #160]	; (8004c98 <MotorRun_LowSpeed+0x2c8>)
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	440b      	add	r3, r1
 8004bfc:	015b      	lsls	r3, r3, #5
 8004bfe:	4413      	add	r3, r2
 8004c00:	3321      	adds	r3, #33	; 0x21
 8004c02:	4602      	mov	r2, r0
 8004c04:	701a      	strb	r2, [r3, #0]
	Motor[temp->MotorNumber].AccelerationTimeTMR = 10000 ;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	4a22      	ldr	r2, [pc, #136]	; (8004c98 <MotorRun_LowSpeed+0x2c8>)
 8004c10:	460b      	mov	r3, r1
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	440b      	add	r3, r1
 8004c16:	015b      	lsls	r3, r3, #5
 8004c18:	4413      	add	r3, r2
 8004c1a:	3358      	adds	r3, #88	; 0x58
 8004c1c:	f242 7210 	movw	r2, #10000	; 0x2710
 8004c20:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].DecelerationTimeTMR = 10000 ;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4a1b      	ldr	r2, [pc, #108]	; (8004c98 <MotorRun_LowSpeed+0x2c8>)
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	440b      	add	r3, r1
 8004c32:	015b      	lsls	r3, r3, #5
 8004c34:	4413      	add	r3, r2
 8004c36:	335c      	adds	r3, #92	; 0x5c
 8004c38:	f242 7210 	movw	r2, #10000	; 0x2710
 8004c3c:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].TargetPosition = -16777200 ; //暂时设置目标位置为无法达到的值，参数控制模式用步进数控制中断停止
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c44:	4619      	mov	r1, r3
 8004c46:	4a14      	ldr	r2, [pc, #80]	; (8004c98 <MotorRun_LowSpeed+0x2c8>)
 8004c48:	460b      	mov	r3, r1
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	440b      	add	r3, r1
 8004c4e:	015b      	lsls	r3, r3, #5
 8004c50:	4413      	add	r3, r2
 8004c52:	332c      	adds	r3, #44	; 0x2c
 8004c54:	4a14      	ldr	r2, [pc, #80]	; (8004ca8 <MotorRun_LowSpeed+0x2d8>)
 8004c56:	601a      	str	r2, [r3, #0]

	MotorDirection_SetUp(&Motor[temp->MotorNumber]) ;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	4613      	mov	r3, r2
 8004c62:	005b      	lsls	r3, r3, #1
 8004c64:	4413      	add	r3, r2
 8004c66:	015b      	lsls	r3, r3, #5
 8004c68:	4a0b      	ldr	r2, [pc, #44]	; (8004c98 <MotorRun_LowSpeed+0x2c8>)
 8004c6a:	4413      	add	r3, r2
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7fe fe8f 	bl	8003990 <MotorDirection_SetUp>
	HAL_TIM_Base_Start_IT(Motor[temp->MotorNumber].htim_x);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4a07      	ldr	r2, [pc, #28]	; (8004c98 <MotorRun_LowSpeed+0x2c8>)
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	440b      	add	r3, r1
 8004c82:	015b      	lsls	r3, r3, #5
 8004c84:	4413      	add	r3, r2
 8004c86:	3334      	adds	r3, #52	; 0x34
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f005 fa28 	bl	800a0e0 <HAL_TIM_Base_Start_IT>
}
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	2000088c 	.word	0x2000088c
 8004c9c:	080117ac 	.word	0x080117ac
 8004ca0:	43b40000 	.word	0x43b40000
 8004ca4:	000186a0 	.word	0x000186a0
 8004ca8:	ff000010 	.word	0xff000010

08004cac <Motor_Reset>:
/*            *****************    0x20-0b00100000 电机复位 ：  ****************** */
// 根据协议，通过USART5进行出串口通讯，输入步进电机的 【地址】 即可，使用程序优化配置好的电机参数对电机进行复位（需要配合0位开关）
// 返回值： SUCCESS-1-完成，正在运行  FAIL-0
// 方案：控制电机运动上限圈数为10转，过程中如果触发0位信号则停止运动。如果电机初始位置已经触发0位信号，则反方向运动一小段时间，再找0位
uint8_t Motor_Reset(struct MotorDefine *temp)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08e      	sub	sp, #56	; 0x38
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
	if (Motor[temp->MotorNumber].Status == 1){
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4aba      	ldr	r2, [pc, #744]	; (8004fa8 <Motor_Reset+0x2fc>)
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	440b      	add	r3, r1
 8004cc4:	015b      	lsls	r3, r3, #5
 8004cc6:	4413      	add	r3, r2
 8004cc8:	3330      	adds	r3, #48	; 0x30
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d108      	bne.n	8004ce2 <Motor_Reset+0x36>
		printf("[WRONG] Reset Failed,Motor%d is busy!\r\n",temp->MotorNumber);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	48b4      	ldr	r0, [pc, #720]	; (8004fac <Motor_Reset+0x300>)
 8004cda:	f00a fa95 	bl	800f208 <iprintf>
		return FAIL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	e3d1      	b.n	8005486 <Motor_Reset+0x7da>
	}
	*temp = Motor[temp->MotorNumber];
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ce8:	4619      	mov	r1, r3
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	4aae      	ldr	r2, [pc, #696]	; (8004fa8 <Motor_Reset+0x2fc>)
 8004cee:	460b      	mov	r3, r1
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	440b      	add	r3, r1
 8004cf4:	015b      	lsls	r3, r3, #5
 8004cf6:	4413      	add	r3, r2
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	2360      	movs	r3, #96	; 0x60
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	f00a fc9d 	bl	800f63c <memcpy>

	temp->NumberofRads = 30;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4aaa      	ldr	r2, [pc, #680]	; (8004fb0 <Motor_Reset+0x304>)
 8004d06:	625a      	str	r2, [r3, #36]	; 0x24

	if (temp->MotorNumber == 1){
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	f040 8093 	bne.w	8004e3a <Motor_Reset+0x18e>
		if ( Motor1_reset_OPTstatus ){
 8004d14:	2108      	movs	r1, #8
 8004d16:	48a7      	ldr	r0, [pc, #668]	; (8004fb4 <Motor_Reset+0x308>)
 8004d18:	f002 fe6c 	bl	80079f4 <HAL_GPIO_ReadPin>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d140      	bne.n	8004da4 <Motor_Reset+0xf8>
			temp->MotorDirection = 1 ;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff fe50 	bl	80049d0 <MotorRun_LowSpeed>
			HAL_Delay(MotorResetDelay);
 8004d30:	2078      	movs	r0, #120	; 0x78
 8004d32:	f001 fbf5 	bl	8006520 <HAL_Delay>
			for(uint32_t i=0 ; Motor1_reset_OPTstatus ; i++){
 8004d36:	2300      	movs	r3, #0
 8004d38:	637b      	str	r3, [r7, #52]	; 0x34
 8004d3a:	e01f      	b.n	8004d7c <Motor_Reset+0xd0>
				if(i>500) {
 8004d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d3e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004d42:	d915      	bls.n	8004d70 <Motor_Reset+0xc4>
					printf("[WRONG] Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	489a      	ldr	r0, [pc, #616]	; (8004fb8 <Motor_Reset+0x30c>)
 8004d4e:	f00a fa5b 	bl	800f208 <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4a93      	ldr	r2, [pc, #588]	; (8004fa8 <Motor_Reset+0x2fc>)
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	440b      	add	r3, r1
 8004d62:	015b      	lsls	r3, r3, #5
 8004d64:	4413      	add	r3, r2
 8004d66:	334c      	adds	r3, #76	; 0x4c
 8004d68:	2202      	movs	r2, #2
 8004d6a:	601a      	str	r2, [r3, #0]
					return FAIL;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	e38a      	b.n	8005486 <Motor_Reset+0x7da>
				}
				else {HAL_Delay(1);}
 8004d70:	2001      	movs	r0, #1
 8004d72:	f001 fbd5 	bl	8006520 <HAL_Delay>
			for(uint32_t i=0 ; Motor1_reset_OPTstatus ; i++){
 8004d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d78:	3301      	adds	r3, #1
 8004d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8004d7c:	2108      	movs	r1, #8
 8004d7e:	488d      	ldr	r0, [pc, #564]	; (8004fb4 <Motor_Reset+0x308>)
 8004d80:	f002 fe38 	bl	80079f4 <HAL_GPIO_ReadPin>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0d8      	beq.n	8004d3c <Motor_Reset+0x90>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d90:	4619      	mov	r1, r3
 8004d92:	4a85      	ldr	r2, [pc, #532]	; (8004fa8 <Motor_Reset+0x2fc>)
 8004d94:	460b      	mov	r3, r1
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	440b      	add	r3, r1
 8004d9a:	015b      	lsls	r3, r3, #5
 8004d9c:	4413      	add	r3, r2
 8004d9e:	334c      	adds	r3, #76	; 0x4c
 8004da0:	2202      	movs	r2, #2
 8004da2:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(MotorResetDelay);
 8004da4:	2078      	movs	r0, #120	; 0x78
 8004da6:	f001 fbbb 	bl	8006520 <HAL_Delay>
		if (Motor1_Nreset_OPTstatus){
 8004daa:	2108      	movs	r1, #8
 8004dac:	4881      	ldr	r0, [pc, #516]	; (8004fb4 <Motor_Reset+0x308>)
 8004dae:	f002 fe21 	bl	80079f4 <HAL_GPIO_ReadPin>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d140      	bne.n	8004e3a <Motor_Reset+0x18e>
			temp->MotorDirection = 0 ;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7ff fe05 	bl	80049d0 <MotorRun_LowSpeed>
			for(uint32_t i=0 ; Motor1_Nreset_OPTstatus ; i++){
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	633b      	str	r3, [r7, #48]	; 0x30
 8004dca:	e020      	b.n	8004e0e <Motor_Reset+0x162>
				if(i>5000) {
 8004dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d915      	bls.n	8004e02 <Motor_Reset+0x156>
					printf("[WRONG] Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4876      	ldr	r0, [pc, #472]	; (8004fb8 <Motor_Reset+0x30c>)
 8004de0:	f00a fa12 	bl	800f208 <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dea:	4619      	mov	r1, r3
 8004dec:	4a6e      	ldr	r2, [pc, #440]	; (8004fa8 <Motor_Reset+0x2fc>)
 8004dee:	460b      	mov	r3, r1
 8004df0:	005b      	lsls	r3, r3, #1
 8004df2:	440b      	add	r3, r1
 8004df4:	015b      	lsls	r3, r3, #5
 8004df6:	4413      	add	r3, r2
 8004df8:	334c      	adds	r3, #76	; 0x4c
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	601a      	str	r2, [r3, #0]
					return FAIL;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e341      	b.n	8005486 <Motor_Reset+0x7da>
				}
				else {HAL_Delay(1);}
 8004e02:	2001      	movs	r0, #1
 8004e04:	f001 fb8c 	bl	8006520 <HAL_Delay>
			for(uint32_t i=0 ; Motor1_Nreset_OPTstatus ; i++){
 8004e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	633b      	str	r3, [r7, #48]	; 0x30
 8004e0e:	2108      	movs	r1, #8
 8004e10:	4868      	ldr	r0, [pc, #416]	; (8004fb4 <Motor_Reset+0x308>)
 8004e12:	f002 fdef 	bl	80079f4 <HAL_GPIO_ReadPin>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d0d7      	beq.n	8004dcc <Motor_Reset+0x120>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e22:	4619      	mov	r1, r3
 8004e24:	4a60      	ldr	r2, [pc, #384]	; (8004fa8 <Motor_Reset+0x2fc>)
 8004e26:	460b      	mov	r3, r1
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	440b      	add	r3, r1
 8004e2c:	015b      	lsls	r3, r3, #5
 8004e2e:	4413      	add	r3, r2
 8004e30:	334c      	adds	r3, #76	; 0x4c
 8004e32:	2202      	movs	r2, #2
 8004e34:	601a      	str	r2, [r3, #0]
			return SUCCESS;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e325      	b.n	8005486 <Motor_Reset+0x7da>
		}
	}

	if (temp->MotorNumber == 2){
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	f040 8093 	bne.w	8004f6c <Motor_Reset+0x2c0>
		if ( Motor2_reset_OPTstatus ){
 8004e46:	2110      	movs	r1, #16
 8004e48:	485a      	ldr	r0, [pc, #360]	; (8004fb4 <Motor_Reset+0x308>)
 8004e4a:	f002 fdd3 	bl	80079f4 <HAL_GPIO_ReadPin>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d140      	bne.n	8004ed6 <Motor_Reset+0x22a>
			temp->MotorDirection = 1 ;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7ff fdb7 	bl	80049d0 <MotorRun_LowSpeed>
			HAL_Delay(MotorResetDelay);
 8004e62:	2078      	movs	r0, #120	; 0x78
 8004e64:	f001 fb5c 	bl	8006520 <HAL_Delay>
			for(uint32_t i=0 ; Motor2_reset_OPTstatus ; i++){
 8004e68:	2300      	movs	r3, #0
 8004e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e6c:	e01f      	b.n	8004eae <Motor_Reset+0x202>
				if(i>500) {
 8004e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e70:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004e74:	d915      	bls.n	8004ea2 <Motor_Reset+0x1f6>
					printf("[WRONG] Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	484e      	ldr	r0, [pc, #312]	; (8004fb8 <Motor_Reset+0x30c>)
 8004e80:	f00a f9c2 	bl	800f208 <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	4a46      	ldr	r2, [pc, #280]	; (8004fa8 <Motor_Reset+0x2fc>)
 8004e8e:	460b      	mov	r3, r1
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	440b      	add	r3, r1
 8004e94:	015b      	lsls	r3, r3, #5
 8004e96:	4413      	add	r3, r2
 8004e98:	334c      	adds	r3, #76	; 0x4c
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	601a      	str	r2, [r3, #0]
					return FAIL;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e2f1      	b.n	8005486 <Motor_Reset+0x7da>
				}
				else {HAL_Delay(1);}
 8004ea2:	2001      	movs	r0, #1
 8004ea4:	f001 fb3c 	bl	8006520 <HAL_Delay>
			for(uint32_t i=0 ; Motor2_reset_OPTstatus ; i++){
 8004ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eaa:	3301      	adds	r3, #1
 8004eac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eae:	2110      	movs	r1, #16
 8004eb0:	4840      	ldr	r0, [pc, #256]	; (8004fb4 <Motor_Reset+0x308>)
 8004eb2:	f002 fd9f 	bl	80079f4 <HAL_GPIO_ReadPin>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d0d8      	beq.n	8004e6e <Motor_Reset+0x1c2>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4a38      	ldr	r2, [pc, #224]	; (8004fa8 <Motor_Reset+0x2fc>)
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	440b      	add	r3, r1
 8004ecc:	015b      	lsls	r3, r3, #5
 8004ece:	4413      	add	r3, r2
 8004ed0:	334c      	adds	r3, #76	; 0x4c
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(MotorResetDelay);
 8004ed6:	2078      	movs	r0, #120	; 0x78
 8004ed8:	f001 fb22 	bl	8006520 <HAL_Delay>
		if (Motor2_Nreset_OPTstatus){
 8004edc:	2110      	movs	r1, #16
 8004ede:	4835      	ldr	r0, [pc, #212]	; (8004fb4 <Motor_Reset+0x308>)
 8004ee0:	f002 fd88 	bl	80079f4 <HAL_GPIO_ReadPin>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d140      	bne.n	8004f6c <Motor_Reset+0x2c0>
			temp->MotorDirection = 0 ;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7ff fd6c 	bl	80049d0 <MotorRun_LowSpeed>
			for(uint32_t i=0 ; Motor2_Nreset_OPTstatus ; i++){
 8004ef8:	2300      	movs	r3, #0
 8004efa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004efc:	e020      	b.n	8004f40 <Motor_Reset+0x294>
				if(i>5000) {
 8004efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d915      	bls.n	8004f34 <Motor_Reset+0x288>
					printf("[WRONG]Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f0e:	4619      	mov	r1, r3
 8004f10:	482a      	ldr	r0, [pc, #168]	; (8004fbc <Motor_Reset+0x310>)
 8004f12:	f00a f979 	bl	800f208 <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4a22      	ldr	r2, [pc, #136]	; (8004fa8 <Motor_Reset+0x2fc>)
 8004f20:	460b      	mov	r3, r1
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	440b      	add	r3, r1
 8004f26:	015b      	lsls	r3, r3, #5
 8004f28:	4413      	add	r3, r2
 8004f2a:	334c      	adds	r3, #76	; 0x4c
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	601a      	str	r2, [r3, #0]
					return FAIL;
 8004f30:	2300      	movs	r3, #0
 8004f32:	e2a8      	b.n	8005486 <Motor_Reset+0x7da>
				}
				else {HAL_Delay(1);}
 8004f34:	2001      	movs	r0, #1
 8004f36:	f001 faf3 	bl	8006520 <HAL_Delay>
			for(uint32_t i=0 ; Motor2_Nreset_OPTstatus ; i++){
 8004f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f40:	2110      	movs	r1, #16
 8004f42:	481c      	ldr	r0, [pc, #112]	; (8004fb4 <Motor_Reset+0x308>)
 8004f44:	f002 fd56 	bl	80079f4 <HAL_GPIO_ReadPin>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d0d7      	beq.n	8004efe <Motor_Reset+0x252>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f54:	4619      	mov	r1, r3
 8004f56:	4a14      	ldr	r2, [pc, #80]	; (8004fa8 <Motor_Reset+0x2fc>)
 8004f58:	460b      	mov	r3, r1
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	440b      	add	r3, r1
 8004f5e:	015b      	lsls	r3, r3, #5
 8004f60:	4413      	add	r3, r2
 8004f62:	334c      	adds	r3, #76	; 0x4c
 8004f64:	2202      	movs	r2, #2
 8004f66:	601a      	str	r2, [r3, #0]
			return SUCCESS;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e28c      	b.n	8005486 <Motor_Reset+0x7da>
		}
	}

	if (temp->MotorNumber == 3){
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f72:	2b03      	cmp	r3, #3
 8004f74:	f040 80a2 	bne.w	80050bc <Motor_Reset+0x410>
		if ( Motor3_reset_OPTstatus ){
 8004f78:	2120      	movs	r1, #32
 8004f7a:	480e      	ldr	r0, [pc, #56]	; (8004fb4 <Motor_Reset+0x308>)
 8004f7c:	f002 fd3a 	bl	80079f4 <HAL_GPIO_ReadPin>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d150      	bne.n	8005028 <Motor_Reset+0x37c>
			temp->MotorDirection = 1 ;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7ff fd1e 	bl	80049d0 <MotorRun_LowSpeed>
			HAL_Delay(MotorResetDelay);
 8004f94:	2078      	movs	r0, #120	; 0x78
 8004f96:	f001 fac3 	bl	8006520 <HAL_Delay>
			HAL_Delay(MotorResetDelay);
 8004f9a:	2078      	movs	r0, #120	; 0x78
 8004f9c:	f001 fac0 	bl	8006520 <HAL_Delay>
			for(uint32_t i=0 ; Motor3_reset_OPTstatus ; i++){
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa4:	e02c      	b.n	8005000 <Motor_Reset+0x354>
 8004fa6:	bf00      	nop
 8004fa8:	2000088c 	.word	0x2000088c
 8004fac:	080117e0 	.word	0x080117e0
 8004fb0:	41f00000 	.word	0x41f00000
 8004fb4:	40020c00 	.word	0x40020c00
 8004fb8:	08011808 	.word	0x08011808
 8004fbc:	08011834 	.word	0x08011834
				if(i>500) {
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004fc6:	d915      	bls.n	8004ff4 <Motor_Reset+0x348>
					printf("[WRONG] Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fce:	4619      	mov	r1, r3
 8004fd0:	48ba      	ldr	r0, [pc, #744]	; (80052bc <Motor_Reset+0x610>)
 8004fd2:	f00a f919 	bl	800f208 <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4ab8      	ldr	r2, [pc, #736]	; (80052c0 <Motor_Reset+0x614>)
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	440b      	add	r3, r1
 8004fe6:	015b      	lsls	r3, r3, #5
 8004fe8:	4413      	add	r3, r2
 8004fea:	334c      	adds	r3, #76	; 0x4c
 8004fec:	2202      	movs	r2, #2
 8004fee:	601a      	str	r2, [r3, #0]
					return FAIL;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	e248      	b.n	8005486 <Motor_Reset+0x7da>
				}
				else {HAL_Delay(1);}
 8004ff4:	2001      	movs	r0, #1
 8004ff6:	f001 fa93 	bl	8006520 <HAL_Delay>
			for(uint32_t i=0 ; Motor3_reset_OPTstatus ; i++){
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8005000:	2120      	movs	r1, #32
 8005002:	48b0      	ldr	r0, [pc, #704]	; (80052c4 <Motor_Reset+0x618>)
 8005004:	f002 fcf6 	bl	80079f4 <HAL_GPIO_ReadPin>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0d8      	beq.n	8004fc0 <Motor_Reset+0x314>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005014:	4619      	mov	r1, r3
 8005016:	4aaa      	ldr	r2, [pc, #680]	; (80052c0 <Motor_Reset+0x614>)
 8005018:	460b      	mov	r3, r1
 800501a:	005b      	lsls	r3, r3, #1
 800501c:	440b      	add	r3, r1
 800501e:	015b      	lsls	r3, r3, #5
 8005020:	4413      	add	r3, r2
 8005022:	334c      	adds	r3, #76	; 0x4c
 8005024:	2202      	movs	r2, #2
 8005026:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(MotorResetDelay);
 8005028:	2078      	movs	r0, #120	; 0x78
 800502a:	f001 fa79 	bl	8006520 <HAL_Delay>
		if (Motor3_Nreset_OPTstatus){
 800502e:	2120      	movs	r1, #32
 8005030:	48a4      	ldr	r0, [pc, #656]	; (80052c4 <Motor_Reset+0x618>)
 8005032:	f002 fcdf 	bl	80079f4 <HAL_GPIO_ReadPin>
 8005036:	4603      	mov	r3, r0
 8005038:	2b01      	cmp	r3, #1
 800503a:	d13f      	bne.n	80050bc <Motor_Reset+0x410>
			temp->MotorDirection = 0 ;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f7ff fcc3 	bl	80049d0 <MotorRun_LowSpeed>
			for(uint32_t i=0 ; Motor3_Nreset_OPTstatus ; i++){
 800504a:	2300      	movs	r3, #0
 800504c:	623b      	str	r3, [r7, #32]
 800504e:	e01f      	b.n	8005090 <Motor_Reset+0x3e4>
				if(i>4000) {
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8005056:	d915      	bls.n	8005084 <Motor_Reset+0x3d8>
					printf("[WRONG] Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800505e:	4619      	mov	r1, r3
 8005060:	4896      	ldr	r0, [pc, #600]	; (80052bc <Motor_Reset+0x610>)
 8005062:	f00a f8d1 	bl	800f208 <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 3020 	ldrb.w	r3, [r3, #32]
 800506c:	4619      	mov	r1, r3
 800506e:	4a94      	ldr	r2, [pc, #592]	; (80052c0 <Motor_Reset+0x614>)
 8005070:	460b      	mov	r3, r1
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	440b      	add	r3, r1
 8005076:	015b      	lsls	r3, r3, #5
 8005078:	4413      	add	r3, r2
 800507a:	334c      	adds	r3, #76	; 0x4c
 800507c:	2202      	movs	r2, #2
 800507e:	601a      	str	r2, [r3, #0]
					return FAIL;
 8005080:	2300      	movs	r3, #0
 8005082:	e200      	b.n	8005486 <Motor_Reset+0x7da>
				}
				else {HAL_Delay(1);}
 8005084:	2001      	movs	r0, #1
 8005086:	f001 fa4b 	bl	8006520 <HAL_Delay>
			for(uint32_t i=0 ; Motor3_Nreset_OPTstatus ; i++){
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	3301      	adds	r3, #1
 800508e:	623b      	str	r3, [r7, #32]
 8005090:	2120      	movs	r1, #32
 8005092:	488c      	ldr	r0, [pc, #560]	; (80052c4 <Motor_Reset+0x618>)
 8005094:	f002 fcae 	bl	80079f4 <HAL_GPIO_ReadPin>
 8005098:	4603      	mov	r3, r0
 800509a:	2b01      	cmp	r3, #1
 800509c:	d0d8      	beq.n	8005050 <Motor_Reset+0x3a4>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050a4:	4619      	mov	r1, r3
 80050a6:	4a86      	ldr	r2, [pc, #536]	; (80052c0 <Motor_Reset+0x614>)
 80050a8:	460b      	mov	r3, r1
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	440b      	add	r3, r1
 80050ae:	015b      	lsls	r3, r3, #5
 80050b0:	4413      	add	r3, r2
 80050b2:	334c      	adds	r3, #76	; 0x4c
 80050b4:	2202      	movs	r2, #2
 80050b6:	601a      	str	r2, [r3, #0]
			return SUCCESS;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e1e4      	b.n	8005486 <Motor_Reset+0x7da>
		}
	}

	if (temp->MotorNumber == 4){
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	f040 8098 	bne.w	80051f8 <Motor_Reset+0x54c>
		if ( Motor4_reset_OPTstatus ){
 80050c8:	2140      	movs	r1, #64	; 0x40
 80050ca:	487e      	ldr	r0, [pc, #504]	; (80052c4 <Motor_Reset+0x618>)
 80050cc:	f002 fc92 	bl	80079f4 <HAL_GPIO_ReadPin>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d143      	bne.n	800515e <Motor_Reset+0x4b2>
			temp->MotorDirection = 1 ;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp->NumberofRads = 10 ;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a79      	ldr	r2, [pc, #484]	; (80052c8 <Motor_Reset+0x61c>)
 80050e2:	625a      	str	r2, [r3, #36]	; 0x24
			MotorMove_steps(temp);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f7fe fcb9 	bl	8003a5c <MotorMove_steps>
			HAL_Delay(MotorResetDelay);
 80050ea:	2078      	movs	r0, #120	; 0x78
 80050ec:	f001 fa18 	bl	8006520 <HAL_Delay>
			for(uint32_t i=0 ; Motor4_reset_OPTstatus ; i++){
 80050f0:	2300      	movs	r3, #0
 80050f2:	61fb      	str	r3, [r7, #28]
 80050f4:	e01f      	b.n	8005136 <Motor_Reset+0x48a>
				if(i>500) {
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80050fc:	d915      	bls.n	800512a <Motor_Reset+0x47e>
					printf("[WRONG] Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005104:	4619      	mov	r1, r3
 8005106:	486d      	ldr	r0, [pc, #436]	; (80052bc <Motor_Reset+0x610>)
 8005108:	f00a f87e 	bl	800f208 <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005112:	4619      	mov	r1, r3
 8005114:	4a6a      	ldr	r2, [pc, #424]	; (80052c0 <Motor_Reset+0x614>)
 8005116:	460b      	mov	r3, r1
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	440b      	add	r3, r1
 800511c:	015b      	lsls	r3, r3, #5
 800511e:	4413      	add	r3, r2
 8005120:	334c      	adds	r3, #76	; 0x4c
 8005122:	2202      	movs	r2, #2
 8005124:	601a      	str	r2, [r3, #0]
					return FAIL;
 8005126:	2300      	movs	r3, #0
 8005128:	e1ad      	b.n	8005486 <Motor_Reset+0x7da>
				}
				else {HAL_Delay(1);}
 800512a:	2001      	movs	r0, #1
 800512c:	f001 f9f8 	bl	8006520 <HAL_Delay>
			for(uint32_t i=0 ; Motor4_reset_OPTstatus ; i++){
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	3301      	adds	r3, #1
 8005134:	61fb      	str	r3, [r7, #28]
 8005136:	2140      	movs	r1, #64	; 0x40
 8005138:	4862      	ldr	r0, [pc, #392]	; (80052c4 <Motor_Reset+0x618>)
 800513a:	f002 fc5b 	bl	80079f4 <HAL_GPIO_ReadPin>
 800513e:	4603      	mov	r3, r0
 8005140:	2b01      	cmp	r3, #1
 8005142:	d0d8      	beq.n	80050f6 <Motor_Reset+0x44a>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 3020 	ldrb.w	r3, [r3, #32]
 800514a:	4619      	mov	r1, r3
 800514c:	4a5c      	ldr	r2, [pc, #368]	; (80052c0 <Motor_Reset+0x614>)
 800514e:	460b      	mov	r3, r1
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	440b      	add	r3, r1
 8005154:	015b      	lsls	r3, r3, #5
 8005156:	4413      	add	r3, r2
 8005158:	334c      	adds	r3, #76	; 0x4c
 800515a:	2202      	movs	r2, #2
 800515c:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(MotorResetDelay);
 800515e:	2078      	movs	r0, #120	; 0x78
 8005160:	f001 f9de 	bl	8006520 <HAL_Delay>
		if (Motor4_Nreset_OPTstatus){
 8005164:	2140      	movs	r1, #64	; 0x40
 8005166:	4857      	ldr	r0, [pc, #348]	; (80052c4 <Motor_Reset+0x618>)
 8005168:	f002 fc44 	bl	80079f4 <HAL_GPIO_ReadPin>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d142      	bne.n	80051f8 <Motor_Reset+0x54c>
			temp->MotorDirection = 0 ;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp->NumberofRads = 10 ;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a52      	ldr	r2, [pc, #328]	; (80052c8 <Motor_Reset+0x61c>)
 800517e:	625a      	str	r2, [r3, #36]	; 0x24
			MotorMove_steps(temp);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7fe fc6b 	bl	8003a5c <MotorMove_steps>
			for(uint32_t i=0 ; Motor4_Nreset_OPTstatus ; i++){
 8005186:	2300      	movs	r3, #0
 8005188:	61bb      	str	r3, [r7, #24]
 800518a:	e01f      	b.n	80051cc <Motor_Reset+0x520>
				if(i>8000) {
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8005192:	d915      	bls.n	80051c0 <Motor_Reset+0x514>
					printf("[WRONG] Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 3020 	ldrb.w	r3, [r3, #32]
 800519a:	4619      	mov	r1, r3
 800519c:	4847      	ldr	r0, [pc, #284]	; (80052bc <Motor_Reset+0x610>)
 800519e:	f00a f833 	bl	800f208 <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051a8:	4619      	mov	r1, r3
 80051aa:	4a45      	ldr	r2, [pc, #276]	; (80052c0 <Motor_Reset+0x614>)
 80051ac:	460b      	mov	r3, r1
 80051ae:	005b      	lsls	r3, r3, #1
 80051b0:	440b      	add	r3, r1
 80051b2:	015b      	lsls	r3, r3, #5
 80051b4:	4413      	add	r3, r2
 80051b6:	334c      	adds	r3, #76	; 0x4c
 80051b8:	2202      	movs	r2, #2
 80051ba:	601a      	str	r2, [r3, #0]
					return FAIL;
 80051bc:	2300      	movs	r3, #0
 80051be:	e162      	b.n	8005486 <Motor_Reset+0x7da>
				}
				else {HAL_Delay(1);}
 80051c0:	2001      	movs	r0, #1
 80051c2:	f001 f9ad 	bl	8006520 <HAL_Delay>
			for(uint32_t i=0 ; Motor4_Nreset_OPTstatus ; i++){
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	3301      	adds	r3, #1
 80051ca:	61bb      	str	r3, [r7, #24]
 80051cc:	2140      	movs	r1, #64	; 0x40
 80051ce:	483d      	ldr	r0, [pc, #244]	; (80052c4 <Motor_Reset+0x618>)
 80051d0:	f002 fc10 	bl	80079f4 <HAL_GPIO_ReadPin>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0d8      	beq.n	800518c <Motor_Reset+0x4e0>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051e0:	4619      	mov	r1, r3
 80051e2:	4a37      	ldr	r2, [pc, #220]	; (80052c0 <Motor_Reset+0x614>)
 80051e4:	460b      	mov	r3, r1
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	440b      	add	r3, r1
 80051ea:	015b      	lsls	r3, r3, #5
 80051ec:	4413      	add	r3, r2
 80051ee:	334c      	adds	r3, #76	; 0x4c
 80051f0:	2202      	movs	r2, #2
 80051f2:	601a      	str	r2, [r3, #0]
			return SUCCESS;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e146      	b.n	8005486 <Motor_Reset+0x7da>
		}
	}

	if (temp->MotorNumber == 5){
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051fe:	2b05      	cmp	r3, #5
 8005200:	f040 809d 	bne.w	800533e <Motor_Reset+0x692>
		if ( Motor5_reset_OPTstatus ){
 8005204:	2180      	movs	r1, #128	; 0x80
 8005206:	482f      	ldr	r0, [pc, #188]	; (80052c4 <Motor_Reset+0x618>)
 8005208:	f002 fbf4 	bl	80079f4 <HAL_GPIO_ReadPin>
 800520c:	4603      	mov	r3, r0
 800520e:	2b01      	cmp	r3, #1
 8005210:	d140      	bne.n	8005294 <Motor_Reset+0x5e8>
			temp->MotorDirection = 1 ;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7ff fbd8 	bl	80049d0 <MotorRun_LowSpeed>
			HAL_Delay(MotorResetDelay);
 8005220:	2078      	movs	r0, #120	; 0x78
 8005222:	f001 f97d 	bl	8006520 <HAL_Delay>
			for(uint32_t i=0 ; Motor5_reset_OPTstatus ; i++){
 8005226:	2300      	movs	r3, #0
 8005228:	617b      	str	r3, [r7, #20]
 800522a:	e01f      	b.n	800526c <Motor_Reset+0x5c0>
				if(i>500) {
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005232:	d915      	bls.n	8005260 <Motor_Reset+0x5b4>
					printf("[WRONG1]Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 3020 	ldrb.w	r3, [r3, #32]
 800523a:	4619      	mov	r1, r3
 800523c:	4823      	ldr	r0, [pc, #140]	; (80052cc <Motor_Reset+0x620>)
 800523e:	f009 ffe3 	bl	800f208 <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005248:	4619      	mov	r1, r3
 800524a:	4a1d      	ldr	r2, [pc, #116]	; (80052c0 <Motor_Reset+0x614>)
 800524c:	460b      	mov	r3, r1
 800524e:	005b      	lsls	r3, r3, #1
 8005250:	440b      	add	r3, r1
 8005252:	015b      	lsls	r3, r3, #5
 8005254:	4413      	add	r3, r2
 8005256:	334c      	adds	r3, #76	; 0x4c
 8005258:	2202      	movs	r2, #2
 800525a:	601a      	str	r2, [r3, #0]
					return FAIL;
 800525c:	2300      	movs	r3, #0
 800525e:	e112      	b.n	8005486 <Motor_Reset+0x7da>
				}
				else {HAL_Delay(1);}
 8005260:	2001      	movs	r0, #1
 8005262:	f001 f95d 	bl	8006520 <HAL_Delay>
			for(uint32_t i=0 ; Motor5_reset_OPTstatus ; i++){
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	3301      	adds	r3, #1
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	2180      	movs	r1, #128	; 0x80
 800526e:	4815      	ldr	r0, [pc, #84]	; (80052c4 <Motor_Reset+0x618>)
 8005270:	f002 fbc0 	bl	80079f4 <HAL_GPIO_ReadPin>
 8005274:	4603      	mov	r3, r0
 8005276:	2b01      	cmp	r3, #1
 8005278:	d0d8      	beq.n	800522c <Motor_Reset+0x580>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005280:	4619      	mov	r1, r3
 8005282:	4a0f      	ldr	r2, [pc, #60]	; (80052c0 <Motor_Reset+0x614>)
 8005284:	460b      	mov	r3, r1
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	440b      	add	r3, r1
 800528a:	015b      	lsls	r3, r3, #5
 800528c:	4413      	add	r3, r2
 800528e:	334c      	adds	r3, #76	; 0x4c
 8005290:	2202      	movs	r2, #2
 8005292:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(MotorResetDelay);
 8005294:	2078      	movs	r0, #120	; 0x78
 8005296:	f001 f943 	bl	8006520 <HAL_Delay>
		if (Motor5_Nreset_OPTstatus){
 800529a:	2180      	movs	r1, #128	; 0x80
 800529c:	4809      	ldr	r0, [pc, #36]	; (80052c4 <Motor_Reset+0x618>)
 800529e:	f002 fba9 	bl	80079f4 <HAL_GPIO_ReadPin>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d14a      	bne.n	800533e <Motor_Reset+0x692>
			temp->MotorDirection = 0 ;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f7ff fb8d 	bl	80049d0 <MotorRun_LowSpeed>
			for(uint32_t i=0 ; Motor5_Nreset_OPTstatus ; i++){
 80052b6:	2300      	movs	r3, #0
 80052b8:	613b      	str	r3, [r7, #16]
 80052ba:	e02a      	b.n	8005312 <Motor_Reset+0x666>
 80052bc:	08011808 	.word	0x08011808
 80052c0:	2000088c 	.word	0x2000088c
 80052c4:	40020c00 	.word	0x40020c00
 80052c8:	41200000 	.word	0x41200000
 80052cc:	08011860 	.word	0x08011860
				if(i>5000) {
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d915      	bls.n	8005306 <Motor_Reset+0x65a>
					printf("[WRONG2]Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052e0:	4619      	mov	r1, r3
 80052e2:	486b      	ldr	r0, [pc, #428]	; (8005490 <Motor_Reset+0x7e4>)
 80052e4:	f009 ff90 	bl	800f208 <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052ee:	4619      	mov	r1, r3
 80052f0:	4a68      	ldr	r2, [pc, #416]	; (8005494 <Motor_Reset+0x7e8>)
 80052f2:	460b      	mov	r3, r1
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	440b      	add	r3, r1
 80052f8:	015b      	lsls	r3, r3, #5
 80052fa:	4413      	add	r3, r2
 80052fc:	334c      	adds	r3, #76	; 0x4c
 80052fe:	2202      	movs	r2, #2
 8005300:	601a      	str	r2, [r3, #0]
					return FAIL;
 8005302:	2300      	movs	r3, #0
 8005304:	e0bf      	b.n	8005486 <Motor_Reset+0x7da>
				}
				else {HAL_Delay(1);}
 8005306:	2001      	movs	r0, #1
 8005308:	f001 f90a 	bl	8006520 <HAL_Delay>
			for(uint32_t i=0 ; Motor5_Nreset_OPTstatus ; i++){
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	3301      	adds	r3, #1
 8005310:	613b      	str	r3, [r7, #16]
 8005312:	2180      	movs	r1, #128	; 0x80
 8005314:	4860      	ldr	r0, [pc, #384]	; (8005498 <Motor_Reset+0x7ec>)
 8005316:	f002 fb6d 	bl	80079f4 <HAL_GPIO_ReadPin>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d0d7      	beq.n	80052d0 <Motor_Reset+0x624>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005326:	4619      	mov	r1, r3
 8005328:	4a5a      	ldr	r2, [pc, #360]	; (8005494 <Motor_Reset+0x7e8>)
 800532a:	460b      	mov	r3, r1
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	440b      	add	r3, r1
 8005330:	015b      	lsls	r3, r3, #5
 8005332:	4413      	add	r3, r2
 8005334:	334c      	adds	r3, #76	; 0x4c
 8005336:	2202      	movs	r2, #2
 8005338:	601a      	str	r2, [r3, #0]
			return SUCCESS;
 800533a:	2301      	movs	r3, #1
 800533c:	e0a3      	b.n	8005486 <Motor_Reset+0x7da>
		}
	}

	if (temp->MotorNumber == 6){
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005344:	2b06      	cmp	r3, #6
 8005346:	f040 809d 	bne.w	8005484 <Motor_Reset+0x7d8>
		if ( Motor6_reset_OPTstatus ){
 800534a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800534e:	4853      	ldr	r0, [pc, #332]	; (800549c <Motor_Reset+0x7f0>)
 8005350:	f002 fb50 	bl	80079f4 <HAL_GPIO_ReadPin>
 8005354:	4603      	mov	r3, r0
 8005356:	2b01      	cmp	r3, #1
 8005358:	d144      	bne.n	80053e4 <Motor_Reset+0x738>
			temp->MotorDirection = 1 ;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp->NumberofRads = 10 ;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a4e      	ldr	r2, [pc, #312]	; (80054a0 <Motor_Reset+0x7f4>)
 8005366:	625a      	str	r2, [r3, #36]	; 0x24
			MotorRun_LowSpeed(temp);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff fb31 	bl	80049d0 <MotorRun_LowSpeed>
			HAL_Delay(MotorResetDelay);
 800536e:	2078      	movs	r0, #120	; 0x78
 8005370:	f001 f8d6 	bl	8006520 <HAL_Delay>
			for(uint32_t i=0 ; Motor6_reset_OPTstatus ; i++){
 8005374:	2300      	movs	r3, #0
 8005376:	60fb      	str	r3, [r7, #12]
 8005378:	e01f      	b.n	80053ba <Motor_Reset+0x70e>
				if(i>500) {
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005380:	d915      	bls.n	80053ae <Motor_Reset+0x702>
					printf("[WRONG]1Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005388:	4619      	mov	r1, r3
 800538a:	4846      	ldr	r0, [pc, #280]	; (80054a4 <Motor_Reset+0x7f8>)
 800538c:	f009 ff3c 	bl	800f208 <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005396:	4619      	mov	r1, r3
 8005398:	4a3e      	ldr	r2, [pc, #248]	; (8005494 <Motor_Reset+0x7e8>)
 800539a:	460b      	mov	r3, r1
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	440b      	add	r3, r1
 80053a0:	015b      	lsls	r3, r3, #5
 80053a2:	4413      	add	r3, r2
 80053a4:	334c      	adds	r3, #76	; 0x4c
 80053a6:	2202      	movs	r2, #2
 80053a8:	601a      	str	r2, [r3, #0]
					return FAIL;
 80053aa:	2300      	movs	r3, #0
 80053ac:	e06b      	b.n	8005486 <Motor_Reset+0x7da>
				}
				else {HAL_Delay(1);}
 80053ae:	2001      	movs	r0, #1
 80053b0:	f001 f8b6 	bl	8006520 <HAL_Delay>
			for(uint32_t i=0 ; Motor6_reset_OPTstatus ; i++){
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	3301      	adds	r3, #1
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053be:	4837      	ldr	r0, [pc, #220]	; (800549c <Motor_Reset+0x7f0>)
 80053c0:	f002 fb18 	bl	80079f4 <HAL_GPIO_ReadPin>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d0d7      	beq.n	800537a <Motor_Reset+0x6ce>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053d0:	4619      	mov	r1, r3
 80053d2:	4a30      	ldr	r2, [pc, #192]	; (8005494 <Motor_Reset+0x7e8>)
 80053d4:	460b      	mov	r3, r1
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	440b      	add	r3, r1
 80053da:	015b      	lsls	r3, r3, #5
 80053dc:	4413      	add	r3, r2
 80053de:	334c      	adds	r3, #76	; 0x4c
 80053e0:	2202      	movs	r2, #2
 80053e2:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(MotorResetDelay);
 80053e4:	2078      	movs	r0, #120	; 0x78
 80053e6:	f001 f89b 	bl	8006520 <HAL_Delay>
		if (Motor6_Nreset_OPTstatus){
 80053ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053ee:	482b      	ldr	r0, [pc, #172]	; (800549c <Motor_Reset+0x7f0>)
 80053f0:	f002 fb00 	bl	80079f4 <HAL_GPIO_ReadPin>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d144      	bne.n	8005484 <Motor_Reset+0x7d8>
			temp->MotorDirection = 0 ;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp->NumberofRads = 50 ;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a28      	ldr	r2, [pc, #160]	; (80054a8 <Motor_Reset+0x7fc>)
 8005406:	625a      	str	r2, [r3, #36]	; 0x24
			MotorRun_LowSpeed(temp);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7ff fae1 	bl	80049d0 <MotorRun_LowSpeed>
			for(uint32_t i=0 ; Motor6_Nreset_OPTstatus ; i++){
 800540e:	2300      	movs	r3, #0
 8005410:	60bb      	str	r3, [r7, #8]
 8005412:	e020      	b.n	8005456 <Motor_Reset+0x7aa>
				if(i>5000) {
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f241 3288 	movw	r2, #5000	; 0x1388
 800541a:	4293      	cmp	r3, r2
 800541c:	d915      	bls.n	800544a <Motor_Reset+0x79e>
					printf("[WRONG]2Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005424:	4619      	mov	r1, r3
 8005426:	4821      	ldr	r0, [pc, #132]	; (80054ac <Motor_Reset+0x800>)
 8005428:	f009 feee 	bl	800f208 <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005432:	4619      	mov	r1, r3
 8005434:	4a17      	ldr	r2, [pc, #92]	; (8005494 <Motor_Reset+0x7e8>)
 8005436:	460b      	mov	r3, r1
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	440b      	add	r3, r1
 800543c:	015b      	lsls	r3, r3, #5
 800543e:	4413      	add	r3, r2
 8005440:	334c      	adds	r3, #76	; 0x4c
 8005442:	2202      	movs	r2, #2
 8005444:	601a      	str	r2, [r3, #0]
					return FAIL;
 8005446:	2300      	movs	r3, #0
 8005448:	e01d      	b.n	8005486 <Motor_Reset+0x7da>
				}
				else {HAL_Delay(1);}
 800544a:	2001      	movs	r0, #1
 800544c:	f001 f868 	bl	8006520 <HAL_Delay>
			for(uint32_t i=0 ; Motor6_Nreset_OPTstatus ; i++){
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	3301      	adds	r3, #1
 8005454:	60bb      	str	r3, [r7, #8]
 8005456:	f44f 7100 	mov.w	r1, #512	; 0x200
 800545a:	4810      	ldr	r0, [pc, #64]	; (800549c <Motor_Reset+0x7f0>)
 800545c:	f002 faca 	bl	80079f4 <HAL_GPIO_ReadPin>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d0d6      	beq.n	8005414 <Motor_Reset+0x768>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 3020 	ldrb.w	r3, [r3, #32]
 800546c:	4619      	mov	r1, r3
 800546e:	4a09      	ldr	r2, [pc, #36]	; (8005494 <Motor_Reset+0x7e8>)
 8005470:	460b      	mov	r3, r1
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	440b      	add	r3, r1
 8005476:	015b      	lsls	r3, r3, #5
 8005478:	4413      	add	r3, r2
 800547a:	334c      	adds	r3, #76	; 0x4c
 800547c:	2202      	movs	r2, #2
 800547e:	601a      	str	r2, [r3, #0]
			return SUCCESS;
 8005480:	2301      	movs	r3, #1
 8005482:	e000      	b.n	8005486 <Motor_Reset+0x7da>
		}
	}


	return FAIL;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3738      	adds	r7, #56	; 0x38
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	0801188c 	.word	0x0801188c
 8005494:	2000088c 	.word	0x2000088c
 8005498:	40020c00 	.word	0x40020c00
 800549c:	40021800 	.word	0x40021800
 80054a0:	41200000 	.word	0x41200000
 80054a4:	080118b8 	.word	0x080118b8
 80054a8:	42480000 	.word	0x42480000
 80054ac:	080118e4 	.word	0x080118e4

080054b0 <DC_Motor_ON>:

/*            *****************    0x10-0b00010000 直流电机控制模式 ：  ******************
根据协议，通过USART5进行出串口通讯，输入直流电机的【编号、AB相、占空比】参数
Status - 0x02 代表A相使能，0x01代表B相使能。同一个电机的AB相占空比一致 ***/
void DC_Motor_ON(struct MotorDefine *temp ,char x, uint32_t Duty_Cycle)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	460b      	mov	r3, r1
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	72fb      	strb	r3, [r7, #11]
	if ( x == 'A' ){
 80054be:	7afb      	ldrb	r3, [r7, #11]
 80054c0:	2b41      	cmp	r3, #65	; 0x41
 80054c2:	d13d      	bne.n	8005540 <DC_Motor_ON+0x90>
		Motor[temp->MotorNumber].Status = Motor[temp->MotorNumber].Status | 0b00000010 ;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054ca:	4619      	mov	r1, r3
 80054cc:	4a61      	ldr	r2, [pc, #388]	; (8005654 <DC_Motor_ON+0x1a4>)
 80054ce:	460b      	mov	r3, r1
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	440b      	add	r3, r1
 80054d4:	015b      	lsls	r3, r3, #5
 80054d6:	4413      	add	r3, r2
 80054d8:	3330      	adds	r3, #48	; 0x30
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	f892 2020 	ldrb.w	r2, [r2, #32]
 80054e2:	4611      	mov	r1, r2
 80054e4:	f043 0302 	orr.w	r3, r3, #2
 80054e8:	b2d8      	uxtb	r0, r3
 80054ea:	4a5a      	ldr	r2, [pc, #360]	; (8005654 <DC_Motor_ON+0x1a4>)
 80054ec:	460b      	mov	r3, r1
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	440b      	add	r3, r1
 80054f2:	015b      	lsls	r3, r3, #5
 80054f4:	4413      	add	r3, r2
 80054f6:	3330      	adds	r3, #48	; 0x30
 80054f8:	4602      	mov	r2, r0
 80054fa:	701a      	strb	r2, [r3, #0]
		if ( temp->MotorNumber == 6 ){
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005502:	2b06      	cmp	r3, #6
 8005504:	d105      	bne.n	8005512 <DC_Motor_ON+0x62>
			VM6_Enable_A();
 8005506:	2201      	movs	r2, #1
 8005508:	2180      	movs	r1, #128	; 0x80
 800550a:	4853      	ldr	r0, [pc, #332]	; (8005658 <DC_Motor_ON+0x1a8>)
 800550c:	f002 fa8a 	bl	8007a24 <HAL_GPIO_WritePin>
 8005510:	e057      	b.n	80055c2 <DC_Motor_ON+0x112>
		}
		else if ( temp->MotorNumber == 7 ){
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005518:	2b07      	cmp	r3, #7
 800551a:	d105      	bne.n	8005528 <DC_Motor_ON+0x78>
			VM7_Enable_A();
 800551c:	2201      	movs	r2, #1
 800551e:	2101      	movs	r1, #1
 8005520:	484e      	ldr	r0, [pc, #312]	; (800565c <DC_Motor_ON+0x1ac>)
 8005522:	f002 fa7f 	bl	8007a24 <HAL_GPIO_WritePin>
 8005526:	e04c      	b.n	80055c2 <DC_Motor_ON+0x112>
		}
		else if ( temp->MotorNumber == 8 ){
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800552e:	2b08      	cmp	r3, #8
 8005530:	d147      	bne.n	80055c2 <DC_Motor_ON+0x112>
			VM8_Enable_A();
 8005532:	2201      	movs	r2, #1
 8005534:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005538:	4849      	ldr	r0, [pc, #292]	; (8005660 <DC_Motor_ON+0x1b0>)
 800553a:	f002 fa73 	bl	8007a24 <HAL_GPIO_WritePin>
 800553e:	e040      	b.n	80055c2 <DC_Motor_ON+0x112>
		}
	}
	else if ( x == 'B' ){
 8005540:	7afb      	ldrb	r3, [r7, #11]
 8005542:	2b42      	cmp	r3, #66	; 0x42
 8005544:	d13d      	bne.n	80055c2 <DC_Motor_ON+0x112>
		Motor[temp->MotorNumber].Status = Motor[temp->MotorNumber].Status | 0b00000001 ;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800554c:	4619      	mov	r1, r3
 800554e:	4a41      	ldr	r2, [pc, #260]	; (8005654 <DC_Motor_ON+0x1a4>)
 8005550:	460b      	mov	r3, r1
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	440b      	add	r3, r1
 8005556:	015b      	lsls	r3, r3, #5
 8005558:	4413      	add	r3, r2
 800555a:	3330      	adds	r3, #48	; 0x30
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005564:	4611      	mov	r1, r2
 8005566:	f043 0301 	orr.w	r3, r3, #1
 800556a:	b2d8      	uxtb	r0, r3
 800556c:	4a39      	ldr	r2, [pc, #228]	; (8005654 <DC_Motor_ON+0x1a4>)
 800556e:	460b      	mov	r3, r1
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	440b      	add	r3, r1
 8005574:	015b      	lsls	r3, r3, #5
 8005576:	4413      	add	r3, r2
 8005578:	3330      	adds	r3, #48	; 0x30
 800557a:	4602      	mov	r2, r0
 800557c:	701a      	strb	r2, [r3, #0]
		if ( temp->MotorNumber == 6 ){
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005584:	2b06      	cmp	r3, #6
 8005586:	d105      	bne.n	8005594 <DC_Motor_ON+0xe4>
			VM6_Enable_B();
 8005588:	2201      	movs	r2, #1
 800558a:	2102      	movs	r1, #2
 800558c:	4833      	ldr	r0, [pc, #204]	; (800565c <DC_Motor_ON+0x1ac>)
 800558e:	f002 fa49 	bl	8007a24 <HAL_GPIO_WritePin>
 8005592:	e016      	b.n	80055c2 <DC_Motor_ON+0x112>
		}
		else if ( temp->MotorNumber == 7 ){
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f893 3020 	ldrb.w	r3, [r3, #32]
 800559a:	2b07      	cmp	r3, #7
 800559c:	d106      	bne.n	80055ac <DC_Motor_ON+0xfc>
			VM7_Enable_B();
 800559e:	2201      	movs	r2, #1
 80055a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055a4:	482e      	ldr	r0, [pc, #184]	; (8005660 <DC_Motor_ON+0x1b0>)
 80055a6:	f002 fa3d 	bl	8007a24 <HAL_GPIO_WritePin>
 80055aa:	e00a      	b.n	80055c2 <DC_Motor_ON+0x112>
		}
		else if ( temp->MotorNumber == 8 ){
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055b2:	2b08      	cmp	r3, #8
 80055b4:	d105      	bne.n	80055c2 <DC_Motor_ON+0x112>
			VM8_Enable_B();
 80055b6:	2201      	movs	r2, #1
 80055b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80055bc:	4828      	ldr	r0, [pc, #160]	; (8005660 <DC_Motor_ON+0x1b0>)
 80055be:	f002 fa31 	bl	8007a24 <HAL_GPIO_WritePin>
		}
	}

	Motor[temp->MotorNumber].NumberofSteps_StopAccel = Duty_Cycle;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055c8:	4619      	mov	r1, r3
 80055ca:	4a22      	ldr	r2, [pc, #136]	; (8005654 <DC_Motor_ON+0x1a4>)
 80055cc:	460b      	mov	r3, r1
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	440b      	add	r3, r1
 80055d2:	015b      	lsls	r3, r3, #5
 80055d4:	4413      	add	r3, r2
 80055d6:	3350      	adds	r3, #80	; 0x50
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].AccelerationTimeTMR = Duty_Cycle * Motor[temp->MotorNumber].StepperSpeedTMR / Motor[temp->MotorNumber].DecelerationTimeTMR ;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055e2:	4619      	mov	r1, r3
 80055e4:	4a1b      	ldr	r2, [pc, #108]	; (8005654 <DC_Motor_ON+0x1a4>)
 80055e6:	460b      	mov	r3, r1
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	440b      	add	r3, r1
 80055ec:	015b      	lsls	r3, r3, #5
 80055ee:	4413      	add	r3, r2
 80055f0:	3348      	adds	r3, #72	; 0x48
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	fb03 f202 	mul.w	r2, r3, r2
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005600:	4618      	mov	r0, r3
 8005602:	4914      	ldr	r1, [pc, #80]	; (8005654 <DC_Motor_ON+0x1a4>)
 8005604:	4603      	mov	r3, r0
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	4403      	add	r3, r0
 800560a:	015b      	lsls	r3, r3, #5
 800560c:	440b      	add	r3, r1
 800560e:	335c      	adds	r3, #92	; 0x5c
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68f9      	ldr	r1, [r7, #12]
 8005614:	f891 1020 	ldrb.w	r1, [r1, #32]
 8005618:	4608      	mov	r0, r1
 800561a:	fbb2 f2f3 	udiv	r2, r2, r3
 800561e:	490d      	ldr	r1, [pc, #52]	; (8005654 <DC_Motor_ON+0x1a4>)
 8005620:	4603      	mov	r3, r0
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	4403      	add	r3, r0
 8005626:	015b      	lsls	r3, r3, #5
 8005628:	440b      	add	r3, r1
 800562a:	3358      	adds	r3, #88	; 0x58
 800562c:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(Motor[temp->MotorNumber].htim_x);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005634:	4619      	mov	r1, r3
 8005636:	4a07      	ldr	r2, [pc, #28]	; (8005654 <DC_Motor_ON+0x1a4>)
 8005638:	460b      	mov	r3, r1
 800563a:	005b      	lsls	r3, r3, #1
 800563c:	440b      	add	r3, r1
 800563e:	015b      	lsls	r3, r3, #5
 8005640:	4413      	add	r3, r2
 8005642:	3334      	adds	r3, #52	; 0x34
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4618      	mov	r0, r3
 8005648:	f004 fd4a 	bl	800a0e0 <HAL_TIM_Base_Start_IT>
}
 800564c:	bf00      	nop
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	2000088c 	.word	0x2000088c
 8005658:	40021000 	.word	0x40021000
 800565c:	40021800 	.word	0x40021800
 8005660:	40021400 	.word	0x40021400

08005664 <DC_Motor_OFF>:

void DC_Motor_OFF(struct MotorDefine *temp ,char x)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	460b      	mov	r3, r1
 800566e:	70fb      	strb	r3, [r7, #3]
	if ( x == 'A' ){
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	2b41      	cmp	r3, #65	; 0x41
 8005674:	d13d      	bne.n	80056f2 <DC_Motor_OFF+0x8e>
		Motor[temp->MotorNumber].Status = Motor[temp->MotorNumber].Status & 0b11111101 ;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 3020 	ldrb.w	r3, [r3, #32]
 800567c:	4619      	mov	r1, r3
 800567e:	4a4e      	ldr	r2, [pc, #312]	; (80057b8 <DC_Motor_OFF+0x154>)
 8005680:	460b      	mov	r3, r1
 8005682:	005b      	lsls	r3, r3, #1
 8005684:	440b      	add	r3, r1
 8005686:	015b      	lsls	r3, r3, #5
 8005688:	4413      	add	r3, r2
 800568a:	3330      	adds	r3, #48	; 0x30
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005694:	4611      	mov	r1, r2
 8005696:	f023 0302 	bic.w	r3, r3, #2
 800569a:	b2d8      	uxtb	r0, r3
 800569c:	4a46      	ldr	r2, [pc, #280]	; (80057b8 <DC_Motor_OFF+0x154>)
 800569e:	460b      	mov	r3, r1
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	440b      	add	r3, r1
 80056a4:	015b      	lsls	r3, r3, #5
 80056a6:	4413      	add	r3, r2
 80056a8:	3330      	adds	r3, #48	; 0x30
 80056aa:	4602      	mov	r2, r0
 80056ac:	701a      	strb	r2, [r3, #0]
		if ( temp->MotorNumber == 6 ){
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056b4:	2b06      	cmp	r3, #6
 80056b6:	d105      	bne.n	80056c4 <DC_Motor_OFF+0x60>
			VM6_Disable_A();
 80056b8:	2200      	movs	r2, #0
 80056ba:	2180      	movs	r1, #128	; 0x80
 80056bc:	483f      	ldr	r0, [pc, #252]	; (80057bc <DC_Motor_OFF+0x158>)
 80056be:	f002 f9b1 	bl	8007a24 <HAL_GPIO_WritePin>
 80056c2:	e057      	b.n	8005774 <DC_Motor_OFF+0x110>
		}
		else if ( temp->MotorNumber == 7 ){
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056ca:	2b07      	cmp	r3, #7
 80056cc:	d105      	bne.n	80056da <DC_Motor_OFF+0x76>
			VM7_Disable_A();
 80056ce:	2200      	movs	r2, #0
 80056d0:	2101      	movs	r1, #1
 80056d2:	483b      	ldr	r0, [pc, #236]	; (80057c0 <DC_Motor_OFF+0x15c>)
 80056d4:	f002 f9a6 	bl	8007a24 <HAL_GPIO_WritePin>
 80056d8:	e04c      	b.n	8005774 <DC_Motor_OFF+0x110>
		}
		else if ( temp->MotorNumber == 8 ){
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056e0:	2b08      	cmp	r3, #8
 80056e2:	d147      	bne.n	8005774 <DC_Motor_OFF+0x110>
			VM8_Disable_A();
 80056e4:	2200      	movs	r2, #0
 80056e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80056ea:	4836      	ldr	r0, [pc, #216]	; (80057c4 <DC_Motor_OFF+0x160>)
 80056ec:	f002 f99a 	bl	8007a24 <HAL_GPIO_WritePin>
 80056f0:	e040      	b.n	8005774 <DC_Motor_OFF+0x110>
		}
	}
	else if ( x == 'B' ){
 80056f2:	78fb      	ldrb	r3, [r7, #3]
 80056f4:	2b42      	cmp	r3, #66	; 0x42
 80056f6:	d13d      	bne.n	8005774 <DC_Motor_OFF+0x110>
		Motor[temp->MotorNumber].Status = Motor[temp->MotorNumber].Status & 0b11111110 ;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056fe:	4619      	mov	r1, r3
 8005700:	4a2d      	ldr	r2, [pc, #180]	; (80057b8 <DC_Motor_OFF+0x154>)
 8005702:	460b      	mov	r3, r1
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	440b      	add	r3, r1
 8005708:	015b      	lsls	r3, r3, #5
 800570a:	4413      	add	r3, r2
 800570c:	3330      	adds	r3, #48	; 0x30
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005716:	4611      	mov	r1, r2
 8005718:	f023 0301 	bic.w	r3, r3, #1
 800571c:	b2d8      	uxtb	r0, r3
 800571e:	4a26      	ldr	r2, [pc, #152]	; (80057b8 <DC_Motor_OFF+0x154>)
 8005720:	460b      	mov	r3, r1
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	440b      	add	r3, r1
 8005726:	015b      	lsls	r3, r3, #5
 8005728:	4413      	add	r3, r2
 800572a:	3330      	adds	r3, #48	; 0x30
 800572c:	4602      	mov	r2, r0
 800572e:	701a      	strb	r2, [r3, #0]
		if ( temp->MotorNumber == 6 ){
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005736:	2b06      	cmp	r3, #6
 8005738:	d105      	bne.n	8005746 <DC_Motor_OFF+0xe2>
			VM6_Disable_B();
 800573a:	2200      	movs	r2, #0
 800573c:	2102      	movs	r1, #2
 800573e:	4820      	ldr	r0, [pc, #128]	; (80057c0 <DC_Motor_OFF+0x15c>)
 8005740:	f002 f970 	bl	8007a24 <HAL_GPIO_WritePin>
 8005744:	e016      	b.n	8005774 <DC_Motor_OFF+0x110>
		}
		else if ( temp->MotorNumber == 7 ){
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 3020 	ldrb.w	r3, [r3, #32]
 800574c:	2b07      	cmp	r3, #7
 800574e:	d106      	bne.n	800575e <DC_Motor_OFF+0xfa>
			VM7_Disable_B();
 8005750:	2200      	movs	r2, #0
 8005752:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005756:	481b      	ldr	r0, [pc, #108]	; (80057c4 <DC_Motor_OFF+0x160>)
 8005758:	f002 f964 	bl	8007a24 <HAL_GPIO_WritePin>
 800575c:	e00a      	b.n	8005774 <DC_Motor_OFF+0x110>
		}
		else if ( temp->MotorNumber == 8 ){
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005764:	2b08      	cmp	r3, #8
 8005766:	d105      	bne.n	8005774 <DC_Motor_OFF+0x110>
			VM8_Disable_B();
 8005768:	2200      	movs	r2, #0
 800576a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800576e:	4815      	ldr	r0, [pc, #84]	; (80057c4 <DC_Motor_OFF+0x160>)
 8005770:	f002 f958 	bl	8007a24 <HAL_GPIO_WritePin>
		}
	}

	if ( Motor[6].Status | Motor[7].Status | Motor[8].Status ){;}
 8005774:	4b10      	ldr	r3, [pc, #64]	; (80057b8 <DC_Motor_OFF+0x154>)
 8005776:	f893 2270 	ldrb.w	r2, [r3, #624]	; 0x270
 800577a:	4b0f      	ldr	r3, [pc, #60]	; (80057b8 <DC_Motor_OFF+0x154>)
 800577c:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
 8005780:	4313      	orrs	r3, r2
 8005782:	b2da      	uxtb	r2, r3
 8005784:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <DC_Motor_OFF+0x154>)
 8005786:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800578a:	4313      	orrs	r3, r2
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10e      	bne.n	80057b0 <DC_Motor_OFF+0x14c>
	else{
		HAL_TIM_Base_Stop_IT(Motor[temp->MotorNumber].htim_x);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005798:	4619      	mov	r1, r3
 800579a:	4a07      	ldr	r2, [pc, #28]	; (80057b8 <DC_Motor_OFF+0x154>)
 800579c:	460b      	mov	r3, r1
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	440b      	add	r3, r1
 80057a2:	015b      	lsls	r3, r3, #5
 80057a4:	4413      	add	r3, r2
 80057a6:	3334      	adds	r3, #52	; 0x34
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f004 fd08 	bl	800a1c0 <HAL_TIM_Base_Stop_IT>
	}
}
 80057b0:	bf00      	nop
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	2000088c 	.word	0x2000088c
 80057bc:	40021000 	.word	0x40021000
 80057c0:	40021800 	.word	0x40021800
 80057c4:	40021400 	.word	0x40021400

080057c8 <DuoTongDao_Position_Init>:
#define VP_first_place 126071 ;
#define VP_gap  18082
uint32_t VPMark[8] ={0};
struct DuoTongDao_SetPositionData data_V0 ;
void DuoTongDao_Position_Init(void)
{
 80057c8:	b480      	push	{r7}
 80057ca:	af00      	add	r7, sp, #0
	VPMark[0] = VP_first_place;		//bot
 80057cc:	4b2a      	ldr	r3, [pc, #168]	; (8005878 <DuoTongDao_Position_Init+0xb0>)
 80057ce:	4a2b      	ldr	r2, [pc, #172]	; (800587c <DuoTongDao_Position_Init+0xb4>)
 80057d0:	601a      	str	r2, [r3, #0]
	VPMark[1] = VPMark[0] - VP_gap;
 80057d2:	4b29      	ldr	r3, [pc, #164]	; (8005878 <DuoTongDao_Position_Init+0xb0>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f5a3 438d 	sub.w	r3, r3, #18048	; 0x4680
 80057da:	3b22      	subs	r3, #34	; 0x22
 80057dc:	4a26      	ldr	r2, [pc, #152]	; (8005878 <DuoTongDao_Position_Init+0xb0>)
 80057de:	6053      	str	r3, [r2, #4]
	VPMark[2] = VPMark[1] - VP_gap;
 80057e0:	4b25      	ldr	r3, [pc, #148]	; (8005878 <DuoTongDao_Position_Init+0xb0>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f5a3 438d 	sub.w	r3, r3, #18048	; 0x4680
 80057e8:	3b22      	subs	r3, #34	; 0x22
 80057ea:	4a23      	ldr	r2, [pc, #140]	; (8005878 <DuoTongDao_Position_Init+0xb0>)
 80057ec:	6093      	str	r3, [r2, #8]
	VPMark[3] = VPMark[2] - VP_gap;
 80057ee:	4b22      	ldr	r3, [pc, #136]	; (8005878 <DuoTongDao_Position_Init+0xb0>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f5a3 438d 	sub.w	r3, r3, #18048	; 0x4680
 80057f6:	3b22      	subs	r3, #34	; 0x22
 80057f8:	4a1f      	ldr	r2, [pc, #124]	; (8005878 <DuoTongDao_Position_Init+0xb0>)
 80057fa:	60d3      	str	r3, [r2, #12]
	VPMark[4] = VPMark[3] - VP_gap;
 80057fc:	4b1e      	ldr	r3, [pc, #120]	; (8005878 <DuoTongDao_Position_Init+0xb0>)
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f5a3 438d 	sub.w	r3, r3, #18048	; 0x4680
 8005804:	3b22      	subs	r3, #34	; 0x22
 8005806:	4a1c      	ldr	r2, [pc, #112]	; (8005878 <DuoTongDao_Position_Init+0xb0>)
 8005808:	6113      	str	r3, [r2, #16]
	VPMark[5] = VPMark[4] - VP_gap;
 800580a:	4b1b      	ldr	r3, [pc, #108]	; (8005878 <DuoTongDao_Position_Init+0xb0>)
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f5a3 438d 	sub.w	r3, r3, #18048	; 0x4680
 8005812:	3b22      	subs	r3, #34	; 0x22
 8005814:	4a18      	ldr	r2, [pc, #96]	; (8005878 <DuoTongDao_Position_Init+0xb0>)
 8005816:	6153      	str	r3, [r2, #20]
	VPMark[6] = VPMark[5] - VP_gap;
 8005818:	4b17      	ldr	r3, [pc, #92]	; (8005878 <DuoTongDao_Position_Init+0xb0>)
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	f5a3 438d 	sub.w	r3, r3, #18048	; 0x4680
 8005820:	3b22      	subs	r3, #34	; 0x22
 8005822:	4a15      	ldr	r2, [pc, #84]	; (8005878 <DuoTongDao_Position_Init+0xb0>)
 8005824:	6193      	str	r3, [r2, #24]
	VPMark[7] = VPMark[6] - VP_gap;
 8005826:	4b14      	ldr	r3, [pc, #80]	; (8005878 <DuoTongDao_Position_Init+0xb0>)
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	f5a3 438d 	sub.w	r3, r3, #18048	; 0x4680
 800582e:	3b22      	subs	r3, #34	; 0x22
 8005830:	4a11      	ldr	r2, [pc, #68]	; (8005878 <DuoTongDao_Position_Init+0xb0>)
 8005832:	61d3      	str	r3, [r2, #28]

	data_V0.Position_motor6_PushRod_reset = -16 ;
 8005834:	4b12      	ldr	r3, [pc, #72]	; (8005880 <DuoTongDao_Position_Init+0xb8>)
 8005836:	f06f 020f 	mvn.w	r2, #15
 800583a:	601a      	str	r2, [r3, #0]
	data_V0.Position_motor6_PushRod_push = 496 ;
 800583c:	4b10      	ldr	r3, [pc, #64]	; (8005880 <DuoTongDao_Position_Init+0xb8>)
 800583e:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8005842:	605a      	str	r2, [r3, #4]

	data_V0.Position_motor5_internal = -160 ;
 8005844:	4b0e      	ldr	r3, [pc, #56]	; (8005880 <DuoTongDao_Position_Init+0xb8>)
 8005846:	f06f 029f 	mvn.w	r2, #159	; 0x9f
 800584a:	609a      	str	r2, [r3, #8]
	data_V0.Position_motor5_external = 960 ;
 800584c:	4b0c      	ldr	r3, [pc, #48]	; (8005880 <DuoTongDao_Position_Init+0xb8>)
 800584e:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8005852:	60da      	str	r2, [r3, #12]

	data_V0.Position_motor3_reset = -512 ;
 8005854:	4b0a      	ldr	r3, [pc, #40]	; (8005880 <DuoTongDao_Position_Init+0xb8>)
 8005856:	4a0b      	ldr	r2, [pc, #44]	; (8005884 <DuoTongDao_Position_Init+0xbc>)
 8005858:	61da      	str	r2, [r3, #28]
	data_V0.Position_motor3_detect =  52224;
 800585a:	4b09      	ldr	r3, [pc, #36]	; (8005880 <DuoTongDao_Position_Init+0xb8>)
 800585c:	f44f 424c 	mov.w	r2, #52224	; 0xcc00
 8005860:	619a      	str	r2, [r3, #24]
	data_V0.Position_motor3_storage =  87808;
 8005862:	4b07      	ldr	r3, [pc, #28]	; (8005880 <DuoTongDao_Position_Init+0xb8>)
 8005864:	4a08      	ldr	r2, [pc, #32]	; (8005888 <DuoTongDao_Position_Init+0xc0>)
 8005866:	615a      	str	r2, [r3, #20]
	data_V0.Position_motor3_external = 125840 ;
 8005868:	4b05      	ldr	r3, [pc, #20]	; (8005880 <DuoTongDao_Position_Init+0xb8>)
 800586a:	4a08      	ldr	r2, [pc, #32]	; (800588c <DuoTongDao_Position_Init+0xc4>)
 800586c:	611a      	str	r2, [r3, #16]
}
 800586e:	bf00      	nop
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	20000c4c 	.word	0x20000c4c
 800587c:	0001ec77 	.word	0x0001ec77
 8005880:	20000c6c 	.word	0x20000c6c
 8005884:	fffffe00 	.word	0xfffffe00
 8005888:	00015700 	.word	0x00015700
 800588c:	0001eb90 	.word	0x0001eb90

08005890 <deal_buffer_motorCtrl_data>:
#ifndef DushuModule
#ifndef QuanxiePVctrl

struct  MotorDefine Motor_Temp ;
void deal_buffer_motorCtrl_data(struct MotorDefine *a)
{
 8005890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005894:	b08a      	sub	sp, #40	; 0x28
 8005896:	af08      	add	r7, sp, #32
 8005898:	6078      	str	r0, [r7, #4]
	a->MotorNumber = USART5_RX_BUF[1];
 800589a:	4b44      	ldr	r3, [pc, #272]	; (80059ac <deal_buffer_motorCtrl_data+0x11c>)
 800589c:	785a      	ldrb	r2, [r3, #1]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f883 2020 	strb.w	r2, [r3, #32]

	if ( USART5_RX_BUF[3] & 0b10000000 )  // 0x80
 80058a4:	4b41      	ldr	r3, [pc, #260]	; (80059ac <deal_buffer_motorCtrl_data+0x11c>)
 80058a6:	78db      	ldrb	r3, [r3, #3]
 80058a8:	b25b      	sxtb	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	da04      	bge.n	80058b8 <deal_buffer_motorCtrl_data+0x28>
	{
		a->MotorDirection = 1 ;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80058b6:	e009      	b.n	80058cc <deal_buffer_motorCtrl_data+0x3c>
	}
	else if (USART5_RX_BUF[3] & 0b01000000)	// 0x40
 80058b8:	4b3c      	ldr	r3, [pc, #240]	; (80059ac <deal_buffer_motorCtrl_data+0x11c>)
 80058ba:	78db      	ldrb	r3, [r3, #3]
 80058bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d003      	beq.n	80058cc <deal_buffer_motorCtrl_data+0x3c>
	{
		a->MotorDirection = 0 ;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	//a->DesiredSpeedInRads =  (float)USART5_RX_BUF[4] / 10;
	a->DesiredSpeedInRads =  (float)USART5_RX_BUF[4] ;
 80058cc:	4b37      	ldr	r3, [pc, #220]	; (80059ac <deal_buffer_motorCtrl_data+0x11c>)
 80058ce:	791b      	ldrb	r3, [r3, #4]
 80058d0:	ee07 3a90 	vmov	s15, r3
 80058d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	edc3 7a05 	vstr	s15, [r3, #20]
	a->NumberofRads = (float)USART5_RX_BUF[5] + (float)USART5_RX_BUF[6] / 100 ;
 80058de:	4b33      	ldr	r3, [pc, #204]	; (80059ac <deal_buffer_motorCtrl_data+0x11c>)
 80058e0:	795b      	ldrb	r3, [r3, #5]
 80058e2:	ee07 3a90 	vmov	s15, r3
 80058e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80058ea:	4b30      	ldr	r3, [pc, #192]	; (80059ac <deal_buffer_motorCtrl_data+0x11c>)
 80058ec:	799b      	ldrb	r3, [r3, #6]
 80058ee:	ee07 3a90 	vmov	s15, r3
 80058f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058f6:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 80059b0 <deal_buffer_motorCtrl_data+0x120>
 80058fa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80058fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	//a->StartupSpeedInRads = (float)USART5_RX_BUF[7] / 10 ;
	a->StartupSpeedInRads =  (float)USART5_RX_BUF[7] ;
 8005908:	4b28      	ldr	r3, [pc, #160]	; (80059ac <deal_buffer_motorCtrl_data+0x11c>)
 800590a:	79db      	ldrb	r3, [r3, #7]
 800590c:	ee07 3a90 	vmov	s15, r3
 8005910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	edc3 7a04 	vstr	s15, [r3, #16]
	a->accelerationRate = USART5_RX_BUF[8] * 100 ;
 800591a:	4b24      	ldr	r3, [pc, #144]	; (80059ac <deal_buffer_motorCtrl_data+0x11c>)
 800591c:	7a1b      	ldrb	r3, [r3, #8]
 800591e:	461a      	mov	r2, r3
 8005920:	2364      	movs	r3, #100	; 0x64
 8005922:	fb02 f303 	mul.w	r3, r2, r3
 8005926:	461a      	mov	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	619a      	str	r2, [r3, #24]
	a->decelerationRate = USART5_RX_BUF[9] * 100 ;
 800592c:	4b1f      	ldr	r3, [pc, #124]	; (80059ac <deal_buffer_motorCtrl_data+0x11c>)
 800592e:	7a5b      	ldrb	r3, [r3, #9]
 8005930:	461a      	mov	r2, r3
 8005932:	2364      	movs	r3, #100	; 0x64
 8005934:	fb02 f303 	mul.w	r3, r2, r3
 8005938:	461a      	mov	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	61da      	str	r2, [r3, #28]

	printf("\r\nInput Information:\r\n");
 800593e:	481d      	ldr	r0, [pc, #116]	; (80059b4 <deal_buffer_motorCtrl_data+0x124>)
 8005940:	f009 fcc8 	bl	800f2d4 <puts>
	printf("  MotorNumber:%d  MotorDirection:%d\r\n  DesiredSpeedInRads:%.2f\r\n  NumberofRads:%.2f\r\n  StartupSpeedInRads:%.2f\r\n  accelerationRate:%ld /Hz\r\n  decelerationRate:%ld /Hz\r\n"
	,a->MotorNumber,a->MotorDirection,a->DesiredSpeedInRads,a->NumberofRads,a->StartupSpeedInRads,a->accelerationRate,a->decelerationRate);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 3020 	ldrb.w	r3, [r3, #32]
	printf("  MotorNumber:%d  MotorDirection:%d\r\n  DesiredSpeedInRads:%.2f\r\n  NumberofRads:%.2f\r\n  StartupSpeedInRads:%.2f\r\n  accelerationRate:%ld /Hz\r\n  decelerationRate:%ld /Hz\r\n"
 800594a:	461e      	mov	r6, r3
	,a->MotorNumber,a->MotorDirection,a->DesiredSpeedInRads,a->NumberofRads,a->StartupSpeedInRads,a->accelerationRate,a->decelerationRate);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
	printf("  MotorNumber:%d  MotorDirection:%d\r\n  DesiredSpeedInRads:%.2f\r\n  NumberofRads:%.2f\r\n  StartupSpeedInRads:%.2f\r\n  accelerationRate:%ld /Hz\r\n  decelerationRate:%ld /Hz\r\n"
 8005952:	469a      	mov	sl, r3
	,a->MotorNumber,a->MotorDirection,a->DesiredSpeedInRads,a->NumberofRads,a->StartupSpeedInRads,a->accelerationRate,a->decelerationRate);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	695b      	ldr	r3, [r3, #20]
	printf("  MotorNumber:%d  MotorDirection:%d\r\n  DesiredSpeedInRads:%.2f\r\n  NumberofRads:%.2f\r\n  StartupSpeedInRads:%.2f\r\n  accelerationRate:%ld /Hz\r\n  decelerationRate:%ld /Hz\r\n"
 8005958:	4618      	mov	r0, r3
 800595a:	f7fa fdf5 	bl	8000548 <__aeabi_f2d>
 800595e:	4604      	mov	r4, r0
 8005960:	460d      	mov	r5, r1
	,a->MotorNumber,a->MotorDirection,a->DesiredSpeedInRads,a->NumberofRads,a->StartupSpeedInRads,a->accelerationRate,a->decelerationRate);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	printf("  MotorNumber:%d  MotorDirection:%d\r\n  DesiredSpeedInRads:%.2f\r\n  NumberofRads:%.2f\r\n  StartupSpeedInRads:%.2f\r\n  accelerationRate:%ld /Hz\r\n  decelerationRate:%ld /Hz\r\n"
 8005966:	4618      	mov	r0, r3
 8005968:	f7fa fdee 	bl	8000548 <__aeabi_f2d>
 800596c:	4680      	mov	r8, r0
 800596e:	4689      	mov	r9, r1
	,a->MotorNumber,a->MotorDirection,a->DesiredSpeedInRads,a->NumberofRads,a->StartupSpeedInRads,a->accelerationRate,a->decelerationRate);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	691b      	ldr	r3, [r3, #16]
	printf("  MotorNumber:%d  MotorDirection:%d\r\n  DesiredSpeedInRads:%.2f\r\n  NumberofRads:%.2f\r\n  StartupSpeedInRads:%.2f\r\n  accelerationRate:%ld /Hz\r\n  decelerationRate:%ld /Hz\r\n"
 8005974:	4618      	mov	r0, r3
 8005976:	f7fa fde7 	bl	8000548 <__aeabi_f2d>
 800597a:	4602      	mov	r2, r0
 800597c:	460b      	mov	r3, r1
 800597e:	6879      	ldr	r1, [r7, #4]
 8005980:	6989      	ldr	r1, [r1, #24]
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	69c0      	ldr	r0, [r0, #28]
 8005986:	9007      	str	r0, [sp, #28]
 8005988:	9106      	str	r1, [sp, #24]
 800598a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800598e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005992:	e9cd 4500 	strd	r4, r5, [sp]
 8005996:	4652      	mov	r2, sl
 8005998:	4631      	mov	r1, r6
 800599a:	4807      	ldr	r0, [pc, #28]	; (80059b8 <deal_buffer_motorCtrl_data+0x128>)
 800599c:	f009 fc34 	bl	800f208 <iprintf>
}
 80059a0:	bf00      	nop
 80059a2:	3708      	adds	r7, #8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059aa:	bf00      	nop
 80059ac:	20000714 	.word	0x20000714
 80059b0:	42c80000 	.word	0x42c80000
 80059b4:	0801194c 	.word	0x0801194c
 80059b8:	08011964 	.word	0x08011964

080059bc <deal_buffer_motorCtrl_position>:


void deal_buffer_motorCtrl_position(struct MotorDefine *a)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
	a->MotorNumber = USART5_RX_BUF[1];
 80059c4:	4b1b      	ldr	r3, [pc, #108]	; (8005a34 <deal_buffer_motorCtrl_position+0x78>)
 80059c6:	785a      	ldrb	r2, [r3, #1]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f883 2020 	strb.w	r2, [r3, #32]
	if ( USART5_RX_BUF[4] == 1){
 80059ce:	4b19      	ldr	r3, [pc, #100]	; (8005a34 <deal_buffer_motorCtrl_position+0x78>)
 80059d0:	791b      	ldrb	r3, [r3, #4]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d10d      	bne.n	80059f2 <deal_buffer_motorCtrl_position+0x36>
		a->TargetPosition = USART5_RX_BUF[7] + USART5_RX_BUF[6] * 16*16 + USART5_RX_BUF[5] * 16*16*16*16 ;
 80059d6:	4b17      	ldr	r3, [pc, #92]	; (8005a34 <deal_buffer_motorCtrl_position+0x78>)
 80059d8:	79db      	ldrb	r3, [r3, #7]
 80059da:	461a      	mov	r2, r3
 80059dc:	4b15      	ldr	r3, [pc, #84]	; (8005a34 <deal_buffer_motorCtrl_position+0x78>)
 80059de:	799b      	ldrb	r3, [r3, #6]
 80059e0:	021b      	lsls	r3, r3, #8
 80059e2:	441a      	add	r2, r3
 80059e4:	4b13      	ldr	r3, [pc, #76]	; (8005a34 <deal_buffer_motorCtrl_position+0x78>)
 80059e6:	795b      	ldrb	r3, [r3, #5]
 80059e8:	041b      	lsls	r3, r3, #16
 80059ea:	441a      	add	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80059f0:	e011      	b.n	8005a16 <deal_buffer_motorCtrl_position+0x5a>
	}
	else if ( USART5_RX_BUF[4] == 0){
 80059f2:	4b10      	ldr	r3, [pc, #64]	; (8005a34 <deal_buffer_motorCtrl_position+0x78>)
 80059f4:	791b      	ldrb	r3, [r3, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10d      	bne.n	8005a16 <deal_buffer_motorCtrl_position+0x5a>
		a->TargetPosition = - (USART5_RX_BUF[7] + USART5_RX_BUF[6] * 16*16 + USART5_RX_BUF[5] * 16*16*16*16) ;
 80059fa:	4b0e      	ldr	r3, [pc, #56]	; (8005a34 <deal_buffer_motorCtrl_position+0x78>)
 80059fc:	79db      	ldrb	r3, [r3, #7]
 80059fe:	461a      	mov	r2, r3
 8005a00:	4b0c      	ldr	r3, [pc, #48]	; (8005a34 <deal_buffer_motorCtrl_position+0x78>)
 8005a02:	799b      	ldrb	r3, [r3, #6]
 8005a04:	021b      	lsls	r3, r3, #8
 8005a06:	441a      	add	r2, r3
 8005a08:	4b0a      	ldr	r3, [pc, #40]	; (8005a34 <deal_buffer_motorCtrl_position+0x78>)
 8005a0a:	795b      	ldrb	r3, [r3, #5]
 8005a0c:	041b      	lsls	r3, r3, #16
 8005a0e:	4413      	add	r3, r2
 8005a10:	425a      	negs	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	printf("\r\nInput Information: Motor%d goes to TargetPosition:%ld\r\n",a->MotorNumber,a->TargetPosition);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a22:	461a      	mov	r2, r3
 8005a24:	4804      	ldr	r0, [pc, #16]	; (8005a38 <deal_buffer_motorCtrl_position+0x7c>)
 8005a26:	f009 fbef 	bl	800f208 <iprintf>
}
 8005a2a:	bf00      	nop
 8005a2c:	3708      	adds	r7, #8
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	20000714 	.word	0x20000714
 8005a38:	08011a10 	.word	0x08011a10

08005a3c <deal_buffer_motorCtrl_reset>:

void deal_buffer_motorCtrl_reset(struct MotorDefine *a)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
	a->MotorNumber = USART5_RX_BUF[1];
 8005a44:	4b07      	ldr	r3, [pc, #28]	; (8005a64 <deal_buffer_motorCtrl_reset+0x28>)
 8005a46:	785a      	ldrb	r2, [r3, #1]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f883 2020 	strb.w	r2, [r3, #32]

	printf("\r\nInput Information: Reset Motor%d\r\n",a->MotorNumber);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a54:	4619      	mov	r1, r3
 8005a56:	4804      	ldr	r0, [pc, #16]	; (8005a68 <deal_buffer_motorCtrl_reset+0x2c>)
 8005a58:	f009 fbd6 	bl	800f208 <iprintf>
}
 8005a5c:	bf00      	nop
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	20000714 	.word	0x20000714
 8005a68:	08011a4c 	.word	0x08011a4c

08005a6c <deal_buffer_DCmotorCtrl>:

void deal_buffer_DCmotorCtrl(struct MotorDefine *a)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
	a->MotorNumber = USART5_RX_BUF[1];
 8005a74:	4b11      	ldr	r3, [pc, #68]	; (8005abc <deal_buffer_DCmotorCtrl+0x50>)
 8005a76:	785a      	ldrb	r2, [r3, #1]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f883 2020 	strb.w	r2, [r3, #32]
	a->NumberofSteps_StopAccel = USART5_RX_BUF[6];
 8005a7e:	4b0f      	ldr	r3, [pc, #60]	; (8005abc <deal_buffer_DCmotorCtrl+0x50>)
 8005a80:	799b      	ldrb	r3, [r3, #6]
 8005a82:	461a      	mov	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	651a      	str	r2, [r3, #80]	; 0x50
	if (USART5_RX_BUF[4] == 0x00 ){
 8005a88:	4b0c      	ldr	r3, [pc, #48]	; (8005abc <deal_buffer_DCmotorCtrl+0x50>)
 8005a8a:	791b      	ldrb	r3, [r3, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d107      	bne.n	8005aa0 <deal_buffer_DCmotorCtrl+0x34>
		printf("\r\nInput Information: DC Motor%d STOP! \r\n",a->MotorNumber);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a96:	4619      	mov	r1, r3
 8005a98:	4809      	ldr	r0, [pc, #36]	; (8005ac0 <deal_buffer_DCmotorCtrl+0x54>)
 8005a9a:	f009 fbb5 	bl	800f208 <iprintf>
	}
	else{
		printf("\r\nInput Information: DC Motor%d Run,Duty Cycle: %ld percent\r\n",a->MotorNumber,a->NumberofSteps_StopAccel);
	}
}
 8005a9e:	e009      	b.n	8005ab4 <deal_buffer_DCmotorCtrl+0x48>
		printf("\r\nInput Information: DC Motor%d Run,Duty Cycle: %ld percent\r\n",a->MotorNumber,a->NumberofSteps_StopAccel);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aac:	461a      	mov	r2, r3
 8005aae:	4805      	ldr	r0, [pc, #20]	; (8005ac4 <deal_buffer_DCmotorCtrl+0x58>)
 8005ab0:	f009 fbaa 	bl	800f208 <iprintf>
}
 8005ab4:	bf00      	nop
 8005ab6:	3708      	adds	r7, #8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	20000714 	.word	0x20000714
 8005ac0:	08011a74 	.word	0x08011a74
 8005ac4:	08011aa0 	.word	0x08011aa0

08005ac8 <StartmessageTask>:

void StartmessageTask(void *argument)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
	osDelay(20);
 8005ad0:	2014      	movs	r0, #20
 8005ad2:	f006 f9e7 	bl	800bea4 <osDelay>
	uint8_t len = 0;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	73fb      	strb	r3, [r7, #15]
	printf("messageTask starts! \r\n");
 8005ada:	4848      	ldr	r0, [pc, #288]	; (8005bfc <StartmessageTask+0x134>)
 8005adc:	f009 fbfa 	bl	800f2d4 <puts>

	for(;;){
		osDelay(1);
 8005ae0:	2001      	movs	r0, #1
 8005ae2:	f006 f9df 	bl	800bea4 <osDelay>
	    if(USART_RX_STA&0x8000)
 8005ae6:	4b46      	ldr	r3, [pc, #280]	; (8005c00 <StartmessageTask+0x138>)
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	b21b      	sxth	r3, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	daf7      	bge.n	8005ae0 <StartmessageTask+0x18>
		{
	    	len=USART_RX_STA&0x3fff;
 8005af0:	4b43      	ldr	r3, [pc, #268]	; (8005c00 <StartmessageTask+0x138>)
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	73fb      	strb	r3, [r7, #15]

			switch ( USART5_RX_BUF[2] )
 8005af6:	4b43      	ldr	r3, [pc, #268]	; (8005c04 <StartmessageTask+0x13c>)
 8005af8:	789b      	ldrb	r3, [r3, #2]
 8005afa:	2b80      	cmp	r3, #128	; 0x80
 8005afc:	d00e      	beq.n	8005b1c <StartmessageTask+0x54>
 8005afe:	2b80      	cmp	r3, #128	; 0x80
 8005b00:	dcee      	bgt.n	8005ae0 <StartmessageTask+0x18>
 8005b02:	2b40      	cmp	r3, #64	; 0x40
 8005b04:	d01d      	beq.n	8005b42 <StartmessageTask+0x7a>
 8005b06:	2b40      	cmp	r3, #64	; 0x40
 8005b08:	dcea      	bgt.n	8005ae0 <StartmessageTask+0x18>
 8005b0a:	2b20      	cmp	r3, #32
 8005b0c:	d023      	beq.n	8005b56 <StartmessageTask+0x8e>
 8005b0e:	2b20      	cmp	r3, #32
 8005b10:	dce6      	bgt.n	8005ae0 <StartmessageTask+0x18>
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d05d      	beq.n	8005bd2 <StartmessageTask+0x10a>
 8005b16:	2b10      	cmp	r3, #16
 8005b18:	d027      	beq.n	8005b6a <StartmessageTask+0xa2>
 8005b1a:	e06d      	b.n	8005bf8 <StartmessageTask+0x130>
			{
			/***   电机控制-位置模式 ，16进制0x80  ***/
			case 0b10000000:
				deal_buffer_motorCtrl_position(&Motor_Temp);
 8005b1c:	483a      	ldr	r0, [pc, #232]	; (8005c08 <StartmessageTask+0x140>)
 8005b1e:	f7ff ff4d 	bl	80059bc <deal_buffer_motorCtrl_position>
				if (USART5_RX_BUF[3] & 0b00000001){			// 不带编码器模式
 8005b22:	4b38      	ldr	r3, [pc, #224]	; (8005c04 <StartmessageTask+0x13c>)
 8005b24:	78db      	ldrb	r3, [r3, #3]
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d005      	beq.n	8005b3a <StartmessageTask+0x72>
					MotorMove_position(&Motor_Temp,Motor_Temp.TargetPosition);
 8005b2e:	4b36      	ldr	r3, [pc, #216]	; (8005c08 <StartmessageTask+0x140>)
 8005b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b32:	4619      	mov	r1, r3
 8005b34:	4834      	ldr	r0, [pc, #208]	; (8005c08 <StartmessageTask+0x140>)
 8005b36:	f7fe f95b 	bl	8003df0 <MotorMove_position>
#ifdef JiaYangZhen_EncoderMode
				else if (USART5_RX_BUF[3] & 0b00000010){	// 带编码器模式
					MotorMove_position_Enocder(&Motor_Temp,Motor_Temp.TargetPosition);
				}
#endif
				USART_RX_STA=0;
 8005b3a:	4b31      	ldr	r3, [pc, #196]	; (8005c00 <StartmessageTask+0x138>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	801a      	strh	r2, [r3, #0]
			break;
 8005b40:	e05a      	b.n	8005bf8 <StartmessageTask+0x130>

			/***   电机控制-参数模式 ，16进制0x40  ***/
			case 0b01000000:
				deal_buffer_motorCtrl_data(&Motor_Temp);
 8005b42:	4831      	ldr	r0, [pc, #196]	; (8005c08 <StartmessageTask+0x140>)
 8005b44:	f7ff fea4 	bl	8005890 <deal_buffer_motorCtrl_data>
				MotorMove_steps(&Motor_Temp);
 8005b48:	482f      	ldr	r0, [pc, #188]	; (8005c08 <StartmessageTask+0x140>)
 8005b4a:	f7fd ff87 	bl	8003a5c <MotorMove_steps>
				USART_RX_STA=0;
 8005b4e:	4b2c      	ldr	r3, [pc, #176]	; (8005c00 <StartmessageTask+0x138>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	801a      	strh	r2, [r3, #0]
			break;
 8005b54:	e050      	b.n	8005bf8 <StartmessageTask+0x130>

			/***   电机控制-复位 ，16进制0x20  ***/
			case 0b00100000:
				deal_buffer_motorCtrl_reset(&Motor_Temp);
 8005b56:	482c      	ldr	r0, [pc, #176]	; (8005c08 <StartmessageTask+0x140>)
 8005b58:	f7ff ff70 	bl	8005a3c <deal_buffer_motorCtrl_reset>
				Motor_Reset(&Motor_Temp);
 8005b5c:	482a      	ldr	r0, [pc, #168]	; (8005c08 <StartmessageTask+0x140>)
 8005b5e:	f7ff f8a5 	bl	8004cac <Motor_Reset>
				USART_RX_STA=0;
 8005b62:	4b27      	ldr	r3, [pc, #156]	; (8005c00 <StartmessageTask+0x138>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	801a      	strh	r2, [r3, #0]
			break;
 8005b68:	e046      	b.n	8005bf8 <StartmessageTask+0x130>

			/***   直流电机控制 0x10  ***/
			case 0b00010000:
				deal_buffer_DCmotorCtrl(&Motor_Temp);
 8005b6a:	4827      	ldr	r0, [pc, #156]	; (8005c08 <StartmessageTask+0x140>)
 8005b6c:	f7ff ff7e 	bl	8005a6c <deal_buffer_DCmotorCtrl>
				if (USART5_RX_BUF[4] == 0x00 ){
 8005b70:	4b24      	ldr	r3, [pc, #144]	; (8005c04 <StartmessageTask+0x13c>)
 8005b72:	791b      	ldrb	r3, [r3, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d111      	bne.n	8005b9c <StartmessageTask+0xd4>
					if( USART5_RX_BUF[5] == 0x02 ){
 8005b78:	4b22      	ldr	r3, [pc, #136]	; (8005c04 <StartmessageTask+0x13c>)
 8005b7a:	795b      	ldrb	r3, [r3, #5]
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d104      	bne.n	8005b8a <StartmessageTask+0xc2>
						DC_Motor_OFF(&Motor_Temp,'A');
 8005b80:	2141      	movs	r1, #65	; 0x41
 8005b82:	4821      	ldr	r0, [pc, #132]	; (8005c08 <StartmessageTask+0x140>)
 8005b84:	f7ff fd6e 	bl	8005664 <DC_Motor_OFF>
 8005b88:	e01f      	b.n	8005bca <StartmessageTask+0x102>
					}
					else if( USART5_RX_BUF[5] == 0x01 ){
 8005b8a:	4b1e      	ldr	r3, [pc, #120]	; (8005c04 <StartmessageTask+0x13c>)
 8005b8c:	795b      	ldrb	r3, [r3, #5]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d11b      	bne.n	8005bca <StartmessageTask+0x102>
						DC_Motor_OFF(&Motor_Temp,'B');
 8005b92:	2142      	movs	r1, #66	; 0x42
 8005b94:	481c      	ldr	r0, [pc, #112]	; (8005c08 <StartmessageTask+0x140>)
 8005b96:	f7ff fd65 	bl	8005664 <DC_Motor_OFF>
 8005b9a:	e016      	b.n	8005bca <StartmessageTask+0x102>
					}
				}
				else{
					if( USART5_RX_BUF[5] == 0x02 ){
 8005b9c:	4b19      	ldr	r3, [pc, #100]	; (8005c04 <StartmessageTask+0x13c>)
 8005b9e:	795b      	ldrb	r3, [r3, #5]
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d107      	bne.n	8005bb4 <StartmessageTask+0xec>
						DC_Motor_ON(&Motor_Temp,'A',USART5_RX_BUF[6]);
 8005ba4:	4b17      	ldr	r3, [pc, #92]	; (8005c04 <StartmessageTask+0x13c>)
 8005ba6:	799b      	ldrb	r3, [r3, #6]
 8005ba8:	461a      	mov	r2, r3
 8005baa:	2141      	movs	r1, #65	; 0x41
 8005bac:	4816      	ldr	r0, [pc, #88]	; (8005c08 <StartmessageTask+0x140>)
 8005bae:	f7ff fc7f 	bl	80054b0 <DC_Motor_ON>
 8005bb2:	e00a      	b.n	8005bca <StartmessageTask+0x102>
					}
					else if( USART5_RX_BUF[5] == 0x01 ){
 8005bb4:	4b13      	ldr	r3, [pc, #76]	; (8005c04 <StartmessageTask+0x13c>)
 8005bb6:	795b      	ldrb	r3, [r3, #5]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d106      	bne.n	8005bca <StartmessageTask+0x102>
						DC_Motor_ON(&Motor_Temp,'B',USART5_RX_BUF[6]);
 8005bbc:	4b11      	ldr	r3, [pc, #68]	; (8005c04 <StartmessageTask+0x13c>)
 8005bbe:	799b      	ldrb	r3, [r3, #6]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	2142      	movs	r1, #66	; 0x42
 8005bc4:	4810      	ldr	r0, [pc, #64]	; (8005c08 <StartmessageTask+0x140>)
 8005bc6:	f7ff fc73 	bl	80054b0 <DC_Motor_ON>
					}
				}
				USART_RX_STA=0;
 8005bca:	4b0d      	ldr	r3, [pc, #52]	; (8005c00 <StartmessageTask+0x138>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	801a      	strh	r2, [r3, #0]
			break;
 8005bd0:	e012      	b.n	8005bf8 <StartmessageTask+0x130>

			/***   打印回传接收到的协议数据  0x01  ***/
			case 0b00000001:
				HAL_UART_Transmit_IT(&huart5, USART5_RX_BUF,len);
 8005bd2:	7bfb      	ldrb	r3, [r7, #15]
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	490a      	ldr	r1, [pc, #40]	; (8005c04 <StartmessageTask+0x13c>)
 8005bda:	480c      	ldr	r0, [pc, #48]	; (8005c0c <StartmessageTask+0x144>)
 8005bdc:	f005 f865 	bl	800acaa <HAL_UART_Transmit_IT>
				while(__HAL_UART_GET_FLAG(&huart5,UART_FLAG_TC)!=SET);
 8005be0:	bf00      	nop
 8005be2:	4b0a      	ldr	r3, [pc, #40]	; (8005c0c <StartmessageTask+0x144>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bec:	2b40      	cmp	r3, #64	; 0x40
 8005bee:	d1f8      	bne.n	8005be2 <StartmessageTask+0x11a>
				USART_RX_STA=0;
 8005bf0:	4b03      	ldr	r3, [pc, #12]	; (8005c00 <StartmessageTask+0x138>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	801a      	strh	r2, [r3, #0]
			break;
 8005bf6:	bf00      	nop
		osDelay(1);
 8005bf8:	e772      	b.n	8005ae0 <StartmessageTask+0x18>
 8005bfa:	bf00      	nop
 8005bfc:	08011ae0 	.word	0x08011ae0
 8005c00:	20000778 	.word	0x20000778
 8005c04:	20000714 	.word	0x20000714
 8005c08:	20000c8c 	.word	0x20000c8c
 8005c0c:	200007c0 	.word	0x200007c0

08005c10 <DTD_Motors_Init>:


#ifdef DuoTongDao

uint8_t DTD_Motors_Init(void)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	af00      	add	r7, sp, #0
	printf("DTD Reseting Motors:3-5-6-2 ...\r\n");
 8005c14:	4858      	ldr	r0, [pc, #352]	; (8005d78 <DTD_Motors_Init+0x168>)
 8005c16:	f009 fb5d 	bl	800f2d4 <puts>

	Motor3_Enable();	// reset motor3 and goto external side
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	4857      	ldr	r0, [pc, #348]	; (8005d7c <DTD_Motors_Init+0x16c>)
 8005c20:	f001 ff00 	bl	8007a24 <HAL_GPIO_WritePin>
	if ( !(Motor_Reset(&Motor[3])) ){
 8005c24:	4856      	ldr	r0, [pc, #344]	; (8005d80 <DTD_Motors_Init+0x170>)
 8005c26:	f7ff f841 	bl	8004cac <Motor_Reset>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d109      	bne.n	8005c44 <DTD_Motors_Init+0x34>
		Motor3_Disable();
 8005c30:	2201      	movs	r2, #1
 8005c32:	2101      	movs	r1, #1
 8005c34:	4851      	ldr	r0, [pc, #324]	; (8005d7c <DTD_Motors_Init+0x16c>)
 8005c36:	f001 fef5 	bl	8007a24 <HAL_GPIO_WritePin>
		printf("[WRONG!]Motor3 reset failed! ...\r\n");\
 8005c3a:	4852      	ldr	r0, [pc, #328]	; (8005d84 <DTD_Motors_Init+0x174>)
 8005c3c:	f009 fb4a 	bl	800f2d4 <puts>
		return FAIL ;
 8005c40:	2300      	movs	r3, #0
 8005c42:	e096      	b.n	8005d72 <DTD_Motors_Init+0x162>
	}
	HAL_Delay(200);
 8005c44:	20c8      	movs	r0, #200	; 0xc8
 8005c46:	f000 fc6b 	bl	8006520 <HAL_Delay>
	MotorMove_position(&Motor[3],data_V0.Position_motor3_external);
 8005c4a:	4b4f      	ldr	r3, [pc, #316]	; (8005d88 <DTD_Motors_Init+0x178>)
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	4619      	mov	r1, r3
 8005c50:	484b      	ldr	r0, [pc, #300]	; (8005d80 <DTD_Motors_Init+0x170>)
 8005c52:	f7fe f8cd 	bl	8003df0 <MotorMove_position>
	HAL_Delay(200);
 8005c56:	20c8      	movs	r0, #200	; 0xc8
 8005c58:	f000 fc62 	bl	8006520 <HAL_Delay>
	while(Motor[3].Status){
 8005c5c:	e002      	b.n	8005c64 <DTD_Motors_Init+0x54>
		HAL_Delay(100);
 8005c5e:	2064      	movs	r0, #100	; 0x64
 8005c60:	f000 fc5e 	bl	8006520 <HAL_Delay>
	while(Motor[3].Status){
 8005c64:	4b49      	ldr	r3, [pc, #292]	; (8005d8c <DTD_Motors_Init+0x17c>)
 8005c66:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1f7      	bne.n	8005c5e <DTD_Motors_Init+0x4e>
	}

	VM5_Enable_A();	VM5_Enable_B();	// reset motor5 and goto external side
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c74:	4841      	ldr	r0, [pc, #260]	; (8005d7c <DTD_Motors_Init+0x16c>)
 8005c76:	f001 fed5 	bl	8007a24 <HAL_GPIO_WritePin>
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c80:	483e      	ldr	r0, [pc, #248]	; (8005d7c <DTD_Motors_Init+0x16c>)
 8005c82:	f001 fecf 	bl	8007a24 <HAL_GPIO_WritePin>
	if ( !(Motor_Reset(&Motor[5])) ){
 8005c86:	4842      	ldr	r0, [pc, #264]	; (8005d90 <DTD_Motors_Init+0x180>)
 8005c88:	f7ff f810 	bl	8004cac <Motor_Reset>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d110      	bne.n	8005cb4 <DTD_Motors_Init+0xa4>
		VM5_Disable_A(); VM5_Disable_B();
 8005c92:	2200      	movs	r2, #0
 8005c94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c98:	4838      	ldr	r0, [pc, #224]	; (8005d7c <DTD_Motors_Init+0x16c>)
 8005c9a:	f001 fec3 	bl	8007a24 <HAL_GPIO_WritePin>
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ca4:	4835      	ldr	r0, [pc, #212]	; (8005d7c <DTD_Motors_Init+0x16c>)
 8005ca6:	f001 febd 	bl	8007a24 <HAL_GPIO_WritePin>
		printf("[WRONG!]Motor5 reset failed! ...\r\n");\
 8005caa:	483a      	ldr	r0, [pc, #232]	; (8005d94 <DTD_Motors_Init+0x184>)
 8005cac:	f009 fb12 	bl	800f2d4 <puts>
		return FAIL ;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	e05e      	b.n	8005d72 <DTD_Motors_Init+0x162>
	}

	VM6_Enable_A();	VM6_Enable_B();	// reset motor6
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	2180      	movs	r1, #128	; 0x80
 8005cb8:	4830      	ldr	r0, [pc, #192]	; (8005d7c <DTD_Motors_Init+0x16c>)
 8005cba:	f001 feb3 	bl	8007a24 <HAL_GPIO_WritePin>
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	2102      	movs	r1, #2
 8005cc2:	4835      	ldr	r0, [pc, #212]	; (8005d98 <DTD_Motors_Init+0x188>)
 8005cc4:	f001 feae 	bl	8007a24 <HAL_GPIO_WritePin>
	if ( !(Motor_Reset(&Motor[6])) ){
 8005cc8:	4834      	ldr	r0, [pc, #208]	; (8005d9c <DTD_Motors_Init+0x18c>)
 8005cca:	f7fe ffef 	bl	8004cac <Motor_Reset>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10e      	bne.n	8005cf2 <DTD_Motors_Init+0xe2>
		VM6_Disable_A(); VM6_Disable_B();
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2180      	movs	r1, #128	; 0x80
 8005cd8:	4828      	ldr	r0, [pc, #160]	; (8005d7c <DTD_Motors_Init+0x16c>)
 8005cda:	f001 fea3 	bl	8007a24 <HAL_GPIO_WritePin>
 8005cde:	2200      	movs	r2, #0
 8005ce0:	2102      	movs	r1, #2
 8005ce2:	482d      	ldr	r0, [pc, #180]	; (8005d98 <DTD_Motors_Init+0x188>)
 8005ce4:	f001 fe9e 	bl	8007a24 <HAL_GPIO_WritePin>
		printf("[WRONG!]Motor6 reset failed! ...\r\n");\
 8005ce8:	482d      	ldr	r0, [pc, #180]	; (8005da0 <DTD_Motors_Init+0x190>)
 8005cea:	f009 faf3 	bl	800f2d4 <puts>
		return FAIL ;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	e03f      	b.n	8005d72 <DTD_Motors_Init+0x162>
	}

	HAL_Delay(200);
 8005cf2:	20c8      	movs	r0, #200	; 0xc8
 8005cf4:	f000 fc14 	bl	8006520 <HAL_Delay>
	MotorMove_position(&Motor[5],data_V0.Position_motor5_external);
 8005cf8:	4b23      	ldr	r3, [pc, #140]	; (8005d88 <DTD_Motors_Init+0x178>)
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	4824      	ldr	r0, [pc, #144]	; (8005d90 <DTD_Motors_Init+0x180>)
 8005d00:	f7fe f876 	bl	8003df0 <MotorMove_position>
	HAL_Delay(200);
 8005d04:	20c8      	movs	r0, #200	; 0xc8
 8005d06:	f000 fc0b 	bl	8006520 <HAL_Delay>
	while(Motor[5].Status){
 8005d0a:	e002      	b.n	8005d12 <DTD_Motors_Init+0x102>
		HAL_Delay(100);
 8005d0c:	2064      	movs	r0, #100	; 0x64
 8005d0e:	f000 fc07 	bl	8006520 <HAL_Delay>
	while(Motor[5].Status){
 8005d12:	4b1e      	ldr	r3, [pc, #120]	; (8005d8c <DTD_Motors_Init+0x17c>)
 8005d14:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1f7      	bne.n	8005d0c <DTD_Motors_Init+0xfc>
	}


	Motor2_Enable();	// reset motor2 and goto top one
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	2180      	movs	r1, #128	; 0x80
 8005d20:	4820      	ldr	r0, [pc, #128]	; (8005da4 <DTD_Motors_Init+0x194>)
 8005d22:	f001 fe7f 	bl	8007a24 <HAL_GPIO_WritePin>
	if ( !(Motor_Reset(&Motor[2])) ){
 8005d26:	4820      	ldr	r0, [pc, #128]	; (8005da8 <DTD_Motors_Init+0x198>)
 8005d28:	f7fe ffc0 	bl	8004cac <Motor_Reset>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d109      	bne.n	8005d46 <DTD_Motors_Init+0x136>
		Motor2_Disable();
 8005d32:	2201      	movs	r2, #1
 8005d34:	2180      	movs	r1, #128	; 0x80
 8005d36:	481b      	ldr	r0, [pc, #108]	; (8005da4 <DTD_Motors_Init+0x194>)
 8005d38:	f001 fe74 	bl	8007a24 <HAL_GPIO_WritePin>
		printf("[WRONG!]Motor2 reset failed! ...\r\n");\
 8005d3c:	481b      	ldr	r0, [pc, #108]	; (8005dac <DTD_Motors_Init+0x19c>)
 8005d3e:	f009 fac9 	bl	800f2d4 <puts>
		return FAIL ;
 8005d42:	2300      	movs	r3, #0
 8005d44:	e015      	b.n	8005d72 <DTD_Motors_Init+0x162>
	}
	HAL_Delay(200);
 8005d46:	20c8      	movs	r0, #200	; 0xc8
 8005d48:	f000 fbea 	bl	8006520 <HAL_Delay>
	MotorMove_position(&Motor[2],VPMark[6]);
 8005d4c:	4b18      	ldr	r3, [pc, #96]	; (8005db0 <DTD_Motors_Init+0x1a0>)
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	4619      	mov	r1, r3
 8005d52:	4815      	ldr	r0, [pc, #84]	; (8005da8 <DTD_Motors_Init+0x198>)
 8005d54:	f7fe f84c 	bl	8003df0 <MotorMove_position>
	HAL_Delay(200);
 8005d58:	20c8      	movs	r0, #200	; 0xc8
 8005d5a:	f000 fbe1 	bl	8006520 <HAL_Delay>
	while(Motor[2].Status){
 8005d5e:	e002      	b.n	8005d66 <DTD_Motors_Init+0x156>
		HAL_Delay(100);
 8005d60:	2064      	movs	r0, #100	; 0x64
 8005d62:	f000 fbdd 	bl	8006520 <HAL_Delay>
	while(Motor[2].Status){
 8005d66:	4b09      	ldr	r3, [pc, #36]	; (8005d8c <DTD_Motors_Init+0x17c>)
 8005d68:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1f7      	bne.n	8005d60 <DTD_Motors_Init+0x150>
	}

	return SUCCESS ;
 8005d70:	2301      	movs	r3, #1
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	08011af8 	.word	0x08011af8
 8005d7c:	40021000 	.word	0x40021000
 8005d80:	200009ac 	.word	0x200009ac
 8005d84:	08011b1c 	.word	0x08011b1c
 8005d88:	20000c6c 	.word	0x20000c6c
 8005d8c:	2000088c 	.word	0x2000088c
 8005d90:	20000a6c 	.word	0x20000a6c
 8005d94:	08011b40 	.word	0x08011b40
 8005d98:	40021800 	.word	0x40021800
 8005d9c:	20000acc 	.word	0x20000acc
 8005da0:	08011b64 	.word	0x08011b64
 8005da4:	40020400 	.word	0x40020400
 8005da8:	2000094c 	.word	0x2000094c
 8005dac:	08011b88 	.word	0x08011b88
 8005db0:	20000c4c 	.word	0x20000c4c

08005db4 <DTD_All_Motors_Idle>:

uint8_t DTD_All_Motors_Idle(void)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	af00      	add	r7, sp, #0
	osDelay(100);
 8005db8:	2064      	movs	r0, #100	; 0x64
 8005dba:	f006 f873 	bl	800bea4 <osDelay>
	if ( (!Motor[5].Status) & (!Motor[6].Status) & (!Motor[3].Status) & (!Motor[2].Status) ){
 8005dbe:	4b0c      	ldr	r3, [pc, #48]	; (8005df0 <DTD_All_Motors_Idle+0x3c>)
 8005dc0:	f893 2210 	ldrb.w	r2, [r3, #528]	; 0x210
 8005dc4:	4b0a      	ldr	r3, [pc, #40]	; (8005df0 <DTD_All_Motors_Idle+0x3c>)
 8005dc6:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	4b08      	ldr	r3, [pc, #32]	; (8005df0 <DTD_All_Motors_Idle+0x3c>)
 8005dd0:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	4b05      	ldr	r3, [pc, #20]	; (8005df0 <DTD_All_Motors_Idle+0x3c>)
 8005dda:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8005dde:	4313      	orrs	r3, r2
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <DTD_All_Motors_Idle+0x36>
		return 1 ;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e000      	b.n	8005dec <DTD_All_Motors_Idle+0x38>
	}
	else{
		return 0 ;
 8005dea:	2300      	movs	r3, #0
	}
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	2000088c 	.word	0x2000088c

08005df4 <DTD_Motors_Standby_State>:

uint8_t DTD_Motors_Standby_State(void)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8005df8:	2064      	movs	r0, #100	; 0x64
 8005dfa:	f000 fb91 	bl	8006520 <HAL_Delay>
	MotorMove_position(&Motor[3],data_V0.Position_motor3_external);
 8005dfe:	4b1f      	ldr	r3, [pc, #124]	; (8005e7c <DTD_Motors_Standby_State+0x88>)
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	4619      	mov	r1, r3
 8005e04:	481e      	ldr	r0, [pc, #120]	; (8005e80 <DTD_Motors_Standby_State+0x8c>)
 8005e06:	f7fd fff3 	bl	8003df0 <MotorMove_position>
	HAL_Delay(100);
 8005e0a:	2064      	movs	r0, #100	; 0x64
 8005e0c:	f000 fb88 	bl	8006520 <HAL_Delay>
	while(Motor[3].Status){
 8005e10:	e002      	b.n	8005e18 <DTD_Motors_Standby_State+0x24>
		HAL_Delay(100);
 8005e12:	2064      	movs	r0, #100	; 0x64
 8005e14:	f000 fb84 	bl	8006520 <HAL_Delay>
	while(Motor[3].Status){
 8005e18:	4b1a      	ldr	r3, [pc, #104]	; (8005e84 <DTD_Motors_Standby_State+0x90>)
 8005e1a:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1f7      	bne.n	8005e12 <DTD_Motors_Standby_State+0x1e>
	}

	HAL_Delay(100);
 8005e22:	2064      	movs	r0, #100	; 0x64
 8005e24:	f000 fb7c 	bl	8006520 <HAL_Delay>
	MotorMove_position(&Motor[6],data_V0.Position_motor6_PushRod_reset);
 8005e28:	4b14      	ldr	r3, [pc, #80]	; (8005e7c <DTD_Motors_Standby_State+0x88>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	4816      	ldr	r0, [pc, #88]	; (8005e88 <DTD_Motors_Standby_State+0x94>)
 8005e30:	f7fd ffde 	bl	8003df0 <MotorMove_position>
	HAL_Delay(100);
 8005e34:	2064      	movs	r0, #100	; 0x64
 8005e36:	f000 fb73 	bl	8006520 <HAL_Delay>
	while(Motor[6].Status){
 8005e3a:	e002      	b.n	8005e42 <DTD_Motors_Standby_State+0x4e>
		HAL_Delay(100);
 8005e3c:	2064      	movs	r0, #100	; 0x64
 8005e3e:	f000 fb6f 	bl	8006520 <HAL_Delay>
	while(Motor[6].Status){
 8005e42:	4b10      	ldr	r3, [pc, #64]	; (8005e84 <DTD_Motors_Standby_State+0x90>)
 8005e44:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1f7      	bne.n	8005e3c <DTD_Motors_Standby_State+0x48>
	}

	HAL_Delay(100);
 8005e4c:	2064      	movs	r0, #100	; 0x64
 8005e4e:	f000 fb67 	bl	8006520 <HAL_Delay>
	MotorMove_position(&Motor[5],data_V0.Position_motor5_external);
 8005e52:	4b0a      	ldr	r3, [pc, #40]	; (8005e7c <DTD_Motors_Standby_State+0x88>)
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	4619      	mov	r1, r3
 8005e58:	480c      	ldr	r0, [pc, #48]	; (8005e8c <DTD_Motors_Standby_State+0x98>)
 8005e5a:	f7fd ffc9 	bl	8003df0 <MotorMove_position>
	HAL_Delay(100);
 8005e5e:	2064      	movs	r0, #100	; 0x64
 8005e60:	f000 fb5e 	bl	8006520 <HAL_Delay>
	while(Motor[5].Status){
 8005e64:	e002      	b.n	8005e6c <DTD_Motors_Standby_State+0x78>
		HAL_Delay(100);
 8005e66:	2064      	movs	r0, #100	; 0x64
 8005e68:	f000 fb5a 	bl	8006520 <HAL_Delay>
	while(Motor[5].Status){
 8005e6c:	4b05      	ldr	r3, [pc, #20]	; (8005e84 <DTD_Motors_Standby_State+0x90>)
 8005e6e:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1f7      	bne.n	8005e66 <DTD_Motors_Standby_State+0x72>
	}
	return SUCCESS;
 8005e76:	2301      	movs	r3, #1
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	20000c6c 	.word	0x20000c6c
 8005e80:	200009ac 	.word	0x200009ac
 8005e84:	2000088c 	.word	0x2000088c
 8005e88:	20000acc 	.word	0x20000acc
 8005e8c:	20000a6c 	.word	0x20000a6c

08005e90 <StartTask03>:

uint8_t 	DTD_StripIn_State = 0 ;
uint32_t 	DTD_CNT_i;

void StartTask03(void *argument)
{
 8005e90:	b590      	push	{r4, r7, lr}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
	osDelay(10);
 8005e98:	200a      	movs	r0, #10
 8005e9a:	f006 f803 	bl	800bea4 <osDelay>
	printf("myTask03 starts! \r\n");
 8005e9e:	48be      	ldr	r0, [pc, #760]	; (8006198 <StartTask03+0x308>)
 8005ea0:	f009 fa18 	bl	800f2d4 <puts>

	Motor_Data_Init();
 8005ea4:	f7fd fa7c 	bl	80033a0 <Motor_Data_Init>
	DuoTongDao_Position_Init();
 8005ea8:	f7ff fc8e 	bl	80057c8 <DuoTongDao_Position_Init>
	osDelay(300);
 8005eac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005eb0:	f005 fff8 	bl	800bea4 <osDelay>
	if ( DTD_Motors_Init() ){
 8005eb4:	f7ff feac 	bl	8005c10 <DTD_Motors_Init>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d006      	beq.n	8005ecc <StartTask03+0x3c>
		printf("Motors Initialization Completed! \r\n");
 8005ebe:	48b7      	ldr	r0, [pc, #732]	; (800619c <StartTask03+0x30c>)
 8005ec0:	f009 fa08 	bl	800f2d4 <puts>
		myTask03_Status = INITPASSSTATE;
 8005ec4:	4bb6      	ldr	r3, [pc, #728]	; (80061a0 <StartTask03+0x310>)
 8005ec6:	2263      	movs	r2, #99	; 0x63
 8005ec8:	701a      	strb	r2, [r3, #0]
 8005eca:	e002      	b.n	8005ed2 <StartTask03+0x42>
	}
	else{
		myTask03_Status = INITFAILSTATE;
 8005ecc:	4bb4      	ldr	r3, [pc, #720]	; (80061a0 <StartTask03+0x310>)
 8005ece:	2264      	movs	r2, #100	; 0x64
 8005ed0:	701a      	strb	r2, [r3, #0]
//	Motor3_Enable();
//	VM5_Enable_A();	VM5_Enable_B();
//	VM6_Enable_A();	VM6_Enable_B();
//	myTask03_Status = INITFAILSTATE;

	uint8_t temp_n = 0 ;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	73fb      	strb	r3, [r7, #15]

	for(;;)
	{
		osDelay(1);
 8005ed6:	2001      	movs	r0, #1
 8005ed8:	f005 ffe4 	bl	800bea4 <osDelay>
		switch (myTask03_Status)
 8005edc:	4bb0      	ldr	r3, [pc, #704]	; (80061a0 <StartTask03+0x310>)
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	2b82      	cmp	r3, #130	; 0x82
 8005ee2:	f000 827a 	beq.w	80063da <StartTask03+0x54a>
 8005ee6:	2b82      	cmp	r3, #130	; 0x82
 8005ee8:	dcf5      	bgt.n	8005ed6 <StartTask03+0x46>
 8005eea:	2b64      	cmp	r3, #100	; 0x64
 8005eec:	f000 8279 	beq.w	80063e2 <StartTask03+0x552>
 8005ef0:	2b64      	cmp	r3, #100	; 0x64
 8005ef2:	dcf0      	bgt.n	8005ed6 <StartTask03+0x46>
 8005ef4:	2b1b      	cmp	r3, #27
 8005ef6:	dc2b      	bgt.n	8005f50 <StartTask03+0xc0>
 8005ef8:	2b0a      	cmp	r3, #10
 8005efa:	dbec      	blt.n	8005ed6 <StartTask03+0x46>
 8005efc:	3b0a      	subs	r3, #10
 8005efe:	2b11      	cmp	r3, #17
 8005f00:	d8e9      	bhi.n	8005ed6 <StartTask03+0x46>
 8005f02:	a201      	add	r2, pc, #4	; (adr r2, 8005f08 <StartTask03+0x78>)
 8005f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f08:	08006045 	.word	0x08006045
 8005f0c:	08005ed7 	.word	0x08005ed7
 8005f10:	08005ed7 	.word	0x08005ed7
 8005f14:	08005ed7 	.word	0x08005ed7
 8005f18:	08005ed7 	.word	0x08005ed7
 8005f1c:	08005ed7 	.word	0x08005ed7
 8005f20:	08005ed7 	.word	0x08005ed7
 8005f24:	08005ed7 	.word	0x08005ed7
 8005f28:	08005ed7 	.word	0x08005ed7
 8005f2c:	08005ed7 	.word	0x08005ed7
 8005f30:	08006083 	.word	0x08006083
 8005f34:	080060af 	.word	0x080060af
 8005f38:	080062e7 	.word	0x080062e7
 8005f3c:	0800630d 	.word	0x0800630d
 8005f40:	08006331 	.word	0x08006331
 8005f44:	0800635d 	.word	0x0800635d
 8005f48:	08006389 	.word	0x08006389
 8005f4c:	080063b9 	.word	0x080063b9
 8005f50:	2b63      	cmp	r3, #99	; 0x63
 8005f52:	d1c0      	bne.n	8005ed6 <StartTask03+0x46>
		{
		case INITPASSSTATE:
			osDelay(10);
 8005f54:	200a      	movs	r0, #10
 8005f56:	f005 ffa5 	bl	800bea4 <osDelay>
			if(KEY0_Pressed())
 8005f5a:	2140      	movs	r1, #64	; 0x40
 8005f5c:	4891      	ldr	r0, [pc, #580]	; (80061a4 <StartTask03+0x314>)
 8005f5e:	f001 fd49 	bl	80079f4 <HAL_GPIO_ReadPin>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d11d      	bne.n	8005fa4 <StartTask03+0x114>
			{
				osDelay(20);
 8005f68:	2014      	movs	r0, #20
 8005f6a:	f005 ff9b 	bl	800bea4 <osDelay>
				if(KEY0_Pressed())
 8005f6e:	2140      	movs	r1, #64	; 0x40
 8005f70:	488c      	ldr	r0, [pc, #560]	; (80061a4 <StartTask03+0x314>)
 8005f72:	f001 fd3f 	bl	80079f4 <HAL_GPIO_ReadPin>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d113      	bne.n	8005fa4 <StartTask03+0x114>
				{
					osDelay(20);
 8005f7c:	2014      	movs	r0, #20
 8005f7e:	f005 ff91 	bl	800bea4 <osDelay>
					while (KEY0_Pressed()){osDelay(1);}
 8005f82:	e002      	b.n	8005f8a <StartTask03+0xfa>
 8005f84:	2001      	movs	r0, #1
 8005f86:	f005 ff8d 	bl	800bea4 <osDelay>
 8005f8a:	2140      	movs	r1, #64	; 0x40
 8005f8c:	4885      	ldr	r0, [pc, #532]	; (80061a4 <StartTask03+0x314>)
 8005f8e:	f001 fd31 	bl	80079f4 <HAL_GPIO_ReadPin>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d0f5      	beq.n	8005f84 <StartTask03+0xf4>
					myTask03_Status = 10;
 8005f98:	4b81      	ldr	r3, [pc, #516]	; (80061a0 <StartTask03+0x310>)
 8005f9a:	220a      	movs	r2, #10
 8005f9c:	701a      	strb	r2, [r3, #0]
					printf("Key0 pressed!\r\n");
 8005f9e:	4882      	ldr	r0, [pc, #520]	; (80061a8 <StartTask03+0x318>)
 8005fa0:	f009 f998 	bl	800f2d4 <puts>
				}
			}
			if(KEY1_Pressed())
 8005fa4:	2180      	movs	r1, #128	; 0x80
 8005fa6:	487f      	ldr	r0, [pc, #508]	; (80061a4 <StartTask03+0x314>)
 8005fa8:	f001 fd24 	bl	80079f4 <HAL_GPIO_ReadPin>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d11d      	bne.n	8005fee <StartTask03+0x15e>
			{
				osDelay(20);
 8005fb2:	2014      	movs	r0, #20
 8005fb4:	f005 ff76 	bl	800bea4 <osDelay>
				if(KEY1_Pressed())
 8005fb8:	2180      	movs	r1, #128	; 0x80
 8005fba:	487a      	ldr	r0, [pc, #488]	; (80061a4 <StartTask03+0x314>)
 8005fbc:	f001 fd1a 	bl	80079f4 <HAL_GPIO_ReadPin>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d113      	bne.n	8005fee <StartTask03+0x15e>
				{
					osDelay(20);
 8005fc6:	2014      	movs	r0, #20
 8005fc8:	f005 ff6c 	bl	800bea4 <osDelay>
					while (KEY1_Pressed()){osDelay(1);}
 8005fcc:	e002      	b.n	8005fd4 <StartTask03+0x144>
 8005fce:	2001      	movs	r0, #1
 8005fd0:	f005 ff68 	bl	800bea4 <osDelay>
 8005fd4:	2180      	movs	r1, #128	; 0x80
 8005fd6:	4873      	ldr	r0, [pc, #460]	; (80061a4 <StartTask03+0x314>)
 8005fd8:	f001 fd0c 	bl	80079f4 <HAL_GPIO_ReadPin>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0f5      	beq.n	8005fce <StartTask03+0x13e>
					myTask03_Status = 20;
 8005fe2:	4b6f      	ldr	r3, [pc, #444]	; (80061a0 <StartTask03+0x310>)
 8005fe4:	2214      	movs	r2, #20
 8005fe6:	701a      	strb	r2, [r3, #0]
					printf("Key1 pressed!\r\n");
 8005fe8:	4870      	ldr	r0, [pc, #448]	; (80061ac <StartTask03+0x31c>)
 8005fea:	f009 f973 	bl	800f2d4 <puts>
				}
			}
			if(KEY2_Pressed())
 8005fee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ff2:	486c      	ldr	r0, [pc, #432]	; (80061a4 <StartTask03+0x314>)
 8005ff4:	f001 fcfe 	bl	80079f4 <HAL_GPIO_ReadPin>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f040 81f9 	bne.w	80063f2 <StartTask03+0x562>
			{
				osDelay(20);
 8006000:	2014      	movs	r0, #20
 8006002:	f005 ff4f 	bl	800bea4 <osDelay>
				if(KEY2_Pressed())
 8006006:	f44f 7180 	mov.w	r1, #256	; 0x100
 800600a:	4866      	ldr	r0, [pc, #408]	; (80061a4 <StartTask03+0x314>)
 800600c:	f001 fcf2 	bl	80079f4 <HAL_GPIO_ReadPin>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	f040 81ed 	bne.w	80063f2 <StartTask03+0x562>
				{
					osDelay(20);
 8006018:	2014      	movs	r0, #20
 800601a:	f005 ff43 	bl	800bea4 <osDelay>
					while (KEY2_Pressed()){osDelay(1);}
 800601e:	e002      	b.n	8006026 <StartTask03+0x196>
 8006020:	2001      	movs	r0, #1
 8006022:	f005 ff3f 	bl	800bea4 <osDelay>
 8006026:	f44f 7180 	mov.w	r1, #256	; 0x100
 800602a:	485e      	ldr	r0, [pc, #376]	; (80061a4 <StartTask03+0x314>)
 800602c:	f001 fce2 	bl	80079f4 <HAL_GPIO_ReadPin>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d0f4      	beq.n	8006020 <StartTask03+0x190>
					myTask03_Status = 130;
 8006036:	4b5a      	ldr	r3, [pc, #360]	; (80061a0 <StartTask03+0x310>)
 8006038:	2282      	movs	r2, #130	; 0x82
 800603a:	701a      	strb	r2, [r3, #0]
					printf("Key2 pressed!\r\n");
 800603c:	485c      	ldr	r0, [pc, #368]	; (80061b0 <StartTask03+0x320>)
 800603e:	f009 f949 	bl	800f2d4 <puts>
				}
			}
			break;
 8006042:	e1d6      	b.n	80063f2 <StartTask03+0x562>

		case 10:
			osDelay(300);
 8006044:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006048:	f005 ff2c 	bl	800bea4 <osDelay>
			if (Motor[2].Status == 0){
 800604c:	4b59      	ldr	r3, [pc, #356]	; (80061b4 <StartTask03+0x324>)
 800604e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8006052:	2b00      	cmp	r3, #0
 8006054:	f040 81cf 	bne.w	80063f6 <StartTask03+0x566>
				MotorMove_position(&Motor[2],VPMark[temp_n]);
 8006058:	7bfb      	ldrb	r3, [r7, #15]
 800605a:	4a57      	ldr	r2, [pc, #348]	; (80061b8 <StartTask03+0x328>)
 800605c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006060:	4619      	mov	r1, r3
 8006062:	4856      	ldr	r0, [pc, #344]	; (80061bc <StartTask03+0x32c>)
 8006064:	f7fd fec4 	bl	8003df0 <MotorMove_position>
				if(temp_n >= 7)
 8006068:	7bfb      	ldrb	r3, [r7, #15]
 800606a:	2b06      	cmp	r3, #6
 800606c:	d902      	bls.n	8006074 <StartTask03+0x1e4>
					temp_n =  0 ;
 800606e:	2300      	movs	r3, #0
 8006070:	73fb      	strb	r3, [r7, #15]
 8006072:	e002      	b.n	800607a <StartTask03+0x1ea>
				else
					temp_n = temp_n +1 ;
 8006074:	7bfb      	ldrb	r3, [r7, #15]
 8006076:	3301      	adds	r3, #1
 8006078:	73fb      	strb	r3, [r7, #15]
				myTask03_Status=INITPASSSTATE;
 800607a:	4b49      	ldr	r3, [pc, #292]	; (80061a0 <StartTask03+0x310>)
 800607c:	2263      	movs	r2, #99	; 0x63
 800607e:	701a      	strb	r2, [r3, #0]
			}
		break;
 8006080:	e1b9      	b.n	80063f6 <StartTask03+0x566>

		case 20:	//行进到准备姿态，持续检测试剂条插入
			osDelay(1);
 8006082:	2001      	movs	r0, #1
 8006084:	f005 ff0e 	bl	800bea4 <osDelay>
			if(DTD_All_Motors_Idle()){
 8006088:	f7ff fe94 	bl	8005db4 <DTD_All_Motors_Idle>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	f000 81b3 	beq.w	80063fa <StartTask03+0x56a>
				if (DTD_Motors_Standby_State()) {
 8006094:	f7ff feae 	bl	8005df4 <DTD_Motors_Standby_State>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 81ad 	beq.w	80063fa <StartTask03+0x56a>
					printf("DTD in Standby state,waiting strip in. \r\n");
 80060a0:	4847      	ldr	r0, [pc, #284]	; (80061c0 <StartTask03+0x330>)
 80060a2:	f009 f917 	bl	800f2d4 <puts>
					myTask03_Status = 21;
 80060a6:	4b3e      	ldr	r3, [pc, #248]	; (80061a0 <StartTask03+0x310>)
 80060a8:	2215      	movs	r2, #21
 80060aa:	701a      	strb	r2, [r3, #0]
				}
			}
		break;
 80060ac:	e1a5      	b.n	80063fa <StartTask03+0x56a>

		case 21:
			osDelay(1);
 80060ae:	2001      	movs	r0, #1
 80060b0:	f005 fef8 	bl	800bea4 <osDelay>
			switch(DTD_StripIn_State)
 80060b4:	4b43      	ldr	r3, [pc, #268]	; (80061c4 <StartTask03+0x334>)
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	2b03      	cmp	r3, #3
 80060ba:	f200 81a0 	bhi.w	80063fe <StartTask03+0x56e>
 80060be:	a201      	add	r2, pc, #4	; (adr r2, 80060c4 <StartTask03+0x234>)
 80060c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c4:	080060d5 	.word	0x080060d5
 80060c8:	0800616d 	.word	0x0800616d
 80060cc:	0800623d 	.word	0x0800623d
 80060d0:	080062bf 	.word	0x080062bf
			{
				case 0:
					if ( (Strip_Triggerd)&&(Strip_UnBlocked) ){
 80060d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060d8:	4832      	ldr	r0, [pc, #200]	; (80061a4 <StartTask03+0x314>)
 80060da:	f001 fc8b 	bl	80079f4 <HAL_GPIO_ReadPin>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f040 80fa 	bne.w	80062da <StartTask03+0x44a>
 80060e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80060ea:	482e      	ldr	r0, [pc, #184]	; (80061a4 <StartTask03+0x314>)
 80060ec:	f001 fc82 	bl	80079f4 <HAL_GPIO_ReadPin>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	f040 80f1 	bne.w	80062da <StartTask03+0x44a>
						for( DTD_CNT_i=0 ; (Strip_Triggerd)&(Strip_UnBlocked) ; DTD_CNT_i++){
 80060f8:	4b33      	ldr	r3, [pc, #204]	; (80061c8 <StartTask03+0x338>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	e007      	b.n	8006110 <StartTask03+0x280>
							HAL_Delay(1);
 8006100:	2001      	movs	r0, #1
 8006102:	f000 fa0d 	bl	8006520 <HAL_Delay>
						for( DTD_CNT_i=0 ; (Strip_Triggerd)&(Strip_UnBlocked) ; DTD_CNT_i++){
 8006106:	4b30      	ldr	r3, [pc, #192]	; (80061c8 <StartTask03+0x338>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	3301      	adds	r3, #1
 800610c:	4a2e      	ldr	r2, [pc, #184]	; (80061c8 <StartTask03+0x338>)
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006114:	4823      	ldr	r0, [pc, #140]	; (80061a4 <StartTask03+0x314>)
 8006116:	f001 fc6d 	bl	80079f4 <HAL_GPIO_ReadPin>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	bf0c      	ite	eq
 8006120:	2301      	moveq	r3, #1
 8006122:	2300      	movne	r3, #0
 8006124:	b2dc      	uxtb	r4, r3
 8006126:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800612a:	481e      	ldr	r0, [pc, #120]	; (80061a4 <StartTask03+0x314>)
 800612c:	f001 fc62 	bl	80079f4 <HAL_GPIO_ReadPin>
 8006130:	4603      	mov	r3, r0
 8006132:	2b01      	cmp	r3, #1
 8006134:	bf0c      	ite	eq
 8006136:	2301      	moveq	r3, #1
 8006138:	2300      	movne	r3, #0
 800613a:	b2db      	uxtb	r3, r3
 800613c:	4023      	ands	r3, r4
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1dd      	bne.n	8006100 <StartTask03+0x270>
						}
						if(DTD_CNT_i > 200){
 8006144:	4b20      	ldr	r3, [pc, #128]	; (80061c8 <StartTask03+0x338>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2bc8      	cmp	r3, #200	; 0xc8
 800614a:	d903      	bls.n	8006154 <StartTask03+0x2c4>
							DTD_StripIn_State = 1 ;
 800614c:	4b1d      	ldr	r3, [pc, #116]	; (80061c4 <StartTask03+0x334>)
 800614e:	2201      	movs	r2, #1
 8006150:	701a      	strb	r2, [r3, #0]
 8006152:	e002      	b.n	800615a <StartTask03+0x2ca>
						}
						else{
							DTD_StripIn_State = 0 ;
 8006154:	4b1b      	ldr	r3, [pc, #108]	; (80061c4 <StartTask03+0x334>)
 8006156:	2200      	movs	r2, #0
 8006158:	701a      	strb	r2, [r3, #0]
						}
						printf("DTD_CNT_i=%ld  ; DTD_StripIn_State=%d   \r\n ", DTD_CNT_i,DTD_StripIn_State);
 800615a:	4b1b      	ldr	r3, [pc, #108]	; (80061c8 <StartTask03+0x338>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a19      	ldr	r2, [pc, #100]	; (80061c4 <StartTask03+0x334>)
 8006160:	7812      	ldrb	r2, [r2, #0]
 8006162:	4619      	mov	r1, r3
 8006164:	4819      	ldr	r0, [pc, #100]	; (80061cc <StartTask03+0x33c>)
 8006166:	f009 f84f 	bl	800f208 <iprintf>
					}
				break;
 800616a:	e0b6      	b.n	80062da <StartTask03+0x44a>

				case 1:
					if ( (Strip_Triggerd)&&(Strip_Blocked) ){
 800616c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006170:	480c      	ldr	r0, [pc, #48]	; (80061a4 <StartTask03+0x314>)
 8006172:	f001 fc3f 	bl	80079f4 <HAL_GPIO_ReadPin>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	f040 80b0 	bne.w	80062de <StartTask03+0x44e>
 800617e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006182:	4808      	ldr	r0, [pc, #32]	; (80061a4 <StartTask03+0x314>)
 8006184:	f001 fc36 	bl	80079f4 <HAL_GPIO_ReadPin>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	f040 80a7 	bne.w	80062de <StartTask03+0x44e>
						for( DTD_CNT_i=0 ; (Strip_Triggerd)&(Strip_Blocked) ; DTD_CNT_i++){
 8006190:	4b0d      	ldr	r3, [pc, #52]	; (80061c8 <StartTask03+0x338>)
 8006192:	2200      	movs	r2, #0
 8006194:	601a      	str	r2, [r3, #0]
 8006196:	e023      	b.n	80061e0 <StartTask03+0x350>
 8006198:	08011bac 	.word	0x08011bac
 800619c:	08011bc0 	.word	0x08011bc0
 80061a0:	20000cec 	.word	0x20000cec
 80061a4:	40021800 	.word	0x40021800
 80061a8:	08011be4 	.word	0x08011be4
 80061ac:	08011bf4 	.word	0x08011bf4
 80061b0:	08011c04 	.word	0x08011c04
 80061b4:	2000088c 	.word	0x2000088c
 80061b8:	20000c4c 	.word	0x20000c4c
 80061bc:	2000094c 	.word	0x2000094c
 80061c0:	08011c14 	.word	0x08011c14
 80061c4:	20000ced 	.word	0x20000ced
 80061c8:	20000cf0 	.word	0x20000cf0
 80061cc:	08011c40 	.word	0x08011c40
							HAL_Delay(1);
 80061d0:	2001      	movs	r0, #1
 80061d2:	f000 f9a5 	bl	8006520 <HAL_Delay>
						for( DTD_CNT_i=0 ; (Strip_Triggerd)&(Strip_Blocked) ; DTD_CNT_i++){
 80061d6:	4b91      	ldr	r3, [pc, #580]	; (800641c <StartTask03+0x58c>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	3301      	adds	r3, #1
 80061dc:	4a8f      	ldr	r2, [pc, #572]	; (800641c <StartTask03+0x58c>)
 80061de:	6013      	str	r3, [r2, #0]
 80061e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061e4:	488e      	ldr	r0, [pc, #568]	; (8006420 <StartTask03+0x590>)
 80061e6:	f001 fc05 	bl	80079f4 <HAL_GPIO_ReadPin>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	bf0c      	ite	eq
 80061f0:	2301      	moveq	r3, #1
 80061f2:	2300      	movne	r3, #0
 80061f4:	b2dc      	uxtb	r4, r3
 80061f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80061fa:	4889      	ldr	r0, [pc, #548]	; (8006420 <StartTask03+0x590>)
 80061fc:	f001 fbfa 	bl	80079f4 <HAL_GPIO_ReadPin>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	bf0c      	ite	eq
 8006206:	2301      	moveq	r3, #1
 8006208:	2300      	movne	r3, #0
 800620a:	b2db      	uxtb	r3, r3
 800620c:	4023      	ands	r3, r4
 800620e:	b2db      	uxtb	r3, r3
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1dd      	bne.n	80061d0 <StartTask03+0x340>
						}
						if(DTD_CNT_i > 100){
 8006214:	4b81      	ldr	r3, [pc, #516]	; (800641c <StartTask03+0x58c>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b64      	cmp	r3, #100	; 0x64
 800621a:	d903      	bls.n	8006224 <StartTask03+0x394>
							DTD_StripIn_State = 2 ;
 800621c:	4b81      	ldr	r3, [pc, #516]	; (8006424 <StartTask03+0x594>)
 800621e:	2202      	movs	r2, #2
 8006220:	701a      	strb	r2, [r3, #0]
 8006222:	e002      	b.n	800622a <StartTask03+0x39a>
						}
						else{
							DTD_StripIn_State = 0 ;
 8006224:	4b7f      	ldr	r3, [pc, #508]	; (8006424 <StartTask03+0x594>)
 8006226:	2200      	movs	r2, #0
 8006228:	701a      	strb	r2, [r3, #0]
						}
						printf("DTD_CNT_i=%ld  ; DTD_StripIn_State=%d   \r\n ", DTD_CNT_i,DTD_StripIn_State);
 800622a:	4b7c      	ldr	r3, [pc, #496]	; (800641c <StartTask03+0x58c>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a7d      	ldr	r2, [pc, #500]	; (8006424 <StartTask03+0x594>)
 8006230:	7812      	ldrb	r2, [r2, #0]
 8006232:	4619      	mov	r1, r3
 8006234:	487c      	ldr	r0, [pc, #496]	; (8006428 <StartTask03+0x598>)
 8006236:	f008 ffe7 	bl	800f208 <iprintf>
					}
				break;
 800623a:	e050      	b.n	80062de <StartTask03+0x44e>

				case 2:
					if ( (Strip_UnTriggerd)&&(Strip_Blocked) ){
 800623c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006240:	4877      	ldr	r0, [pc, #476]	; (8006420 <StartTask03+0x590>)
 8006242:	f001 fbd7 	bl	80079f4 <HAL_GPIO_ReadPin>
 8006246:	4603      	mov	r3, r0
 8006248:	2b01      	cmp	r3, #1
 800624a:	d14a      	bne.n	80062e2 <StartTask03+0x452>
 800624c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006250:	4873      	ldr	r0, [pc, #460]	; (8006420 <StartTask03+0x590>)
 8006252:	f001 fbcf 	bl	80079f4 <HAL_GPIO_ReadPin>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d142      	bne.n	80062e2 <StartTask03+0x452>
						for( DTD_CNT_i=0 ; (Strip_UnTriggerd)&(Strip_Blocked) ; DTD_CNT_i++){
 800625c:	4b6f      	ldr	r3, [pc, #444]	; (800641c <StartTask03+0x58c>)
 800625e:	2200      	movs	r2, #0
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	e011      	b.n	8006288 <StartTask03+0x3f8>
							HAL_Delay(1);
 8006264:	2001      	movs	r0, #1
 8006266:	f000 f95b 	bl	8006520 <HAL_Delay>
							if(DTD_CNT_i > 1000){
 800626a:	4b6c      	ldr	r3, [pc, #432]	; (800641c <StartTask03+0x58c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006272:	d904      	bls.n	800627e <StartTask03+0x3ee>
								DTD_StripIn_State = 3 ;
 8006274:	4b6b      	ldr	r3, [pc, #428]	; (8006424 <StartTask03+0x594>)
 8006276:	2203      	movs	r2, #3
 8006278:	701a      	strb	r2, [r3, #0]
								break;
 800627a:	bf00      	nop
							}
						}
					}
				break;
 800627c:	e031      	b.n	80062e2 <StartTask03+0x452>
						for( DTD_CNT_i=0 ; (Strip_UnTriggerd)&(Strip_Blocked) ; DTD_CNT_i++){
 800627e:	4b67      	ldr	r3, [pc, #412]	; (800641c <StartTask03+0x58c>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	3301      	adds	r3, #1
 8006284:	4a65      	ldr	r2, [pc, #404]	; (800641c <StartTask03+0x58c>)
 8006286:	6013      	str	r3, [r2, #0]
 8006288:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800628c:	4864      	ldr	r0, [pc, #400]	; (8006420 <StartTask03+0x590>)
 800628e:	f001 fbb1 	bl	80079f4 <HAL_GPIO_ReadPin>
 8006292:	4603      	mov	r3, r0
 8006294:	2b01      	cmp	r3, #1
 8006296:	bf0c      	ite	eq
 8006298:	2301      	moveq	r3, #1
 800629a:	2300      	movne	r3, #0
 800629c:	b2dc      	uxtb	r4, r3
 800629e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80062a2:	485f      	ldr	r0, [pc, #380]	; (8006420 <StartTask03+0x590>)
 80062a4:	f001 fba6 	bl	80079f4 <HAL_GPIO_ReadPin>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	bf0c      	ite	eq
 80062ae:	2301      	moveq	r3, #1
 80062b0:	2300      	movne	r3, #0
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	4023      	ands	r3, r4
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1d3      	bne.n	8006264 <StartTask03+0x3d4>
				break;
 80062bc:	e011      	b.n	80062e2 <StartTask03+0x452>

				case 3:
					printf("Strip inserted! Begin to detect... \r\n");
 80062be:	485b      	ldr	r0, [pc, #364]	; (800642c <StartTask03+0x59c>)
 80062c0:	f009 f808 	bl	800f2d4 <puts>
					DTD_StripIn_State = 0 ;
 80062c4:	4b57      	ldr	r3, [pc, #348]	; (8006424 <StartTask03+0x594>)
 80062c6:	2200      	movs	r2, #0
 80062c8:	701a      	strb	r2, [r3, #0]
					myTask03_Status = 22;
 80062ca:	4b59      	ldr	r3, [pc, #356]	; (8006430 <StartTask03+0x5a0>)
 80062cc:	2216      	movs	r2, #22
 80062ce:	701a      	strb	r2, [r3, #0]
					osDelay(500);
 80062d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80062d4:	f005 fde6 	bl	800bea4 <osDelay>
				break;
 80062d8:	e004      	b.n	80062e4 <StartTask03+0x454>
				break;
 80062da:	bf00      	nop
 80062dc:	e08f      	b.n	80063fe <StartTask03+0x56e>
				break;
 80062de:	bf00      	nop
 80062e0:	e08d      	b.n	80063fe <StartTask03+0x56e>
				break;
 80062e2:	bf00      	nop

			}
		break;
 80062e4:	e08b      	b.n	80063fe <StartTask03+0x56e>

		case 22:
			osDelay(1);
 80062e6:	2001      	movs	r0, #1
 80062e8:	f005 fddc 	bl	800bea4 <osDelay>
			if( DTD_All_Motors_Idle() ){
 80062ec:	f7ff fd62 	bl	8005db4 <DTD_All_Motors_Idle>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 8085 	beq.w	8006402 <StartTask03+0x572>
				MotorMove_position(&Motor[5],data_V0.Position_motor5_internal);
 80062f8:	4b4e      	ldr	r3, [pc, #312]	; (8006434 <StartTask03+0x5a4>)
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	4619      	mov	r1, r3
 80062fe:	484e      	ldr	r0, [pc, #312]	; (8006438 <StartTask03+0x5a8>)
 8006300:	f7fd fd76 	bl	8003df0 <MotorMove_position>
				myTask03_Status = 23;
 8006304:	4b4a      	ldr	r3, [pc, #296]	; (8006430 <StartTask03+0x5a0>)
 8006306:	2217      	movs	r2, #23
 8006308:	701a      	strb	r2, [r3, #0]
			}
		break;
 800630a:	e07a      	b.n	8006402 <StartTask03+0x572>

		case 23:
			osDelay(1);
 800630c:	2001      	movs	r0, #1
 800630e:	f005 fdc9 	bl	800bea4 <osDelay>
			if( DTD_All_Motors_Idle() ){
 8006312:	f7ff fd4f 	bl	8005db4 <DTD_All_Motors_Idle>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d074      	beq.n	8006406 <StartTask03+0x576>
				MotorMove_position(&Motor[6],data_V0.Position_motor6_PushRod_push);
 800631c:	4b45      	ldr	r3, [pc, #276]	; (8006434 <StartTask03+0x5a4>)
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	4619      	mov	r1, r3
 8006322:	4846      	ldr	r0, [pc, #280]	; (800643c <StartTask03+0x5ac>)
 8006324:	f7fd fd64 	bl	8003df0 <MotorMove_position>
				myTask03_Status = 24;
 8006328:	4b41      	ldr	r3, [pc, #260]	; (8006430 <StartTask03+0x5a0>)
 800632a:	2218      	movs	r2, #24
 800632c:	701a      	strb	r2, [r3, #0]
			}
		break;
 800632e:	e06a      	b.n	8006406 <StartTask03+0x576>

		case 24:
			osDelay(1);
 8006330:	2001      	movs	r0, #1
 8006332:	f005 fdb7 	bl	800bea4 <osDelay>
			if( DTD_All_Motors_Idle() ){
 8006336:	f7ff fd3d 	bl	8005db4 <DTD_All_Motors_Idle>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d064      	beq.n	800640a <StartTask03+0x57a>
				osDelay(800);
 8006340:	f44f 7048 	mov.w	r0, #800	; 0x320
 8006344:	f005 fdae 	bl	800bea4 <osDelay>
				MotorMove_position(&Motor[3],data_V0.Position_motor3_storage);
 8006348:	4b3a      	ldr	r3, [pc, #232]	; (8006434 <StartTask03+0x5a4>)
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	4619      	mov	r1, r3
 800634e:	483c      	ldr	r0, [pc, #240]	; (8006440 <StartTask03+0x5b0>)
 8006350:	f7fd fd4e 	bl	8003df0 <MotorMove_position>
				myTask03_Status = 25;
 8006354:	4b36      	ldr	r3, [pc, #216]	; (8006430 <StartTask03+0x5a0>)
 8006356:	2219      	movs	r2, #25
 8006358:	701a      	strb	r2, [r3, #0]
			}
		break;
 800635a:	e056      	b.n	800640a <StartTask03+0x57a>

		case 25:
			osDelay(1);
 800635c:	2001      	movs	r0, #1
 800635e:	f005 fda1 	bl	800bea4 <osDelay>
			if( DTD_All_Motors_Idle() ){
 8006362:	f7ff fd27 	bl	8005db4 <DTD_All_Motors_Idle>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d050      	beq.n	800640e <StartTask03+0x57e>
				osDelay(800);
 800636c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8006370:	f005 fd98 	bl	800bea4 <osDelay>
				MotorMove_position(&Motor[3],data_V0.Position_motor3_detect);
 8006374:	4b2f      	ldr	r3, [pc, #188]	; (8006434 <StartTask03+0x5a4>)
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	4619      	mov	r1, r3
 800637a:	4831      	ldr	r0, [pc, #196]	; (8006440 <StartTask03+0x5b0>)
 800637c:	f7fd fd38 	bl	8003df0 <MotorMove_position>
				myTask03_Status = 26;
 8006380:	4b2b      	ldr	r3, [pc, #172]	; (8006430 <StartTask03+0x5a0>)
 8006382:	221a      	movs	r2, #26
 8006384:	701a      	strb	r2, [r3, #0]
			}
		break;
 8006386:	e042      	b.n	800640e <StartTask03+0x57e>

		case 26:
			osDelay(1);
 8006388:	2001      	movs	r0, #1
 800638a:	f005 fd8b 	bl	800bea4 <osDelay>
			if( DTD_All_Motors_Idle() ){
 800638e:	f7ff fd11 	bl	8005db4 <DTD_All_Motors_Idle>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d03c      	beq.n	8006412 <StartTask03+0x582>
				osDelay(1000);
 8006398:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800639c:	f005 fd82 	bl	800bea4 <osDelay>
				MotorMove_position_lowspeed(&Motor[3],data_V0.Position_motor3_reset, 1);
 80063a0:	4b24      	ldr	r3, [pc, #144]	; (8006434 <StartTask03+0x5a4>)
 80063a2:	69db      	ldr	r3, [r3, #28]
 80063a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80063a8:	4619      	mov	r1, r3
 80063aa:	4825      	ldr	r0, [pc, #148]	; (8006440 <StartTask03+0x5b0>)
 80063ac:	f7fe f848 	bl	8004440 <MotorMove_position_lowspeed>
				myTask03_Status = 27;
 80063b0:	4b1f      	ldr	r3, [pc, #124]	; (8006430 <StartTask03+0x5a0>)
 80063b2:	221b      	movs	r2, #27
 80063b4:	701a      	strb	r2, [r3, #0]
			}
		break;
 80063b6:	e02c      	b.n	8006412 <StartTask03+0x582>

		case 27:
			osDelay(1);
 80063b8:	2001      	movs	r0, #1
 80063ba:	f005 fd73 	bl	800bea4 <osDelay>
			if(DTD_All_Motors_Idle()){
 80063be:	f7ff fcf9 	bl	8005db4 <DTD_All_Motors_Idle>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d026      	beq.n	8006416 <StartTask03+0x586>
				if (DTD_Motors_Standby_State()) {
 80063c8:	f7ff fd14 	bl	8005df4 <DTD_Motors_Standby_State>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d021      	beq.n	8006416 <StartTask03+0x586>
					myTask03_Status = 21;
 80063d2:	4b17      	ldr	r3, [pc, #92]	; (8006430 <StartTask03+0x5a0>)
 80063d4:	2215      	movs	r2, #21
 80063d6:	701a      	strb	r2, [r3, #0]
				}
			}
		break;
 80063d8:	e01d      	b.n	8006416 <StartTask03+0x586>


		case 130:	//老化测试
			myTask03_Status = INITPASSSTATE;
 80063da:	4b15      	ldr	r3, [pc, #84]	; (8006430 <StartTask03+0x5a0>)
 80063dc:	2263      	movs	r2, #99	; 0x63
 80063de:	701a      	strb	r2, [r3, #0]
		break;
 80063e0:	e01b      	b.n	800641a <StartTask03+0x58a>


		case INITFAILSTATE:
			printf("[WRONG]Motors Initialization FAILED!Please Check!\r\n");
 80063e2:	4818      	ldr	r0, [pc, #96]	; (8006444 <StartTask03+0x5b4>)
 80063e4:	f008 ff76 	bl	800f2d4 <puts>
			osDelay(10000);
 80063e8:	f242 7010 	movw	r0, #10000	; 0x2710
 80063ec:	f005 fd5a 	bl	800bea4 <osDelay>
			break;
 80063f0:	e013      	b.n	800641a <StartTask03+0x58a>
			break;
 80063f2:	bf00      	nop
 80063f4:	e56f      	b.n	8005ed6 <StartTask03+0x46>
		break;
 80063f6:	bf00      	nop
 80063f8:	e56d      	b.n	8005ed6 <StartTask03+0x46>
		break;
 80063fa:	bf00      	nop
 80063fc:	e56b      	b.n	8005ed6 <StartTask03+0x46>
		break;
 80063fe:	bf00      	nop
 8006400:	e569      	b.n	8005ed6 <StartTask03+0x46>
		break;
 8006402:	bf00      	nop
 8006404:	e567      	b.n	8005ed6 <StartTask03+0x46>
		break;
 8006406:	bf00      	nop
 8006408:	e565      	b.n	8005ed6 <StartTask03+0x46>
		break;
 800640a:	bf00      	nop
 800640c:	e563      	b.n	8005ed6 <StartTask03+0x46>
		break;
 800640e:	bf00      	nop
 8006410:	e561      	b.n	8005ed6 <StartTask03+0x46>
		break;
 8006412:	bf00      	nop
 8006414:	e55f      	b.n	8005ed6 <StartTask03+0x46>
		break;
 8006416:	bf00      	nop
 8006418:	e55d      	b.n	8005ed6 <StartTask03+0x46>
		osDelay(1);
 800641a:	e55c      	b.n	8005ed6 <StartTask03+0x46>
 800641c:	20000cf0 	.word	0x20000cf0
 8006420:	40021800 	.word	0x40021800
 8006424:	20000ced 	.word	0x20000ced
 8006428:	08011c40 	.word	0x08011c40
 800642c:	08011c6c 	.word	0x08011c6c
 8006430:	20000cec 	.word	0x20000cec
 8006434:	20000c6c 	.word	0x20000c6c
 8006438:	20000a6c 	.word	0x20000a6c
 800643c:	20000acc 	.word	0x20000acc
 8006440:	200009ac 	.word	0x200009ac
 8006444:	08011c94 	.word	0x08011c94

08006448 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006448:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006480 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800644c:	480d      	ldr	r0, [pc, #52]	; (8006484 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800644e:	490e      	ldr	r1, [pc, #56]	; (8006488 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006450:	4a0e      	ldr	r2, [pc, #56]	; (800648c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006454:	e002      	b.n	800645c <LoopCopyDataInit>

08006456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800645a:	3304      	adds	r3, #4

0800645c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800645c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800645e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006460:	d3f9      	bcc.n	8006456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006462:	4a0b      	ldr	r2, [pc, #44]	; (8006490 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006464:	4c0b      	ldr	r4, [pc, #44]	; (8006494 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006468:	e001      	b.n	800646e <LoopFillZerobss>

0800646a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800646a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800646c:	3204      	adds	r2, #4

0800646e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800646e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006470:	d3fb      	bcc.n	800646a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006472:	f7fc f93f 	bl	80026f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006476:	f009 f8bb 	bl	800f5f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800647a:	f7fb fafb 	bl	8001a74 <main>
  bx  lr    
 800647e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006480:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006488:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800648c:	08012114 	.word	0x08012114
  ldr r2, =_sbss
 8006490:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8006494:	2000582c 	.word	0x2000582c

08006498 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006498:	e7fe      	b.n	8006498 <ADC_IRQHandler>
	...

0800649c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80064a0:	4b0e      	ldr	r3, [pc, #56]	; (80064dc <HAL_Init+0x40>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a0d      	ldr	r2, [pc, #52]	; (80064dc <HAL_Init+0x40>)
 80064a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80064ac:	4b0b      	ldr	r3, [pc, #44]	; (80064dc <HAL_Init+0x40>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a0a      	ldr	r2, [pc, #40]	; (80064dc <HAL_Init+0x40>)
 80064b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80064b8:	4b08      	ldr	r3, [pc, #32]	; (80064dc <HAL_Init+0x40>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a07      	ldr	r2, [pc, #28]	; (80064dc <HAL_Init+0x40>)
 80064be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064c4:	2003      	movs	r0, #3
 80064c6:	f000 fc5a 	bl	8006d7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80064ca:	2005      	movs	r0, #5
 80064cc:	f7fb fee4 	bl	8002298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80064d0:	f7fb feb6 	bl	8002240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	40023c00 	.word	0x40023c00

080064e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80064e0:	b480      	push	{r7}
 80064e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80064e4:	4b06      	ldr	r3, [pc, #24]	; (8006500 <HAL_IncTick+0x20>)
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	461a      	mov	r2, r3
 80064ea:	4b06      	ldr	r3, [pc, #24]	; (8006504 <HAL_IncTick+0x24>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4413      	add	r3, r2
 80064f0:	4a04      	ldr	r2, [pc, #16]	; (8006504 <HAL_IncTick+0x24>)
 80064f2:	6013      	str	r3, [r2, #0]
}
 80064f4:	bf00      	nop
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	2000000c 	.word	0x2000000c
 8006504:	20000cf4 	.word	0x20000cf4

08006508 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006508:	b480      	push	{r7}
 800650a:	af00      	add	r7, sp, #0
  return uwTick;
 800650c:	4b03      	ldr	r3, [pc, #12]	; (800651c <HAL_GetTick+0x14>)
 800650e:	681b      	ldr	r3, [r3, #0]
}
 8006510:	4618      	mov	r0, r3
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	20000cf4 	.word	0x20000cf4

08006520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006528:	f7ff ffee 	bl	8006508 <HAL_GetTick>
 800652c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006538:	d005      	beq.n	8006546 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800653a:	4b0a      	ldr	r3, [pc, #40]	; (8006564 <HAL_Delay+0x44>)
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	461a      	mov	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4413      	add	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006546:	bf00      	nop
 8006548:	f7ff ffde 	bl	8006508 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	429a      	cmp	r2, r3
 8006556:	d8f7      	bhi.n	8006548 <HAL_Delay+0x28>
  {
  }
}
 8006558:	bf00      	nop
 800655a:	bf00      	nop
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	2000000c 	.word	0x2000000c

08006568 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006570:	2300      	movs	r3, #0
 8006572:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e033      	b.n	80065e6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006582:	2b00      	cmp	r3, #0
 8006584:	d109      	bne.n	800659a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7fa fd30 	bl	8000fec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659e:	f003 0310 	and.w	r3, r3, #16
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d118      	bne.n	80065d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80065ae:	f023 0302 	bic.w	r3, r3, #2
 80065b2:	f043 0202 	orr.w	r2, r3, #2
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f93a 	bl	8006834 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ca:	f023 0303 	bic.w	r3, r3, #3
 80065ce:	f043 0201 	orr.w	r2, r3, #1
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	641a      	str	r2, [r3, #64]	; 0x40
 80065d6:	e001      	b.n	80065dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
	...

080065f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80065fa:	2300      	movs	r3, #0
 80065fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006604:	2b01      	cmp	r3, #1
 8006606:	d101      	bne.n	800660c <HAL_ADC_ConfigChannel+0x1c>
 8006608:	2302      	movs	r3, #2
 800660a:	e105      	b.n	8006818 <HAL_ADC_ConfigChannel+0x228>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b09      	cmp	r3, #9
 800661a:	d925      	bls.n	8006668 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68d9      	ldr	r1, [r3, #12]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	b29b      	uxth	r3, r3
 8006628:	461a      	mov	r2, r3
 800662a:	4613      	mov	r3, r2
 800662c:	005b      	lsls	r3, r3, #1
 800662e:	4413      	add	r3, r2
 8006630:	3b1e      	subs	r3, #30
 8006632:	2207      	movs	r2, #7
 8006634:	fa02 f303 	lsl.w	r3, r2, r3
 8006638:	43da      	mvns	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	400a      	ands	r2, r1
 8006640:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68d9      	ldr	r1, [r3, #12]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	689a      	ldr	r2, [r3, #8]
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	b29b      	uxth	r3, r3
 8006652:	4618      	mov	r0, r3
 8006654:	4603      	mov	r3, r0
 8006656:	005b      	lsls	r3, r3, #1
 8006658:	4403      	add	r3, r0
 800665a:	3b1e      	subs	r3, #30
 800665c:	409a      	lsls	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	60da      	str	r2, [r3, #12]
 8006666:	e022      	b.n	80066ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6919      	ldr	r1, [r3, #16]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	b29b      	uxth	r3, r3
 8006674:	461a      	mov	r2, r3
 8006676:	4613      	mov	r3, r2
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	4413      	add	r3, r2
 800667c:	2207      	movs	r2, #7
 800667e:	fa02 f303 	lsl.w	r3, r2, r3
 8006682:	43da      	mvns	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	400a      	ands	r2, r1
 800668a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6919      	ldr	r1, [r3, #16]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	689a      	ldr	r2, [r3, #8]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	b29b      	uxth	r3, r3
 800669c:	4618      	mov	r0, r3
 800669e:	4603      	mov	r3, r0
 80066a0:	005b      	lsls	r3, r3, #1
 80066a2:	4403      	add	r3, r0
 80066a4:	409a      	lsls	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	2b06      	cmp	r3, #6
 80066b4:	d824      	bhi.n	8006700 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	685a      	ldr	r2, [r3, #4]
 80066c0:	4613      	mov	r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4413      	add	r3, r2
 80066c6:	3b05      	subs	r3, #5
 80066c8:	221f      	movs	r2, #31
 80066ca:	fa02 f303 	lsl.w	r3, r2, r3
 80066ce:	43da      	mvns	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	400a      	ands	r2, r1
 80066d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	4618      	mov	r0, r3
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	4613      	mov	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4413      	add	r3, r2
 80066f0:	3b05      	subs	r3, #5
 80066f2:	fa00 f203 	lsl.w	r2, r0, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	635a      	str	r2, [r3, #52]	; 0x34
 80066fe:	e04c      	b.n	800679a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	2b0c      	cmp	r3, #12
 8006706:	d824      	bhi.n	8006752 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	685a      	ldr	r2, [r3, #4]
 8006712:	4613      	mov	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	3b23      	subs	r3, #35	; 0x23
 800671a:	221f      	movs	r2, #31
 800671c:	fa02 f303 	lsl.w	r3, r2, r3
 8006720:	43da      	mvns	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	400a      	ands	r2, r1
 8006728:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	b29b      	uxth	r3, r3
 8006736:	4618      	mov	r0, r3
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	4613      	mov	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	3b23      	subs	r3, #35	; 0x23
 8006744:	fa00 f203 	lsl.w	r2, r0, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	631a      	str	r2, [r3, #48]	; 0x30
 8006750:	e023      	b.n	800679a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	4613      	mov	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4413      	add	r3, r2
 8006762:	3b41      	subs	r3, #65	; 0x41
 8006764:	221f      	movs	r2, #31
 8006766:	fa02 f303 	lsl.w	r3, r2, r3
 800676a:	43da      	mvns	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	400a      	ands	r2, r1
 8006772:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	b29b      	uxth	r3, r3
 8006780:	4618      	mov	r0, r3
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	685a      	ldr	r2, [r3, #4]
 8006786:	4613      	mov	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	3b41      	subs	r3, #65	; 0x41
 800678e:	fa00 f203 	lsl.w	r2, r0, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	430a      	orrs	r2, r1
 8006798:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800679a:	4b22      	ldr	r3, [pc, #136]	; (8006824 <HAL_ADC_ConfigChannel+0x234>)
 800679c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a21      	ldr	r2, [pc, #132]	; (8006828 <HAL_ADC_ConfigChannel+0x238>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d109      	bne.n	80067bc <HAL_ADC_ConfigChannel+0x1cc>
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2b12      	cmp	r3, #18
 80067ae:	d105      	bne.n	80067bc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a19      	ldr	r2, [pc, #100]	; (8006828 <HAL_ADC_ConfigChannel+0x238>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d123      	bne.n	800680e <HAL_ADC_ConfigChannel+0x21e>
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b10      	cmp	r3, #16
 80067cc:	d003      	beq.n	80067d6 <HAL_ADC_ConfigChannel+0x1e6>
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2b11      	cmp	r3, #17
 80067d4:	d11b      	bne.n	800680e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b10      	cmp	r3, #16
 80067e8:	d111      	bne.n	800680e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80067ea:	4b10      	ldr	r3, [pc, #64]	; (800682c <HAL_ADC_ConfigChannel+0x23c>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a10      	ldr	r2, [pc, #64]	; (8006830 <HAL_ADC_ConfigChannel+0x240>)
 80067f0:	fba2 2303 	umull	r2, r3, r2, r3
 80067f4:	0c9a      	lsrs	r2, r3, #18
 80067f6:	4613      	mov	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4413      	add	r3, r2
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006800:	e002      	b.n	8006808 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	3b01      	subs	r3, #1
 8006806:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1f9      	bne.n	8006802 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	40012300 	.word	0x40012300
 8006828:	40012000 	.word	0x40012000
 800682c:	20000004 	.word	0x20000004
 8006830:	431bde83 	.word	0x431bde83

08006834 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800683c:	4b79      	ldr	r3, [pc, #484]	; (8006a24 <ADC_Init+0x1f0>)
 800683e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	431a      	orrs	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006868:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6859      	ldr	r1, [r3, #4]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	021a      	lsls	r2, r3, #8
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800688c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6859      	ldr	r1, [r3, #4]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	689a      	ldr	r2, [r3, #8]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	430a      	orrs	r2, r1
 800689e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	689a      	ldr	r2, [r3, #8]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6899      	ldr	r1, [r3, #8]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68da      	ldr	r2, [r3, #12]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	430a      	orrs	r2, r1
 80068c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c6:	4a58      	ldr	r2, [pc, #352]	; (8006a28 <ADC_Init+0x1f4>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d022      	beq.n	8006912 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689a      	ldr	r2, [r3, #8]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80068da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6899      	ldr	r1, [r3, #8]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689a      	ldr	r2, [r3, #8]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80068fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6899      	ldr	r1, [r3, #8]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	430a      	orrs	r2, r1
 800690e:	609a      	str	r2, [r3, #8]
 8006910:	e00f      	b.n	8006932 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	689a      	ldr	r2, [r3, #8]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006920:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006930:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	689a      	ldr	r2, [r3, #8]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f022 0202 	bic.w	r2, r2, #2
 8006940:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6899      	ldr	r1, [r3, #8]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	7e1b      	ldrb	r3, [r3, #24]
 800694c:	005a      	lsls	r2, r3, #1
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 3020 	ldrb.w	r3, [r3, #32]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d01b      	beq.n	8006998 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800696e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800697e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6859      	ldr	r1, [r3, #4]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698a:	3b01      	subs	r3, #1
 800698c:	035a      	lsls	r2, r3, #13
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	430a      	orrs	r2, r1
 8006994:	605a      	str	r2, [r3, #4]
 8006996:	e007      	b.n	80069a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80069b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	3b01      	subs	r3, #1
 80069c4:	051a      	lsls	r2, r3, #20
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80069dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6899      	ldr	r1, [r3, #8]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80069ea:	025a      	lsls	r2, r3, #9
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	430a      	orrs	r2, r1
 80069f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689a      	ldr	r2, [r3, #8]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6899      	ldr	r1, [r3, #8]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	029a      	lsls	r2, r3, #10
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	430a      	orrs	r2, r1
 8006a16:	609a      	str	r2, [r3, #8]
}
 8006a18:	bf00      	nop
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	40012300 	.word	0x40012300
 8006a28:	0f000001 	.word	0x0f000001

08006a2c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e0ed      	b.n	8006c1a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d102      	bne.n	8006a50 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7fa fb76 	bl	800113c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f042 0201 	orr.w	r2, r2, #1
 8006a5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a60:	f7ff fd52 	bl	8006508 <HAL_GetTick>
 8006a64:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006a66:	e012      	b.n	8006a8e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006a68:	f7ff fd4e 	bl	8006508 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	2b0a      	cmp	r3, #10
 8006a74:	d90b      	bls.n	8006a8e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2205      	movs	r2, #5
 8006a86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e0c5      	b.n	8006c1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d0e5      	beq.n	8006a68 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f022 0202 	bic.w	r2, r2, #2
 8006aaa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006aac:	f7ff fd2c 	bl	8006508 <HAL_GetTick>
 8006ab0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006ab2:	e012      	b.n	8006ada <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006ab4:	f7ff fd28 	bl	8006508 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	2b0a      	cmp	r3, #10
 8006ac0:	d90b      	bls.n	8006ada <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2205      	movs	r2, #5
 8006ad2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e09f      	b.n	8006c1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1e5      	bne.n	8006ab4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	7e1b      	ldrb	r3, [r3, #24]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d108      	bne.n	8006b02 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006afe:	601a      	str	r2, [r3, #0]
 8006b00:	e007      	b.n	8006b12 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	7e5b      	ldrb	r3, [r3, #25]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d108      	bne.n	8006b2c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	e007      	b.n	8006b3c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	7e9b      	ldrb	r3, [r3, #26]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d108      	bne.n	8006b56 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f042 0220 	orr.w	r2, r2, #32
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	e007      	b.n	8006b66 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f022 0220 	bic.w	r2, r2, #32
 8006b64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	7edb      	ldrb	r3, [r3, #27]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d108      	bne.n	8006b80 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f022 0210 	bic.w	r2, r2, #16
 8006b7c:	601a      	str	r2, [r3, #0]
 8006b7e:	e007      	b.n	8006b90 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f042 0210 	orr.w	r2, r2, #16
 8006b8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	7f1b      	ldrb	r3, [r3, #28]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d108      	bne.n	8006baa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f042 0208 	orr.w	r2, r2, #8
 8006ba6:	601a      	str	r2, [r3, #0]
 8006ba8:	e007      	b.n	8006bba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0208 	bic.w	r2, r2, #8
 8006bb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	7f5b      	ldrb	r3, [r3, #29]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d108      	bne.n	8006bd4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f042 0204 	orr.w	r2, r2, #4
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	e007      	b.n	8006be4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f022 0204 	bic.w	r2, r2, #4
 8006be2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689a      	ldr	r2, [r3, #8]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	431a      	orrs	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	695b      	ldr	r3, [r3, #20]
 8006bf8:	ea42 0103 	orr.w	r1, r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	1e5a      	subs	r2, r3, #1
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
	...

08006c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f003 0307 	and.w	r3, r3, #7
 8006c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c34:	4b0c      	ldr	r3, [pc, #48]	; (8006c68 <__NVIC_SetPriorityGrouping+0x44>)
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006c40:	4013      	ands	r3, r2
 8006c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c56:	4a04      	ldr	r2, [pc, #16]	; (8006c68 <__NVIC_SetPriorityGrouping+0x44>)
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	60d3      	str	r3, [r2, #12]
}
 8006c5c:	bf00      	nop
 8006c5e:	3714      	adds	r7, #20
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	e000ed00 	.word	0xe000ed00

08006c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c70:	4b04      	ldr	r3, [pc, #16]	; (8006c84 <__NVIC_GetPriorityGrouping+0x18>)
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	0a1b      	lsrs	r3, r3, #8
 8006c76:	f003 0307 	and.w	r3, r3, #7
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr
 8006c84:	e000ed00 	.word	0xe000ed00

08006c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	4603      	mov	r3, r0
 8006c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	db0b      	blt.n	8006cb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c9a:	79fb      	ldrb	r3, [r7, #7]
 8006c9c:	f003 021f 	and.w	r2, r3, #31
 8006ca0:	4907      	ldr	r1, [pc, #28]	; (8006cc0 <__NVIC_EnableIRQ+0x38>)
 8006ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ca6:	095b      	lsrs	r3, r3, #5
 8006ca8:	2001      	movs	r0, #1
 8006caa:	fa00 f202 	lsl.w	r2, r0, r2
 8006cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006cb2:	bf00      	nop
 8006cb4:	370c      	adds	r7, #12
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	e000e100 	.word	0xe000e100

08006cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	4603      	mov	r3, r0
 8006ccc:	6039      	str	r1, [r7, #0]
 8006cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	db0a      	blt.n	8006cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	490c      	ldr	r1, [pc, #48]	; (8006d10 <__NVIC_SetPriority+0x4c>)
 8006cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ce2:	0112      	lsls	r2, r2, #4
 8006ce4:	b2d2      	uxtb	r2, r2
 8006ce6:	440b      	add	r3, r1
 8006ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006cec:	e00a      	b.n	8006d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	4908      	ldr	r1, [pc, #32]	; (8006d14 <__NVIC_SetPriority+0x50>)
 8006cf4:	79fb      	ldrb	r3, [r7, #7]
 8006cf6:	f003 030f 	and.w	r3, r3, #15
 8006cfa:	3b04      	subs	r3, #4
 8006cfc:	0112      	lsls	r2, r2, #4
 8006cfe:	b2d2      	uxtb	r2, r2
 8006d00:	440b      	add	r3, r1
 8006d02:	761a      	strb	r2, [r3, #24]
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr
 8006d10:	e000e100 	.word	0xe000e100
 8006d14:	e000ed00 	.word	0xe000ed00

08006d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b089      	sub	sp, #36	; 0x24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f003 0307 	and.w	r3, r3, #7
 8006d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	f1c3 0307 	rsb	r3, r3, #7
 8006d32:	2b04      	cmp	r3, #4
 8006d34:	bf28      	it	cs
 8006d36:	2304      	movcs	r3, #4
 8006d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	3304      	adds	r3, #4
 8006d3e:	2b06      	cmp	r3, #6
 8006d40:	d902      	bls.n	8006d48 <NVIC_EncodePriority+0x30>
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	3b03      	subs	r3, #3
 8006d46:	e000      	b.n	8006d4a <NVIC_EncodePriority+0x32>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	fa02 f303 	lsl.w	r3, r2, r3
 8006d56:	43da      	mvns	r2, r3
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	401a      	ands	r2, r3
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d60:	f04f 31ff 	mov.w	r1, #4294967295
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	fa01 f303 	lsl.w	r3, r1, r3
 8006d6a:	43d9      	mvns	r1, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d70:	4313      	orrs	r3, r2
         );
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3724      	adds	r7, #36	; 0x24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b082      	sub	sp, #8
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f7ff ff4c 	bl	8006c24 <__NVIC_SetPriorityGrouping>
}
 8006d8c:	bf00      	nop
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
 8006da0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006da2:	2300      	movs	r3, #0
 8006da4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006da6:	f7ff ff61 	bl	8006c6c <__NVIC_GetPriorityGrouping>
 8006daa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	68b9      	ldr	r1, [r7, #8]
 8006db0:	6978      	ldr	r0, [r7, #20]
 8006db2:	f7ff ffb1 	bl	8006d18 <NVIC_EncodePriority>
 8006db6:	4602      	mov	r2, r0
 8006db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dbc:	4611      	mov	r1, r2
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7ff ff80 	bl	8006cc4 <__NVIC_SetPriority>
}
 8006dc4:	bf00      	nop
 8006dc6:	3718      	adds	r7, #24
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7ff ff54 	bl	8006c88 <__NVIC_EnableIRQ>
}
 8006de0:	bf00      	nop
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e014      	b.n	8006e24 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	791b      	ldrb	r3, [r3, #4]
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d105      	bne.n	8006e10 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7fa fa08 	bl	8001220 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2202      	movs	r2, #2
 8006e14:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3708      	adds	r7, #8
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e42:	d120      	bne.n	8006e86 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e52:	d118      	bne.n	8006e86 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2204      	movs	r2, #4
 8006e58:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	f043 0201 	orr.w	r2, r3, #1
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006e6e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e7e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f82d 	bl	8006ee0 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e94:	d120      	bne.n	8006ed8 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ea4:	d118      	bne.n	8006ed8 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2204      	movs	r2, #4
 8006eaa:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	f043 0202 	orr.w	r2, r3, #2
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006ec0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006ed0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 f85d 	bl	8006f92 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8006ed8:	bf00      	nop
 8006eda:	3708      	adds	r7, #8
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	795b      	ldrb	r3, [r3, #5]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d101      	bne.n	8006f0c <HAL_DAC_ConfigChannel+0x18>
 8006f08:	2302      	movs	r3, #2
 8006f0a:	e03c      	b.n	8006f86 <HAL_DAC_ConfigChannel+0x92>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2202      	movs	r2, #2
 8006f16:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f003 0310 	and.w	r3, r3, #16
 8006f26:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2e:	43db      	mvns	r3, r3
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	4013      	ands	r3, r2
 8006f34:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f003 0310 	and.w	r3, r3, #16
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6819      	ldr	r1, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f003 0310 	and.w	r3, r3, #16
 8006f68:	22c0      	movs	r2, #192	; 0xc0
 8006f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f6e:	43da      	mvns	r2, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	400a      	ands	r2, r1
 8006f76:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	371c      	adds	r7, #28
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr

08006f92 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006f92:	b480      	push	{r7}
 8006f94:	b083      	sub	sp, #12
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006f9a:	bf00      	nop
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
	...

08006fa8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006fb4:	f7ff faa8 	bl	8006508 <HAL_GetTick>
 8006fb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d101      	bne.n	8006fc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e099      	b.n	80070f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2202      	movs	r2, #2
 8006fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f022 0201 	bic.w	r2, r2, #1
 8006fe2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006fe4:	e00f      	b.n	8007006 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006fe6:	f7ff fa8f 	bl	8006508 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	2b05      	cmp	r3, #5
 8006ff2:	d908      	bls.n	8007006 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2220      	movs	r2, #32
 8006ff8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2203      	movs	r2, #3
 8006ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e078      	b.n	80070f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0301 	and.w	r3, r3, #1
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1e8      	bne.n	8006fe6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	4b38      	ldr	r3, [pc, #224]	; (8007100 <HAL_DMA_Init+0x158>)
 8007020:	4013      	ands	r3, r2
 8007022:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007032:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800703e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800704a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a1b      	ldr	r3, [r3, #32]
 8007050:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	4313      	orrs	r3, r2
 8007056:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705c:	2b04      	cmp	r3, #4
 800705e:	d107      	bne.n	8007070 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007068:	4313      	orrs	r3, r2
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	4313      	orrs	r3, r2
 800706e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	697a      	ldr	r2, [r7, #20]
 8007076:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	f023 0307 	bic.w	r3, r3, #7
 8007086:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	4313      	orrs	r3, r2
 8007090:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007096:	2b04      	cmp	r3, #4
 8007098:	d117      	bne.n	80070ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00e      	beq.n	80070ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 fa89 	bl	80075c4 <DMA_CheckFifoParam>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d008      	beq.n	80070ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2240      	movs	r2, #64	; 0x40
 80070bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80070c6:	2301      	movs	r3, #1
 80070c8:	e016      	b.n	80070f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fa40 	bl	8007558 <DMA_CalcBaseAndBitshift>
 80070d8:	4603      	mov	r3, r0
 80070da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070e0:	223f      	movs	r2, #63	; 0x3f
 80070e2:	409a      	lsls	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3718      	adds	r7, #24
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	f010803f 	.word	0xf010803f

08007104 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007110:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007112:	f7ff f9f9 	bl	8006508 <HAL_GetTick>
 8007116:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800711e:	b2db      	uxtb	r3, r3
 8007120:	2b02      	cmp	r3, #2
 8007122:	d008      	beq.n	8007136 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2280      	movs	r2, #128	; 0x80
 8007128:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e052      	b.n	80071dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f022 0216 	bic.w	r2, r2, #22
 8007144:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	695a      	ldr	r2, [r3, #20]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007154:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715a:	2b00      	cmp	r3, #0
 800715c:	d103      	bne.n	8007166 <HAL_DMA_Abort+0x62>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007162:	2b00      	cmp	r3, #0
 8007164:	d007      	beq.n	8007176 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f022 0208 	bic.w	r2, r2, #8
 8007174:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f022 0201 	bic.w	r2, r2, #1
 8007184:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007186:	e013      	b.n	80071b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007188:	f7ff f9be 	bl	8006508 <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	2b05      	cmp	r3, #5
 8007194:	d90c      	bls.n	80071b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2220      	movs	r2, #32
 800719a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2203      	movs	r2, #3
 80071a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	e015      	b.n	80071dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1e4      	bne.n	8007188 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071c2:	223f      	movs	r2, #63	; 0x3f
 80071c4:	409a      	lsls	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d004      	beq.n	8007202 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2280      	movs	r2, #128	; 0x80
 80071fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e00c      	b.n	800721c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2205      	movs	r2, #5
 8007206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f022 0201 	bic.w	r2, r2, #1
 8007218:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007230:	2300      	movs	r3, #0
 8007232:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007234:	4b8e      	ldr	r3, [pc, #568]	; (8007470 <HAL_DMA_IRQHandler+0x248>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a8e      	ldr	r2, [pc, #568]	; (8007474 <HAL_DMA_IRQHandler+0x24c>)
 800723a:	fba2 2303 	umull	r2, r3, r2, r3
 800723e:	0a9b      	lsrs	r3, r3, #10
 8007240:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007246:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007252:	2208      	movs	r2, #8
 8007254:	409a      	lsls	r2, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	4013      	ands	r3, r2
 800725a:	2b00      	cmp	r3, #0
 800725c:	d01a      	beq.n	8007294 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 0304 	and.w	r3, r3, #4
 8007268:	2b00      	cmp	r3, #0
 800726a:	d013      	beq.n	8007294 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f022 0204 	bic.w	r2, r2, #4
 800727a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007280:	2208      	movs	r2, #8
 8007282:	409a      	lsls	r2, r3
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800728c:	f043 0201 	orr.w	r2, r3, #1
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007298:	2201      	movs	r2, #1
 800729a:	409a      	lsls	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	4013      	ands	r3, r2
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d012      	beq.n	80072ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00b      	beq.n	80072ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072b6:	2201      	movs	r2, #1
 80072b8:	409a      	lsls	r2, r3
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c2:	f043 0202 	orr.w	r2, r3, #2
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ce:	2204      	movs	r2, #4
 80072d0:	409a      	lsls	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	4013      	ands	r3, r2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d012      	beq.n	8007300 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0302 	and.w	r3, r3, #2
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00b      	beq.n	8007300 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ec:	2204      	movs	r2, #4
 80072ee:	409a      	lsls	r2, r3
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f8:	f043 0204 	orr.w	r2, r3, #4
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007304:	2210      	movs	r2, #16
 8007306:	409a      	lsls	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	4013      	ands	r3, r2
 800730c:	2b00      	cmp	r3, #0
 800730e:	d043      	beq.n	8007398 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0308 	and.w	r3, r3, #8
 800731a:	2b00      	cmp	r3, #0
 800731c:	d03c      	beq.n	8007398 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007322:	2210      	movs	r2, #16
 8007324:	409a      	lsls	r2, r3
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d018      	beq.n	800736a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d108      	bne.n	8007358 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734a:	2b00      	cmp	r3, #0
 800734c:	d024      	beq.n	8007398 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	4798      	blx	r3
 8007356:	e01f      	b.n	8007398 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800735c:	2b00      	cmp	r3, #0
 800735e:	d01b      	beq.n	8007398 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	4798      	blx	r3
 8007368:	e016      	b.n	8007398 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007374:	2b00      	cmp	r3, #0
 8007376:	d107      	bne.n	8007388 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f022 0208 	bic.w	r2, r2, #8
 8007386:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738c:	2b00      	cmp	r3, #0
 800738e:	d003      	beq.n	8007398 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800739c:	2220      	movs	r2, #32
 800739e:	409a      	lsls	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	4013      	ands	r3, r2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 808f 	beq.w	80074c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0310 	and.w	r3, r3, #16
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 8087 	beq.w	80074c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073be:	2220      	movs	r2, #32
 80073c0:	409a      	lsls	r2, r3
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b05      	cmp	r3, #5
 80073d0:	d136      	bne.n	8007440 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f022 0216 	bic.w	r2, r2, #22
 80073e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	695a      	ldr	r2, [r3, #20]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d103      	bne.n	8007402 <HAL_DMA_IRQHandler+0x1da>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d007      	beq.n	8007412 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 0208 	bic.w	r2, r2, #8
 8007410:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007416:	223f      	movs	r2, #63	; 0x3f
 8007418:	409a      	lsls	r2, r3
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007432:	2b00      	cmp	r3, #0
 8007434:	d07e      	beq.n	8007534 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	4798      	blx	r3
        }
        return;
 800743e:	e079      	b.n	8007534 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d01d      	beq.n	800748a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10d      	bne.n	8007478 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007460:	2b00      	cmp	r3, #0
 8007462:	d031      	beq.n	80074c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	4798      	blx	r3
 800746c:	e02c      	b.n	80074c8 <HAL_DMA_IRQHandler+0x2a0>
 800746e:	bf00      	nop
 8007470:	20000004 	.word	0x20000004
 8007474:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800747c:	2b00      	cmp	r3, #0
 800747e:	d023      	beq.n	80074c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	4798      	blx	r3
 8007488:	e01e      	b.n	80074c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10f      	bne.n	80074b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f022 0210 	bic.w	r2, r2, #16
 80074a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d003      	beq.n	80074c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d032      	beq.n	8007536 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d4:	f003 0301 	and.w	r3, r3, #1
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d022      	beq.n	8007522 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2205      	movs	r2, #5
 80074e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f022 0201 	bic.w	r2, r2, #1
 80074f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	3301      	adds	r3, #1
 80074f8:	60bb      	str	r3, [r7, #8]
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d307      	bcc.n	8007510 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1f2      	bne.n	80074f4 <HAL_DMA_IRQHandler+0x2cc>
 800750e:	e000      	b.n	8007512 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007510:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007526:	2b00      	cmp	r3, #0
 8007528:	d005      	beq.n	8007536 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	4798      	blx	r3
 8007532:	e000      	b.n	8007536 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007534:	bf00      	nop
    }
  }
}
 8007536:	3718      	adds	r7, #24
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800754a:	b2db      	uxtb	r3, r3
}
 800754c:	4618      	mov	r0, r3
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	b2db      	uxtb	r3, r3
 8007566:	3b10      	subs	r3, #16
 8007568:	4a14      	ldr	r2, [pc, #80]	; (80075bc <DMA_CalcBaseAndBitshift+0x64>)
 800756a:	fba2 2303 	umull	r2, r3, r2, r3
 800756e:	091b      	lsrs	r3, r3, #4
 8007570:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007572:	4a13      	ldr	r2, [pc, #76]	; (80075c0 <DMA_CalcBaseAndBitshift+0x68>)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	4413      	add	r3, r2
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	461a      	mov	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2b03      	cmp	r3, #3
 8007584:	d909      	bls.n	800759a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800758e:	f023 0303 	bic.w	r3, r3, #3
 8007592:	1d1a      	adds	r2, r3, #4
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	659a      	str	r2, [r3, #88]	; 0x58
 8007598:	e007      	b.n	80075aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80075a2:	f023 0303 	bic.w	r3, r3, #3
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	aaaaaaab 	.word	0xaaaaaaab
 80075c0:	08011d88 	.word	0x08011d88

080075c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075cc:	2300      	movs	r3, #0
 80075ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d11f      	bne.n	800761e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	2b03      	cmp	r3, #3
 80075e2:	d856      	bhi.n	8007692 <DMA_CheckFifoParam+0xce>
 80075e4:	a201      	add	r2, pc, #4	; (adr r2, 80075ec <DMA_CheckFifoParam+0x28>)
 80075e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ea:	bf00      	nop
 80075ec:	080075fd 	.word	0x080075fd
 80075f0:	0800760f 	.word	0x0800760f
 80075f4:	080075fd 	.word	0x080075fd
 80075f8:	08007693 	.word	0x08007693
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007600:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d046      	beq.n	8007696 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800760c:	e043      	b.n	8007696 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007612:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007616:	d140      	bne.n	800769a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800761c:	e03d      	b.n	800769a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007626:	d121      	bne.n	800766c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	2b03      	cmp	r3, #3
 800762c:	d837      	bhi.n	800769e <DMA_CheckFifoParam+0xda>
 800762e:	a201      	add	r2, pc, #4	; (adr r2, 8007634 <DMA_CheckFifoParam+0x70>)
 8007630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007634:	08007645 	.word	0x08007645
 8007638:	0800764b 	.word	0x0800764b
 800763c:	08007645 	.word	0x08007645
 8007640:	0800765d 	.word	0x0800765d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	73fb      	strb	r3, [r7, #15]
      break;
 8007648:	e030      	b.n	80076ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d025      	beq.n	80076a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800765a:	e022      	b.n	80076a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007660:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007664:	d11f      	bne.n	80076a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800766a:	e01c      	b.n	80076a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	2b02      	cmp	r3, #2
 8007670:	d903      	bls.n	800767a <DMA_CheckFifoParam+0xb6>
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	2b03      	cmp	r3, #3
 8007676:	d003      	beq.n	8007680 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007678:	e018      	b.n	80076ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	73fb      	strb	r3, [r7, #15]
      break;
 800767e:	e015      	b.n	80076ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007684:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00e      	beq.n	80076aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	73fb      	strb	r3, [r7, #15]
      break;
 8007690:	e00b      	b.n	80076aa <DMA_CheckFifoParam+0xe6>
      break;
 8007692:	bf00      	nop
 8007694:	e00a      	b.n	80076ac <DMA_CheckFifoParam+0xe8>
      break;
 8007696:	bf00      	nop
 8007698:	e008      	b.n	80076ac <DMA_CheckFifoParam+0xe8>
      break;
 800769a:	bf00      	nop
 800769c:	e006      	b.n	80076ac <DMA_CheckFifoParam+0xe8>
      break;
 800769e:	bf00      	nop
 80076a0:	e004      	b.n	80076ac <DMA_CheckFifoParam+0xe8>
      break;
 80076a2:	bf00      	nop
 80076a4:	e002      	b.n	80076ac <DMA_CheckFifoParam+0xe8>
      break;   
 80076a6:	bf00      	nop
 80076a8:	e000      	b.n	80076ac <DMA_CheckFifoParam+0xe8>
      break;
 80076aa:	bf00      	nop
    }
  } 
  
  return status; 
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop

080076bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80076bc:	b480      	push	{r7}
 80076be:	b089      	sub	sp, #36	; 0x24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80076c6:	2300      	movs	r3, #0
 80076c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80076ce:	2300      	movs	r3, #0
 80076d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80076d2:	2300      	movs	r3, #0
 80076d4:	61fb      	str	r3, [r7, #28]
 80076d6:	e16b      	b.n	80079b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80076d8:	2201      	movs	r2, #1
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	fa02 f303 	lsl.w	r3, r2, r3
 80076e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	4013      	ands	r3, r2
 80076ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	f040 815a 	bne.w	80079aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	f003 0303 	and.w	r3, r3, #3
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d005      	beq.n	800770e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800770a:	2b02      	cmp	r3, #2
 800770c:	d130      	bne.n	8007770 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	2203      	movs	r2, #3
 800771a:	fa02 f303 	lsl.w	r3, r2, r3
 800771e:	43db      	mvns	r3, r3
 8007720:	69ba      	ldr	r2, [r7, #24]
 8007722:	4013      	ands	r3, r2
 8007724:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	68da      	ldr	r2, [r3, #12]
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	005b      	lsls	r3, r3, #1
 800772e:	fa02 f303 	lsl.w	r3, r2, r3
 8007732:	69ba      	ldr	r2, [r7, #24]
 8007734:	4313      	orrs	r3, r2
 8007736:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	69ba      	ldr	r2, [r7, #24]
 800773c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007744:	2201      	movs	r2, #1
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	fa02 f303 	lsl.w	r3, r2, r3
 800774c:	43db      	mvns	r3, r3
 800774e:	69ba      	ldr	r2, [r7, #24]
 8007750:	4013      	ands	r3, r2
 8007752:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	091b      	lsrs	r3, r3, #4
 800775a:	f003 0201 	and.w	r2, r3, #1
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	fa02 f303 	lsl.w	r3, r2, r3
 8007764:	69ba      	ldr	r2, [r7, #24]
 8007766:	4313      	orrs	r3, r2
 8007768:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	69ba      	ldr	r2, [r7, #24]
 800776e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	f003 0303 	and.w	r3, r3, #3
 8007778:	2b03      	cmp	r3, #3
 800777a:	d017      	beq.n	80077ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	005b      	lsls	r3, r3, #1
 8007786:	2203      	movs	r2, #3
 8007788:	fa02 f303 	lsl.w	r3, r2, r3
 800778c:	43db      	mvns	r3, r3
 800778e:	69ba      	ldr	r2, [r7, #24]
 8007790:	4013      	ands	r3, r2
 8007792:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	689a      	ldr	r2, [r3, #8]
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	005b      	lsls	r3, r3, #1
 800779c:	fa02 f303 	lsl.w	r3, r2, r3
 80077a0:	69ba      	ldr	r2, [r7, #24]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	69ba      	ldr	r2, [r7, #24]
 80077aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f003 0303 	and.w	r3, r3, #3
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d123      	bne.n	8007800 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	08da      	lsrs	r2, r3, #3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	3208      	adds	r2, #8
 80077c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	f003 0307 	and.w	r3, r3, #7
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	220f      	movs	r2, #15
 80077d0:	fa02 f303 	lsl.w	r3, r2, r3
 80077d4:	43db      	mvns	r3, r3
 80077d6:	69ba      	ldr	r2, [r7, #24]
 80077d8:	4013      	ands	r3, r2
 80077da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	691a      	ldr	r2, [r3, #16]
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	f003 0307 	and.w	r3, r3, #7
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	fa02 f303 	lsl.w	r3, r2, r3
 80077ec:	69ba      	ldr	r2, [r7, #24]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	08da      	lsrs	r2, r3, #3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	3208      	adds	r2, #8
 80077fa:	69b9      	ldr	r1, [r7, #24]
 80077fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	005b      	lsls	r3, r3, #1
 800780a:	2203      	movs	r2, #3
 800780c:	fa02 f303 	lsl.w	r3, r2, r3
 8007810:	43db      	mvns	r3, r3
 8007812:	69ba      	ldr	r2, [r7, #24]
 8007814:	4013      	ands	r3, r2
 8007816:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	f003 0203 	and.w	r2, r3, #3
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	005b      	lsls	r3, r3, #1
 8007824:	fa02 f303 	lsl.w	r3, r2, r3
 8007828:	69ba      	ldr	r2, [r7, #24]
 800782a:	4313      	orrs	r3, r2
 800782c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	69ba      	ldr	r2, [r7, #24]
 8007832:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800783c:	2b00      	cmp	r3, #0
 800783e:	f000 80b4 	beq.w	80079aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007842:	2300      	movs	r3, #0
 8007844:	60fb      	str	r3, [r7, #12]
 8007846:	4b60      	ldr	r3, [pc, #384]	; (80079c8 <HAL_GPIO_Init+0x30c>)
 8007848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800784a:	4a5f      	ldr	r2, [pc, #380]	; (80079c8 <HAL_GPIO_Init+0x30c>)
 800784c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007850:	6453      	str	r3, [r2, #68]	; 0x44
 8007852:	4b5d      	ldr	r3, [pc, #372]	; (80079c8 <HAL_GPIO_Init+0x30c>)
 8007854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800785a:	60fb      	str	r3, [r7, #12]
 800785c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800785e:	4a5b      	ldr	r2, [pc, #364]	; (80079cc <HAL_GPIO_Init+0x310>)
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	089b      	lsrs	r3, r3, #2
 8007864:	3302      	adds	r3, #2
 8007866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800786a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	f003 0303 	and.w	r3, r3, #3
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	220f      	movs	r2, #15
 8007876:	fa02 f303 	lsl.w	r3, r2, r3
 800787a:	43db      	mvns	r3, r3
 800787c:	69ba      	ldr	r2, [r7, #24]
 800787e:	4013      	ands	r3, r2
 8007880:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a52      	ldr	r2, [pc, #328]	; (80079d0 <HAL_GPIO_Init+0x314>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d02b      	beq.n	80078e2 <HAL_GPIO_Init+0x226>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a51      	ldr	r2, [pc, #324]	; (80079d4 <HAL_GPIO_Init+0x318>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d025      	beq.n	80078de <HAL_GPIO_Init+0x222>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a50      	ldr	r2, [pc, #320]	; (80079d8 <HAL_GPIO_Init+0x31c>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d01f      	beq.n	80078da <HAL_GPIO_Init+0x21e>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a4f      	ldr	r2, [pc, #316]	; (80079dc <HAL_GPIO_Init+0x320>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d019      	beq.n	80078d6 <HAL_GPIO_Init+0x21a>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a4e      	ldr	r2, [pc, #312]	; (80079e0 <HAL_GPIO_Init+0x324>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d013      	beq.n	80078d2 <HAL_GPIO_Init+0x216>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a4d      	ldr	r2, [pc, #308]	; (80079e4 <HAL_GPIO_Init+0x328>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d00d      	beq.n	80078ce <HAL_GPIO_Init+0x212>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a4c      	ldr	r2, [pc, #304]	; (80079e8 <HAL_GPIO_Init+0x32c>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d007      	beq.n	80078ca <HAL_GPIO_Init+0x20e>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a4b      	ldr	r2, [pc, #300]	; (80079ec <HAL_GPIO_Init+0x330>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d101      	bne.n	80078c6 <HAL_GPIO_Init+0x20a>
 80078c2:	2307      	movs	r3, #7
 80078c4:	e00e      	b.n	80078e4 <HAL_GPIO_Init+0x228>
 80078c6:	2308      	movs	r3, #8
 80078c8:	e00c      	b.n	80078e4 <HAL_GPIO_Init+0x228>
 80078ca:	2306      	movs	r3, #6
 80078cc:	e00a      	b.n	80078e4 <HAL_GPIO_Init+0x228>
 80078ce:	2305      	movs	r3, #5
 80078d0:	e008      	b.n	80078e4 <HAL_GPIO_Init+0x228>
 80078d2:	2304      	movs	r3, #4
 80078d4:	e006      	b.n	80078e4 <HAL_GPIO_Init+0x228>
 80078d6:	2303      	movs	r3, #3
 80078d8:	e004      	b.n	80078e4 <HAL_GPIO_Init+0x228>
 80078da:	2302      	movs	r3, #2
 80078dc:	e002      	b.n	80078e4 <HAL_GPIO_Init+0x228>
 80078de:	2301      	movs	r3, #1
 80078e0:	e000      	b.n	80078e4 <HAL_GPIO_Init+0x228>
 80078e2:	2300      	movs	r3, #0
 80078e4:	69fa      	ldr	r2, [r7, #28]
 80078e6:	f002 0203 	and.w	r2, r2, #3
 80078ea:	0092      	lsls	r2, r2, #2
 80078ec:	4093      	lsls	r3, r2
 80078ee:	69ba      	ldr	r2, [r7, #24]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80078f4:	4935      	ldr	r1, [pc, #212]	; (80079cc <HAL_GPIO_Init+0x310>)
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	089b      	lsrs	r3, r3, #2
 80078fa:	3302      	adds	r3, #2
 80078fc:	69ba      	ldr	r2, [r7, #24]
 80078fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007902:	4b3b      	ldr	r3, [pc, #236]	; (80079f0 <HAL_GPIO_Init+0x334>)
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	43db      	mvns	r3, r3
 800790c:	69ba      	ldr	r2, [r7, #24]
 800790e:	4013      	ands	r3, r2
 8007910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800791a:	2b00      	cmp	r3, #0
 800791c:	d003      	beq.n	8007926 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800791e:	69ba      	ldr	r2, [r7, #24]
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	4313      	orrs	r3, r2
 8007924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007926:	4a32      	ldr	r2, [pc, #200]	; (80079f0 <HAL_GPIO_Init+0x334>)
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800792c:	4b30      	ldr	r3, [pc, #192]	; (80079f0 <HAL_GPIO_Init+0x334>)
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	43db      	mvns	r3, r3
 8007936:	69ba      	ldr	r2, [r7, #24]
 8007938:	4013      	ands	r3, r2
 800793a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007944:	2b00      	cmp	r3, #0
 8007946:	d003      	beq.n	8007950 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007948:	69ba      	ldr	r2, [r7, #24]
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	4313      	orrs	r3, r2
 800794e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007950:	4a27      	ldr	r2, [pc, #156]	; (80079f0 <HAL_GPIO_Init+0x334>)
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007956:	4b26      	ldr	r3, [pc, #152]	; (80079f0 <HAL_GPIO_Init+0x334>)
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	43db      	mvns	r3, r3
 8007960:	69ba      	ldr	r2, [r7, #24]
 8007962:	4013      	ands	r3, r2
 8007964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d003      	beq.n	800797a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007972:	69ba      	ldr	r2, [r7, #24]
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	4313      	orrs	r3, r2
 8007978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800797a:	4a1d      	ldr	r2, [pc, #116]	; (80079f0 <HAL_GPIO_Init+0x334>)
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007980:	4b1b      	ldr	r3, [pc, #108]	; (80079f0 <HAL_GPIO_Init+0x334>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	43db      	mvns	r3, r3
 800798a:	69ba      	ldr	r2, [r7, #24]
 800798c:	4013      	ands	r3, r2
 800798e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007998:	2b00      	cmp	r3, #0
 800799a:	d003      	beq.n	80079a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800799c:	69ba      	ldr	r2, [r7, #24]
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80079a4:	4a12      	ldr	r2, [pc, #72]	; (80079f0 <HAL_GPIO_Init+0x334>)
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	3301      	adds	r3, #1
 80079ae:	61fb      	str	r3, [r7, #28]
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	2b0f      	cmp	r3, #15
 80079b4:	f67f ae90 	bls.w	80076d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80079b8:	bf00      	nop
 80079ba:	bf00      	nop
 80079bc:	3724      	adds	r7, #36	; 0x24
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
 80079c8:	40023800 	.word	0x40023800
 80079cc:	40013800 	.word	0x40013800
 80079d0:	40020000 	.word	0x40020000
 80079d4:	40020400 	.word	0x40020400
 80079d8:	40020800 	.word	0x40020800
 80079dc:	40020c00 	.word	0x40020c00
 80079e0:	40021000 	.word	0x40021000
 80079e4:	40021400 	.word	0x40021400
 80079e8:	40021800 	.word	0x40021800
 80079ec:	40021c00 	.word	0x40021c00
 80079f0:	40013c00 	.word	0x40013c00

080079f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	460b      	mov	r3, r1
 80079fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	691a      	ldr	r2, [r3, #16]
 8007a04:	887b      	ldrh	r3, [r7, #2]
 8007a06:	4013      	ands	r3, r2
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d002      	beq.n	8007a12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	73fb      	strb	r3, [r7, #15]
 8007a10:	e001      	b.n	8007a16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a12:	2300      	movs	r3, #0
 8007a14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	807b      	strh	r3, [r7, #2]
 8007a30:	4613      	mov	r3, r2
 8007a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007a34:	787b      	ldrb	r3, [r7, #1]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d003      	beq.n	8007a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a3a:	887a      	ldrh	r2, [r7, #2]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007a40:	e003      	b.n	8007a4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007a42:	887b      	ldrh	r3, [r7, #2]
 8007a44:	041a      	lsls	r2, r3, #16
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	619a      	str	r2, [r3, #24]
}
 8007a4a:	bf00      	nop
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b085      	sub	sp, #20
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	460b      	mov	r3, r1
 8007a60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007a68:	887a      	ldrh	r2, [r7, #2]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	041a      	lsls	r2, r3, #16
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	43d9      	mvns	r1, r3
 8007a74:	887b      	ldrh	r3, [r7, #2]
 8007a76:	400b      	ands	r3, r1
 8007a78:	431a      	orrs	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	619a      	str	r2, [r3, #24]
}
 8007a7e:	bf00      	nop
 8007a80:	3714      	adds	r7, #20
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
	...

08007a8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	4603      	mov	r3, r0
 8007a94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007a96:	4b08      	ldr	r3, [pc, #32]	; (8007ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007a98:	695a      	ldr	r2, [r3, #20]
 8007a9a:	88fb      	ldrh	r3, [r7, #6]
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d006      	beq.n	8007ab0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007aa2:	4a05      	ldr	r2, [pc, #20]	; (8007ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007aa4:	88fb      	ldrh	r3, [r7, #6]
 8007aa6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007aa8:	88fb      	ldrh	r3, [r7, #6]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7f9 fea8 	bl	8001800 <HAL_GPIO_EXTI_Callback>
  }
}
 8007ab0:	bf00      	nop
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	40013c00 	.word	0x40013c00

08007abc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d101      	bne.n	8007ace <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e12b      	b.n	8007d26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d106      	bne.n	8007ae8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7f9 ff28 	bl	8001938 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2224      	movs	r2, #36	; 0x24
 8007aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f022 0201 	bic.w	r2, r2, #1
 8007afe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007b20:	f002 fa34 	bl	8009f8c <HAL_RCC_GetPCLK1Freq>
 8007b24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	4a81      	ldr	r2, [pc, #516]	; (8007d30 <HAL_I2C_Init+0x274>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d807      	bhi.n	8007b40 <HAL_I2C_Init+0x84>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	4a80      	ldr	r2, [pc, #512]	; (8007d34 <HAL_I2C_Init+0x278>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	bf94      	ite	ls
 8007b38:	2301      	movls	r3, #1
 8007b3a:	2300      	movhi	r3, #0
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	e006      	b.n	8007b4e <HAL_I2C_Init+0x92>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	4a7d      	ldr	r2, [pc, #500]	; (8007d38 <HAL_I2C_Init+0x27c>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	bf94      	ite	ls
 8007b48:	2301      	movls	r3, #1
 8007b4a:	2300      	movhi	r3, #0
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d001      	beq.n	8007b56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e0e7      	b.n	8007d26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	4a78      	ldr	r2, [pc, #480]	; (8007d3c <HAL_I2C_Init+0x280>)
 8007b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b5e:	0c9b      	lsrs	r3, r3, #18
 8007b60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68ba      	ldr	r2, [r7, #8]
 8007b72:	430a      	orrs	r2, r1
 8007b74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	6a1b      	ldr	r3, [r3, #32]
 8007b7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	4a6a      	ldr	r2, [pc, #424]	; (8007d30 <HAL_I2C_Init+0x274>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d802      	bhi.n	8007b90 <HAL_I2C_Init+0xd4>
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	e009      	b.n	8007ba4 <HAL_I2C_Init+0xe8>
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007b96:	fb02 f303 	mul.w	r3, r2, r3
 8007b9a:	4a69      	ldr	r2, [pc, #420]	; (8007d40 <HAL_I2C_Init+0x284>)
 8007b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba0:	099b      	lsrs	r3, r3, #6
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	6812      	ldr	r2, [r2, #0]
 8007ba8:	430b      	orrs	r3, r1
 8007baa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007bb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	495c      	ldr	r1, [pc, #368]	; (8007d30 <HAL_I2C_Init+0x274>)
 8007bc0:	428b      	cmp	r3, r1
 8007bc2:	d819      	bhi.n	8007bf8 <HAL_I2C_Init+0x13c>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	1e59      	subs	r1, r3, #1
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	005b      	lsls	r3, r3, #1
 8007bce:	fbb1 f3f3 	udiv	r3, r1, r3
 8007bd2:	1c59      	adds	r1, r3, #1
 8007bd4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007bd8:	400b      	ands	r3, r1
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00a      	beq.n	8007bf4 <HAL_I2C_Init+0x138>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	1e59      	subs	r1, r3, #1
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	005b      	lsls	r3, r3, #1
 8007be8:	fbb1 f3f3 	udiv	r3, r1, r3
 8007bec:	3301      	adds	r3, #1
 8007bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bf2:	e051      	b.n	8007c98 <HAL_I2C_Init+0x1dc>
 8007bf4:	2304      	movs	r3, #4
 8007bf6:	e04f      	b.n	8007c98 <HAL_I2C_Init+0x1dc>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d111      	bne.n	8007c24 <HAL_I2C_Init+0x168>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	1e58      	subs	r0, r3, #1
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6859      	ldr	r1, [r3, #4]
 8007c08:	460b      	mov	r3, r1
 8007c0a:	005b      	lsls	r3, r3, #1
 8007c0c:	440b      	add	r3, r1
 8007c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c12:	3301      	adds	r3, #1
 8007c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	bf0c      	ite	eq
 8007c1c:	2301      	moveq	r3, #1
 8007c1e:	2300      	movne	r3, #0
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	e012      	b.n	8007c4a <HAL_I2C_Init+0x18e>
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	1e58      	subs	r0, r3, #1
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6859      	ldr	r1, [r3, #4]
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	440b      	add	r3, r1
 8007c32:	0099      	lsls	r1, r3, #2
 8007c34:	440b      	add	r3, r1
 8007c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	bf0c      	ite	eq
 8007c44:	2301      	moveq	r3, #1
 8007c46:	2300      	movne	r3, #0
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d001      	beq.n	8007c52 <HAL_I2C_Init+0x196>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e022      	b.n	8007c98 <HAL_I2C_Init+0x1dc>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10e      	bne.n	8007c78 <HAL_I2C_Init+0x1bc>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	1e58      	subs	r0, r3, #1
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6859      	ldr	r1, [r3, #4]
 8007c62:	460b      	mov	r3, r1
 8007c64:	005b      	lsls	r3, r3, #1
 8007c66:	440b      	add	r3, r1
 8007c68:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c76:	e00f      	b.n	8007c98 <HAL_I2C_Init+0x1dc>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	1e58      	subs	r0, r3, #1
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6859      	ldr	r1, [r3, #4]
 8007c80:	460b      	mov	r3, r1
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	440b      	add	r3, r1
 8007c86:	0099      	lsls	r1, r3, #2
 8007c88:	440b      	add	r3, r1
 8007c8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c8e:	3301      	adds	r3, #1
 8007c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c98:	6879      	ldr	r1, [r7, #4]
 8007c9a:	6809      	ldr	r1, [r1, #0]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	69da      	ldr	r2, [r3, #28]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	431a      	orrs	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	430a      	orrs	r2, r1
 8007cba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007cc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	6911      	ldr	r1, [r2, #16]
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	68d2      	ldr	r2, [r2, #12]
 8007cd2:	4311      	orrs	r1, r2
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	6812      	ldr	r2, [r2, #0]
 8007cd8:	430b      	orrs	r3, r1
 8007cda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	695a      	ldr	r2, [r3, #20]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f042 0201 	orr.w	r2, r2, #1
 8007d06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2220      	movs	r2, #32
 8007d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	000186a0 	.word	0x000186a0
 8007d34:	001e847f 	.word	0x001e847f
 8007d38:	003d08ff 	.word	0x003d08ff
 8007d3c:	431bde83 	.word	0x431bde83
 8007d40:	10624dd3 	.word	0x10624dd3

08007d44 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b088      	sub	sp, #32
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d64:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d6c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007d6e:	7bfb      	ldrb	r3, [r7, #15]
 8007d70:	2b10      	cmp	r3, #16
 8007d72:	d003      	beq.n	8007d7c <HAL_I2C_EV_IRQHandler+0x38>
 8007d74:	7bfb      	ldrb	r3, [r7, #15]
 8007d76:	2b40      	cmp	r3, #64	; 0x40
 8007d78:	f040 80b1 	bne.w	8007ede <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	f003 0301 	and.w	r3, r3, #1
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d10d      	bne.n	8007db2 <HAL_I2C_EV_IRQHandler+0x6e>
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007d9c:	d003      	beq.n	8007da6 <HAL_I2C_EV_IRQHandler+0x62>
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007da4:	d101      	bne.n	8007daa <HAL_I2C_EV_IRQHandler+0x66>
 8007da6:	2301      	movs	r3, #1
 8007da8:	e000      	b.n	8007dac <HAL_I2C_EV_IRQHandler+0x68>
 8007daa:	2300      	movs	r3, #0
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	f000 8114 	beq.w	8007fda <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	f003 0301 	and.w	r3, r3, #1
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00b      	beq.n	8007dd4 <HAL_I2C_EV_IRQHandler+0x90>
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d006      	beq.n	8007dd4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f001 fc54 	bl	8009674 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fd5e 	bl	800888e <I2C_Master_SB>
 8007dd2:	e083      	b.n	8007edc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	f003 0308 	and.w	r3, r3, #8
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d008      	beq.n	8007df0 <HAL_I2C_EV_IRQHandler+0xac>
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d003      	beq.n	8007df0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fdd6 	bl	800899a <I2C_Master_ADD10>
 8007dee:	e075      	b.n	8007edc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	f003 0302 	and.w	r3, r3, #2
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d008      	beq.n	8007e0c <HAL_I2C_EV_IRQHandler+0xc8>
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d003      	beq.n	8007e0c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fdf2 	bl	80089ee <I2C_Master_ADDR>
 8007e0a:	e067      	b.n	8007edc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	f003 0304 	and.w	r3, r3, #4
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d036      	beq.n	8007e84 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e24:	f000 80db 	beq.w	8007fde <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00d      	beq.n	8007e4e <HAL_I2C_EV_IRQHandler+0x10a>
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d008      	beq.n	8007e4e <HAL_I2C_EV_IRQHandler+0x10a>
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	f003 0304 	and.w	r3, r3, #4
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d103      	bne.n	8007e4e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f9d6 	bl	80081f8 <I2C_MasterTransmit_TXE>
 8007e4c:	e046      	b.n	8007edc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	f003 0304 	and.w	r3, r3, #4
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f000 80c2 	beq.w	8007fde <HAL_I2C_EV_IRQHandler+0x29a>
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f000 80bc 	beq.w	8007fde <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007e66:	7bbb      	ldrb	r3, [r7, #14]
 8007e68:	2b21      	cmp	r3, #33	; 0x21
 8007e6a:	d103      	bne.n	8007e74 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fa5f 	bl	8008330 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007e72:	e0b4      	b.n	8007fde <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
 8007e76:	2b40      	cmp	r3, #64	; 0x40
 8007e78:	f040 80b1 	bne.w	8007fde <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 facd 	bl	800841c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007e82:	e0ac      	b.n	8007fde <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e92:	f000 80a4 	beq.w	8007fde <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00d      	beq.n	8007ebc <HAL_I2C_EV_IRQHandler+0x178>
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d008      	beq.n	8007ebc <HAL_I2C_EV_IRQHandler+0x178>
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	f003 0304 	and.w	r3, r3, #4
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d103      	bne.n	8007ebc <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 fb45 	bl	8008544 <I2C_MasterReceive_RXNE>
 8007eba:	e00f      	b.n	8007edc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	f003 0304 	and.w	r3, r3, #4
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f000 808b 	beq.w	8007fde <HAL_I2C_EV_IRQHandler+0x29a>
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 8085 	beq.w	8007fde <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 fbf0 	bl	80086ba <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007eda:	e080      	b.n	8007fde <HAL_I2C_EV_IRQHandler+0x29a>
 8007edc:	e07f      	b.n	8007fde <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d004      	beq.n	8007ef0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	695b      	ldr	r3, [r3, #20]
 8007eec:	61fb      	str	r3, [r7, #28]
 8007eee:	e007      	b.n	8007f00 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	695b      	ldr	r3, [r3, #20]
 8007efe:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	f003 0302 	and.w	r3, r3, #2
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d011      	beq.n	8007f2e <HAL_I2C_EV_IRQHandler+0x1ea>
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00c      	beq.n	8007f2e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d003      	beq.n	8007f24 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007f24:	69b9      	ldr	r1, [r7, #24]
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 ffb0 	bl	8008e8c <I2C_Slave_ADDR>
 8007f2c:	e05a      	b.n	8007fe4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	f003 0310 	and.w	r3, r3, #16
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d008      	beq.n	8007f4a <HAL_I2C_EV_IRQHandler+0x206>
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d003      	beq.n	8007f4a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 ffea 	bl	8008f1c <I2C_Slave_STOPF>
 8007f48:	e04c      	b.n	8007fe4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007f4a:	7bbb      	ldrb	r3, [r7, #14]
 8007f4c:	2b21      	cmp	r3, #33	; 0x21
 8007f4e:	d002      	beq.n	8007f56 <HAL_I2C_EV_IRQHandler+0x212>
 8007f50:	7bbb      	ldrb	r3, [r7, #14]
 8007f52:	2b29      	cmp	r3, #41	; 0x29
 8007f54:	d120      	bne.n	8007f98 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00d      	beq.n	8007f7c <HAL_I2C_EV_IRQHandler+0x238>
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d008      	beq.n	8007f7c <HAL_I2C_EV_IRQHandler+0x238>
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	f003 0304 	and.w	r3, r3, #4
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d103      	bne.n	8007f7c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fecb 	bl	8008d10 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007f7a:	e032      	b.n	8007fe2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	f003 0304 	and.w	r3, r3, #4
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d02d      	beq.n	8007fe2 <HAL_I2C_EV_IRQHandler+0x29e>
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d028      	beq.n	8007fe2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fefa 	bl	8008d8a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007f96:	e024      	b.n	8007fe2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00d      	beq.n	8007fbe <HAL_I2C_EV_IRQHandler+0x27a>
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d008      	beq.n	8007fbe <HAL_I2C_EV_IRQHandler+0x27a>
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	f003 0304 	and.w	r3, r3, #4
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d103      	bne.n	8007fbe <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 ff08 	bl	8008dcc <I2C_SlaveReceive_RXNE>
 8007fbc:	e012      	b.n	8007fe4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	f003 0304 	and.w	r3, r3, #4
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00d      	beq.n	8007fe4 <HAL_I2C_EV_IRQHandler+0x2a0>
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d008      	beq.n	8007fe4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 ff38 	bl	8008e48 <I2C_SlaveReceive_BTF>
 8007fd8:	e004      	b.n	8007fe4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8007fda:	bf00      	nop
 8007fdc:	e002      	b.n	8007fe4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007fde:	bf00      	nop
 8007fe0:	e000      	b.n	8007fe4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007fe2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007fe4:	3720      	adds	r7, #32
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b08a      	sub	sp, #40	; 0x28
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	695b      	ldr	r3, [r3, #20]
 8007ff8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8008002:	2300      	movs	r3, #0
 8008004:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800800c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800800e:	6a3b      	ldr	r3, [r7, #32]
 8008010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00d      	beq.n	8008034 <HAL_I2C_ER_IRQHandler+0x4a>
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800801e:	2b00      	cmp	r3, #0
 8008020:	d008      	beq.n	8008034 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	f043 0301 	orr.w	r3, r3, #1
 8008028:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008032:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00d      	beq.n	800805a <HAL_I2C_ER_IRQHandler+0x70>
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008044:	2b00      	cmp	r3, #0
 8008046:	d008      	beq.n	800805a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8008048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804a:	f043 0302 	orr.w	r3, r3, #2
 800804e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8008058:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800805a:	6a3b      	ldr	r3, [r7, #32]
 800805c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008060:	2b00      	cmp	r3, #0
 8008062:	d03e      	beq.n	80080e2 <HAL_I2C_ER_IRQHandler+0xf8>
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800806a:	2b00      	cmp	r3, #0
 800806c:	d039      	beq.n	80080e2 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800806e:	7efb      	ldrb	r3, [r7, #27]
 8008070:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008076:	b29b      	uxth	r3, r3
 8008078:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008080:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008086:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8008088:	7ebb      	ldrb	r3, [r7, #26]
 800808a:	2b20      	cmp	r3, #32
 800808c:	d112      	bne.n	80080b4 <HAL_I2C_ER_IRQHandler+0xca>
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d10f      	bne.n	80080b4 <HAL_I2C_ER_IRQHandler+0xca>
 8008094:	7cfb      	ldrb	r3, [r7, #19]
 8008096:	2b21      	cmp	r3, #33	; 0x21
 8008098:	d008      	beq.n	80080ac <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800809a:	7cfb      	ldrb	r3, [r7, #19]
 800809c:	2b29      	cmp	r3, #41	; 0x29
 800809e:	d005      	beq.n	80080ac <HAL_I2C_ER_IRQHandler+0xc2>
 80080a0:	7cfb      	ldrb	r3, [r7, #19]
 80080a2:	2b28      	cmp	r3, #40	; 0x28
 80080a4:	d106      	bne.n	80080b4 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2b21      	cmp	r3, #33	; 0x21
 80080aa:	d103      	bne.n	80080b4 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f001 f865 	bl	800917c <I2C_Slave_AF>
 80080b2:	e016      	b.n	80080e2 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80080bc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80080be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c0:	f043 0304 	orr.w	r3, r3, #4
 80080c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80080c6:	7efb      	ldrb	r3, [r7, #27]
 80080c8:	2b10      	cmp	r3, #16
 80080ca:	d002      	beq.n	80080d2 <HAL_I2C_ER_IRQHandler+0xe8>
 80080cc:	7efb      	ldrb	r3, [r7, #27]
 80080ce:	2b40      	cmp	r3, #64	; 0x40
 80080d0:	d107      	bne.n	80080e2 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080e0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80080e2:	6a3b      	ldr	r3, [r7, #32]
 80080e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00d      	beq.n	8008108 <HAL_I2C_ER_IRQHandler+0x11e>
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d008      	beq.n	8008108 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	f043 0308 	orr.w	r3, r3, #8
 80080fc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8008106:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8008108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810a:	2b00      	cmp	r3, #0
 800810c:	d008      	beq.n	8008120 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008114:	431a      	orrs	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f001 f89e 	bl	800925c <I2C_ITError>
  }
}
 8008120:	bf00      	nop
 8008122:	3728      	adds	r7, #40	; 0x28
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008144:	bf00      	nop
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008158:	bf00      	nop
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800816c:	bf00      	nop
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	460b      	mov	r3, r1
 8008182:	70fb      	strb	r3, [r7, #3]
 8008184:	4613      	mov	r3, r2
 8008186:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008188:	bf00      	nop
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80081ec:	bf00      	nop
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008206:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800820e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008214:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800821a:	2b00      	cmp	r3, #0
 800821c:	d150      	bne.n	80082c0 <I2C_MasterTransmit_TXE+0xc8>
 800821e:	7bfb      	ldrb	r3, [r7, #15]
 8008220:	2b21      	cmp	r3, #33	; 0x21
 8008222:	d14d      	bne.n	80082c0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	2b08      	cmp	r3, #8
 8008228:	d01d      	beq.n	8008266 <I2C_MasterTransmit_TXE+0x6e>
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	2b20      	cmp	r3, #32
 800822e:	d01a      	beq.n	8008266 <I2C_MasterTransmit_TXE+0x6e>
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008236:	d016      	beq.n	8008266 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	685a      	ldr	r2, [r3, #4]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008246:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2211      	movs	r2, #17
 800824c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2220      	movs	r2, #32
 800825a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f7ff ff62 	bl	8008128 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008264:	e060      	b.n	8008328 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	685a      	ldr	r2, [r3, #4]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008274:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008284:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2220      	movs	r2, #32
 8008290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800829a:	b2db      	uxtb	r3, r3
 800829c:	2b40      	cmp	r3, #64	; 0x40
 800829e:	d107      	bne.n	80082b0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f7ff ff7d 	bl	80081a8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80082ae:	e03b      	b.n	8008328 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f7ff ff35 	bl	8008128 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80082be:	e033      	b.n	8008328 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80082c0:	7bfb      	ldrb	r3, [r7, #15]
 80082c2:	2b21      	cmp	r3, #33	; 0x21
 80082c4:	d005      	beq.n	80082d2 <I2C_MasterTransmit_TXE+0xda>
 80082c6:	7bbb      	ldrb	r3, [r7, #14]
 80082c8:	2b40      	cmp	r3, #64	; 0x40
 80082ca:	d12d      	bne.n	8008328 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
 80082ce:	2b22      	cmp	r3, #34	; 0x22
 80082d0:	d12a      	bne.n	8008328 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d108      	bne.n	80082ee <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	685a      	ldr	r2, [r3, #4]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082ea:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80082ec:	e01c      	b.n	8008328 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	2b40      	cmp	r3, #64	; 0x40
 80082f8:	d103      	bne.n	8008302 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f88e 	bl	800841c <I2C_MemoryTransmit_TXE_BTF>
}
 8008300:	e012      	b.n	8008328 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008306:	781a      	ldrb	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008312:	1c5a      	adds	r2, r3, #1
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800831c:	b29b      	uxth	r3, r3
 800831e:	3b01      	subs	r3, #1
 8008320:	b29a      	uxth	r2, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008326:	e7ff      	b.n	8008328 <I2C_MasterTransmit_TXE+0x130>
 8008328:	bf00      	nop
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008344:	b2db      	uxtb	r3, r3
 8008346:	2b21      	cmp	r3, #33	; 0x21
 8008348:	d164      	bne.n	8008414 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800834e:	b29b      	uxth	r3, r3
 8008350:	2b00      	cmp	r3, #0
 8008352:	d012      	beq.n	800837a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008358:	781a      	ldrb	r2, [r3, #0]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008364:	1c5a      	adds	r2, r3, #1
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800836e:	b29b      	uxth	r3, r3
 8008370:	3b01      	subs	r3, #1
 8008372:	b29a      	uxth	r2, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8008378:	e04c      	b.n	8008414 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2b08      	cmp	r3, #8
 800837e:	d01d      	beq.n	80083bc <I2C_MasterTransmit_BTF+0x8c>
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2b20      	cmp	r3, #32
 8008384:	d01a      	beq.n	80083bc <I2C_MasterTransmit_BTF+0x8c>
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800838c:	d016      	beq.n	80083bc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	685a      	ldr	r2, [r3, #4]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800839c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2211      	movs	r2, #17
 80083a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2220      	movs	r2, #32
 80083b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f7ff feb7 	bl	8008128 <HAL_I2C_MasterTxCpltCallback>
}
 80083ba:	e02b      	b.n	8008414 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	685a      	ldr	r2, [r3, #4]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80083ca:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083da:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2220      	movs	r2, #32
 80083e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2b40      	cmp	r3, #64	; 0x40
 80083f4:	d107      	bne.n	8008406 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f7ff fed2 	bl	80081a8 <HAL_I2C_MemTxCpltCallback>
}
 8008404:	e006      	b.n	8008414 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f7ff fe8a 	bl	8008128 <HAL_I2C_MasterTxCpltCallback>
}
 8008414:	bf00      	nop
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800842a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008430:	2b00      	cmp	r3, #0
 8008432:	d11d      	bne.n	8008470 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008438:	2b01      	cmp	r3, #1
 800843a:	d10b      	bne.n	8008454 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008440:	b2da      	uxtb	r2, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800844c:	1c9a      	adds	r2, r3, #2
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8008452:	e073      	b.n	800853c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008458:	b29b      	uxth	r3, r3
 800845a:	121b      	asrs	r3, r3, #8
 800845c:	b2da      	uxtb	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008468:	1c5a      	adds	r2, r3, #1
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800846e:	e065      	b.n	800853c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008474:	2b01      	cmp	r3, #1
 8008476:	d10b      	bne.n	8008490 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800847c:	b2da      	uxtb	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008488:	1c5a      	adds	r2, r3, #1
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800848e:	e055      	b.n	800853c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008494:	2b02      	cmp	r3, #2
 8008496:	d151      	bne.n	800853c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8008498:	7bfb      	ldrb	r3, [r7, #15]
 800849a:	2b22      	cmp	r3, #34	; 0x22
 800849c:	d10d      	bne.n	80084ba <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084ac:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084b2:	1c5a      	adds	r2, r3, #1
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80084b8:	e040      	b.n	800853c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084be:	b29b      	uxth	r3, r3
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d015      	beq.n	80084f0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80084c4:	7bfb      	ldrb	r3, [r7, #15]
 80084c6:	2b21      	cmp	r3, #33	; 0x21
 80084c8:	d112      	bne.n	80084f0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ce:	781a      	ldrb	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084da:	1c5a      	adds	r2, r3, #1
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	3b01      	subs	r3, #1
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80084ee:	e025      	b.n	800853c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d120      	bne.n	800853c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
 80084fc:	2b21      	cmp	r3, #33	; 0x21
 80084fe:	d11d      	bne.n	800853c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	685a      	ldr	r2, [r3, #4]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800850e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800851e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2220      	movs	r2, #32
 800852a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7ff fe36 	bl	80081a8 <HAL_I2C_MemTxCpltCallback>
}
 800853c:	bf00      	nop
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008552:	b2db      	uxtb	r3, r3
 8008554:	2b22      	cmp	r3, #34	; 0x22
 8008556:	f040 80ac 	bne.w	80086b2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800855e:	b29b      	uxth	r3, r3
 8008560:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2b03      	cmp	r3, #3
 8008566:	d921      	bls.n	80085ac <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	691a      	ldr	r2, [r3, #16]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008572:	b2d2      	uxtb	r2, r2
 8008574:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857a:	1c5a      	adds	r2, r3, #1
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008584:	b29b      	uxth	r3, r3
 8008586:	3b01      	subs	r3, #1
 8008588:	b29a      	uxth	r2, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008592:	b29b      	uxth	r3, r3
 8008594:	2b03      	cmp	r3, #3
 8008596:	f040 808c 	bne.w	80086b2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	685a      	ldr	r2, [r3, #4]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085a8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80085aa:	e082      	b.n	80086b2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d075      	beq.n	80086a0 <I2C_MasterReceive_RXNE+0x15c>
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d002      	beq.n	80085c0 <I2C_MasterReceive_RXNE+0x7c>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d16f      	bne.n	80086a0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f001 f825 	bl	8009610 <I2C_WaitOnSTOPRequestThroughIT>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d142      	bne.n	8008652 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085da:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	685a      	ldr	r2, [r3, #4]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80085ea:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	691a      	ldr	r2, [r3, #16]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f6:	b2d2      	uxtb	r2, r2
 80085f8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fe:	1c5a      	adds	r2, r3, #1
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008608:	b29b      	uxth	r3, r3
 800860a:	3b01      	subs	r3, #1
 800860c:	b29a      	uxth	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2220      	movs	r2, #32
 8008616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008620:	b2db      	uxtb	r3, r3
 8008622:	2b40      	cmp	r3, #64	; 0x40
 8008624:	d10a      	bne.n	800863c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f7ff fdc1 	bl	80081bc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800863a:	e03a      	b.n	80086b2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2212      	movs	r2, #18
 8008648:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f7ff fd76 	bl	800813c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008650:	e02f      	b.n	80086b2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	685a      	ldr	r2, [r3, #4]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008660:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	691a      	ldr	r2, [r3, #16]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866c:	b2d2      	uxtb	r2, r2
 800866e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008674:	1c5a      	adds	r2, r3, #1
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800867e:	b29b      	uxth	r3, r3
 8008680:	3b01      	subs	r3, #1
 8008682:	b29a      	uxth	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2220      	movs	r2, #32
 800868c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f7ff fd99 	bl	80081d0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800869e:	e008      	b.n	80086b2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	685a      	ldr	r2, [r3, #4]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086ae:	605a      	str	r2, [r3, #4]
}
 80086b0:	e7ff      	b.n	80086b2 <I2C_MasterReceive_RXNE+0x16e>
 80086b2:	bf00      	nop
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b084      	sub	sp, #16
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	2b04      	cmp	r3, #4
 80086d0:	d11b      	bne.n	800870a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	685a      	ldr	r2, [r3, #4]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086e0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	691a      	ldr	r2, [r3, #16]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ec:	b2d2      	uxtb	r2, r2
 80086ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f4:	1c5a      	adds	r2, r3, #1
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086fe:	b29b      	uxth	r3, r3
 8008700:	3b01      	subs	r3, #1
 8008702:	b29a      	uxth	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8008708:	e0bd      	b.n	8008886 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800870e:	b29b      	uxth	r3, r3
 8008710:	2b03      	cmp	r3, #3
 8008712:	d129      	bne.n	8008768 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	685a      	ldr	r2, [r3, #4]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008722:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2b04      	cmp	r3, #4
 8008728:	d00a      	beq.n	8008740 <I2C_MasterReceive_BTF+0x86>
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2b02      	cmp	r3, #2
 800872e:	d007      	beq.n	8008740 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800873e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	691a      	ldr	r2, [r3, #16]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874a:	b2d2      	uxtb	r2, r2
 800874c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008752:	1c5a      	adds	r2, r3, #1
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800875c:	b29b      	uxth	r3, r3
 800875e:	3b01      	subs	r3, #1
 8008760:	b29a      	uxth	r2, r3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008766:	e08e      	b.n	8008886 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800876c:	b29b      	uxth	r3, r3
 800876e:	2b02      	cmp	r3, #2
 8008770:	d176      	bne.n	8008860 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d002      	beq.n	800877e <I2C_MasterReceive_BTF+0xc4>
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2b10      	cmp	r3, #16
 800877c:	d108      	bne.n	8008790 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800878c:	601a      	str	r2, [r3, #0]
 800878e:	e019      	b.n	80087c4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2b04      	cmp	r3, #4
 8008794:	d002      	beq.n	800879c <I2C_MasterReceive_BTF+0xe2>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2b02      	cmp	r3, #2
 800879a:	d108      	bne.n	80087ae <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80087aa:	601a      	str	r2, [r3, #0]
 80087ac:	e00a      	b.n	80087c4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2b10      	cmp	r3, #16
 80087b2:	d007      	beq.n	80087c4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087c2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	691a      	ldr	r2, [r3, #16]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ce:	b2d2      	uxtb	r2, r2
 80087d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d6:	1c5a      	adds	r2, r3, #1
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	3b01      	subs	r3, #1
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	691a      	ldr	r2, [r3, #16]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f4:	b2d2      	uxtb	r2, r2
 80087f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fc:	1c5a      	adds	r2, r3, #1
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008806:	b29b      	uxth	r3, r3
 8008808:	3b01      	subs	r3, #1
 800880a:	b29a      	uxth	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	685a      	ldr	r2, [r3, #4]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800881e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2220      	movs	r2, #32
 8008824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800882e:	b2db      	uxtb	r3, r3
 8008830:	2b40      	cmp	r3, #64	; 0x40
 8008832:	d10a      	bne.n	800884a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7ff fcba 	bl	80081bc <HAL_I2C_MemRxCpltCallback>
}
 8008848:	e01d      	b.n	8008886 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2212      	movs	r2, #18
 8008856:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f7ff fc6f 	bl	800813c <HAL_I2C_MasterRxCpltCallback>
}
 800885e:	e012      	b.n	8008886 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	691a      	ldr	r2, [r3, #16]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886a:	b2d2      	uxtb	r2, r2
 800886c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008872:	1c5a      	adds	r2, r3, #1
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800887c:	b29b      	uxth	r3, r3
 800887e:	3b01      	subs	r3, #1
 8008880:	b29a      	uxth	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008886:	bf00      	nop
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800888e:	b480      	push	{r7}
 8008890:	b083      	sub	sp, #12
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b40      	cmp	r3, #64	; 0x40
 80088a0:	d117      	bne.n	80088d2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d109      	bne.n	80088be <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	461a      	mov	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80088ba:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80088bc:	e067      	b.n	800898e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	f043 0301 	orr.w	r3, r3, #1
 80088c8:	b2da      	uxtb	r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	611a      	str	r2, [r3, #16]
}
 80088d0:	e05d      	b.n	800898e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088da:	d133      	bne.n	8008944 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	2b21      	cmp	r3, #33	; 0x21
 80088e6:	d109      	bne.n	80088fc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	461a      	mov	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80088f8:	611a      	str	r2, [r3, #16]
 80088fa:	e008      	b.n	800890e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008900:	b2db      	uxtb	r3, r3
 8008902:	f043 0301 	orr.w	r3, r3, #1
 8008906:	b2da      	uxtb	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008912:	2b00      	cmp	r3, #0
 8008914:	d004      	beq.n	8008920 <I2C_Master_SB+0x92>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800891a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800891c:	2b00      	cmp	r3, #0
 800891e:	d108      	bne.n	8008932 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008924:	2b00      	cmp	r3, #0
 8008926:	d032      	beq.n	800898e <I2C_Master_SB+0x100>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800892e:	2b00      	cmp	r3, #0
 8008930:	d02d      	beq.n	800898e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	685a      	ldr	r2, [r3, #4]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008940:	605a      	str	r2, [r3, #4]
}
 8008942:	e024      	b.n	800898e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008948:	2b00      	cmp	r3, #0
 800894a:	d10e      	bne.n	800896a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008950:	b29b      	uxth	r3, r3
 8008952:	11db      	asrs	r3, r3, #7
 8008954:	b2db      	uxtb	r3, r3
 8008956:	f003 0306 	and.w	r3, r3, #6
 800895a:	b2db      	uxtb	r3, r3
 800895c:	f063 030f 	orn	r3, r3, #15
 8008960:	b2da      	uxtb	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	611a      	str	r2, [r3, #16]
}
 8008968:	e011      	b.n	800898e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800896e:	2b01      	cmp	r3, #1
 8008970:	d10d      	bne.n	800898e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008976:	b29b      	uxth	r3, r3
 8008978:	11db      	asrs	r3, r3, #7
 800897a:	b2db      	uxtb	r3, r3
 800897c:	f003 0306 	and.w	r3, r3, #6
 8008980:	b2db      	uxtb	r3, r3
 8008982:	f063 030e 	orn	r3, r3, #14
 8008986:	b2da      	uxtb	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	611a      	str	r2, [r3, #16]
}
 800898e:	bf00      	nop
 8008990:	370c      	adds	r7, #12
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr

0800899a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800899a:	b480      	push	{r7}
 800899c:	b083      	sub	sp, #12
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a6:	b2da      	uxtb	r2, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d004      	beq.n	80089c0 <I2C_Master_ADD10+0x26>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d108      	bne.n	80089d2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d00c      	beq.n	80089e2 <I2C_Master_ADD10+0x48>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d007      	beq.n	80089e2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	685a      	ldr	r2, [r3, #4]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089e0:	605a      	str	r2, [r3, #4]
  }
}
 80089e2:	bf00      	nop
 80089e4:	370c      	adds	r7, #12
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80089ee:	b480      	push	{r7}
 80089f0:	b091      	sub	sp, #68	; 0x44
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a04:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a0a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	2b22      	cmp	r3, #34	; 0x22
 8008a16:	f040 8169 	bne.w	8008cec <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d10f      	bne.n	8008a42 <I2C_Master_ADDR+0x54>
 8008a22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a26:	2b40      	cmp	r3, #64	; 0x40
 8008a28:	d10b      	bne.n	8008a42 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	633b      	str	r3, [r7, #48]	; 0x30
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	695b      	ldr	r3, [r3, #20]
 8008a34:	633b      	str	r3, [r7, #48]	; 0x30
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	699b      	ldr	r3, [r3, #24]
 8008a3c:	633b      	str	r3, [r7, #48]	; 0x30
 8008a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a40:	e160      	b.n	8008d04 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d11d      	bne.n	8008a86 <I2C_Master_ADDR+0x98>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008a52:	d118      	bne.n	8008a86 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a54:	2300      	movs	r3, #0
 8008a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	695b      	ldr	r3, [r3, #20]
 8008a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a78:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a7e:	1c5a      	adds	r2, r3, #1
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	651a      	str	r2, [r3, #80]	; 0x50
 8008a84:	e13e      	b.n	8008d04 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d113      	bne.n	8008ab8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a90:	2300      	movs	r3, #0
 8008a92:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	695b      	ldr	r3, [r3, #20]
 8008a9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	699b      	ldr	r3, [r3, #24]
 8008aa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8008aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ab4:	601a      	str	r2, [r3, #0]
 8008ab6:	e115      	b.n	8008ce4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	f040 808a 	bne.w	8008bd8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008aca:	d137      	bne.n	8008b3c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ada:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ae6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008aea:	d113      	bne.n	8008b14 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008afa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008afc:	2300      	movs	r3, #0
 8008afe:	627b      	str	r3, [r7, #36]	; 0x24
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	627b      	str	r3, [r7, #36]	; 0x24
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	699b      	ldr	r3, [r3, #24]
 8008b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8008b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b12:	e0e7      	b.n	8008ce4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b14:	2300      	movs	r3, #0
 8008b16:	623b      	str	r3, [r7, #32]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	695b      	ldr	r3, [r3, #20]
 8008b1e:	623b      	str	r3, [r7, #32]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	623b      	str	r3, [r7, #32]
 8008b28:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b38:	601a      	str	r2, [r3, #0]
 8008b3a:	e0d3      	b.n	8008ce4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3e:	2b08      	cmp	r3, #8
 8008b40:	d02e      	beq.n	8008ba0 <I2C_Master_ADDR+0x1b2>
 8008b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b44:	2b20      	cmp	r3, #32
 8008b46:	d02b      	beq.n	8008ba0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b4a:	2b12      	cmp	r3, #18
 8008b4c:	d102      	bne.n	8008b54 <I2C_Master_ADDR+0x166>
 8008b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d125      	bne.n	8008ba0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b56:	2b04      	cmp	r3, #4
 8008b58:	d00e      	beq.n	8008b78 <I2C_Master_ADDR+0x18a>
 8008b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d00b      	beq.n	8008b78 <I2C_Master_ADDR+0x18a>
 8008b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b62:	2b10      	cmp	r3, #16
 8008b64:	d008      	beq.n	8008b78 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b74:	601a      	str	r2, [r3, #0]
 8008b76:	e007      	b.n	8008b88 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b86:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b88:	2300      	movs	r3, #0
 8008b8a:	61fb      	str	r3, [r7, #28]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	695b      	ldr	r3, [r3, #20]
 8008b92:	61fb      	str	r3, [r7, #28]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	61fb      	str	r3, [r7, #28]
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	e0a1      	b.n	8008ce4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bae:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	61bb      	str	r3, [r7, #24]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	695b      	ldr	r3, [r3, #20]
 8008bba:	61bb      	str	r3, [r7, #24]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	61bb      	str	r3, [r7, #24]
 8008bc4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bd4:	601a      	str	r2, [r3, #0]
 8008bd6:	e085      	b.n	8008ce4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	d14d      	bne.n	8008c7e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be4:	2b04      	cmp	r3, #4
 8008be6:	d016      	beq.n	8008c16 <I2C_Master_ADDR+0x228>
 8008be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d013      	beq.n	8008c16 <I2C_Master_ADDR+0x228>
 8008bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf0:	2b10      	cmp	r3, #16
 8008bf2:	d010      	beq.n	8008c16 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c02:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c12:	601a      	str	r2, [r3, #0]
 8008c14:	e007      	b.n	8008c26 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c24:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c34:	d117      	bne.n	8008c66 <I2C_Master_ADDR+0x278>
 8008c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008c3c:	d00b      	beq.n	8008c56 <I2C_Master_ADDR+0x268>
 8008c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d008      	beq.n	8008c56 <I2C_Master_ADDR+0x268>
 8008c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c46:	2b08      	cmp	r3, #8
 8008c48:	d005      	beq.n	8008c56 <I2C_Master_ADDR+0x268>
 8008c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4c:	2b10      	cmp	r3, #16
 8008c4e:	d002      	beq.n	8008c56 <I2C_Master_ADDR+0x268>
 8008c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c52:	2b20      	cmp	r3, #32
 8008c54:	d107      	bne.n	8008c66 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	685a      	ldr	r2, [r3, #4]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c64:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c66:	2300      	movs	r3, #0
 8008c68:	617b      	str	r3, [r7, #20]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	695b      	ldr	r3, [r3, #20]
 8008c70:	617b      	str	r3, [r7, #20]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	617b      	str	r3, [r7, #20]
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	e032      	b.n	8008ce4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c8c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c9c:	d117      	bne.n	8008cce <I2C_Master_ADDR+0x2e0>
 8008c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008ca4:	d00b      	beq.n	8008cbe <I2C_Master_ADDR+0x2d0>
 8008ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d008      	beq.n	8008cbe <I2C_Master_ADDR+0x2d0>
 8008cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cae:	2b08      	cmp	r3, #8
 8008cb0:	d005      	beq.n	8008cbe <I2C_Master_ADDR+0x2d0>
 8008cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb4:	2b10      	cmp	r3, #16
 8008cb6:	d002      	beq.n	8008cbe <I2C_Master_ADDR+0x2d0>
 8008cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cba:	2b20      	cmp	r3, #32
 8008cbc:	d107      	bne.n	8008cce <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	685a      	ldr	r2, [r3, #4]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ccc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cce:	2300      	movs	r3, #0
 8008cd0:	613b      	str	r3, [r7, #16]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	695b      	ldr	r3, [r3, #20]
 8008cd8:	613b      	str	r3, [r7, #16]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	699b      	ldr	r3, [r3, #24]
 8008ce0:	613b      	str	r3, [r7, #16]
 8008ce2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008cea:	e00b      	b.n	8008d04 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cec:	2300      	movs	r3, #0
 8008cee:	60fb      	str	r3, [r7, #12]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	695b      	ldr	r3, [r3, #20]
 8008cf6:	60fb      	str	r3, [r7, #12]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	699b      	ldr	r3, [r3, #24]
 8008cfe:	60fb      	str	r3, [r7, #12]
 8008d00:	68fb      	ldr	r3, [r7, #12]
}
 8008d02:	e7ff      	b.n	8008d04 <I2C_Master_ADDR+0x316>
 8008d04:	bf00      	nop
 8008d06:	3744      	adds	r7, #68	; 0x44
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d1e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d02b      	beq.n	8008d82 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2e:	781a      	ldrb	r2, [r3, #0]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3a:	1c5a      	adds	r2, r3, #1
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	3b01      	subs	r3, #1
 8008d48:	b29a      	uxth	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d114      	bne.n	8008d82 <I2C_SlaveTransmit_TXE+0x72>
 8008d58:	7bfb      	ldrb	r3, [r7, #15]
 8008d5a:	2b29      	cmp	r3, #41	; 0x29
 8008d5c:	d111      	bne.n	8008d82 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	685a      	ldr	r2, [r3, #4]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d6c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2221      	movs	r2, #33	; 0x21
 8008d72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2228      	movs	r2, #40	; 0x28
 8008d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f7ff f9e7 	bl	8008150 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008d82:	bf00      	nop
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008d8a:	b480      	push	{r7}
 8008d8c:	b083      	sub	sp, #12
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d011      	beq.n	8008dc0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da0:	781a      	ldrb	r2, [r3, #0]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dac:	1c5a      	adds	r2, r3, #1
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	3b01      	subs	r3, #1
 8008dba:	b29a      	uxth	r2, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008dc0:	bf00      	nop
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dda:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d02c      	beq.n	8008e40 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	691a      	ldr	r2, [r3, #16]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df0:	b2d2      	uxtb	r2, r2
 8008df2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df8:	1c5a      	adds	r2, r3, #1
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	3b01      	subs	r3, #1
 8008e06:	b29a      	uxth	r2, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d114      	bne.n	8008e40 <I2C_SlaveReceive_RXNE+0x74>
 8008e16:	7bfb      	ldrb	r3, [r7, #15]
 8008e18:	2b2a      	cmp	r3, #42	; 0x2a
 8008e1a:	d111      	bne.n	8008e40 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	685a      	ldr	r2, [r3, #4]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e2a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2222      	movs	r2, #34	; 0x22
 8008e30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2228      	movs	r2, #40	; 0x28
 8008e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f7ff f992 	bl	8008164 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008e40:	bf00      	nop
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d012      	beq.n	8008e80 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	691a      	ldr	r2, [r3, #16]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e64:	b2d2      	uxtb	r2, r2
 8008e66:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6c:	1c5a      	adds	r2, r3, #1
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008e80:	bf00      	nop
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008e96:	2300      	movs	r3, #0
 8008e98:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008ea6:	2b28      	cmp	r3, #40	; 0x28
 8008ea8:	d125      	bne.n	8008ef6 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	685a      	ldr	r2, [r3, #4]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008eb8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	f003 0304 	and.w	r3, r3, #4
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d101      	bne.n	8008ec8 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d103      	bne.n	8008eda <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	81bb      	strh	r3, [r7, #12]
 8008ed8:	e002      	b.n	8008ee0 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	699b      	ldr	r3, [r3, #24]
 8008ede:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008ee8:	89ba      	ldrh	r2, [r7, #12]
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
 8008eec:	4619      	mov	r1, r3
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f7ff f942 	bl	8008178 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008ef4:	e00e      	b.n	8008f14 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	60bb      	str	r3, [r7, #8]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	60bb      	str	r3, [r7, #8]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	699b      	ldr	r3, [r3, #24]
 8008f08:	60bb      	str	r3, [r7, #8]
 8008f0a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008f14:	bf00      	nop
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f2a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	685a      	ldr	r2, [r3, #4]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008f3a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	60bb      	str	r3, [r7, #8]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	695b      	ldr	r3, [r3, #20]
 8008f46:	60bb      	str	r3, [r7, #8]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f042 0201 	orr.w	r2, r2, #1
 8008f56:	601a      	str	r2, [r3, #0]
 8008f58:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f68:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f78:	d172      	bne.n	8009060 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
 8008f7c:	2b22      	cmp	r3, #34	; 0x22
 8008f7e:	d002      	beq.n	8008f86 <I2C_Slave_STOPF+0x6a>
 8008f80:	7bfb      	ldrb	r3, [r7, #15]
 8008f82:	2b2a      	cmp	r3, #42	; 0x2a
 8008f84:	d135      	bne.n	8008ff2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	b29a      	uxth	r2, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d005      	beq.n	8008faa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa2:	f043 0204 	orr.w	r2, r3, #4
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	685a      	ldr	r2, [r3, #4]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008fb8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7fe fabc 	bl	800753c <HAL_DMA_GetState>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d049      	beq.n	800905e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fce:	4a69      	ldr	r2, [pc, #420]	; (8009174 <I2C_Slave_STOPF+0x258>)
 8008fd0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fe f904 	bl	80071e4 <HAL_DMA_Abort_IT>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d03d      	beq.n	800905e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008fec:	4610      	mov	r0, r2
 8008fee:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008ff0:	e035      	b.n	800905e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009004:	b29b      	uxth	r3, r3
 8009006:	2b00      	cmp	r3, #0
 8009008:	d005      	beq.n	8009016 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800900e:	f043 0204 	orr.w	r2, r3, #4
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009024:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800902a:	4618      	mov	r0, r3
 800902c:	f7fe fa86 	bl	800753c <HAL_DMA_GetState>
 8009030:	4603      	mov	r3, r0
 8009032:	2b01      	cmp	r3, #1
 8009034:	d014      	beq.n	8009060 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800903a:	4a4e      	ldr	r2, [pc, #312]	; (8009174 <I2C_Slave_STOPF+0x258>)
 800903c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009042:	4618      	mov	r0, r3
 8009044:	f7fe f8ce 	bl	80071e4 <HAL_DMA_Abort_IT>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d008      	beq.n	8009060 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009058:	4610      	mov	r0, r2
 800905a:	4798      	blx	r3
 800905c:	e000      	b.n	8009060 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800905e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009064:	b29b      	uxth	r3, r3
 8009066:	2b00      	cmp	r3, #0
 8009068:	d03e      	beq.n	80090e8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	695b      	ldr	r3, [r3, #20]
 8009070:	f003 0304 	and.w	r3, r3, #4
 8009074:	2b04      	cmp	r3, #4
 8009076:	d112      	bne.n	800909e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	691a      	ldr	r2, [r3, #16]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009082:	b2d2      	uxtb	r2, r2
 8009084:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908a:	1c5a      	adds	r2, r3, #1
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009094:	b29b      	uxth	r3, r3
 8009096:	3b01      	subs	r3, #1
 8009098:	b29a      	uxth	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	695b      	ldr	r3, [r3, #20]
 80090a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a8:	2b40      	cmp	r3, #64	; 0x40
 80090aa:	d112      	bne.n	80090d2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	691a      	ldr	r2, [r3, #16]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b6:	b2d2      	uxtb	r2, r2
 80090b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090be:	1c5a      	adds	r2, r3, #1
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	3b01      	subs	r3, #1
 80090cc:	b29a      	uxth	r2, r3
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d005      	beq.n	80090e8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e0:	f043 0204 	orr.w	r2, r3, #4
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d003      	beq.n	80090f8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f8b3 	bl	800925c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80090f6:	e039      	b.n	800916c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80090f8:	7bfb      	ldrb	r3, [r7, #15]
 80090fa:	2b2a      	cmp	r3, #42	; 0x2a
 80090fc:	d109      	bne.n	8009112 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2228      	movs	r2, #40	; 0x28
 8009108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f7ff f829 	bl	8008164 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009118:	b2db      	uxtb	r3, r3
 800911a:	2b28      	cmp	r3, #40	; 0x28
 800911c:	d111      	bne.n	8009142 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a15      	ldr	r2, [pc, #84]	; (8009178 <I2C_Slave_STOPF+0x25c>)
 8009122:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2220      	movs	r2, #32
 800912e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f7ff f82a 	bl	8008194 <HAL_I2C_ListenCpltCallback>
}
 8009140:	e014      	b.n	800916c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009146:	2b22      	cmp	r3, #34	; 0x22
 8009148:	d002      	beq.n	8009150 <I2C_Slave_STOPF+0x234>
 800914a:	7bfb      	ldrb	r3, [r7, #15]
 800914c:	2b22      	cmp	r3, #34	; 0x22
 800914e:	d10d      	bne.n	800916c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2220      	movs	r2, #32
 800915a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f7fe fffc 	bl	8008164 <HAL_I2C_SlaveRxCpltCallback>
}
 800916c:	bf00      	nop
 800916e:	3710      	adds	r7, #16
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	080094c1 	.word	0x080094c1
 8009178:	ffff0000 	.word	0xffff0000

0800917c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800918a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009190:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	2b08      	cmp	r3, #8
 8009196:	d002      	beq.n	800919e <I2C_Slave_AF+0x22>
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	2b20      	cmp	r3, #32
 800919c:	d129      	bne.n	80091f2 <I2C_Slave_AF+0x76>
 800919e:	7bfb      	ldrb	r3, [r7, #15]
 80091a0:	2b28      	cmp	r3, #40	; 0x28
 80091a2:	d126      	bne.n	80091f2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4a2c      	ldr	r2, [pc, #176]	; (8009258 <I2C_Slave_AF+0xdc>)
 80091a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	685a      	ldr	r2, [r3, #4]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80091b8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80091c2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091d2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2220      	movs	r2, #32
 80091de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f7fe ffd2 	bl	8008194 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80091f0:	e02e      	b.n	8009250 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80091f2:	7bfb      	ldrb	r3, [r7, #15]
 80091f4:	2b21      	cmp	r3, #33	; 0x21
 80091f6:	d126      	bne.n	8009246 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a17      	ldr	r2, [pc, #92]	; (8009258 <I2C_Slave_AF+0xdc>)
 80091fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2221      	movs	r2, #33	; 0x21
 8009202:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2220      	movs	r2, #32
 8009208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	685a      	ldr	r2, [r3, #4]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009222:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800922c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800923c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f7fe ff86 	bl	8008150 <HAL_I2C_SlaveTxCpltCallback>
}
 8009244:	e004      	b.n	8009250 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800924e:	615a      	str	r2, [r3, #20]
}
 8009250:	bf00      	nop
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	ffff0000 	.word	0xffff0000

0800925c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800926a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009272:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009274:	7bbb      	ldrb	r3, [r7, #14]
 8009276:	2b10      	cmp	r3, #16
 8009278:	d002      	beq.n	8009280 <I2C_ITError+0x24>
 800927a:	7bbb      	ldrb	r3, [r7, #14]
 800927c:	2b40      	cmp	r3, #64	; 0x40
 800927e:	d10a      	bne.n	8009296 <I2C_ITError+0x3a>
 8009280:	7bfb      	ldrb	r3, [r7, #15]
 8009282:	2b22      	cmp	r3, #34	; 0x22
 8009284:	d107      	bne.n	8009296 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009294:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009296:	7bfb      	ldrb	r3, [r7, #15]
 8009298:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800929c:	2b28      	cmp	r3, #40	; 0x28
 800929e:	d107      	bne.n	80092b0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2228      	movs	r2, #40	; 0x28
 80092aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80092ae:	e015      	b.n	80092dc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092be:	d00a      	beq.n	80092d6 <I2C_ITError+0x7a>
 80092c0:	7bfb      	ldrb	r3, [r7, #15]
 80092c2:	2b60      	cmp	r3, #96	; 0x60
 80092c4:	d007      	beq.n	80092d6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2220      	movs	r2, #32
 80092ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092ea:	d162      	bne.n	80093b2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	685a      	ldr	r2, [r3, #4]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80092fa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009300:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009304:	b2db      	uxtb	r3, r3
 8009306:	2b01      	cmp	r3, #1
 8009308:	d020      	beq.n	800934c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800930e:	4a6a      	ldr	r2, [pc, #424]	; (80094b8 <I2C_ITError+0x25c>)
 8009310:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009316:	4618      	mov	r0, r3
 8009318:	f7fd ff64 	bl	80071e4 <HAL_DMA_Abort_IT>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	f000 8089 	beq.w	8009436 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f022 0201 	bic.w	r2, r2, #1
 8009332:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2220      	movs	r2, #32
 8009338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009346:	4610      	mov	r0, r2
 8009348:	4798      	blx	r3
 800934a:	e074      	b.n	8009436 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009350:	4a59      	ldr	r2, [pc, #356]	; (80094b8 <I2C_ITError+0x25c>)
 8009352:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009358:	4618      	mov	r0, r3
 800935a:	f7fd ff43 	bl	80071e4 <HAL_DMA_Abort_IT>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d068      	beq.n	8009436 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	695b      	ldr	r3, [r3, #20]
 800936a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800936e:	2b40      	cmp	r3, #64	; 0x40
 8009370:	d10b      	bne.n	800938a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	691a      	ldr	r2, [r3, #16]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937c:	b2d2      	uxtb	r2, r2
 800937e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009384:	1c5a      	adds	r2, r3, #1
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f022 0201 	bic.w	r2, r2, #1
 8009398:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2220      	movs	r2, #32
 800939e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80093ac:	4610      	mov	r0, r2
 80093ae:	4798      	blx	r3
 80093b0:	e041      	b.n	8009436 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	2b60      	cmp	r3, #96	; 0x60
 80093bc:	d125      	bne.n	800940a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2220      	movs	r2, #32
 80093c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	695b      	ldr	r3, [r3, #20]
 80093d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093d6:	2b40      	cmp	r3, #64	; 0x40
 80093d8:	d10b      	bne.n	80093f2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	691a      	ldr	r2, [r3, #16]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e4:	b2d2      	uxtb	r2, r2
 80093e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ec:	1c5a      	adds	r2, r3, #1
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f022 0201 	bic.w	r2, r2, #1
 8009400:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f7fe feee 	bl	80081e4 <HAL_I2C_AbortCpltCallback>
 8009408:	e015      	b.n	8009436 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	695b      	ldr	r3, [r3, #20]
 8009410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009414:	2b40      	cmp	r3, #64	; 0x40
 8009416:	d10b      	bne.n	8009430 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	691a      	ldr	r2, [r3, #16]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009422:	b2d2      	uxtb	r2, r2
 8009424:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942a:	1c5a      	adds	r2, r3, #1
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f7fe fecd 	bl	80081d0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800943a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	f003 0301 	and.w	r3, r3, #1
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10e      	bne.n	8009464 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800944c:	2b00      	cmp	r3, #0
 800944e:	d109      	bne.n	8009464 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009456:	2b00      	cmp	r3, #0
 8009458:	d104      	bne.n	8009464 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009460:	2b00      	cmp	r3, #0
 8009462:	d007      	beq.n	8009474 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	685a      	ldr	r2, [r3, #4]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009472:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800947a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009480:	f003 0304 	and.w	r3, r3, #4
 8009484:	2b04      	cmp	r3, #4
 8009486:	d113      	bne.n	80094b0 <I2C_ITError+0x254>
 8009488:	7bfb      	ldrb	r3, [r7, #15]
 800948a:	2b28      	cmp	r3, #40	; 0x28
 800948c:	d110      	bne.n	80094b0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	4a0a      	ldr	r2, [pc, #40]	; (80094bc <I2C_ITError+0x260>)
 8009492:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2220      	movs	r2, #32
 800949e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f7fe fe72 	bl	8008194 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80094b0:	bf00      	nop
 80094b2:	3710      	adds	r7, #16
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	080094c1 	.word	0x080094c1
 80094bc:	ffff0000 	.word	0xffff0000

080094c0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b086      	sub	sp, #24
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094c8:	2300      	movs	r3, #0
 80094ca:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094d8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80094da:	4b4b      	ldr	r3, [pc, #300]	; (8009608 <I2C_DMAAbort+0x148>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	08db      	lsrs	r3, r3, #3
 80094e0:	4a4a      	ldr	r2, [pc, #296]	; (800960c <I2C_DMAAbort+0x14c>)
 80094e2:	fba2 2303 	umull	r2, r3, r2, r3
 80094e6:	0a1a      	lsrs	r2, r3, #8
 80094e8:	4613      	mov	r3, r2
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	4413      	add	r3, r2
 80094ee:	00da      	lsls	r2, r3, #3
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d106      	bne.n	8009508 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094fe:	f043 0220 	orr.w	r2, r3, #32
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8009506:	e00a      	b.n	800951e <I2C_DMAAbort+0x5e>
    }
    count--;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	3b01      	subs	r3, #1
 800950c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800951c:	d0ea      	beq.n	80094f4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009522:	2b00      	cmp	r3, #0
 8009524:	d003      	beq.n	800952e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800952a:	2200      	movs	r2, #0
 800952c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009532:	2b00      	cmp	r3, #0
 8009534:	d003      	beq.n	800953e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953a:	2200      	movs	r2, #0
 800953c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800954c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	2200      	movs	r2, #0
 8009552:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009558:	2b00      	cmp	r3, #0
 800955a:	d003      	beq.n	8009564 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009560:	2200      	movs	r2, #0
 8009562:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009568:	2b00      	cmp	r3, #0
 800956a:	d003      	beq.n	8009574 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009570:	2200      	movs	r2, #0
 8009572:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f022 0201 	bic.w	r2, r2, #1
 8009582:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800958a:	b2db      	uxtb	r3, r3
 800958c:	2b60      	cmp	r3, #96	; 0x60
 800958e:	d10e      	bne.n	80095ae <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	2220      	movs	r2, #32
 8009594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	2200      	movs	r2, #0
 800959c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	2200      	movs	r2, #0
 80095a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80095a6:	6978      	ldr	r0, [r7, #20]
 80095a8:	f7fe fe1c 	bl	80081e4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80095ac:	e027      	b.n	80095fe <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80095ae:	7cfb      	ldrb	r3, [r7, #19]
 80095b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80095b4:	2b28      	cmp	r3, #40	; 0x28
 80095b6:	d117      	bne.n	80095e8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f042 0201 	orr.w	r2, r2, #1
 80095c6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80095d6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	2200      	movs	r2, #0
 80095dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	2228      	movs	r2, #40	; 0x28
 80095e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80095e6:	e007      	b.n	80095f8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	2220      	movs	r2, #32
 80095ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80095f8:	6978      	ldr	r0, [r7, #20]
 80095fa:	f7fe fde9 	bl	80081d0 <HAL_I2C_ErrorCallback>
}
 80095fe:	bf00      	nop
 8009600:	3718      	adds	r7, #24
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	20000004 	.word	0x20000004
 800960c:	14f8b589 	.word	0x14f8b589

08009610 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8009610:	b480      	push	{r7}
 8009612:	b085      	sub	sp, #20
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009618:	2300      	movs	r3, #0
 800961a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800961c:	4b13      	ldr	r3, [pc, #76]	; (800966c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	08db      	lsrs	r3, r3, #3
 8009622:	4a13      	ldr	r2, [pc, #76]	; (8009670 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8009624:	fba2 2303 	umull	r2, r3, r2, r3
 8009628:	0a1a      	lsrs	r2, r3, #8
 800962a:	4613      	mov	r3, r2
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	4413      	add	r3, r2
 8009630:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	3b01      	subs	r3, #1
 8009636:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d107      	bne.n	800964e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009642:	f043 0220 	orr.w	r2, r3, #32
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	e008      	b.n	8009660 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800965c:	d0e9      	beq.n	8009632 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3714      	adds	r7, #20
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr
 800966c:	20000004 	.word	0x20000004
 8009670:	14f8b589 	.word	0x14f8b589

08009674 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009680:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009684:	d103      	bne.n	800968e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2201      	movs	r2, #1
 800968a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800968c:	e007      	b.n	800969e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009692:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009696:	d102      	bne.n	800969e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2208      	movs	r2, #8
 800969c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800969e:	bf00      	nop
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
	...

080096ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b086      	sub	sp, #24
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d101      	bne.n	80096be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e267      	b.n	8009b8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f003 0301 	and.w	r3, r3, #1
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d075      	beq.n	80097b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80096ca:	4b88      	ldr	r3, [pc, #544]	; (80098ec <HAL_RCC_OscConfig+0x240>)
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	f003 030c 	and.w	r3, r3, #12
 80096d2:	2b04      	cmp	r3, #4
 80096d4:	d00c      	beq.n	80096f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80096d6:	4b85      	ldr	r3, [pc, #532]	; (80098ec <HAL_RCC_OscConfig+0x240>)
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80096de:	2b08      	cmp	r3, #8
 80096e0:	d112      	bne.n	8009708 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80096e2:	4b82      	ldr	r3, [pc, #520]	; (80098ec <HAL_RCC_OscConfig+0x240>)
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096ee:	d10b      	bne.n	8009708 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096f0:	4b7e      	ldr	r3, [pc, #504]	; (80098ec <HAL_RCC_OscConfig+0x240>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d05b      	beq.n	80097b4 <HAL_RCC_OscConfig+0x108>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d157      	bne.n	80097b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009704:	2301      	movs	r3, #1
 8009706:	e242      	b.n	8009b8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009710:	d106      	bne.n	8009720 <HAL_RCC_OscConfig+0x74>
 8009712:	4b76      	ldr	r3, [pc, #472]	; (80098ec <HAL_RCC_OscConfig+0x240>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a75      	ldr	r2, [pc, #468]	; (80098ec <HAL_RCC_OscConfig+0x240>)
 8009718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800971c:	6013      	str	r3, [r2, #0]
 800971e:	e01d      	b.n	800975c <HAL_RCC_OscConfig+0xb0>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009728:	d10c      	bne.n	8009744 <HAL_RCC_OscConfig+0x98>
 800972a:	4b70      	ldr	r3, [pc, #448]	; (80098ec <HAL_RCC_OscConfig+0x240>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a6f      	ldr	r2, [pc, #444]	; (80098ec <HAL_RCC_OscConfig+0x240>)
 8009730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009734:	6013      	str	r3, [r2, #0]
 8009736:	4b6d      	ldr	r3, [pc, #436]	; (80098ec <HAL_RCC_OscConfig+0x240>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a6c      	ldr	r2, [pc, #432]	; (80098ec <HAL_RCC_OscConfig+0x240>)
 800973c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009740:	6013      	str	r3, [r2, #0]
 8009742:	e00b      	b.n	800975c <HAL_RCC_OscConfig+0xb0>
 8009744:	4b69      	ldr	r3, [pc, #420]	; (80098ec <HAL_RCC_OscConfig+0x240>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a68      	ldr	r2, [pc, #416]	; (80098ec <HAL_RCC_OscConfig+0x240>)
 800974a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800974e:	6013      	str	r3, [r2, #0]
 8009750:	4b66      	ldr	r3, [pc, #408]	; (80098ec <HAL_RCC_OscConfig+0x240>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a65      	ldr	r2, [pc, #404]	; (80098ec <HAL_RCC_OscConfig+0x240>)
 8009756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800975a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d013      	beq.n	800978c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009764:	f7fc fed0 	bl	8006508 <HAL_GetTick>
 8009768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800976a:	e008      	b.n	800977e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800976c:	f7fc fecc 	bl	8006508 <HAL_GetTick>
 8009770:	4602      	mov	r2, r0
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	1ad3      	subs	r3, r2, r3
 8009776:	2b64      	cmp	r3, #100	; 0x64
 8009778:	d901      	bls.n	800977e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800977a:	2303      	movs	r3, #3
 800977c:	e207      	b.n	8009b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800977e:	4b5b      	ldr	r3, [pc, #364]	; (80098ec <HAL_RCC_OscConfig+0x240>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009786:	2b00      	cmp	r3, #0
 8009788:	d0f0      	beq.n	800976c <HAL_RCC_OscConfig+0xc0>
 800978a:	e014      	b.n	80097b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800978c:	f7fc febc 	bl	8006508 <HAL_GetTick>
 8009790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009792:	e008      	b.n	80097a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009794:	f7fc feb8 	bl	8006508 <HAL_GetTick>
 8009798:	4602      	mov	r2, r0
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	1ad3      	subs	r3, r2, r3
 800979e:	2b64      	cmp	r3, #100	; 0x64
 80097a0:	d901      	bls.n	80097a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80097a2:	2303      	movs	r3, #3
 80097a4:	e1f3      	b.n	8009b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80097a6:	4b51      	ldr	r3, [pc, #324]	; (80098ec <HAL_RCC_OscConfig+0x240>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d1f0      	bne.n	8009794 <HAL_RCC_OscConfig+0xe8>
 80097b2:	e000      	b.n	80097b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f003 0302 	and.w	r3, r3, #2
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d063      	beq.n	800988a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80097c2:	4b4a      	ldr	r3, [pc, #296]	; (80098ec <HAL_RCC_OscConfig+0x240>)
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	f003 030c 	and.w	r3, r3, #12
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00b      	beq.n	80097e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80097ce:	4b47      	ldr	r3, [pc, #284]	; (80098ec <HAL_RCC_OscConfig+0x240>)
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80097d6:	2b08      	cmp	r3, #8
 80097d8:	d11c      	bne.n	8009814 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80097da:	4b44      	ldr	r3, [pc, #272]	; (80098ec <HAL_RCC_OscConfig+0x240>)
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d116      	bne.n	8009814 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80097e6:	4b41      	ldr	r3, [pc, #260]	; (80098ec <HAL_RCC_OscConfig+0x240>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f003 0302 	and.w	r3, r3, #2
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d005      	beq.n	80097fe <HAL_RCC_OscConfig+0x152>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d001      	beq.n	80097fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	e1c7      	b.n	8009b8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097fe:	4b3b      	ldr	r3, [pc, #236]	; (80098ec <HAL_RCC_OscConfig+0x240>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	00db      	lsls	r3, r3, #3
 800980c:	4937      	ldr	r1, [pc, #220]	; (80098ec <HAL_RCC_OscConfig+0x240>)
 800980e:	4313      	orrs	r3, r2
 8009810:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009812:	e03a      	b.n	800988a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d020      	beq.n	800985e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800981c:	4b34      	ldr	r3, [pc, #208]	; (80098f0 <HAL_RCC_OscConfig+0x244>)
 800981e:	2201      	movs	r2, #1
 8009820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009822:	f7fc fe71 	bl	8006508 <HAL_GetTick>
 8009826:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009828:	e008      	b.n	800983c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800982a:	f7fc fe6d 	bl	8006508 <HAL_GetTick>
 800982e:	4602      	mov	r2, r0
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	1ad3      	subs	r3, r2, r3
 8009834:	2b02      	cmp	r3, #2
 8009836:	d901      	bls.n	800983c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009838:	2303      	movs	r3, #3
 800983a:	e1a8      	b.n	8009b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800983c:	4b2b      	ldr	r3, [pc, #172]	; (80098ec <HAL_RCC_OscConfig+0x240>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f003 0302 	and.w	r3, r3, #2
 8009844:	2b00      	cmp	r3, #0
 8009846:	d0f0      	beq.n	800982a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009848:	4b28      	ldr	r3, [pc, #160]	; (80098ec <HAL_RCC_OscConfig+0x240>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	00db      	lsls	r3, r3, #3
 8009856:	4925      	ldr	r1, [pc, #148]	; (80098ec <HAL_RCC_OscConfig+0x240>)
 8009858:	4313      	orrs	r3, r2
 800985a:	600b      	str	r3, [r1, #0]
 800985c:	e015      	b.n	800988a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800985e:	4b24      	ldr	r3, [pc, #144]	; (80098f0 <HAL_RCC_OscConfig+0x244>)
 8009860:	2200      	movs	r2, #0
 8009862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009864:	f7fc fe50 	bl	8006508 <HAL_GetTick>
 8009868:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800986a:	e008      	b.n	800987e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800986c:	f7fc fe4c 	bl	8006508 <HAL_GetTick>
 8009870:	4602      	mov	r2, r0
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	1ad3      	subs	r3, r2, r3
 8009876:	2b02      	cmp	r3, #2
 8009878:	d901      	bls.n	800987e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800987a:	2303      	movs	r3, #3
 800987c:	e187      	b.n	8009b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800987e:	4b1b      	ldr	r3, [pc, #108]	; (80098ec <HAL_RCC_OscConfig+0x240>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f003 0302 	and.w	r3, r3, #2
 8009886:	2b00      	cmp	r3, #0
 8009888:	d1f0      	bne.n	800986c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f003 0308 	and.w	r3, r3, #8
 8009892:	2b00      	cmp	r3, #0
 8009894:	d036      	beq.n	8009904 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	695b      	ldr	r3, [r3, #20]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d016      	beq.n	80098cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800989e:	4b15      	ldr	r3, [pc, #84]	; (80098f4 <HAL_RCC_OscConfig+0x248>)
 80098a0:	2201      	movs	r2, #1
 80098a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098a4:	f7fc fe30 	bl	8006508 <HAL_GetTick>
 80098a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80098aa:	e008      	b.n	80098be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80098ac:	f7fc fe2c 	bl	8006508 <HAL_GetTick>
 80098b0:	4602      	mov	r2, r0
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	1ad3      	subs	r3, r2, r3
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	d901      	bls.n	80098be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80098ba:	2303      	movs	r3, #3
 80098bc:	e167      	b.n	8009b8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80098be:	4b0b      	ldr	r3, [pc, #44]	; (80098ec <HAL_RCC_OscConfig+0x240>)
 80098c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098c2:	f003 0302 	and.w	r3, r3, #2
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d0f0      	beq.n	80098ac <HAL_RCC_OscConfig+0x200>
 80098ca:	e01b      	b.n	8009904 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80098cc:	4b09      	ldr	r3, [pc, #36]	; (80098f4 <HAL_RCC_OscConfig+0x248>)
 80098ce:	2200      	movs	r2, #0
 80098d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80098d2:	f7fc fe19 	bl	8006508 <HAL_GetTick>
 80098d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80098d8:	e00e      	b.n	80098f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80098da:	f7fc fe15 	bl	8006508 <HAL_GetTick>
 80098de:	4602      	mov	r2, r0
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	1ad3      	subs	r3, r2, r3
 80098e4:	2b02      	cmp	r3, #2
 80098e6:	d907      	bls.n	80098f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80098e8:	2303      	movs	r3, #3
 80098ea:	e150      	b.n	8009b8e <HAL_RCC_OscConfig+0x4e2>
 80098ec:	40023800 	.word	0x40023800
 80098f0:	42470000 	.word	0x42470000
 80098f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80098f8:	4b88      	ldr	r3, [pc, #544]	; (8009b1c <HAL_RCC_OscConfig+0x470>)
 80098fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098fc:	f003 0302 	and.w	r3, r3, #2
 8009900:	2b00      	cmp	r3, #0
 8009902:	d1ea      	bne.n	80098da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f003 0304 	and.w	r3, r3, #4
 800990c:	2b00      	cmp	r3, #0
 800990e:	f000 8097 	beq.w	8009a40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009912:	2300      	movs	r3, #0
 8009914:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009916:	4b81      	ldr	r3, [pc, #516]	; (8009b1c <HAL_RCC_OscConfig+0x470>)
 8009918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800991a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800991e:	2b00      	cmp	r3, #0
 8009920:	d10f      	bne.n	8009942 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009922:	2300      	movs	r3, #0
 8009924:	60bb      	str	r3, [r7, #8]
 8009926:	4b7d      	ldr	r3, [pc, #500]	; (8009b1c <HAL_RCC_OscConfig+0x470>)
 8009928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800992a:	4a7c      	ldr	r2, [pc, #496]	; (8009b1c <HAL_RCC_OscConfig+0x470>)
 800992c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009930:	6413      	str	r3, [r2, #64]	; 0x40
 8009932:	4b7a      	ldr	r3, [pc, #488]	; (8009b1c <HAL_RCC_OscConfig+0x470>)
 8009934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800993a:	60bb      	str	r3, [r7, #8]
 800993c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800993e:	2301      	movs	r3, #1
 8009940:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009942:	4b77      	ldr	r3, [pc, #476]	; (8009b20 <HAL_RCC_OscConfig+0x474>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800994a:	2b00      	cmp	r3, #0
 800994c:	d118      	bne.n	8009980 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800994e:	4b74      	ldr	r3, [pc, #464]	; (8009b20 <HAL_RCC_OscConfig+0x474>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a73      	ldr	r2, [pc, #460]	; (8009b20 <HAL_RCC_OscConfig+0x474>)
 8009954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800995a:	f7fc fdd5 	bl	8006508 <HAL_GetTick>
 800995e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009960:	e008      	b.n	8009974 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009962:	f7fc fdd1 	bl	8006508 <HAL_GetTick>
 8009966:	4602      	mov	r2, r0
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	1ad3      	subs	r3, r2, r3
 800996c:	2b02      	cmp	r3, #2
 800996e:	d901      	bls.n	8009974 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009970:	2303      	movs	r3, #3
 8009972:	e10c      	b.n	8009b8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009974:	4b6a      	ldr	r3, [pc, #424]	; (8009b20 <HAL_RCC_OscConfig+0x474>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800997c:	2b00      	cmp	r3, #0
 800997e:	d0f0      	beq.n	8009962 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	2b01      	cmp	r3, #1
 8009986:	d106      	bne.n	8009996 <HAL_RCC_OscConfig+0x2ea>
 8009988:	4b64      	ldr	r3, [pc, #400]	; (8009b1c <HAL_RCC_OscConfig+0x470>)
 800998a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800998c:	4a63      	ldr	r2, [pc, #396]	; (8009b1c <HAL_RCC_OscConfig+0x470>)
 800998e:	f043 0301 	orr.w	r3, r3, #1
 8009992:	6713      	str	r3, [r2, #112]	; 0x70
 8009994:	e01c      	b.n	80099d0 <HAL_RCC_OscConfig+0x324>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	2b05      	cmp	r3, #5
 800999c:	d10c      	bne.n	80099b8 <HAL_RCC_OscConfig+0x30c>
 800999e:	4b5f      	ldr	r3, [pc, #380]	; (8009b1c <HAL_RCC_OscConfig+0x470>)
 80099a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099a2:	4a5e      	ldr	r2, [pc, #376]	; (8009b1c <HAL_RCC_OscConfig+0x470>)
 80099a4:	f043 0304 	orr.w	r3, r3, #4
 80099a8:	6713      	str	r3, [r2, #112]	; 0x70
 80099aa:	4b5c      	ldr	r3, [pc, #368]	; (8009b1c <HAL_RCC_OscConfig+0x470>)
 80099ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ae:	4a5b      	ldr	r2, [pc, #364]	; (8009b1c <HAL_RCC_OscConfig+0x470>)
 80099b0:	f043 0301 	orr.w	r3, r3, #1
 80099b4:	6713      	str	r3, [r2, #112]	; 0x70
 80099b6:	e00b      	b.n	80099d0 <HAL_RCC_OscConfig+0x324>
 80099b8:	4b58      	ldr	r3, [pc, #352]	; (8009b1c <HAL_RCC_OscConfig+0x470>)
 80099ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099bc:	4a57      	ldr	r2, [pc, #348]	; (8009b1c <HAL_RCC_OscConfig+0x470>)
 80099be:	f023 0301 	bic.w	r3, r3, #1
 80099c2:	6713      	str	r3, [r2, #112]	; 0x70
 80099c4:	4b55      	ldr	r3, [pc, #340]	; (8009b1c <HAL_RCC_OscConfig+0x470>)
 80099c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099c8:	4a54      	ldr	r2, [pc, #336]	; (8009b1c <HAL_RCC_OscConfig+0x470>)
 80099ca:	f023 0304 	bic.w	r3, r3, #4
 80099ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d015      	beq.n	8009a04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099d8:	f7fc fd96 	bl	8006508 <HAL_GetTick>
 80099dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099de:	e00a      	b.n	80099f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099e0:	f7fc fd92 	bl	8006508 <HAL_GetTick>
 80099e4:	4602      	mov	r2, r0
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	1ad3      	subs	r3, r2, r3
 80099ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d901      	bls.n	80099f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80099f2:	2303      	movs	r3, #3
 80099f4:	e0cb      	b.n	8009b8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099f6:	4b49      	ldr	r3, [pc, #292]	; (8009b1c <HAL_RCC_OscConfig+0x470>)
 80099f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099fa:	f003 0302 	and.w	r3, r3, #2
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d0ee      	beq.n	80099e0 <HAL_RCC_OscConfig+0x334>
 8009a02:	e014      	b.n	8009a2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009a04:	f7fc fd80 	bl	8006508 <HAL_GetTick>
 8009a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a0a:	e00a      	b.n	8009a22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a0c:	f7fc fd7c 	bl	8006508 <HAL_GetTick>
 8009a10:	4602      	mov	r2, r0
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d901      	bls.n	8009a22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009a1e:	2303      	movs	r3, #3
 8009a20:	e0b5      	b.n	8009b8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a22:	4b3e      	ldr	r3, [pc, #248]	; (8009b1c <HAL_RCC_OscConfig+0x470>)
 8009a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a26:	f003 0302 	and.w	r3, r3, #2
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d1ee      	bne.n	8009a0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009a2e:	7dfb      	ldrb	r3, [r7, #23]
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d105      	bne.n	8009a40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a34:	4b39      	ldr	r3, [pc, #228]	; (8009b1c <HAL_RCC_OscConfig+0x470>)
 8009a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a38:	4a38      	ldr	r2, [pc, #224]	; (8009b1c <HAL_RCC_OscConfig+0x470>)
 8009a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	699b      	ldr	r3, [r3, #24]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f000 80a1 	beq.w	8009b8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009a4a:	4b34      	ldr	r3, [pc, #208]	; (8009b1c <HAL_RCC_OscConfig+0x470>)
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	f003 030c 	and.w	r3, r3, #12
 8009a52:	2b08      	cmp	r3, #8
 8009a54:	d05c      	beq.n	8009b10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	699b      	ldr	r3, [r3, #24]
 8009a5a:	2b02      	cmp	r3, #2
 8009a5c:	d141      	bne.n	8009ae2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a5e:	4b31      	ldr	r3, [pc, #196]	; (8009b24 <HAL_RCC_OscConfig+0x478>)
 8009a60:	2200      	movs	r2, #0
 8009a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a64:	f7fc fd50 	bl	8006508 <HAL_GetTick>
 8009a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a6a:	e008      	b.n	8009a7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a6c:	f7fc fd4c 	bl	8006508 <HAL_GetTick>
 8009a70:	4602      	mov	r2, r0
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	1ad3      	subs	r3, r2, r3
 8009a76:	2b02      	cmp	r3, #2
 8009a78:	d901      	bls.n	8009a7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009a7a:	2303      	movs	r3, #3
 8009a7c:	e087      	b.n	8009b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a7e:	4b27      	ldr	r3, [pc, #156]	; (8009b1c <HAL_RCC_OscConfig+0x470>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1f0      	bne.n	8009a6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	69da      	ldr	r2, [r3, #28]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6a1b      	ldr	r3, [r3, #32]
 8009a92:	431a      	orrs	r2, r3
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a98:	019b      	lsls	r3, r3, #6
 8009a9a:	431a      	orrs	r2, r3
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa0:	085b      	lsrs	r3, r3, #1
 8009aa2:	3b01      	subs	r3, #1
 8009aa4:	041b      	lsls	r3, r3, #16
 8009aa6:	431a      	orrs	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aac:	061b      	lsls	r3, r3, #24
 8009aae:	491b      	ldr	r1, [pc, #108]	; (8009b1c <HAL_RCC_OscConfig+0x470>)
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009ab4:	4b1b      	ldr	r3, [pc, #108]	; (8009b24 <HAL_RCC_OscConfig+0x478>)
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009aba:	f7fc fd25 	bl	8006508 <HAL_GetTick>
 8009abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ac0:	e008      	b.n	8009ad4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ac2:	f7fc fd21 	bl	8006508 <HAL_GetTick>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	1ad3      	subs	r3, r2, r3
 8009acc:	2b02      	cmp	r3, #2
 8009ace:	d901      	bls.n	8009ad4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	e05c      	b.n	8009b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ad4:	4b11      	ldr	r3, [pc, #68]	; (8009b1c <HAL_RCC_OscConfig+0x470>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d0f0      	beq.n	8009ac2 <HAL_RCC_OscConfig+0x416>
 8009ae0:	e054      	b.n	8009b8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ae2:	4b10      	ldr	r3, [pc, #64]	; (8009b24 <HAL_RCC_OscConfig+0x478>)
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ae8:	f7fc fd0e 	bl	8006508 <HAL_GetTick>
 8009aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009aee:	e008      	b.n	8009b02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009af0:	f7fc fd0a 	bl	8006508 <HAL_GetTick>
 8009af4:	4602      	mov	r2, r0
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	1ad3      	subs	r3, r2, r3
 8009afa:	2b02      	cmp	r3, #2
 8009afc:	d901      	bls.n	8009b02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009afe:	2303      	movs	r3, #3
 8009b00:	e045      	b.n	8009b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b02:	4b06      	ldr	r3, [pc, #24]	; (8009b1c <HAL_RCC_OscConfig+0x470>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d1f0      	bne.n	8009af0 <HAL_RCC_OscConfig+0x444>
 8009b0e:	e03d      	b.n	8009b8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	699b      	ldr	r3, [r3, #24]
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d107      	bne.n	8009b28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e038      	b.n	8009b8e <HAL_RCC_OscConfig+0x4e2>
 8009b1c:	40023800 	.word	0x40023800
 8009b20:	40007000 	.word	0x40007000
 8009b24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009b28:	4b1b      	ldr	r3, [pc, #108]	; (8009b98 <HAL_RCC_OscConfig+0x4ec>)
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	699b      	ldr	r3, [r3, #24]
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d028      	beq.n	8009b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d121      	bne.n	8009b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d11a      	bne.n	8009b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009b58:	4013      	ands	r3, r2
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009b5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d111      	bne.n	8009b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b6e:	085b      	lsrs	r3, r3, #1
 8009b70:	3b01      	subs	r3, #1
 8009b72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d107      	bne.n	8009b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d001      	beq.n	8009b8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	e000      	b.n	8009b8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3718      	adds	r7, #24
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	40023800 	.word	0x40023800

08009b9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d101      	bne.n	8009bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009bac:	2301      	movs	r3, #1
 8009bae:	e0cc      	b.n	8009d4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009bb0:	4b68      	ldr	r3, [pc, #416]	; (8009d54 <HAL_RCC_ClockConfig+0x1b8>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f003 0307 	and.w	r3, r3, #7
 8009bb8:	683a      	ldr	r2, [r7, #0]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d90c      	bls.n	8009bd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009bbe:	4b65      	ldr	r3, [pc, #404]	; (8009d54 <HAL_RCC_ClockConfig+0x1b8>)
 8009bc0:	683a      	ldr	r2, [r7, #0]
 8009bc2:	b2d2      	uxtb	r2, r2
 8009bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009bc6:	4b63      	ldr	r3, [pc, #396]	; (8009d54 <HAL_RCC_ClockConfig+0x1b8>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f003 0307 	and.w	r3, r3, #7
 8009bce:	683a      	ldr	r2, [r7, #0]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d001      	beq.n	8009bd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	e0b8      	b.n	8009d4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f003 0302 	and.w	r3, r3, #2
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d020      	beq.n	8009c26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f003 0304 	and.w	r3, r3, #4
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d005      	beq.n	8009bfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009bf0:	4b59      	ldr	r3, [pc, #356]	; (8009d58 <HAL_RCC_ClockConfig+0x1bc>)
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	4a58      	ldr	r2, [pc, #352]	; (8009d58 <HAL_RCC_ClockConfig+0x1bc>)
 8009bf6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009bfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f003 0308 	and.w	r3, r3, #8
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d005      	beq.n	8009c14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009c08:	4b53      	ldr	r3, [pc, #332]	; (8009d58 <HAL_RCC_ClockConfig+0x1bc>)
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	4a52      	ldr	r2, [pc, #328]	; (8009d58 <HAL_RCC_ClockConfig+0x1bc>)
 8009c0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009c12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c14:	4b50      	ldr	r3, [pc, #320]	; (8009d58 <HAL_RCC_ClockConfig+0x1bc>)
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	494d      	ldr	r1, [pc, #308]	; (8009d58 <HAL_RCC_ClockConfig+0x1bc>)
 8009c22:	4313      	orrs	r3, r2
 8009c24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f003 0301 	and.w	r3, r3, #1
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d044      	beq.n	8009cbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d107      	bne.n	8009c4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c3a:	4b47      	ldr	r3, [pc, #284]	; (8009d58 <HAL_RCC_ClockConfig+0x1bc>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d119      	bne.n	8009c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	e07f      	b.n	8009d4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d003      	beq.n	8009c5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009c56:	2b03      	cmp	r3, #3
 8009c58:	d107      	bne.n	8009c6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c5a:	4b3f      	ldr	r3, [pc, #252]	; (8009d58 <HAL_RCC_ClockConfig+0x1bc>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d109      	bne.n	8009c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	e06f      	b.n	8009d4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c6a:	4b3b      	ldr	r3, [pc, #236]	; (8009d58 <HAL_RCC_ClockConfig+0x1bc>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f003 0302 	and.w	r3, r3, #2
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d101      	bne.n	8009c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c76:	2301      	movs	r3, #1
 8009c78:	e067      	b.n	8009d4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009c7a:	4b37      	ldr	r3, [pc, #220]	; (8009d58 <HAL_RCC_ClockConfig+0x1bc>)
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	f023 0203 	bic.w	r2, r3, #3
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	4934      	ldr	r1, [pc, #208]	; (8009d58 <HAL_RCC_ClockConfig+0x1bc>)
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009c8c:	f7fc fc3c 	bl	8006508 <HAL_GetTick>
 8009c90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c92:	e00a      	b.n	8009caa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c94:	f7fc fc38 	bl	8006508 <HAL_GetTick>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	1ad3      	subs	r3, r2, r3
 8009c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d901      	bls.n	8009caa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009ca6:	2303      	movs	r3, #3
 8009ca8:	e04f      	b.n	8009d4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009caa:	4b2b      	ldr	r3, [pc, #172]	; (8009d58 <HAL_RCC_ClockConfig+0x1bc>)
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	f003 020c 	and.w	r2, r3, #12
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d1eb      	bne.n	8009c94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009cbc:	4b25      	ldr	r3, [pc, #148]	; (8009d54 <HAL_RCC_ClockConfig+0x1b8>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f003 0307 	and.w	r3, r3, #7
 8009cc4:	683a      	ldr	r2, [r7, #0]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d20c      	bcs.n	8009ce4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cca:	4b22      	ldr	r3, [pc, #136]	; (8009d54 <HAL_RCC_ClockConfig+0x1b8>)
 8009ccc:	683a      	ldr	r2, [r7, #0]
 8009cce:	b2d2      	uxtb	r2, r2
 8009cd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cd2:	4b20      	ldr	r3, [pc, #128]	; (8009d54 <HAL_RCC_ClockConfig+0x1b8>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f003 0307 	and.w	r3, r3, #7
 8009cda:	683a      	ldr	r2, [r7, #0]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d001      	beq.n	8009ce4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	e032      	b.n	8009d4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f003 0304 	and.w	r3, r3, #4
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d008      	beq.n	8009d02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009cf0:	4b19      	ldr	r3, [pc, #100]	; (8009d58 <HAL_RCC_ClockConfig+0x1bc>)
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	4916      	ldr	r1, [pc, #88]	; (8009d58 <HAL_RCC_ClockConfig+0x1bc>)
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f003 0308 	and.w	r3, r3, #8
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d009      	beq.n	8009d22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009d0e:	4b12      	ldr	r3, [pc, #72]	; (8009d58 <HAL_RCC_ClockConfig+0x1bc>)
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	691b      	ldr	r3, [r3, #16]
 8009d1a:	00db      	lsls	r3, r3, #3
 8009d1c:	490e      	ldr	r1, [pc, #56]	; (8009d58 <HAL_RCC_ClockConfig+0x1bc>)
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009d22:	f000 f821 	bl	8009d68 <HAL_RCC_GetSysClockFreq>
 8009d26:	4602      	mov	r2, r0
 8009d28:	4b0b      	ldr	r3, [pc, #44]	; (8009d58 <HAL_RCC_ClockConfig+0x1bc>)
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	091b      	lsrs	r3, r3, #4
 8009d2e:	f003 030f 	and.w	r3, r3, #15
 8009d32:	490a      	ldr	r1, [pc, #40]	; (8009d5c <HAL_RCC_ClockConfig+0x1c0>)
 8009d34:	5ccb      	ldrb	r3, [r1, r3]
 8009d36:	fa22 f303 	lsr.w	r3, r2, r3
 8009d3a:	4a09      	ldr	r2, [pc, #36]	; (8009d60 <HAL_RCC_ClockConfig+0x1c4>)
 8009d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009d3e:	4b09      	ldr	r3, [pc, #36]	; (8009d64 <HAL_RCC_ClockConfig+0x1c8>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7f8 faa8 	bl	8002298 <HAL_InitTick>

  return HAL_OK;
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	40023c00 	.word	0x40023c00
 8009d58:	40023800 	.word	0x40023800
 8009d5c:	08011d70 	.word	0x08011d70
 8009d60:	20000004 	.word	0x20000004
 8009d64:	20000008 	.word	0x20000008

08009d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d6c:	b094      	sub	sp, #80	; 0x50
 8009d6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009d70:	2300      	movs	r3, #0
 8009d72:	647b      	str	r3, [r7, #68]	; 0x44
 8009d74:	2300      	movs	r3, #0
 8009d76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d78:	2300      	movs	r3, #0
 8009d7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009d80:	4b79      	ldr	r3, [pc, #484]	; (8009f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	f003 030c 	and.w	r3, r3, #12
 8009d88:	2b08      	cmp	r3, #8
 8009d8a:	d00d      	beq.n	8009da8 <HAL_RCC_GetSysClockFreq+0x40>
 8009d8c:	2b08      	cmp	r3, #8
 8009d8e:	f200 80e1 	bhi.w	8009f54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d002      	beq.n	8009d9c <HAL_RCC_GetSysClockFreq+0x34>
 8009d96:	2b04      	cmp	r3, #4
 8009d98:	d003      	beq.n	8009da2 <HAL_RCC_GetSysClockFreq+0x3a>
 8009d9a:	e0db      	b.n	8009f54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009d9c:	4b73      	ldr	r3, [pc, #460]	; (8009f6c <HAL_RCC_GetSysClockFreq+0x204>)
 8009d9e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009da0:	e0db      	b.n	8009f5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009da2:	4b73      	ldr	r3, [pc, #460]	; (8009f70 <HAL_RCC_GetSysClockFreq+0x208>)
 8009da4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009da6:	e0d8      	b.n	8009f5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009da8:	4b6f      	ldr	r3, [pc, #444]	; (8009f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009db0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009db2:	4b6d      	ldr	r3, [pc, #436]	; (8009f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d063      	beq.n	8009e86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009dbe:	4b6a      	ldr	r3, [pc, #424]	; (8009f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	099b      	lsrs	r3, r3, #6
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8009dc8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dd0:	633b      	str	r3, [r7, #48]	; 0x30
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8009dd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009dda:	4622      	mov	r2, r4
 8009ddc:	462b      	mov	r3, r5
 8009dde:	f04f 0000 	mov.w	r0, #0
 8009de2:	f04f 0100 	mov.w	r1, #0
 8009de6:	0159      	lsls	r1, r3, #5
 8009de8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009dec:	0150      	lsls	r0, r2, #5
 8009dee:	4602      	mov	r2, r0
 8009df0:	460b      	mov	r3, r1
 8009df2:	4621      	mov	r1, r4
 8009df4:	1a51      	subs	r1, r2, r1
 8009df6:	6139      	str	r1, [r7, #16]
 8009df8:	4629      	mov	r1, r5
 8009dfa:	eb63 0301 	sbc.w	r3, r3, r1
 8009dfe:	617b      	str	r3, [r7, #20]
 8009e00:	f04f 0200 	mov.w	r2, #0
 8009e04:	f04f 0300 	mov.w	r3, #0
 8009e08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009e0c:	4659      	mov	r1, fp
 8009e0e:	018b      	lsls	r3, r1, #6
 8009e10:	4651      	mov	r1, sl
 8009e12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009e16:	4651      	mov	r1, sl
 8009e18:	018a      	lsls	r2, r1, #6
 8009e1a:	4651      	mov	r1, sl
 8009e1c:	ebb2 0801 	subs.w	r8, r2, r1
 8009e20:	4659      	mov	r1, fp
 8009e22:	eb63 0901 	sbc.w	r9, r3, r1
 8009e26:	f04f 0200 	mov.w	r2, #0
 8009e2a:	f04f 0300 	mov.w	r3, #0
 8009e2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009e32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009e36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009e3a:	4690      	mov	r8, r2
 8009e3c:	4699      	mov	r9, r3
 8009e3e:	4623      	mov	r3, r4
 8009e40:	eb18 0303 	adds.w	r3, r8, r3
 8009e44:	60bb      	str	r3, [r7, #8]
 8009e46:	462b      	mov	r3, r5
 8009e48:	eb49 0303 	adc.w	r3, r9, r3
 8009e4c:	60fb      	str	r3, [r7, #12]
 8009e4e:	f04f 0200 	mov.w	r2, #0
 8009e52:	f04f 0300 	mov.w	r3, #0
 8009e56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009e5a:	4629      	mov	r1, r5
 8009e5c:	024b      	lsls	r3, r1, #9
 8009e5e:	4621      	mov	r1, r4
 8009e60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009e64:	4621      	mov	r1, r4
 8009e66:	024a      	lsls	r2, r1, #9
 8009e68:	4610      	mov	r0, r2
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e6e:	2200      	movs	r2, #0
 8009e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e78:	f7f6 fe96 	bl	8000ba8 <__aeabi_uldivmod>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	460b      	mov	r3, r1
 8009e80:	4613      	mov	r3, r2
 8009e82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e84:	e058      	b.n	8009f38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e86:	4b38      	ldr	r3, [pc, #224]	; (8009f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	099b      	lsrs	r3, r3, #6
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	4618      	mov	r0, r3
 8009e90:	4611      	mov	r1, r2
 8009e92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009e96:	623b      	str	r3, [r7, #32]
 8009e98:	2300      	movs	r3, #0
 8009e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8009e9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009ea0:	4642      	mov	r2, r8
 8009ea2:	464b      	mov	r3, r9
 8009ea4:	f04f 0000 	mov.w	r0, #0
 8009ea8:	f04f 0100 	mov.w	r1, #0
 8009eac:	0159      	lsls	r1, r3, #5
 8009eae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009eb2:	0150      	lsls	r0, r2, #5
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	4641      	mov	r1, r8
 8009eba:	ebb2 0a01 	subs.w	sl, r2, r1
 8009ebe:	4649      	mov	r1, r9
 8009ec0:	eb63 0b01 	sbc.w	fp, r3, r1
 8009ec4:	f04f 0200 	mov.w	r2, #0
 8009ec8:	f04f 0300 	mov.w	r3, #0
 8009ecc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009ed0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009ed4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009ed8:	ebb2 040a 	subs.w	r4, r2, sl
 8009edc:	eb63 050b 	sbc.w	r5, r3, fp
 8009ee0:	f04f 0200 	mov.w	r2, #0
 8009ee4:	f04f 0300 	mov.w	r3, #0
 8009ee8:	00eb      	lsls	r3, r5, #3
 8009eea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009eee:	00e2      	lsls	r2, r4, #3
 8009ef0:	4614      	mov	r4, r2
 8009ef2:	461d      	mov	r5, r3
 8009ef4:	4643      	mov	r3, r8
 8009ef6:	18e3      	adds	r3, r4, r3
 8009ef8:	603b      	str	r3, [r7, #0]
 8009efa:	464b      	mov	r3, r9
 8009efc:	eb45 0303 	adc.w	r3, r5, r3
 8009f00:	607b      	str	r3, [r7, #4]
 8009f02:	f04f 0200 	mov.w	r2, #0
 8009f06:	f04f 0300 	mov.w	r3, #0
 8009f0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009f0e:	4629      	mov	r1, r5
 8009f10:	028b      	lsls	r3, r1, #10
 8009f12:	4621      	mov	r1, r4
 8009f14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009f18:	4621      	mov	r1, r4
 8009f1a:	028a      	lsls	r2, r1, #10
 8009f1c:	4610      	mov	r0, r2
 8009f1e:	4619      	mov	r1, r3
 8009f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f22:	2200      	movs	r2, #0
 8009f24:	61bb      	str	r3, [r7, #24]
 8009f26:	61fa      	str	r2, [r7, #28]
 8009f28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f2c:	f7f6 fe3c 	bl	8000ba8 <__aeabi_uldivmod>
 8009f30:	4602      	mov	r2, r0
 8009f32:	460b      	mov	r3, r1
 8009f34:	4613      	mov	r3, r2
 8009f36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009f38:	4b0b      	ldr	r3, [pc, #44]	; (8009f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	0c1b      	lsrs	r3, r3, #16
 8009f3e:	f003 0303 	and.w	r3, r3, #3
 8009f42:	3301      	adds	r3, #1
 8009f44:	005b      	lsls	r3, r3, #1
 8009f46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009f48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009f52:	e002      	b.n	8009f5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009f54:	4b05      	ldr	r3, [pc, #20]	; (8009f6c <HAL_RCC_GetSysClockFreq+0x204>)
 8009f56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009f58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3750      	adds	r7, #80	; 0x50
 8009f60:	46bd      	mov	sp, r7
 8009f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f66:	bf00      	nop
 8009f68:	40023800 	.word	0x40023800
 8009f6c:	00f42400 	.word	0x00f42400
 8009f70:	007a1200 	.word	0x007a1200

08009f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009f74:	b480      	push	{r7}
 8009f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009f78:	4b03      	ldr	r3, [pc, #12]	; (8009f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	20000004 	.word	0x20000004

08009f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009f90:	f7ff fff0 	bl	8009f74 <HAL_RCC_GetHCLKFreq>
 8009f94:	4602      	mov	r2, r0
 8009f96:	4b05      	ldr	r3, [pc, #20]	; (8009fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	0a9b      	lsrs	r3, r3, #10
 8009f9c:	f003 0307 	and.w	r3, r3, #7
 8009fa0:	4903      	ldr	r1, [pc, #12]	; (8009fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009fa2:	5ccb      	ldrb	r3, [r1, r3]
 8009fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	40023800 	.word	0x40023800
 8009fb0:	08011d80 	.word	0x08011d80

08009fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009fb8:	f7ff ffdc 	bl	8009f74 <HAL_RCC_GetHCLKFreq>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	4b05      	ldr	r3, [pc, #20]	; (8009fd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	0b5b      	lsrs	r3, r3, #13
 8009fc4:	f003 0307 	and.w	r3, r3, #7
 8009fc8:	4903      	ldr	r1, [pc, #12]	; (8009fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009fca:	5ccb      	ldrb	r3, [r1, r3]
 8009fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	40023800 	.word	0x40023800
 8009fd8:	08011d80 	.word	0x08011d80

08009fdc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	220f      	movs	r2, #15
 8009fea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009fec:	4b12      	ldr	r3, [pc, #72]	; (800a038 <HAL_RCC_GetClockConfig+0x5c>)
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	f003 0203 	and.w	r2, r3, #3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009ff8:	4b0f      	ldr	r3, [pc, #60]	; (800a038 <HAL_RCC_GetClockConfig+0x5c>)
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a004:	4b0c      	ldr	r3, [pc, #48]	; (800a038 <HAL_RCC_GetClockConfig+0x5c>)
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a010:	4b09      	ldr	r3, [pc, #36]	; (800a038 <HAL_RCC_GetClockConfig+0x5c>)
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	08db      	lsrs	r3, r3, #3
 800a016:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a01e:	4b07      	ldr	r3, [pc, #28]	; (800a03c <HAL_RCC_GetClockConfig+0x60>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f003 0207 	and.w	r2, r3, #7
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	601a      	str	r2, [r3, #0]
}
 800a02a:	bf00      	nop
 800a02c:	370c      	adds	r7, #12
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	40023800 	.word	0x40023800
 800a03c:	40023c00 	.word	0x40023c00

0800a040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d101      	bne.n	800a052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	e041      	b.n	800a0d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d106      	bne.n	800a06c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f7f8 fe72 	bl	8002d50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2202      	movs	r2, #2
 800a070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	3304      	adds	r3, #4
 800a07c:	4619      	mov	r1, r3
 800a07e:	4610      	mov	r0, r2
 800a080:	f000 fb6a 	bl	800a758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2201      	movs	r2, #1
 800a088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2201      	movs	r2, #1
 800a090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2201      	movs	r2, #1
 800a098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0d4:	2300      	movs	r3, #0
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3708      	adds	r7, #8
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
	...

0800a0e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b085      	sub	sp, #20
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d001      	beq.n	800a0f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e04e      	b.n	800a196 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2202      	movs	r2, #2
 800a0fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	68da      	ldr	r2, [r3, #12]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f042 0201 	orr.w	r2, r2, #1
 800a10e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a23      	ldr	r2, [pc, #140]	; (800a1a4 <HAL_TIM_Base_Start_IT+0xc4>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d022      	beq.n	800a160 <HAL_TIM_Base_Start_IT+0x80>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a122:	d01d      	beq.n	800a160 <HAL_TIM_Base_Start_IT+0x80>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a1f      	ldr	r2, [pc, #124]	; (800a1a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d018      	beq.n	800a160 <HAL_TIM_Base_Start_IT+0x80>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a1e      	ldr	r2, [pc, #120]	; (800a1ac <HAL_TIM_Base_Start_IT+0xcc>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d013      	beq.n	800a160 <HAL_TIM_Base_Start_IT+0x80>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a1c      	ldr	r2, [pc, #112]	; (800a1b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d00e      	beq.n	800a160 <HAL_TIM_Base_Start_IT+0x80>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a1b      	ldr	r2, [pc, #108]	; (800a1b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d009      	beq.n	800a160 <HAL_TIM_Base_Start_IT+0x80>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a19      	ldr	r2, [pc, #100]	; (800a1b8 <HAL_TIM_Base_Start_IT+0xd8>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d004      	beq.n	800a160 <HAL_TIM_Base_Start_IT+0x80>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a18      	ldr	r2, [pc, #96]	; (800a1bc <HAL_TIM_Base_Start_IT+0xdc>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d111      	bne.n	800a184 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	689b      	ldr	r3, [r3, #8]
 800a166:	f003 0307 	and.w	r3, r3, #7
 800a16a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2b06      	cmp	r3, #6
 800a170:	d010      	beq.n	800a194 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f042 0201 	orr.w	r2, r2, #1
 800a180:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a182:	e007      	b.n	800a194 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f042 0201 	orr.w	r2, r2, #1
 800a192:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a194:	2300      	movs	r3, #0
}
 800a196:	4618      	mov	r0, r3
 800a198:	3714      	adds	r7, #20
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	40010000 	.word	0x40010000
 800a1a8:	40000400 	.word	0x40000400
 800a1ac:	40000800 	.word	0x40000800
 800a1b0:	40000c00 	.word	0x40000c00
 800a1b4:	40010400 	.word	0x40010400
 800a1b8:	40014000 	.word	0x40014000
 800a1bc:	40001800 	.word	0x40001800

0800a1c0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	68da      	ldr	r2, [r3, #12]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f022 0201 	bic.w	r2, r2, #1
 800a1d6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	6a1a      	ldr	r2, [r3, #32]
 800a1de:	f241 1311 	movw	r3, #4369	; 0x1111
 800a1e2:	4013      	ands	r3, r2
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d10f      	bne.n	800a208 <HAL_TIM_Base_Stop_IT+0x48>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	6a1a      	ldr	r2, [r3, #32]
 800a1ee:	f240 4344 	movw	r3, #1092	; 0x444
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d107      	bne.n	800a208 <HAL_TIM_Base_Stop_IT+0x48>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f022 0201 	bic.w	r2, r2, #1
 800a206:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2201      	movs	r2, #1
 800a20c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a210:	2300      	movs	r3, #0
}
 800a212:	4618      	mov	r0, r3
 800a214:	370c      	adds	r7, #12
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr

0800a21e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a21e:	b580      	push	{r7, lr}
 800a220:	b086      	sub	sp, #24
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
 800a226:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d101      	bne.n	800a232 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a22e:	2301      	movs	r3, #1
 800a230:	e097      	b.n	800a362 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d106      	bne.n	800a24c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f7f8 fcc2 	bl	8002bd0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2202      	movs	r2, #2
 800a250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	6812      	ldr	r2, [r2, #0]
 800a25e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a262:	f023 0307 	bic.w	r3, r3, #7
 800a266:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	3304      	adds	r3, #4
 800a270:	4619      	mov	r1, r3
 800a272:	4610      	mov	r0, r2
 800a274:	f000 fa70 	bl	800a758 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	689b      	ldr	r3, [r3, #8]
 800a27e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	699b      	ldr	r3, [r3, #24]
 800a286:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	6a1b      	ldr	r3, [r3, #32]
 800a28e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	697a      	ldr	r2, [r7, #20]
 800a296:	4313      	orrs	r3, r2
 800a298:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2a0:	f023 0303 	bic.w	r3, r3, #3
 800a2a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	689a      	ldr	r2, [r3, #8]
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	699b      	ldr	r3, [r3, #24]
 800a2ae:	021b      	lsls	r3, r3, #8
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	693a      	ldr	r2, [r7, #16]
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a2be:	f023 030c 	bic.w	r3, r3, #12
 800a2c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a2ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a2ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	68da      	ldr	r2, [r3, #12]
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	69db      	ldr	r3, [r3, #28]
 800a2d8:	021b      	lsls	r3, r3, #8
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	693a      	ldr	r2, [r7, #16]
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	691b      	ldr	r3, [r3, #16]
 800a2e6:	011a      	lsls	r2, r3, #4
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	6a1b      	ldr	r3, [r3, #32]
 800a2ec:	031b      	lsls	r3, r3, #12
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	693a      	ldr	r2, [r7, #16]
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a2fc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a304:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	685a      	ldr	r2, [r3, #4]
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	695b      	ldr	r3, [r3, #20]
 800a30e:	011b      	lsls	r3, r3, #4
 800a310:	4313      	orrs	r3, r2
 800a312:	68fa      	ldr	r2, [r7, #12]
 800a314:	4313      	orrs	r3, r2
 800a316:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	697a      	ldr	r2, [r7, #20]
 800a31e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	693a      	ldr	r2, [r7, #16]
 800a326:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2201      	movs	r2, #1
 800a334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2201      	movs	r2, #1
 800a344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2201      	movs	r2, #1
 800a34c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2201      	movs	r2, #1
 800a354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2201      	movs	r2, #1
 800a35c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a360:	2300      	movs	r3, #0
}
 800a362:	4618      	mov	r0, r3
 800a364:	3718      	adds	r7, #24
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a36a:	b580      	push	{r7, lr}
 800a36c:	b082      	sub	sp, #8
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	691b      	ldr	r3, [r3, #16]
 800a378:	f003 0302 	and.w	r3, r3, #2
 800a37c:	2b02      	cmp	r3, #2
 800a37e:	d122      	bne.n	800a3c6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	f003 0302 	and.w	r3, r3, #2
 800a38a:	2b02      	cmp	r3, #2
 800a38c:	d11b      	bne.n	800a3c6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f06f 0202 	mvn.w	r2, #2
 800a396:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2201      	movs	r2, #1
 800a39c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	699b      	ldr	r3, [r3, #24]
 800a3a4:	f003 0303 	and.w	r3, r3, #3
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d003      	beq.n	800a3b4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 f9b5 	bl	800a71c <HAL_TIM_IC_CaptureCallback>
 800a3b2:	e005      	b.n	800a3c0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 f9a7 	bl	800a708 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 f9b8 	bl	800a730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	691b      	ldr	r3, [r3, #16]
 800a3cc:	f003 0304 	and.w	r3, r3, #4
 800a3d0:	2b04      	cmp	r3, #4
 800a3d2:	d122      	bne.n	800a41a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	68db      	ldr	r3, [r3, #12]
 800a3da:	f003 0304 	and.w	r3, r3, #4
 800a3de:	2b04      	cmp	r3, #4
 800a3e0:	d11b      	bne.n	800a41a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f06f 0204 	mvn.w	r2, #4
 800a3ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2202      	movs	r2, #2
 800a3f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	699b      	ldr	r3, [r3, #24]
 800a3f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d003      	beq.n	800a408 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 f98b 	bl	800a71c <HAL_TIM_IC_CaptureCallback>
 800a406:	e005      	b.n	800a414 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f000 f97d 	bl	800a708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 f98e 	bl	800a730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	f003 0308 	and.w	r3, r3, #8
 800a424:	2b08      	cmp	r3, #8
 800a426:	d122      	bne.n	800a46e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	f003 0308 	and.w	r3, r3, #8
 800a432:	2b08      	cmp	r3, #8
 800a434:	d11b      	bne.n	800a46e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f06f 0208 	mvn.w	r2, #8
 800a43e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2204      	movs	r2, #4
 800a444:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	69db      	ldr	r3, [r3, #28]
 800a44c:	f003 0303 	and.w	r3, r3, #3
 800a450:	2b00      	cmp	r3, #0
 800a452:	d003      	beq.n	800a45c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 f961 	bl	800a71c <HAL_TIM_IC_CaptureCallback>
 800a45a:	e005      	b.n	800a468 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f000 f953 	bl	800a708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 f964 	bl	800a730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2200      	movs	r2, #0
 800a46c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	f003 0310 	and.w	r3, r3, #16
 800a478:	2b10      	cmp	r3, #16
 800a47a:	d122      	bne.n	800a4c2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	68db      	ldr	r3, [r3, #12]
 800a482:	f003 0310 	and.w	r3, r3, #16
 800a486:	2b10      	cmp	r3, #16
 800a488:	d11b      	bne.n	800a4c2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f06f 0210 	mvn.w	r2, #16
 800a492:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2208      	movs	r2, #8
 800a498:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	69db      	ldr	r3, [r3, #28]
 800a4a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d003      	beq.n	800a4b0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 f937 	bl	800a71c <HAL_TIM_IC_CaptureCallback>
 800a4ae:	e005      	b.n	800a4bc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 f929 	bl	800a708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 f93a 	bl	800a730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	691b      	ldr	r3, [r3, #16]
 800a4c8:	f003 0301 	and.w	r3, r3, #1
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d10e      	bne.n	800a4ee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	f003 0301 	and.w	r3, r3, #1
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d107      	bne.n	800a4ee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f06f 0201 	mvn.w	r2, #1
 800a4e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f7f7 fb69 	bl	8001bc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	691b      	ldr	r3, [r3, #16]
 800a4f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4f8:	2b80      	cmp	r3, #128	; 0x80
 800a4fa:	d10e      	bne.n	800a51a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a506:	2b80      	cmp	r3, #128	; 0x80
 800a508:	d107      	bne.n	800a51a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 fadf 	bl	800aad8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	691b      	ldr	r3, [r3, #16]
 800a520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a524:	2b40      	cmp	r3, #64	; 0x40
 800a526:	d10e      	bne.n	800a546 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a532:	2b40      	cmp	r3, #64	; 0x40
 800a534:	d107      	bne.n	800a546 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a53e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 f8ff 	bl	800a744 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	f003 0320 	and.w	r3, r3, #32
 800a550:	2b20      	cmp	r3, #32
 800a552:	d10e      	bne.n	800a572 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	f003 0320 	and.w	r3, r3, #32
 800a55e:	2b20      	cmp	r3, #32
 800a560:	d107      	bne.n	800a572 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f06f 0220 	mvn.w	r2, #32
 800a56a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 faa9 	bl	800aac4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a572:	bf00      	nop
 800a574:	3708      	adds	r7, #8
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}

0800a57a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a57a:	b580      	push	{r7, lr}
 800a57c:	b084      	sub	sp, #16
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
 800a582:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a584:	2300      	movs	r3, #0
 800a586:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d101      	bne.n	800a596 <HAL_TIM_ConfigClockSource+0x1c>
 800a592:	2302      	movs	r3, #2
 800a594:	e0b4      	b.n	800a700 <HAL_TIM_ConfigClockSource+0x186>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2201      	movs	r2, #1
 800a59a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2202      	movs	r2, #2
 800a5a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	689b      	ldr	r3, [r3, #8]
 800a5ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a5b4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5bc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	68ba      	ldr	r2, [r7, #8]
 800a5c4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5ce:	d03e      	beq.n	800a64e <HAL_TIM_ConfigClockSource+0xd4>
 800a5d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5d4:	f200 8087 	bhi.w	800a6e6 <HAL_TIM_ConfigClockSource+0x16c>
 800a5d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5dc:	f000 8086 	beq.w	800a6ec <HAL_TIM_ConfigClockSource+0x172>
 800a5e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5e4:	d87f      	bhi.n	800a6e6 <HAL_TIM_ConfigClockSource+0x16c>
 800a5e6:	2b70      	cmp	r3, #112	; 0x70
 800a5e8:	d01a      	beq.n	800a620 <HAL_TIM_ConfigClockSource+0xa6>
 800a5ea:	2b70      	cmp	r3, #112	; 0x70
 800a5ec:	d87b      	bhi.n	800a6e6 <HAL_TIM_ConfigClockSource+0x16c>
 800a5ee:	2b60      	cmp	r3, #96	; 0x60
 800a5f0:	d050      	beq.n	800a694 <HAL_TIM_ConfigClockSource+0x11a>
 800a5f2:	2b60      	cmp	r3, #96	; 0x60
 800a5f4:	d877      	bhi.n	800a6e6 <HAL_TIM_ConfigClockSource+0x16c>
 800a5f6:	2b50      	cmp	r3, #80	; 0x50
 800a5f8:	d03c      	beq.n	800a674 <HAL_TIM_ConfigClockSource+0xfa>
 800a5fa:	2b50      	cmp	r3, #80	; 0x50
 800a5fc:	d873      	bhi.n	800a6e6 <HAL_TIM_ConfigClockSource+0x16c>
 800a5fe:	2b40      	cmp	r3, #64	; 0x40
 800a600:	d058      	beq.n	800a6b4 <HAL_TIM_ConfigClockSource+0x13a>
 800a602:	2b40      	cmp	r3, #64	; 0x40
 800a604:	d86f      	bhi.n	800a6e6 <HAL_TIM_ConfigClockSource+0x16c>
 800a606:	2b30      	cmp	r3, #48	; 0x30
 800a608:	d064      	beq.n	800a6d4 <HAL_TIM_ConfigClockSource+0x15a>
 800a60a:	2b30      	cmp	r3, #48	; 0x30
 800a60c:	d86b      	bhi.n	800a6e6 <HAL_TIM_ConfigClockSource+0x16c>
 800a60e:	2b20      	cmp	r3, #32
 800a610:	d060      	beq.n	800a6d4 <HAL_TIM_ConfigClockSource+0x15a>
 800a612:	2b20      	cmp	r3, #32
 800a614:	d867      	bhi.n	800a6e6 <HAL_TIM_ConfigClockSource+0x16c>
 800a616:	2b00      	cmp	r3, #0
 800a618:	d05c      	beq.n	800a6d4 <HAL_TIM_ConfigClockSource+0x15a>
 800a61a:	2b10      	cmp	r3, #16
 800a61c:	d05a      	beq.n	800a6d4 <HAL_TIM_ConfigClockSource+0x15a>
 800a61e:	e062      	b.n	800a6e6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6818      	ldr	r0, [r3, #0]
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	6899      	ldr	r1, [r3, #8]
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	685a      	ldr	r2, [r3, #4]
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	f000 f9ac 	bl	800a98c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a642:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	68ba      	ldr	r2, [r7, #8]
 800a64a:	609a      	str	r2, [r3, #8]
      break;
 800a64c:	e04f      	b.n	800a6ee <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6818      	ldr	r0, [r3, #0]
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	6899      	ldr	r1, [r3, #8]
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	685a      	ldr	r2, [r3, #4]
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	68db      	ldr	r3, [r3, #12]
 800a65e:	f000 f995 	bl	800a98c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	689a      	ldr	r2, [r3, #8]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a670:	609a      	str	r2, [r3, #8]
      break;
 800a672:	e03c      	b.n	800a6ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6818      	ldr	r0, [r3, #0]
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	6859      	ldr	r1, [r3, #4]
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	461a      	mov	r2, r3
 800a682:	f000 f909 	bl	800a898 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	2150      	movs	r1, #80	; 0x50
 800a68c:	4618      	mov	r0, r3
 800a68e:	f000 f962 	bl	800a956 <TIM_ITRx_SetConfig>
      break;
 800a692:	e02c      	b.n	800a6ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6818      	ldr	r0, [r3, #0]
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	6859      	ldr	r1, [r3, #4]
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	f000 f928 	bl	800a8f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	2160      	movs	r1, #96	; 0x60
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f000 f952 	bl	800a956 <TIM_ITRx_SetConfig>
      break;
 800a6b2:	e01c      	b.n	800a6ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6818      	ldr	r0, [r3, #0]
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	6859      	ldr	r1, [r3, #4]
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	f000 f8e9 	bl	800a898 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2140      	movs	r1, #64	; 0x40
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f000 f942 	bl	800a956 <TIM_ITRx_SetConfig>
      break;
 800a6d2:	e00c      	b.n	800a6ee <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4619      	mov	r1, r3
 800a6de:	4610      	mov	r0, r2
 800a6e0:	f000 f939 	bl	800a956 <TIM_ITRx_SetConfig>
      break;
 800a6e4:	e003      	b.n	800a6ee <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	73fb      	strb	r3, [r7, #15]
      break;
 800a6ea:	e000      	b.n	800a6ee <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a6ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a6fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a700:	4618      	mov	r0, r3
 800a702:	3710      	adds	r7, #16
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a708:	b480      	push	{r7}
 800a70a:	b083      	sub	sp, #12
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a710:	bf00      	nop
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a724:	bf00      	nop
 800a726:	370c      	adds	r7, #12
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a738:	bf00      	nop
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a74c:	bf00      	nop
 800a74e:	370c      	adds	r7, #12
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a758:	b480      	push	{r7}
 800a75a:	b085      	sub	sp, #20
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a40      	ldr	r2, [pc, #256]	; (800a86c <TIM_Base_SetConfig+0x114>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d013      	beq.n	800a798 <TIM_Base_SetConfig+0x40>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a776:	d00f      	beq.n	800a798 <TIM_Base_SetConfig+0x40>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a3d      	ldr	r2, [pc, #244]	; (800a870 <TIM_Base_SetConfig+0x118>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d00b      	beq.n	800a798 <TIM_Base_SetConfig+0x40>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	4a3c      	ldr	r2, [pc, #240]	; (800a874 <TIM_Base_SetConfig+0x11c>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d007      	beq.n	800a798 <TIM_Base_SetConfig+0x40>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	4a3b      	ldr	r2, [pc, #236]	; (800a878 <TIM_Base_SetConfig+0x120>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d003      	beq.n	800a798 <TIM_Base_SetConfig+0x40>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	4a3a      	ldr	r2, [pc, #232]	; (800a87c <TIM_Base_SetConfig+0x124>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d108      	bne.n	800a7aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a79e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	68fa      	ldr	r2, [r7, #12]
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	4a2f      	ldr	r2, [pc, #188]	; (800a86c <TIM_Base_SetConfig+0x114>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d02b      	beq.n	800a80a <TIM_Base_SetConfig+0xb2>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7b8:	d027      	beq.n	800a80a <TIM_Base_SetConfig+0xb2>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	4a2c      	ldr	r2, [pc, #176]	; (800a870 <TIM_Base_SetConfig+0x118>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d023      	beq.n	800a80a <TIM_Base_SetConfig+0xb2>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4a2b      	ldr	r2, [pc, #172]	; (800a874 <TIM_Base_SetConfig+0x11c>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d01f      	beq.n	800a80a <TIM_Base_SetConfig+0xb2>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4a2a      	ldr	r2, [pc, #168]	; (800a878 <TIM_Base_SetConfig+0x120>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d01b      	beq.n	800a80a <TIM_Base_SetConfig+0xb2>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4a29      	ldr	r2, [pc, #164]	; (800a87c <TIM_Base_SetConfig+0x124>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d017      	beq.n	800a80a <TIM_Base_SetConfig+0xb2>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4a28      	ldr	r2, [pc, #160]	; (800a880 <TIM_Base_SetConfig+0x128>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d013      	beq.n	800a80a <TIM_Base_SetConfig+0xb2>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4a27      	ldr	r2, [pc, #156]	; (800a884 <TIM_Base_SetConfig+0x12c>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d00f      	beq.n	800a80a <TIM_Base_SetConfig+0xb2>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a26      	ldr	r2, [pc, #152]	; (800a888 <TIM_Base_SetConfig+0x130>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d00b      	beq.n	800a80a <TIM_Base_SetConfig+0xb2>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a25      	ldr	r2, [pc, #148]	; (800a88c <TIM_Base_SetConfig+0x134>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d007      	beq.n	800a80a <TIM_Base_SetConfig+0xb2>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	4a24      	ldr	r2, [pc, #144]	; (800a890 <TIM_Base_SetConfig+0x138>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d003      	beq.n	800a80a <TIM_Base_SetConfig+0xb2>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	4a23      	ldr	r2, [pc, #140]	; (800a894 <TIM_Base_SetConfig+0x13c>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d108      	bne.n	800a81c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	68fa      	ldr	r2, [r7, #12]
 800a818:	4313      	orrs	r3, r2
 800a81a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	695b      	ldr	r3, [r3, #20]
 800a826:	4313      	orrs	r3, r2
 800a828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	689a      	ldr	r2, [r3, #8]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	4a0a      	ldr	r2, [pc, #40]	; (800a86c <TIM_Base_SetConfig+0x114>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d003      	beq.n	800a850 <TIM_Base_SetConfig+0xf8>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	4a0c      	ldr	r2, [pc, #48]	; (800a87c <TIM_Base_SetConfig+0x124>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d103      	bne.n	800a858 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	691a      	ldr	r2, [r3, #16]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2201      	movs	r2, #1
 800a85c:	615a      	str	r2, [r3, #20]
}
 800a85e:	bf00      	nop
 800a860:	3714      	adds	r7, #20
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr
 800a86a:	bf00      	nop
 800a86c:	40010000 	.word	0x40010000
 800a870:	40000400 	.word	0x40000400
 800a874:	40000800 	.word	0x40000800
 800a878:	40000c00 	.word	0x40000c00
 800a87c:	40010400 	.word	0x40010400
 800a880:	40014000 	.word	0x40014000
 800a884:	40014400 	.word	0x40014400
 800a888:	40014800 	.word	0x40014800
 800a88c:	40001800 	.word	0x40001800
 800a890:	40001c00 	.word	0x40001c00
 800a894:	40002000 	.word	0x40002000

0800a898 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a898:	b480      	push	{r7}
 800a89a:	b087      	sub	sp, #28
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	60b9      	str	r1, [r7, #8]
 800a8a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6a1b      	ldr	r3, [r3, #32]
 800a8a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	6a1b      	ldr	r3, [r3, #32]
 800a8ae:	f023 0201 	bic.w	r2, r3, #1
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	699b      	ldr	r3, [r3, #24]
 800a8ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a8c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	011b      	lsls	r3, r3, #4
 800a8c8:	693a      	ldr	r2, [r7, #16]
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	f023 030a 	bic.w	r3, r3, #10
 800a8d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a8d6:	697a      	ldr	r2, [r7, #20]
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	693a      	ldr	r2, [r7, #16]
 800a8e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	697a      	ldr	r2, [r7, #20]
 800a8e8:	621a      	str	r2, [r3, #32]
}
 800a8ea:	bf00      	nop
 800a8ec:	371c      	adds	r7, #28
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr

0800a8f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a8f6:	b480      	push	{r7}
 800a8f8:	b087      	sub	sp, #28
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	60f8      	str	r0, [r7, #12]
 800a8fe:	60b9      	str	r1, [r7, #8]
 800a900:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	6a1b      	ldr	r3, [r3, #32]
 800a906:	f023 0210 	bic.w	r2, r3, #16
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	699b      	ldr	r3, [r3, #24]
 800a912:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	6a1b      	ldr	r3, [r3, #32]
 800a918:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a920:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	031b      	lsls	r3, r3, #12
 800a926:	697a      	ldr	r2, [r7, #20]
 800a928:	4313      	orrs	r3, r2
 800a92a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a932:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	011b      	lsls	r3, r3, #4
 800a938:	693a      	ldr	r2, [r7, #16]
 800a93a:	4313      	orrs	r3, r2
 800a93c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	697a      	ldr	r2, [r7, #20]
 800a942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	693a      	ldr	r2, [r7, #16]
 800a948:	621a      	str	r2, [r3, #32]
}
 800a94a:	bf00      	nop
 800a94c:	371c      	adds	r7, #28
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr

0800a956 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a956:	b480      	push	{r7}
 800a958:	b085      	sub	sp, #20
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a96c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a96e:	683a      	ldr	r2, [r7, #0]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	4313      	orrs	r3, r2
 800a974:	f043 0307 	orr.w	r3, r3, #7
 800a978:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	609a      	str	r2, [r3, #8]
}
 800a980:	bf00      	nop
 800a982:	3714      	adds	r7, #20
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b087      	sub	sp, #28
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	607a      	str	r2, [r7, #4]
 800a998:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	689b      	ldr	r3, [r3, #8]
 800a99e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a9a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	021a      	lsls	r2, r3, #8
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	431a      	orrs	r2, r3
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	697a      	ldr	r2, [r7, #20]
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	697a      	ldr	r2, [r7, #20]
 800a9be:	609a      	str	r2, [r3, #8]
}
 800a9c0:	bf00      	nop
 800a9c2:	371c      	adds	r7, #28
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b085      	sub	sp, #20
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d101      	bne.n	800a9e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a9e0:	2302      	movs	r3, #2
 800a9e2:	e05a      	b.n	800aa9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2202      	movs	r2, #2
 800a9f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	689b      	ldr	r3, [r3, #8]
 800aa02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	68fa      	ldr	r2, [r7, #12]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	68fa      	ldr	r2, [r7, #12]
 800aa1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a21      	ldr	r2, [pc, #132]	; (800aaa8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d022      	beq.n	800aa6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa30:	d01d      	beq.n	800aa6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a1d      	ldr	r2, [pc, #116]	; (800aaac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d018      	beq.n	800aa6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a1b      	ldr	r2, [pc, #108]	; (800aab0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d013      	beq.n	800aa6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a1a      	ldr	r2, [pc, #104]	; (800aab4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d00e      	beq.n	800aa6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a18      	ldr	r2, [pc, #96]	; (800aab8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d009      	beq.n	800aa6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a17      	ldr	r2, [pc, #92]	; (800aabc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d004      	beq.n	800aa6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a15      	ldr	r2, [pc, #84]	; (800aac0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d10c      	bne.n	800aa88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	68ba      	ldr	r2, [r7, #8]
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	68ba      	ldr	r2, [r7, #8]
 800aa86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa98:	2300      	movs	r3, #0
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3714      	adds	r7, #20
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr
 800aaa6:	bf00      	nop
 800aaa8:	40010000 	.word	0x40010000
 800aaac:	40000400 	.word	0x40000400
 800aab0:	40000800 	.word	0x40000800
 800aab4:	40000c00 	.word	0x40000c00
 800aab8:	40010400 	.word	0x40010400
 800aabc:	40014000 	.word	0x40014000
 800aac0:	40001800 	.word	0x40001800

0800aac4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aacc:	bf00      	nop
 800aace:	370c      	adds	r7, #12
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aae0:	bf00      	nop
 800aae2:	370c      	adds	r7, #12
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr

0800aaec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d101      	bne.n	800aafe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aafa:	2301      	movs	r3, #1
 800aafc:	e03f      	b.n	800ab7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d106      	bne.n	800ab18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f7f8 fac4 	bl	80030a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2224      	movs	r2, #36	; 0x24
 800ab1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	68da      	ldr	r2, [r3, #12]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ab2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 fe23 	bl	800b77c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	691a      	ldr	r2, [r3, #16]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ab44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	695a      	ldr	r2, [r3, #20]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ab54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	68da      	ldr	r2, [r3, #12]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ab64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2220      	movs	r2, #32
 800ab70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2220      	movs	r2, #32
 800ab78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3708      	adds	r7, #8
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab86:	b580      	push	{r7, lr}
 800ab88:	b08a      	sub	sp, #40	; 0x28
 800ab8a:	af02      	add	r7, sp, #8
 800ab8c:	60f8      	str	r0, [r7, #12]
 800ab8e:	60b9      	str	r1, [r7, #8]
 800ab90:	603b      	str	r3, [r7, #0]
 800ab92:	4613      	mov	r3, r2
 800ab94:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ab96:	2300      	movs	r3, #0
 800ab98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	2b20      	cmp	r3, #32
 800aba4:	d17c      	bne.n	800aca0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d002      	beq.n	800abb2 <HAL_UART_Transmit+0x2c>
 800abac:	88fb      	ldrh	r3, [r7, #6]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d101      	bne.n	800abb6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800abb2:	2301      	movs	r3, #1
 800abb4:	e075      	b.n	800aca2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d101      	bne.n	800abc4 <HAL_UART_Transmit+0x3e>
 800abc0:	2302      	movs	r3, #2
 800abc2:	e06e      	b.n	800aca2 <HAL_UART_Transmit+0x11c>
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2201      	movs	r2, #1
 800abc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2200      	movs	r2, #0
 800abd0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2221      	movs	r2, #33	; 0x21
 800abd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800abda:	f7fb fc95 	bl	8006508 <HAL_GetTick>
 800abde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	88fa      	ldrh	r2, [r7, #6]
 800abe4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	88fa      	ldrh	r2, [r7, #6]
 800abea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	689b      	ldr	r3, [r3, #8]
 800abf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abf4:	d108      	bne.n	800ac08 <HAL_UART_Transmit+0x82>
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	691b      	ldr	r3, [r3, #16]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d104      	bne.n	800ac08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800abfe:	2300      	movs	r3, #0
 800ac00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	61bb      	str	r3, [r7, #24]
 800ac06:	e003      	b.n	800ac10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2200      	movs	r2, #0
 800ac14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800ac18:	e02a      	b.n	800ac70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	9300      	str	r3, [sp, #0]
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	2200      	movs	r2, #0
 800ac22:	2180      	movs	r1, #128	; 0x80
 800ac24:	68f8      	ldr	r0, [r7, #12]
 800ac26:	f000 fb63 	bl	800b2f0 <UART_WaitOnFlagUntilTimeout>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d001      	beq.n	800ac34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800ac30:	2303      	movs	r3, #3
 800ac32:	e036      	b.n	800aca2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d10b      	bne.n	800ac52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	881b      	ldrh	r3, [r3, #0]
 800ac3e:	461a      	mov	r2, r3
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	3302      	adds	r3, #2
 800ac4e:	61bb      	str	r3, [r7, #24]
 800ac50:	e007      	b.n	800ac62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	781a      	ldrb	r2, [r3, #0]
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ac5c:	69fb      	ldr	r3, [r7, #28]
 800ac5e:	3301      	adds	r3, #1
 800ac60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	3b01      	subs	r3, #1
 800ac6a:	b29a      	uxth	r2, r3
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d1cf      	bne.n	800ac1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	9300      	str	r3, [sp, #0]
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	2200      	movs	r2, #0
 800ac82:	2140      	movs	r1, #64	; 0x40
 800ac84:	68f8      	ldr	r0, [r7, #12]
 800ac86:	f000 fb33 	bl	800b2f0 <UART_WaitOnFlagUntilTimeout>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d001      	beq.n	800ac94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ac90:	2303      	movs	r3, #3
 800ac92:	e006      	b.n	800aca2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2220      	movs	r2, #32
 800ac98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	e000      	b.n	800aca2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800aca0:	2302      	movs	r3, #2
  }
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3720      	adds	r7, #32
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}

0800acaa <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800acaa:	b480      	push	{r7}
 800acac:	b085      	sub	sp, #20
 800acae:	af00      	add	r7, sp, #0
 800acb0:	60f8      	str	r0, [r7, #12]
 800acb2:	60b9      	str	r1, [r7, #8]
 800acb4:	4613      	mov	r3, r2
 800acb6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	2b20      	cmp	r3, #32
 800acc2:	d130      	bne.n	800ad26 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d002      	beq.n	800acd0 <HAL_UART_Transmit_IT+0x26>
 800acca:	88fb      	ldrh	r3, [r7, #6]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d101      	bne.n	800acd4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800acd0:	2301      	movs	r3, #1
 800acd2:	e029      	b.n	800ad28 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d101      	bne.n	800ace2 <HAL_UART_Transmit_IT+0x38>
 800acde:	2302      	movs	r3, #2
 800ace0:	e022      	b.n	800ad28 <HAL_UART_Transmit_IT+0x7e>
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2201      	movs	r2, #1
 800ace6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	68ba      	ldr	r2, [r7, #8]
 800acee:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	88fa      	ldrh	r2, [r7, #6]
 800acf4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	88fa      	ldrh	r2, [r7, #6]
 800acfa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2200      	movs	r2, #0
 800ad00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2221      	movs	r2, #33	; 0x21
 800ad06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	68da      	ldr	r2, [r3, #12]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ad20:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800ad22:	2300      	movs	r3, #0
 800ad24:	e000      	b.n	800ad28 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800ad26:	2302      	movs	r3, #2
  }
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3714      	adds	r7, #20
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	4613      	mov	r3, r2
 800ad40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	2b20      	cmp	r3, #32
 800ad4c:	d11d      	bne.n	800ad8a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d002      	beq.n	800ad5a <HAL_UART_Receive_IT+0x26>
 800ad54:	88fb      	ldrh	r3, [r7, #6]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d101      	bne.n	800ad5e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e016      	b.n	800ad8c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d101      	bne.n	800ad6c <HAL_UART_Receive_IT+0x38>
 800ad68:	2302      	movs	r3, #2
 800ad6a:	e00f      	b.n	800ad8c <HAL_UART_Receive_IT+0x58>
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2201      	movs	r2, #1
 800ad70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2200      	movs	r2, #0
 800ad78:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ad7a:	88fb      	ldrh	r3, [r7, #6]
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	68b9      	ldr	r1, [r7, #8]
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f000 fb23 	bl	800b3cc <UART_Start_Receive_IT>
 800ad86:	4603      	mov	r3, r0
 800ad88:	e000      	b.n	800ad8c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800ad8a:	2302      	movs	r3, #2
  }
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3710      	adds	r7, #16
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b0ba      	sub	sp, #232	; 0xe8
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	68db      	ldr	r3, [r3, #12]
 800adac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	695b      	ldr	r3, [r3, #20]
 800adb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800adba:	2300      	movs	r3, #0
 800adbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800adc0:	2300      	movs	r3, #0
 800adc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800adc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adca:	f003 030f 	and.w	r3, r3, #15
 800adce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800add2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800add6:	2b00      	cmp	r3, #0
 800add8:	d10f      	bne.n	800adfa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800adda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adde:	f003 0320 	and.w	r3, r3, #32
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d009      	beq.n	800adfa <HAL_UART_IRQHandler+0x66>
 800ade6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adea:	f003 0320 	and.w	r3, r3, #32
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d003      	beq.n	800adfa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 fc07 	bl	800b606 <UART_Receive_IT>
      return;
 800adf8:	e256      	b.n	800b2a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800adfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	f000 80de 	beq.w	800afc0 <HAL_UART_IRQHandler+0x22c>
 800ae04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae08:	f003 0301 	and.w	r3, r3, #1
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d106      	bne.n	800ae1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ae10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae14:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	f000 80d1 	beq.w	800afc0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ae1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae22:	f003 0301 	and.w	r3, r3, #1
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d00b      	beq.n	800ae42 <HAL_UART_IRQHandler+0xae>
 800ae2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d005      	beq.n	800ae42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae3a:	f043 0201 	orr.w	r2, r3, #1
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ae42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae46:	f003 0304 	and.w	r3, r3, #4
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00b      	beq.n	800ae66 <HAL_UART_IRQHandler+0xd2>
 800ae4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae52:	f003 0301 	and.w	r3, r3, #1
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d005      	beq.n	800ae66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae5e:	f043 0202 	orr.w	r2, r3, #2
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ae66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae6a:	f003 0302 	and.w	r3, r3, #2
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d00b      	beq.n	800ae8a <HAL_UART_IRQHandler+0xf6>
 800ae72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae76:	f003 0301 	and.w	r3, r3, #1
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d005      	beq.n	800ae8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae82:	f043 0204 	orr.w	r2, r3, #4
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ae8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae8e:	f003 0308 	and.w	r3, r3, #8
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d011      	beq.n	800aeba <HAL_UART_IRQHandler+0x126>
 800ae96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae9a:	f003 0320 	and.w	r3, r3, #32
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d105      	bne.n	800aeae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800aea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aea6:	f003 0301 	and.w	r3, r3, #1
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d005      	beq.n	800aeba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb2:	f043 0208 	orr.w	r2, r3, #8
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	f000 81ed 	beq.w	800b29e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aec8:	f003 0320 	and.w	r3, r3, #32
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d008      	beq.n	800aee2 <HAL_UART_IRQHandler+0x14e>
 800aed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aed4:	f003 0320 	and.w	r3, r3, #32
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d002      	beq.n	800aee2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 fb92 	bl	800b606 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	695b      	ldr	r3, [r3, #20]
 800aee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeec:	2b40      	cmp	r3, #64	; 0x40
 800aeee:	bf0c      	ite	eq
 800aef0:	2301      	moveq	r3, #1
 800aef2:	2300      	movne	r3, #0
 800aef4:	b2db      	uxtb	r3, r3
 800aef6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aefe:	f003 0308 	and.w	r3, r3, #8
 800af02:	2b00      	cmp	r3, #0
 800af04:	d103      	bne.n	800af0e <HAL_UART_IRQHandler+0x17a>
 800af06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d04f      	beq.n	800afae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 fa9a 	bl	800b448 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	695b      	ldr	r3, [r3, #20]
 800af1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af1e:	2b40      	cmp	r3, #64	; 0x40
 800af20:	d141      	bne.n	800afa6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	3314      	adds	r3, #20
 800af28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af30:	e853 3f00 	ldrex	r3, [r3]
 800af34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800af38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	3314      	adds	r3, #20
 800af4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800af4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800af52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800af5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800af5e:	e841 2300 	strex	r3, r2, [r1]
 800af62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800af66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d1d9      	bne.n	800af22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af72:	2b00      	cmp	r3, #0
 800af74:	d013      	beq.n	800af9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af7a:	4a7d      	ldr	r2, [pc, #500]	; (800b170 <HAL_UART_IRQHandler+0x3dc>)
 800af7c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af82:	4618      	mov	r0, r3
 800af84:	f7fc f92e 	bl	80071e4 <HAL_DMA_Abort_IT>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d016      	beq.n	800afbc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800af98:	4610      	mov	r0, r2
 800af9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af9c:	e00e      	b.n	800afbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 f990 	bl	800b2c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afa4:	e00a      	b.n	800afbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 f98c 	bl	800b2c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afac:	e006      	b.n	800afbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 f988 	bl	800b2c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800afba:	e170      	b.n	800b29e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afbc:	bf00      	nop
    return;
 800afbe:	e16e      	b.n	800b29e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	f040 814a 	bne.w	800b25e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800afca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afce:	f003 0310 	and.w	r3, r3, #16
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	f000 8143 	beq.w	800b25e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800afd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afdc:	f003 0310 	and.w	r3, r3, #16
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	f000 813c 	beq.w	800b25e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800afe6:	2300      	movs	r3, #0
 800afe8:	60bb      	str	r3, [r7, #8]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	60bb      	str	r3, [r7, #8]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	60bb      	str	r3, [r7, #8]
 800affa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	695b      	ldr	r3, [r3, #20]
 800b002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b006:	2b40      	cmp	r3, #64	; 0x40
 800b008:	f040 80b4 	bne.w	800b174 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b018:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	f000 8140 	beq.w	800b2a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b026:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b02a:	429a      	cmp	r2, r3
 800b02c:	f080 8139 	bcs.w	800b2a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b036:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b03c:	69db      	ldr	r3, [r3, #28]
 800b03e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b042:	f000 8088 	beq.w	800b156 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	330c      	adds	r3, #12
 800b04c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b050:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b054:	e853 3f00 	ldrex	r3, [r3]
 800b058:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b05c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b064:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	330c      	adds	r3, #12
 800b06e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b072:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b076:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b07a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b07e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b082:	e841 2300 	strex	r3, r2, [r1]
 800b086:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b08a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d1d9      	bne.n	800b046 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	3314      	adds	r3, #20
 800b098:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b09a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b09c:	e853 3f00 	ldrex	r3, [r3]
 800b0a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b0a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b0a4:	f023 0301 	bic.w	r3, r3, #1
 800b0a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	3314      	adds	r3, #20
 800b0b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b0b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b0ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b0be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b0c2:	e841 2300 	strex	r3, r2, [r1]
 800b0c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b0c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1e1      	bne.n	800b092 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	3314      	adds	r3, #20
 800b0d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b0d8:	e853 3f00 	ldrex	r3, [r3]
 800b0dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b0de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	3314      	adds	r3, #20
 800b0ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b0f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b0f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b0f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b0fa:	e841 2300 	strex	r3, r2, [r1]
 800b0fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b100:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b102:	2b00      	cmp	r3, #0
 800b104:	d1e3      	bne.n	800b0ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2220      	movs	r2, #32
 800b10a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2200      	movs	r2, #0
 800b112:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	330c      	adds	r3, #12
 800b11a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b11c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b11e:	e853 3f00 	ldrex	r3, [r3]
 800b122:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b126:	f023 0310 	bic.w	r3, r3, #16
 800b12a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	330c      	adds	r3, #12
 800b134:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b138:	65ba      	str	r2, [r7, #88]	; 0x58
 800b13a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b13c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b13e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b140:	e841 2300 	strex	r3, r2, [r1]
 800b144:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d1e3      	bne.n	800b114 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b150:	4618      	mov	r0, r3
 800b152:	f7fb ffd7 	bl	8007104 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b15e:	b29b      	uxth	r3, r3
 800b160:	1ad3      	subs	r3, r2, r3
 800b162:	b29b      	uxth	r3, r3
 800b164:	4619      	mov	r1, r3
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 f8b6 	bl	800b2d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b16c:	e099      	b.n	800b2a2 <HAL_UART_IRQHandler+0x50e>
 800b16e:	bf00      	nop
 800b170:	0800b50f 	.word	0x0800b50f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	1ad3      	subs	r3, r2, r3
 800b180:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b188:	b29b      	uxth	r3, r3
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	f000 808b 	beq.w	800b2a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b190:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b194:	2b00      	cmp	r3, #0
 800b196:	f000 8086 	beq.w	800b2a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	330c      	adds	r3, #12
 800b1a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a4:	e853 3f00 	ldrex	r3, [r3]
 800b1a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b1b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	330c      	adds	r3, #12
 800b1ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b1be:	647a      	str	r2, [r7, #68]	; 0x44
 800b1c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b1c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1c6:	e841 2300 	strex	r3, r2, [r1]
 800b1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b1cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1e3      	bne.n	800b19a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	3314      	adds	r3, #20
 800b1d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1dc:	e853 3f00 	ldrex	r3, [r3]
 800b1e0:	623b      	str	r3, [r7, #32]
   return(result);
 800b1e2:	6a3b      	ldr	r3, [r7, #32]
 800b1e4:	f023 0301 	bic.w	r3, r3, #1
 800b1e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	3314      	adds	r3, #20
 800b1f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b1f6:	633a      	str	r2, [r7, #48]	; 0x30
 800b1f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1fe:	e841 2300 	strex	r3, r2, [r1]
 800b202:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b206:	2b00      	cmp	r3, #0
 800b208:	d1e3      	bne.n	800b1d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2220      	movs	r2, #32
 800b20e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2200      	movs	r2, #0
 800b216:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	330c      	adds	r3, #12
 800b21e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	e853 3f00 	ldrex	r3, [r3]
 800b226:	60fb      	str	r3, [r7, #12]
   return(result);
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f023 0310 	bic.w	r3, r3, #16
 800b22e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	330c      	adds	r3, #12
 800b238:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b23c:	61fa      	str	r2, [r7, #28]
 800b23e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b240:	69b9      	ldr	r1, [r7, #24]
 800b242:	69fa      	ldr	r2, [r7, #28]
 800b244:	e841 2300 	strex	r3, r2, [r1]
 800b248:	617b      	str	r3, [r7, #20]
   return(result);
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d1e3      	bne.n	800b218 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b250:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b254:	4619      	mov	r1, r3
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 f83e 	bl	800b2d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b25c:	e023      	b.n	800b2a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b25e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b266:	2b00      	cmp	r3, #0
 800b268:	d009      	beq.n	800b27e <HAL_UART_IRQHandler+0x4ea>
 800b26a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b26e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b272:	2b00      	cmp	r3, #0
 800b274:	d003      	beq.n	800b27e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 f95d 	bl	800b536 <UART_Transmit_IT>
    return;
 800b27c:	e014      	b.n	800b2a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b27e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b286:	2b00      	cmp	r3, #0
 800b288:	d00e      	beq.n	800b2a8 <HAL_UART_IRQHandler+0x514>
 800b28a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b28e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b292:	2b00      	cmp	r3, #0
 800b294:	d008      	beq.n	800b2a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 f99d 	bl	800b5d6 <UART_EndTransmit_IT>
    return;
 800b29c:	e004      	b.n	800b2a8 <HAL_UART_IRQHandler+0x514>
    return;
 800b29e:	bf00      	nop
 800b2a0:	e002      	b.n	800b2a8 <HAL_UART_IRQHandler+0x514>
      return;
 800b2a2:	bf00      	nop
 800b2a4:	e000      	b.n	800b2a8 <HAL_UART_IRQHandler+0x514>
      return;
 800b2a6:	bf00      	nop
  }
}
 800b2a8:	37e8      	adds	r7, #232	; 0xe8
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop

0800b2b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b2b8:	bf00      	nop
 800b2ba:	370c      	adds	r7, #12
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b2cc:	bf00      	nop
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b2e4:	bf00      	nop
 800b2e6:	370c      	adds	r7, #12
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr

0800b2f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b090      	sub	sp, #64	; 0x40
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	603b      	str	r3, [r7, #0]
 800b2fc:	4613      	mov	r3, r2
 800b2fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b300:	e050      	b.n	800b3a4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b304:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b308:	d04c      	beq.n	800b3a4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b30a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d007      	beq.n	800b320 <UART_WaitOnFlagUntilTimeout+0x30>
 800b310:	f7fb f8fa 	bl	8006508 <HAL_GetTick>
 800b314:	4602      	mov	r2, r0
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	1ad3      	subs	r3, r2, r3
 800b31a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d241      	bcs.n	800b3a4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	330c      	adds	r3, #12
 800b326:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b32a:	e853 3f00 	ldrex	r3, [r3]
 800b32e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b332:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b336:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	330c      	adds	r3, #12
 800b33e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b340:	637a      	str	r2, [r7, #52]	; 0x34
 800b342:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b344:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b346:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b348:	e841 2300 	strex	r3, r2, [r1]
 800b34c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b350:	2b00      	cmp	r3, #0
 800b352:	d1e5      	bne.n	800b320 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	3314      	adds	r3, #20
 800b35a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	e853 3f00 	ldrex	r3, [r3]
 800b362:	613b      	str	r3, [r7, #16]
   return(result);
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	f023 0301 	bic.w	r3, r3, #1
 800b36a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	3314      	adds	r3, #20
 800b372:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b374:	623a      	str	r2, [r7, #32]
 800b376:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b378:	69f9      	ldr	r1, [r7, #28]
 800b37a:	6a3a      	ldr	r2, [r7, #32]
 800b37c:	e841 2300 	strex	r3, r2, [r1]
 800b380:	61bb      	str	r3, [r7, #24]
   return(result);
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d1e5      	bne.n	800b354 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2220      	movs	r2, #32
 800b38c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2220      	movs	r2, #32
 800b394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2200      	movs	r2, #0
 800b39c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b3a0:	2303      	movs	r3, #3
 800b3a2:	e00f      	b.n	800b3c4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	4013      	ands	r3, r2
 800b3ae:	68ba      	ldr	r2, [r7, #8]
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	bf0c      	ite	eq
 800b3b4:	2301      	moveq	r3, #1
 800b3b6:	2300      	movne	r3, #0
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	79fb      	ldrb	r3, [r7, #7]
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d09f      	beq.n	800b302 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b3c2:	2300      	movs	r3, #0
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3740      	adds	r7, #64	; 0x40
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b085      	sub	sp, #20
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	4613      	mov	r3, r2
 800b3d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	68ba      	ldr	r2, [r7, #8]
 800b3de:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	88fa      	ldrh	r2, [r7, #6]
 800b3e4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	88fa      	ldrh	r2, [r7, #6]
 800b3ea:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2222      	movs	r2, #34	; 0x22
 800b3f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	691b      	ldr	r3, [r3, #16]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d007      	beq.n	800b41a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	68da      	ldr	r2, [r3, #12]
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b418:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	695a      	ldr	r2, [r3, #20]
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f042 0201 	orr.w	r2, r2, #1
 800b428:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	68da      	ldr	r2, [r3, #12]
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f042 0220 	orr.w	r2, r2, #32
 800b438:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b43a:	2300      	movs	r3, #0
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3714      	adds	r7, #20
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr

0800b448 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b448:	b480      	push	{r7}
 800b44a:	b095      	sub	sp, #84	; 0x54
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	330c      	adds	r3, #12
 800b456:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b45a:	e853 3f00 	ldrex	r3, [r3]
 800b45e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b462:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b466:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	330c      	adds	r3, #12
 800b46e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b470:	643a      	str	r2, [r7, #64]	; 0x40
 800b472:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b474:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b476:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b478:	e841 2300 	strex	r3, r2, [r1]
 800b47c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b480:	2b00      	cmp	r3, #0
 800b482:	d1e5      	bne.n	800b450 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	3314      	adds	r3, #20
 800b48a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b48c:	6a3b      	ldr	r3, [r7, #32]
 800b48e:	e853 3f00 	ldrex	r3, [r3]
 800b492:	61fb      	str	r3, [r7, #28]
   return(result);
 800b494:	69fb      	ldr	r3, [r7, #28]
 800b496:	f023 0301 	bic.w	r3, r3, #1
 800b49a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	3314      	adds	r3, #20
 800b4a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b4a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b4aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4ac:	e841 2300 	strex	r3, r2, [r1]
 800b4b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d1e5      	bne.n	800b484 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d119      	bne.n	800b4f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	330c      	adds	r3, #12
 800b4c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	e853 3f00 	ldrex	r3, [r3]
 800b4ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	f023 0310 	bic.w	r3, r3, #16
 800b4d6:	647b      	str	r3, [r7, #68]	; 0x44
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	330c      	adds	r3, #12
 800b4de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4e0:	61ba      	str	r2, [r7, #24]
 800b4e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e4:	6979      	ldr	r1, [r7, #20]
 800b4e6:	69ba      	ldr	r2, [r7, #24]
 800b4e8:	e841 2300 	strex	r3, r2, [r1]
 800b4ec:	613b      	str	r3, [r7, #16]
   return(result);
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d1e5      	bne.n	800b4c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2220      	movs	r2, #32
 800b4f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b502:	bf00      	nop
 800b504:	3754      	adds	r7, #84	; 0x54
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr

0800b50e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b50e:	b580      	push	{r7, lr}
 800b510:	b084      	sub	sp, #16
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b51a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2200      	movs	r2, #0
 800b520:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2200      	movs	r2, #0
 800b526:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b528:	68f8      	ldr	r0, [r7, #12]
 800b52a:	f7ff fecb 	bl	800b2c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b52e:	bf00      	nop
 800b530:	3710      	adds	r7, #16
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}

0800b536 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b536:	b480      	push	{r7}
 800b538:	b085      	sub	sp, #20
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b544:	b2db      	uxtb	r3, r3
 800b546:	2b21      	cmp	r3, #33	; 0x21
 800b548:	d13e      	bne.n	800b5c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	689b      	ldr	r3, [r3, #8]
 800b54e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b552:	d114      	bne.n	800b57e <UART_Transmit_IT+0x48>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	691b      	ldr	r3, [r3, #16]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d110      	bne.n	800b57e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6a1b      	ldr	r3, [r3, #32]
 800b560:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	881b      	ldrh	r3, [r3, #0]
 800b566:	461a      	mov	r2, r3
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b570:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6a1b      	ldr	r3, [r3, #32]
 800b576:	1c9a      	adds	r2, r3, #2
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	621a      	str	r2, [r3, #32]
 800b57c:	e008      	b.n	800b590 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6a1b      	ldr	r3, [r3, #32]
 800b582:	1c59      	adds	r1, r3, #1
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	6211      	str	r1, [r2, #32]
 800b588:	781a      	ldrb	r2, [r3, #0]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b594:	b29b      	uxth	r3, r3
 800b596:	3b01      	subs	r3, #1
 800b598:	b29b      	uxth	r3, r3
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	4619      	mov	r1, r3
 800b59e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d10f      	bne.n	800b5c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	68da      	ldr	r2, [r3, #12]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b5b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	68da      	ldr	r2, [r3, #12]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	e000      	b.n	800b5ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b5c8:	2302      	movs	r3, #2
  }
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3714      	adds	r7, #20
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d4:	4770      	bx	lr

0800b5d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b5d6:	b580      	push	{r7, lr}
 800b5d8:	b082      	sub	sp, #8
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	68da      	ldr	r2, [r3, #12]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2220      	movs	r2, #32
 800b5f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f7ff fe5a 	bl	800b2b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b5fc:	2300      	movs	r3, #0
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3708      	adds	r7, #8
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}

0800b606 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b606:	b580      	push	{r7, lr}
 800b608:	b08c      	sub	sp, #48	; 0x30
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b614:	b2db      	uxtb	r3, r3
 800b616:	2b22      	cmp	r3, #34	; 0x22
 800b618:	f040 80ab 	bne.w	800b772 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b624:	d117      	bne.n	800b656 <UART_Receive_IT+0x50>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	691b      	ldr	r3, [r3, #16]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d113      	bne.n	800b656 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b62e:	2300      	movs	r3, #0
 800b630:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b636:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	b29b      	uxth	r3, r3
 800b640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b644:	b29a      	uxth	r2, r3
 800b646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b648:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b64e:	1c9a      	adds	r2, r3, #2
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	629a      	str	r2, [r3, #40]	; 0x28
 800b654:	e026      	b.n	800b6a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b65a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b65c:	2300      	movs	r3, #0
 800b65e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b668:	d007      	beq.n	800b67a <UART_Receive_IT+0x74>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d10a      	bne.n	800b688 <UART_Receive_IT+0x82>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	691b      	ldr	r3, [r3, #16]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d106      	bne.n	800b688 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	b2da      	uxtb	r2, r3
 800b682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b684:	701a      	strb	r2, [r3, #0]
 800b686:	e008      	b.n	800b69a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b694:	b2da      	uxtb	r2, r3
 800b696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b698:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b69e:	1c5a      	adds	r2, r3, #1
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	3b01      	subs	r3, #1
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d15a      	bne.n	800b76e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	68da      	ldr	r2, [r3, #12]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f022 0220 	bic.w	r2, r2, #32
 800b6c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	68da      	ldr	r2, [r3, #12]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b6d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	695a      	ldr	r2, [r3, #20]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f022 0201 	bic.w	r2, r2, #1
 800b6e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2220      	movs	r2, #32
 800b6ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d135      	bne.n	800b764 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	330c      	adds	r3, #12
 800b704:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	e853 3f00 	ldrex	r3, [r3]
 800b70c:	613b      	str	r3, [r7, #16]
   return(result);
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	f023 0310 	bic.w	r3, r3, #16
 800b714:	627b      	str	r3, [r7, #36]	; 0x24
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	330c      	adds	r3, #12
 800b71c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b71e:	623a      	str	r2, [r7, #32]
 800b720:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b722:	69f9      	ldr	r1, [r7, #28]
 800b724:	6a3a      	ldr	r2, [r7, #32]
 800b726:	e841 2300 	strex	r3, r2, [r1]
 800b72a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b72c:	69bb      	ldr	r3, [r7, #24]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d1e5      	bne.n	800b6fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f003 0310 	and.w	r3, r3, #16
 800b73c:	2b10      	cmp	r3, #16
 800b73e:	d10a      	bne.n	800b756 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b740:	2300      	movs	r3, #0
 800b742:	60fb      	str	r3, [r7, #12]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	60fb      	str	r3, [r7, #12]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	60fb      	str	r3, [r7, #12]
 800b754:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b75a:	4619      	mov	r1, r3
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f7ff fdbb 	bl	800b2d8 <HAL_UARTEx_RxEventCallback>
 800b762:	e002      	b.n	800b76a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f7f7 fdad 	bl	80032c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b76a:	2300      	movs	r3, #0
 800b76c:	e002      	b.n	800b774 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b76e:	2300      	movs	r3, #0
 800b770:	e000      	b.n	800b774 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b772:	2302      	movs	r3, #2
  }
}
 800b774:	4618      	mov	r0, r3
 800b776:	3730      	adds	r7, #48	; 0x30
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b77c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b780:	b0c0      	sub	sp, #256	; 0x100
 800b782:	af00      	add	r7, sp, #0
 800b784:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	691b      	ldr	r3, [r3, #16]
 800b790:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b798:	68d9      	ldr	r1, [r3, #12]
 800b79a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b79e:	681a      	ldr	r2, [r3, #0]
 800b7a0:	ea40 0301 	orr.w	r3, r0, r1
 800b7a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b7a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7aa:	689a      	ldr	r2, [r3, #8]
 800b7ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7b0:	691b      	ldr	r3, [r3, #16]
 800b7b2:	431a      	orrs	r2, r3
 800b7b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7b8:	695b      	ldr	r3, [r3, #20]
 800b7ba:	431a      	orrs	r2, r3
 800b7bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7c0:	69db      	ldr	r3, [r3, #28]
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b7c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	68db      	ldr	r3, [r3, #12]
 800b7d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b7d4:	f021 010c 	bic.w	r1, r1, #12
 800b7d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b7e2:	430b      	orrs	r3, r1
 800b7e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b7e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	695b      	ldr	r3, [r3, #20]
 800b7ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b7f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7f6:	6999      	ldr	r1, [r3, #24]
 800b7f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7fc:	681a      	ldr	r2, [r3, #0]
 800b7fe:	ea40 0301 	orr.w	r3, r0, r1
 800b802:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b808:	681a      	ldr	r2, [r3, #0]
 800b80a:	4b8f      	ldr	r3, [pc, #572]	; (800ba48 <UART_SetConfig+0x2cc>)
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d005      	beq.n	800b81c <UART_SetConfig+0xa0>
 800b810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	4b8d      	ldr	r3, [pc, #564]	; (800ba4c <UART_SetConfig+0x2d0>)
 800b818:	429a      	cmp	r2, r3
 800b81a:	d104      	bne.n	800b826 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b81c:	f7fe fbca 	bl	8009fb4 <HAL_RCC_GetPCLK2Freq>
 800b820:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b824:	e003      	b.n	800b82e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b826:	f7fe fbb1 	bl	8009f8c <HAL_RCC_GetPCLK1Freq>
 800b82a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b82e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b832:	69db      	ldr	r3, [r3, #28]
 800b834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b838:	f040 810c 	bne.w	800ba54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b83c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b840:	2200      	movs	r2, #0
 800b842:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b846:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b84a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b84e:	4622      	mov	r2, r4
 800b850:	462b      	mov	r3, r5
 800b852:	1891      	adds	r1, r2, r2
 800b854:	65b9      	str	r1, [r7, #88]	; 0x58
 800b856:	415b      	adcs	r3, r3
 800b858:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b85a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b85e:	4621      	mov	r1, r4
 800b860:	eb12 0801 	adds.w	r8, r2, r1
 800b864:	4629      	mov	r1, r5
 800b866:	eb43 0901 	adc.w	r9, r3, r1
 800b86a:	f04f 0200 	mov.w	r2, #0
 800b86e:	f04f 0300 	mov.w	r3, #0
 800b872:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b876:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b87a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b87e:	4690      	mov	r8, r2
 800b880:	4699      	mov	r9, r3
 800b882:	4623      	mov	r3, r4
 800b884:	eb18 0303 	adds.w	r3, r8, r3
 800b888:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b88c:	462b      	mov	r3, r5
 800b88e:	eb49 0303 	adc.w	r3, r9, r3
 800b892:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	2200      	movs	r2, #0
 800b89e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b8a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b8a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	18db      	adds	r3, r3, r3
 800b8ae:	653b      	str	r3, [r7, #80]	; 0x50
 800b8b0:	4613      	mov	r3, r2
 800b8b2:	eb42 0303 	adc.w	r3, r2, r3
 800b8b6:	657b      	str	r3, [r7, #84]	; 0x54
 800b8b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b8bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b8c0:	f7f5 f972 	bl	8000ba8 <__aeabi_uldivmod>
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	4b61      	ldr	r3, [pc, #388]	; (800ba50 <UART_SetConfig+0x2d4>)
 800b8ca:	fba3 2302 	umull	r2, r3, r3, r2
 800b8ce:	095b      	lsrs	r3, r3, #5
 800b8d0:	011c      	lsls	r4, r3, #4
 800b8d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b8dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b8e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b8e4:	4642      	mov	r2, r8
 800b8e6:	464b      	mov	r3, r9
 800b8e8:	1891      	adds	r1, r2, r2
 800b8ea:	64b9      	str	r1, [r7, #72]	; 0x48
 800b8ec:	415b      	adcs	r3, r3
 800b8ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b8f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b8f4:	4641      	mov	r1, r8
 800b8f6:	eb12 0a01 	adds.w	sl, r2, r1
 800b8fa:	4649      	mov	r1, r9
 800b8fc:	eb43 0b01 	adc.w	fp, r3, r1
 800b900:	f04f 0200 	mov.w	r2, #0
 800b904:	f04f 0300 	mov.w	r3, #0
 800b908:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b90c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b910:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b914:	4692      	mov	sl, r2
 800b916:	469b      	mov	fp, r3
 800b918:	4643      	mov	r3, r8
 800b91a:	eb1a 0303 	adds.w	r3, sl, r3
 800b91e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b922:	464b      	mov	r3, r9
 800b924:	eb4b 0303 	adc.w	r3, fp, r3
 800b928:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b92c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	2200      	movs	r2, #0
 800b934:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b938:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b93c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b940:	460b      	mov	r3, r1
 800b942:	18db      	adds	r3, r3, r3
 800b944:	643b      	str	r3, [r7, #64]	; 0x40
 800b946:	4613      	mov	r3, r2
 800b948:	eb42 0303 	adc.w	r3, r2, r3
 800b94c:	647b      	str	r3, [r7, #68]	; 0x44
 800b94e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b952:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b956:	f7f5 f927 	bl	8000ba8 <__aeabi_uldivmod>
 800b95a:	4602      	mov	r2, r0
 800b95c:	460b      	mov	r3, r1
 800b95e:	4611      	mov	r1, r2
 800b960:	4b3b      	ldr	r3, [pc, #236]	; (800ba50 <UART_SetConfig+0x2d4>)
 800b962:	fba3 2301 	umull	r2, r3, r3, r1
 800b966:	095b      	lsrs	r3, r3, #5
 800b968:	2264      	movs	r2, #100	; 0x64
 800b96a:	fb02 f303 	mul.w	r3, r2, r3
 800b96e:	1acb      	subs	r3, r1, r3
 800b970:	00db      	lsls	r3, r3, #3
 800b972:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b976:	4b36      	ldr	r3, [pc, #216]	; (800ba50 <UART_SetConfig+0x2d4>)
 800b978:	fba3 2302 	umull	r2, r3, r3, r2
 800b97c:	095b      	lsrs	r3, r3, #5
 800b97e:	005b      	lsls	r3, r3, #1
 800b980:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b984:	441c      	add	r4, r3
 800b986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b98a:	2200      	movs	r2, #0
 800b98c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b990:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b994:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b998:	4642      	mov	r2, r8
 800b99a:	464b      	mov	r3, r9
 800b99c:	1891      	adds	r1, r2, r2
 800b99e:	63b9      	str	r1, [r7, #56]	; 0x38
 800b9a0:	415b      	adcs	r3, r3
 800b9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b9a8:	4641      	mov	r1, r8
 800b9aa:	1851      	adds	r1, r2, r1
 800b9ac:	6339      	str	r1, [r7, #48]	; 0x30
 800b9ae:	4649      	mov	r1, r9
 800b9b0:	414b      	adcs	r3, r1
 800b9b2:	637b      	str	r3, [r7, #52]	; 0x34
 800b9b4:	f04f 0200 	mov.w	r2, #0
 800b9b8:	f04f 0300 	mov.w	r3, #0
 800b9bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b9c0:	4659      	mov	r1, fp
 800b9c2:	00cb      	lsls	r3, r1, #3
 800b9c4:	4651      	mov	r1, sl
 800b9c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b9ca:	4651      	mov	r1, sl
 800b9cc:	00ca      	lsls	r2, r1, #3
 800b9ce:	4610      	mov	r0, r2
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	4642      	mov	r2, r8
 800b9d6:	189b      	adds	r3, r3, r2
 800b9d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b9dc:	464b      	mov	r3, r9
 800b9de:	460a      	mov	r2, r1
 800b9e0:	eb42 0303 	adc.w	r3, r2, r3
 800b9e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b9e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9ec:	685b      	ldr	r3, [r3, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b9f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b9f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	18db      	adds	r3, r3, r3
 800ba00:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba02:	4613      	mov	r3, r2
 800ba04:	eb42 0303 	adc.w	r3, r2, r3
 800ba08:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ba0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ba12:	f7f5 f8c9 	bl	8000ba8 <__aeabi_uldivmod>
 800ba16:	4602      	mov	r2, r0
 800ba18:	460b      	mov	r3, r1
 800ba1a:	4b0d      	ldr	r3, [pc, #52]	; (800ba50 <UART_SetConfig+0x2d4>)
 800ba1c:	fba3 1302 	umull	r1, r3, r3, r2
 800ba20:	095b      	lsrs	r3, r3, #5
 800ba22:	2164      	movs	r1, #100	; 0x64
 800ba24:	fb01 f303 	mul.w	r3, r1, r3
 800ba28:	1ad3      	subs	r3, r2, r3
 800ba2a:	00db      	lsls	r3, r3, #3
 800ba2c:	3332      	adds	r3, #50	; 0x32
 800ba2e:	4a08      	ldr	r2, [pc, #32]	; (800ba50 <UART_SetConfig+0x2d4>)
 800ba30:	fba2 2303 	umull	r2, r3, r2, r3
 800ba34:	095b      	lsrs	r3, r3, #5
 800ba36:	f003 0207 	and.w	r2, r3, #7
 800ba3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4422      	add	r2, r4
 800ba42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ba44:	e106      	b.n	800bc54 <UART_SetConfig+0x4d8>
 800ba46:	bf00      	nop
 800ba48:	40011000 	.word	0x40011000
 800ba4c:	40011400 	.word	0x40011400
 800ba50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ba54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba58:	2200      	movs	r2, #0
 800ba5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ba5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ba62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ba66:	4642      	mov	r2, r8
 800ba68:	464b      	mov	r3, r9
 800ba6a:	1891      	adds	r1, r2, r2
 800ba6c:	6239      	str	r1, [r7, #32]
 800ba6e:	415b      	adcs	r3, r3
 800ba70:	627b      	str	r3, [r7, #36]	; 0x24
 800ba72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ba76:	4641      	mov	r1, r8
 800ba78:	1854      	adds	r4, r2, r1
 800ba7a:	4649      	mov	r1, r9
 800ba7c:	eb43 0501 	adc.w	r5, r3, r1
 800ba80:	f04f 0200 	mov.w	r2, #0
 800ba84:	f04f 0300 	mov.w	r3, #0
 800ba88:	00eb      	lsls	r3, r5, #3
 800ba8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ba8e:	00e2      	lsls	r2, r4, #3
 800ba90:	4614      	mov	r4, r2
 800ba92:	461d      	mov	r5, r3
 800ba94:	4643      	mov	r3, r8
 800ba96:	18e3      	adds	r3, r4, r3
 800ba98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ba9c:	464b      	mov	r3, r9
 800ba9e:	eb45 0303 	adc.w	r3, r5, r3
 800baa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800baa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	2200      	movs	r2, #0
 800baae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bab2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bab6:	f04f 0200 	mov.w	r2, #0
 800baba:	f04f 0300 	mov.w	r3, #0
 800babe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bac2:	4629      	mov	r1, r5
 800bac4:	008b      	lsls	r3, r1, #2
 800bac6:	4621      	mov	r1, r4
 800bac8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bacc:	4621      	mov	r1, r4
 800bace:	008a      	lsls	r2, r1, #2
 800bad0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bad4:	f7f5 f868 	bl	8000ba8 <__aeabi_uldivmod>
 800bad8:	4602      	mov	r2, r0
 800bada:	460b      	mov	r3, r1
 800badc:	4b60      	ldr	r3, [pc, #384]	; (800bc60 <UART_SetConfig+0x4e4>)
 800bade:	fba3 2302 	umull	r2, r3, r3, r2
 800bae2:	095b      	lsrs	r3, r3, #5
 800bae4:	011c      	lsls	r4, r3, #4
 800bae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800baea:	2200      	movs	r2, #0
 800baec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800baf0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800baf4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800baf8:	4642      	mov	r2, r8
 800bafa:	464b      	mov	r3, r9
 800bafc:	1891      	adds	r1, r2, r2
 800bafe:	61b9      	str	r1, [r7, #24]
 800bb00:	415b      	adcs	r3, r3
 800bb02:	61fb      	str	r3, [r7, #28]
 800bb04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bb08:	4641      	mov	r1, r8
 800bb0a:	1851      	adds	r1, r2, r1
 800bb0c:	6139      	str	r1, [r7, #16]
 800bb0e:	4649      	mov	r1, r9
 800bb10:	414b      	adcs	r3, r1
 800bb12:	617b      	str	r3, [r7, #20]
 800bb14:	f04f 0200 	mov.w	r2, #0
 800bb18:	f04f 0300 	mov.w	r3, #0
 800bb1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bb20:	4659      	mov	r1, fp
 800bb22:	00cb      	lsls	r3, r1, #3
 800bb24:	4651      	mov	r1, sl
 800bb26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bb2a:	4651      	mov	r1, sl
 800bb2c:	00ca      	lsls	r2, r1, #3
 800bb2e:	4610      	mov	r0, r2
 800bb30:	4619      	mov	r1, r3
 800bb32:	4603      	mov	r3, r0
 800bb34:	4642      	mov	r2, r8
 800bb36:	189b      	adds	r3, r3, r2
 800bb38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bb3c:	464b      	mov	r3, r9
 800bb3e:	460a      	mov	r2, r1
 800bb40:	eb42 0303 	adc.w	r3, r2, r3
 800bb44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bb48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb4c:	685b      	ldr	r3, [r3, #4]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	67bb      	str	r3, [r7, #120]	; 0x78
 800bb52:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bb54:	f04f 0200 	mov.w	r2, #0
 800bb58:	f04f 0300 	mov.w	r3, #0
 800bb5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bb60:	4649      	mov	r1, r9
 800bb62:	008b      	lsls	r3, r1, #2
 800bb64:	4641      	mov	r1, r8
 800bb66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb6a:	4641      	mov	r1, r8
 800bb6c:	008a      	lsls	r2, r1, #2
 800bb6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bb72:	f7f5 f819 	bl	8000ba8 <__aeabi_uldivmod>
 800bb76:	4602      	mov	r2, r0
 800bb78:	460b      	mov	r3, r1
 800bb7a:	4611      	mov	r1, r2
 800bb7c:	4b38      	ldr	r3, [pc, #224]	; (800bc60 <UART_SetConfig+0x4e4>)
 800bb7e:	fba3 2301 	umull	r2, r3, r3, r1
 800bb82:	095b      	lsrs	r3, r3, #5
 800bb84:	2264      	movs	r2, #100	; 0x64
 800bb86:	fb02 f303 	mul.w	r3, r2, r3
 800bb8a:	1acb      	subs	r3, r1, r3
 800bb8c:	011b      	lsls	r3, r3, #4
 800bb8e:	3332      	adds	r3, #50	; 0x32
 800bb90:	4a33      	ldr	r2, [pc, #204]	; (800bc60 <UART_SetConfig+0x4e4>)
 800bb92:	fba2 2303 	umull	r2, r3, r2, r3
 800bb96:	095b      	lsrs	r3, r3, #5
 800bb98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb9c:	441c      	add	r4, r3
 800bb9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bba2:	2200      	movs	r2, #0
 800bba4:	673b      	str	r3, [r7, #112]	; 0x70
 800bba6:	677a      	str	r2, [r7, #116]	; 0x74
 800bba8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bbac:	4642      	mov	r2, r8
 800bbae:	464b      	mov	r3, r9
 800bbb0:	1891      	adds	r1, r2, r2
 800bbb2:	60b9      	str	r1, [r7, #8]
 800bbb4:	415b      	adcs	r3, r3
 800bbb6:	60fb      	str	r3, [r7, #12]
 800bbb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bbbc:	4641      	mov	r1, r8
 800bbbe:	1851      	adds	r1, r2, r1
 800bbc0:	6039      	str	r1, [r7, #0]
 800bbc2:	4649      	mov	r1, r9
 800bbc4:	414b      	adcs	r3, r1
 800bbc6:	607b      	str	r3, [r7, #4]
 800bbc8:	f04f 0200 	mov.w	r2, #0
 800bbcc:	f04f 0300 	mov.w	r3, #0
 800bbd0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bbd4:	4659      	mov	r1, fp
 800bbd6:	00cb      	lsls	r3, r1, #3
 800bbd8:	4651      	mov	r1, sl
 800bbda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bbde:	4651      	mov	r1, sl
 800bbe0:	00ca      	lsls	r2, r1, #3
 800bbe2:	4610      	mov	r0, r2
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	4642      	mov	r2, r8
 800bbea:	189b      	adds	r3, r3, r2
 800bbec:	66bb      	str	r3, [r7, #104]	; 0x68
 800bbee:	464b      	mov	r3, r9
 800bbf0:	460a      	mov	r2, r1
 800bbf2:	eb42 0303 	adc.w	r3, r2, r3
 800bbf6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bbf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	663b      	str	r3, [r7, #96]	; 0x60
 800bc02:	667a      	str	r2, [r7, #100]	; 0x64
 800bc04:	f04f 0200 	mov.w	r2, #0
 800bc08:	f04f 0300 	mov.w	r3, #0
 800bc0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bc10:	4649      	mov	r1, r9
 800bc12:	008b      	lsls	r3, r1, #2
 800bc14:	4641      	mov	r1, r8
 800bc16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc1a:	4641      	mov	r1, r8
 800bc1c:	008a      	lsls	r2, r1, #2
 800bc1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bc22:	f7f4 ffc1 	bl	8000ba8 <__aeabi_uldivmod>
 800bc26:	4602      	mov	r2, r0
 800bc28:	460b      	mov	r3, r1
 800bc2a:	4b0d      	ldr	r3, [pc, #52]	; (800bc60 <UART_SetConfig+0x4e4>)
 800bc2c:	fba3 1302 	umull	r1, r3, r3, r2
 800bc30:	095b      	lsrs	r3, r3, #5
 800bc32:	2164      	movs	r1, #100	; 0x64
 800bc34:	fb01 f303 	mul.w	r3, r1, r3
 800bc38:	1ad3      	subs	r3, r2, r3
 800bc3a:	011b      	lsls	r3, r3, #4
 800bc3c:	3332      	adds	r3, #50	; 0x32
 800bc3e:	4a08      	ldr	r2, [pc, #32]	; (800bc60 <UART_SetConfig+0x4e4>)
 800bc40:	fba2 2303 	umull	r2, r3, r2, r3
 800bc44:	095b      	lsrs	r3, r3, #5
 800bc46:	f003 020f 	and.w	r2, r3, #15
 800bc4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4422      	add	r2, r4
 800bc52:	609a      	str	r2, [r3, #8]
}
 800bc54:	bf00      	nop
 800bc56:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc60:	51eb851f 	.word	0x51eb851f

0800bc64 <__NVIC_SetPriority>:
{
 800bc64:	b480      	push	{r7}
 800bc66:	b083      	sub	sp, #12
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	6039      	str	r1, [r7, #0]
 800bc6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bc70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	db0a      	blt.n	800bc8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	b2da      	uxtb	r2, r3
 800bc7c:	490c      	ldr	r1, [pc, #48]	; (800bcb0 <__NVIC_SetPriority+0x4c>)
 800bc7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc82:	0112      	lsls	r2, r2, #4
 800bc84:	b2d2      	uxtb	r2, r2
 800bc86:	440b      	add	r3, r1
 800bc88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bc8c:	e00a      	b.n	800bca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	b2da      	uxtb	r2, r3
 800bc92:	4908      	ldr	r1, [pc, #32]	; (800bcb4 <__NVIC_SetPriority+0x50>)
 800bc94:	79fb      	ldrb	r3, [r7, #7]
 800bc96:	f003 030f 	and.w	r3, r3, #15
 800bc9a:	3b04      	subs	r3, #4
 800bc9c:	0112      	lsls	r2, r2, #4
 800bc9e:	b2d2      	uxtb	r2, r2
 800bca0:	440b      	add	r3, r1
 800bca2:	761a      	strb	r2, [r3, #24]
}
 800bca4:	bf00      	nop
 800bca6:	370c      	adds	r7, #12
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr
 800bcb0:	e000e100 	.word	0xe000e100
 800bcb4:	e000ed00 	.word	0xe000ed00

0800bcb8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bcbc:	4b05      	ldr	r3, [pc, #20]	; (800bcd4 <SysTick_Handler+0x1c>)
 800bcbe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bcc0:	f001 fd28 	bl	800d714 <xTaskGetSchedulerState>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d001      	beq.n	800bcce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bcca:	f002 fb0d 	bl	800e2e8 <xPortSysTickHandler>
  }
}
 800bcce:	bf00      	nop
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	e000e010 	.word	0xe000e010

0800bcd8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bcdc:	2100      	movs	r1, #0
 800bcde:	f06f 0004 	mvn.w	r0, #4
 800bce2:	f7ff ffbf 	bl	800bc64 <__NVIC_SetPriority>
#endif
}
 800bce6:	bf00      	nop
 800bce8:	bd80      	pop	{r7, pc}
	...

0800bcec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bcec:	b480      	push	{r7}
 800bcee:	b083      	sub	sp, #12
 800bcf0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcf2:	f3ef 8305 	mrs	r3, IPSR
 800bcf6:	603b      	str	r3, [r7, #0]
  return(result);
 800bcf8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d003      	beq.n	800bd06 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bcfe:	f06f 0305 	mvn.w	r3, #5
 800bd02:	607b      	str	r3, [r7, #4]
 800bd04:	e00c      	b.n	800bd20 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bd06:	4b0a      	ldr	r3, [pc, #40]	; (800bd30 <osKernelInitialize+0x44>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d105      	bne.n	800bd1a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bd0e:	4b08      	ldr	r3, [pc, #32]	; (800bd30 <osKernelInitialize+0x44>)
 800bd10:	2201      	movs	r2, #1
 800bd12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bd14:	2300      	movs	r3, #0
 800bd16:	607b      	str	r3, [r7, #4]
 800bd18:	e002      	b.n	800bd20 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bd1a:	f04f 33ff 	mov.w	r3, #4294967295
 800bd1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bd20:	687b      	ldr	r3, [r7, #4]
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	370c      	adds	r7, #12
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr
 800bd2e:	bf00      	nop
 800bd30:	20000cf8 	.word	0x20000cf8

0800bd34 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd3a:	f3ef 8305 	mrs	r3, IPSR
 800bd3e:	603b      	str	r3, [r7, #0]
  return(result);
 800bd40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d003      	beq.n	800bd4e <osKernelStart+0x1a>
    stat = osErrorISR;
 800bd46:	f06f 0305 	mvn.w	r3, #5
 800bd4a:	607b      	str	r3, [r7, #4]
 800bd4c:	e010      	b.n	800bd70 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bd4e:	4b0b      	ldr	r3, [pc, #44]	; (800bd7c <osKernelStart+0x48>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	2b01      	cmp	r3, #1
 800bd54:	d109      	bne.n	800bd6a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bd56:	f7ff ffbf 	bl	800bcd8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bd5a:	4b08      	ldr	r3, [pc, #32]	; (800bd7c <osKernelStart+0x48>)
 800bd5c:	2202      	movs	r2, #2
 800bd5e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bd60:	f001 f87c 	bl	800ce5c <vTaskStartScheduler>
      stat = osOK;
 800bd64:	2300      	movs	r3, #0
 800bd66:	607b      	str	r3, [r7, #4]
 800bd68:	e002      	b.n	800bd70 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bd6a:	f04f 33ff 	mov.w	r3, #4294967295
 800bd6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bd70:	687b      	ldr	r3, [r7, #4]
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3708      	adds	r7, #8
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	20000cf8 	.word	0x20000cf8

0800bd80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b08e      	sub	sp, #56	; 0x38
 800bd84:	af04      	add	r7, sp, #16
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd90:	f3ef 8305 	mrs	r3, IPSR
 800bd94:	617b      	str	r3, [r7, #20]
  return(result);
 800bd96:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d17e      	bne.n	800be9a <osThreadNew+0x11a>
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d07b      	beq.n	800be9a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bda2:	2380      	movs	r3, #128	; 0x80
 800bda4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bda6:	2318      	movs	r3, #24
 800bda8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800bdae:	f04f 33ff 	mov.w	r3, #4294967295
 800bdb2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d045      	beq.n	800be46 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d002      	beq.n	800bdc8 <osThreadNew+0x48>
        name = attr->name;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	699b      	ldr	r3, [r3, #24]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d002      	beq.n	800bdd6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	699b      	ldr	r3, [r3, #24]
 800bdd4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bdd6:	69fb      	ldr	r3, [r7, #28]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d008      	beq.n	800bdee <osThreadNew+0x6e>
 800bddc:	69fb      	ldr	r3, [r7, #28]
 800bdde:	2b38      	cmp	r3, #56	; 0x38
 800bde0:	d805      	bhi.n	800bdee <osThreadNew+0x6e>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	f003 0301 	and.w	r3, r3, #1
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d001      	beq.n	800bdf2 <osThreadNew+0x72>
        return (NULL);
 800bdee:	2300      	movs	r3, #0
 800bdf0:	e054      	b.n	800be9c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	695b      	ldr	r3, [r3, #20]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d003      	beq.n	800be02 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	695b      	ldr	r3, [r3, #20]
 800bdfe:	089b      	lsrs	r3, r3, #2
 800be00:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	689b      	ldr	r3, [r3, #8]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00e      	beq.n	800be28 <osThreadNew+0xa8>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	68db      	ldr	r3, [r3, #12]
 800be0e:	2ba7      	cmp	r3, #167	; 0xa7
 800be10:	d90a      	bls.n	800be28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800be16:	2b00      	cmp	r3, #0
 800be18:	d006      	beq.n	800be28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	695b      	ldr	r3, [r3, #20]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d002      	beq.n	800be28 <osThreadNew+0xa8>
        mem = 1;
 800be22:	2301      	movs	r3, #1
 800be24:	61bb      	str	r3, [r7, #24]
 800be26:	e010      	b.n	800be4a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	689b      	ldr	r3, [r3, #8]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d10c      	bne.n	800be4a <osThreadNew+0xca>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	68db      	ldr	r3, [r3, #12]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d108      	bne.n	800be4a <osThreadNew+0xca>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	691b      	ldr	r3, [r3, #16]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d104      	bne.n	800be4a <osThreadNew+0xca>
          mem = 0;
 800be40:	2300      	movs	r3, #0
 800be42:	61bb      	str	r3, [r7, #24]
 800be44:	e001      	b.n	800be4a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800be46:	2300      	movs	r3, #0
 800be48:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800be4a:	69bb      	ldr	r3, [r7, #24]
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d110      	bne.n	800be72 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800be54:	687a      	ldr	r2, [r7, #4]
 800be56:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800be58:	9202      	str	r2, [sp, #8]
 800be5a:	9301      	str	r3, [sp, #4]
 800be5c:	69fb      	ldr	r3, [r7, #28]
 800be5e:	9300      	str	r3, [sp, #0]
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	6a3a      	ldr	r2, [r7, #32]
 800be64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be66:	68f8      	ldr	r0, [r7, #12]
 800be68:	f000 fe0c 	bl	800ca84 <xTaskCreateStatic>
 800be6c:	4603      	mov	r3, r0
 800be6e:	613b      	str	r3, [r7, #16]
 800be70:	e013      	b.n	800be9a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800be72:	69bb      	ldr	r3, [r7, #24]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d110      	bne.n	800be9a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800be78:	6a3b      	ldr	r3, [r7, #32]
 800be7a:	b29a      	uxth	r2, r3
 800be7c:	f107 0310 	add.w	r3, r7, #16
 800be80:	9301      	str	r3, [sp, #4]
 800be82:	69fb      	ldr	r3, [r7, #28]
 800be84:	9300      	str	r3, [sp, #0]
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be8a:	68f8      	ldr	r0, [r7, #12]
 800be8c:	f000 fe57 	bl	800cb3e <xTaskCreate>
 800be90:	4603      	mov	r3, r0
 800be92:	2b01      	cmp	r3, #1
 800be94:	d001      	beq.n	800be9a <osThreadNew+0x11a>
            hTask = NULL;
 800be96:	2300      	movs	r3, #0
 800be98:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800be9a:	693b      	ldr	r3, [r7, #16]
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3728      	adds	r7, #40	; 0x28
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800beac:	f3ef 8305 	mrs	r3, IPSR
 800beb0:	60bb      	str	r3, [r7, #8]
  return(result);
 800beb2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d003      	beq.n	800bec0 <osDelay+0x1c>
    stat = osErrorISR;
 800beb8:	f06f 0305 	mvn.w	r3, #5
 800bebc:	60fb      	str	r3, [r7, #12]
 800bebe:	e007      	b.n	800bed0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bec0:	2300      	movs	r3, #0
 800bec2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d002      	beq.n	800bed0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 ff92 	bl	800cdf4 <vTaskDelay>
    }
  }

  return (stat);
 800bed0:	68fb      	ldr	r3, [r7, #12]
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3710      	adds	r7, #16
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
	...

0800bedc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bedc:	b480      	push	{r7}
 800bede:	b085      	sub	sp, #20
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	60f8      	str	r0, [r7, #12]
 800bee4:	60b9      	str	r1, [r7, #8]
 800bee6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	4a07      	ldr	r2, [pc, #28]	; (800bf08 <vApplicationGetIdleTaskMemory+0x2c>)
 800beec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	4a06      	ldr	r2, [pc, #24]	; (800bf0c <vApplicationGetIdleTaskMemory+0x30>)
 800bef2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2280      	movs	r2, #128	; 0x80
 800bef8:	601a      	str	r2, [r3, #0]
}
 800befa:	bf00      	nop
 800befc:	3714      	adds	r7, #20
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr
 800bf06:	bf00      	nop
 800bf08:	20000cfc 	.word	0x20000cfc
 800bf0c:	20000da4 	.word	0x20000da4

0800bf10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bf10:	b480      	push	{r7}
 800bf12:	b085      	sub	sp, #20
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	60f8      	str	r0, [r7, #12]
 800bf18:	60b9      	str	r1, [r7, #8]
 800bf1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	4a07      	ldr	r2, [pc, #28]	; (800bf3c <vApplicationGetTimerTaskMemory+0x2c>)
 800bf20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	4a06      	ldr	r2, [pc, #24]	; (800bf40 <vApplicationGetTimerTaskMemory+0x30>)
 800bf26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bf2e:	601a      	str	r2, [r3, #0]
}
 800bf30:	bf00      	nop
 800bf32:	3714      	adds	r7, #20
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr
 800bf3c:	20000fa4 	.word	0x20000fa4
 800bf40:	2000104c 	.word	0x2000104c

0800bf44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bf44:	b480      	push	{r7}
 800bf46:	b083      	sub	sp, #12
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f103 0208 	add.w	r2, r3, #8
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f04f 32ff 	mov.w	r2, #4294967295
 800bf5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f103 0208 	add.w	r2, r3, #8
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f103 0208 	add.w	r2, r3, #8
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2200      	movs	r2, #0
 800bf76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bf78:	bf00      	nop
 800bf7a:	370c      	adds	r7, #12
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr

0800bf84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bf84:	b480      	push	{r7}
 800bf86:	b083      	sub	sp, #12
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bf92:	bf00      	nop
 800bf94:	370c      	adds	r7, #12
 800bf96:	46bd      	mov	sp, r7
 800bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9c:	4770      	bx	lr

0800bf9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf9e:	b480      	push	{r7}
 800bfa0:	b085      	sub	sp, #20
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
 800bfa6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	68fa      	ldr	r2, [r7, #12]
 800bfb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	689a      	ldr	r2, [r3, #8]
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	689b      	ldr	r3, [r3, #8]
 800bfc0:	683a      	ldr	r2, [r7, #0]
 800bfc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	683a      	ldr	r2, [r7, #0]
 800bfc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	1c5a      	adds	r2, r3, #1
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	601a      	str	r2, [r3, #0]
}
 800bfda:	bf00      	nop
 800bfdc:	3714      	adds	r7, #20
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe4:	4770      	bx	lr

0800bfe6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bfe6:	b480      	push	{r7}
 800bfe8:	b085      	sub	sp, #20
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	6078      	str	r0, [r7, #4]
 800bfee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bffc:	d103      	bne.n	800c006 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	691b      	ldr	r3, [r3, #16]
 800c002:	60fb      	str	r3, [r7, #12]
 800c004:	e00c      	b.n	800c020 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	3308      	adds	r3, #8
 800c00a:	60fb      	str	r3, [r7, #12]
 800c00c:	e002      	b.n	800c014 <vListInsert+0x2e>
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	60fb      	str	r3, [r7, #12]
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	68ba      	ldr	r2, [r7, #8]
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d2f6      	bcs.n	800c00e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	685a      	ldr	r2, [r3, #4]
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	685b      	ldr	r3, [r3, #4]
 800c02c:	683a      	ldr	r2, [r7, #0]
 800c02e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	68fa      	ldr	r2, [r7, #12]
 800c034:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	683a      	ldr	r2, [r7, #0]
 800c03a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	1c5a      	adds	r2, r3, #1
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	601a      	str	r2, [r3, #0]
}
 800c04c:	bf00      	nop
 800c04e:	3714      	adds	r7, #20
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr

0800c058 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c058:	b480      	push	{r7}
 800c05a:	b085      	sub	sp, #20
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	691b      	ldr	r3, [r3, #16]
 800c064:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	685b      	ldr	r3, [r3, #4]
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	6892      	ldr	r2, [r2, #8]
 800c06e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	689b      	ldr	r3, [r3, #8]
 800c074:	687a      	ldr	r2, [r7, #4]
 800c076:	6852      	ldr	r2, [r2, #4]
 800c078:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	687a      	ldr	r2, [r7, #4]
 800c080:	429a      	cmp	r2, r3
 800c082:	d103      	bne.n	800c08c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	689a      	ldr	r2, [r3, #8]
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2200      	movs	r2, #0
 800c090:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	1e5a      	subs	r2, r3, #1
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3714      	adds	r7, #20
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr

0800c0ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b084      	sub	sp, #16
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d10a      	bne.n	800c0d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c4:	f383 8811 	msr	BASEPRI, r3
 800c0c8:	f3bf 8f6f 	isb	sy
 800c0cc:	f3bf 8f4f 	dsb	sy
 800c0d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c0d2:	bf00      	nop
 800c0d4:	e7fe      	b.n	800c0d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c0d6:	f002 f875 	bl	800e1c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0e2:	68f9      	ldr	r1, [r7, #12]
 800c0e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c0e6:	fb01 f303 	mul.w	r3, r1, r3
 800c0ea:	441a      	add	r2, r3
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c106:	3b01      	subs	r3, #1
 800c108:	68f9      	ldr	r1, [r7, #12]
 800c10a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c10c:	fb01 f303 	mul.w	r3, r1, r3
 800c110:	441a      	add	r2, r3
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	22ff      	movs	r2, #255	; 0xff
 800c11a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	22ff      	movs	r2, #255	; 0xff
 800c122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d114      	bne.n	800c156 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	691b      	ldr	r3, [r3, #16]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d01a      	beq.n	800c16a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	3310      	adds	r3, #16
 800c138:	4618      	mov	r0, r3
 800c13a:	f001 f929 	bl	800d390 <xTaskRemoveFromEventList>
 800c13e:	4603      	mov	r3, r0
 800c140:	2b00      	cmp	r3, #0
 800c142:	d012      	beq.n	800c16a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c144:	4b0c      	ldr	r3, [pc, #48]	; (800c178 <xQueueGenericReset+0xcc>)
 800c146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c14a:	601a      	str	r2, [r3, #0]
 800c14c:	f3bf 8f4f 	dsb	sy
 800c150:	f3bf 8f6f 	isb	sy
 800c154:	e009      	b.n	800c16a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	3310      	adds	r3, #16
 800c15a:	4618      	mov	r0, r3
 800c15c:	f7ff fef2 	bl	800bf44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	3324      	adds	r3, #36	; 0x24
 800c164:	4618      	mov	r0, r3
 800c166:	f7ff feed 	bl	800bf44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c16a:	f002 f85b 	bl	800e224 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c16e:	2301      	movs	r3, #1
}
 800c170:	4618      	mov	r0, r3
 800c172:	3710      	adds	r7, #16
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}
 800c178:	e000ed04 	.word	0xe000ed04

0800c17c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b08e      	sub	sp, #56	; 0x38
 800c180:	af02      	add	r7, sp, #8
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	607a      	str	r2, [r7, #4]
 800c188:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d10a      	bne.n	800c1a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c194:	f383 8811 	msr	BASEPRI, r3
 800c198:	f3bf 8f6f 	isb	sy
 800c19c:	f3bf 8f4f 	dsb	sy
 800c1a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c1a2:	bf00      	nop
 800c1a4:	e7fe      	b.n	800c1a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d10a      	bne.n	800c1c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b0:	f383 8811 	msr	BASEPRI, r3
 800c1b4:	f3bf 8f6f 	isb	sy
 800c1b8:	f3bf 8f4f 	dsb	sy
 800c1bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c1be:	bf00      	nop
 800c1c0:	e7fe      	b.n	800c1c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d002      	beq.n	800c1ce <xQueueGenericCreateStatic+0x52>
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d001      	beq.n	800c1d2 <xQueueGenericCreateStatic+0x56>
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e000      	b.n	800c1d4 <xQueueGenericCreateStatic+0x58>
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d10a      	bne.n	800c1ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1dc:	f383 8811 	msr	BASEPRI, r3
 800c1e0:	f3bf 8f6f 	isb	sy
 800c1e4:	f3bf 8f4f 	dsb	sy
 800c1e8:	623b      	str	r3, [r7, #32]
}
 800c1ea:	bf00      	nop
 800c1ec:	e7fe      	b.n	800c1ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d102      	bne.n	800c1fa <xQueueGenericCreateStatic+0x7e>
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d101      	bne.n	800c1fe <xQueueGenericCreateStatic+0x82>
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	e000      	b.n	800c200 <xQueueGenericCreateStatic+0x84>
 800c1fe:	2300      	movs	r3, #0
 800c200:	2b00      	cmp	r3, #0
 800c202:	d10a      	bne.n	800c21a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c208:	f383 8811 	msr	BASEPRI, r3
 800c20c:	f3bf 8f6f 	isb	sy
 800c210:	f3bf 8f4f 	dsb	sy
 800c214:	61fb      	str	r3, [r7, #28]
}
 800c216:	bf00      	nop
 800c218:	e7fe      	b.n	800c218 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c21a:	2350      	movs	r3, #80	; 0x50
 800c21c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	2b50      	cmp	r3, #80	; 0x50
 800c222:	d00a      	beq.n	800c23a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c228:	f383 8811 	msr	BASEPRI, r3
 800c22c:	f3bf 8f6f 	isb	sy
 800c230:	f3bf 8f4f 	dsb	sy
 800c234:	61bb      	str	r3, [r7, #24]
}
 800c236:	bf00      	nop
 800c238:	e7fe      	b.n	800c238 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c23a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c242:	2b00      	cmp	r3, #0
 800c244:	d00d      	beq.n	800c262 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c248:	2201      	movs	r2, #1
 800c24a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c24e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c254:	9300      	str	r3, [sp, #0]
 800c256:	4613      	mov	r3, r2
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	68b9      	ldr	r1, [r7, #8]
 800c25c:	68f8      	ldr	r0, [r7, #12]
 800c25e:	f000 f805 	bl	800c26c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c264:	4618      	mov	r0, r3
 800c266:	3730      	adds	r7, #48	; 0x30
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	60f8      	str	r0, [r7, #12]
 800c274:	60b9      	str	r1, [r7, #8]
 800c276:	607a      	str	r2, [r7, #4]
 800c278:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d103      	bne.n	800c288 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c280:	69bb      	ldr	r3, [r7, #24]
 800c282:	69ba      	ldr	r2, [r7, #24]
 800c284:	601a      	str	r2, [r3, #0]
 800c286:	e002      	b.n	800c28e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c288:	69bb      	ldr	r3, [r7, #24]
 800c28a:	687a      	ldr	r2, [r7, #4]
 800c28c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c28e:	69bb      	ldr	r3, [r7, #24]
 800c290:	68fa      	ldr	r2, [r7, #12]
 800c292:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c294:	69bb      	ldr	r3, [r7, #24]
 800c296:	68ba      	ldr	r2, [r7, #8]
 800c298:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c29a:	2101      	movs	r1, #1
 800c29c:	69b8      	ldr	r0, [r7, #24]
 800c29e:	f7ff ff05 	bl	800c0ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c2a2:	69bb      	ldr	r3, [r7, #24]
 800c2a4:	78fa      	ldrb	r2, [r7, #3]
 800c2a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c2aa:	bf00      	nop
 800c2ac:	3710      	adds	r7, #16
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
	...

0800c2b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b08e      	sub	sp, #56	; 0x38
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	607a      	str	r2, [r7, #4]
 800c2c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d10a      	bne.n	800c2e6 <xQueueGenericSend+0x32>
	__asm volatile
 800c2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d4:	f383 8811 	msr	BASEPRI, r3
 800c2d8:	f3bf 8f6f 	isb	sy
 800c2dc:	f3bf 8f4f 	dsb	sy
 800c2e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c2e2:	bf00      	nop
 800c2e4:	e7fe      	b.n	800c2e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d103      	bne.n	800c2f4 <xQueueGenericSend+0x40>
 800c2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d101      	bne.n	800c2f8 <xQueueGenericSend+0x44>
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	e000      	b.n	800c2fa <xQueueGenericSend+0x46>
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d10a      	bne.n	800c314 <xQueueGenericSend+0x60>
	__asm volatile
 800c2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c302:	f383 8811 	msr	BASEPRI, r3
 800c306:	f3bf 8f6f 	isb	sy
 800c30a:	f3bf 8f4f 	dsb	sy
 800c30e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c310:	bf00      	nop
 800c312:	e7fe      	b.n	800c312 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	2b02      	cmp	r3, #2
 800c318:	d103      	bne.n	800c322 <xQueueGenericSend+0x6e>
 800c31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c31e:	2b01      	cmp	r3, #1
 800c320:	d101      	bne.n	800c326 <xQueueGenericSend+0x72>
 800c322:	2301      	movs	r3, #1
 800c324:	e000      	b.n	800c328 <xQueueGenericSend+0x74>
 800c326:	2300      	movs	r3, #0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d10a      	bne.n	800c342 <xQueueGenericSend+0x8e>
	__asm volatile
 800c32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c330:	f383 8811 	msr	BASEPRI, r3
 800c334:	f3bf 8f6f 	isb	sy
 800c338:	f3bf 8f4f 	dsb	sy
 800c33c:	623b      	str	r3, [r7, #32]
}
 800c33e:	bf00      	nop
 800c340:	e7fe      	b.n	800c340 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c342:	f001 f9e7 	bl	800d714 <xTaskGetSchedulerState>
 800c346:	4603      	mov	r3, r0
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d102      	bne.n	800c352 <xQueueGenericSend+0x9e>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d101      	bne.n	800c356 <xQueueGenericSend+0xa2>
 800c352:	2301      	movs	r3, #1
 800c354:	e000      	b.n	800c358 <xQueueGenericSend+0xa4>
 800c356:	2300      	movs	r3, #0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d10a      	bne.n	800c372 <xQueueGenericSend+0xbe>
	__asm volatile
 800c35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c360:	f383 8811 	msr	BASEPRI, r3
 800c364:	f3bf 8f6f 	isb	sy
 800c368:	f3bf 8f4f 	dsb	sy
 800c36c:	61fb      	str	r3, [r7, #28]
}
 800c36e:	bf00      	nop
 800c370:	e7fe      	b.n	800c370 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c372:	f001 ff27 	bl	800e1c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c37e:	429a      	cmp	r2, r3
 800c380:	d302      	bcc.n	800c388 <xQueueGenericSend+0xd4>
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	2b02      	cmp	r3, #2
 800c386:	d129      	bne.n	800c3dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c388:	683a      	ldr	r2, [r7, #0]
 800c38a:	68b9      	ldr	r1, [r7, #8]
 800c38c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c38e:	f000 fa0b 	bl	800c7a8 <prvCopyDataToQueue>
 800c392:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d010      	beq.n	800c3be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c39e:	3324      	adds	r3, #36	; 0x24
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f000 fff5 	bl	800d390 <xTaskRemoveFromEventList>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d013      	beq.n	800c3d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c3ac:	4b3f      	ldr	r3, [pc, #252]	; (800c4ac <xQueueGenericSend+0x1f8>)
 800c3ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3b2:	601a      	str	r2, [r3, #0]
 800c3b4:	f3bf 8f4f 	dsb	sy
 800c3b8:	f3bf 8f6f 	isb	sy
 800c3bc:	e00a      	b.n	800c3d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d007      	beq.n	800c3d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c3c4:	4b39      	ldr	r3, [pc, #228]	; (800c4ac <xQueueGenericSend+0x1f8>)
 800c3c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3ca:	601a      	str	r2, [r3, #0]
 800c3cc:	f3bf 8f4f 	dsb	sy
 800c3d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c3d4:	f001 ff26 	bl	800e224 <vPortExitCritical>
				return pdPASS;
 800c3d8:	2301      	movs	r3, #1
 800c3da:	e063      	b.n	800c4a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d103      	bne.n	800c3ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c3e2:	f001 ff1f 	bl	800e224 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	e05c      	b.n	800c4a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c3ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d106      	bne.n	800c3fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c3f0:	f107 0314 	add.w	r3, r7, #20
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f001 f82f 	bl	800d458 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c3fe:	f001 ff11 	bl	800e224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c402:	f000 fd9b 	bl	800cf3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c406:	f001 fedd 	bl	800e1c4 <vPortEnterCritical>
 800c40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c410:	b25b      	sxtb	r3, r3
 800c412:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c416:	d103      	bne.n	800c420 <xQueueGenericSend+0x16c>
 800c418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41a:	2200      	movs	r2, #0
 800c41c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c422:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c426:	b25b      	sxtb	r3, r3
 800c428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c42c:	d103      	bne.n	800c436 <xQueueGenericSend+0x182>
 800c42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c430:	2200      	movs	r2, #0
 800c432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c436:	f001 fef5 	bl	800e224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c43a:	1d3a      	adds	r2, r7, #4
 800c43c:	f107 0314 	add.w	r3, r7, #20
 800c440:	4611      	mov	r1, r2
 800c442:	4618      	mov	r0, r3
 800c444:	f001 f81e 	bl	800d484 <xTaskCheckForTimeOut>
 800c448:	4603      	mov	r3, r0
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d124      	bne.n	800c498 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c44e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c450:	f000 faa2 	bl	800c998 <prvIsQueueFull>
 800c454:	4603      	mov	r3, r0
 800c456:	2b00      	cmp	r3, #0
 800c458:	d018      	beq.n	800c48c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45c:	3310      	adds	r3, #16
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	4611      	mov	r1, r2
 800c462:	4618      	mov	r0, r3
 800c464:	f000 ff44 	bl	800d2f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c46a:	f000 fa2d 	bl	800c8c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c46e:	f000 fd73 	bl	800cf58 <xTaskResumeAll>
 800c472:	4603      	mov	r3, r0
 800c474:	2b00      	cmp	r3, #0
 800c476:	f47f af7c 	bne.w	800c372 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c47a:	4b0c      	ldr	r3, [pc, #48]	; (800c4ac <xQueueGenericSend+0x1f8>)
 800c47c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c480:	601a      	str	r2, [r3, #0]
 800c482:	f3bf 8f4f 	dsb	sy
 800c486:	f3bf 8f6f 	isb	sy
 800c48a:	e772      	b.n	800c372 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c48c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c48e:	f000 fa1b 	bl	800c8c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c492:	f000 fd61 	bl	800cf58 <xTaskResumeAll>
 800c496:	e76c      	b.n	800c372 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c49a:	f000 fa15 	bl	800c8c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c49e:	f000 fd5b 	bl	800cf58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c4a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3738      	adds	r7, #56	; 0x38
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}
 800c4ac:	e000ed04 	.word	0xe000ed04

0800c4b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b090      	sub	sp, #64	; 0x40
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	60f8      	str	r0, [r7, #12]
 800c4b8:	60b9      	str	r1, [r7, #8]
 800c4ba:	607a      	str	r2, [r7, #4]
 800c4bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d10a      	bne.n	800c4de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4cc:	f383 8811 	msr	BASEPRI, r3
 800c4d0:	f3bf 8f6f 	isb	sy
 800c4d4:	f3bf 8f4f 	dsb	sy
 800c4d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c4da:	bf00      	nop
 800c4dc:	e7fe      	b.n	800c4dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d103      	bne.n	800c4ec <xQueueGenericSendFromISR+0x3c>
 800c4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d101      	bne.n	800c4f0 <xQueueGenericSendFromISR+0x40>
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	e000      	b.n	800c4f2 <xQueueGenericSendFromISR+0x42>
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d10a      	bne.n	800c50c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4fa:	f383 8811 	msr	BASEPRI, r3
 800c4fe:	f3bf 8f6f 	isb	sy
 800c502:	f3bf 8f4f 	dsb	sy
 800c506:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c508:	bf00      	nop
 800c50a:	e7fe      	b.n	800c50a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	2b02      	cmp	r3, #2
 800c510:	d103      	bne.n	800c51a <xQueueGenericSendFromISR+0x6a>
 800c512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c516:	2b01      	cmp	r3, #1
 800c518:	d101      	bne.n	800c51e <xQueueGenericSendFromISR+0x6e>
 800c51a:	2301      	movs	r3, #1
 800c51c:	e000      	b.n	800c520 <xQueueGenericSendFromISR+0x70>
 800c51e:	2300      	movs	r3, #0
 800c520:	2b00      	cmp	r3, #0
 800c522:	d10a      	bne.n	800c53a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c528:	f383 8811 	msr	BASEPRI, r3
 800c52c:	f3bf 8f6f 	isb	sy
 800c530:	f3bf 8f4f 	dsb	sy
 800c534:	623b      	str	r3, [r7, #32]
}
 800c536:	bf00      	nop
 800c538:	e7fe      	b.n	800c538 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c53a:	f001 ff25 	bl	800e388 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c53e:	f3ef 8211 	mrs	r2, BASEPRI
 800c542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c546:	f383 8811 	msr	BASEPRI, r3
 800c54a:	f3bf 8f6f 	isb	sy
 800c54e:	f3bf 8f4f 	dsb	sy
 800c552:	61fa      	str	r2, [r7, #28]
 800c554:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c556:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c558:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c55c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c562:	429a      	cmp	r2, r3
 800c564:	d302      	bcc.n	800c56c <xQueueGenericSendFromISR+0xbc>
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	2b02      	cmp	r3, #2
 800c56a:	d12f      	bne.n	800c5cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c56e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c57a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c57c:	683a      	ldr	r2, [r7, #0]
 800c57e:	68b9      	ldr	r1, [r7, #8]
 800c580:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c582:	f000 f911 	bl	800c7a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c586:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c58e:	d112      	bne.n	800c5b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c594:	2b00      	cmp	r3, #0
 800c596:	d016      	beq.n	800c5c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c59a:	3324      	adds	r3, #36	; 0x24
 800c59c:	4618      	mov	r0, r3
 800c59e:	f000 fef7 	bl	800d390 <xTaskRemoveFromEventList>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d00e      	beq.n	800c5c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d00b      	beq.n	800c5c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	601a      	str	r2, [r3, #0]
 800c5b4:	e007      	b.n	800c5c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c5b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	b2db      	uxtb	r3, r3
 800c5be:	b25a      	sxtb	r2, r3
 800c5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c5ca:	e001      	b.n	800c5d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5d2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c5da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c5dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3740      	adds	r7, #64	; 0x40
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
	...

0800c5e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b08c      	sub	sp, #48	; 0x30
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	60f8      	str	r0, [r7, #12]
 800c5f0:	60b9      	str	r1, [r7, #8]
 800c5f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d10a      	bne.n	800c618 <xQueueReceive+0x30>
	__asm volatile
 800c602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c606:	f383 8811 	msr	BASEPRI, r3
 800c60a:	f3bf 8f6f 	isb	sy
 800c60e:	f3bf 8f4f 	dsb	sy
 800c612:	623b      	str	r3, [r7, #32]
}
 800c614:	bf00      	nop
 800c616:	e7fe      	b.n	800c616 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d103      	bne.n	800c626 <xQueueReceive+0x3e>
 800c61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c622:	2b00      	cmp	r3, #0
 800c624:	d101      	bne.n	800c62a <xQueueReceive+0x42>
 800c626:	2301      	movs	r3, #1
 800c628:	e000      	b.n	800c62c <xQueueReceive+0x44>
 800c62a:	2300      	movs	r3, #0
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d10a      	bne.n	800c646 <xQueueReceive+0x5e>
	__asm volatile
 800c630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c634:	f383 8811 	msr	BASEPRI, r3
 800c638:	f3bf 8f6f 	isb	sy
 800c63c:	f3bf 8f4f 	dsb	sy
 800c640:	61fb      	str	r3, [r7, #28]
}
 800c642:	bf00      	nop
 800c644:	e7fe      	b.n	800c644 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c646:	f001 f865 	bl	800d714 <xTaskGetSchedulerState>
 800c64a:	4603      	mov	r3, r0
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d102      	bne.n	800c656 <xQueueReceive+0x6e>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d101      	bne.n	800c65a <xQueueReceive+0x72>
 800c656:	2301      	movs	r3, #1
 800c658:	e000      	b.n	800c65c <xQueueReceive+0x74>
 800c65a:	2300      	movs	r3, #0
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d10a      	bne.n	800c676 <xQueueReceive+0x8e>
	__asm volatile
 800c660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c664:	f383 8811 	msr	BASEPRI, r3
 800c668:	f3bf 8f6f 	isb	sy
 800c66c:	f3bf 8f4f 	dsb	sy
 800c670:	61bb      	str	r3, [r7, #24]
}
 800c672:	bf00      	nop
 800c674:	e7fe      	b.n	800c674 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c676:	f001 fda5 	bl	800e1c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c67c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c67e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c682:	2b00      	cmp	r3, #0
 800c684:	d01f      	beq.n	800c6c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c686:	68b9      	ldr	r1, [r7, #8]
 800c688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c68a:	f000 f8f7 	bl	800c87c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c690:	1e5a      	subs	r2, r3, #1
 800c692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c694:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c698:	691b      	ldr	r3, [r3, #16]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d00f      	beq.n	800c6be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a0:	3310      	adds	r3, #16
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f000 fe74 	bl	800d390 <xTaskRemoveFromEventList>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d007      	beq.n	800c6be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c6ae:	4b3d      	ldr	r3, [pc, #244]	; (800c7a4 <xQueueReceive+0x1bc>)
 800c6b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6b4:	601a      	str	r2, [r3, #0]
 800c6b6:	f3bf 8f4f 	dsb	sy
 800c6ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c6be:	f001 fdb1 	bl	800e224 <vPortExitCritical>
				return pdPASS;
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	e069      	b.n	800c79a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d103      	bne.n	800c6d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c6cc:	f001 fdaa 	bl	800e224 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	e062      	b.n	800c79a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d106      	bne.n	800c6e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6da:	f107 0310 	add.w	r3, r7, #16
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f000 feba 	bl	800d458 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c6e8:	f001 fd9c 	bl	800e224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c6ec:	f000 fc26 	bl	800cf3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6f0:	f001 fd68 	bl	800e1c4 <vPortEnterCritical>
 800c6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6fa:	b25b      	sxtb	r3, r3
 800c6fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c700:	d103      	bne.n	800c70a <xQueueReceive+0x122>
 800c702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c704:	2200      	movs	r2, #0
 800c706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c70c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c710:	b25b      	sxtb	r3, r3
 800c712:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c716:	d103      	bne.n	800c720 <xQueueReceive+0x138>
 800c718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71a:	2200      	movs	r2, #0
 800c71c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c720:	f001 fd80 	bl	800e224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c724:	1d3a      	adds	r2, r7, #4
 800c726:	f107 0310 	add.w	r3, r7, #16
 800c72a:	4611      	mov	r1, r2
 800c72c:	4618      	mov	r0, r3
 800c72e:	f000 fea9 	bl	800d484 <xTaskCheckForTimeOut>
 800c732:	4603      	mov	r3, r0
 800c734:	2b00      	cmp	r3, #0
 800c736:	d123      	bne.n	800c780 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c73a:	f000 f917 	bl	800c96c <prvIsQueueEmpty>
 800c73e:	4603      	mov	r3, r0
 800c740:	2b00      	cmp	r3, #0
 800c742:	d017      	beq.n	800c774 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c746:	3324      	adds	r3, #36	; 0x24
 800c748:	687a      	ldr	r2, [r7, #4]
 800c74a:	4611      	mov	r1, r2
 800c74c:	4618      	mov	r0, r3
 800c74e:	f000 fdcf 	bl	800d2f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c754:	f000 f8b8 	bl	800c8c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c758:	f000 fbfe 	bl	800cf58 <xTaskResumeAll>
 800c75c:	4603      	mov	r3, r0
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d189      	bne.n	800c676 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c762:	4b10      	ldr	r3, [pc, #64]	; (800c7a4 <xQueueReceive+0x1bc>)
 800c764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c768:	601a      	str	r2, [r3, #0]
 800c76a:	f3bf 8f4f 	dsb	sy
 800c76e:	f3bf 8f6f 	isb	sy
 800c772:	e780      	b.n	800c676 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c776:	f000 f8a7 	bl	800c8c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c77a:	f000 fbed 	bl	800cf58 <xTaskResumeAll>
 800c77e:	e77a      	b.n	800c676 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c782:	f000 f8a1 	bl	800c8c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c786:	f000 fbe7 	bl	800cf58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c78a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c78c:	f000 f8ee 	bl	800c96c <prvIsQueueEmpty>
 800c790:	4603      	mov	r3, r0
 800c792:	2b00      	cmp	r3, #0
 800c794:	f43f af6f 	beq.w	800c676 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c798:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3730      	adds	r7, #48	; 0x30
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop
 800c7a4:	e000ed04 	.word	0xe000ed04

0800c7a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b086      	sub	sp, #24
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	60f8      	str	r0, [r7, #12]
 800c7b0:	60b9      	str	r1, [r7, #8]
 800c7b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d10d      	bne.n	800c7e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d14d      	bne.n	800c86a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	689b      	ldr	r3, [r3, #8]
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f000 ffbc 	bl	800d750 <xTaskPriorityDisinherit>
 800c7d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	609a      	str	r2, [r3, #8]
 800c7e0:	e043      	b.n	800c86a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d119      	bne.n	800c81c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	6858      	ldr	r0, [r3, #4]
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7f0:	461a      	mov	r2, r3
 800c7f2:	68b9      	ldr	r1, [r7, #8]
 800c7f4:	f002 ff22 	bl	800f63c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	685a      	ldr	r2, [r3, #4]
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c800:	441a      	add	r2, r3
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	685a      	ldr	r2, [r3, #4]
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	689b      	ldr	r3, [r3, #8]
 800c80e:	429a      	cmp	r2, r3
 800c810:	d32b      	bcc.n	800c86a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	681a      	ldr	r2, [r3, #0]
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	605a      	str	r2, [r3, #4]
 800c81a:	e026      	b.n	800c86a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	68d8      	ldr	r0, [r3, #12]
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c824:	461a      	mov	r2, r3
 800c826:	68b9      	ldr	r1, [r7, #8]
 800c828:	f002 ff08 	bl	800f63c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	68da      	ldr	r2, [r3, #12]
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c834:	425b      	negs	r3, r3
 800c836:	441a      	add	r2, r3
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	68da      	ldr	r2, [r3, #12]
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	429a      	cmp	r2, r3
 800c846:	d207      	bcs.n	800c858 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	689a      	ldr	r2, [r3, #8]
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c850:	425b      	negs	r3, r3
 800c852:	441a      	add	r2, r3
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2b02      	cmp	r3, #2
 800c85c:	d105      	bne.n	800c86a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d002      	beq.n	800c86a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	3b01      	subs	r3, #1
 800c868:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	1c5a      	adds	r2, r3, #1
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c872:	697b      	ldr	r3, [r7, #20]
}
 800c874:	4618      	mov	r0, r3
 800c876:	3718      	adds	r7, #24
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b082      	sub	sp, #8
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d018      	beq.n	800c8c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	68da      	ldr	r2, [r3, #12]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c896:	441a      	add	r2, r3
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	68da      	ldr	r2, [r3, #12]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	689b      	ldr	r3, [r3, #8]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d303      	bcc.n	800c8b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681a      	ldr	r2, [r3, #0]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	68d9      	ldr	r1, [r3, #12]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	6838      	ldr	r0, [r7, #0]
 800c8bc:	f002 febe 	bl	800f63c <memcpy>
	}
}
 800c8c0:	bf00      	nop
 800c8c2:	3708      	adds	r7, #8
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b084      	sub	sp, #16
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c8d0:	f001 fc78 	bl	800e1c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c8dc:	e011      	b.n	800c902 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d012      	beq.n	800c90c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	3324      	adds	r3, #36	; 0x24
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f000 fd50 	bl	800d390 <xTaskRemoveFromEventList>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d001      	beq.n	800c8fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c8f6:	f000 fe27 	bl	800d548 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c8fa:	7bfb      	ldrb	r3, [r7, #15]
 800c8fc:	3b01      	subs	r3, #1
 800c8fe:	b2db      	uxtb	r3, r3
 800c900:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c906:	2b00      	cmp	r3, #0
 800c908:	dce9      	bgt.n	800c8de <prvUnlockQueue+0x16>
 800c90a:	e000      	b.n	800c90e <prvUnlockQueue+0x46>
					break;
 800c90c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	22ff      	movs	r2, #255	; 0xff
 800c912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c916:	f001 fc85 	bl	800e224 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c91a:	f001 fc53 	bl	800e1c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c924:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c926:	e011      	b.n	800c94c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	691b      	ldr	r3, [r3, #16]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d012      	beq.n	800c956 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	3310      	adds	r3, #16
 800c934:	4618      	mov	r0, r3
 800c936:	f000 fd2b 	bl	800d390 <xTaskRemoveFromEventList>
 800c93a:	4603      	mov	r3, r0
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d001      	beq.n	800c944 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c940:	f000 fe02 	bl	800d548 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c944:	7bbb      	ldrb	r3, [r7, #14]
 800c946:	3b01      	subs	r3, #1
 800c948:	b2db      	uxtb	r3, r3
 800c94a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c94c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c950:	2b00      	cmp	r3, #0
 800c952:	dce9      	bgt.n	800c928 <prvUnlockQueue+0x60>
 800c954:	e000      	b.n	800c958 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c956:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	22ff      	movs	r2, #255	; 0xff
 800c95c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c960:	f001 fc60 	bl	800e224 <vPortExitCritical>
}
 800c964:	bf00      	nop
 800c966:	3710      	adds	r7, #16
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b084      	sub	sp, #16
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c974:	f001 fc26 	bl	800e1c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d102      	bne.n	800c986 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c980:	2301      	movs	r3, #1
 800c982:	60fb      	str	r3, [r7, #12]
 800c984:	e001      	b.n	800c98a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c986:	2300      	movs	r3, #0
 800c988:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c98a:	f001 fc4b 	bl	800e224 <vPortExitCritical>

	return xReturn;
 800c98e:	68fb      	ldr	r3, [r7, #12]
}
 800c990:	4618      	mov	r0, r3
 800c992:	3710      	adds	r7, #16
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b084      	sub	sp, #16
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c9a0:	f001 fc10 	bl	800e1c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d102      	bne.n	800c9b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	60fb      	str	r3, [r7, #12]
 800c9b4:	e001      	b.n	800c9ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c9ba:	f001 fc33 	bl	800e224 <vPortExitCritical>

	return xReturn;
 800c9be:	68fb      	ldr	r3, [r7, #12]
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3710      	adds	r7, #16
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}

0800c9c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b085      	sub	sp, #20
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
 800c9d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	60fb      	str	r3, [r7, #12]
 800c9d6:	e014      	b.n	800ca02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c9d8:	4a0f      	ldr	r2, [pc, #60]	; (800ca18 <vQueueAddToRegistry+0x50>)
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d10b      	bne.n	800c9fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c9e4:	490c      	ldr	r1, [pc, #48]	; (800ca18 <vQueueAddToRegistry+0x50>)
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	683a      	ldr	r2, [r7, #0]
 800c9ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c9ee:	4a0a      	ldr	r2, [pc, #40]	; (800ca18 <vQueueAddToRegistry+0x50>)
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	00db      	lsls	r3, r3, #3
 800c9f4:	4413      	add	r3, r2
 800c9f6:	687a      	ldr	r2, [r7, #4]
 800c9f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c9fa:	e006      	b.n	800ca0a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	3301      	adds	r3, #1
 800ca00:	60fb      	str	r3, [r7, #12]
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	2b07      	cmp	r3, #7
 800ca06:	d9e7      	bls.n	800c9d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ca08:	bf00      	nop
 800ca0a:	bf00      	nop
 800ca0c:	3714      	adds	r7, #20
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr
 800ca16:	bf00      	nop
 800ca18:	2000144c 	.word	0x2000144c

0800ca1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b086      	sub	sp, #24
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	60f8      	str	r0, [r7, #12]
 800ca24:	60b9      	str	r1, [r7, #8]
 800ca26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ca2c:	f001 fbca 	bl	800e1c4 <vPortEnterCritical>
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca36:	b25b      	sxtb	r3, r3
 800ca38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca3c:	d103      	bne.n	800ca46 <vQueueWaitForMessageRestricted+0x2a>
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	2200      	movs	r2, #0
 800ca42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca4c:	b25b      	sxtb	r3, r3
 800ca4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca52:	d103      	bne.n	800ca5c <vQueueWaitForMessageRestricted+0x40>
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	2200      	movs	r2, #0
 800ca58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca5c:	f001 fbe2 	bl	800e224 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d106      	bne.n	800ca76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	3324      	adds	r3, #36	; 0x24
 800ca6c:	687a      	ldr	r2, [r7, #4]
 800ca6e:	68b9      	ldr	r1, [r7, #8]
 800ca70:	4618      	mov	r0, r3
 800ca72:	f000 fc61 	bl	800d338 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ca76:	6978      	ldr	r0, [r7, #20]
 800ca78:	f7ff ff26 	bl	800c8c8 <prvUnlockQueue>
	}
 800ca7c:	bf00      	nop
 800ca7e:	3718      	adds	r7, #24
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b08e      	sub	sp, #56	; 0x38
 800ca88:	af04      	add	r7, sp, #16
 800ca8a:	60f8      	str	r0, [r7, #12]
 800ca8c:	60b9      	str	r1, [r7, #8]
 800ca8e:	607a      	str	r2, [r7, #4]
 800ca90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ca92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d10a      	bne.n	800caae <xTaskCreateStatic+0x2a>
	__asm volatile
 800ca98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9c:	f383 8811 	msr	BASEPRI, r3
 800caa0:	f3bf 8f6f 	isb	sy
 800caa4:	f3bf 8f4f 	dsb	sy
 800caa8:	623b      	str	r3, [r7, #32]
}
 800caaa:	bf00      	nop
 800caac:	e7fe      	b.n	800caac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800caae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d10a      	bne.n	800caca <xTaskCreateStatic+0x46>
	__asm volatile
 800cab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab8:	f383 8811 	msr	BASEPRI, r3
 800cabc:	f3bf 8f6f 	isb	sy
 800cac0:	f3bf 8f4f 	dsb	sy
 800cac4:	61fb      	str	r3, [r7, #28]
}
 800cac6:	bf00      	nop
 800cac8:	e7fe      	b.n	800cac8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800caca:	23a8      	movs	r3, #168	; 0xa8
 800cacc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	2ba8      	cmp	r3, #168	; 0xa8
 800cad2:	d00a      	beq.n	800caea <xTaskCreateStatic+0x66>
	__asm volatile
 800cad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad8:	f383 8811 	msr	BASEPRI, r3
 800cadc:	f3bf 8f6f 	isb	sy
 800cae0:	f3bf 8f4f 	dsb	sy
 800cae4:	61bb      	str	r3, [r7, #24]
}
 800cae6:	bf00      	nop
 800cae8:	e7fe      	b.n	800cae8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800caea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800caec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d01e      	beq.n	800cb30 <xTaskCreateStatic+0xac>
 800caf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d01b      	beq.n	800cb30 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800caf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cafe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb00:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb04:	2202      	movs	r2, #2
 800cb06:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	9303      	str	r3, [sp, #12]
 800cb0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb10:	9302      	str	r3, [sp, #8]
 800cb12:	f107 0314 	add.w	r3, r7, #20
 800cb16:	9301      	str	r3, [sp, #4]
 800cb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb1a:	9300      	str	r3, [sp, #0]
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	68b9      	ldr	r1, [r7, #8]
 800cb22:	68f8      	ldr	r0, [r7, #12]
 800cb24:	f000 f850 	bl	800cbc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cb28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb2a:	f000 f8f3 	bl	800cd14 <prvAddNewTaskToReadyList>
 800cb2e:	e001      	b.n	800cb34 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cb30:	2300      	movs	r3, #0
 800cb32:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cb34:	697b      	ldr	r3, [r7, #20]
	}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3728      	adds	r7, #40	; 0x28
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}

0800cb3e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cb3e:	b580      	push	{r7, lr}
 800cb40:	b08c      	sub	sp, #48	; 0x30
 800cb42:	af04      	add	r7, sp, #16
 800cb44:	60f8      	str	r0, [r7, #12]
 800cb46:	60b9      	str	r1, [r7, #8]
 800cb48:	603b      	str	r3, [r7, #0]
 800cb4a:	4613      	mov	r3, r2
 800cb4c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cb4e:	88fb      	ldrh	r3, [r7, #6]
 800cb50:	009b      	lsls	r3, r3, #2
 800cb52:	4618      	mov	r0, r3
 800cb54:	f001 fc58 	bl	800e408 <pvPortMalloc>
 800cb58:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d00e      	beq.n	800cb7e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cb60:	20a8      	movs	r0, #168	; 0xa8
 800cb62:	f001 fc51 	bl	800e408 <pvPortMalloc>
 800cb66:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cb68:	69fb      	ldr	r3, [r7, #28]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d003      	beq.n	800cb76 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cb6e:	69fb      	ldr	r3, [r7, #28]
 800cb70:	697a      	ldr	r2, [r7, #20]
 800cb72:	631a      	str	r2, [r3, #48]	; 0x30
 800cb74:	e005      	b.n	800cb82 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cb76:	6978      	ldr	r0, [r7, #20]
 800cb78:	f001 fd12 	bl	800e5a0 <vPortFree>
 800cb7c:	e001      	b.n	800cb82 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cb82:	69fb      	ldr	r3, [r7, #28]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d017      	beq.n	800cbb8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cb88:	69fb      	ldr	r3, [r7, #28]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cb90:	88fa      	ldrh	r2, [r7, #6]
 800cb92:	2300      	movs	r3, #0
 800cb94:	9303      	str	r3, [sp, #12]
 800cb96:	69fb      	ldr	r3, [r7, #28]
 800cb98:	9302      	str	r3, [sp, #8]
 800cb9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb9c:	9301      	str	r3, [sp, #4]
 800cb9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba0:	9300      	str	r3, [sp, #0]
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	68b9      	ldr	r1, [r7, #8]
 800cba6:	68f8      	ldr	r0, [r7, #12]
 800cba8:	f000 f80e 	bl	800cbc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cbac:	69f8      	ldr	r0, [r7, #28]
 800cbae:	f000 f8b1 	bl	800cd14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	61bb      	str	r3, [r7, #24]
 800cbb6:	e002      	b.n	800cbbe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cbb8:	f04f 33ff 	mov.w	r3, #4294967295
 800cbbc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cbbe:	69bb      	ldr	r3, [r7, #24]
	}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3720      	adds	r7, #32
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}

0800cbc8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b088      	sub	sp, #32
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	60f8      	str	r0, [r7, #12]
 800cbd0:	60b9      	str	r1, [r7, #8]
 800cbd2:	607a      	str	r2, [r7, #4]
 800cbd4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	009b      	lsls	r3, r3, #2
 800cbde:	461a      	mov	r2, r3
 800cbe0:	21a5      	movs	r1, #165	; 0xa5
 800cbe2:	f002 fc57 	bl	800f494 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cbf0:	3b01      	subs	r3, #1
 800cbf2:	009b      	lsls	r3, r3, #2
 800cbf4:	4413      	add	r3, r2
 800cbf6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cbf8:	69bb      	ldr	r3, [r7, #24]
 800cbfa:	f023 0307 	bic.w	r3, r3, #7
 800cbfe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cc00:	69bb      	ldr	r3, [r7, #24]
 800cc02:	f003 0307 	and.w	r3, r3, #7
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d00a      	beq.n	800cc20 <prvInitialiseNewTask+0x58>
	__asm volatile
 800cc0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc0e:	f383 8811 	msr	BASEPRI, r3
 800cc12:	f3bf 8f6f 	isb	sy
 800cc16:	f3bf 8f4f 	dsb	sy
 800cc1a:	617b      	str	r3, [r7, #20]
}
 800cc1c:	bf00      	nop
 800cc1e:	e7fe      	b.n	800cc1e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d01f      	beq.n	800cc66 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cc26:	2300      	movs	r3, #0
 800cc28:	61fb      	str	r3, [r7, #28]
 800cc2a:	e012      	b.n	800cc52 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cc2c:	68ba      	ldr	r2, [r7, #8]
 800cc2e:	69fb      	ldr	r3, [r7, #28]
 800cc30:	4413      	add	r3, r2
 800cc32:	7819      	ldrb	r1, [r3, #0]
 800cc34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc36:	69fb      	ldr	r3, [r7, #28]
 800cc38:	4413      	add	r3, r2
 800cc3a:	3334      	adds	r3, #52	; 0x34
 800cc3c:	460a      	mov	r2, r1
 800cc3e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cc40:	68ba      	ldr	r2, [r7, #8]
 800cc42:	69fb      	ldr	r3, [r7, #28]
 800cc44:	4413      	add	r3, r2
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d006      	beq.n	800cc5a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cc4c:	69fb      	ldr	r3, [r7, #28]
 800cc4e:	3301      	adds	r3, #1
 800cc50:	61fb      	str	r3, [r7, #28]
 800cc52:	69fb      	ldr	r3, [r7, #28]
 800cc54:	2b0f      	cmp	r3, #15
 800cc56:	d9e9      	bls.n	800cc2c <prvInitialiseNewTask+0x64>
 800cc58:	e000      	b.n	800cc5c <prvInitialiseNewTask+0x94>
			{
				break;
 800cc5a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc5e:	2200      	movs	r2, #0
 800cc60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cc64:	e003      	b.n	800cc6e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cc66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc68:	2200      	movs	r2, #0
 800cc6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cc6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc70:	2b37      	cmp	r3, #55	; 0x37
 800cc72:	d901      	bls.n	800cc78 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cc74:	2337      	movs	r3, #55	; 0x37
 800cc76:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cc78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc7c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc82:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc86:	2200      	movs	r2, #0
 800cc88:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc8c:	3304      	adds	r3, #4
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7ff f978 	bl	800bf84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc96:	3318      	adds	r3, #24
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7ff f973 	bl	800bf84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cca2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ccaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ccae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccb2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ccb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ccbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ccc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc6:	3354      	adds	r3, #84	; 0x54
 800ccc8:	224c      	movs	r2, #76	; 0x4c
 800ccca:	2100      	movs	r1, #0
 800cccc:	4618      	mov	r0, r3
 800ccce:	f002 fbe1 	bl	800f494 <memset>
 800ccd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd4:	4a0c      	ldr	r2, [pc, #48]	; (800cd08 <prvInitialiseNewTask+0x140>)
 800ccd6:	659a      	str	r2, [r3, #88]	; 0x58
 800ccd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccda:	4a0c      	ldr	r2, [pc, #48]	; (800cd0c <prvInitialiseNewTask+0x144>)
 800ccdc:	65da      	str	r2, [r3, #92]	; 0x5c
 800ccde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce0:	4a0b      	ldr	r2, [pc, #44]	; (800cd10 <prvInitialiseNewTask+0x148>)
 800cce2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cce4:	683a      	ldr	r2, [r7, #0]
 800cce6:	68f9      	ldr	r1, [r7, #12]
 800cce8:	69b8      	ldr	r0, [r7, #24]
 800ccea:	f001 f941 	bl	800df70 <pxPortInitialiseStack>
 800ccee:	4602      	mov	r2, r0
 800ccf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ccf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d002      	beq.n	800cd00 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ccfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccfe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd00:	bf00      	nop
 800cd02:	3720      	adds	r7, #32
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}
 800cd08:	200056e0 	.word	0x200056e0
 800cd0c:	20005748 	.word	0x20005748
 800cd10:	200057b0 	.word	0x200057b0

0800cd14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b082      	sub	sp, #8
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cd1c:	f001 fa52 	bl	800e1c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cd20:	4b2d      	ldr	r3, [pc, #180]	; (800cdd8 <prvAddNewTaskToReadyList+0xc4>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	3301      	adds	r3, #1
 800cd26:	4a2c      	ldr	r2, [pc, #176]	; (800cdd8 <prvAddNewTaskToReadyList+0xc4>)
 800cd28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cd2a:	4b2c      	ldr	r3, [pc, #176]	; (800cddc <prvAddNewTaskToReadyList+0xc8>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d109      	bne.n	800cd46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cd32:	4a2a      	ldr	r2, [pc, #168]	; (800cddc <prvAddNewTaskToReadyList+0xc8>)
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cd38:	4b27      	ldr	r3, [pc, #156]	; (800cdd8 <prvAddNewTaskToReadyList+0xc4>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d110      	bne.n	800cd62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cd40:	f000 fc26 	bl	800d590 <prvInitialiseTaskLists>
 800cd44:	e00d      	b.n	800cd62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cd46:	4b26      	ldr	r3, [pc, #152]	; (800cde0 <prvAddNewTaskToReadyList+0xcc>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d109      	bne.n	800cd62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cd4e:	4b23      	ldr	r3, [pc, #140]	; (800cddc <prvAddNewTaskToReadyList+0xc8>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	d802      	bhi.n	800cd62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cd5c:	4a1f      	ldr	r2, [pc, #124]	; (800cddc <prvAddNewTaskToReadyList+0xc8>)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cd62:	4b20      	ldr	r3, [pc, #128]	; (800cde4 <prvAddNewTaskToReadyList+0xd0>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	3301      	adds	r3, #1
 800cd68:	4a1e      	ldr	r2, [pc, #120]	; (800cde4 <prvAddNewTaskToReadyList+0xd0>)
 800cd6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cd6c:	4b1d      	ldr	r3, [pc, #116]	; (800cde4 <prvAddNewTaskToReadyList+0xd0>)
 800cd6e:	681a      	ldr	r2, [r3, #0]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd78:	4b1b      	ldr	r3, [pc, #108]	; (800cde8 <prvAddNewTaskToReadyList+0xd4>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d903      	bls.n	800cd88 <prvAddNewTaskToReadyList+0x74>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd84:	4a18      	ldr	r2, [pc, #96]	; (800cde8 <prvAddNewTaskToReadyList+0xd4>)
 800cd86:	6013      	str	r3, [r2, #0]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd8c:	4613      	mov	r3, r2
 800cd8e:	009b      	lsls	r3, r3, #2
 800cd90:	4413      	add	r3, r2
 800cd92:	009b      	lsls	r3, r3, #2
 800cd94:	4a15      	ldr	r2, [pc, #84]	; (800cdec <prvAddNewTaskToReadyList+0xd8>)
 800cd96:	441a      	add	r2, r3
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	3304      	adds	r3, #4
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	4610      	mov	r0, r2
 800cda0:	f7ff f8fd 	bl	800bf9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cda4:	f001 fa3e 	bl	800e224 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cda8:	4b0d      	ldr	r3, [pc, #52]	; (800cde0 <prvAddNewTaskToReadyList+0xcc>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d00e      	beq.n	800cdce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cdb0:	4b0a      	ldr	r3, [pc, #40]	; (800cddc <prvAddNewTaskToReadyList+0xc8>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d207      	bcs.n	800cdce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cdbe:	4b0c      	ldr	r3, [pc, #48]	; (800cdf0 <prvAddNewTaskToReadyList+0xdc>)
 800cdc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdc4:	601a      	str	r2, [r3, #0]
 800cdc6:	f3bf 8f4f 	dsb	sy
 800cdca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cdce:	bf00      	nop
 800cdd0:	3708      	adds	r7, #8
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
 800cdd6:	bf00      	nop
 800cdd8:	20001960 	.word	0x20001960
 800cddc:	2000148c 	.word	0x2000148c
 800cde0:	2000196c 	.word	0x2000196c
 800cde4:	2000197c 	.word	0x2000197c
 800cde8:	20001968 	.word	0x20001968
 800cdec:	20001490 	.word	0x20001490
 800cdf0:	e000ed04 	.word	0xe000ed04

0800cdf4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b084      	sub	sp, #16
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d017      	beq.n	800ce36 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ce06:	4b13      	ldr	r3, [pc, #76]	; (800ce54 <vTaskDelay+0x60>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d00a      	beq.n	800ce24 <vTaskDelay+0x30>
	__asm volatile
 800ce0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce12:	f383 8811 	msr	BASEPRI, r3
 800ce16:	f3bf 8f6f 	isb	sy
 800ce1a:	f3bf 8f4f 	dsb	sy
 800ce1e:	60bb      	str	r3, [r7, #8]
}
 800ce20:	bf00      	nop
 800ce22:	e7fe      	b.n	800ce22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ce24:	f000 f88a 	bl	800cf3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ce28:	2100      	movs	r1, #0
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f000 fcfe 	bl	800d82c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ce30:	f000 f892 	bl	800cf58 <xTaskResumeAll>
 800ce34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d107      	bne.n	800ce4c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ce3c:	4b06      	ldr	r3, [pc, #24]	; (800ce58 <vTaskDelay+0x64>)
 800ce3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce42:	601a      	str	r2, [r3, #0]
 800ce44:	f3bf 8f4f 	dsb	sy
 800ce48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ce4c:	bf00      	nop
 800ce4e:	3710      	adds	r7, #16
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}
 800ce54:	20001988 	.word	0x20001988
 800ce58:	e000ed04 	.word	0xe000ed04

0800ce5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b08a      	sub	sp, #40	; 0x28
 800ce60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ce62:	2300      	movs	r3, #0
 800ce64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ce66:	2300      	movs	r3, #0
 800ce68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ce6a:	463a      	mov	r2, r7
 800ce6c:	1d39      	adds	r1, r7, #4
 800ce6e:	f107 0308 	add.w	r3, r7, #8
 800ce72:	4618      	mov	r0, r3
 800ce74:	f7ff f832 	bl	800bedc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ce78:	6839      	ldr	r1, [r7, #0]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	68ba      	ldr	r2, [r7, #8]
 800ce7e:	9202      	str	r2, [sp, #8]
 800ce80:	9301      	str	r3, [sp, #4]
 800ce82:	2300      	movs	r3, #0
 800ce84:	9300      	str	r3, [sp, #0]
 800ce86:	2300      	movs	r3, #0
 800ce88:	460a      	mov	r2, r1
 800ce8a:	4924      	ldr	r1, [pc, #144]	; (800cf1c <vTaskStartScheduler+0xc0>)
 800ce8c:	4824      	ldr	r0, [pc, #144]	; (800cf20 <vTaskStartScheduler+0xc4>)
 800ce8e:	f7ff fdf9 	bl	800ca84 <xTaskCreateStatic>
 800ce92:	4603      	mov	r3, r0
 800ce94:	4a23      	ldr	r2, [pc, #140]	; (800cf24 <vTaskStartScheduler+0xc8>)
 800ce96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ce98:	4b22      	ldr	r3, [pc, #136]	; (800cf24 <vTaskStartScheduler+0xc8>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d002      	beq.n	800cea6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cea0:	2301      	movs	r3, #1
 800cea2:	617b      	str	r3, [r7, #20]
 800cea4:	e001      	b.n	800ceaa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cea6:	2300      	movs	r3, #0
 800cea8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	2b01      	cmp	r3, #1
 800ceae:	d102      	bne.n	800ceb6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ceb0:	f000 fd10 	bl	800d8d4 <xTimerCreateTimerTask>
 800ceb4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d11b      	bne.n	800cef4 <vTaskStartScheduler+0x98>
	__asm volatile
 800cebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec0:	f383 8811 	msr	BASEPRI, r3
 800cec4:	f3bf 8f6f 	isb	sy
 800cec8:	f3bf 8f4f 	dsb	sy
 800cecc:	613b      	str	r3, [r7, #16]
}
 800cece:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ced0:	4b15      	ldr	r3, [pc, #84]	; (800cf28 <vTaskStartScheduler+0xcc>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	3354      	adds	r3, #84	; 0x54
 800ced6:	4a15      	ldr	r2, [pc, #84]	; (800cf2c <vTaskStartScheduler+0xd0>)
 800ced8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ceda:	4b15      	ldr	r3, [pc, #84]	; (800cf30 <vTaskStartScheduler+0xd4>)
 800cedc:	f04f 32ff 	mov.w	r2, #4294967295
 800cee0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cee2:	4b14      	ldr	r3, [pc, #80]	; (800cf34 <vTaskStartScheduler+0xd8>)
 800cee4:	2201      	movs	r2, #1
 800cee6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cee8:	4b13      	ldr	r3, [pc, #76]	; (800cf38 <vTaskStartScheduler+0xdc>)
 800ceea:	2200      	movs	r2, #0
 800ceec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ceee:	f001 f8c7 	bl	800e080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cef2:	e00e      	b.n	800cf12 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cefa:	d10a      	bne.n	800cf12 <vTaskStartScheduler+0xb6>
	__asm volatile
 800cefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf00:	f383 8811 	msr	BASEPRI, r3
 800cf04:	f3bf 8f6f 	isb	sy
 800cf08:	f3bf 8f4f 	dsb	sy
 800cf0c:	60fb      	str	r3, [r7, #12]
}
 800cf0e:	bf00      	nop
 800cf10:	e7fe      	b.n	800cf10 <vTaskStartScheduler+0xb4>
}
 800cf12:	bf00      	nop
 800cf14:	3718      	adds	r7, #24
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
 800cf1a:	bf00      	nop
 800cf1c:	08011cc8 	.word	0x08011cc8
 800cf20:	0800d561 	.word	0x0800d561
 800cf24:	20001984 	.word	0x20001984
 800cf28:	2000148c 	.word	0x2000148c
 800cf2c:	2000006c 	.word	0x2000006c
 800cf30:	20001980 	.word	0x20001980
 800cf34:	2000196c 	.word	0x2000196c
 800cf38:	20001964 	.word	0x20001964

0800cf3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cf40:	4b04      	ldr	r3, [pc, #16]	; (800cf54 <vTaskSuspendAll+0x18>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	3301      	adds	r3, #1
 800cf46:	4a03      	ldr	r2, [pc, #12]	; (800cf54 <vTaskSuspendAll+0x18>)
 800cf48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cf4a:	bf00      	nop
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr
 800cf54:	20001988 	.word	0x20001988

0800cf58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b084      	sub	sp, #16
 800cf5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cf62:	2300      	movs	r3, #0
 800cf64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cf66:	4b42      	ldr	r3, [pc, #264]	; (800d070 <xTaskResumeAll+0x118>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d10a      	bne.n	800cf84 <xTaskResumeAll+0x2c>
	__asm volatile
 800cf6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf72:	f383 8811 	msr	BASEPRI, r3
 800cf76:	f3bf 8f6f 	isb	sy
 800cf7a:	f3bf 8f4f 	dsb	sy
 800cf7e:	603b      	str	r3, [r7, #0]
}
 800cf80:	bf00      	nop
 800cf82:	e7fe      	b.n	800cf82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cf84:	f001 f91e 	bl	800e1c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cf88:	4b39      	ldr	r3, [pc, #228]	; (800d070 <xTaskResumeAll+0x118>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	3b01      	subs	r3, #1
 800cf8e:	4a38      	ldr	r2, [pc, #224]	; (800d070 <xTaskResumeAll+0x118>)
 800cf90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf92:	4b37      	ldr	r3, [pc, #220]	; (800d070 <xTaskResumeAll+0x118>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d162      	bne.n	800d060 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cf9a:	4b36      	ldr	r3, [pc, #216]	; (800d074 <xTaskResumeAll+0x11c>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d05e      	beq.n	800d060 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cfa2:	e02f      	b.n	800d004 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfa4:	4b34      	ldr	r3, [pc, #208]	; (800d078 <xTaskResumeAll+0x120>)
 800cfa6:	68db      	ldr	r3, [r3, #12]
 800cfa8:	68db      	ldr	r3, [r3, #12]
 800cfaa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	3318      	adds	r3, #24
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7ff f851 	bl	800c058 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	3304      	adds	r3, #4
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7ff f84c 	bl	800c058 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfc4:	4b2d      	ldr	r3, [pc, #180]	; (800d07c <xTaskResumeAll+0x124>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d903      	bls.n	800cfd4 <xTaskResumeAll+0x7c>
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfd0:	4a2a      	ldr	r2, [pc, #168]	; (800d07c <xTaskResumeAll+0x124>)
 800cfd2:	6013      	str	r3, [r2, #0]
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfd8:	4613      	mov	r3, r2
 800cfda:	009b      	lsls	r3, r3, #2
 800cfdc:	4413      	add	r3, r2
 800cfde:	009b      	lsls	r3, r3, #2
 800cfe0:	4a27      	ldr	r2, [pc, #156]	; (800d080 <xTaskResumeAll+0x128>)
 800cfe2:	441a      	add	r2, r3
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	3304      	adds	r3, #4
 800cfe8:	4619      	mov	r1, r3
 800cfea:	4610      	mov	r0, r2
 800cfec:	f7fe ffd7 	bl	800bf9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cff4:	4b23      	ldr	r3, [pc, #140]	; (800d084 <xTaskResumeAll+0x12c>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d302      	bcc.n	800d004 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cffe:	4b22      	ldr	r3, [pc, #136]	; (800d088 <xTaskResumeAll+0x130>)
 800d000:	2201      	movs	r2, #1
 800d002:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d004:	4b1c      	ldr	r3, [pc, #112]	; (800d078 <xTaskResumeAll+0x120>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d1cb      	bne.n	800cfa4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d001      	beq.n	800d016 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d012:	f000 fb5f 	bl	800d6d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d016:	4b1d      	ldr	r3, [pc, #116]	; (800d08c <xTaskResumeAll+0x134>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d010      	beq.n	800d044 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d022:	f000 f847 	bl	800d0b4 <xTaskIncrementTick>
 800d026:	4603      	mov	r3, r0
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d002      	beq.n	800d032 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d02c:	4b16      	ldr	r3, [pc, #88]	; (800d088 <xTaskResumeAll+0x130>)
 800d02e:	2201      	movs	r2, #1
 800d030:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	3b01      	subs	r3, #1
 800d036:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d1f1      	bne.n	800d022 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d03e:	4b13      	ldr	r3, [pc, #76]	; (800d08c <xTaskResumeAll+0x134>)
 800d040:	2200      	movs	r2, #0
 800d042:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d044:	4b10      	ldr	r3, [pc, #64]	; (800d088 <xTaskResumeAll+0x130>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d009      	beq.n	800d060 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d04c:	2301      	movs	r3, #1
 800d04e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d050:	4b0f      	ldr	r3, [pc, #60]	; (800d090 <xTaskResumeAll+0x138>)
 800d052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d056:	601a      	str	r2, [r3, #0]
 800d058:	f3bf 8f4f 	dsb	sy
 800d05c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d060:	f001 f8e0 	bl	800e224 <vPortExitCritical>

	return xAlreadyYielded;
 800d064:	68bb      	ldr	r3, [r7, #8]
}
 800d066:	4618      	mov	r0, r3
 800d068:	3710      	adds	r7, #16
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	20001988 	.word	0x20001988
 800d074:	20001960 	.word	0x20001960
 800d078:	20001920 	.word	0x20001920
 800d07c:	20001968 	.word	0x20001968
 800d080:	20001490 	.word	0x20001490
 800d084:	2000148c 	.word	0x2000148c
 800d088:	20001974 	.word	0x20001974
 800d08c:	20001970 	.word	0x20001970
 800d090:	e000ed04 	.word	0xe000ed04

0800d094 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d094:	b480      	push	{r7}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d09a:	4b05      	ldr	r3, [pc, #20]	; (800d0b0 <xTaskGetTickCount+0x1c>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d0a0:	687b      	ldr	r3, [r7, #4]
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	370c      	adds	r7, #12
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ac:	4770      	bx	lr
 800d0ae:	bf00      	nop
 800d0b0:	20001964 	.word	0x20001964

0800d0b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b086      	sub	sp, #24
 800d0b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0be:	4b4f      	ldr	r3, [pc, #316]	; (800d1fc <xTaskIncrementTick+0x148>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	f040 808f 	bne.w	800d1e6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d0c8:	4b4d      	ldr	r3, [pc, #308]	; (800d200 <xTaskIncrementTick+0x14c>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d0d0:	4a4b      	ldr	r2, [pc, #300]	; (800d200 <xTaskIncrementTick+0x14c>)
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d120      	bne.n	800d11e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d0dc:	4b49      	ldr	r3, [pc, #292]	; (800d204 <xTaskIncrementTick+0x150>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d00a      	beq.n	800d0fc <xTaskIncrementTick+0x48>
	__asm volatile
 800d0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ea:	f383 8811 	msr	BASEPRI, r3
 800d0ee:	f3bf 8f6f 	isb	sy
 800d0f2:	f3bf 8f4f 	dsb	sy
 800d0f6:	603b      	str	r3, [r7, #0]
}
 800d0f8:	bf00      	nop
 800d0fa:	e7fe      	b.n	800d0fa <xTaskIncrementTick+0x46>
 800d0fc:	4b41      	ldr	r3, [pc, #260]	; (800d204 <xTaskIncrementTick+0x150>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	60fb      	str	r3, [r7, #12]
 800d102:	4b41      	ldr	r3, [pc, #260]	; (800d208 <xTaskIncrementTick+0x154>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	4a3f      	ldr	r2, [pc, #252]	; (800d204 <xTaskIncrementTick+0x150>)
 800d108:	6013      	str	r3, [r2, #0]
 800d10a:	4a3f      	ldr	r2, [pc, #252]	; (800d208 <xTaskIncrementTick+0x154>)
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	6013      	str	r3, [r2, #0]
 800d110:	4b3e      	ldr	r3, [pc, #248]	; (800d20c <xTaskIncrementTick+0x158>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	3301      	adds	r3, #1
 800d116:	4a3d      	ldr	r2, [pc, #244]	; (800d20c <xTaskIncrementTick+0x158>)
 800d118:	6013      	str	r3, [r2, #0]
 800d11a:	f000 fadb 	bl	800d6d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d11e:	4b3c      	ldr	r3, [pc, #240]	; (800d210 <xTaskIncrementTick+0x15c>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	693a      	ldr	r2, [r7, #16]
 800d124:	429a      	cmp	r2, r3
 800d126:	d349      	bcc.n	800d1bc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d128:	4b36      	ldr	r3, [pc, #216]	; (800d204 <xTaskIncrementTick+0x150>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d104      	bne.n	800d13c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d132:	4b37      	ldr	r3, [pc, #220]	; (800d210 <xTaskIncrementTick+0x15c>)
 800d134:	f04f 32ff 	mov.w	r2, #4294967295
 800d138:	601a      	str	r2, [r3, #0]
					break;
 800d13a:	e03f      	b.n	800d1bc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d13c:	4b31      	ldr	r3, [pc, #196]	; (800d204 <xTaskIncrementTick+0x150>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	68db      	ldr	r3, [r3, #12]
 800d142:	68db      	ldr	r3, [r3, #12]
 800d144:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	685b      	ldr	r3, [r3, #4]
 800d14a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d14c:	693a      	ldr	r2, [r7, #16]
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	429a      	cmp	r2, r3
 800d152:	d203      	bcs.n	800d15c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d154:	4a2e      	ldr	r2, [pc, #184]	; (800d210 <xTaskIncrementTick+0x15c>)
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d15a:	e02f      	b.n	800d1bc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	3304      	adds	r3, #4
 800d160:	4618      	mov	r0, r3
 800d162:	f7fe ff79 	bl	800c058 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d004      	beq.n	800d178 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	3318      	adds	r3, #24
 800d172:	4618      	mov	r0, r3
 800d174:	f7fe ff70 	bl	800c058 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d17c:	4b25      	ldr	r3, [pc, #148]	; (800d214 <xTaskIncrementTick+0x160>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	429a      	cmp	r2, r3
 800d182:	d903      	bls.n	800d18c <xTaskIncrementTick+0xd8>
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d188:	4a22      	ldr	r2, [pc, #136]	; (800d214 <xTaskIncrementTick+0x160>)
 800d18a:	6013      	str	r3, [r2, #0]
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d190:	4613      	mov	r3, r2
 800d192:	009b      	lsls	r3, r3, #2
 800d194:	4413      	add	r3, r2
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	4a1f      	ldr	r2, [pc, #124]	; (800d218 <xTaskIncrementTick+0x164>)
 800d19a:	441a      	add	r2, r3
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	3304      	adds	r3, #4
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	4610      	mov	r0, r2
 800d1a4:	f7fe fefb 	bl	800bf9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1ac:	4b1b      	ldr	r3, [pc, #108]	; (800d21c <xTaskIncrementTick+0x168>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d3b8      	bcc.n	800d128 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1ba:	e7b5      	b.n	800d128 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d1bc:	4b17      	ldr	r3, [pc, #92]	; (800d21c <xTaskIncrementTick+0x168>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1c2:	4915      	ldr	r1, [pc, #84]	; (800d218 <xTaskIncrementTick+0x164>)
 800d1c4:	4613      	mov	r3, r2
 800d1c6:	009b      	lsls	r3, r3, #2
 800d1c8:	4413      	add	r3, r2
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	440b      	add	r3, r1
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	d901      	bls.n	800d1d8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d1d8:	4b11      	ldr	r3, [pc, #68]	; (800d220 <xTaskIncrementTick+0x16c>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d007      	beq.n	800d1f0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	617b      	str	r3, [r7, #20]
 800d1e4:	e004      	b.n	800d1f0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d1e6:	4b0f      	ldr	r3, [pc, #60]	; (800d224 <xTaskIncrementTick+0x170>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	3301      	adds	r3, #1
 800d1ec:	4a0d      	ldr	r2, [pc, #52]	; (800d224 <xTaskIncrementTick+0x170>)
 800d1ee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d1f0:	697b      	ldr	r3, [r7, #20]
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3718      	adds	r7, #24
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}
 800d1fa:	bf00      	nop
 800d1fc:	20001988 	.word	0x20001988
 800d200:	20001964 	.word	0x20001964
 800d204:	20001918 	.word	0x20001918
 800d208:	2000191c 	.word	0x2000191c
 800d20c:	20001978 	.word	0x20001978
 800d210:	20001980 	.word	0x20001980
 800d214:	20001968 	.word	0x20001968
 800d218:	20001490 	.word	0x20001490
 800d21c:	2000148c 	.word	0x2000148c
 800d220:	20001974 	.word	0x20001974
 800d224:	20001970 	.word	0x20001970

0800d228 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d228:	b480      	push	{r7}
 800d22a:	b085      	sub	sp, #20
 800d22c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d22e:	4b2a      	ldr	r3, [pc, #168]	; (800d2d8 <vTaskSwitchContext+0xb0>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d003      	beq.n	800d23e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d236:	4b29      	ldr	r3, [pc, #164]	; (800d2dc <vTaskSwitchContext+0xb4>)
 800d238:	2201      	movs	r2, #1
 800d23a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d23c:	e046      	b.n	800d2cc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d23e:	4b27      	ldr	r3, [pc, #156]	; (800d2dc <vTaskSwitchContext+0xb4>)
 800d240:	2200      	movs	r2, #0
 800d242:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d244:	4b26      	ldr	r3, [pc, #152]	; (800d2e0 <vTaskSwitchContext+0xb8>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	60fb      	str	r3, [r7, #12]
 800d24a:	e010      	b.n	800d26e <vTaskSwitchContext+0x46>
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d10a      	bne.n	800d268 <vTaskSwitchContext+0x40>
	__asm volatile
 800d252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d256:	f383 8811 	msr	BASEPRI, r3
 800d25a:	f3bf 8f6f 	isb	sy
 800d25e:	f3bf 8f4f 	dsb	sy
 800d262:	607b      	str	r3, [r7, #4]
}
 800d264:	bf00      	nop
 800d266:	e7fe      	b.n	800d266 <vTaskSwitchContext+0x3e>
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	3b01      	subs	r3, #1
 800d26c:	60fb      	str	r3, [r7, #12]
 800d26e:	491d      	ldr	r1, [pc, #116]	; (800d2e4 <vTaskSwitchContext+0xbc>)
 800d270:	68fa      	ldr	r2, [r7, #12]
 800d272:	4613      	mov	r3, r2
 800d274:	009b      	lsls	r3, r3, #2
 800d276:	4413      	add	r3, r2
 800d278:	009b      	lsls	r3, r3, #2
 800d27a:	440b      	add	r3, r1
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d0e4      	beq.n	800d24c <vTaskSwitchContext+0x24>
 800d282:	68fa      	ldr	r2, [r7, #12]
 800d284:	4613      	mov	r3, r2
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	4413      	add	r3, r2
 800d28a:	009b      	lsls	r3, r3, #2
 800d28c:	4a15      	ldr	r2, [pc, #84]	; (800d2e4 <vTaskSwitchContext+0xbc>)
 800d28e:	4413      	add	r3, r2
 800d290:	60bb      	str	r3, [r7, #8]
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	685b      	ldr	r3, [r3, #4]
 800d296:	685a      	ldr	r2, [r3, #4]
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	605a      	str	r2, [r3, #4]
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	685a      	ldr	r2, [r3, #4]
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	3308      	adds	r3, #8
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d104      	bne.n	800d2b2 <vTaskSwitchContext+0x8a>
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	685b      	ldr	r3, [r3, #4]
 800d2ac:	685a      	ldr	r2, [r3, #4]
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	605a      	str	r2, [r3, #4]
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	685b      	ldr	r3, [r3, #4]
 800d2b6:	68db      	ldr	r3, [r3, #12]
 800d2b8:	4a0b      	ldr	r2, [pc, #44]	; (800d2e8 <vTaskSwitchContext+0xc0>)
 800d2ba:	6013      	str	r3, [r2, #0]
 800d2bc:	4a08      	ldr	r2, [pc, #32]	; (800d2e0 <vTaskSwitchContext+0xb8>)
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d2c2:	4b09      	ldr	r3, [pc, #36]	; (800d2e8 <vTaskSwitchContext+0xc0>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	3354      	adds	r3, #84	; 0x54
 800d2c8:	4a08      	ldr	r2, [pc, #32]	; (800d2ec <vTaskSwitchContext+0xc4>)
 800d2ca:	6013      	str	r3, [r2, #0]
}
 800d2cc:	bf00      	nop
 800d2ce:	3714      	adds	r7, #20
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr
 800d2d8:	20001988 	.word	0x20001988
 800d2dc:	20001974 	.word	0x20001974
 800d2e0:	20001968 	.word	0x20001968
 800d2e4:	20001490 	.word	0x20001490
 800d2e8:	2000148c 	.word	0x2000148c
 800d2ec:	2000006c 	.word	0x2000006c

0800d2f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b084      	sub	sp, #16
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
 800d2f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d10a      	bne.n	800d316 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d304:	f383 8811 	msr	BASEPRI, r3
 800d308:	f3bf 8f6f 	isb	sy
 800d30c:	f3bf 8f4f 	dsb	sy
 800d310:	60fb      	str	r3, [r7, #12]
}
 800d312:	bf00      	nop
 800d314:	e7fe      	b.n	800d314 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d316:	4b07      	ldr	r3, [pc, #28]	; (800d334 <vTaskPlaceOnEventList+0x44>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	3318      	adds	r3, #24
 800d31c:	4619      	mov	r1, r3
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f7fe fe61 	bl	800bfe6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d324:	2101      	movs	r1, #1
 800d326:	6838      	ldr	r0, [r7, #0]
 800d328:	f000 fa80 	bl	800d82c <prvAddCurrentTaskToDelayedList>
}
 800d32c:	bf00      	nop
 800d32e:	3710      	adds	r7, #16
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}
 800d334:	2000148c 	.word	0x2000148c

0800d338 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b086      	sub	sp, #24
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	60f8      	str	r0, [r7, #12]
 800d340:	60b9      	str	r1, [r7, #8]
 800d342:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d10a      	bne.n	800d360 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d34e:	f383 8811 	msr	BASEPRI, r3
 800d352:	f3bf 8f6f 	isb	sy
 800d356:	f3bf 8f4f 	dsb	sy
 800d35a:	617b      	str	r3, [r7, #20]
}
 800d35c:	bf00      	nop
 800d35e:	e7fe      	b.n	800d35e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d360:	4b0a      	ldr	r3, [pc, #40]	; (800d38c <vTaskPlaceOnEventListRestricted+0x54>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	3318      	adds	r3, #24
 800d366:	4619      	mov	r1, r3
 800d368:	68f8      	ldr	r0, [r7, #12]
 800d36a:	f7fe fe18 	bl	800bf9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d002      	beq.n	800d37a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d374:	f04f 33ff 	mov.w	r3, #4294967295
 800d378:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d37a:	6879      	ldr	r1, [r7, #4]
 800d37c:	68b8      	ldr	r0, [r7, #8]
 800d37e:	f000 fa55 	bl	800d82c <prvAddCurrentTaskToDelayedList>
	}
 800d382:	bf00      	nop
 800d384:	3718      	adds	r7, #24
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}
 800d38a:	bf00      	nop
 800d38c:	2000148c 	.word	0x2000148c

0800d390 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b086      	sub	sp, #24
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	68db      	ldr	r3, [r3, #12]
 800d39c:	68db      	ldr	r3, [r3, #12]
 800d39e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d10a      	bne.n	800d3bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3aa:	f383 8811 	msr	BASEPRI, r3
 800d3ae:	f3bf 8f6f 	isb	sy
 800d3b2:	f3bf 8f4f 	dsb	sy
 800d3b6:	60fb      	str	r3, [r7, #12]
}
 800d3b8:	bf00      	nop
 800d3ba:	e7fe      	b.n	800d3ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	3318      	adds	r3, #24
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f7fe fe49 	bl	800c058 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3c6:	4b1e      	ldr	r3, [pc, #120]	; (800d440 <xTaskRemoveFromEventList+0xb0>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d11d      	bne.n	800d40a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d3ce:	693b      	ldr	r3, [r7, #16]
 800d3d0:	3304      	adds	r3, #4
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7fe fe40 	bl	800c058 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3dc:	4b19      	ldr	r3, [pc, #100]	; (800d444 <xTaskRemoveFromEventList+0xb4>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d903      	bls.n	800d3ec <xTaskRemoveFromEventList+0x5c>
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e8:	4a16      	ldr	r2, [pc, #88]	; (800d444 <xTaskRemoveFromEventList+0xb4>)
 800d3ea:	6013      	str	r3, [r2, #0]
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3f0:	4613      	mov	r3, r2
 800d3f2:	009b      	lsls	r3, r3, #2
 800d3f4:	4413      	add	r3, r2
 800d3f6:	009b      	lsls	r3, r3, #2
 800d3f8:	4a13      	ldr	r2, [pc, #76]	; (800d448 <xTaskRemoveFromEventList+0xb8>)
 800d3fa:	441a      	add	r2, r3
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	3304      	adds	r3, #4
 800d400:	4619      	mov	r1, r3
 800d402:	4610      	mov	r0, r2
 800d404:	f7fe fdcb 	bl	800bf9e <vListInsertEnd>
 800d408:	e005      	b.n	800d416 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	3318      	adds	r3, #24
 800d40e:	4619      	mov	r1, r3
 800d410:	480e      	ldr	r0, [pc, #56]	; (800d44c <xTaskRemoveFromEventList+0xbc>)
 800d412:	f7fe fdc4 	bl	800bf9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d41a:	4b0d      	ldr	r3, [pc, #52]	; (800d450 <xTaskRemoveFromEventList+0xc0>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d420:	429a      	cmp	r2, r3
 800d422:	d905      	bls.n	800d430 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d424:	2301      	movs	r3, #1
 800d426:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d428:	4b0a      	ldr	r3, [pc, #40]	; (800d454 <xTaskRemoveFromEventList+0xc4>)
 800d42a:	2201      	movs	r2, #1
 800d42c:	601a      	str	r2, [r3, #0]
 800d42e:	e001      	b.n	800d434 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d430:	2300      	movs	r3, #0
 800d432:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d434:	697b      	ldr	r3, [r7, #20]
}
 800d436:	4618      	mov	r0, r3
 800d438:	3718      	adds	r7, #24
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	bf00      	nop
 800d440:	20001988 	.word	0x20001988
 800d444:	20001968 	.word	0x20001968
 800d448:	20001490 	.word	0x20001490
 800d44c:	20001920 	.word	0x20001920
 800d450:	2000148c 	.word	0x2000148c
 800d454:	20001974 	.word	0x20001974

0800d458 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d458:	b480      	push	{r7}
 800d45a:	b083      	sub	sp, #12
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d460:	4b06      	ldr	r3, [pc, #24]	; (800d47c <vTaskInternalSetTimeOutState+0x24>)
 800d462:	681a      	ldr	r2, [r3, #0]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d468:	4b05      	ldr	r3, [pc, #20]	; (800d480 <vTaskInternalSetTimeOutState+0x28>)
 800d46a:	681a      	ldr	r2, [r3, #0]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	605a      	str	r2, [r3, #4]
}
 800d470:	bf00      	nop
 800d472:	370c      	adds	r7, #12
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr
 800d47c:	20001978 	.word	0x20001978
 800d480:	20001964 	.word	0x20001964

0800d484 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b088      	sub	sp, #32
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
 800d48c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d10a      	bne.n	800d4aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d498:	f383 8811 	msr	BASEPRI, r3
 800d49c:	f3bf 8f6f 	isb	sy
 800d4a0:	f3bf 8f4f 	dsb	sy
 800d4a4:	613b      	str	r3, [r7, #16]
}
 800d4a6:	bf00      	nop
 800d4a8:	e7fe      	b.n	800d4a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d10a      	bne.n	800d4c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b4:	f383 8811 	msr	BASEPRI, r3
 800d4b8:	f3bf 8f6f 	isb	sy
 800d4bc:	f3bf 8f4f 	dsb	sy
 800d4c0:	60fb      	str	r3, [r7, #12]
}
 800d4c2:	bf00      	nop
 800d4c4:	e7fe      	b.n	800d4c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d4c6:	f000 fe7d 	bl	800e1c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d4ca:	4b1d      	ldr	r3, [pc, #116]	; (800d540 <xTaskCheckForTimeOut+0xbc>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	685b      	ldr	r3, [r3, #4]
 800d4d4:	69ba      	ldr	r2, [r7, #24]
 800d4d6:	1ad3      	subs	r3, r2, r3
 800d4d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4e2:	d102      	bne.n	800d4ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	61fb      	str	r3, [r7, #28]
 800d4e8:	e023      	b.n	800d532 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681a      	ldr	r2, [r3, #0]
 800d4ee:	4b15      	ldr	r3, [pc, #84]	; (800d544 <xTaskCheckForTimeOut+0xc0>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d007      	beq.n	800d506 <xTaskCheckForTimeOut+0x82>
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	685b      	ldr	r3, [r3, #4]
 800d4fa:	69ba      	ldr	r2, [r7, #24]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d302      	bcc.n	800d506 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d500:	2301      	movs	r3, #1
 800d502:	61fb      	str	r3, [r7, #28]
 800d504:	e015      	b.n	800d532 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	697a      	ldr	r2, [r7, #20]
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d20b      	bcs.n	800d528 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	681a      	ldr	r2, [r3, #0]
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	1ad2      	subs	r2, r2, r3
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f7ff ff9b 	bl	800d458 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d522:	2300      	movs	r3, #0
 800d524:	61fb      	str	r3, [r7, #28]
 800d526:	e004      	b.n	800d532 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	2200      	movs	r2, #0
 800d52c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d52e:	2301      	movs	r3, #1
 800d530:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d532:	f000 fe77 	bl	800e224 <vPortExitCritical>

	return xReturn;
 800d536:	69fb      	ldr	r3, [r7, #28]
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3720      	adds	r7, #32
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	20001964 	.word	0x20001964
 800d544:	20001978 	.word	0x20001978

0800d548 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d548:	b480      	push	{r7}
 800d54a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d54c:	4b03      	ldr	r3, [pc, #12]	; (800d55c <vTaskMissedYield+0x14>)
 800d54e:	2201      	movs	r2, #1
 800d550:	601a      	str	r2, [r3, #0]
}
 800d552:	bf00      	nop
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr
 800d55c:	20001974 	.word	0x20001974

0800d560 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b082      	sub	sp, #8
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d568:	f000 f852 	bl	800d610 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d56c:	4b06      	ldr	r3, [pc, #24]	; (800d588 <prvIdleTask+0x28>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	2b01      	cmp	r3, #1
 800d572:	d9f9      	bls.n	800d568 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d574:	4b05      	ldr	r3, [pc, #20]	; (800d58c <prvIdleTask+0x2c>)
 800d576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d57a:	601a      	str	r2, [r3, #0]
 800d57c:	f3bf 8f4f 	dsb	sy
 800d580:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d584:	e7f0      	b.n	800d568 <prvIdleTask+0x8>
 800d586:	bf00      	nop
 800d588:	20001490 	.word	0x20001490
 800d58c:	e000ed04 	.word	0xe000ed04

0800d590 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b082      	sub	sp, #8
 800d594:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d596:	2300      	movs	r3, #0
 800d598:	607b      	str	r3, [r7, #4]
 800d59a:	e00c      	b.n	800d5b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d59c:	687a      	ldr	r2, [r7, #4]
 800d59e:	4613      	mov	r3, r2
 800d5a0:	009b      	lsls	r3, r3, #2
 800d5a2:	4413      	add	r3, r2
 800d5a4:	009b      	lsls	r3, r3, #2
 800d5a6:	4a12      	ldr	r2, [pc, #72]	; (800d5f0 <prvInitialiseTaskLists+0x60>)
 800d5a8:	4413      	add	r3, r2
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f7fe fcca 	bl	800bf44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	607b      	str	r3, [r7, #4]
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2b37      	cmp	r3, #55	; 0x37
 800d5ba:	d9ef      	bls.n	800d59c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d5bc:	480d      	ldr	r0, [pc, #52]	; (800d5f4 <prvInitialiseTaskLists+0x64>)
 800d5be:	f7fe fcc1 	bl	800bf44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d5c2:	480d      	ldr	r0, [pc, #52]	; (800d5f8 <prvInitialiseTaskLists+0x68>)
 800d5c4:	f7fe fcbe 	bl	800bf44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d5c8:	480c      	ldr	r0, [pc, #48]	; (800d5fc <prvInitialiseTaskLists+0x6c>)
 800d5ca:	f7fe fcbb 	bl	800bf44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d5ce:	480c      	ldr	r0, [pc, #48]	; (800d600 <prvInitialiseTaskLists+0x70>)
 800d5d0:	f7fe fcb8 	bl	800bf44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d5d4:	480b      	ldr	r0, [pc, #44]	; (800d604 <prvInitialiseTaskLists+0x74>)
 800d5d6:	f7fe fcb5 	bl	800bf44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d5da:	4b0b      	ldr	r3, [pc, #44]	; (800d608 <prvInitialiseTaskLists+0x78>)
 800d5dc:	4a05      	ldr	r2, [pc, #20]	; (800d5f4 <prvInitialiseTaskLists+0x64>)
 800d5de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d5e0:	4b0a      	ldr	r3, [pc, #40]	; (800d60c <prvInitialiseTaskLists+0x7c>)
 800d5e2:	4a05      	ldr	r2, [pc, #20]	; (800d5f8 <prvInitialiseTaskLists+0x68>)
 800d5e4:	601a      	str	r2, [r3, #0]
}
 800d5e6:	bf00      	nop
 800d5e8:	3708      	adds	r7, #8
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}
 800d5ee:	bf00      	nop
 800d5f0:	20001490 	.word	0x20001490
 800d5f4:	200018f0 	.word	0x200018f0
 800d5f8:	20001904 	.word	0x20001904
 800d5fc:	20001920 	.word	0x20001920
 800d600:	20001934 	.word	0x20001934
 800d604:	2000194c 	.word	0x2000194c
 800d608:	20001918 	.word	0x20001918
 800d60c:	2000191c 	.word	0x2000191c

0800d610 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b082      	sub	sp, #8
 800d614:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d616:	e019      	b.n	800d64c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d618:	f000 fdd4 	bl	800e1c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d61c:	4b10      	ldr	r3, [pc, #64]	; (800d660 <prvCheckTasksWaitingTermination+0x50>)
 800d61e:	68db      	ldr	r3, [r3, #12]
 800d620:	68db      	ldr	r3, [r3, #12]
 800d622:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	3304      	adds	r3, #4
 800d628:	4618      	mov	r0, r3
 800d62a:	f7fe fd15 	bl	800c058 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d62e:	4b0d      	ldr	r3, [pc, #52]	; (800d664 <prvCheckTasksWaitingTermination+0x54>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	3b01      	subs	r3, #1
 800d634:	4a0b      	ldr	r2, [pc, #44]	; (800d664 <prvCheckTasksWaitingTermination+0x54>)
 800d636:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d638:	4b0b      	ldr	r3, [pc, #44]	; (800d668 <prvCheckTasksWaitingTermination+0x58>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	3b01      	subs	r3, #1
 800d63e:	4a0a      	ldr	r2, [pc, #40]	; (800d668 <prvCheckTasksWaitingTermination+0x58>)
 800d640:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d642:	f000 fdef 	bl	800e224 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f000 f810 	bl	800d66c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d64c:	4b06      	ldr	r3, [pc, #24]	; (800d668 <prvCheckTasksWaitingTermination+0x58>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d1e1      	bne.n	800d618 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d654:	bf00      	nop
 800d656:	bf00      	nop
 800d658:	3708      	adds	r7, #8
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
 800d65e:	bf00      	nop
 800d660:	20001934 	.word	0x20001934
 800d664:	20001960 	.word	0x20001960
 800d668:	20001948 	.word	0x20001948

0800d66c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b084      	sub	sp, #16
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	3354      	adds	r3, #84	; 0x54
 800d678:	4618      	mov	r0, r3
 800d67a:	f001 ff27 	bl	800f4cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d684:	2b00      	cmp	r3, #0
 800d686:	d108      	bne.n	800d69a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d68c:	4618      	mov	r0, r3
 800d68e:	f000 ff87 	bl	800e5a0 <vPortFree>
				vPortFree( pxTCB );
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f000 ff84 	bl	800e5a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d698:	e018      	b.n	800d6cc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	d103      	bne.n	800d6ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f000 ff7b 	bl	800e5a0 <vPortFree>
	}
 800d6aa:	e00f      	b.n	800d6cc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d6b2:	2b02      	cmp	r3, #2
 800d6b4:	d00a      	beq.n	800d6cc <prvDeleteTCB+0x60>
	__asm volatile
 800d6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ba:	f383 8811 	msr	BASEPRI, r3
 800d6be:	f3bf 8f6f 	isb	sy
 800d6c2:	f3bf 8f4f 	dsb	sy
 800d6c6:	60fb      	str	r3, [r7, #12]
}
 800d6c8:	bf00      	nop
 800d6ca:	e7fe      	b.n	800d6ca <prvDeleteTCB+0x5e>
	}
 800d6cc:	bf00      	nop
 800d6ce:	3710      	adds	r7, #16
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}

0800d6d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b083      	sub	sp, #12
 800d6d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6da:	4b0c      	ldr	r3, [pc, #48]	; (800d70c <prvResetNextTaskUnblockTime+0x38>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d104      	bne.n	800d6ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d6e4:	4b0a      	ldr	r3, [pc, #40]	; (800d710 <prvResetNextTaskUnblockTime+0x3c>)
 800d6e6:	f04f 32ff 	mov.w	r2, #4294967295
 800d6ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d6ec:	e008      	b.n	800d700 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6ee:	4b07      	ldr	r3, [pc, #28]	; (800d70c <prvResetNextTaskUnblockTime+0x38>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	68db      	ldr	r3, [r3, #12]
 800d6f4:	68db      	ldr	r3, [r3, #12]
 800d6f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	685b      	ldr	r3, [r3, #4]
 800d6fc:	4a04      	ldr	r2, [pc, #16]	; (800d710 <prvResetNextTaskUnblockTime+0x3c>)
 800d6fe:	6013      	str	r3, [r2, #0]
}
 800d700:	bf00      	nop
 800d702:	370c      	adds	r7, #12
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr
 800d70c:	20001918 	.word	0x20001918
 800d710:	20001980 	.word	0x20001980

0800d714 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d714:	b480      	push	{r7}
 800d716:	b083      	sub	sp, #12
 800d718:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d71a:	4b0b      	ldr	r3, [pc, #44]	; (800d748 <xTaskGetSchedulerState+0x34>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d102      	bne.n	800d728 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d722:	2301      	movs	r3, #1
 800d724:	607b      	str	r3, [r7, #4]
 800d726:	e008      	b.n	800d73a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d728:	4b08      	ldr	r3, [pc, #32]	; (800d74c <xTaskGetSchedulerState+0x38>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d102      	bne.n	800d736 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d730:	2302      	movs	r3, #2
 800d732:	607b      	str	r3, [r7, #4]
 800d734:	e001      	b.n	800d73a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d736:	2300      	movs	r3, #0
 800d738:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d73a:	687b      	ldr	r3, [r7, #4]
	}
 800d73c:	4618      	mov	r0, r3
 800d73e:	370c      	adds	r7, #12
 800d740:	46bd      	mov	sp, r7
 800d742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d746:	4770      	bx	lr
 800d748:	2000196c 	.word	0x2000196c
 800d74c:	20001988 	.word	0x20001988

0800d750 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d750:	b580      	push	{r7, lr}
 800d752:	b086      	sub	sp, #24
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d75c:	2300      	movs	r3, #0
 800d75e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d056      	beq.n	800d814 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d766:	4b2e      	ldr	r3, [pc, #184]	; (800d820 <xTaskPriorityDisinherit+0xd0>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	693a      	ldr	r2, [r7, #16]
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d00a      	beq.n	800d786 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d774:	f383 8811 	msr	BASEPRI, r3
 800d778:	f3bf 8f6f 	isb	sy
 800d77c:	f3bf 8f4f 	dsb	sy
 800d780:	60fb      	str	r3, [r7, #12]
}
 800d782:	bf00      	nop
 800d784:	e7fe      	b.n	800d784 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d10a      	bne.n	800d7a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d792:	f383 8811 	msr	BASEPRI, r3
 800d796:	f3bf 8f6f 	isb	sy
 800d79a:	f3bf 8f4f 	dsb	sy
 800d79e:	60bb      	str	r3, [r7, #8]
}
 800d7a0:	bf00      	nop
 800d7a2:	e7fe      	b.n	800d7a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7a8:	1e5a      	subs	r2, r3, #1
 800d7aa:	693b      	ldr	r3, [r7, #16]
 800d7ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d02c      	beq.n	800d814 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d128      	bne.n	800d814 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	3304      	adds	r3, #4
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7fe fc46 	bl	800c058 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7e4:	4b0f      	ldr	r3, [pc, #60]	; (800d824 <xTaskPriorityDisinherit+0xd4>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d903      	bls.n	800d7f4 <xTaskPriorityDisinherit+0xa4>
 800d7ec:	693b      	ldr	r3, [r7, #16]
 800d7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f0:	4a0c      	ldr	r2, [pc, #48]	; (800d824 <xTaskPriorityDisinherit+0xd4>)
 800d7f2:	6013      	str	r3, [r2, #0]
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7f8:	4613      	mov	r3, r2
 800d7fa:	009b      	lsls	r3, r3, #2
 800d7fc:	4413      	add	r3, r2
 800d7fe:	009b      	lsls	r3, r3, #2
 800d800:	4a09      	ldr	r2, [pc, #36]	; (800d828 <xTaskPriorityDisinherit+0xd8>)
 800d802:	441a      	add	r2, r3
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	3304      	adds	r3, #4
 800d808:	4619      	mov	r1, r3
 800d80a:	4610      	mov	r0, r2
 800d80c:	f7fe fbc7 	bl	800bf9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d810:	2301      	movs	r3, #1
 800d812:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d814:	697b      	ldr	r3, [r7, #20]
	}
 800d816:	4618      	mov	r0, r3
 800d818:	3718      	adds	r7, #24
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
 800d81e:	bf00      	nop
 800d820:	2000148c 	.word	0x2000148c
 800d824:	20001968 	.word	0x20001968
 800d828:	20001490 	.word	0x20001490

0800d82c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b084      	sub	sp, #16
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d836:	4b21      	ldr	r3, [pc, #132]	; (800d8bc <prvAddCurrentTaskToDelayedList+0x90>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d83c:	4b20      	ldr	r3, [pc, #128]	; (800d8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	3304      	adds	r3, #4
 800d842:	4618      	mov	r0, r3
 800d844:	f7fe fc08 	bl	800c058 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d84e:	d10a      	bne.n	800d866 <prvAddCurrentTaskToDelayedList+0x3a>
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d007      	beq.n	800d866 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d856:	4b1a      	ldr	r3, [pc, #104]	; (800d8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	3304      	adds	r3, #4
 800d85c:	4619      	mov	r1, r3
 800d85e:	4819      	ldr	r0, [pc, #100]	; (800d8c4 <prvAddCurrentTaskToDelayedList+0x98>)
 800d860:	f7fe fb9d 	bl	800bf9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d864:	e026      	b.n	800d8b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d866:	68fa      	ldr	r2, [r7, #12]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	4413      	add	r3, r2
 800d86c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d86e:	4b14      	ldr	r3, [pc, #80]	; (800d8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	68ba      	ldr	r2, [r7, #8]
 800d874:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d876:	68ba      	ldr	r2, [r7, #8]
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d209      	bcs.n	800d892 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d87e:	4b12      	ldr	r3, [pc, #72]	; (800d8c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d880:	681a      	ldr	r2, [r3, #0]
 800d882:	4b0f      	ldr	r3, [pc, #60]	; (800d8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	3304      	adds	r3, #4
 800d888:	4619      	mov	r1, r3
 800d88a:	4610      	mov	r0, r2
 800d88c:	f7fe fbab 	bl	800bfe6 <vListInsert>
}
 800d890:	e010      	b.n	800d8b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d892:	4b0e      	ldr	r3, [pc, #56]	; (800d8cc <prvAddCurrentTaskToDelayedList+0xa0>)
 800d894:	681a      	ldr	r2, [r3, #0]
 800d896:	4b0a      	ldr	r3, [pc, #40]	; (800d8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	3304      	adds	r3, #4
 800d89c:	4619      	mov	r1, r3
 800d89e:	4610      	mov	r0, r2
 800d8a0:	f7fe fba1 	bl	800bfe6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d8a4:	4b0a      	ldr	r3, [pc, #40]	; (800d8d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	68ba      	ldr	r2, [r7, #8]
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d202      	bcs.n	800d8b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d8ae:	4a08      	ldr	r2, [pc, #32]	; (800d8d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	6013      	str	r3, [r2, #0]
}
 800d8b4:	bf00      	nop
 800d8b6:	3710      	adds	r7, #16
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	20001964 	.word	0x20001964
 800d8c0:	2000148c 	.word	0x2000148c
 800d8c4:	2000194c 	.word	0x2000194c
 800d8c8:	2000191c 	.word	0x2000191c
 800d8cc:	20001918 	.word	0x20001918
 800d8d0:	20001980 	.word	0x20001980

0800d8d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b08a      	sub	sp, #40	; 0x28
 800d8d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d8de:	f000 fb07 	bl	800def0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d8e2:	4b1c      	ldr	r3, [pc, #112]	; (800d954 <xTimerCreateTimerTask+0x80>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d021      	beq.n	800d92e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d8f2:	1d3a      	adds	r2, r7, #4
 800d8f4:	f107 0108 	add.w	r1, r7, #8
 800d8f8:	f107 030c 	add.w	r3, r7, #12
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f7fe fb07 	bl	800bf10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d902:	6879      	ldr	r1, [r7, #4]
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	68fa      	ldr	r2, [r7, #12]
 800d908:	9202      	str	r2, [sp, #8]
 800d90a:	9301      	str	r3, [sp, #4]
 800d90c:	2302      	movs	r3, #2
 800d90e:	9300      	str	r3, [sp, #0]
 800d910:	2300      	movs	r3, #0
 800d912:	460a      	mov	r2, r1
 800d914:	4910      	ldr	r1, [pc, #64]	; (800d958 <xTimerCreateTimerTask+0x84>)
 800d916:	4811      	ldr	r0, [pc, #68]	; (800d95c <xTimerCreateTimerTask+0x88>)
 800d918:	f7ff f8b4 	bl	800ca84 <xTaskCreateStatic>
 800d91c:	4603      	mov	r3, r0
 800d91e:	4a10      	ldr	r2, [pc, #64]	; (800d960 <xTimerCreateTimerTask+0x8c>)
 800d920:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d922:	4b0f      	ldr	r3, [pc, #60]	; (800d960 <xTimerCreateTimerTask+0x8c>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d001      	beq.n	800d92e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d92a:	2301      	movs	r3, #1
 800d92c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d10a      	bne.n	800d94a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d938:	f383 8811 	msr	BASEPRI, r3
 800d93c:	f3bf 8f6f 	isb	sy
 800d940:	f3bf 8f4f 	dsb	sy
 800d944:	613b      	str	r3, [r7, #16]
}
 800d946:	bf00      	nop
 800d948:	e7fe      	b.n	800d948 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d94a:	697b      	ldr	r3, [r7, #20]
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3718      	adds	r7, #24
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}
 800d954:	200019bc 	.word	0x200019bc
 800d958:	08011cd0 	.word	0x08011cd0
 800d95c:	0800da99 	.word	0x0800da99
 800d960:	200019c0 	.word	0x200019c0

0800d964 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b08a      	sub	sp, #40	; 0x28
 800d968:	af00      	add	r7, sp, #0
 800d96a:	60f8      	str	r0, [r7, #12]
 800d96c:	60b9      	str	r1, [r7, #8]
 800d96e:	607a      	str	r2, [r7, #4]
 800d970:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d972:	2300      	movs	r3, #0
 800d974:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d10a      	bne.n	800d992 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d980:	f383 8811 	msr	BASEPRI, r3
 800d984:	f3bf 8f6f 	isb	sy
 800d988:	f3bf 8f4f 	dsb	sy
 800d98c:	623b      	str	r3, [r7, #32]
}
 800d98e:	bf00      	nop
 800d990:	e7fe      	b.n	800d990 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d992:	4b1a      	ldr	r3, [pc, #104]	; (800d9fc <xTimerGenericCommand+0x98>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d02a      	beq.n	800d9f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	2b05      	cmp	r3, #5
 800d9aa:	dc18      	bgt.n	800d9de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d9ac:	f7ff feb2 	bl	800d714 <xTaskGetSchedulerState>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	2b02      	cmp	r3, #2
 800d9b4:	d109      	bne.n	800d9ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d9b6:	4b11      	ldr	r3, [pc, #68]	; (800d9fc <xTimerGenericCommand+0x98>)
 800d9b8:	6818      	ldr	r0, [r3, #0]
 800d9ba:	f107 0110 	add.w	r1, r7, #16
 800d9be:	2300      	movs	r3, #0
 800d9c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9c2:	f7fe fc77 	bl	800c2b4 <xQueueGenericSend>
 800d9c6:	6278      	str	r0, [r7, #36]	; 0x24
 800d9c8:	e012      	b.n	800d9f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d9ca:	4b0c      	ldr	r3, [pc, #48]	; (800d9fc <xTimerGenericCommand+0x98>)
 800d9cc:	6818      	ldr	r0, [r3, #0]
 800d9ce:	f107 0110 	add.w	r1, r7, #16
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	f7fe fc6d 	bl	800c2b4 <xQueueGenericSend>
 800d9da:	6278      	str	r0, [r7, #36]	; 0x24
 800d9dc:	e008      	b.n	800d9f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d9de:	4b07      	ldr	r3, [pc, #28]	; (800d9fc <xTimerGenericCommand+0x98>)
 800d9e0:	6818      	ldr	r0, [r3, #0]
 800d9e2:	f107 0110 	add.w	r1, r7, #16
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	683a      	ldr	r2, [r7, #0]
 800d9ea:	f7fe fd61 	bl	800c4b0 <xQueueGenericSendFromISR>
 800d9ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3728      	adds	r7, #40	; 0x28
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}
 800d9fa:	bf00      	nop
 800d9fc:	200019bc 	.word	0x200019bc

0800da00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b088      	sub	sp, #32
 800da04:	af02      	add	r7, sp, #8
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da0a:	4b22      	ldr	r3, [pc, #136]	; (800da94 <prvProcessExpiredTimer+0x94>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	68db      	ldr	r3, [r3, #12]
 800da10:	68db      	ldr	r3, [r3, #12]
 800da12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da14:	697b      	ldr	r3, [r7, #20]
 800da16:	3304      	adds	r3, #4
 800da18:	4618      	mov	r0, r3
 800da1a:	f7fe fb1d 	bl	800c058 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da24:	f003 0304 	and.w	r3, r3, #4
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d022      	beq.n	800da72 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	699a      	ldr	r2, [r3, #24]
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	18d1      	adds	r1, r2, r3
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	683a      	ldr	r2, [r7, #0]
 800da38:	6978      	ldr	r0, [r7, #20]
 800da3a:	f000 f8d1 	bl	800dbe0 <prvInsertTimerInActiveList>
 800da3e:	4603      	mov	r3, r0
 800da40:	2b00      	cmp	r3, #0
 800da42:	d01f      	beq.n	800da84 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800da44:	2300      	movs	r3, #0
 800da46:	9300      	str	r3, [sp, #0]
 800da48:	2300      	movs	r3, #0
 800da4a:	687a      	ldr	r2, [r7, #4]
 800da4c:	2100      	movs	r1, #0
 800da4e:	6978      	ldr	r0, [r7, #20]
 800da50:	f7ff ff88 	bl	800d964 <xTimerGenericCommand>
 800da54:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d113      	bne.n	800da84 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800da5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da60:	f383 8811 	msr	BASEPRI, r3
 800da64:	f3bf 8f6f 	isb	sy
 800da68:	f3bf 8f4f 	dsb	sy
 800da6c:	60fb      	str	r3, [r7, #12]
}
 800da6e:	bf00      	nop
 800da70:	e7fe      	b.n	800da70 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da78:	f023 0301 	bic.w	r3, r3, #1
 800da7c:	b2da      	uxtb	r2, r3
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	6a1b      	ldr	r3, [r3, #32]
 800da88:	6978      	ldr	r0, [r7, #20]
 800da8a:	4798      	blx	r3
}
 800da8c:	bf00      	nop
 800da8e:	3718      	adds	r7, #24
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}
 800da94:	200019b4 	.word	0x200019b4

0800da98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b084      	sub	sp, #16
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800daa0:	f107 0308 	add.w	r3, r7, #8
 800daa4:	4618      	mov	r0, r3
 800daa6:	f000 f857 	bl	800db58 <prvGetNextExpireTime>
 800daaa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	4619      	mov	r1, r3
 800dab0:	68f8      	ldr	r0, [r7, #12]
 800dab2:	f000 f803 	bl	800dabc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dab6:	f000 f8d5 	bl	800dc64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800daba:	e7f1      	b.n	800daa0 <prvTimerTask+0x8>

0800dabc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b084      	sub	sp, #16
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
 800dac4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dac6:	f7ff fa39 	bl	800cf3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800daca:	f107 0308 	add.w	r3, r7, #8
 800dace:	4618      	mov	r0, r3
 800dad0:	f000 f866 	bl	800dba0 <prvSampleTimeNow>
 800dad4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d130      	bne.n	800db3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d10a      	bne.n	800daf8 <prvProcessTimerOrBlockTask+0x3c>
 800dae2:	687a      	ldr	r2, [r7, #4]
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	429a      	cmp	r2, r3
 800dae8:	d806      	bhi.n	800daf8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800daea:	f7ff fa35 	bl	800cf58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800daee:	68f9      	ldr	r1, [r7, #12]
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f7ff ff85 	bl	800da00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800daf6:	e024      	b.n	800db42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d008      	beq.n	800db10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dafe:	4b13      	ldr	r3, [pc, #76]	; (800db4c <prvProcessTimerOrBlockTask+0x90>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d101      	bne.n	800db0c <prvProcessTimerOrBlockTask+0x50>
 800db08:	2301      	movs	r3, #1
 800db0a:	e000      	b.n	800db0e <prvProcessTimerOrBlockTask+0x52>
 800db0c:	2300      	movs	r3, #0
 800db0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800db10:	4b0f      	ldr	r3, [pc, #60]	; (800db50 <prvProcessTimerOrBlockTask+0x94>)
 800db12:	6818      	ldr	r0, [r3, #0]
 800db14:	687a      	ldr	r2, [r7, #4]
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	1ad3      	subs	r3, r2, r3
 800db1a:	683a      	ldr	r2, [r7, #0]
 800db1c:	4619      	mov	r1, r3
 800db1e:	f7fe ff7d 	bl	800ca1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800db22:	f7ff fa19 	bl	800cf58 <xTaskResumeAll>
 800db26:	4603      	mov	r3, r0
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d10a      	bne.n	800db42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800db2c:	4b09      	ldr	r3, [pc, #36]	; (800db54 <prvProcessTimerOrBlockTask+0x98>)
 800db2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db32:	601a      	str	r2, [r3, #0]
 800db34:	f3bf 8f4f 	dsb	sy
 800db38:	f3bf 8f6f 	isb	sy
}
 800db3c:	e001      	b.n	800db42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800db3e:	f7ff fa0b 	bl	800cf58 <xTaskResumeAll>
}
 800db42:	bf00      	nop
 800db44:	3710      	adds	r7, #16
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}
 800db4a:	bf00      	nop
 800db4c:	200019b8 	.word	0x200019b8
 800db50:	200019bc 	.word	0x200019bc
 800db54:	e000ed04 	.word	0xe000ed04

0800db58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800db58:	b480      	push	{r7}
 800db5a:	b085      	sub	sp, #20
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800db60:	4b0e      	ldr	r3, [pc, #56]	; (800db9c <prvGetNextExpireTime+0x44>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d101      	bne.n	800db6e <prvGetNextExpireTime+0x16>
 800db6a:	2201      	movs	r2, #1
 800db6c:	e000      	b.n	800db70 <prvGetNextExpireTime+0x18>
 800db6e:	2200      	movs	r2, #0
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d105      	bne.n	800db88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db7c:	4b07      	ldr	r3, [pc, #28]	; (800db9c <prvGetNextExpireTime+0x44>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	68db      	ldr	r3, [r3, #12]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	60fb      	str	r3, [r7, #12]
 800db86:	e001      	b.n	800db8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800db88:	2300      	movs	r3, #0
 800db8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800db8c:	68fb      	ldr	r3, [r7, #12]
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3714      	adds	r7, #20
 800db92:	46bd      	mov	sp, r7
 800db94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db98:	4770      	bx	lr
 800db9a:	bf00      	nop
 800db9c:	200019b4 	.word	0x200019b4

0800dba0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b084      	sub	sp, #16
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dba8:	f7ff fa74 	bl	800d094 <xTaskGetTickCount>
 800dbac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dbae:	4b0b      	ldr	r3, [pc, #44]	; (800dbdc <prvSampleTimeNow+0x3c>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	68fa      	ldr	r2, [r7, #12]
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	d205      	bcs.n	800dbc4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dbb8:	f000 f936 	bl	800de28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	601a      	str	r2, [r3, #0]
 800dbc2:	e002      	b.n	800dbca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dbca:	4a04      	ldr	r2, [pc, #16]	; (800dbdc <prvSampleTimeNow+0x3c>)
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3710      	adds	r7, #16
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	200019c4 	.word	0x200019c4

0800dbe0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b086      	sub	sp, #24
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	60f8      	str	r0, [r7, #12]
 800dbe8:	60b9      	str	r1, [r7, #8]
 800dbea:	607a      	str	r2, [r7, #4]
 800dbec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	68ba      	ldr	r2, [r7, #8]
 800dbf6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	68fa      	ldr	r2, [r7, #12]
 800dbfc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dbfe:	68ba      	ldr	r2, [r7, #8]
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	429a      	cmp	r2, r3
 800dc04:	d812      	bhi.n	800dc2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc06:	687a      	ldr	r2, [r7, #4]
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	1ad2      	subs	r2, r2, r3
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	699b      	ldr	r3, [r3, #24]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d302      	bcc.n	800dc1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dc14:	2301      	movs	r3, #1
 800dc16:	617b      	str	r3, [r7, #20]
 800dc18:	e01b      	b.n	800dc52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dc1a:	4b10      	ldr	r3, [pc, #64]	; (800dc5c <prvInsertTimerInActiveList+0x7c>)
 800dc1c:	681a      	ldr	r2, [r3, #0]
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	3304      	adds	r3, #4
 800dc22:	4619      	mov	r1, r3
 800dc24:	4610      	mov	r0, r2
 800dc26:	f7fe f9de 	bl	800bfe6 <vListInsert>
 800dc2a:	e012      	b.n	800dc52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dc2c:	687a      	ldr	r2, [r7, #4]
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d206      	bcs.n	800dc42 <prvInsertTimerInActiveList+0x62>
 800dc34:	68ba      	ldr	r2, [r7, #8]
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d302      	bcc.n	800dc42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	617b      	str	r3, [r7, #20]
 800dc40:	e007      	b.n	800dc52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dc42:	4b07      	ldr	r3, [pc, #28]	; (800dc60 <prvInsertTimerInActiveList+0x80>)
 800dc44:	681a      	ldr	r2, [r3, #0]
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	3304      	adds	r3, #4
 800dc4a:	4619      	mov	r1, r3
 800dc4c:	4610      	mov	r0, r2
 800dc4e:	f7fe f9ca 	bl	800bfe6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dc52:	697b      	ldr	r3, [r7, #20]
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	3718      	adds	r7, #24
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}
 800dc5c:	200019b8 	.word	0x200019b8
 800dc60:	200019b4 	.word	0x200019b4

0800dc64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b08e      	sub	sp, #56	; 0x38
 800dc68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dc6a:	e0ca      	b.n	800de02 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	da18      	bge.n	800dca4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dc72:	1d3b      	adds	r3, r7, #4
 800dc74:	3304      	adds	r3, #4
 800dc76:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d10a      	bne.n	800dc94 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800dc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc82:	f383 8811 	msr	BASEPRI, r3
 800dc86:	f3bf 8f6f 	isb	sy
 800dc8a:	f3bf 8f4f 	dsb	sy
 800dc8e:	61fb      	str	r3, [r7, #28]
}
 800dc90:	bf00      	nop
 800dc92:	e7fe      	b.n	800dc92 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc9a:	6850      	ldr	r0, [r2, #4]
 800dc9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc9e:	6892      	ldr	r2, [r2, #8]
 800dca0:	4611      	mov	r1, r2
 800dca2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	f2c0 80ab 	blt.w	800de02 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dcb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb2:	695b      	ldr	r3, [r3, #20]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d004      	beq.n	800dcc2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcba:	3304      	adds	r3, #4
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7fe f9cb 	bl	800c058 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dcc2:	463b      	mov	r3, r7
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7ff ff6b 	bl	800dba0 <prvSampleTimeNow>
 800dcca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2b09      	cmp	r3, #9
 800dcd0:	f200 8096 	bhi.w	800de00 <prvProcessReceivedCommands+0x19c>
 800dcd4:	a201      	add	r2, pc, #4	; (adr r2, 800dcdc <prvProcessReceivedCommands+0x78>)
 800dcd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcda:	bf00      	nop
 800dcdc:	0800dd05 	.word	0x0800dd05
 800dce0:	0800dd05 	.word	0x0800dd05
 800dce4:	0800dd05 	.word	0x0800dd05
 800dce8:	0800dd79 	.word	0x0800dd79
 800dcec:	0800dd8d 	.word	0x0800dd8d
 800dcf0:	0800ddd7 	.word	0x0800ddd7
 800dcf4:	0800dd05 	.word	0x0800dd05
 800dcf8:	0800dd05 	.word	0x0800dd05
 800dcfc:	0800dd79 	.word	0x0800dd79
 800dd00:	0800dd8d 	.word	0x0800dd8d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd0a:	f043 0301 	orr.w	r3, r3, #1
 800dd0e:	b2da      	uxtb	r2, r3
 800dd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dd16:	68ba      	ldr	r2, [r7, #8]
 800dd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd1a:	699b      	ldr	r3, [r3, #24]
 800dd1c:	18d1      	adds	r1, r2, r3
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd24:	f7ff ff5c 	bl	800dbe0 <prvInsertTimerInActiveList>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d069      	beq.n	800de02 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd30:	6a1b      	ldr	r3, [r3, #32]
 800dd32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd34:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd3c:	f003 0304 	and.w	r3, r3, #4
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d05e      	beq.n	800de02 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dd44:	68ba      	ldr	r2, [r7, #8]
 800dd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd48:	699b      	ldr	r3, [r3, #24]
 800dd4a:	441a      	add	r2, r3
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	9300      	str	r3, [sp, #0]
 800dd50:	2300      	movs	r3, #0
 800dd52:	2100      	movs	r1, #0
 800dd54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd56:	f7ff fe05 	bl	800d964 <xTimerGenericCommand>
 800dd5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dd5c:	6a3b      	ldr	r3, [r7, #32]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d14f      	bne.n	800de02 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800dd62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd66:	f383 8811 	msr	BASEPRI, r3
 800dd6a:	f3bf 8f6f 	isb	sy
 800dd6e:	f3bf 8f4f 	dsb	sy
 800dd72:	61bb      	str	r3, [r7, #24]
}
 800dd74:	bf00      	nop
 800dd76:	e7fe      	b.n	800dd76 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd7e:	f023 0301 	bic.w	r3, r3, #1
 800dd82:	b2da      	uxtb	r2, r3
 800dd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800dd8a:	e03a      	b.n	800de02 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd92:	f043 0301 	orr.w	r3, r3, #1
 800dd96:	b2da      	uxtb	r2, r3
 800dd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dd9e:	68ba      	ldr	r2, [r7, #8]
 800dda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda6:	699b      	ldr	r3, [r3, #24]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d10a      	bne.n	800ddc2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ddac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb0:	f383 8811 	msr	BASEPRI, r3
 800ddb4:	f3bf 8f6f 	isb	sy
 800ddb8:	f3bf 8f4f 	dsb	sy
 800ddbc:	617b      	str	r3, [r7, #20]
}
 800ddbe:	bf00      	nop
 800ddc0:	e7fe      	b.n	800ddc0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ddc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc4:	699a      	ldr	r2, [r3, #24]
 800ddc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc8:	18d1      	adds	r1, r2, r3
 800ddca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddd0:	f7ff ff06 	bl	800dbe0 <prvInsertTimerInActiveList>
					break;
 800ddd4:	e015      	b.n	800de02 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ddd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dddc:	f003 0302 	and.w	r3, r3, #2
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d103      	bne.n	800ddec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800dde4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dde6:	f000 fbdb 	bl	800e5a0 <vPortFree>
 800ddea:	e00a      	b.n	800de02 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ddec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ddf2:	f023 0301 	bic.w	r3, r3, #1
 800ddf6:	b2da      	uxtb	r2, r3
 800ddf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ddfe:	e000      	b.n	800de02 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800de00:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800de02:	4b08      	ldr	r3, [pc, #32]	; (800de24 <prvProcessReceivedCommands+0x1c0>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	1d39      	adds	r1, r7, #4
 800de08:	2200      	movs	r2, #0
 800de0a:	4618      	mov	r0, r3
 800de0c:	f7fe fbec 	bl	800c5e8 <xQueueReceive>
 800de10:	4603      	mov	r3, r0
 800de12:	2b00      	cmp	r3, #0
 800de14:	f47f af2a 	bne.w	800dc6c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800de18:	bf00      	nop
 800de1a:	bf00      	nop
 800de1c:	3730      	adds	r7, #48	; 0x30
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}
 800de22:	bf00      	nop
 800de24:	200019bc 	.word	0x200019bc

0800de28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b088      	sub	sp, #32
 800de2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800de2e:	e048      	b.n	800dec2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800de30:	4b2d      	ldr	r3, [pc, #180]	; (800dee8 <prvSwitchTimerLists+0xc0>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	68db      	ldr	r3, [r3, #12]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de3a:	4b2b      	ldr	r3, [pc, #172]	; (800dee8 <prvSwitchTimerLists+0xc0>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	68db      	ldr	r3, [r3, #12]
 800de40:	68db      	ldr	r3, [r3, #12]
 800de42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	3304      	adds	r3, #4
 800de48:	4618      	mov	r0, r3
 800de4a:	f7fe f905 	bl	800c058 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	6a1b      	ldr	r3, [r3, #32]
 800de52:	68f8      	ldr	r0, [r7, #12]
 800de54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de5c:	f003 0304 	and.w	r3, r3, #4
 800de60:	2b00      	cmp	r3, #0
 800de62:	d02e      	beq.n	800dec2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	699b      	ldr	r3, [r3, #24]
 800de68:	693a      	ldr	r2, [r7, #16]
 800de6a:	4413      	add	r3, r2
 800de6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800de6e:	68ba      	ldr	r2, [r7, #8]
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	429a      	cmp	r2, r3
 800de74:	d90e      	bls.n	800de94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	68ba      	ldr	r2, [r7, #8]
 800de7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	68fa      	ldr	r2, [r7, #12]
 800de80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800de82:	4b19      	ldr	r3, [pc, #100]	; (800dee8 <prvSwitchTimerLists+0xc0>)
 800de84:	681a      	ldr	r2, [r3, #0]
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	3304      	adds	r3, #4
 800de8a:	4619      	mov	r1, r3
 800de8c:	4610      	mov	r0, r2
 800de8e:	f7fe f8aa 	bl	800bfe6 <vListInsert>
 800de92:	e016      	b.n	800dec2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800de94:	2300      	movs	r3, #0
 800de96:	9300      	str	r3, [sp, #0]
 800de98:	2300      	movs	r3, #0
 800de9a:	693a      	ldr	r2, [r7, #16]
 800de9c:	2100      	movs	r1, #0
 800de9e:	68f8      	ldr	r0, [r7, #12]
 800dea0:	f7ff fd60 	bl	800d964 <xTimerGenericCommand>
 800dea4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d10a      	bne.n	800dec2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800deac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deb0:	f383 8811 	msr	BASEPRI, r3
 800deb4:	f3bf 8f6f 	isb	sy
 800deb8:	f3bf 8f4f 	dsb	sy
 800debc:	603b      	str	r3, [r7, #0]
}
 800debe:	bf00      	nop
 800dec0:	e7fe      	b.n	800dec0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dec2:	4b09      	ldr	r3, [pc, #36]	; (800dee8 <prvSwitchTimerLists+0xc0>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d1b1      	bne.n	800de30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800decc:	4b06      	ldr	r3, [pc, #24]	; (800dee8 <prvSwitchTimerLists+0xc0>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ded2:	4b06      	ldr	r3, [pc, #24]	; (800deec <prvSwitchTimerLists+0xc4>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	4a04      	ldr	r2, [pc, #16]	; (800dee8 <prvSwitchTimerLists+0xc0>)
 800ded8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800deda:	4a04      	ldr	r2, [pc, #16]	; (800deec <prvSwitchTimerLists+0xc4>)
 800dedc:	697b      	ldr	r3, [r7, #20]
 800dede:	6013      	str	r3, [r2, #0]
}
 800dee0:	bf00      	nop
 800dee2:	3718      	adds	r7, #24
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}
 800dee8:	200019b4 	.word	0x200019b4
 800deec:	200019b8 	.word	0x200019b8

0800def0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b082      	sub	sp, #8
 800def4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800def6:	f000 f965 	bl	800e1c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800defa:	4b15      	ldr	r3, [pc, #84]	; (800df50 <prvCheckForValidListAndQueue+0x60>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d120      	bne.n	800df44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800df02:	4814      	ldr	r0, [pc, #80]	; (800df54 <prvCheckForValidListAndQueue+0x64>)
 800df04:	f7fe f81e 	bl	800bf44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800df08:	4813      	ldr	r0, [pc, #76]	; (800df58 <prvCheckForValidListAndQueue+0x68>)
 800df0a:	f7fe f81b 	bl	800bf44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800df0e:	4b13      	ldr	r3, [pc, #76]	; (800df5c <prvCheckForValidListAndQueue+0x6c>)
 800df10:	4a10      	ldr	r2, [pc, #64]	; (800df54 <prvCheckForValidListAndQueue+0x64>)
 800df12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800df14:	4b12      	ldr	r3, [pc, #72]	; (800df60 <prvCheckForValidListAndQueue+0x70>)
 800df16:	4a10      	ldr	r2, [pc, #64]	; (800df58 <prvCheckForValidListAndQueue+0x68>)
 800df18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800df1a:	2300      	movs	r3, #0
 800df1c:	9300      	str	r3, [sp, #0]
 800df1e:	4b11      	ldr	r3, [pc, #68]	; (800df64 <prvCheckForValidListAndQueue+0x74>)
 800df20:	4a11      	ldr	r2, [pc, #68]	; (800df68 <prvCheckForValidListAndQueue+0x78>)
 800df22:	2110      	movs	r1, #16
 800df24:	200a      	movs	r0, #10
 800df26:	f7fe f929 	bl	800c17c <xQueueGenericCreateStatic>
 800df2a:	4603      	mov	r3, r0
 800df2c:	4a08      	ldr	r2, [pc, #32]	; (800df50 <prvCheckForValidListAndQueue+0x60>)
 800df2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800df30:	4b07      	ldr	r3, [pc, #28]	; (800df50 <prvCheckForValidListAndQueue+0x60>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d005      	beq.n	800df44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800df38:	4b05      	ldr	r3, [pc, #20]	; (800df50 <prvCheckForValidListAndQueue+0x60>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	490b      	ldr	r1, [pc, #44]	; (800df6c <prvCheckForValidListAndQueue+0x7c>)
 800df3e:	4618      	mov	r0, r3
 800df40:	f7fe fd42 	bl	800c9c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800df44:	f000 f96e 	bl	800e224 <vPortExitCritical>
}
 800df48:	bf00      	nop
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
 800df4e:	bf00      	nop
 800df50:	200019bc 	.word	0x200019bc
 800df54:	2000198c 	.word	0x2000198c
 800df58:	200019a0 	.word	0x200019a0
 800df5c:	200019b4 	.word	0x200019b4
 800df60:	200019b8 	.word	0x200019b8
 800df64:	20001a68 	.word	0x20001a68
 800df68:	200019c8 	.word	0x200019c8
 800df6c:	08011cd8 	.word	0x08011cd8

0800df70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800df70:	b480      	push	{r7}
 800df72:	b085      	sub	sp, #20
 800df74:	af00      	add	r7, sp, #0
 800df76:	60f8      	str	r0, [r7, #12]
 800df78:	60b9      	str	r1, [r7, #8]
 800df7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	3b04      	subs	r3, #4
 800df80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800df88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	3b04      	subs	r3, #4
 800df8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	f023 0201 	bic.w	r2, r3, #1
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	3b04      	subs	r3, #4
 800df9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dfa0:	4a0c      	ldr	r2, [pc, #48]	; (800dfd4 <pxPortInitialiseStack+0x64>)
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	3b14      	subs	r3, #20
 800dfaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dfac:	687a      	ldr	r2, [r7, #4]
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	3b04      	subs	r3, #4
 800dfb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	f06f 0202 	mvn.w	r2, #2
 800dfbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	3b20      	subs	r3, #32
 800dfc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3714      	adds	r7, #20
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd2:	4770      	bx	lr
 800dfd4:	0800dfd9 	.word	0x0800dfd9

0800dfd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dfd8:	b480      	push	{r7}
 800dfda:	b085      	sub	sp, #20
 800dfdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dfe2:	4b12      	ldr	r3, [pc, #72]	; (800e02c <prvTaskExitError+0x54>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfea:	d00a      	beq.n	800e002 <prvTaskExitError+0x2a>
	__asm volatile
 800dfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff0:	f383 8811 	msr	BASEPRI, r3
 800dff4:	f3bf 8f6f 	isb	sy
 800dff8:	f3bf 8f4f 	dsb	sy
 800dffc:	60fb      	str	r3, [r7, #12]
}
 800dffe:	bf00      	nop
 800e000:	e7fe      	b.n	800e000 <prvTaskExitError+0x28>
	__asm volatile
 800e002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e006:	f383 8811 	msr	BASEPRI, r3
 800e00a:	f3bf 8f6f 	isb	sy
 800e00e:	f3bf 8f4f 	dsb	sy
 800e012:	60bb      	str	r3, [r7, #8]
}
 800e014:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e016:	bf00      	nop
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d0fc      	beq.n	800e018 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e01e:	bf00      	nop
 800e020:	bf00      	nop
 800e022:	3714      	adds	r7, #20
 800e024:	46bd      	mov	sp, r7
 800e026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02a:	4770      	bx	lr
 800e02c:	20000010 	.word	0x20000010

0800e030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e030:	4b07      	ldr	r3, [pc, #28]	; (800e050 <pxCurrentTCBConst2>)
 800e032:	6819      	ldr	r1, [r3, #0]
 800e034:	6808      	ldr	r0, [r1, #0]
 800e036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e03a:	f380 8809 	msr	PSP, r0
 800e03e:	f3bf 8f6f 	isb	sy
 800e042:	f04f 0000 	mov.w	r0, #0
 800e046:	f380 8811 	msr	BASEPRI, r0
 800e04a:	4770      	bx	lr
 800e04c:	f3af 8000 	nop.w

0800e050 <pxCurrentTCBConst2>:
 800e050:	2000148c 	.word	0x2000148c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e054:	bf00      	nop
 800e056:	bf00      	nop

0800e058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e058:	4808      	ldr	r0, [pc, #32]	; (800e07c <prvPortStartFirstTask+0x24>)
 800e05a:	6800      	ldr	r0, [r0, #0]
 800e05c:	6800      	ldr	r0, [r0, #0]
 800e05e:	f380 8808 	msr	MSP, r0
 800e062:	f04f 0000 	mov.w	r0, #0
 800e066:	f380 8814 	msr	CONTROL, r0
 800e06a:	b662      	cpsie	i
 800e06c:	b661      	cpsie	f
 800e06e:	f3bf 8f4f 	dsb	sy
 800e072:	f3bf 8f6f 	isb	sy
 800e076:	df00      	svc	0
 800e078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e07a:	bf00      	nop
 800e07c:	e000ed08 	.word	0xe000ed08

0800e080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b086      	sub	sp, #24
 800e084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e086:	4b46      	ldr	r3, [pc, #280]	; (800e1a0 <xPortStartScheduler+0x120>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	4a46      	ldr	r2, [pc, #280]	; (800e1a4 <xPortStartScheduler+0x124>)
 800e08c:	4293      	cmp	r3, r2
 800e08e:	d10a      	bne.n	800e0a6 <xPortStartScheduler+0x26>
	__asm volatile
 800e090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e094:	f383 8811 	msr	BASEPRI, r3
 800e098:	f3bf 8f6f 	isb	sy
 800e09c:	f3bf 8f4f 	dsb	sy
 800e0a0:	613b      	str	r3, [r7, #16]
}
 800e0a2:	bf00      	nop
 800e0a4:	e7fe      	b.n	800e0a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e0a6:	4b3e      	ldr	r3, [pc, #248]	; (800e1a0 <xPortStartScheduler+0x120>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	4a3f      	ldr	r2, [pc, #252]	; (800e1a8 <xPortStartScheduler+0x128>)
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	d10a      	bne.n	800e0c6 <xPortStartScheduler+0x46>
	__asm volatile
 800e0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b4:	f383 8811 	msr	BASEPRI, r3
 800e0b8:	f3bf 8f6f 	isb	sy
 800e0bc:	f3bf 8f4f 	dsb	sy
 800e0c0:	60fb      	str	r3, [r7, #12]
}
 800e0c2:	bf00      	nop
 800e0c4:	e7fe      	b.n	800e0c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e0c6:	4b39      	ldr	r3, [pc, #228]	; (800e1ac <xPortStartScheduler+0x12c>)
 800e0c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	781b      	ldrb	r3, [r3, #0]
 800e0ce:	b2db      	uxtb	r3, r3
 800e0d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	22ff      	movs	r2, #255	; 0xff
 800e0d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e0d8:	697b      	ldr	r3, [r7, #20]
 800e0da:	781b      	ldrb	r3, [r3, #0]
 800e0dc:	b2db      	uxtb	r3, r3
 800e0de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e0e0:	78fb      	ldrb	r3, [r7, #3]
 800e0e2:	b2db      	uxtb	r3, r3
 800e0e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e0e8:	b2da      	uxtb	r2, r3
 800e0ea:	4b31      	ldr	r3, [pc, #196]	; (800e1b0 <xPortStartScheduler+0x130>)
 800e0ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e0ee:	4b31      	ldr	r3, [pc, #196]	; (800e1b4 <xPortStartScheduler+0x134>)
 800e0f0:	2207      	movs	r2, #7
 800e0f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e0f4:	e009      	b.n	800e10a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e0f6:	4b2f      	ldr	r3, [pc, #188]	; (800e1b4 <xPortStartScheduler+0x134>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	3b01      	subs	r3, #1
 800e0fc:	4a2d      	ldr	r2, [pc, #180]	; (800e1b4 <xPortStartScheduler+0x134>)
 800e0fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e100:	78fb      	ldrb	r3, [r7, #3]
 800e102:	b2db      	uxtb	r3, r3
 800e104:	005b      	lsls	r3, r3, #1
 800e106:	b2db      	uxtb	r3, r3
 800e108:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e10a:	78fb      	ldrb	r3, [r7, #3]
 800e10c:	b2db      	uxtb	r3, r3
 800e10e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e112:	2b80      	cmp	r3, #128	; 0x80
 800e114:	d0ef      	beq.n	800e0f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e116:	4b27      	ldr	r3, [pc, #156]	; (800e1b4 <xPortStartScheduler+0x134>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	f1c3 0307 	rsb	r3, r3, #7
 800e11e:	2b04      	cmp	r3, #4
 800e120:	d00a      	beq.n	800e138 <xPortStartScheduler+0xb8>
	__asm volatile
 800e122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e126:	f383 8811 	msr	BASEPRI, r3
 800e12a:	f3bf 8f6f 	isb	sy
 800e12e:	f3bf 8f4f 	dsb	sy
 800e132:	60bb      	str	r3, [r7, #8]
}
 800e134:	bf00      	nop
 800e136:	e7fe      	b.n	800e136 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e138:	4b1e      	ldr	r3, [pc, #120]	; (800e1b4 <xPortStartScheduler+0x134>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	021b      	lsls	r3, r3, #8
 800e13e:	4a1d      	ldr	r2, [pc, #116]	; (800e1b4 <xPortStartScheduler+0x134>)
 800e140:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e142:	4b1c      	ldr	r3, [pc, #112]	; (800e1b4 <xPortStartScheduler+0x134>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e14a:	4a1a      	ldr	r2, [pc, #104]	; (800e1b4 <xPortStartScheduler+0x134>)
 800e14c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	b2da      	uxtb	r2, r3
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e156:	4b18      	ldr	r3, [pc, #96]	; (800e1b8 <xPortStartScheduler+0x138>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	4a17      	ldr	r2, [pc, #92]	; (800e1b8 <xPortStartScheduler+0x138>)
 800e15c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e160:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e162:	4b15      	ldr	r3, [pc, #84]	; (800e1b8 <xPortStartScheduler+0x138>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	4a14      	ldr	r2, [pc, #80]	; (800e1b8 <xPortStartScheduler+0x138>)
 800e168:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e16c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e16e:	f000 f8dd 	bl	800e32c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e172:	4b12      	ldr	r3, [pc, #72]	; (800e1bc <xPortStartScheduler+0x13c>)
 800e174:	2200      	movs	r2, #0
 800e176:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e178:	f000 f8fc 	bl	800e374 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e17c:	4b10      	ldr	r3, [pc, #64]	; (800e1c0 <xPortStartScheduler+0x140>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	4a0f      	ldr	r2, [pc, #60]	; (800e1c0 <xPortStartScheduler+0x140>)
 800e182:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e186:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e188:	f7ff ff66 	bl	800e058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e18c:	f7ff f84c 	bl	800d228 <vTaskSwitchContext>
	prvTaskExitError();
 800e190:	f7ff ff22 	bl	800dfd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e194:	2300      	movs	r3, #0
}
 800e196:	4618      	mov	r0, r3
 800e198:	3718      	adds	r7, #24
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
 800e19e:	bf00      	nop
 800e1a0:	e000ed00 	.word	0xe000ed00
 800e1a4:	410fc271 	.word	0x410fc271
 800e1a8:	410fc270 	.word	0x410fc270
 800e1ac:	e000e400 	.word	0xe000e400
 800e1b0:	20001ab8 	.word	0x20001ab8
 800e1b4:	20001abc 	.word	0x20001abc
 800e1b8:	e000ed20 	.word	0xe000ed20
 800e1bc:	20000010 	.word	0x20000010
 800e1c0:	e000ef34 	.word	0xe000ef34

0800e1c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	b083      	sub	sp, #12
 800e1c8:	af00      	add	r7, sp, #0
	__asm volatile
 800e1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ce:	f383 8811 	msr	BASEPRI, r3
 800e1d2:	f3bf 8f6f 	isb	sy
 800e1d6:	f3bf 8f4f 	dsb	sy
 800e1da:	607b      	str	r3, [r7, #4]
}
 800e1dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e1de:	4b0f      	ldr	r3, [pc, #60]	; (800e21c <vPortEnterCritical+0x58>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	4a0d      	ldr	r2, [pc, #52]	; (800e21c <vPortEnterCritical+0x58>)
 800e1e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e1e8:	4b0c      	ldr	r3, [pc, #48]	; (800e21c <vPortEnterCritical+0x58>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	2b01      	cmp	r3, #1
 800e1ee:	d10f      	bne.n	800e210 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e1f0:	4b0b      	ldr	r3, [pc, #44]	; (800e220 <vPortEnterCritical+0x5c>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	b2db      	uxtb	r3, r3
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d00a      	beq.n	800e210 <vPortEnterCritical+0x4c>
	__asm volatile
 800e1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1fe:	f383 8811 	msr	BASEPRI, r3
 800e202:	f3bf 8f6f 	isb	sy
 800e206:	f3bf 8f4f 	dsb	sy
 800e20a:	603b      	str	r3, [r7, #0]
}
 800e20c:	bf00      	nop
 800e20e:	e7fe      	b.n	800e20e <vPortEnterCritical+0x4a>
	}
}
 800e210:	bf00      	nop
 800e212:	370c      	adds	r7, #12
 800e214:	46bd      	mov	sp, r7
 800e216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21a:	4770      	bx	lr
 800e21c:	20000010 	.word	0x20000010
 800e220:	e000ed04 	.word	0xe000ed04

0800e224 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e224:	b480      	push	{r7}
 800e226:	b083      	sub	sp, #12
 800e228:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e22a:	4b12      	ldr	r3, [pc, #72]	; (800e274 <vPortExitCritical+0x50>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d10a      	bne.n	800e248 <vPortExitCritical+0x24>
	__asm volatile
 800e232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e236:	f383 8811 	msr	BASEPRI, r3
 800e23a:	f3bf 8f6f 	isb	sy
 800e23e:	f3bf 8f4f 	dsb	sy
 800e242:	607b      	str	r3, [r7, #4]
}
 800e244:	bf00      	nop
 800e246:	e7fe      	b.n	800e246 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e248:	4b0a      	ldr	r3, [pc, #40]	; (800e274 <vPortExitCritical+0x50>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	3b01      	subs	r3, #1
 800e24e:	4a09      	ldr	r2, [pc, #36]	; (800e274 <vPortExitCritical+0x50>)
 800e250:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e252:	4b08      	ldr	r3, [pc, #32]	; (800e274 <vPortExitCritical+0x50>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d105      	bne.n	800e266 <vPortExitCritical+0x42>
 800e25a:	2300      	movs	r3, #0
 800e25c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	f383 8811 	msr	BASEPRI, r3
}
 800e264:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e266:	bf00      	nop
 800e268:	370c      	adds	r7, #12
 800e26a:	46bd      	mov	sp, r7
 800e26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e270:	4770      	bx	lr
 800e272:	bf00      	nop
 800e274:	20000010 	.word	0x20000010
	...

0800e280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e280:	f3ef 8009 	mrs	r0, PSP
 800e284:	f3bf 8f6f 	isb	sy
 800e288:	4b15      	ldr	r3, [pc, #84]	; (800e2e0 <pxCurrentTCBConst>)
 800e28a:	681a      	ldr	r2, [r3, #0]
 800e28c:	f01e 0f10 	tst.w	lr, #16
 800e290:	bf08      	it	eq
 800e292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e29a:	6010      	str	r0, [r2, #0]
 800e29c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e2a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e2a4:	f380 8811 	msr	BASEPRI, r0
 800e2a8:	f3bf 8f4f 	dsb	sy
 800e2ac:	f3bf 8f6f 	isb	sy
 800e2b0:	f7fe ffba 	bl	800d228 <vTaskSwitchContext>
 800e2b4:	f04f 0000 	mov.w	r0, #0
 800e2b8:	f380 8811 	msr	BASEPRI, r0
 800e2bc:	bc09      	pop	{r0, r3}
 800e2be:	6819      	ldr	r1, [r3, #0]
 800e2c0:	6808      	ldr	r0, [r1, #0]
 800e2c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c6:	f01e 0f10 	tst.w	lr, #16
 800e2ca:	bf08      	it	eq
 800e2cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e2d0:	f380 8809 	msr	PSP, r0
 800e2d4:	f3bf 8f6f 	isb	sy
 800e2d8:	4770      	bx	lr
 800e2da:	bf00      	nop
 800e2dc:	f3af 8000 	nop.w

0800e2e0 <pxCurrentTCBConst>:
 800e2e0:	2000148c 	.word	0x2000148c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e2e4:	bf00      	nop
 800e2e6:	bf00      	nop

0800e2e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b082      	sub	sp, #8
 800e2ec:	af00      	add	r7, sp, #0
	__asm volatile
 800e2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f2:	f383 8811 	msr	BASEPRI, r3
 800e2f6:	f3bf 8f6f 	isb	sy
 800e2fa:	f3bf 8f4f 	dsb	sy
 800e2fe:	607b      	str	r3, [r7, #4]
}
 800e300:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e302:	f7fe fed7 	bl	800d0b4 <xTaskIncrementTick>
 800e306:	4603      	mov	r3, r0
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d003      	beq.n	800e314 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e30c:	4b06      	ldr	r3, [pc, #24]	; (800e328 <xPortSysTickHandler+0x40>)
 800e30e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e312:	601a      	str	r2, [r3, #0]
 800e314:	2300      	movs	r3, #0
 800e316:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	f383 8811 	msr	BASEPRI, r3
}
 800e31e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e320:	bf00      	nop
 800e322:	3708      	adds	r7, #8
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}
 800e328:	e000ed04 	.word	0xe000ed04

0800e32c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e32c:	b480      	push	{r7}
 800e32e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e330:	4b0b      	ldr	r3, [pc, #44]	; (800e360 <vPortSetupTimerInterrupt+0x34>)
 800e332:	2200      	movs	r2, #0
 800e334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e336:	4b0b      	ldr	r3, [pc, #44]	; (800e364 <vPortSetupTimerInterrupt+0x38>)
 800e338:	2200      	movs	r2, #0
 800e33a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e33c:	4b0a      	ldr	r3, [pc, #40]	; (800e368 <vPortSetupTimerInterrupt+0x3c>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4a0a      	ldr	r2, [pc, #40]	; (800e36c <vPortSetupTimerInterrupt+0x40>)
 800e342:	fba2 2303 	umull	r2, r3, r2, r3
 800e346:	099b      	lsrs	r3, r3, #6
 800e348:	4a09      	ldr	r2, [pc, #36]	; (800e370 <vPortSetupTimerInterrupt+0x44>)
 800e34a:	3b01      	subs	r3, #1
 800e34c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e34e:	4b04      	ldr	r3, [pc, #16]	; (800e360 <vPortSetupTimerInterrupt+0x34>)
 800e350:	2207      	movs	r2, #7
 800e352:	601a      	str	r2, [r3, #0]
}
 800e354:	bf00      	nop
 800e356:	46bd      	mov	sp, r7
 800e358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35c:	4770      	bx	lr
 800e35e:	bf00      	nop
 800e360:	e000e010 	.word	0xe000e010
 800e364:	e000e018 	.word	0xe000e018
 800e368:	20000004 	.word	0x20000004
 800e36c:	10624dd3 	.word	0x10624dd3
 800e370:	e000e014 	.word	0xe000e014

0800e374 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e374:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e384 <vPortEnableVFP+0x10>
 800e378:	6801      	ldr	r1, [r0, #0]
 800e37a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e37e:	6001      	str	r1, [r0, #0]
 800e380:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e382:	bf00      	nop
 800e384:	e000ed88 	.word	0xe000ed88

0800e388 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e388:	b480      	push	{r7}
 800e38a:	b085      	sub	sp, #20
 800e38c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e38e:	f3ef 8305 	mrs	r3, IPSR
 800e392:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2b0f      	cmp	r3, #15
 800e398:	d914      	bls.n	800e3c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e39a:	4a17      	ldr	r2, [pc, #92]	; (800e3f8 <vPortValidateInterruptPriority+0x70>)
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	4413      	add	r3, r2
 800e3a0:	781b      	ldrb	r3, [r3, #0]
 800e3a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e3a4:	4b15      	ldr	r3, [pc, #84]	; (800e3fc <vPortValidateInterruptPriority+0x74>)
 800e3a6:	781b      	ldrb	r3, [r3, #0]
 800e3a8:	7afa      	ldrb	r2, [r7, #11]
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	d20a      	bcs.n	800e3c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b2:	f383 8811 	msr	BASEPRI, r3
 800e3b6:	f3bf 8f6f 	isb	sy
 800e3ba:	f3bf 8f4f 	dsb	sy
 800e3be:	607b      	str	r3, [r7, #4]
}
 800e3c0:	bf00      	nop
 800e3c2:	e7fe      	b.n	800e3c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e3c4:	4b0e      	ldr	r3, [pc, #56]	; (800e400 <vPortValidateInterruptPriority+0x78>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e3cc:	4b0d      	ldr	r3, [pc, #52]	; (800e404 <vPortValidateInterruptPriority+0x7c>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	d90a      	bls.n	800e3ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d8:	f383 8811 	msr	BASEPRI, r3
 800e3dc:	f3bf 8f6f 	isb	sy
 800e3e0:	f3bf 8f4f 	dsb	sy
 800e3e4:	603b      	str	r3, [r7, #0]
}
 800e3e6:	bf00      	nop
 800e3e8:	e7fe      	b.n	800e3e8 <vPortValidateInterruptPriority+0x60>
	}
 800e3ea:	bf00      	nop
 800e3ec:	3714      	adds	r7, #20
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f4:	4770      	bx	lr
 800e3f6:	bf00      	nop
 800e3f8:	e000e3f0 	.word	0xe000e3f0
 800e3fc:	20001ab8 	.word	0x20001ab8
 800e400:	e000ed0c 	.word	0xe000ed0c
 800e404:	20001abc 	.word	0x20001abc

0800e408 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b08a      	sub	sp, #40	; 0x28
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e410:	2300      	movs	r3, #0
 800e412:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e414:	f7fe fd92 	bl	800cf3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e418:	4b5b      	ldr	r3, [pc, #364]	; (800e588 <pvPortMalloc+0x180>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d101      	bne.n	800e424 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e420:	f000 f920 	bl	800e664 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e424:	4b59      	ldr	r3, [pc, #356]	; (800e58c <pvPortMalloc+0x184>)
 800e426:	681a      	ldr	r2, [r3, #0]
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	4013      	ands	r3, r2
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	f040 8093 	bne.w	800e558 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d01d      	beq.n	800e474 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e438:	2208      	movs	r2, #8
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	4413      	add	r3, r2
 800e43e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f003 0307 	and.w	r3, r3, #7
 800e446:	2b00      	cmp	r3, #0
 800e448:	d014      	beq.n	800e474 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f023 0307 	bic.w	r3, r3, #7
 800e450:	3308      	adds	r3, #8
 800e452:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f003 0307 	and.w	r3, r3, #7
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d00a      	beq.n	800e474 <pvPortMalloc+0x6c>
	__asm volatile
 800e45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e462:	f383 8811 	msr	BASEPRI, r3
 800e466:	f3bf 8f6f 	isb	sy
 800e46a:	f3bf 8f4f 	dsb	sy
 800e46e:	617b      	str	r3, [r7, #20]
}
 800e470:	bf00      	nop
 800e472:	e7fe      	b.n	800e472 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d06e      	beq.n	800e558 <pvPortMalloc+0x150>
 800e47a:	4b45      	ldr	r3, [pc, #276]	; (800e590 <pvPortMalloc+0x188>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	687a      	ldr	r2, [r7, #4]
 800e480:	429a      	cmp	r2, r3
 800e482:	d869      	bhi.n	800e558 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e484:	4b43      	ldr	r3, [pc, #268]	; (800e594 <pvPortMalloc+0x18c>)
 800e486:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e488:	4b42      	ldr	r3, [pc, #264]	; (800e594 <pvPortMalloc+0x18c>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e48e:	e004      	b.n	800e49a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e492:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49c:	685b      	ldr	r3, [r3, #4]
 800e49e:	687a      	ldr	r2, [r7, #4]
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	d903      	bls.n	800e4ac <pvPortMalloc+0xa4>
 800e4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d1f1      	bne.n	800e490 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e4ac:	4b36      	ldr	r3, [pc, #216]	; (800e588 <pvPortMalloc+0x180>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d050      	beq.n	800e558 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e4b6:	6a3b      	ldr	r3, [r7, #32]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	2208      	movs	r2, #8
 800e4bc:	4413      	add	r3, r2
 800e4be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c2:	681a      	ldr	r2, [r3, #0]
 800e4c4:	6a3b      	ldr	r3, [r7, #32]
 800e4c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ca:	685a      	ldr	r2, [r3, #4]
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	1ad2      	subs	r2, r2, r3
 800e4d0:	2308      	movs	r3, #8
 800e4d2:	005b      	lsls	r3, r3, #1
 800e4d4:	429a      	cmp	r2, r3
 800e4d6:	d91f      	bls.n	800e518 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e4d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	4413      	add	r3, r2
 800e4de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4e0:	69bb      	ldr	r3, [r7, #24]
 800e4e2:	f003 0307 	and.w	r3, r3, #7
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d00a      	beq.n	800e500 <pvPortMalloc+0xf8>
	__asm volatile
 800e4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ee:	f383 8811 	msr	BASEPRI, r3
 800e4f2:	f3bf 8f6f 	isb	sy
 800e4f6:	f3bf 8f4f 	dsb	sy
 800e4fa:	613b      	str	r3, [r7, #16]
}
 800e4fc:	bf00      	nop
 800e4fe:	e7fe      	b.n	800e4fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e502:	685a      	ldr	r2, [r3, #4]
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	1ad2      	subs	r2, r2, r3
 800e508:	69bb      	ldr	r3, [r7, #24]
 800e50a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50e:	687a      	ldr	r2, [r7, #4]
 800e510:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e512:	69b8      	ldr	r0, [r7, #24]
 800e514:	f000 f908 	bl	800e728 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e518:	4b1d      	ldr	r3, [pc, #116]	; (800e590 <pvPortMalloc+0x188>)
 800e51a:	681a      	ldr	r2, [r3, #0]
 800e51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51e:	685b      	ldr	r3, [r3, #4]
 800e520:	1ad3      	subs	r3, r2, r3
 800e522:	4a1b      	ldr	r2, [pc, #108]	; (800e590 <pvPortMalloc+0x188>)
 800e524:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e526:	4b1a      	ldr	r3, [pc, #104]	; (800e590 <pvPortMalloc+0x188>)
 800e528:	681a      	ldr	r2, [r3, #0]
 800e52a:	4b1b      	ldr	r3, [pc, #108]	; (800e598 <pvPortMalloc+0x190>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	429a      	cmp	r2, r3
 800e530:	d203      	bcs.n	800e53a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e532:	4b17      	ldr	r3, [pc, #92]	; (800e590 <pvPortMalloc+0x188>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	4a18      	ldr	r2, [pc, #96]	; (800e598 <pvPortMalloc+0x190>)
 800e538:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53c:	685a      	ldr	r2, [r3, #4]
 800e53e:	4b13      	ldr	r3, [pc, #76]	; (800e58c <pvPortMalloc+0x184>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	431a      	orrs	r2, r3
 800e544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e546:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54a:	2200      	movs	r2, #0
 800e54c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e54e:	4b13      	ldr	r3, [pc, #76]	; (800e59c <pvPortMalloc+0x194>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	3301      	adds	r3, #1
 800e554:	4a11      	ldr	r2, [pc, #68]	; (800e59c <pvPortMalloc+0x194>)
 800e556:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e558:	f7fe fcfe 	bl	800cf58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e55c:	69fb      	ldr	r3, [r7, #28]
 800e55e:	f003 0307 	and.w	r3, r3, #7
 800e562:	2b00      	cmp	r3, #0
 800e564:	d00a      	beq.n	800e57c <pvPortMalloc+0x174>
	__asm volatile
 800e566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e56a:	f383 8811 	msr	BASEPRI, r3
 800e56e:	f3bf 8f6f 	isb	sy
 800e572:	f3bf 8f4f 	dsb	sy
 800e576:	60fb      	str	r3, [r7, #12]
}
 800e578:	bf00      	nop
 800e57a:	e7fe      	b.n	800e57a <pvPortMalloc+0x172>
	return pvReturn;
 800e57c:	69fb      	ldr	r3, [r7, #28]
}
 800e57e:	4618      	mov	r0, r3
 800e580:	3728      	adds	r7, #40	; 0x28
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}
 800e586:	bf00      	nop
 800e588:	200056c8 	.word	0x200056c8
 800e58c:	200056dc 	.word	0x200056dc
 800e590:	200056cc 	.word	0x200056cc
 800e594:	200056c0 	.word	0x200056c0
 800e598:	200056d0 	.word	0x200056d0
 800e59c:	200056d4 	.word	0x200056d4

0800e5a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b086      	sub	sp, #24
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d04d      	beq.n	800e64e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e5b2:	2308      	movs	r3, #8
 800e5b4:	425b      	negs	r3, r3
 800e5b6:	697a      	ldr	r2, [r7, #20]
 800e5b8:	4413      	add	r3, r2
 800e5ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	685a      	ldr	r2, [r3, #4]
 800e5c4:	4b24      	ldr	r3, [pc, #144]	; (800e658 <vPortFree+0xb8>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	4013      	ands	r3, r2
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d10a      	bne.n	800e5e4 <vPortFree+0x44>
	__asm volatile
 800e5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d2:	f383 8811 	msr	BASEPRI, r3
 800e5d6:	f3bf 8f6f 	isb	sy
 800e5da:	f3bf 8f4f 	dsb	sy
 800e5de:	60fb      	str	r3, [r7, #12]
}
 800e5e0:	bf00      	nop
 800e5e2:	e7fe      	b.n	800e5e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e5e4:	693b      	ldr	r3, [r7, #16]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d00a      	beq.n	800e602 <vPortFree+0x62>
	__asm volatile
 800e5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f0:	f383 8811 	msr	BASEPRI, r3
 800e5f4:	f3bf 8f6f 	isb	sy
 800e5f8:	f3bf 8f4f 	dsb	sy
 800e5fc:	60bb      	str	r3, [r7, #8]
}
 800e5fe:	bf00      	nop
 800e600:	e7fe      	b.n	800e600 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e602:	693b      	ldr	r3, [r7, #16]
 800e604:	685a      	ldr	r2, [r3, #4]
 800e606:	4b14      	ldr	r3, [pc, #80]	; (800e658 <vPortFree+0xb8>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	4013      	ands	r3, r2
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d01e      	beq.n	800e64e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e610:	693b      	ldr	r3, [r7, #16]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d11a      	bne.n	800e64e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	685a      	ldr	r2, [r3, #4]
 800e61c:	4b0e      	ldr	r3, [pc, #56]	; (800e658 <vPortFree+0xb8>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	43db      	mvns	r3, r3
 800e622:	401a      	ands	r2, r3
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e628:	f7fe fc88 	bl	800cf3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	685a      	ldr	r2, [r3, #4]
 800e630:	4b0a      	ldr	r3, [pc, #40]	; (800e65c <vPortFree+0xbc>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	4413      	add	r3, r2
 800e636:	4a09      	ldr	r2, [pc, #36]	; (800e65c <vPortFree+0xbc>)
 800e638:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e63a:	6938      	ldr	r0, [r7, #16]
 800e63c:	f000 f874 	bl	800e728 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e640:	4b07      	ldr	r3, [pc, #28]	; (800e660 <vPortFree+0xc0>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	3301      	adds	r3, #1
 800e646:	4a06      	ldr	r2, [pc, #24]	; (800e660 <vPortFree+0xc0>)
 800e648:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e64a:	f7fe fc85 	bl	800cf58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e64e:	bf00      	nop
 800e650:	3718      	adds	r7, #24
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}
 800e656:	bf00      	nop
 800e658:	200056dc 	.word	0x200056dc
 800e65c:	200056cc 	.word	0x200056cc
 800e660:	200056d8 	.word	0x200056d8

0800e664 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e664:	b480      	push	{r7}
 800e666:	b085      	sub	sp, #20
 800e668:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e66a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e66e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e670:	4b27      	ldr	r3, [pc, #156]	; (800e710 <prvHeapInit+0xac>)
 800e672:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	f003 0307 	and.w	r3, r3, #7
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d00c      	beq.n	800e698 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	3307      	adds	r3, #7
 800e682:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	f023 0307 	bic.w	r3, r3, #7
 800e68a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e68c:	68ba      	ldr	r2, [r7, #8]
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	1ad3      	subs	r3, r2, r3
 800e692:	4a1f      	ldr	r2, [pc, #124]	; (800e710 <prvHeapInit+0xac>)
 800e694:	4413      	add	r3, r2
 800e696:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e69c:	4a1d      	ldr	r2, [pc, #116]	; (800e714 <prvHeapInit+0xb0>)
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e6a2:	4b1c      	ldr	r3, [pc, #112]	; (800e714 <prvHeapInit+0xb0>)
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	68ba      	ldr	r2, [r7, #8]
 800e6ac:	4413      	add	r3, r2
 800e6ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e6b0:	2208      	movs	r2, #8
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	1a9b      	subs	r3, r3, r2
 800e6b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	f023 0307 	bic.w	r3, r3, #7
 800e6be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	4a15      	ldr	r2, [pc, #84]	; (800e718 <prvHeapInit+0xb4>)
 800e6c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e6c6:	4b14      	ldr	r3, [pc, #80]	; (800e718 <prvHeapInit+0xb4>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e6ce:	4b12      	ldr	r3, [pc, #72]	; (800e718 <prvHeapInit+0xb4>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	68fa      	ldr	r2, [r7, #12]
 800e6de:	1ad2      	subs	r2, r2, r3
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e6e4:	4b0c      	ldr	r3, [pc, #48]	; (800e718 <prvHeapInit+0xb4>)
 800e6e6:	681a      	ldr	r2, [r3, #0]
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	685b      	ldr	r3, [r3, #4]
 800e6f0:	4a0a      	ldr	r2, [pc, #40]	; (800e71c <prvHeapInit+0xb8>)
 800e6f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	685b      	ldr	r3, [r3, #4]
 800e6f8:	4a09      	ldr	r2, [pc, #36]	; (800e720 <prvHeapInit+0xbc>)
 800e6fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e6fc:	4b09      	ldr	r3, [pc, #36]	; (800e724 <prvHeapInit+0xc0>)
 800e6fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e702:	601a      	str	r2, [r3, #0]
}
 800e704:	bf00      	nop
 800e706:	3714      	adds	r7, #20
 800e708:	46bd      	mov	sp, r7
 800e70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70e:	4770      	bx	lr
 800e710:	20001ac0 	.word	0x20001ac0
 800e714:	200056c0 	.word	0x200056c0
 800e718:	200056c8 	.word	0x200056c8
 800e71c:	200056d0 	.word	0x200056d0
 800e720:	200056cc 	.word	0x200056cc
 800e724:	200056dc 	.word	0x200056dc

0800e728 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e728:	b480      	push	{r7}
 800e72a:	b085      	sub	sp, #20
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e730:	4b28      	ldr	r3, [pc, #160]	; (800e7d4 <prvInsertBlockIntoFreeList+0xac>)
 800e732:	60fb      	str	r3, [r7, #12]
 800e734:	e002      	b.n	800e73c <prvInsertBlockIntoFreeList+0x14>
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	60fb      	str	r3, [r7, #12]
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	687a      	ldr	r2, [r7, #4]
 800e742:	429a      	cmp	r2, r3
 800e744:	d8f7      	bhi.n	800e736 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	685b      	ldr	r3, [r3, #4]
 800e74e:	68ba      	ldr	r2, [r7, #8]
 800e750:	4413      	add	r3, r2
 800e752:	687a      	ldr	r2, [r7, #4]
 800e754:	429a      	cmp	r2, r3
 800e756:	d108      	bne.n	800e76a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	685a      	ldr	r2, [r3, #4]
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	685b      	ldr	r3, [r3, #4]
 800e760:	441a      	add	r2, r3
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	685b      	ldr	r3, [r3, #4]
 800e772:	68ba      	ldr	r2, [r7, #8]
 800e774:	441a      	add	r2, r3
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d118      	bne.n	800e7b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	681a      	ldr	r2, [r3, #0]
 800e782:	4b15      	ldr	r3, [pc, #84]	; (800e7d8 <prvInsertBlockIntoFreeList+0xb0>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	429a      	cmp	r2, r3
 800e788:	d00d      	beq.n	800e7a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	685a      	ldr	r2, [r3, #4]
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	685b      	ldr	r3, [r3, #4]
 800e794:	441a      	add	r2, r3
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	681a      	ldr	r2, [r3, #0]
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	601a      	str	r2, [r3, #0]
 800e7a4:	e008      	b.n	800e7b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e7a6:	4b0c      	ldr	r3, [pc, #48]	; (800e7d8 <prvInsertBlockIntoFreeList+0xb0>)
 800e7a8:	681a      	ldr	r2, [r3, #0]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	601a      	str	r2, [r3, #0]
 800e7ae:	e003      	b.n	800e7b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	681a      	ldr	r2, [r3, #0]
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e7b8:	68fa      	ldr	r2, [r7, #12]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	d002      	beq.n	800e7c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	687a      	ldr	r2, [r7, #4]
 800e7c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e7c6:	bf00      	nop
 800e7c8:	3714      	adds	r7, #20
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr
 800e7d2:	bf00      	nop
 800e7d4:	200056c0 	.word	0x200056c0
 800e7d8:	200056c8 	.word	0x200056c8

0800e7dc <__cvt>:
 800e7dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e7e0:	ec55 4b10 	vmov	r4, r5, d0
 800e7e4:	2d00      	cmp	r5, #0
 800e7e6:	460e      	mov	r6, r1
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	462b      	mov	r3, r5
 800e7ec:	bfbb      	ittet	lt
 800e7ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e7f2:	461d      	movlt	r5, r3
 800e7f4:	2300      	movge	r3, #0
 800e7f6:	232d      	movlt	r3, #45	; 0x2d
 800e7f8:	700b      	strb	r3, [r1, #0]
 800e7fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e7fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e800:	4691      	mov	r9, r2
 800e802:	f023 0820 	bic.w	r8, r3, #32
 800e806:	bfbc      	itt	lt
 800e808:	4622      	movlt	r2, r4
 800e80a:	4614      	movlt	r4, r2
 800e80c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e810:	d005      	beq.n	800e81e <__cvt+0x42>
 800e812:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e816:	d100      	bne.n	800e81a <__cvt+0x3e>
 800e818:	3601      	adds	r6, #1
 800e81a:	2102      	movs	r1, #2
 800e81c:	e000      	b.n	800e820 <__cvt+0x44>
 800e81e:	2103      	movs	r1, #3
 800e820:	ab03      	add	r3, sp, #12
 800e822:	9301      	str	r3, [sp, #4]
 800e824:	ab02      	add	r3, sp, #8
 800e826:	9300      	str	r3, [sp, #0]
 800e828:	ec45 4b10 	vmov	d0, r4, r5
 800e82c:	4653      	mov	r3, sl
 800e82e:	4632      	mov	r2, r6
 800e830:	f000 ff9a 	bl	800f768 <_dtoa_r>
 800e834:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e838:	4607      	mov	r7, r0
 800e83a:	d102      	bne.n	800e842 <__cvt+0x66>
 800e83c:	f019 0f01 	tst.w	r9, #1
 800e840:	d022      	beq.n	800e888 <__cvt+0xac>
 800e842:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e846:	eb07 0906 	add.w	r9, r7, r6
 800e84a:	d110      	bne.n	800e86e <__cvt+0x92>
 800e84c:	783b      	ldrb	r3, [r7, #0]
 800e84e:	2b30      	cmp	r3, #48	; 0x30
 800e850:	d10a      	bne.n	800e868 <__cvt+0x8c>
 800e852:	2200      	movs	r2, #0
 800e854:	2300      	movs	r3, #0
 800e856:	4620      	mov	r0, r4
 800e858:	4629      	mov	r1, r5
 800e85a:	f7f2 f935 	bl	8000ac8 <__aeabi_dcmpeq>
 800e85e:	b918      	cbnz	r0, 800e868 <__cvt+0x8c>
 800e860:	f1c6 0601 	rsb	r6, r6, #1
 800e864:	f8ca 6000 	str.w	r6, [sl]
 800e868:	f8da 3000 	ldr.w	r3, [sl]
 800e86c:	4499      	add	r9, r3
 800e86e:	2200      	movs	r2, #0
 800e870:	2300      	movs	r3, #0
 800e872:	4620      	mov	r0, r4
 800e874:	4629      	mov	r1, r5
 800e876:	f7f2 f927 	bl	8000ac8 <__aeabi_dcmpeq>
 800e87a:	b108      	cbz	r0, 800e880 <__cvt+0xa4>
 800e87c:	f8cd 900c 	str.w	r9, [sp, #12]
 800e880:	2230      	movs	r2, #48	; 0x30
 800e882:	9b03      	ldr	r3, [sp, #12]
 800e884:	454b      	cmp	r3, r9
 800e886:	d307      	bcc.n	800e898 <__cvt+0xbc>
 800e888:	9b03      	ldr	r3, [sp, #12]
 800e88a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e88c:	1bdb      	subs	r3, r3, r7
 800e88e:	4638      	mov	r0, r7
 800e890:	6013      	str	r3, [r2, #0]
 800e892:	b004      	add	sp, #16
 800e894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e898:	1c59      	adds	r1, r3, #1
 800e89a:	9103      	str	r1, [sp, #12]
 800e89c:	701a      	strb	r2, [r3, #0]
 800e89e:	e7f0      	b.n	800e882 <__cvt+0xa6>

0800e8a0 <__exponent>:
 800e8a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	2900      	cmp	r1, #0
 800e8a6:	bfb8      	it	lt
 800e8a8:	4249      	neglt	r1, r1
 800e8aa:	f803 2b02 	strb.w	r2, [r3], #2
 800e8ae:	bfb4      	ite	lt
 800e8b0:	222d      	movlt	r2, #45	; 0x2d
 800e8b2:	222b      	movge	r2, #43	; 0x2b
 800e8b4:	2909      	cmp	r1, #9
 800e8b6:	7042      	strb	r2, [r0, #1]
 800e8b8:	dd2a      	ble.n	800e910 <__exponent+0x70>
 800e8ba:	f10d 0207 	add.w	r2, sp, #7
 800e8be:	4617      	mov	r7, r2
 800e8c0:	260a      	movs	r6, #10
 800e8c2:	4694      	mov	ip, r2
 800e8c4:	fb91 f5f6 	sdiv	r5, r1, r6
 800e8c8:	fb06 1415 	mls	r4, r6, r5, r1
 800e8cc:	3430      	adds	r4, #48	; 0x30
 800e8ce:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800e8d2:	460c      	mov	r4, r1
 800e8d4:	2c63      	cmp	r4, #99	; 0x63
 800e8d6:	f102 32ff 	add.w	r2, r2, #4294967295
 800e8da:	4629      	mov	r1, r5
 800e8dc:	dcf1      	bgt.n	800e8c2 <__exponent+0x22>
 800e8de:	3130      	adds	r1, #48	; 0x30
 800e8e0:	f1ac 0402 	sub.w	r4, ip, #2
 800e8e4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e8e8:	1c41      	adds	r1, r0, #1
 800e8ea:	4622      	mov	r2, r4
 800e8ec:	42ba      	cmp	r2, r7
 800e8ee:	d30a      	bcc.n	800e906 <__exponent+0x66>
 800e8f0:	f10d 0209 	add.w	r2, sp, #9
 800e8f4:	eba2 020c 	sub.w	r2, r2, ip
 800e8f8:	42bc      	cmp	r4, r7
 800e8fa:	bf88      	it	hi
 800e8fc:	2200      	movhi	r2, #0
 800e8fe:	4413      	add	r3, r2
 800e900:	1a18      	subs	r0, r3, r0
 800e902:	b003      	add	sp, #12
 800e904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e906:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e90a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800e90e:	e7ed      	b.n	800e8ec <__exponent+0x4c>
 800e910:	2330      	movs	r3, #48	; 0x30
 800e912:	3130      	adds	r1, #48	; 0x30
 800e914:	7083      	strb	r3, [r0, #2]
 800e916:	70c1      	strb	r1, [r0, #3]
 800e918:	1d03      	adds	r3, r0, #4
 800e91a:	e7f1      	b.n	800e900 <__exponent+0x60>

0800e91c <_printf_float>:
 800e91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e920:	ed2d 8b02 	vpush	{d8}
 800e924:	b08d      	sub	sp, #52	; 0x34
 800e926:	460c      	mov	r4, r1
 800e928:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e92c:	4616      	mov	r6, r2
 800e92e:	461f      	mov	r7, r3
 800e930:	4605      	mov	r5, r0
 800e932:	f000 fdb7 	bl	800f4a4 <_localeconv_r>
 800e936:	f8d0 a000 	ldr.w	sl, [r0]
 800e93a:	4650      	mov	r0, sl
 800e93c:	f7f1 fc98 	bl	8000270 <strlen>
 800e940:	2300      	movs	r3, #0
 800e942:	930a      	str	r3, [sp, #40]	; 0x28
 800e944:	6823      	ldr	r3, [r4, #0]
 800e946:	9305      	str	r3, [sp, #20]
 800e948:	f8d8 3000 	ldr.w	r3, [r8]
 800e94c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e950:	3307      	adds	r3, #7
 800e952:	f023 0307 	bic.w	r3, r3, #7
 800e956:	f103 0208 	add.w	r2, r3, #8
 800e95a:	f8c8 2000 	str.w	r2, [r8]
 800e95e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e962:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e966:	9307      	str	r3, [sp, #28]
 800e968:	f8cd 8018 	str.w	r8, [sp, #24]
 800e96c:	ee08 0a10 	vmov	s16, r0
 800e970:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800e974:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e978:	4b9e      	ldr	r3, [pc, #632]	; (800ebf4 <_printf_float+0x2d8>)
 800e97a:	f04f 32ff 	mov.w	r2, #4294967295
 800e97e:	f7f2 f8d5 	bl	8000b2c <__aeabi_dcmpun>
 800e982:	bb88      	cbnz	r0, 800e9e8 <_printf_float+0xcc>
 800e984:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e988:	4b9a      	ldr	r3, [pc, #616]	; (800ebf4 <_printf_float+0x2d8>)
 800e98a:	f04f 32ff 	mov.w	r2, #4294967295
 800e98e:	f7f2 f8af 	bl	8000af0 <__aeabi_dcmple>
 800e992:	bb48      	cbnz	r0, 800e9e8 <_printf_float+0xcc>
 800e994:	2200      	movs	r2, #0
 800e996:	2300      	movs	r3, #0
 800e998:	4640      	mov	r0, r8
 800e99a:	4649      	mov	r1, r9
 800e99c:	f7f2 f89e 	bl	8000adc <__aeabi_dcmplt>
 800e9a0:	b110      	cbz	r0, 800e9a8 <_printf_float+0x8c>
 800e9a2:	232d      	movs	r3, #45	; 0x2d
 800e9a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e9a8:	4a93      	ldr	r2, [pc, #588]	; (800ebf8 <_printf_float+0x2dc>)
 800e9aa:	4b94      	ldr	r3, [pc, #592]	; (800ebfc <_printf_float+0x2e0>)
 800e9ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e9b0:	bf94      	ite	ls
 800e9b2:	4690      	movls	r8, r2
 800e9b4:	4698      	movhi	r8, r3
 800e9b6:	2303      	movs	r3, #3
 800e9b8:	6123      	str	r3, [r4, #16]
 800e9ba:	9b05      	ldr	r3, [sp, #20]
 800e9bc:	f023 0304 	bic.w	r3, r3, #4
 800e9c0:	6023      	str	r3, [r4, #0]
 800e9c2:	f04f 0900 	mov.w	r9, #0
 800e9c6:	9700      	str	r7, [sp, #0]
 800e9c8:	4633      	mov	r3, r6
 800e9ca:	aa0b      	add	r2, sp, #44	; 0x2c
 800e9cc:	4621      	mov	r1, r4
 800e9ce:	4628      	mov	r0, r5
 800e9d0:	f000 f9da 	bl	800ed88 <_printf_common>
 800e9d4:	3001      	adds	r0, #1
 800e9d6:	f040 8090 	bne.w	800eafa <_printf_float+0x1de>
 800e9da:	f04f 30ff 	mov.w	r0, #4294967295
 800e9de:	b00d      	add	sp, #52	; 0x34
 800e9e0:	ecbd 8b02 	vpop	{d8}
 800e9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9e8:	4642      	mov	r2, r8
 800e9ea:	464b      	mov	r3, r9
 800e9ec:	4640      	mov	r0, r8
 800e9ee:	4649      	mov	r1, r9
 800e9f0:	f7f2 f89c 	bl	8000b2c <__aeabi_dcmpun>
 800e9f4:	b140      	cbz	r0, 800ea08 <_printf_float+0xec>
 800e9f6:	464b      	mov	r3, r9
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	bfbc      	itt	lt
 800e9fc:	232d      	movlt	r3, #45	; 0x2d
 800e9fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ea02:	4a7f      	ldr	r2, [pc, #508]	; (800ec00 <_printf_float+0x2e4>)
 800ea04:	4b7f      	ldr	r3, [pc, #508]	; (800ec04 <_printf_float+0x2e8>)
 800ea06:	e7d1      	b.n	800e9ac <_printf_float+0x90>
 800ea08:	6863      	ldr	r3, [r4, #4]
 800ea0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ea0e:	9206      	str	r2, [sp, #24]
 800ea10:	1c5a      	adds	r2, r3, #1
 800ea12:	d13f      	bne.n	800ea94 <_printf_float+0x178>
 800ea14:	2306      	movs	r3, #6
 800ea16:	6063      	str	r3, [r4, #4]
 800ea18:	9b05      	ldr	r3, [sp, #20]
 800ea1a:	6861      	ldr	r1, [r4, #4]
 800ea1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ea20:	2300      	movs	r3, #0
 800ea22:	9303      	str	r3, [sp, #12]
 800ea24:	ab0a      	add	r3, sp, #40	; 0x28
 800ea26:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ea2a:	ab09      	add	r3, sp, #36	; 0x24
 800ea2c:	ec49 8b10 	vmov	d0, r8, r9
 800ea30:	9300      	str	r3, [sp, #0]
 800ea32:	6022      	str	r2, [r4, #0]
 800ea34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ea38:	4628      	mov	r0, r5
 800ea3a:	f7ff fecf 	bl	800e7dc <__cvt>
 800ea3e:	9b06      	ldr	r3, [sp, #24]
 800ea40:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea42:	2b47      	cmp	r3, #71	; 0x47
 800ea44:	4680      	mov	r8, r0
 800ea46:	d108      	bne.n	800ea5a <_printf_float+0x13e>
 800ea48:	1cc8      	adds	r0, r1, #3
 800ea4a:	db02      	blt.n	800ea52 <_printf_float+0x136>
 800ea4c:	6863      	ldr	r3, [r4, #4]
 800ea4e:	4299      	cmp	r1, r3
 800ea50:	dd41      	ble.n	800ead6 <_printf_float+0x1ba>
 800ea52:	f1ab 0302 	sub.w	r3, fp, #2
 800ea56:	fa5f fb83 	uxtb.w	fp, r3
 800ea5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ea5e:	d820      	bhi.n	800eaa2 <_printf_float+0x186>
 800ea60:	3901      	subs	r1, #1
 800ea62:	465a      	mov	r2, fp
 800ea64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ea68:	9109      	str	r1, [sp, #36]	; 0x24
 800ea6a:	f7ff ff19 	bl	800e8a0 <__exponent>
 800ea6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea70:	1813      	adds	r3, r2, r0
 800ea72:	2a01      	cmp	r2, #1
 800ea74:	4681      	mov	r9, r0
 800ea76:	6123      	str	r3, [r4, #16]
 800ea78:	dc02      	bgt.n	800ea80 <_printf_float+0x164>
 800ea7a:	6822      	ldr	r2, [r4, #0]
 800ea7c:	07d2      	lsls	r2, r2, #31
 800ea7e:	d501      	bpl.n	800ea84 <_printf_float+0x168>
 800ea80:	3301      	adds	r3, #1
 800ea82:	6123      	str	r3, [r4, #16]
 800ea84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d09c      	beq.n	800e9c6 <_printf_float+0xaa>
 800ea8c:	232d      	movs	r3, #45	; 0x2d
 800ea8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea92:	e798      	b.n	800e9c6 <_printf_float+0xaa>
 800ea94:	9a06      	ldr	r2, [sp, #24]
 800ea96:	2a47      	cmp	r2, #71	; 0x47
 800ea98:	d1be      	bne.n	800ea18 <_printf_float+0xfc>
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d1bc      	bne.n	800ea18 <_printf_float+0xfc>
 800ea9e:	2301      	movs	r3, #1
 800eaa0:	e7b9      	b.n	800ea16 <_printf_float+0xfa>
 800eaa2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800eaa6:	d118      	bne.n	800eada <_printf_float+0x1be>
 800eaa8:	2900      	cmp	r1, #0
 800eaaa:	6863      	ldr	r3, [r4, #4]
 800eaac:	dd0b      	ble.n	800eac6 <_printf_float+0x1aa>
 800eaae:	6121      	str	r1, [r4, #16]
 800eab0:	b913      	cbnz	r3, 800eab8 <_printf_float+0x19c>
 800eab2:	6822      	ldr	r2, [r4, #0]
 800eab4:	07d0      	lsls	r0, r2, #31
 800eab6:	d502      	bpl.n	800eabe <_printf_float+0x1a2>
 800eab8:	3301      	adds	r3, #1
 800eaba:	440b      	add	r3, r1
 800eabc:	6123      	str	r3, [r4, #16]
 800eabe:	65a1      	str	r1, [r4, #88]	; 0x58
 800eac0:	f04f 0900 	mov.w	r9, #0
 800eac4:	e7de      	b.n	800ea84 <_printf_float+0x168>
 800eac6:	b913      	cbnz	r3, 800eace <_printf_float+0x1b2>
 800eac8:	6822      	ldr	r2, [r4, #0]
 800eaca:	07d2      	lsls	r2, r2, #31
 800eacc:	d501      	bpl.n	800ead2 <_printf_float+0x1b6>
 800eace:	3302      	adds	r3, #2
 800ead0:	e7f4      	b.n	800eabc <_printf_float+0x1a0>
 800ead2:	2301      	movs	r3, #1
 800ead4:	e7f2      	b.n	800eabc <_printf_float+0x1a0>
 800ead6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800eada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eadc:	4299      	cmp	r1, r3
 800eade:	db05      	blt.n	800eaec <_printf_float+0x1d0>
 800eae0:	6823      	ldr	r3, [r4, #0]
 800eae2:	6121      	str	r1, [r4, #16]
 800eae4:	07d8      	lsls	r0, r3, #31
 800eae6:	d5ea      	bpl.n	800eabe <_printf_float+0x1a2>
 800eae8:	1c4b      	adds	r3, r1, #1
 800eaea:	e7e7      	b.n	800eabc <_printf_float+0x1a0>
 800eaec:	2900      	cmp	r1, #0
 800eaee:	bfd4      	ite	le
 800eaf0:	f1c1 0202 	rsble	r2, r1, #2
 800eaf4:	2201      	movgt	r2, #1
 800eaf6:	4413      	add	r3, r2
 800eaf8:	e7e0      	b.n	800eabc <_printf_float+0x1a0>
 800eafa:	6823      	ldr	r3, [r4, #0]
 800eafc:	055a      	lsls	r2, r3, #21
 800eafe:	d407      	bmi.n	800eb10 <_printf_float+0x1f4>
 800eb00:	6923      	ldr	r3, [r4, #16]
 800eb02:	4642      	mov	r2, r8
 800eb04:	4631      	mov	r1, r6
 800eb06:	4628      	mov	r0, r5
 800eb08:	47b8      	blx	r7
 800eb0a:	3001      	adds	r0, #1
 800eb0c:	d12c      	bne.n	800eb68 <_printf_float+0x24c>
 800eb0e:	e764      	b.n	800e9da <_printf_float+0xbe>
 800eb10:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eb14:	f240 80e0 	bls.w	800ecd8 <_printf_float+0x3bc>
 800eb18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	2300      	movs	r3, #0
 800eb20:	f7f1 ffd2 	bl	8000ac8 <__aeabi_dcmpeq>
 800eb24:	2800      	cmp	r0, #0
 800eb26:	d034      	beq.n	800eb92 <_printf_float+0x276>
 800eb28:	4a37      	ldr	r2, [pc, #220]	; (800ec08 <_printf_float+0x2ec>)
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	4631      	mov	r1, r6
 800eb2e:	4628      	mov	r0, r5
 800eb30:	47b8      	blx	r7
 800eb32:	3001      	adds	r0, #1
 800eb34:	f43f af51 	beq.w	800e9da <_printf_float+0xbe>
 800eb38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb3c:	429a      	cmp	r2, r3
 800eb3e:	db02      	blt.n	800eb46 <_printf_float+0x22a>
 800eb40:	6823      	ldr	r3, [r4, #0]
 800eb42:	07d8      	lsls	r0, r3, #31
 800eb44:	d510      	bpl.n	800eb68 <_printf_float+0x24c>
 800eb46:	ee18 3a10 	vmov	r3, s16
 800eb4a:	4652      	mov	r2, sl
 800eb4c:	4631      	mov	r1, r6
 800eb4e:	4628      	mov	r0, r5
 800eb50:	47b8      	blx	r7
 800eb52:	3001      	adds	r0, #1
 800eb54:	f43f af41 	beq.w	800e9da <_printf_float+0xbe>
 800eb58:	f04f 0800 	mov.w	r8, #0
 800eb5c:	f104 091a 	add.w	r9, r4, #26
 800eb60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb62:	3b01      	subs	r3, #1
 800eb64:	4543      	cmp	r3, r8
 800eb66:	dc09      	bgt.n	800eb7c <_printf_float+0x260>
 800eb68:	6823      	ldr	r3, [r4, #0]
 800eb6a:	079b      	lsls	r3, r3, #30
 800eb6c:	f100 8107 	bmi.w	800ed7e <_printf_float+0x462>
 800eb70:	68e0      	ldr	r0, [r4, #12]
 800eb72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb74:	4298      	cmp	r0, r3
 800eb76:	bfb8      	it	lt
 800eb78:	4618      	movlt	r0, r3
 800eb7a:	e730      	b.n	800e9de <_printf_float+0xc2>
 800eb7c:	2301      	movs	r3, #1
 800eb7e:	464a      	mov	r2, r9
 800eb80:	4631      	mov	r1, r6
 800eb82:	4628      	mov	r0, r5
 800eb84:	47b8      	blx	r7
 800eb86:	3001      	adds	r0, #1
 800eb88:	f43f af27 	beq.w	800e9da <_printf_float+0xbe>
 800eb8c:	f108 0801 	add.w	r8, r8, #1
 800eb90:	e7e6      	b.n	800eb60 <_printf_float+0x244>
 800eb92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	dc39      	bgt.n	800ec0c <_printf_float+0x2f0>
 800eb98:	4a1b      	ldr	r2, [pc, #108]	; (800ec08 <_printf_float+0x2ec>)
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	4631      	mov	r1, r6
 800eb9e:	4628      	mov	r0, r5
 800eba0:	47b8      	blx	r7
 800eba2:	3001      	adds	r0, #1
 800eba4:	f43f af19 	beq.w	800e9da <_printf_float+0xbe>
 800eba8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ebac:	4313      	orrs	r3, r2
 800ebae:	d102      	bne.n	800ebb6 <_printf_float+0x29a>
 800ebb0:	6823      	ldr	r3, [r4, #0]
 800ebb2:	07d9      	lsls	r1, r3, #31
 800ebb4:	d5d8      	bpl.n	800eb68 <_printf_float+0x24c>
 800ebb6:	ee18 3a10 	vmov	r3, s16
 800ebba:	4652      	mov	r2, sl
 800ebbc:	4631      	mov	r1, r6
 800ebbe:	4628      	mov	r0, r5
 800ebc0:	47b8      	blx	r7
 800ebc2:	3001      	adds	r0, #1
 800ebc4:	f43f af09 	beq.w	800e9da <_printf_float+0xbe>
 800ebc8:	f04f 0900 	mov.w	r9, #0
 800ebcc:	f104 0a1a 	add.w	sl, r4, #26
 800ebd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebd2:	425b      	negs	r3, r3
 800ebd4:	454b      	cmp	r3, r9
 800ebd6:	dc01      	bgt.n	800ebdc <_printf_float+0x2c0>
 800ebd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebda:	e792      	b.n	800eb02 <_printf_float+0x1e6>
 800ebdc:	2301      	movs	r3, #1
 800ebde:	4652      	mov	r2, sl
 800ebe0:	4631      	mov	r1, r6
 800ebe2:	4628      	mov	r0, r5
 800ebe4:	47b8      	blx	r7
 800ebe6:	3001      	adds	r0, #1
 800ebe8:	f43f aef7 	beq.w	800e9da <_printf_float+0xbe>
 800ebec:	f109 0901 	add.w	r9, r9, #1
 800ebf0:	e7ee      	b.n	800ebd0 <_printf_float+0x2b4>
 800ebf2:	bf00      	nop
 800ebf4:	7fefffff 	.word	0x7fefffff
 800ebf8:	08011d90 	.word	0x08011d90
 800ebfc:	08011d94 	.word	0x08011d94
 800ec00:	08011d98 	.word	0x08011d98
 800ec04:	08011d9c 	.word	0x08011d9c
 800ec08:	08011da0 	.word	0x08011da0
 800ec0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ec10:	429a      	cmp	r2, r3
 800ec12:	bfa8      	it	ge
 800ec14:	461a      	movge	r2, r3
 800ec16:	2a00      	cmp	r2, #0
 800ec18:	4691      	mov	r9, r2
 800ec1a:	dc37      	bgt.n	800ec8c <_printf_float+0x370>
 800ec1c:	f04f 0b00 	mov.w	fp, #0
 800ec20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ec24:	f104 021a 	add.w	r2, r4, #26
 800ec28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ec2a:	9305      	str	r3, [sp, #20]
 800ec2c:	eba3 0309 	sub.w	r3, r3, r9
 800ec30:	455b      	cmp	r3, fp
 800ec32:	dc33      	bgt.n	800ec9c <_printf_float+0x380>
 800ec34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	db3b      	blt.n	800ecb4 <_printf_float+0x398>
 800ec3c:	6823      	ldr	r3, [r4, #0]
 800ec3e:	07da      	lsls	r2, r3, #31
 800ec40:	d438      	bmi.n	800ecb4 <_printf_float+0x398>
 800ec42:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ec46:	eba2 0903 	sub.w	r9, r2, r3
 800ec4a:	9b05      	ldr	r3, [sp, #20]
 800ec4c:	1ad2      	subs	r2, r2, r3
 800ec4e:	4591      	cmp	r9, r2
 800ec50:	bfa8      	it	ge
 800ec52:	4691      	movge	r9, r2
 800ec54:	f1b9 0f00 	cmp.w	r9, #0
 800ec58:	dc35      	bgt.n	800ecc6 <_printf_float+0x3aa>
 800ec5a:	f04f 0800 	mov.w	r8, #0
 800ec5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ec62:	f104 0a1a 	add.w	sl, r4, #26
 800ec66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec6a:	1a9b      	subs	r3, r3, r2
 800ec6c:	eba3 0309 	sub.w	r3, r3, r9
 800ec70:	4543      	cmp	r3, r8
 800ec72:	f77f af79 	ble.w	800eb68 <_printf_float+0x24c>
 800ec76:	2301      	movs	r3, #1
 800ec78:	4652      	mov	r2, sl
 800ec7a:	4631      	mov	r1, r6
 800ec7c:	4628      	mov	r0, r5
 800ec7e:	47b8      	blx	r7
 800ec80:	3001      	adds	r0, #1
 800ec82:	f43f aeaa 	beq.w	800e9da <_printf_float+0xbe>
 800ec86:	f108 0801 	add.w	r8, r8, #1
 800ec8a:	e7ec      	b.n	800ec66 <_printf_float+0x34a>
 800ec8c:	4613      	mov	r3, r2
 800ec8e:	4631      	mov	r1, r6
 800ec90:	4642      	mov	r2, r8
 800ec92:	4628      	mov	r0, r5
 800ec94:	47b8      	blx	r7
 800ec96:	3001      	adds	r0, #1
 800ec98:	d1c0      	bne.n	800ec1c <_printf_float+0x300>
 800ec9a:	e69e      	b.n	800e9da <_printf_float+0xbe>
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	4631      	mov	r1, r6
 800eca0:	4628      	mov	r0, r5
 800eca2:	9205      	str	r2, [sp, #20]
 800eca4:	47b8      	blx	r7
 800eca6:	3001      	adds	r0, #1
 800eca8:	f43f ae97 	beq.w	800e9da <_printf_float+0xbe>
 800ecac:	9a05      	ldr	r2, [sp, #20]
 800ecae:	f10b 0b01 	add.w	fp, fp, #1
 800ecb2:	e7b9      	b.n	800ec28 <_printf_float+0x30c>
 800ecb4:	ee18 3a10 	vmov	r3, s16
 800ecb8:	4652      	mov	r2, sl
 800ecba:	4631      	mov	r1, r6
 800ecbc:	4628      	mov	r0, r5
 800ecbe:	47b8      	blx	r7
 800ecc0:	3001      	adds	r0, #1
 800ecc2:	d1be      	bne.n	800ec42 <_printf_float+0x326>
 800ecc4:	e689      	b.n	800e9da <_printf_float+0xbe>
 800ecc6:	9a05      	ldr	r2, [sp, #20]
 800ecc8:	464b      	mov	r3, r9
 800ecca:	4442      	add	r2, r8
 800eccc:	4631      	mov	r1, r6
 800ecce:	4628      	mov	r0, r5
 800ecd0:	47b8      	blx	r7
 800ecd2:	3001      	adds	r0, #1
 800ecd4:	d1c1      	bne.n	800ec5a <_printf_float+0x33e>
 800ecd6:	e680      	b.n	800e9da <_printf_float+0xbe>
 800ecd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ecda:	2a01      	cmp	r2, #1
 800ecdc:	dc01      	bgt.n	800ece2 <_printf_float+0x3c6>
 800ecde:	07db      	lsls	r3, r3, #31
 800ece0:	d53a      	bpl.n	800ed58 <_printf_float+0x43c>
 800ece2:	2301      	movs	r3, #1
 800ece4:	4642      	mov	r2, r8
 800ece6:	4631      	mov	r1, r6
 800ece8:	4628      	mov	r0, r5
 800ecea:	47b8      	blx	r7
 800ecec:	3001      	adds	r0, #1
 800ecee:	f43f ae74 	beq.w	800e9da <_printf_float+0xbe>
 800ecf2:	ee18 3a10 	vmov	r3, s16
 800ecf6:	4652      	mov	r2, sl
 800ecf8:	4631      	mov	r1, r6
 800ecfa:	4628      	mov	r0, r5
 800ecfc:	47b8      	blx	r7
 800ecfe:	3001      	adds	r0, #1
 800ed00:	f43f ae6b 	beq.w	800e9da <_printf_float+0xbe>
 800ed04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ed08:	2200      	movs	r2, #0
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ed10:	f7f1 feda 	bl	8000ac8 <__aeabi_dcmpeq>
 800ed14:	b9d8      	cbnz	r0, 800ed4e <_printf_float+0x432>
 800ed16:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ed1a:	f108 0201 	add.w	r2, r8, #1
 800ed1e:	4631      	mov	r1, r6
 800ed20:	4628      	mov	r0, r5
 800ed22:	47b8      	blx	r7
 800ed24:	3001      	adds	r0, #1
 800ed26:	d10e      	bne.n	800ed46 <_printf_float+0x42a>
 800ed28:	e657      	b.n	800e9da <_printf_float+0xbe>
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	4652      	mov	r2, sl
 800ed2e:	4631      	mov	r1, r6
 800ed30:	4628      	mov	r0, r5
 800ed32:	47b8      	blx	r7
 800ed34:	3001      	adds	r0, #1
 800ed36:	f43f ae50 	beq.w	800e9da <_printf_float+0xbe>
 800ed3a:	f108 0801 	add.w	r8, r8, #1
 800ed3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed40:	3b01      	subs	r3, #1
 800ed42:	4543      	cmp	r3, r8
 800ed44:	dcf1      	bgt.n	800ed2a <_printf_float+0x40e>
 800ed46:	464b      	mov	r3, r9
 800ed48:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ed4c:	e6da      	b.n	800eb04 <_printf_float+0x1e8>
 800ed4e:	f04f 0800 	mov.w	r8, #0
 800ed52:	f104 0a1a 	add.w	sl, r4, #26
 800ed56:	e7f2      	b.n	800ed3e <_printf_float+0x422>
 800ed58:	2301      	movs	r3, #1
 800ed5a:	4642      	mov	r2, r8
 800ed5c:	e7df      	b.n	800ed1e <_printf_float+0x402>
 800ed5e:	2301      	movs	r3, #1
 800ed60:	464a      	mov	r2, r9
 800ed62:	4631      	mov	r1, r6
 800ed64:	4628      	mov	r0, r5
 800ed66:	47b8      	blx	r7
 800ed68:	3001      	adds	r0, #1
 800ed6a:	f43f ae36 	beq.w	800e9da <_printf_float+0xbe>
 800ed6e:	f108 0801 	add.w	r8, r8, #1
 800ed72:	68e3      	ldr	r3, [r4, #12]
 800ed74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ed76:	1a5b      	subs	r3, r3, r1
 800ed78:	4543      	cmp	r3, r8
 800ed7a:	dcf0      	bgt.n	800ed5e <_printf_float+0x442>
 800ed7c:	e6f8      	b.n	800eb70 <_printf_float+0x254>
 800ed7e:	f04f 0800 	mov.w	r8, #0
 800ed82:	f104 0919 	add.w	r9, r4, #25
 800ed86:	e7f4      	b.n	800ed72 <_printf_float+0x456>

0800ed88 <_printf_common>:
 800ed88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed8c:	4616      	mov	r6, r2
 800ed8e:	4699      	mov	r9, r3
 800ed90:	688a      	ldr	r2, [r1, #8]
 800ed92:	690b      	ldr	r3, [r1, #16]
 800ed94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ed98:	4293      	cmp	r3, r2
 800ed9a:	bfb8      	it	lt
 800ed9c:	4613      	movlt	r3, r2
 800ed9e:	6033      	str	r3, [r6, #0]
 800eda0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eda4:	4607      	mov	r7, r0
 800eda6:	460c      	mov	r4, r1
 800eda8:	b10a      	cbz	r2, 800edae <_printf_common+0x26>
 800edaa:	3301      	adds	r3, #1
 800edac:	6033      	str	r3, [r6, #0]
 800edae:	6823      	ldr	r3, [r4, #0]
 800edb0:	0699      	lsls	r1, r3, #26
 800edb2:	bf42      	ittt	mi
 800edb4:	6833      	ldrmi	r3, [r6, #0]
 800edb6:	3302      	addmi	r3, #2
 800edb8:	6033      	strmi	r3, [r6, #0]
 800edba:	6825      	ldr	r5, [r4, #0]
 800edbc:	f015 0506 	ands.w	r5, r5, #6
 800edc0:	d106      	bne.n	800edd0 <_printf_common+0x48>
 800edc2:	f104 0a19 	add.w	sl, r4, #25
 800edc6:	68e3      	ldr	r3, [r4, #12]
 800edc8:	6832      	ldr	r2, [r6, #0]
 800edca:	1a9b      	subs	r3, r3, r2
 800edcc:	42ab      	cmp	r3, r5
 800edce:	dc26      	bgt.n	800ee1e <_printf_common+0x96>
 800edd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800edd4:	1e13      	subs	r3, r2, #0
 800edd6:	6822      	ldr	r2, [r4, #0]
 800edd8:	bf18      	it	ne
 800edda:	2301      	movne	r3, #1
 800eddc:	0692      	lsls	r2, r2, #26
 800edde:	d42b      	bmi.n	800ee38 <_printf_common+0xb0>
 800ede0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ede4:	4649      	mov	r1, r9
 800ede6:	4638      	mov	r0, r7
 800ede8:	47c0      	blx	r8
 800edea:	3001      	adds	r0, #1
 800edec:	d01e      	beq.n	800ee2c <_printf_common+0xa4>
 800edee:	6823      	ldr	r3, [r4, #0]
 800edf0:	6922      	ldr	r2, [r4, #16]
 800edf2:	f003 0306 	and.w	r3, r3, #6
 800edf6:	2b04      	cmp	r3, #4
 800edf8:	bf02      	ittt	eq
 800edfa:	68e5      	ldreq	r5, [r4, #12]
 800edfc:	6833      	ldreq	r3, [r6, #0]
 800edfe:	1aed      	subeq	r5, r5, r3
 800ee00:	68a3      	ldr	r3, [r4, #8]
 800ee02:	bf0c      	ite	eq
 800ee04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ee08:	2500      	movne	r5, #0
 800ee0a:	4293      	cmp	r3, r2
 800ee0c:	bfc4      	itt	gt
 800ee0e:	1a9b      	subgt	r3, r3, r2
 800ee10:	18ed      	addgt	r5, r5, r3
 800ee12:	2600      	movs	r6, #0
 800ee14:	341a      	adds	r4, #26
 800ee16:	42b5      	cmp	r5, r6
 800ee18:	d11a      	bne.n	800ee50 <_printf_common+0xc8>
 800ee1a:	2000      	movs	r0, #0
 800ee1c:	e008      	b.n	800ee30 <_printf_common+0xa8>
 800ee1e:	2301      	movs	r3, #1
 800ee20:	4652      	mov	r2, sl
 800ee22:	4649      	mov	r1, r9
 800ee24:	4638      	mov	r0, r7
 800ee26:	47c0      	blx	r8
 800ee28:	3001      	adds	r0, #1
 800ee2a:	d103      	bne.n	800ee34 <_printf_common+0xac>
 800ee2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee34:	3501      	adds	r5, #1
 800ee36:	e7c6      	b.n	800edc6 <_printf_common+0x3e>
 800ee38:	18e1      	adds	r1, r4, r3
 800ee3a:	1c5a      	adds	r2, r3, #1
 800ee3c:	2030      	movs	r0, #48	; 0x30
 800ee3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ee42:	4422      	add	r2, r4
 800ee44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ee48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ee4c:	3302      	adds	r3, #2
 800ee4e:	e7c7      	b.n	800ede0 <_printf_common+0x58>
 800ee50:	2301      	movs	r3, #1
 800ee52:	4622      	mov	r2, r4
 800ee54:	4649      	mov	r1, r9
 800ee56:	4638      	mov	r0, r7
 800ee58:	47c0      	blx	r8
 800ee5a:	3001      	adds	r0, #1
 800ee5c:	d0e6      	beq.n	800ee2c <_printf_common+0xa4>
 800ee5e:	3601      	adds	r6, #1
 800ee60:	e7d9      	b.n	800ee16 <_printf_common+0x8e>
	...

0800ee64 <_printf_i>:
 800ee64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee68:	7e0f      	ldrb	r7, [r1, #24]
 800ee6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ee6c:	2f78      	cmp	r7, #120	; 0x78
 800ee6e:	4691      	mov	r9, r2
 800ee70:	4680      	mov	r8, r0
 800ee72:	460c      	mov	r4, r1
 800ee74:	469a      	mov	sl, r3
 800ee76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ee7a:	d807      	bhi.n	800ee8c <_printf_i+0x28>
 800ee7c:	2f62      	cmp	r7, #98	; 0x62
 800ee7e:	d80a      	bhi.n	800ee96 <_printf_i+0x32>
 800ee80:	2f00      	cmp	r7, #0
 800ee82:	f000 80d4 	beq.w	800f02e <_printf_i+0x1ca>
 800ee86:	2f58      	cmp	r7, #88	; 0x58
 800ee88:	f000 80c0 	beq.w	800f00c <_printf_i+0x1a8>
 800ee8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ee94:	e03a      	b.n	800ef0c <_printf_i+0xa8>
 800ee96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ee9a:	2b15      	cmp	r3, #21
 800ee9c:	d8f6      	bhi.n	800ee8c <_printf_i+0x28>
 800ee9e:	a101      	add	r1, pc, #4	; (adr r1, 800eea4 <_printf_i+0x40>)
 800eea0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eea4:	0800eefd 	.word	0x0800eefd
 800eea8:	0800ef11 	.word	0x0800ef11
 800eeac:	0800ee8d 	.word	0x0800ee8d
 800eeb0:	0800ee8d 	.word	0x0800ee8d
 800eeb4:	0800ee8d 	.word	0x0800ee8d
 800eeb8:	0800ee8d 	.word	0x0800ee8d
 800eebc:	0800ef11 	.word	0x0800ef11
 800eec0:	0800ee8d 	.word	0x0800ee8d
 800eec4:	0800ee8d 	.word	0x0800ee8d
 800eec8:	0800ee8d 	.word	0x0800ee8d
 800eecc:	0800ee8d 	.word	0x0800ee8d
 800eed0:	0800f015 	.word	0x0800f015
 800eed4:	0800ef3d 	.word	0x0800ef3d
 800eed8:	0800efcf 	.word	0x0800efcf
 800eedc:	0800ee8d 	.word	0x0800ee8d
 800eee0:	0800ee8d 	.word	0x0800ee8d
 800eee4:	0800f037 	.word	0x0800f037
 800eee8:	0800ee8d 	.word	0x0800ee8d
 800eeec:	0800ef3d 	.word	0x0800ef3d
 800eef0:	0800ee8d 	.word	0x0800ee8d
 800eef4:	0800ee8d 	.word	0x0800ee8d
 800eef8:	0800efd7 	.word	0x0800efd7
 800eefc:	682b      	ldr	r3, [r5, #0]
 800eefe:	1d1a      	adds	r2, r3, #4
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	602a      	str	r2, [r5, #0]
 800ef04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ef0c:	2301      	movs	r3, #1
 800ef0e:	e09f      	b.n	800f050 <_printf_i+0x1ec>
 800ef10:	6820      	ldr	r0, [r4, #0]
 800ef12:	682b      	ldr	r3, [r5, #0]
 800ef14:	0607      	lsls	r7, r0, #24
 800ef16:	f103 0104 	add.w	r1, r3, #4
 800ef1a:	6029      	str	r1, [r5, #0]
 800ef1c:	d501      	bpl.n	800ef22 <_printf_i+0xbe>
 800ef1e:	681e      	ldr	r6, [r3, #0]
 800ef20:	e003      	b.n	800ef2a <_printf_i+0xc6>
 800ef22:	0646      	lsls	r6, r0, #25
 800ef24:	d5fb      	bpl.n	800ef1e <_printf_i+0xba>
 800ef26:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ef2a:	2e00      	cmp	r6, #0
 800ef2c:	da03      	bge.n	800ef36 <_printf_i+0xd2>
 800ef2e:	232d      	movs	r3, #45	; 0x2d
 800ef30:	4276      	negs	r6, r6
 800ef32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef36:	485a      	ldr	r0, [pc, #360]	; (800f0a0 <_printf_i+0x23c>)
 800ef38:	230a      	movs	r3, #10
 800ef3a:	e012      	b.n	800ef62 <_printf_i+0xfe>
 800ef3c:	682b      	ldr	r3, [r5, #0]
 800ef3e:	6820      	ldr	r0, [r4, #0]
 800ef40:	1d19      	adds	r1, r3, #4
 800ef42:	6029      	str	r1, [r5, #0]
 800ef44:	0605      	lsls	r5, r0, #24
 800ef46:	d501      	bpl.n	800ef4c <_printf_i+0xe8>
 800ef48:	681e      	ldr	r6, [r3, #0]
 800ef4a:	e002      	b.n	800ef52 <_printf_i+0xee>
 800ef4c:	0641      	lsls	r1, r0, #25
 800ef4e:	d5fb      	bpl.n	800ef48 <_printf_i+0xe4>
 800ef50:	881e      	ldrh	r6, [r3, #0]
 800ef52:	4853      	ldr	r0, [pc, #332]	; (800f0a0 <_printf_i+0x23c>)
 800ef54:	2f6f      	cmp	r7, #111	; 0x6f
 800ef56:	bf0c      	ite	eq
 800ef58:	2308      	moveq	r3, #8
 800ef5a:	230a      	movne	r3, #10
 800ef5c:	2100      	movs	r1, #0
 800ef5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ef62:	6865      	ldr	r5, [r4, #4]
 800ef64:	60a5      	str	r5, [r4, #8]
 800ef66:	2d00      	cmp	r5, #0
 800ef68:	bfa2      	ittt	ge
 800ef6a:	6821      	ldrge	r1, [r4, #0]
 800ef6c:	f021 0104 	bicge.w	r1, r1, #4
 800ef70:	6021      	strge	r1, [r4, #0]
 800ef72:	b90e      	cbnz	r6, 800ef78 <_printf_i+0x114>
 800ef74:	2d00      	cmp	r5, #0
 800ef76:	d04b      	beq.n	800f010 <_printf_i+0x1ac>
 800ef78:	4615      	mov	r5, r2
 800ef7a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ef7e:	fb03 6711 	mls	r7, r3, r1, r6
 800ef82:	5dc7      	ldrb	r7, [r0, r7]
 800ef84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ef88:	4637      	mov	r7, r6
 800ef8a:	42bb      	cmp	r3, r7
 800ef8c:	460e      	mov	r6, r1
 800ef8e:	d9f4      	bls.n	800ef7a <_printf_i+0x116>
 800ef90:	2b08      	cmp	r3, #8
 800ef92:	d10b      	bne.n	800efac <_printf_i+0x148>
 800ef94:	6823      	ldr	r3, [r4, #0]
 800ef96:	07de      	lsls	r6, r3, #31
 800ef98:	d508      	bpl.n	800efac <_printf_i+0x148>
 800ef9a:	6923      	ldr	r3, [r4, #16]
 800ef9c:	6861      	ldr	r1, [r4, #4]
 800ef9e:	4299      	cmp	r1, r3
 800efa0:	bfde      	ittt	le
 800efa2:	2330      	movle	r3, #48	; 0x30
 800efa4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800efa8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800efac:	1b52      	subs	r2, r2, r5
 800efae:	6122      	str	r2, [r4, #16]
 800efb0:	f8cd a000 	str.w	sl, [sp]
 800efb4:	464b      	mov	r3, r9
 800efb6:	aa03      	add	r2, sp, #12
 800efb8:	4621      	mov	r1, r4
 800efba:	4640      	mov	r0, r8
 800efbc:	f7ff fee4 	bl	800ed88 <_printf_common>
 800efc0:	3001      	adds	r0, #1
 800efc2:	d14a      	bne.n	800f05a <_printf_i+0x1f6>
 800efc4:	f04f 30ff 	mov.w	r0, #4294967295
 800efc8:	b004      	add	sp, #16
 800efca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efce:	6823      	ldr	r3, [r4, #0]
 800efd0:	f043 0320 	orr.w	r3, r3, #32
 800efd4:	6023      	str	r3, [r4, #0]
 800efd6:	4833      	ldr	r0, [pc, #204]	; (800f0a4 <_printf_i+0x240>)
 800efd8:	2778      	movs	r7, #120	; 0x78
 800efda:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800efde:	6823      	ldr	r3, [r4, #0]
 800efe0:	6829      	ldr	r1, [r5, #0]
 800efe2:	061f      	lsls	r7, r3, #24
 800efe4:	f851 6b04 	ldr.w	r6, [r1], #4
 800efe8:	d402      	bmi.n	800eff0 <_printf_i+0x18c>
 800efea:	065f      	lsls	r7, r3, #25
 800efec:	bf48      	it	mi
 800efee:	b2b6      	uxthmi	r6, r6
 800eff0:	07df      	lsls	r7, r3, #31
 800eff2:	bf48      	it	mi
 800eff4:	f043 0320 	orrmi.w	r3, r3, #32
 800eff8:	6029      	str	r1, [r5, #0]
 800effa:	bf48      	it	mi
 800effc:	6023      	strmi	r3, [r4, #0]
 800effe:	b91e      	cbnz	r6, 800f008 <_printf_i+0x1a4>
 800f000:	6823      	ldr	r3, [r4, #0]
 800f002:	f023 0320 	bic.w	r3, r3, #32
 800f006:	6023      	str	r3, [r4, #0]
 800f008:	2310      	movs	r3, #16
 800f00a:	e7a7      	b.n	800ef5c <_printf_i+0xf8>
 800f00c:	4824      	ldr	r0, [pc, #144]	; (800f0a0 <_printf_i+0x23c>)
 800f00e:	e7e4      	b.n	800efda <_printf_i+0x176>
 800f010:	4615      	mov	r5, r2
 800f012:	e7bd      	b.n	800ef90 <_printf_i+0x12c>
 800f014:	682b      	ldr	r3, [r5, #0]
 800f016:	6826      	ldr	r6, [r4, #0]
 800f018:	6961      	ldr	r1, [r4, #20]
 800f01a:	1d18      	adds	r0, r3, #4
 800f01c:	6028      	str	r0, [r5, #0]
 800f01e:	0635      	lsls	r5, r6, #24
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	d501      	bpl.n	800f028 <_printf_i+0x1c4>
 800f024:	6019      	str	r1, [r3, #0]
 800f026:	e002      	b.n	800f02e <_printf_i+0x1ca>
 800f028:	0670      	lsls	r0, r6, #25
 800f02a:	d5fb      	bpl.n	800f024 <_printf_i+0x1c0>
 800f02c:	8019      	strh	r1, [r3, #0]
 800f02e:	2300      	movs	r3, #0
 800f030:	6123      	str	r3, [r4, #16]
 800f032:	4615      	mov	r5, r2
 800f034:	e7bc      	b.n	800efb0 <_printf_i+0x14c>
 800f036:	682b      	ldr	r3, [r5, #0]
 800f038:	1d1a      	adds	r2, r3, #4
 800f03a:	602a      	str	r2, [r5, #0]
 800f03c:	681d      	ldr	r5, [r3, #0]
 800f03e:	6862      	ldr	r2, [r4, #4]
 800f040:	2100      	movs	r1, #0
 800f042:	4628      	mov	r0, r5
 800f044:	f7f1 f8c4 	bl	80001d0 <memchr>
 800f048:	b108      	cbz	r0, 800f04e <_printf_i+0x1ea>
 800f04a:	1b40      	subs	r0, r0, r5
 800f04c:	6060      	str	r0, [r4, #4]
 800f04e:	6863      	ldr	r3, [r4, #4]
 800f050:	6123      	str	r3, [r4, #16]
 800f052:	2300      	movs	r3, #0
 800f054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f058:	e7aa      	b.n	800efb0 <_printf_i+0x14c>
 800f05a:	6923      	ldr	r3, [r4, #16]
 800f05c:	462a      	mov	r2, r5
 800f05e:	4649      	mov	r1, r9
 800f060:	4640      	mov	r0, r8
 800f062:	47d0      	blx	sl
 800f064:	3001      	adds	r0, #1
 800f066:	d0ad      	beq.n	800efc4 <_printf_i+0x160>
 800f068:	6823      	ldr	r3, [r4, #0]
 800f06a:	079b      	lsls	r3, r3, #30
 800f06c:	d413      	bmi.n	800f096 <_printf_i+0x232>
 800f06e:	68e0      	ldr	r0, [r4, #12]
 800f070:	9b03      	ldr	r3, [sp, #12]
 800f072:	4298      	cmp	r0, r3
 800f074:	bfb8      	it	lt
 800f076:	4618      	movlt	r0, r3
 800f078:	e7a6      	b.n	800efc8 <_printf_i+0x164>
 800f07a:	2301      	movs	r3, #1
 800f07c:	4632      	mov	r2, r6
 800f07e:	4649      	mov	r1, r9
 800f080:	4640      	mov	r0, r8
 800f082:	47d0      	blx	sl
 800f084:	3001      	adds	r0, #1
 800f086:	d09d      	beq.n	800efc4 <_printf_i+0x160>
 800f088:	3501      	adds	r5, #1
 800f08a:	68e3      	ldr	r3, [r4, #12]
 800f08c:	9903      	ldr	r1, [sp, #12]
 800f08e:	1a5b      	subs	r3, r3, r1
 800f090:	42ab      	cmp	r3, r5
 800f092:	dcf2      	bgt.n	800f07a <_printf_i+0x216>
 800f094:	e7eb      	b.n	800f06e <_printf_i+0x20a>
 800f096:	2500      	movs	r5, #0
 800f098:	f104 0619 	add.w	r6, r4, #25
 800f09c:	e7f5      	b.n	800f08a <_printf_i+0x226>
 800f09e:	bf00      	nop
 800f0a0:	08011da2 	.word	0x08011da2
 800f0a4:	08011db3 	.word	0x08011db3

0800f0a8 <std>:
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	b510      	push	{r4, lr}
 800f0ac:	4604      	mov	r4, r0
 800f0ae:	e9c0 3300 	strd	r3, r3, [r0]
 800f0b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f0b6:	6083      	str	r3, [r0, #8]
 800f0b8:	8181      	strh	r1, [r0, #12]
 800f0ba:	6643      	str	r3, [r0, #100]	; 0x64
 800f0bc:	81c2      	strh	r2, [r0, #14]
 800f0be:	6183      	str	r3, [r0, #24]
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	2208      	movs	r2, #8
 800f0c4:	305c      	adds	r0, #92	; 0x5c
 800f0c6:	f000 f9e5 	bl	800f494 <memset>
 800f0ca:	4b05      	ldr	r3, [pc, #20]	; (800f0e0 <std+0x38>)
 800f0cc:	6263      	str	r3, [r4, #36]	; 0x24
 800f0ce:	4b05      	ldr	r3, [pc, #20]	; (800f0e4 <std+0x3c>)
 800f0d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800f0d2:	4b05      	ldr	r3, [pc, #20]	; (800f0e8 <std+0x40>)
 800f0d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f0d6:	4b05      	ldr	r3, [pc, #20]	; (800f0ec <std+0x44>)
 800f0d8:	6224      	str	r4, [r4, #32]
 800f0da:	6323      	str	r3, [r4, #48]	; 0x30
 800f0dc:	bd10      	pop	{r4, pc}
 800f0de:	bf00      	nop
 800f0e0:	0800f2e5 	.word	0x0800f2e5
 800f0e4:	0800f307 	.word	0x0800f307
 800f0e8:	0800f33f 	.word	0x0800f33f
 800f0ec:	0800f363 	.word	0x0800f363

0800f0f0 <stdio_exit_handler>:
 800f0f0:	4a02      	ldr	r2, [pc, #8]	; (800f0fc <stdio_exit_handler+0xc>)
 800f0f2:	4903      	ldr	r1, [pc, #12]	; (800f100 <stdio_exit_handler+0x10>)
 800f0f4:	4803      	ldr	r0, [pc, #12]	; (800f104 <stdio_exit_handler+0x14>)
 800f0f6:	f000 b869 	b.w	800f1cc <_fwalk_sglue>
 800f0fa:	bf00      	nop
 800f0fc:	20000014 	.word	0x20000014
 800f100:	08010fd9 	.word	0x08010fd9
 800f104:	20000020 	.word	0x20000020

0800f108 <cleanup_stdio>:
 800f108:	6841      	ldr	r1, [r0, #4]
 800f10a:	4b0c      	ldr	r3, [pc, #48]	; (800f13c <cleanup_stdio+0x34>)
 800f10c:	4299      	cmp	r1, r3
 800f10e:	b510      	push	{r4, lr}
 800f110:	4604      	mov	r4, r0
 800f112:	d001      	beq.n	800f118 <cleanup_stdio+0x10>
 800f114:	f001 ff60 	bl	8010fd8 <_fflush_r>
 800f118:	68a1      	ldr	r1, [r4, #8]
 800f11a:	4b09      	ldr	r3, [pc, #36]	; (800f140 <cleanup_stdio+0x38>)
 800f11c:	4299      	cmp	r1, r3
 800f11e:	d002      	beq.n	800f126 <cleanup_stdio+0x1e>
 800f120:	4620      	mov	r0, r4
 800f122:	f001 ff59 	bl	8010fd8 <_fflush_r>
 800f126:	68e1      	ldr	r1, [r4, #12]
 800f128:	4b06      	ldr	r3, [pc, #24]	; (800f144 <cleanup_stdio+0x3c>)
 800f12a:	4299      	cmp	r1, r3
 800f12c:	d004      	beq.n	800f138 <cleanup_stdio+0x30>
 800f12e:	4620      	mov	r0, r4
 800f130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f134:	f001 bf50 	b.w	8010fd8 <_fflush_r>
 800f138:	bd10      	pop	{r4, pc}
 800f13a:	bf00      	nop
 800f13c:	200056e0 	.word	0x200056e0
 800f140:	20005748 	.word	0x20005748
 800f144:	200057b0 	.word	0x200057b0

0800f148 <global_stdio_init.part.0>:
 800f148:	b510      	push	{r4, lr}
 800f14a:	4b0b      	ldr	r3, [pc, #44]	; (800f178 <global_stdio_init.part.0+0x30>)
 800f14c:	4c0b      	ldr	r4, [pc, #44]	; (800f17c <global_stdio_init.part.0+0x34>)
 800f14e:	4a0c      	ldr	r2, [pc, #48]	; (800f180 <global_stdio_init.part.0+0x38>)
 800f150:	601a      	str	r2, [r3, #0]
 800f152:	4620      	mov	r0, r4
 800f154:	2200      	movs	r2, #0
 800f156:	2104      	movs	r1, #4
 800f158:	f7ff ffa6 	bl	800f0a8 <std>
 800f15c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f160:	2201      	movs	r2, #1
 800f162:	2109      	movs	r1, #9
 800f164:	f7ff ffa0 	bl	800f0a8 <std>
 800f168:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f16c:	2202      	movs	r2, #2
 800f16e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f172:	2112      	movs	r1, #18
 800f174:	f7ff bf98 	b.w	800f0a8 <std>
 800f178:	20005818 	.word	0x20005818
 800f17c:	200056e0 	.word	0x200056e0
 800f180:	0800f0f1 	.word	0x0800f0f1

0800f184 <__sfp_lock_acquire>:
 800f184:	4801      	ldr	r0, [pc, #4]	; (800f18c <__sfp_lock_acquire+0x8>)
 800f186:	f000 ba57 	b.w	800f638 <__retarget_lock_acquire_recursive>
 800f18a:	bf00      	nop
 800f18c:	20005821 	.word	0x20005821

0800f190 <__sfp_lock_release>:
 800f190:	4801      	ldr	r0, [pc, #4]	; (800f198 <__sfp_lock_release+0x8>)
 800f192:	f000 ba52 	b.w	800f63a <__retarget_lock_release_recursive>
 800f196:	bf00      	nop
 800f198:	20005821 	.word	0x20005821

0800f19c <__sinit>:
 800f19c:	b510      	push	{r4, lr}
 800f19e:	4604      	mov	r4, r0
 800f1a0:	f7ff fff0 	bl	800f184 <__sfp_lock_acquire>
 800f1a4:	6a23      	ldr	r3, [r4, #32]
 800f1a6:	b11b      	cbz	r3, 800f1b0 <__sinit+0x14>
 800f1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1ac:	f7ff bff0 	b.w	800f190 <__sfp_lock_release>
 800f1b0:	4b04      	ldr	r3, [pc, #16]	; (800f1c4 <__sinit+0x28>)
 800f1b2:	6223      	str	r3, [r4, #32]
 800f1b4:	4b04      	ldr	r3, [pc, #16]	; (800f1c8 <__sinit+0x2c>)
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d1f5      	bne.n	800f1a8 <__sinit+0xc>
 800f1bc:	f7ff ffc4 	bl	800f148 <global_stdio_init.part.0>
 800f1c0:	e7f2      	b.n	800f1a8 <__sinit+0xc>
 800f1c2:	bf00      	nop
 800f1c4:	0800f109 	.word	0x0800f109
 800f1c8:	20005818 	.word	0x20005818

0800f1cc <_fwalk_sglue>:
 800f1cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1d0:	4607      	mov	r7, r0
 800f1d2:	4688      	mov	r8, r1
 800f1d4:	4614      	mov	r4, r2
 800f1d6:	2600      	movs	r6, #0
 800f1d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f1dc:	f1b9 0901 	subs.w	r9, r9, #1
 800f1e0:	d505      	bpl.n	800f1ee <_fwalk_sglue+0x22>
 800f1e2:	6824      	ldr	r4, [r4, #0]
 800f1e4:	2c00      	cmp	r4, #0
 800f1e6:	d1f7      	bne.n	800f1d8 <_fwalk_sglue+0xc>
 800f1e8:	4630      	mov	r0, r6
 800f1ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1ee:	89ab      	ldrh	r3, [r5, #12]
 800f1f0:	2b01      	cmp	r3, #1
 800f1f2:	d907      	bls.n	800f204 <_fwalk_sglue+0x38>
 800f1f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f1f8:	3301      	adds	r3, #1
 800f1fa:	d003      	beq.n	800f204 <_fwalk_sglue+0x38>
 800f1fc:	4629      	mov	r1, r5
 800f1fe:	4638      	mov	r0, r7
 800f200:	47c0      	blx	r8
 800f202:	4306      	orrs	r6, r0
 800f204:	3568      	adds	r5, #104	; 0x68
 800f206:	e7e9      	b.n	800f1dc <_fwalk_sglue+0x10>

0800f208 <iprintf>:
 800f208:	b40f      	push	{r0, r1, r2, r3}
 800f20a:	b507      	push	{r0, r1, r2, lr}
 800f20c:	4906      	ldr	r1, [pc, #24]	; (800f228 <iprintf+0x20>)
 800f20e:	ab04      	add	r3, sp, #16
 800f210:	6808      	ldr	r0, [r1, #0]
 800f212:	f853 2b04 	ldr.w	r2, [r3], #4
 800f216:	6881      	ldr	r1, [r0, #8]
 800f218:	9301      	str	r3, [sp, #4]
 800f21a:	f001 fd3d 	bl	8010c98 <_vfiprintf_r>
 800f21e:	b003      	add	sp, #12
 800f220:	f85d eb04 	ldr.w	lr, [sp], #4
 800f224:	b004      	add	sp, #16
 800f226:	4770      	bx	lr
 800f228:	2000006c 	.word	0x2000006c

0800f22c <_puts_r>:
 800f22c:	6a03      	ldr	r3, [r0, #32]
 800f22e:	b570      	push	{r4, r5, r6, lr}
 800f230:	6884      	ldr	r4, [r0, #8]
 800f232:	4605      	mov	r5, r0
 800f234:	460e      	mov	r6, r1
 800f236:	b90b      	cbnz	r3, 800f23c <_puts_r+0x10>
 800f238:	f7ff ffb0 	bl	800f19c <__sinit>
 800f23c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f23e:	07db      	lsls	r3, r3, #31
 800f240:	d405      	bmi.n	800f24e <_puts_r+0x22>
 800f242:	89a3      	ldrh	r3, [r4, #12]
 800f244:	0598      	lsls	r0, r3, #22
 800f246:	d402      	bmi.n	800f24e <_puts_r+0x22>
 800f248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f24a:	f000 f9f5 	bl	800f638 <__retarget_lock_acquire_recursive>
 800f24e:	89a3      	ldrh	r3, [r4, #12]
 800f250:	0719      	lsls	r1, r3, #28
 800f252:	d513      	bpl.n	800f27c <_puts_r+0x50>
 800f254:	6923      	ldr	r3, [r4, #16]
 800f256:	b18b      	cbz	r3, 800f27c <_puts_r+0x50>
 800f258:	3e01      	subs	r6, #1
 800f25a:	68a3      	ldr	r3, [r4, #8]
 800f25c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f260:	3b01      	subs	r3, #1
 800f262:	60a3      	str	r3, [r4, #8]
 800f264:	b9e9      	cbnz	r1, 800f2a2 <_puts_r+0x76>
 800f266:	2b00      	cmp	r3, #0
 800f268:	da2e      	bge.n	800f2c8 <_puts_r+0x9c>
 800f26a:	4622      	mov	r2, r4
 800f26c:	210a      	movs	r1, #10
 800f26e:	4628      	mov	r0, r5
 800f270:	f000 f87b 	bl	800f36a <__swbuf_r>
 800f274:	3001      	adds	r0, #1
 800f276:	d007      	beq.n	800f288 <_puts_r+0x5c>
 800f278:	250a      	movs	r5, #10
 800f27a:	e007      	b.n	800f28c <_puts_r+0x60>
 800f27c:	4621      	mov	r1, r4
 800f27e:	4628      	mov	r0, r5
 800f280:	f000 f8b0 	bl	800f3e4 <__swsetup_r>
 800f284:	2800      	cmp	r0, #0
 800f286:	d0e7      	beq.n	800f258 <_puts_r+0x2c>
 800f288:	f04f 35ff 	mov.w	r5, #4294967295
 800f28c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f28e:	07da      	lsls	r2, r3, #31
 800f290:	d405      	bmi.n	800f29e <_puts_r+0x72>
 800f292:	89a3      	ldrh	r3, [r4, #12]
 800f294:	059b      	lsls	r3, r3, #22
 800f296:	d402      	bmi.n	800f29e <_puts_r+0x72>
 800f298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f29a:	f000 f9ce 	bl	800f63a <__retarget_lock_release_recursive>
 800f29e:	4628      	mov	r0, r5
 800f2a0:	bd70      	pop	{r4, r5, r6, pc}
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	da04      	bge.n	800f2b0 <_puts_r+0x84>
 800f2a6:	69a2      	ldr	r2, [r4, #24]
 800f2a8:	429a      	cmp	r2, r3
 800f2aa:	dc06      	bgt.n	800f2ba <_puts_r+0x8e>
 800f2ac:	290a      	cmp	r1, #10
 800f2ae:	d004      	beq.n	800f2ba <_puts_r+0x8e>
 800f2b0:	6823      	ldr	r3, [r4, #0]
 800f2b2:	1c5a      	adds	r2, r3, #1
 800f2b4:	6022      	str	r2, [r4, #0]
 800f2b6:	7019      	strb	r1, [r3, #0]
 800f2b8:	e7cf      	b.n	800f25a <_puts_r+0x2e>
 800f2ba:	4622      	mov	r2, r4
 800f2bc:	4628      	mov	r0, r5
 800f2be:	f000 f854 	bl	800f36a <__swbuf_r>
 800f2c2:	3001      	adds	r0, #1
 800f2c4:	d1c9      	bne.n	800f25a <_puts_r+0x2e>
 800f2c6:	e7df      	b.n	800f288 <_puts_r+0x5c>
 800f2c8:	6823      	ldr	r3, [r4, #0]
 800f2ca:	250a      	movs	r5, #10
 800f2cc:	1c5a      	adds	r2, r3, #1
 800f2ce:	6022      	str	r2, [r4, #0]
 800f2d0:	701d      	strb	r5, [r3, #0]
 800f2d2:	e7db      	b.n	800f28c <_puts_r+0x60>

0800f2d4 <puts>:
 800f2d4:	4b02      	ldr	r3, [pc, #8]	; (800f2e0 <puts+0xc>)
 800f2d6:	4601      	mov	r1, r0
 800f2d8:	6818      	ldr	r0, [r3, #0]
 800f2da:	f7ff bfa7 	b.w	800f22c <_puts_r>
 800f2de:	bf00      	nop
 800f2e0:	2000006c 	.word	0x2000006c

0800f2e4 <__sread>:
 800f2e4:	b510      	push	{r4, lr}
 800f2e6:	460c      	mov	r4, r1
 800f2e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2ec:	f000 f956 	bl	800f59c <_read_r>
 800f2f0:	2800      	cmp	r0, #0
 800f2f2:	bfab      	itete	ge
 800f2f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f2f6:	89a3      	ldrhlt	r3, [r4, #12]
 800f2f8:	181b      	addge	r3, r3, r0
 800f2fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f2fe:	bfac      	ite	ge
 800f300:	6563      	strge	r3, [r4, #84]	; 0x54
 800f302:	81a3      	strhlt	r3, [r4, #12]
 800f304:	bd10      	pop	{r4, pc}

0800f306 <__swrite>:
 800f306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f30a:	461f      	mov	r7, r3
 800f30c:	898b      	ldrh	r3, [r1, #12]
 800f30e:	05db      	lsls	r3, r3, #23
 800f310:	4605      	mov	r5, r0
 800f312:	460c      	mov	r4, r1
 800f314:	4616      	mov	r6, r2
 800f316:	d505      	bpl.n	800f324 <__swrite+0x1e>
 800f318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f31c:	2302      	movs	r3, #2
 800f31e:	2200      	movs	r2, #0
 800f320:	f000 f92a 	bl	800f578 <_lseek_r>
 800f324:	89a3      	ldrh	r3, [r4, #12]
 800f326:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f32a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f32e:	81a3      	strh	r3, [r4, #12]
 800f330:	4632      	mov	r2, r6
 800f332:	463b      	mov	r3, r7
 800f334:	4628      	mov	r0, r5
 800f336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f33a:	f000 b941 	b.w	800f5c0 <_write_r>

0800f33e <__sseek>:
 800f33e:	b510      	push	{r4, lr}
 800f340:	460c      	mov	r4, r1
 800f342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f346:	f000 f917 	bl	800f578 <_lseek_r>
 800f34a:	1c43      	adds	r3, r0, #1
 800f34c:	89a3      	ldrh	r3, [r4, #12]
 800f34e:	bf15      	itete	ne
 800f350:	6560      	strne	r0, [r4, #84]	; 0x54
 800f352:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f356:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f35a:	81a3      	strheq	r3, [r4, #12]
 800f35c:	bf18      	it	ne
 800f35e:	81a3      	strhne	r3, [r4, #12]
 800f360:	bd10      	pop	{r4, pc}

0800f362 <__sclose>:
 800f362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f366:	f000 b8a1 	b.w	800f4ac <_close_r>

0800f36a <__swbuf_r>:
 800f36a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f36c:	460e      	mov	r6, r1
 800f36e:	4614      	mov	r4, r2
 800f370:	4605      	mov	r5, r0
 800f372:	b118      	cbz	r0, 800f37c <__swbuf_r+0x12>
 800f374:	6a03      	ldr	r3, [r0, #32]
 800f376:	b90b      	cbnz	r3, 800f37c <__swbuf_r+0x12>
 800f378:	f7ff ff10 	bl	800f19c <__sinit>
 800f37c:	69a3      	ldr	r3, [r4, #24]
 800f37e:	60a3      	str	r3, [r4, #8]
 800f380:	89a3      	ldrh	r3, [r4, #12]
 800f382:	071a      	lsls	r2, r3, #28
 800f384:	d525      	bpl.n	800f3d2 <__swbuf_r+0x68>
 800f386:	6923      	ldr	r3, [r4, #16]
 800f388:	b31b      	cbz	r3, 800f3d2 <__swbuf_r+0x68>
 800f38a:	6823      	ldr	r3, [r4, #0]
 800f38c:	6922      	ldr	r2, [r4, #16]
 800f38e:	1a98      	subs	r0, r3, r2
 800f390:	6963      	ldr	r3, [r4, #20]
 800f392:	b2f6      	uxtb	r6, r6
 800f394:	4283      	cmp	r3, r0
 800f396:	4637      	mov	r7, r6
 800f398:	dc04      	bgt.n	800f3a4 <__swbuf_r+0x3a>
 800f39a:	4621      	mov	r1, r4
 800f39c:	4628      	mov	r0, r5
 800f39e:	f001 fe1b 	bl	8010fd8 <_fflush_r>
 800f3a2:	b9e0      	cbnz	r0, 800f3de <__swbuf_r+0x74>
 800f3a4:	68a3      	ldr	r3, [r4, #8]
 800f3a6:	3b01      	subs	r3, #1
 800f3a8:	60a3      	str	r3, [r4, #8]
 800f3aa:	6823      	ldr	r3, [r4, #0]
 800f3ac:	1c5a      	adds	r2, r3, #1
 800f3ae:	6022      	str	r2, [r4, #0]
 800f3b0:	701e      	strb	r6, [r3, #0]
 800f3b2:	6962      	ldr	r2, [r4, #20]
 800f3b4:	1c43      	adds	r3, r0, #1
 800f3b6:	429a      	cmp	r2, r3
 800f3b8:	d004      	beq.n	800f3c4 <__swbuf_r+0x5a>
 800f3ba:	89a3      	ldrh	r3, [r4, #12]
 800f3bc:	07db      	lsls	r3, r3, #31
 800f3be:	d506      	bpl.n	800f3ce <__swbuf_r+0x64>
 800f3c0:	2e0a      	cmp	r6, #10
 800f3c2:	d104      	bne.n	800f3ce <__swbuf_r+0x64>
 800f3c4:	4621      	mov	r1, r4
 800f3c6:	4628      	mov	r0, r5
 800f3c8:	f001 fe06 	bl	8010fd8 <_fflush_r>
 800f3cc:	b938      	cbnz	r0, 800f3de <__swbuf_r+0x74>
 800f3ce:	4638      	mov	r0, r7
 800f3d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3d2:	4621      	mov	r1, r4
 800f3d4:	4628      	mov	r0, r5
 800f3d6:	f000 f805 	bl	800f3e4 <__swsetup_r>
 800f3da:	2800      	cmp	r0, #0
 800f3dc:	d0d5      	beq.n	800f38a <__swbuf_r+0x20>
 800f3de:	f04f 37ff 	mov.w	r7, #4294967295
 800f3e2:	e7f4      	b.n	800f3ce <__swbuf_r+0x64>

0800f3e4 <__swsetup_r>:
 800f3e4:	b538      	push	{r3, r4, r5, lr}
 800f3e6:	4b2a      	ldr	r3, [pc, #168]	; (800f490 <__swsetup_r+0xac>)
 800f3e8:	4605      	mov	r5, r0
 800f3ea:	6818      	ldr	r0, [r3, #0]
 800f3ec:	460c      	mov	r4, r1
 800f3ee:	b118      	cbz	r0, 800f3f8 <__swsetup_r+0x14>
 800f3f0:	6a03      	ldr	r3, [r0, #32]
 800f3f2:	b90b      	cbnz	r3, 800f3f8 <__swsetup_r+0x14>
 800f3f4:	f7ff fed2 	bl	800f19c <__sinit>
 800f3f8:	89a3      	ldrh	r3, [r4, #12]
 800f3fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f3fe:	0718      	lsls	r0, r3, #28
 800f400:	d422      	bmi.n	800f448 <__swsetup_r+0x64>
 800f402:	06d9      	lsls	r1, r3, #27
 800f404:	d407      	bmi.n	800f416 <__swsetup_r+0x32>
 800f406:	2309      	movs	r3, #9
 800f408:	602b      	str	r3, [r5, #0]
 800f40a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f40e:	81a3      	strh	r3, [r4, #12]
 800f410:	f04f 30ff 	mov.w	r0, #4294967295
 800f414:	e034      	b.n	800f480 <__swsetup_r+0x9c>
 800f416:	0758      	lsls	r0, r3, #29
 800f418:	d512      	bpl.n	800f440 <__swsetup_r+0x5c>
 800f41a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f41c:	b141      	cbz	r1, 800f430 <__swsetup_r+0x4c>
 800f41e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f422:	4299      	cmp	r1, r3
 800f424:	d002      	beq.n	800f42c <__swsetup_r+0x48>
 800f426:	4628      	mov	r0, r5
 800f428:	f000 ff90 	bl	801034c <_free_r>
 800f42c:	2300      	movs	r3, #0
 800f42e:	6363      	str	r3, [r4, #52]	; 0x34
 800f430:	89a3      	ldrh	r3, [r4, #12]
 800f432:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f436:	81a3      	strh	r3, [r4, #12]
 800f438:	2300      	movs	r3, #0
 800f43a:	6063      	str	r3, [r4, #4]
 800f43c:	6923      	ldr	r3, [r4, #16]
 800f43e:	6023      	str	r3, [r4, #0]
 800f440:	89a3      	ldrh	r3, [r4, #12]
 800f442:	f043 0308 	orr.w	r3, r3, #8
 800f446:	81a3      	strh	r3, [r4, #12]
 800f448:	6923      	ldr	r3, [r4, #16]
 800f44a:	b94b      	cbnz	r3, 800f460 <__swsetup_r+0x7c>
 800f44c:	89a3      	ldrh	r3, [r4, #12]
 800f44e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f456:	d003      	beq.n	800f460 <__swsetup_r+0x7c>
 800f458:	4621      	mov	r1, r4
 800f45a:	4628      	mov	r0, r5
 800f45c:	f001 fe0a 	bl	8011074 <__smakebuf_r>
 800f460:	89a0      	ldrh	r0, [r4, #12]
 800f462:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f466:	f010 0301 	ands.w	r3, r0, #1
 800f46a:	d00a      	beq.n	800f482 <__swsetup_r+0x9e>
 800f46c:	2300      	movs	r3, #0
 800f46e:	60a3      	str	r3, [r4, #8]
 800f470:	6963      	ldr	r3, [r4, #20]
 800f472:	425b      	negs	r3, r3
 800f474:	61a3      	str	r3, [r4, #24]
 800f476:	6923      	ldr	r3, [r4, #16]
 800f478:	b943      	cbnz	r3, 800f48c <__swsetup_r+0xa8>
 800f47a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f47e:	d1c4      	bne.n	800f40a <__swsetup_r+0x26>
 800f480:	bd38      	pop	{r3, r4, r5, pc}
 800f482:	0781      	lsls	r1, r0, #30
 800f484:	bf58      	it	pl
 800f486:	6963      	ldrpl	r3, [r4, #20]
 800f488:	60a3      	str	r3, [r4, #8]
 800f48a:	e7f4      	b.n	800f476 <__swsetup_r+0x92>
 800f48c:	2000      	movs	r0, #0
 800f48e:	e7f7      	b.n	800f480 <__swsetup_r+0x9c>
 800f490:	2000006c 	.word	0x2000006c

0800f494 <memset>:
 800f494:	4402      	add	r2, r0
 800f496:	4603      	mov	r3, r0
 800f498:	4293      	cmp	r3, r2
 800f49a:	d100      	bne.n	800f49e <memset+0xa>
 800f49c:	4770      	bx	lr
 800f49e:	f803 1b01 	strb.w	r1, [r3], #1
 800f4a2:	e7f9      	b.n	800f498 <memset+0x4>

0800f4a4 <_localeconv_r>:
 800f4a4:	4800      	ldr	r0, [pc, #0]	; (800f4a8 <_localeconv_r+0x4>)
 800f4a6:	4770      	bx	lr
 800f4a8:	20000160 	.word	0x20000160

0800f4ac <_close_r>:
 800f4ac:	b538      	push	{r3, r4, r5, lr}
 800f4ae:	4d06      	ldr	r5, [pc, #24]	; (800f4c8 <_close_r+0x1c>)
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	4604      	mov	r4, r0
 800f4b4:	4608      	mov	r0, r1
 800f4b6:	602b      	str	r3, [r5, #0]
 800f4b8:	f7f3 f8b1 	bl	800261e <_close>
 800f4bc:	1c43      	adds	r3, r0, #1
 800f4be:	d102      	bne.n	800f4c6 <_close_r+0x1a>
 800f4c0:	682b      	ldr	r3, [r5, #0]
 800f4c2:	b103      	cbz	r3, 800f4c6 <_close_r+0x1a>
 800f4c4:	6023      	str	r3, [r4, #0]
 800f4c6:	bd38      	pop	{r3, r4, r5, pc}
 800f4c8:	2000581c 	.word	0x2000581c

0800f4cc <_reclaim_reent>:
 800f4cc:	4b29      	ldr	r3, [pc, #164]	; (800f574 <_reclaim_reent+0xa8>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	4283      	cmp	r3, r0
 800f4d2:	b570      	push	{r4, r5, r6, lr}
 800f4d4:	4604      	mov	r4, r0
 800f4d6:	d04b      	beq.n	800f570 <_reclaim_reent+0xa4>
 800f4d8:	69c3      	ldr	r3, [r0, #28]
 800f4da:	b143      	cbz	r3, 800f4ee <_reclaim_reent+0x22>
 800f4dc:	68db      	ldr	r3, [r3, #12]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d144      	bne.n	800f56c <_reclaim_reent+0xa0>
 800f4e2:	69e3      	ldr	r3, [r4, #28]
 800f4e4:	6819      	ldr	r1, [r3, #0]
 800f4e6:	b111      	cbz	r1, 800f4ee <_reclaim_reent+0x22>
 800f4e8:	4620      	mov	r0, r4
 800f4ea:	f000 ff2f 	bl	801034c <_free_r>
 800f4ee:	6961      	ldr	r1, [r4, #20]
 800f4f0:	b111      	cbz	r1, 800f4f8 <_reclaim_reent+0x2c>
 800f4f2:	4620      	mov	r0, r4
 800f4f4:	f000 ff2a 	bl	801034c <_free_r>
 800f4f8:	69e1      	ldr	r1, [r4, #28]
 800f4fa:	b111      	cbz	r1, 800f502 <_reclaim_reent+0x36>
 800f4fc:	4620      	mov	r0, r4
 800f4fe:	f000 ff25 	bl	801034c <_free_r>
 800f502:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f504:	b111      	cbz	r1, 800f50c <_reclaim_reent+0x40>
 800f506:	4620      	mov	r0, r4
 800f508:	f000 ff20 	bl	801034c <_free_r>
 800f50c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f50e:	b111      	cbz	r1, 800f516 <_reclaim_reent+0x4a>
 800f510:	4620      	mov	r0, r4
 800f512:	f000 ff1b 	bl	801034c <_free_r>
 800f516:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f518:	b111      	cbz	r1, 800f520 <_reclaim_reent+0x54>
 800f51a:	4620      	mov	r0, r4
 800f51c:	f000 ff16 	bl	801034c <_free_r>
 800f520:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f522:	b111      	cbz	r1, 800f52a <_reclaim_reent+0x5e>
 800f524:	4620      	mov	r0, r4
 800f526:	f000 ff11 	bl	801034c <_free_r>
 800f52a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f52c:	b111      	cbz	r1, 800f534 <_reclaim_reent+0x68>
 800f52e:	4620      	mov	r0, r4
 800f530:	f000 ff0c 	bl	801034c <_free_r>
 800f534:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f536:	b111      	cbz	r1, 800f53e <_reclaim_reent+0x72>
 800f538:	4620      	mov	r0, r4
 800f53a:	f000 ff07 	bl	801034c <_free_r>
 800f53e:	6a23      	ldr	r3, [r4, #32]
 800f540:	b1b3      	cbz	r3, 800f570 <_reclaim_reent+0xa4>
 800f542:	4620      	mov	r0, r4
 800f544:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f548:	4718      	bx	r3
 800f54a:	5949      	ldr	r1, [r1, r5]
 800f54c:	b941      	cbnz	r1, 800f560 <_reclaim_reent+0x94>
 800f54e:	3504      	adds	r5, #4
 800f550:	69e3      	ldr	r3, [r4, #28]
 800f552:	2d80      	cmp	r5, #128	; 0x80
 800f554:	68d9      	ldr	r1, [r3, #12]
 800f556:	d1f8      	bne.n	800f54a <_reclaim_reent+0x7e>
 800f558:	4620      	mov	r0, r4
 800f55a:	f000 fef7 	bl	801034c <_free_r>
 800f55e:	e7c0      	b.n	800f4e2 <_reclaim_reent+0x16>
 800f560:	680e      	ldr	r6, [r1, #0]
 800f562:	4620      	mov	r0, r4
 800f564:	f000 fef2 	bl	801034c <_free_r>
 800f568:	4631      	mov	r1, r6
 800f56a:	e7ef      	b.n	800f54c <_reclaim_reent+0x80>
 800f56c:	2500      	movs	r5, #0
 800f56e:	e7ef      	b.n	800f550 <_reclaim_reent+0x84>
 800f570:	bd70      	pop	{r4, r5, r6, pc}
 800f572:	bf00      	nop
 800f574:	2000006c 	.word	0x2000006c

0800f578 <_lseek_r>:
 800f578:	b538      	push	{r3, r4, r5, lr}
 800f57a:	4d07      	ldr	r5, [pc, #28]	; (800f598 <_lseek_r+0x20>)
 800f57c:	4604      	mov	r4, r0
 800f57e:	4608      	mov	r0, r1
 800f580:	4611      	mov	r1, r2
 800f582:	2200      	movs	r2, #0
 800f584:	602a      	str	r2, [r5, #0]
 800f586:	461a      	mov	r2, r3
 800f588:	f7f3 f870 	bl	800266c <_lseek>
 800f58c:	1c43      	adds	r3, r0, #1
 800f58e:	d102      	bne.n	800f596 <_lseek_r+0x1e>
 800f590:	682b      	ldr	r3, [r5, #0]
 800f592:	b103      	cbz	r3, 800f596 <_lseek_r+0x1e>
 800f594:	6023      	str	r3, [r4, #0]
 800f596:	bd38      	pop	{r3, r4, r5, pc}
 800f598:	2000581c 	.word	0x2000581c

0800f59c <_read_r>:
 800f59c:	b538      	push	{r3, r4, r5, lr}
 800f59e:	4d07      	ldr	r5, [pc, #28]	; (800f5bc <_read_r+0x20>)
 800f5a0:	4604      	mov	r4, r0
 800f5a2:	4608      	mov	r0, r1
 800f5a4:	4611      	mov	r1, r2
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	602a      	str	r2, [r5, #0]
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	f7f2 fffe 	bl	80025ac <_read>
 800f5b0:	1c43      	adds	r3, r0, #1
 800f5b2:	d102      	bne.n	800f5ba <_read_r+0x1e>
 800f5b4:	682b      	ldr	r3, [r5, #0]
 800f5b6:	b103      	cbz	r3, 800f5ba <_read_r+0x1e>
 800f5b8:	6023      	str	r3, [r4, #0]
 800f5ba:	bd38      	pop	{r3, r4, r5, pc}
 800f5bc:	2000581c 	.word	0x2000581c

0800f5c0 <_write_r>:
 800f5c0:	b538      	push	{r3, r4, r5, lr}
 800f5c2:	4d07      	ldr	r5, [pc, #28]	; (800f5e0 <_write_r+0x20>)
 800f5c4:	4604      	mov	r4, r0
 800f5c6:	4608      	mov	r0, r1
 800f5c8:	4611      	mov	r1, r2
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	602a      	str	r2, [r5, #0]
 800f5ce:	461a      	mov	r2, r3
 800f5d0:	f7f3 f809 	bl	80025e6 <_write>
 800f5d4:	1c43      	adds	r3, r0, #1
 800f5d6:	d102      	bne.n	800f5de <_write_r+0x1e>
 800f5d8:	682b      	ldr	r3, [r5, #0]
 800f5da:	b103      	cbz	r3, 800f5de <_write_r+0x1e>
 800f5dc:	6023      	str	r3, [r4, #0]
 800f5de:	bd38      	pop	{r3, r4, r5, pc}
 800f5e0:	2000581c 	.word	0x2000581c

0800f5e4 <__errno>:
 800f5e4:	4b01      	ldr	r3, [pc, #4]	; (800f5ec <__errno+0x8>)
 800f5e6:	6818      	ldr	r0, [r3, #0]
 800f5e8:	4770      	bx	lr
 800f5ea:	bf00      	nop
 800f5ec:	2000006c 	.word	0x2000006c

0800f5f0 <__libc_init_array>:
 800f5f0:	b570      	push	{r4, r5, r6, lr}
 800f5f2:	4d0d      	ldr	r5, [pc, #52]	; (800f628 <__libc_init_array+0x38>)
 800f5f4:	4c0d      	ldr	r4, [pc, #52]	; (800f62c <__libc_init_array+0x3c>)
 800f5f6:	1b64      	subs	r4, r4, r5
 800f5f8:	10a4      	asrs	r4, r4, #2
 800f5fa:	2600      	movs	r6, #0
 800f5fc:	42a6      	cmp	r6, r4
 800f5fe:	d109      	bne.n	800f614 <__libc_init_array+0x24>
 800f600:	4d0b      	ldr	r5, [pc, #44]	; (800f630 <__libc_init_array+0x40>)
 800f602:	4c0c      	ldr	r4, [pc, #48]	; (800f634 <__libc_init_array+0x44>)
 800f604:	f001 fe56 	bl	80112b4 <_init>
 800f608:	1b64      	subs	r4, r4, r5
 800f60a:	10a4      	asrs	r4, r4, #2
 800f60c:	2600      	movs	r6, #0
 800f60e:	42a6      	cmp	r6, r4
 800f610:	d105      	bne.n	800f61e <__libc_init_array+0x2e>
 800f612:	bd70      	pop	{r4, r5, r6, pc}
 800f614:	f855 3b04 	ldr.w	r3, [r5], #4
 800f618:	4798      	blx	r3
 800f61a:	3601      	adds	r6, #1
 800f61c:	e7ee      	b.n	800f5fc <__libc_init_array+0xc>
 800f61e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f622:	4798      	blx	r3
 800f624:	3601      	adds	r6, #1
 800f626:	e7f2      	b.n	800f60e <__libc_init_array+0x1e>
 800f628:	0801210c 	.word	0x0801210c
 800f62c:	0801210c 	.word	0x0801210c
 800f630:	0801210c 	.word	0x0801210c
 800f634:	08012110 	.word	0x08012110

0800f638 <__retarget_lock_acquire_recursive>:
 800f638:	4770      	bx	lr

0800f63a <__retarget_lock_release_recursive>:
 800f63a:	4770      	bx	lr

0800f63c <memcpy>:
 800f63c:	440a      	add	r2, r1
 800f63e:	4291      	cmp	r1, r2
 800f640:	f100 33ff 	add.w	r3, r0, #4294967295
 800f644:	d100      	bne.n	800f648 <memcpy+0xc>
 800f646:	4770      	bx	lr
 800f648:	b510      	push	{r4, lr}
 800f64a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f64e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f652:	4291      	cmp	r1, r2
 800f654:	d1f9      	bne.n	800f64a <memcpy+0xe>
 800f656:	bd10      	pop	{r4, pc}

0800f658 <quorem>:
 800f658:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f65c:	6903      	ldr	r3, [r0, #16]
 800f65e:	690c      	ldr	r4, [r1, #16]
 800f660:	42a3      	cmp	r3, r4
 800f662:	4607      	mov	r7, r0
 800f664:	db7e      	blt.n	800f764 <quorem+0x10c>
 800f666:	3c01      	subs	r4, #1
 800f668:	f101 0814 	add.w	r8, r1, #20
 800f66c:	f100 0514 	add.w	r5, r0, #20
 800f670:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f674:	9301      	str	r3, [sp, #4]
 800f676:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f67a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f67e:	3301      	adds	r3, #1
 800f680:	429a      	cmp	r2, r3
 800f682:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f686:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f68a:	fbb2 f6f3 	udiv	r6, r2, r3
 800f68e:	d331      	bcc.n	800f6f4 <quorem+0x9c>
 800f690:	f04f 0e00 	mov.w	lr, #0
 800f694:	4640      	mov	r0, r8
 800f696:	46ac      	mov	ip, r5
 800f698:	46f2      	mov	sl, lr
 800f69a:	f850 2b04 	ldr.w	r2, [r0], #4
 800f69e:	b293      	uxth	r3, r2
 800f6a0:	fb06 e303 	mla	r3, r6, r3, lr
 800f6a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f6a8:	0c1a      	lsrs	r2, r3, #16
 800f6aa:	b29b      	uxth	r3, r3
 800f6ac:	ebaa 0303 	sub.w	r3, sl, r3
 800f6b0:	f8dc a000 	ldr.w	sl, [ip]
 800f6b4:	fa13 f38a 	uxtah	r3, r3, sl
 800f6b8:	fb06 220e 	mla	r2, r6, lr, r2
 800f6bc:	9300      	str	r3, [sp, #0]
 800f6be:	9b00      	ldr	r3, [sp, #0]
 800f6c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f6c4:	b292      	uxth	r2, r2
 800f6c6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f6ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f6ce:	f8bd 3000 	ldrh.w	r3, [sp]
 800f6d2:	4581      	cmp	r9, r0
 800f6d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f6d8:	f84c 3b04 	str.w	r3, [ip], #4
 800f6dc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f6e0:	d2db      	bcs.n	800f69a <quorem+0x42>
 800f6e2:	f855 300b 	ldr.w	r3, [r5, fp]
 800f6e6:	b92b      	cbnz	r3, 800f6f4 <quorem+0x9c>
 800f6e8:	9b01      	ldr	r3, [sp, #4]
 800f6ea:	3b04      	subs	r3, #4
 800f6ec:	429d      	cmp	r5, r3
 800f6ee:	461a      	mov	r2, r3
 800f6f0:	d32c      	bcc.n	800f74c <quorem+0xf4>
 800f6f2:	613c      	str	r4, [r7, #16]
 800f6f4:	4638      	mov	r0, r7
 800f6f6:	f001 f9a5 	bl	8010a44 <__mcmp>
 800f6fa:	2800      	cmp	r0, #0
 800f6fc:	db22      	blt.n	800f744 <quorem+0xec>
 800f6fe:	3601      	adds	r6, #1
 800f700:	4629      	mov	r1, r5
 800f702:	2000      	movs	r0, #0
 800f704:	f858 2b04 	ldr.w	r2, [r8], #4
 800f708:	f8d1 c000 	ldr.w	ip, [r1]
 800f70c:	b293      	uxth	r3, r2
 800f70e:	1ac3      	subs	r3, r0, r3
 800f710:	0c12      	lsrs	r2, r2, #16
 800f712:	fa13 f38c 	uxtah	r3, r3, ip
 800f716:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f71a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f71e:	b29b      	uxth	r3, r3
 800f720:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f724:	45c1      	cmp	r9, r8
 800f726:	f841 3b04 	str.w	r3, [r1], #4
 800f72a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f72e:	d2e9      	bcs.n	800f704 <quorem+0xac>
 800f730:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f734:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f738:	b922      	cbnz	r2, 800f744 <quorem+0xec>
 800f73a:	3b04      	subs	r3, #4
 800f73c:	429d      	cmp	r5, r3
 800f73e:	461a      	mov	r2, r3
 800f740:	d30a      	bcc.n	800f758 <quorem+0x100>
 800f742:	613c      	str	r4, [r7, #16]
 800f744:	4630      	mov	r0, r6
 800f746:	b003      	add	sp, #12
 800f748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f74c:	6812      	ldr	r2, [r2, #0]
 800f74e:	3b04      	subs	r3, #4
 800f750:	2a00      	cmp	r2, #0
 800f752:	d1ce      	bne.n	800f6f2 <quorem+0x9a>
 800f754:	3c01      	subs	r4, #1
 800f756:	e7c9      	b.n	800f6ec <quorem+0x94>
 800f758:	6812      	ldr	r2, [r2, #0]
 800f75a:	3b04      	subs	r3, #4
 800f75c:	2a00      	cmp	r2, #0
 800f75e:	d1f0      	bne.n	800f742 <quorem+0xea>
 800f760:	3c01      	subs	r4, #1
 800f762:	e7eb      	b.n	800f73c <quorem+0xe4>
 800f764:	2000      	movs	r0, #0
 800f766:	e7ee      	b.n	800f746 <quorem+0xee>

0800f768 <_dtoa_r>:
 800f768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f76c:	ed2d 8b04 	vpush	{d8-d9}
 800f770:	69c5      	ldr	r5, [r0, #28]
 800f772:	b093      	sub	sp, #76	; 0x4c
 800f774:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f778:	ec57 6b10 	vmov	r6, r7, d0
 800f77c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f780:	9107      	str	r1, [sp, #28]
 800f782:	4604      	mov	r4, r0
 800f784:	920a      	str	r2, [sp, #40]	; 0x28
 800f786:	930d      	str	r3, [sp, #52]	; 0x34
 800f788:	b975      	cbnz	r5, 800f7a8 <_dtoa_r+0x40>
 800f78a:	2010      	movs	r0, #16
 800f78c:	f000 fe2a 	bl	80103e4 <malloc>
 800f790:	4602      	mov	r2, r0
 800f792:	61e0      	str	r0, [r4, #28]
 800f794:	b920      	cbnz	r0, 800f7a0 <_dtoa_r+0x38>
 800f796:	4bae      	ldr	r3, [pc, #696]	; (800fa50 <_dtoa_r+0x2e8>)
 800f798:	21ef      	movs	r1, #239	; 0xef
 800f79a:	48ae      	ldr	r0, [pc, #696]	; (800fa54 <_dtoa_r+0x2ec>)
 800f79c:	f001 fcd8 	bl	8011150 <__assert_func>
 800f7a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f7a4:	6005      	str	r5, [r0, #0]
 800f7a6:	60c5      	str	r5, [r0, #12]
 800f7a8:	69e3      	ldr	r3, [r4, #28]
 800f7aa:	6819      	ldr	r1, [r3, #0]
 800f7ac:	b151      	cbz	r1, 800f7c4 <_dtoa_r+0x5c>
 800f7ae:	685a      	ldr	r2, [r3, #4]
 800f7b0:	604a      	str	r2, [r1, #4]
 800f7b2:	2301      	movs	r3, #1
 800f7b4:	4093      	lsls	r3, r2
 800f7b6:	608b      	str	r3, [r1, #8]
 800f7b8:	4620      	mov	r0, r4
 800f7ba:	f000 ff07 	bl	80105cc <_Bfree>
 800f7be:	69e3      	ldr	r3, [r4, #28]
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	601a      	str	r2, [r3, #0]
 800f7c4:	1e3b      	subs	r3, r7, #0
 800f7c6:	bfbb      	ittet	lt
 800f7c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f7cc:	9303      	strlt	r3, [sp, #12]
 800f7ce:	2300      	movge	r3, #0
 800f7d0:	2201      	movlt	r2, #1
 800f7d2:	bfac      	ite	ge
 800f7d4:	f8c8 3000 	strge.w	r3, [r8]
 800f7d8:	f8c8 2000 	strlt.w	r2, [r8]
 800f7dc:	4b9e      	ldr	r3, [pc, #632]	; (800fa58 <_dtoa_r+0x2f0>)
 800f7de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f7e2:	ea33 0308 	bics.w	r3, r3, r8
 800f7e6:	d11b      	bne.n	800f820 <_dtoa_r+0xb8>
 800f7e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f7ea:	f242 730f 	movw	r3, #9999	; 0x270f
 800f7ee:	6013      	str	r3, [r2, #0]
 800f7f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f7f4:	4333      	orrs	r3, r6
 800f7f6:	f000 8593 	beq.w	8010320 <_dtoa_r+0xbb8>
 800f7fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f7fc:	b963      	cbnz	r3, 800f818 <_dtoa_r+0xb0>
 800f7fe:	4b97      	ldr	r3, [pc, #604]	; (800fa5c <_dtoa_r+0x2f4>)
 800f800:	e027      	b.n	800f852 <_dtoa_r+0xea>
 800f802:	4b97      	ldr	r3, [pc, #604]	; (800fa60 <_dtoa_r+0x2f8>)
 800f804:	9300      	str	r3, [sp, #0]
 800f806:	3308      	adds	r3, #8
 800f808:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f80a:	6013      	str	r3, [r2, #0]
 800f80c:	9800      	ldr	r0, [sp, #0]
 800f80e:	b013      	add	sp, #76	; 0x4c
 800f810:	ecbd 8b04 	vpop	{d8-d9}
 800f814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f818:	4b90      	ldr	r3, [pc, #576]	; (800fa5c <_dtoa_r+0x2f4>)
 800f81a:	9300      	str	r3, [sp, #0]
 800f81c:	3303      	adds	r3, #3
 800f81e:	e7f3      	b.n	800f808 <_dtoa_r+0xa0>
 800f820:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f824:	2200      	movs	r2, #0
 800f826:	ec51 0b17 	vmov	r0, r1, d7
 800f82a:	eeb0 8a47 	vmov.f32	s16, s14
 800f82e:	eef0 8a67 	vmov.f32	s17, s15
 800f832:	2300      	movs	r3, #0
 800f834:	f7f1 f948 	bl	8000ac8 <__aeabi_dcmpeq>
 800f838:	4681      	mov	r9, r0
 800f83a:	b160      	cbz	r0, 800f856 <_dtoa_r+0xee>
 800f83c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f83e:	2301      	movs	r3, #1
 800f840:	6013      	str	r3, [r2, #0]
 800f842:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f844:	2b00      	cmp	r3, #0
 800f846:	f000 8568 	beq.w	801031a <_dtoa_r+0xbb2>
 800f84a:	4b86      	ldr	r3, [pc, #536]	; (800fa64 <_dtoa_r+0x2fc>)
 800f84c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f84e:	6013      	str	r3, [r2, #0]
 800f850:	3b01      	subs	r3, #1
 800f852:	9300      	str	r3, [sp, #0]
 800f854:	e7da      	b.n	800f80c <_dtoa_r+0xa4>
 800f856:	aa10      	add	r2, sp, #64	; 0x40
 800f858:	a911      	add	r1, sp, #68	; 0x44
 800f85a:	4620      	mov	r0, r4
 800f85c:	eeb0 0a48 	vmov.f32	s0, s16
 800f860:	eef0 0a68 	vmov.f32	s1, s17
 800f864:	f001 f994 	bl	8010b90 <__d2b>
 800f868:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f86c:	4682      	mov	sl, r0
 800f86e:	2d00      	cmp	r5, #0
 800f870:	d07f      	beq.n	800f972 <_dtoa_r+0x20a>
 800f872:	ee18 3a90 	vmov	r3, s17
 800f876:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f87a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f87e:	ec51 0b18 	vmov	r0, r1, d8
 800f882:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f886:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f88a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f88e:	4619      	mov	r1, r3
 800f890:	2200      	movs	r2, #0
 800f892:	4b75      	ldr	r3, [pc, #468]	; (800fa68 <_dtoa_r+0x300>)
 800f894:	f7f0 fcf8 	bl	8000288 <__aeabi_dsub>
 800f898:	a367      	add	r3, pc, #412	; (adr r3, 800fa38 <_dtoa_r+0x2d0>)
 800f89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f89e:	f7f0 feab 	bl	80005f8 <__aeabi_dmul>
 800f8a2:	a367      	add	r3, pc, #412	; (adr r3, 800fa40 <_dtoa_r+0x2d8>)
 800f8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a8:	f7f0 fcf0 	bl	800028c <__adddf3>
 800f8ac:	4606      	mov	r6, r0
 800f8ae:	4628      	mov	r0, r5
 800f8b0:	460f      	mov	r7, r1
 800f8b2:	f7f0 fe37 	bl	8000524 <__aeabi_i2d>
 800f8b6:	a364      	add	r3, pc, #400	; (adr r3, 800fa48 <_dtoa_r+0x2e0>)
 800f8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8bc:	f7f0 fe9c 	bl	80005f8 <__aeabi_dmul>
 800f8c0:	4602      	mov	r2, r0
 800f8c2:	460b      	mov	r3, r1
 800f8c4:	4630      	mov	r0, r6
 800f8c6:	4639      	mov	r1, r7
 800f8c8:	f7f0 fce0 	bl	800028c <__adddf3>
 800f8cc:	4606      	mov	r6, r0
 800f8ce:	460f      	mov	r7, r1
 800f8d0:	f7f1 f942 	bl	8000b58 <__aeabi_d2iz>
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	4683      	mov	fp, r0
 800f8d8:	2300      	movs	r3, #0
 800f8da:	4630      	mov	r0, r6
 800f8dc:	4639      	mov	r1, r7
 800f8de:	f7f1 f8fd 	bl	8000adc <__aeabi_dcmplt>
 800f8e2:	b148      	cbz	r0, 800f8f8 <_dtoa_r+0x190>
 800f8e4:	4658      	mov	r0, fp
 800f8e6:	f7f0 fe1d 	bl	8000524 <__aeabi_i2d>
 800f8ea:	4632      	mov	r2, r6
 800f8ec:	463b      	mov	r3, r7
 800f8ee:	f7f1 f8eb 	bl	8000ac8 <__aeabi_dcmpeq>
 800f8f2:	b908      	cbnz	r0, 800f8f8 <_dtoa_r+0x190>
 800f8f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f8f8:	f1bb 0f16 	cmp.w	fp, #22
 800f8fc:	d857      	bhi.n	800f9ae <_dtoa_r+0x246>
 800f8fe:	4b5b      	ldr	r3, [pc, #364]	; (800fa6c <_dtoa_r+0x304>)
 800f900:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f908:	ec51 0b18 	vmov	r0, r1, d8
 800f90c:	f7f1 f8e6 	bl	8000adc <__aeabi_dcmplt>
 800f910:	2800      	cmp	r0, #0
 800f912:	d04e      	beq.n	800f9b2 <_dtoa_r+0x24a>
 800f914:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f918:	2300      	movs	r3, #0
 800f91a:	930c      	str	r3, [sp, #48]	; 0x30
 800f91c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f91e:	1b5b      	subs	r3, r3, r5
 800f920:	1e5a      	subs	r2, r3, #1
 800f922:	bf45      	ittet	mi
 800f924:	f1c3 0301 	rsbmi	r3, r3, #1
 800f928:	9305      	strmi	r3, [sp, #20]
 800f92a:	2300      	movpl	r3, #0
 800f92c:	2300      	movmi	r3, #0
 800f92e:	9206      	str	r2, [sp, #24]
 800f930:	bf54      	ite	pl
 800f932:	9305      	strpl	r3, [sp, #20]
 800f934:	9306      	strmi	r3, [sp, #24]
 800f936:	f1bb 0f00 	cmp.w	fp, #0
 800f93a:	db3c      	blt.n	800f9b6 <_dtoa_r+0x24e>
 800f93c:	9b06      	ldr	r3, [sp, #24]
 800f93e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f942:	445b      	add	r3, fp
 800f944:	9306      	str	r3, [sp, #24]
 800f946:	2300      	movs	r3, #0
 800f948:	9308      	str	r3, [sp, #32]
 800f94a:	9b07      	ldr	r3, [sp, #28]
 800f94c:	2b09      	cmp	r3, #9
 800f94e:	d868      	bhi.n	800fa22 <_dtoa_r+0x2ba>
 800f950:	2b05      	cmp	r3, #5
 800f952:	bfc4      	itt	gt
 800f954:	3b04      	subgt	r3, #4
 800f956:	9307      	strgt	r3, [sp, #28]
 800f958:	9b07      	ldr	r3, [sp, #28]
 800f95a:	f1a3 0302 	sub.w	r3, r3, #2
 800f95e:	bfcc      	ite	gt
 800f960:	2500      	movgt	r5, #0
 800f962:	2501      	movle	r5, #1
 800f964:	2b03      	cmp	r3, #3
 800f966:	f200 8085 	bhi.w	800fa74 <_dtoa_r+0x30c>
 800f96a:	e8df f003 	tbb	[pc, r3]
 800f96e:	3b2e      	.short	0x3b2e
 800f970:	5839      	.short	0x5839
 800f972:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f976:	441d      	add	r5, r3
 800f978:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f97c:	2b20      	cmp	r3, #32
 800f97e:	bfc1      	itttt	gt
 800f980:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f984:	fa08 f803 	lslgt.w	r8, r8, r3
 800f988:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800f98c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f990:	bfd6      	itet	le
 800f992:	f1c3 0320 	rsble	r3, r3, #32
 800f996:	ea48 0003 	orrgt.w	r0, r8, r3
 800f99a:	fa06 f003 	lslle.w	r0, r6, r3
 800f99e:	f7f0 fdb1 	bl	8000504 <__aeabi_ui2d>
 800f9a2:	2201      	movs	r2, #1
 800f9a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f9a8:	3d01      	subs	r5, #1
 800f9aa:	920e      	str	r2, [sp, #56]	; 0x38
 800f9ac:	e76f      	b.n	800f88e <_dtoa_r+0x126>
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	e7b3      	b.n	800f91a <_dtoa_r+0x1b2>
 800f9b2:	900c      	str	r0, [sp, #48]	; 0x30
 800f9b4:	e7b2      	b.n	800f91c <_dtoa_r+0x1b4>
 800f9b6:	9b05      	ldr	r3, [sp, #20]
 800f9b8:	eba3 030b 	sub.w	r3, r3, fp
 800f9bc:	9305      	str	r3, [sp, #20]
 800f9be:	f1cb 0300 	rsb	r3, fp, #0
 800f9c2:	9308      	str	r3, [sp, #32]
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800f9c8:	e7bf      	b.n	800f94a <_dtoa_r+0x1e2>
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	9309      	str	r3, [sp, #36]	; 0x24
 800f9ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	dc52      	bgt.n	800fa7a <_dtoa_r+0x312>
 800f9d4:	2301      	movs	r3, #1
 800f9d6:	9301      	str	r3, [sp, #4]
 800f9d8:	9304      	str	r3, [sp, #16]
 800f9da:	461a      	mov	r2, r3
 800f9dc:	920a      	str	r2, [sp, #40]	; 0x28
 800f9de:	e00b      	b.n	800f9f8 <_dtoa_r+0x290>
 800f9e0:	2301      	movs	r3, #1
 800f9e2:	e7f3      	b.n	800f9cc <_dtoa_r+0x264>
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	9309      	str	r3, [sp, #36]	; 0x24
 800f9e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9ea:	445b      	add	r3, fp
 800f9ec:	9301      	str	r3, [sp, #4]
 800f9ee:	3301      	adds	r3, #1
 800f9f0:	2b01      	cmp	r3, #1
 800f9f2:	9304      	str	r3, [sp, #16]
 800f9f4:	bfb8      	it	lt
 800f9f6:	2301      	movlt	r3, #1
 800f9f8:	69e0      	ldr	r0, [r4, #28]
 800f9fa:	2100      	movs	r1, #0
 800f9fc:	2204      	movs	r2, #4
 800f9fe:	f102 0614 	add.w	r6, r2, #20
 800fa02:	429e      	cmp	r6, r3
 800fa04:	d93d      	bls.n	800fa82 <_dtoa_r+0x31a>
 800fa06:	6041      	str	r1, [r0, #4]
 800fa08:	4620      	mov	r0, r4
 800fa0a:	f000 fd9f 	bl	801054c <_Balloc>
 800fa0e:	9000      	str	r0, [sp, #0]
 800fa10:	2800      	cmp	r0, #0
 800fa12:	d139      	bne.n	800fa88 <_dtoa_r+0x320>
 800fa14:	4b16      	ldr	r3, [pc, #88]	; (800fa70 <_dtoa_r+0x308>)
 800fa16:	4602      	mov	r2, r0
 800fa18:	f240 11af 	movw	r1, #431	; 0x1af
 800fa1c:	e6bd      	b.n	800f79a <_dtoa_r+0x32>
 800fa1e:	2301      	movs	r3, #1
 800fa20:	e7e1      	b.n	800f9e6 <_dtoa_r+0x27e>
 800fa22:	2501      	movs	r5, #1
 800fa24:	2300      	movs	r3, #0
 800fa26:	9307      	str	r3, [sp, #28]
 800fa28:	9509      	str	r5, [sp, #36]	; 0x24
 800fa2a:	f04f 33ff 	mov.w	r3, #4294967295
 800fa2e:	9301      	str	r3, [sp, #4]
 800fa30:	9304      	str	r3, [sp, #16]
 800fa32:	2200      	movs	r2, #0
 800fa34:	2312      	movs	r3, #18
 800fa36:	e7d1      	b.n	800f9dc <_dtoa_r+0x274>
 800fa38:	636f4361 	.word	0x636f4361
 800fa3c:	3fd287a7 	.word	0x3fd287a7
 800fa40:	8b60c8b3 	.word	0x8b60c8b3
 800fa44:	3fc68a28 	.word	0x3fc68a28
 800fa48:	509f79fb 	.word	0x509f79fb
 800fa4c:	3fd34413 	.word	0x3fd34413
 800fa50:	08011dd1 	.word	0x08011dd1
 800fa54:	08011de8 	.word	0x08011de8
 800fa58:	7ff00000 	.word	0x7ff00000
 800fa5c:	08011dcd 	.word	0x08011dcd
 800fa60:	08011dc4 	.word	0x08011dc4
 800fa64:	08011da1 	.word	0x08011da1
 800fa68:	3ff80000 	.word	0x3ff80000
 800fa6c:	08011ed8 	.word	0x08011ed8
 800fa70:	08011e40 	.word	0x08011e40
 800fa74:	2301      	movs	r3, #1
 800fa76:	9309      	str	r3, [sp, #36]	; 0x24
 800fa78:	e7d7      	b.n	800fa2a <_dtoa_r+0x2c2>
 800fa7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa7c:	9301      	str	r3, [sp, #4]
 800fa7e:	9304      	str	r3, [sp, #16]
 800fa80:	e7ba      	b.n	800f9f8 <_dtoa_r+0x290>
 800fa82:	3101      	adds	r1, #1
 800fa84:	0052      	lsls	r2, r2, #1
 800fa86:	e7ba      	b.n	800f9fe <_dtoa_r+0x296>
 800fa88:	69e3      	ldr	r3, [r4, #28]
 800fa8a:	9a00      	ldr	r2, [sp, #0]
 800fa8c:	601a      	str	r2, [r3, #0]
 800fa8e:	9b04      	ldr	r3, [sp, #16]
 800fa90:	2b0e      	cmp	r3, #14
 800fa92:	f200 80a8 	bhi.w	800fbe6 <_dtoa_r+0x47e>
 800fa96:	2d00      	cmp	r5, #0
 800fa98:	f000 80a5 	beq.w	800fbe6 <_dtoa_r+0x47e>
 800fa9c:	f1bb 0f00 	cmp.w	fp, #0
 800faa0:	dd38      	ble.n	800fb14 <_dtoa_r+0x3ac>
 800faa2:	4bc0      	ldr	r3, [pc, #768]	; (800fda4 <_dtoa_r+0x63c>)
 800faa4:	f00b 020f 	and.w	r2, fp, #15
 800faa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800faac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800fab0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800fab4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800fab8:	d019      	beq.n	800faee <_dtoa_r+0x386>
 800faba:	4bbb      	ldr	r3, [pc, #748]	; (800fda8 <_dtoa_r+0x640>)
 800fabc:	ec51 0b18 	vmov	r0, r1, d8
 800fac0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fac4:	f7f0 fec2 	bl	800084c <__aeabi_ddiv>
 800fac8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800facc:	f008 080f 	and.w	r8, r8, #15
 800fad0:	2503      	movs	r5, #3
 800fad2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800fda8 <_dtoa_r+0x640>
 800fad6:	f1b8 0f00 	cmp.w	r8, #0
 800fada:	d10a      	bne.n	800faf2 <_dtoa_r+0x38a>
 800fadc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fae0:	4632      	mov	r2, r6
 800fae2:	463b      	mov	r3, r7
 800fae4:	f7f0 feb2 	bl	800084c <__aeabi_ddiv>
 800fae8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800faec:	e02b      	b.n	800fb46 <_dtoa_r+0x3de>
 800faee:	2502      	movs	r5, #2
 800faf0:	e7ef      	b.n	800fad2 <_dtoa_r+0x36a>
 800faf2:	f018 0f01 	tst.w	r8, #1
 800faf6:	d008      	beq.n	800fb0a <_dtoa_r+0x3a2>
 800faf8:	4630      	mov	r0, r6
 800fafa:	4639      	mov	r1, r7
 800fafc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fb00:	f7f0 fd7a 	bl	80005f8 <__aeabi_dmul>
 800fb04:	3501      	adds	r5, #1
 800fb06:	4606      	mov	r6, r0
 800fb08:	460f      	mov	r7, r1
 800fb0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fb0e:	f109 0908 	add.w	r9, r9, #8
 800fb12:	e7e0      	b.n	800fad6 <_dtoa_r+0x36e>
 800fb14:	f000 809f 	beq.w	800fc56 <_dtoa_r+0x4ee>
 800fb18:	f1cb 0600 	rsb	r6, fp, #0
 800fb1c:	4ba1      	ldr	r3, [pc, #644]	; (800fda4 <_dtoa_r+0x63c>)
 800fb1e:	4fa2      	ldr	r7, [pc, #648]	; (800fda8 <_dtoa_r+0x640>)
 800fb20:	f006 020f 	and.w	r2, r6, #15
 800fb24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb2c:	ec51 0b18 	vmov	r0, r1, d8
 800fb30:	f7f0 fd62 	bl	80005f8 <__aeabi_dmul>
 800fb34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb38:	1136      	asrs	r6, r6, #4
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	2502      	movs	r5, #2
 800fb3e:	2e00      	cmp	r6, #0
 800fb40:	d17e      	bne.n	800fc40 <_dtoa_r+0x4d8>
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d1d0      	bne.n	800fae8 <_dtoa_r+0x380>
 800fb46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fb48:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	f000 8084 	beq.w	800fc5a <_dtoa_r+0x4f2>
 800fb52:	4b96      	ldr	r3, [pc, #600]	; (800fdac <_dtoa_r+0x644>)
 800fb54:	2200      	movs	r2, #0
 800fb56:	4640      	mov	r0, r8
 800fb58:	4649      	mov	r1, r9
 800fb5a:	f7f0 ffbf 	bl	8000adc <__aeabi_dcmplt>
 800fb5e:	2800      	cmp	r0, #0
 800fb60:	d07b      	beq.n	800fc5a <_dtoa_r+0x4f2>
 800fb62:	9b04      	ldr	r3, [sp, #16]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d078      	beq.n	800fc5a <_dtoa_r+0x4f2>
 800fb68:	9b01      	ldr	r3, [sp, #4]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	dd39      	ble.n	800fbe2 <_dtoa_r+0x47a>
 800fb6e:	4b90      	ldr	r3, [pc, #576]	; (800fdb0 <_dtoa_r+0x648>)
 800fb70:	2200      	movs	r2, #0
 800fb72:	4640      	mov	r0, r8
 800fb74:	4649      	mov	r1, r9
 800fb76:	f7f0 fd3f 	bl	80005f8 <__aeabi_dmul>
 800fb7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb7e:	9e01      	ldr	r6, [sp, #4]
 800fb80:	f10b 37ff 	add.w	r7, fp, #4294967295
 800fb84:	3501      	adds	r5, #1
 800fb86:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fb8a:	4628      	mov	r0, r5
 800fb8c:	f7f0 fcca 	bl	8000524 <__aeabi_i2d>
 800fb90:	4642      	mov	r2, r8
 800fb92:	464b      	mov	r3, r9
 800fb94:	f7f0 fd30 	bl	80005f8 <__aeabi_dmul>
 800fb98:	4b86      	ldr	r3, [pc, #536]	; (800fdb4 <_dtoa_r+0x64c>)
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	f7f0 fb76 	bl	800028c <__adddf3>
 800fba0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800fba4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fba8:	9303      	str	r3, [sp, #12]
 800fbaa:	2e00      	cmp	r6, #0
 800fbac:	d158      	bne.n	800fc60 <_dtoa_r+0x4f8>
 800fbae:	4b82      	ldr	r3, [pc, #520]	; (800fdb8 <_dtoa_r+0x650>)
 800fbb0:	2200      	movs	r2, #0
 800fbb2:	4640      	mov	r0, r8
 800fbb4:	4649      	mov	r1, r9
 800fbb6:	f7f0 fb67 	bl	8000288 <__aeabi_dsub>
 800fbba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fbbe:	4680      	mov	r8, r0
 800fbc0:	4689      	mov	r9, r1
 800fbc2:	f7f0 ffa9 	bl	8000b18 <__aeabi_dcmpgt>
 800fbc6:	2800      	cmp	r0, #0
 800fbc8:	f040 8296 	bne.w	80100f8 <_dtoa_r+0x990>
 800fbcc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fbd0:	4640      	mov	r0, r8
 800fbd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fbd6:	4649      	mov	r1, r9
 800fbd8:	f7f0 ff80 	bl	8000adc <__aeabi_dcmplt>
 800fbdc:	2800      	cmp	r0, #0
 800fbde:	f040 8289 	bne.w	80100f4 <_dtoa_r+0x98c>
 800fbe2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800fbe6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	f2c0 814e 	blt.w	800fe8a <_dtoa_r+0x722>
 800fbee:	f1bb 0f0e 	cmp.w	fp, #14
 800fbf2:	f300 814a 	bgt.w	800fe8a <_dtoa_r+0x722>
 800fbf6:	4b6b      	ldr	r3, [pc, #428]	; (800fda4 <_dtoa_r+0x63c>)
 800fbf8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fbfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fc00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	f280 80dc 	bge.w	800fdc0 <_dtoa_r+0x658>
 800fc08:	9b04      	ldr	r3, [sp, #16]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	f300 80d8 	bgt.w	800fdc0 <_dtoa_r+0x658>
 800fc10:	f040 826f 	bne.w	80100f2 <_dtoa_r+0x98a>
 800fc14:	4b68      	ldr	r3, [pc, #416]	; (800fdb8 <_dtoa_r+0x650>)
 800fc16:	2200      	movs	r2, #0
 800fc18:	4640      	mov	r0, r8
 800fc1a:	4649      	mov	r1, r9
 800fc1c:	f7f0 fcec 	bl	80005f8 <__aeabi_dmul>
 800fc20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fc24:	f7f0 ff6e 	bl	8000b04 <__aeabi_dcmpge>
 800fc28:	9e04      	ldr	r6, [sp, #16]
 800fc2a:	4637      	mov	r7, r6
 800fc2c:	2800      	cmp	r0, #0
 800fc2e:	f040 8245 	bne.w	80100bc <_dtoa_r+0x954>
 800fc32:	9d00      	ldr	r5, [sp, #0]
 800fc34:	2331      	movs	r3, #49	; 0x31
 800fc36:	f805 3b01 	strb.w	r3, [r5], #1
 800fc3a:	f10b 0b01 	add.w	fp, fp, #1
 800fc3e:	e241      	b.n	80100c4 <_dtoa_r+0x95c>
 800fc40:	07f2      	lsls	r2, r6, #31
 800fc42:	d505      	bpl.n	800fc50 <_dtoa_r+0x4e8>
 800fc44:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc48:	f7f0 fcd6 	bl	80005f8 <__aeabi_dmul>
 800fc4c:	3501      	adds	r5, #1
 800fc4e:	2301      	movs	r3, #1
 800fc50:	1076      	asrs	r6, r6, #1
 800fc52:	3708      	adds	r7, #8
 800fc54:	e773      	b.n	800fb3e <_dtoa_r+0x3d6>
 800fc56:	2502      	movs	r5, #2
 800fc58:	e775      	b.n	800fb46 <_dtoa_r+0x3de>
 800fc5a:	9e04      	ldr	r6, [sp, #16]
 800fc5c:	465f      	mov	r7, fp
 800fc5e:	e792      	b.n	800fb86 <_dtoa_r+0x41e>
 800fc60:	9900      	ldr	r1, [sp, #0]
 800fc62:	4b50      	ldr	r3, [pc, #320]	; (800fda4 <_dtoa_r+0x63c>)
 800fc64:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fc68:	4431      	add	r1, r6
 800fc6a:	9102      	str	r1, [sp, #8]
 800fc6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fc6e:	eeb0 9a47 	vmov.f32	s18, s14
 800fc72:	eef0 9a67 	vmov.f32	s19, s15
 800fc76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fc7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fc7e:	2900      	cmp	r1, #0
 800fc80:	d044      	beq.n	800fd0c <_dtoa_r+0x5a4>
 800fc82:	494e      	ldr	r1, [pc, #312]	; (800fdbc <_dtoa_r+0x654>)
 800fc84:	2000      	movs	r0, #0
 800fc86:	f7f0 fde1 	bl	800084c <__aeabi_ddiv>
 800fc8a:	ec53 2b19 	vmov	r2, r3, d9
 800fc8e:	f7f0 fafb 	bl	8000288 <__aeabi_dsub>
 800fc92:	9d00      	ldr	r5, [sp, #0]
 800fc94:	ec41 0b19 	vmov	d9, r0, r1
 800fc98:	4649      	mov	r1, r9
 800fc9a:	4640      	mov	r0, r8
 800fc9c:	f7f0 ff5c 	bl	8000b58 <__aeabi_d2iz>
 800fca0:	4606      	mov	r6, r0
 800fca2:	f7f0 fc3f 	bl	8000524 <__aeabi_i2d>
 800fca6:	4602      	mov	r2, r0
 800fca8:	460b      	mov	r3, r1
 800fcaa:	4640      	mov	r0, r8
 800fcac:	4649      	mov	r1, r9
 800fcae:	f7f0 faeb 	bl	8000288 <__aeabi_dsub>
 800fcb2:	3630      	adds	r6, #48	; 0x30
 800fcb4:	f805 6b01 	strb.w	r6, [r5], #1
 800fcb8:	ec53 2b19 	vmov	r2, r3, d9
 800fcbc:	4680      	mov	r8, r0
 800fcbe:	4689      	mov	r9, r1
 800fcc0:	f7f0 ff0c 	bl	8000adc <__aeabi_dcmplt>
 800fcc4:	2800      	cmp	r0, #0
 800fcc6:	d164      	bne.n	800fd92 <_dtoa_r+0x62a>
 800fcc8:	4642      	mov	r2, r8
 800fcca:	464b      	mov	r3, r9
 800fccc:	4937      	ldr	r1, [pc, #220]	; (800fdac <_dtoa_r+0x644>)
 800fcce:	2000      	movs	r0, #0
 800fcd0:	f7f0 fada 	bl	8000288 <__aeabi_dsub>
 800fcd4:	ec53 2b19 	vmov	r2, r3, d9
 800fcd8:	f7f0 ff00 	bl	8000adc <__aeabi_dcmplt>
 800fcdc:	2800      	cmp	r0, #0
 800fcde:	f040 80b6 	bne.w	800fe4e <_dtoa_r+0x6e6>
 800fce2:	9b02      	ldr	r3, [sp, #8]
 800fce4:	429d      	cmp	r5, r3
 800fce6:	f43f af7c 	beq.w	800fbe2 <_dtoa_r+0x47a>
 800fcea:	4b31      	ldr	r3, [pc, #196]	; (800fdb0 <_dtoa_r+0x648>)
 800fcec:	ec51 0b19 	vmov	r0, r1, d9
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	f7f0 fc81 	bl	80005f8 <__aeabi_dmul>
 800fcf6:	4b2e      	ldr	r3, [pc, #184]	; (800fdb0 <_dtoa_r+0x648>)
 800fcf8:	ec41 0b19 	vmov	d9, r0, r1
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	4640      	mov	r0, r8
 800fd00:	4649      	mov	r1, r9
 800fd02:	f7f0 fc79 	bl	80005f8 <__aeabi_dmul>
 800fd06:	4680      	mov	r8, r0
 800fd08:	4689      	mov	r9, r1
 800fd0a:	e7c5      	b.n	800fc98 <_dtoa_r+0x530>
 800fd0c:	ec51 0b17 	vmov	r0, r1, d7
 800fd10:	f7f0 fc72 	bl	80005f8 <__aeabi_dmul>
 800fd14:	9b02      	ldr	r3, [sp, #8]
 800fd16:	9d00      	ldr	r5, [sp, #0]
 800fd18:	930f      	str	r3, [sp, #60]	; 0x3c
 800fd1a:	ec41 0b19 	vmov	d9, r0, r1
 800fd1e:	4649      	mov	r1, r9
 800fd20:	4640      	mov	r0, r8
 800fd22:	f7f0 ff19 	bl	8000b58 <__aeabi_d2iz>
 800fd26:	4606      	mov	r6, r0
 800fd28:	f7f0 fbfc 	bl	8000524 <__aeabi_i2d>
 800fd2c:	3630      	adds	r6, #48	; 0x30
 800fd2e:	4602      	mov	r2, r0
 800fd30:	460b      	mov	r3, r1
 800fd32:	4640      	mov	r0, r8
 800fd34:	4649      	mov	r1, r9
 800fd36:	f7f0 faa7 	bl	8000288 <__aeabi_dsub>
 800fd3a:	f805 6b01 	strb.w	r6, [r5], #1
 800fd3e:	9b02      	ldr	r3, [sp, #8]
 800fd40:	429d      	cmp	r5, r3
 800fd42:	4680      	mov	r8, r0
 800fd44:	4689      	mov	r9, r1
 800fd46:	f04f 0200 	mov.w	r2, #0
 800fd4a:	d124      	bne.n	800fd96 <_dtoa_r+0x62e>
 800fd4c:	4b1b      	ldr	r3, [pc, #108]	; (800fdbc <_dtoa_r+0x654>)
 800fd4e:	ec51 0b19 	vmov	r0, r1, d9
 800fd52:	f7f0 fa9b 	bl	800028c <__adddf3>
 800fd56:	4602      	mov	r2, r0
 800fd58:	460b      	mov	r3, r1
 800fd5a:	4640      	mov	r0, r8
 800fd5c:	4649      	mov	r1, r9
 800fd5e:	f7f0 fedb 	bl	8000b18 <__aeabi_dcmpgt>
 800fd62:	2800      	cmp	r0, #0
 800fd64:	d173      	bne.n	800fe4e <_dtoa_r+0x6e6>
 800fd66:	ec53 2b19 	vmov	r2, r3, d9
 800fd6a:	4914      	ldr	r1, [pc, #80]	; (800fdbc <_dtoa_r+0x654>)
 800fd6c:	2000      	movs	r0, #0
 800fd6e:	f7f0 fa8b 	bl	8000288 <__aeabi_dsub>
 800fd72:	4602      	mov	r2, r0
 800fd74:	460b      	mov	r3, r1
 800fd76:	4640      	mov	r0, r8
 800fd78:	4649      	mov	r1, r9
 800fd7a:	f7f0 feaf 	bl	8000adc <__aeabi_dcmplt>
 800fd7e:	2800      	cmp	r0, #0
 800fd80:	f43f af2f 	beq.w	800fbe2 <_dtoa_r+0x47a>
 800fd84:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fd86:	1e6b      	subs	r3, r5, #1
 800fd88:	930f      	str	r3, [sp, #60]	; 0x3c
 800fd8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fd8e:	2b30      	cmp	r3, #48	; 0x30
 800fd90:	d0f8      	beq.n	800fd84 <_dtoa_r+0x61c>
 800fd92:	46bb      	mov	fp, r7
 800fd94:	e04a      	b.n	800fe2c <_dtoa_r+0x6c4>
 800fd96:	4b06      	ldr	r3, [pc, #24]	; (800fdb0 <_dtoa_r+0x648>)
 800fd98:	f7f0 fc2e 	bl	80005f8 <__aeabi_dmul>
 800fd9c:	4680      	mov	r8, r0
 800fd9e:	4689      	mov	r9, r1
 800fda0:	e7bd      	b.n	800fd1e <_dtoa_r+0x5b6>
 800fda2:	bf00      	nop
 800fda4:	08011ed8 	.word	0x08011ed8
 800fda8:	08011eb0 	.word	0x08011eb0
 800fdac:	3ff00000 	.word	0x3ff00000
 800fdb0:	40240000 	.word	0x40240000
 800fdb4:	401c0000 	.word	0x401c0000
 800fdb8:	40140000 	.word	0x40140000
 800fdbc:	3fe00000 	.word	0x3fe00000
 800fdc0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fdc4:	9d00      	ldr	r5, [sp, #0]
 800fdc6:	4642      	mov	r2, r8
 800fdc8:	464b      	mov	r3, r9
 800fdca:	4630      	mov	r0, r6
 800fdcc:	4639      	mov	r1, r7
 800fdce:	f7f0 fd3d 	bl	800084c <__aeabi_ddiv>
 800fdd2:	f7f0 fec1 	bl	8000b58 <__aeabi_d2iz>
 800fdd6:	9001      	str	r0, [sp, #4]
 800fdd8:	f7f0 fba4 	bl	8000524 <__aeabi_i2d>
 800fddc:	4642      	mov	r2, r8
 800fdde:	464b      	mov	r3, r9
 800fde0:	f7f0 fc0a 	bl	80005f8 <__aeabi_dmul>
 800fde4:	4602      	mov	r2, r0
 800fde6:	460b      	mov	r3, r1
 800fde8:	4630      	mov	r0, r6
 800fdea:	4639      	mov	r1, r7
 800fdec:	f7f0 fa4c 	bl	8000288 <__aeabi_dsub>
 800fdf0:	9e01      	ldr	r6, [sp, #4]
 800fdf2:	9f04      	ldr	r7, [sp, #16]
 800fdf4:	3630      	adds	r6, #48	; 0x30
 800fdf6:	f805 6b01 	strb.w	r6, [r5], #1
 800fdfa:	9e00      	ldr	r6, [sp, #0]
 800fdfc:	1bae      	subs	r6, r5, r6
 800fdfe:	42b7      	cmp	r7, r6
 800fe00:	4602      	mov	r2, r0
 800fe02:	460b      	mov	r3, r1
 800fe04:	d134      	bne.n	800fe70 <_dtoa_r+0x708>
 800fe06:	f7f0 fa41 	bl	800028c <__adddf3>
 800fe0a:	4642      	mov	r2, r8
 800fe0c:	464b      	mov	r3, r9
 800fe0e:	4606      	mov	r6, r0
 800fe10:	460f      	mov	r7, r1
 800fe12:	f7f0 fe81 	bl	8000b18 <__aeabi_dcmpgt>
 800fe16:	b9c8      	cbnz	r0, 800fe4c <_dtoa_r+0x6e4>
 800fe18:	4642      	mov	r2, r8
 800fe1a:	464b      	mov	r3, r9
 800fe1c:	4630      	mov	r0, r6
 800fe1e:	4639      	mov	r1, r7
 800fe20:	f7f0 fe52 	bl	8000ac8 <__aeabi_dcmpeq>
 800fe24:	b110      	cbz	r0, 800fe2c <_dtoa_r+0x6c4>
 800fe26:	9b01      	ldr	r3, [sp, #4]
 800fe28:	07db      	lsls	r3, r3, #31
 800fe2a:	d40f      	bmi.n	800fe4c <_dtoa_r+0x6e4>
 800fe2c:	4651      	mov	r1, sl
 800fe2e:	4620      	mov	r0, r4
 800fe30:	f000 fbcc 	bl	80105cc <_Bfree>
 800fe34:	2300      	movs	r3, #0
 800fe36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fe38:	702b      	strb	r3, [r5, #0]
 800fe3a:	f10b 0301 	add.w	r3, fp, #1
 800fe3e:	6013      	str	r3, [r2, #0]
 800fe40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	f43f ace2 	beq.w	800f80c <_dtoa_r+0xa4>
 800fe48:	601d      	str	r5, [r3, #0]
 800fe4a:	e4df      	b.n	800f80c <_dtoa_r+0xa4>
 800fe4c:	465f      	mov	r7, fp
 800fe4e:	462b      	mov	r3, r5
 800fe50:	461d      	mov	r5, r3
 800fe52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fe56:	2a39      	cmp	r2, #57	; 0x39
 800fe58:	d106      	bne.n	800fe68 <_dtoa_r+0x700>
 800fe5a:	9a00      	ldr	r2, [sp, #0]
 800fe5c:	429a      	cmp	r2, r3
 800fe5e:	d1f7      	bne.n	800fe50 <_dtoa_r+0x6e8>
 800fe60:	9900      	ldr	r1, [sp, #0]
 800fe62:	2230      	movs	r2, #48	; 0x30
 800fe64:	3701      	adds	r7, #1
 800fe66:	700a      	strb	r2, [r1, #0]
 800fe68:	781a      	ldrb	r2, [r3, #0]
 800fe6a:	3201      	adds	r2, #1
 800fe6c:	701a      	strb	r2, [r3, #0]
 800fe6e:	e790      	b.n	800fd92 <_dtoa_r+0x62a>
 800fe70:	4ba3      	ldr	r3, [pc, #652]	; (8010100 <_dtoa_r+0x998>)
 800fe72:	2200      	movs	r2, #0
 800fe74:	f7f0 fbc0 	bl	80005f8 <__aeabi_dmul>
 800fe78:	2200      	movs	r2, #0
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	4606      	mov	r6, r0
 800fe7e:	460f      	mov	r7, r1
 800fe80:	f7f0 fe22 	bl	8000ac8 <__aeabi_dcmpeq>
 800fe84:	2800      	cmp	r0, #0
 800fe86:	d09e      	beq.n	800fdc6 <_dtoa_r+0x65e>
 800fe88:	e7d0      	b.n	800fe2c <_dtoa_r+0x6c4>
 800fe8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe8c:	2a00      	cmp	r2, #0
 800fe8e:	f000 80ca 	beq.w	8010026 <_dtoa_r+0x8be>
 800fe92:	9a07      	ldr	r2, [sp, #28]
 800fe94:	2a01      	cmp	r2, #1
 800fe96:	f300 80ad 	bgt.w	800fff4 <_dtoa_r+0x88c>
 800fe9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fe9c:	2a00      	cmp	r2, #0
 800fe9e:	f000 80a5 	beq.w	800ffec <_dtoa_r+0x884>
 800fea2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fea6:	9e08      	ldr	r6, [sp, #32]
 800fea8:	9d05      	ldr	r5, [sp, #20]
 800feaa:	9a05      	ldr	r2, [sp, #20]
 800feac:	441a      	add	r2, r3
 800feae:	9205      	str	r2, [sp, #20]
 800feb0:	9a06      	ldr	r2, [sp, #24]
 800feb2:	2101      	movs	r1, #1
 800feb4:	441a      	add	r2, r3
 800feb6:	4620      	mov	r0, r4
 800feb8:	9206      	str	r2, [sp, #24]
 800feba:	f000 fc3d 	bl	8010738 <__i2b>
 800febe:	4607      	mov	r7, r0
 800fec0:	b165      	cbz	r5, 800fedc <_dtoa_r+0x774>
 800fec2:	9b06      	ldr	r3, [sp, #24]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	dd09      	ble.n	800fedc <_dtoa_r+0x774>
 800fec8:	42ab      	cmp	r3, r5
 800feca:	9a05      	ldr	r2, [sp, #20]
 800fecc:	bfa8      	it	ge
 800fece:	462b      	movge	r3, r5
 800fed0:	1ad2      	subs	r2, r2, r3
 800fed2:	9205      	str	r2, [sp, #20]
 800fed4:	9a06      	ldr	r2, [sp, #24]
 800fed6:	1aed      	subs	r5, r5, r3
 800fed8:	1ad3      	subs	r3, r2, r3
 800feda:	9306      	str	r3, [sp, #24]
 800fedc:	9b08      	ldr	r3, [sp, #32]
 800fede:	b1f3      	cbz	r3, 800ff1e <_dtoa_r+0x7b6>
 800fee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	f000 80a3 	beq.w	801002e <_dtoa_r+0x8c6>
 800fee8:	2e00      	cmp	r6, #0
 800feea:	dd10      	ble.n	800ff0e <_dtoa_r+0x7a6>
 800feec:	4639      	mov	r1, r7
 800feee:	4632      	mov	r2, r6
 800fef0:	4620      	mov	r0, r4
 800fef2:	f000 fce1 	bl	80108b8 <__pow5mult>
 800fef6:	4652      	mov	r2, sl
 800fef8:	4601      	mov	r1, r0
 800fefa:	4607      	mov	r7, r0
 800fefc:	4620      	mov	r0, r4
 800fefe:	f000 fc31 	bl	8010764 <__multiply>
 800ff02:	4651      	mov	r1, sl
 800ff04:	4680      	mov	r8, r0
 800ff06:	4620      	mov	r0, r4
 800ff08:	f000 fb60 	bl	80105cc <_Bfree>
 800ff0c:	46c2      	mov	sl, r8
 800ff0e:	9b08      	ldr	r3, [sp, #32]
 800ff10:	1b9a      	subs	r2, r3, r6
 800ff12:	d004      	beq.n	800ff1e <_dtoa_r+0x7b6>
 800ff14:	4651      	mov	r1, sl
 800ff16:	4620      	mov	r0, r4
 800ff18:	f000 fcce 	bl	80108b8 <__pow5mult>
 800ff1c:	4682      	mov	sl, r0
 800ff1e:	2101      	movs	r1, #1
 800ff20:	4620      	mov	r0, r4
 800ff22:	f000 fc09 	bl	8010738 <__i2b>
 800ff26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	4606      	mov	r6, r0
 800ff2c:	f340 8081 	ble.w	8010032 <_dtoa_r+0x8ca>
 800ff30:	461a      	mov	r2, r3
 800ff32:	4601      	mov	r1, r0
 800ff34:	4620      	mov	r0, r4
 800ff36:	f000 fcbf 	bl	80108b8 <__pow5mult>
 800ff3a:	9b07      	ldr	r3, [sp, #28]
 800ff3c:	2b01      	cmp	r3, #1
 800ff3e:	4606      	mov	r6, r0
 800ff40:	dd7a      	ble.n	8010038 <_dtoa_r+0x8d0>
 800ff42:	f04f 0800 	mov.w	r8, #0
 800ff46:	6933      	ldr	r3, [r6, #16]
 800ff48:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ff4c:	6918      	ldr	r0, [r3, #16]
 800ff4e:	f000 fba5 	bl	801069c <__hi0bits>
 800ff52:	f1c0 0020 	rsb	r0, r0, #32
 800ff56:	9b06      	ldr	r3, [sp, #24]
 800ff58:	4418      	add	r0, r3
 800ff5a:	f010 001f 	ands.w	r0, r0, #31
 800ff5e:	f000 8094 	beq.w	801008a <_dtoa_r+0x922>
 800ff62:	f1c0 0320 	rsb	r3, r0, #32
 800ff66:	2b04      	cmp	r3, #4
 800ff68:	f340 8085 	ble.w	8010076 <_dtoa_r+0x90e>
 800ff6c:	9b05      	ldr	r3, [sp, #20]
 800ff6e:	f1c0 001c 	rsb	r0, r0, #28
 800ff72:	4403      	add	r3, r0
 800ff74:	9305      	str	r3, [sp, #20]
 800ff76:	9b06      	ldr	r3, [sp, #24]
 800ff78:	4403      	add	r3, r0
 800ff7a:	4405      	add	r5, r0
 800ff7c:	9306      	str	r3, [sp, #24]
 800ff7e:	9b05      	ldr	r3, [sp, #20]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	dd05      	ble.n	800ff90 <_dtoa_r+0x828>
 800ff84:	4651      	mov	r1, sl
 800ff86:	461a      	mov	r2, r3
 800ff88:	4620      	mov	r0, r4
 800ff8a:	f000 fcef 	bl	801096c <__lshift>
 800ff8e:	4682      	mov	sl, r0
 800ff90:	9b06      	ldr	r3, [sp, #24]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	dd05      	ble.n	800ffa2 <_dtoa_r+0x83a>
 800ff96:	4631      	mov	r1, r6
 800ff98:	461a      	mov	r2, r3
 800ff9a:	4620      	mov	r0, r4
 800ff9c:	f000 fce6 	bl	801096c <__lshift>
 800ffa0:	4606      	mov	r6, r0
 800ffa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d072      	beq.n	801008e <_dtoa_r+0x926>
 800ffa8:	4631      	mov	r1, r6
 800ffaa:	4650      	mov	r0, sl
 800ffac:	f000 fd4a 	bl	8010a44 <__mcmp>
 800ffb0:	2800      	cmp	r0, #0
 800ffb2:	da6c      	bge.n	801008e <_dtoa_r+0x926>
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	4651      	mov	r1, sl
 800ffb8:	220a      	movs	r2, #10
 800ffba:	4620      	mov	r0, r4
 800ffbc:	f000 fb28 	bl	8010610 <__multadd>
 800ffc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ffc6:	4682      	mov	sl, r0
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	f000 81b0 	beq.w	801032e <_dtoa_r+0xbc6>
 800ffce:	2300      	movs	r3, #0
 800ffd0:	4639      	mov	r1, r7
 800ffd2:	220a      	movs	r2, #10
 800ffd4:	4620      	mov	r0, r4
 800ffd6:	f000 fb1b 	bl	8010610 <__multadd>
 800ffda:	9b01      	ldr	r3, [sp, #4]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	4607      	mov	r7, r0
 800ffe0:	f300 8096 	bgt.w	8010110 <_dtoa_r+0x9a8>
 800ffe4:	9b07      	ldr	r3, [sp, #28]
 800ffe6:	2b02      	cmp	r3, #2
 800ffe8:	dc59      	bgt.n	801009e <_dtoa_r+0x936>
 800ffea:	e091      	b.n	8010110 <_dtoa_r+0x9a8>
 800ffec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ffee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fff2:	e758      	b.n	800fea6 <_dtoa_r+0x73e>
 800fff4:	9b04      	ldr	r3, [sp, #16]
 800fff6:	1e5e      	subs	r6, r3, #1
 800fff8:	9b08      	ldr	r3, [sp, #32]
 800fffa:	42b3      	cmp	r3, r6
 800fffc:	bfbf      	itttt	lt
 800fffe:	9b08      	ldrlt	r3, [sp, #32]
 8010000:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8010002:	9608      	strlt	r6, [sp, #32]
 8010004:	1af3      	sublt	r3, r6, r3
 8010006:	bfb4      	ite	lt
 8010008:	18d2      	addlt	r2, r2, r3
 801000a:	1b9e      	subge	r6, r3, r6
 801000c:	9b04      	ldr	r3, [sp, #16]
 801000e:	bfbc      	itt	lt
 8010010:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8010012:	2600      	movlt	r6, #0
 8010014:	2b00      	cmp	r3, #0
 8010016:	bfb7      	itett	lt
 8010018:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801001c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010020:	1a9d      	sublt	r5, r3, r2
 8010022:	2300      	movlt	r3, #0
 8010024:	e741      	b.n	800feaa <_dtoa_r+0x742>
 8010026:	9e08      	ldr	r6, [sp, #32]
 8010028:	9d05      	ldr	r5, [sp, #20]
 801002a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801002c:	e748      	b.n	800fec0 <_dtoa_r+0x758>
 801002e:	9a08      	ldr	r2, [sp, #32]
 8010030:	e770      	b.n	800ff14 <_dtoa_r+0x7ac>
 8010032:	9b07      	ldr	r3, [sp, #28]
 8010034:	2b01      	cmp	r3, #1
 8010036:	dc19      	bgt.n	801006c <_dtoa_r+0x904>
 8010038:	9b02      	ldr	r3, [sp, #8]
 801003a:	b9bb      	cbnz	r3, 801006c <_dtoa_r+0x904>
 801003c:	9b03      	ldr	r3, [sp, #12]
 801003e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010042:	b99b      	cbnz	r3, 801006c <_dtoa_r+0x904>
 8010044:	9b03      	ldr	r3, [sp, #12]
 8010046:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801004a:	0d1b      	lsrs	r3, r3, #20
 801004c:	051b      	lsls	r3, r3, #20
 801004e:	b183      	cbz	r3, 8010072 <_dtoa_r+0x90a>
 8010050:	9b05      	ldr	r3, [sp, #20]
 8010052:	3301      	adds	r3, #1
 8010054:	9305      	str	r3, [sp, #20]
 8010056:	9b06      	ldr	r3, [sp, #24]
 8010058:	3301      	adds	r3, #1
 801005a:	9306      	str	r3, [sp, #24]
 801005c:	f04f 0801 	mov.w	r8, #1
 8010060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010062:	2b00      	cmp	r3, #0
 8010064:	f47f af6f 	bne.w	800ff46 <_dtoa_r+0x7de>
 8010068:	2001      	movs	r0, #1
 801006a:	e774      	b.n	800ff56 <_dtoa_r+0x7ee>
 801006c:	f04f 0800 	mov.w	r8, #0
 8010070:	e7f6      	b.n	8010060 <_dtoa_r+0x8f8>
 8010072:	4698      	mov	r8, r3
 8010074:	e7f4      	b.n	8010060 <_dtoa_r+0x8f8>
 8010076:	d082      	beq.n	800ff7e <_dtoa_r+0x816>
 8010078:	9a05      	ldr	r2, [sp, #20]
 801007a:	331c      	adds	r3, #28
 801007c:	441a      	add	r2, r3
 801007e:	9205      	str	r2, [sp, #20]
 8010080:	9a06      	ldr	r2, [sp, #24]
 8010082:	441a      	add	r2, r3
 8010084:	441d      	add	r5, r3
 8010086:	9206      	str	r2, [sp, #24]
 8010088:	e779      	b.n	800ff7e <_dtoa_r+0x816>
 801008a:	4603      	mov	r3, r0
 801008c:	e7f4      	b.n	8010078 <_dtoa_r+0x910>
 801008e:	9b04      	ldr	r3, [sp, #16]
 8010090:	2b00      	cmp	r3, #0
 8010092:	dc37      	bgt.n	8010104 <_dtoa_r+0x99c>
 8010094:	9b07      	ldr	r3, [sp, #28]
 8010096:	2b02      	cmp	r3, #2
 8010098:	dd34      	ble.n	8010104 <_dtoa_r+0x99c>
 801009a:	9b04      	ldr	r3, [sp, #16]
 801009c:	9301      	str	r3, [sp, #4]
 801009e:	9b01      	ldr	r3, [sp, #4]
 80100a0:	b963      	cbnz	r3, 80100bc <_dtoa_r+0x954>
 80100a2:	4631      	mov	r1, r6
 80100a4:	2205      	movs	r2, #5
 80100a6:	4620      	mov	r0, r4
 80100a8:	f000 fab2 	bl	8010610 <__multadd>
 80100ac:	4601      	mov	r1, r0
 80100ae:	4606      	mov	r6, r0
 80100b0:	4650      	mov	r0, sl
 80100b2:	f000 fcc7 	bl	8010a44 <__mcmp>
 80100b6:	2800      	cmp	r0, #0
 80100b8:	f73f adbb 	bgt.w	800fc32 <_dtoa_r+0x4ca>
 80100bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100be:	9d00      	ldr	r5, [sp, #0]
 80100c0:	ea6f 0b03 	mvn.w	fp, r3
 80100c4:	f04f 0800 	mov.w	r8, #0
 80100c8:	4631      	mov	r1, r6
 80100ca:	4620      	mov	r0, r4
 80100cc:	f000 fa7e 	bl	80105cc <_Bfree>
 80100d0:	2f00      	cmp	r7, #0
 80100d2:	f43f aeab 	beq.w	800fe2c <_dtoa_r+0x6c4>
 80100d6:	f1b8 0f00 	cmp.w	r8, #0
 80100da:	d005      	beq.n	80100e8 <_dtoa_r+0x980>
 80100dc:	45b8      	cmp	r8, r7
 80100de:	d003      	beq.n	80100e8 <_dtoa_r+0x980>
 80100e0:	4641      	mov	r1, r8
 80100e2:	4620      	mov	r0, r4
 80100e4:	f000 fa72 	bl	80105cc <_Bfree>
 80100e8:	4639      	mov	r1, r7
 80100ea:	4620      	mov	r0, r4
 80100ec:	f000 fa6e 	bl	80105cc <_Bfree>
 80100f0:	e69c      	b.n	800fe2c <_dtoa_r+0x6c4>
 80100f2:	2600      	movs	r6, #0
 80100f4:	4637      	mov	r7, r6
 80100f6:	e7e1      	b.n	80100bc <_dtoa_r+0x954>
 80100f8:	46bb      	mov	fp, r7
 80100fa:	4637      	mov	r7, r6
 80100fc:	e599      	b.n	800fc32 <_dtoa_r+0x4ca>
 80100fe:	bf00      	nop
 8010100:	40240000 	.word	0x40240000
 8010104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010106:	2b00      	cmp	r3, #0
 8010108:	f000 80c8 	beq.w	801029c <_dtoa_r+0xb34>
 801010c:	9b04      	ldr	r3, [sp, #16]
 801010e:	9301      	str	r3, [sp, #4]
 8010110:	2d00      	cmp	r5, #0
 8010112:	dd05      	ble.n	8010120 <_dtoa_r+0x9b8>
 8010114:	4639      	mov	r1, r7
 8010116:	462a      	mov	r2, r5
 8010118:	4620      	mov	r0, r4
 801011a:	f000 fc27 	bl	801096c <__lshift>
 801011e:	4607      	mov	r7, r0
 8010120:	f1b8 0f00 	cmp.w	r8, #0
 8010124:	d05b      	beq.n	80101de <_dtoa_r+0xa76>
 8010126:	6879      	ldr	r1, [r7, #4]
 8010128:	4620      	mov	r0, r4
 801012a:	f000 fa0f 	bl	801054c <_Balloc>
 801012e:	4605      	mov	r5, r0
 8010130:	b928      	cbnz	r0, 801013e <_dtoa_r+0x9d6>
 8010132:	4b83      	ldr	r3, [pc, #524]	; (8010340 <_dtoa_r+0xbd8>)
 8010134:	4602      	mov	r2, r0
 8010136:	f240 21ef 	movw	r1, #751	; 0x2ef
 801013a:	f7ff bb2e 	b.w	800f79a <_dtoa_r+0x32>
 801013e:	693a      	ldr	r2, [r7, #16]
 8010140:	3202      	adds	r2, #2
 8010142:	0092      	lsls	r2, r2, #2
 8010144:	f107 010c 	add.w	r1, r7, #12
 8010148:	300c      	adds	r0, #12
 801014a:	f7ff fa77 	bl	800f63c <memcpy>
 801014e:	2201      	movs	r2, #1
 8010150:	4629      	mov	r1, r5
 8010152:	4620      	mov	r0, r4
 8010154:	f000 fc0a 	bl	801096c <__lshift>
 8010158:	9b00      	ldr	r3, [sp, #0]
 801015a:	3301      	adds	r3, #1
 801015c:	9304      	str	r3, [sp, #16]
 801015e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010162:	4413      	add	r3, r2
 8010164:	9308      	str	r3, [sp, #32]
 8010166:	9b02      	ldr	r3, [sp, #8]
 8010168:	f003 0301 	and.w	r3, r3, #1
 801016c:	46b8      	mov	r8, r7
 801016e:	9306      	str	r3, [sp, #24]
 8010170:	4607      	mov	r7, r0
 8010172:	9b04      	ldr	r3, [sp, #16]
 8010174:	4631      	mov	r1, r6
 8010176:	3b01      	subs	r3, #1
 8010178:	4650      	mov	r0, sl
 801017a:	9301      	str	r3, [sp, #4]
 801017c:	f7ff fa6c 	bl	800f658 <quorem>
 8010180:	4641      	mov	r1, r8
 8010182:	9002      	str	r0, [sp, #8]
 8010184:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010188:	4650      	mov	r0, sl
 801018a:	f000 fc5b 	bl	8010a44 <__mcmp>
 801018e:	463a      	mov	r2, r7
 8010190:	9005      	str	r0, [sp, #20]
 8010192:	4631      	mov	r1, r6
 8010194:	4620      	mov	r0, r4
 8010196:	f000 fc71 	bl	8010a7c <__mdiff>
 801019a:	68c2      	ldr	r2, [r0, #12]
 801019c:	4605      	mov	r5, r0
 801019e:	bb02      	cbnz	r2, 80101e2 <_dtoa_r+0xa7a>
 80101a0:	4601      	mov	r1, r0
 80101a2:	4650      	mov	r0, sl
 80101a4:	f000 fc4e 	bl	8010a44 <__mcmp>
 80101a8:	4602      	mov	r2, r0
 80101aa:	4629      	mov	r1, r5
 80101ac:	4620      	mov	r0, r4
 80101ae:	9209      	str	r2, [sp, #36]	; 0x24
 80101b0:	f000 fa0c 	bl	80105cc <_Bfree>
 80101b4:	9b07      	ldr	r3, [sp, #28]
 80101b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80101b8:	9d04      	ldr	r5, [sp, #16]
 80101ba:	ea43 0102 	orr.w	r1, r3, r2
 80101be:	9b06      	ldr	r3, [sp, #24]
 80101c0:	4319      	orrs	r1, r3
 80101c2:	d110      	bne.n	80101e6 <_dtoa_r+0xa7e>
 80101c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80101c8:	d029      	beq.n	801021e <_dtoa_r+0xab6>
 80101ca:	9b05      	ldr	r3, [sp, #20]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	dd02      	ble.n	80101d6 <_dtoa_r+0xa6e>
 80101d0:	9b02      	ldr	r3, [sp, #8]
 80101d2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80101d6:	9b01      	ldr	r3, [sp, #4]
 80101d8:	f883 9000 	strb.w	r9, [r3]
 80101dc:	e774      	b.n	80100c8 <_dtoa_r+0x960>
 80101de:	4638      	mov	r0, r7
 80101e0:	e7ba      	b.n	8010158 <_dtoa_r+0x9f0>
 80101e2:	2201      	movs	r2, #1
 80101e4:	e7e1      	b.n	80101aa <_dtoa_r+0xa42>
 80101e6:	9b05      	ldr	r3, [sp, #20]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	db04      	blt.n	80101f6 <_dtoa_r+0xa8e>
 80101ec:	9907      	ldr	r1, [sp, #28]
 80101ee:	430b      	orrs	r3, r1
 80101f0:	9906      	ldr	r1, [sp, #24]
 80101f2:	430b      	orrs	r3, r1
 80101f4:	d120      	bne.n	8010238 <_dtoa_r+0xad0>
 80101f6:	2a00      	cmp	r2, #0
 80101f8:	dded      	ble.n	80101d6 <_dtoa_r+0xa6e>
 80101fa:	4651      	mov	r1, sl
 80101fc:	2201      	movs	r2, #1
 80101fe:	4620      	mov	r0, r4
 8010200:	f000 fbb4 	bl	801096c <__lshift>
 8010204:	4631      	mov	r1, r6
 8010206:	4682      	mov	sl, r0
 8010208:	f000 fc1c 	bl	8010a44 <__mcmp>
 801020c:	2800      	cmp	r0, #0
 801020e:	dc03      	bgt.n	8010218 <_dtoa_r+0xab0>
 8010210:	d1e1      	bne.n	80101d6 <_dtoa_r+0xa6e>
 8010212:	f019 0f01 	tst.w	r9, #1
 8010216:	d0de      	beq.n	80101d6 <_dtoa_r+0xa6e>
 8010218:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801021c:	d1d8      	bne.n	80101d0 <_dtoa_r+0xa68>
 801021e:	9a01      	ldr	r2, [sp, #4]
 8010220:	2339      	movs	r3, #57	; 0x39
 8010222:	7013      	strb	r3, [r2, #0]
 8010224:	462b      	mov	r3, r5
 8010226:	461d      	mov	r5, r3
 8010228:	3b01      	subs	r3, #1
 801022a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801022e:	2a39      	cmp	r2, #57	; 0x39
 8010230:	d06c      	beq.n	801030c <_dtoa_r+0xba4>
 8010232:	3201      	adds	r2, #1
 8010234:	701a      	strb	r2, [r3, #0]
 8010236:	e747      	b.n	80100c8 <_dtoa_r+0x960>
 8010238:	2a00      	cmp	r2, #0
 801023a:	dd07      	ble.n	801024c <_dtoa_r+0xae4>
 801023c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010240:	d0ed      	beq.n	801021e <_dtoa_r+0xab6>
 8010242:	9a01      	ldr	r2, [sp, #4]
 8010244:	f109 0301 	add.w	r3, r9, #1
 8010248:	7013      	strb	r3, [r2, #0]
 801024a:	e73d      	b.n	80100c8 <_dtoa_r+0x960>
 801024c:	9b04      	ldr	r3, [sp, #16]
 801024e:	9a08      	ldr	r2, [sp, #32]
 8010250:	f803 9c01 	strb.w	r9, [r3, #-1]
 8010254:	4293      	cmp	r3, r2
 8010256:	d043      	beq.n	80102e0 <_dtoa_r+0xb78>
 8010258:	4651      	mov	r1, sl
 801025a:	2300      	movs	r3, #0
 801025c:	220a      	movs	r2, #10
 801025e:	4620      	mov	r0, r4
 8010260:	f000 f9d6 	bl	8010610 <__multadd>
 8010264:	45b8      	cmp	r8, r7
 8010266:	4682      	mov	sl, r0
 8010268:	f04f 0300 	mov.w	r3, #0
 801026c:	f04f 020a 	mov.w	r2, #10
 8010270:	4641      	mov	r1, r8
 8010272:	4620      	mov	r0, r4
 8010274:	d107      	bne.n	8010286 <_dtoa_r+0xb1e>
 8010276:	f000 f9cb 	bl	8010610 <__multadd>
 801027a:	4680      	mov	r8, r0
 801027c:	4607      	mov	r7, r0
 801027e:	9b04      	ldr	r3, [sp, #16]
 8010280:	3301      	adds	r3, #1
 8010282:	9304      	str	r3, [sp, #16]
 8010284:	e775      	b.n	8010172 <_dtoa_r+0xa0a>
 8010286:	f000 f9c3 	bl	8010610 <__multadd>
 801028a:	4639      	mov	r1, r7
 801028c:	4680      	mov	r8, r0
 801028e:	2300      	movs	r3, #0
 8010290:	220a      	movs	r2, #10
 8010292:	4620      	mov	r0, r4
 8010294:	f000 f9bc 	bl	8010610 <__multadd>
 8010298:	4607      	mov	r7, r0
 801029a:	e7f0      	b.n	801027e <_dtoa_r+0xb16>
 801029c:	9b04      	ldr	r3, [sp, #16]
 801029e:	9301      	str	r3, [sp, #4]
 80102a0:	9d00      	ldr	r5, [sp, #0]
 80102a2:	4631      	mov	r1, r6
 80102a4:	4650      	mov	r0, sl
 80102a6:	f7ff f9d7 	bl	800f658 <quorem>
 80102aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80102ae:	9b00      	ldr	r3, [sp, #0]
 80102b0:	f805 9b01 	strb.w	r9, [r5], #1
 80102b4:	1aea      	subs	r2, r5, r3
 80102b6:	9b01      	ldr	r3, [sp, #4]
 80102b8:	4293      	cmp	r3, r2
 80102ba:	dd07      	ble.n	80102cc <_dtoa_r+0xb64>
 80102bc:	4651      	mov	r1, sl
 80102be:	2300      	movs	r3, #0
 80102c0:	220a      	movs	r2, #10
 80102c2:	4620      	mov	r0, r4
 80102c4:	f000 f9a4 	bl	8010610 <__multadd>
 80102c8:	4682      	mov	sl, r0
 80102ca:	e7ea      	b.n	80102a2 <_dtoa_r+0xb3a>
 80102cc:	9b01      	ldr	r3, [sp, #4]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	bfc8      	it	gt
 80102d2:	461d      	movgt	r5, r3
 80102d4:	9b00      	ldr	r3, [sp, #0]
 80102d6:	bfd8      	it	le
 80102d8:	2501      	movle	r5, #1
 80102da:	441d      	add	r5, r3
 80102dc:	f04f 0800 	mov.w	r8, #0
 80102e0:	4651      	mov	r1, sl
 80102e2:	2201      	movs	r2, #1
 80102e4:	4620      	mov	r0, r4
 80102e6:	f000 fb41 	bl	801096c <__lshift>
 80102ea:	4631      	mov	r1, r6
 80102ec:	4682      	mov	sl, r0
 80102ee:	f000 fba9 	bl	8010a44 <__mcmp>
 80102f2:	2800      	cmp	r0, #0
 80102f4:	dc96      	bgt.n	8010224 <_dtoa_r+0xabc>
 80102f6:	d102      	bne.n	80102fe <_dtoa_r+0xb96>
 80102f8:	f019 0f01 	tst.w	r9, #1
 80102fc:	d192      	bne.n	8010224 <_dtoa_r+0xabc>
 80102fe:	462b      	mov	r3, r5
 8010300:	461d      	mov	r5, r3
 8010302:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010306:	2a30      	cmp	r2, #48	; 0x30
 8010308:	d0fa      	beq.n	8010300 <_dtoa_r+0xb98>
 801030a:	e6dd      	b.n	80100c8 <_dtoa_r+0x960>
 801030c:	9a00      	ldr	r2, [sp, #0]
 801030e:	429a      	cmp	r2, r3
 8010310:	d189      	bne.n	8010226 <_dtoa_r+0xabe>
 8010312:	f10b 0b01 	add.w	fp, fp, #1
 8010316:	2331      	movs	r3, #49	; 0x31
 8010318:	e796      	b.n	8010248 <_dtoa_r+0xae0>
 801031a:	4b0a      	ldr	r3, [pc, #40]	; (8010344 <_dtoa_r+0xbdc>)
 801031c:	f7ff ba99 	b.w	800f852 <_dtoa_r+0xea>
 8010320:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010322:	2b00      	cmp	r3, #0
 8010324:	f47f aa6d 	bne.w	800f802 <_dtoa_r+0x9a>
 8010328:	4b07      	ldr	r3, [pc, #28]	; (8010348 <_dtoa_r+0xbe0>)
 801032a:	f7ff ba92 	b.w	800f852 <_dtoa_r+0xea>
 801032e:	9b01      	ldr	r3, [sp, #4]
 8010330:	2b00      	cmp	r3, #0
 8010332:	dcb5      	bgt.n	80102a0 <_dtoa_r+0xb38>
 8010334:	9b07      	ldr	r3, [sp, #28]
 8010336:	2b02      	cmp	r3, #2
 8010338:	f73f aeb1 	bgt.w	801009e <_dtoa_r+0x936>
 801033c:	e7b0      	b.n	80102a0 <_dtoa_r+0xb38>
 801033e:	bf00      	nop
 8010340:	08011e40 	.word	0x08011e40
 8010344:	08011da0 	.word	0x08011da0
 8010348:	08011dc4 	.word	0x08011dc4

0801034c <_free_r>:
 801034c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801034e:	2900      	cmp	r1, #0
 8010350:	d044      	beq.n	80103dc <_free_r+0x90>
 8010352:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010356:	9001      	str	r0, [sp, #4]
 8010358:	2b00      	cmp	r3, #0
 801035a:	f1a1 0404 	sub.w	r4, r1, #4
 801035e:	bfb8      	it	lt
 8010360:	18e4      	addlt	r4, r4, r3
 8010362:	f000 f8e7 	bl	8010534 <__malloc_lock>
 8010366:	4a1e      	ldr	r2, [pc, #120]	; (80103e0 <_free_r+0x94>)
 8010368:	9801      	ldr	r0, [sp, #4]
 801036a:	6813      	ldr	r3, [r2, #0]
 801036c:	b933      	cbnz	r3, 801037c <_free_r+0x30>
 801036e:	6063      	str	r3, [r4, #4]
 8010370:	6014      	str	r4, [r2, #0]
 8010372:	b003      	add	sp, #12
 8010374:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010378:	f000 b8e2 	b.w	8010540 <__malloc_unlock>
 801037c:	42a3      	cmp	r3, r4
 801037e:	d908      	bls.n	8010392 <_free_r+0x46>
 8010380:	6825      	ldr	r5, [r4, #0]
 8010382:	1961      	adds	r1, r4, r5
 8010384:	428b      	cmp	r3, r1
 8010386:	bf01      	itttt	eq
 8010388:	6819      	ldreq	r1, [r3, #0]
 801038a:	685b      	ldreq	r3, [r3, #4]
 801038c:	1949      	addeq	r1, r1, r5
 801038e:	6021      	streq	r1, [r4, #0]
 8010390:	e7ed      	b.n	801036e <_free_r+0x22>
 8010392:	461a      	mov	r2, r3
 8010394:	685b      	ldr	r3, [r3, #4]
 8010396:	b10b      	cbz	r3, 801039c <_free_r+0x50>
 8010398:	42a3      	cmp	r3, r4
 801039a:	d9fa      	bls.n	8010392 <_free_r+0x46>
 801039c:	6811      	ldr	r1, [r2, #0]
 801039e:	1855      	adds	r5, r2, r1
 80103a0:	42a5      	cmp	r5, r4
 80103a2:	d10b      	bne.n	80103bc <_free_r+0x70>
 80103a4:	6824      	ldr	r4, [r4, #0]
 80103a6:	4421      	add	r1, r4
 80103a8:	1854      	adds	r4, r2, r1
 80103aa:	42a3      	cmp	r3, r4
 80103ac:	6011      	str	r1, [r2, #0]
 80103ae:	d1e0      	bne.n	8010372 <_free_r+0x26>
 80103b0:	681c      	ldr	r4, [r3, #0]
 80103b2:	685b      	ldr	r3, [r3, #4]
 80103b4:	6053      	str	r3, [r2, #4]
 80103b6:	440c      	add	r4, r1
 80103b8:	6014      	str	r4, [r2, #0]
 80103ba:	e7da      	b.n	8010372 <_free_r+0x26>
 80103bc:	d902      	bls.n	80103c4 <_free_r+0x78>
 80103be:	230c      	movs	r3, #12
 80103c0:	6003      	str	r3, [r0, #0]
 80103c2:	e7d6      	b.n	8010372 <_free_r+0x26>
 80103c4:	6825      	ldr	r5, [r4, #0]
 80103c6:	1961      	adds	r1, r4, r5
 80103c8:	428b      	cmp	r3, r1
 80103ca:	bf04      	itt	eq
 80103cc:	6819      	ldreq	r1, [r3, #0]
 80103ce:	685b      	ldreq	r3, [r3, #4]
 80103d0:	6063      	str	r3, [r4, #4]
 80103d2:	bf04      	itt	eq
 80103d4:	1949      	addeq	r1, r1, r5
 80103d6:	6021      	streq	r1, [r4, #0]
 80103d8:	6054      	str	r4, [r2, #4]
 80103da:	e7ca      	b.n	8010372 <_free_r+0x26>
 80103dc:	b003      	add	sp, #12
 80103de:	bd30      	pop	{r4, r5, pc}
 80103e0:	20005824 	.word	0x20005824

080103e4 <malloc>:
 80103e4:	4b02      	ldr	r3, [pc, #8]	; (80103f0 <malloc+0xc>)
 80103e6:	4601      	mov	r1, r0
 80103e8:	6818      	ldr	r0, [r3, #0]
 80103ea:	f000 b823 	b.w	8010434 <_malloc_r>
 80103ee:	bf00      	nop
 80103f0:	2000006c 	.word	0x2000006c

080103f4 <sbrk_aligned>:
 80103f4:	b570      	push	{r4, r5, r6, lr}
 80103f6:	4e0e      	ldr	r6, [pc, #56]	; (8010430 <sbrk_aligned+0x3c>)
 80103f8:	460c      	mov	r4, r1
 80103fa:	6831      	ldr	r1, [r6, #0]
 80103fc:	4605      	mov	r5, r0
 80103fe:	b911      	cbnz	r1, 8010406 <sbrk_aligned+0x12>
 8010400:	f000 fe96 	bl	8011130 <_sbrk_r>
 8010404:	6030      	str	r0, [r6, #0]
 8010406:	4621      	mov	r1, r4
 8010408:	4628      	mov	r0, r5
 801040a:	f000 fe91 	bl	8011130 <_sbrk_r>
 801040e:	1c43      	adds	r3, r0, #1
 8010410:	d00a      	beq.n	8010428 <sbrk_aligned+0x34>
 8010412:	1cc4      	adds	r4, r0, #3
 8010414:	f024 0403 	bic.w	r4, r4, #3
 8010418:	42a0      	cmp	r0, r4
 801041a:	d007      	beq.n	801042c <sbrk_aligned+0x38>
 801041c:	1a21      	subs	r1, r4, r0
 801041e:	4628      	mov	r0, r5
 8010420:	f000 fe86 	bl	8011130 <_sbrk_r>
 8010424:	3001      	adds	r0, #1
 8010426:	d101      	bne.n	801042c <sbrk_aligned+0x38>
 8010428:	f04f 34ff 	mov.w	r4, #4294967295
 801042c:	4620      	mov	r0, r4
 801042e:	bd70      	pop	{r4, r5, r6, pc}
 8010430:	20005828 	.word	0x20005828

08010434 <_malloc_r>:
 8010434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010438:	1ccd      	adds	r5, r1, #3
 801043a:	f025 0503 	bic.w	r5, r5, #3
 801043e:	3508      	adds	r5, #8
 8010440:	2d0c      	cmp	r5, #12
 8010442:	bf38      	it	cc
 8010444:	250c      	movcc	r5, #12
 8010446:	2d00      	cmp	r5, #0
 8010448:	4607      	mov	r7, r0
 801044a:	db01      	blt.n	8010450 <_malloc_r+0x1c>
 801044c:	42a9      	cmp	r1, r5
 801044e:	d905      	bls.n	801045c <_malloc_r+0x28>
 8010450:	230c      	movs	r3, #12
 8010452:	603b      	str	r3, [r7, #0]
 8010454:	2600      	movs	r6, #0
 8010456:	4630      	mov	r0, r6
 8010458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801045c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010530 <_malloc_r+0xfc>
 8010460:	f000 f868 	bl	8010534 <__malloc_lock>
 8010464:	f8d8 3000 	ldr.w	r3, [r8]
 8010468:	461c      	mov	r4, r3
 801046a:	bb5c      	cbnz	r4, 80104c4 <_malloc_r+0x90>
 801046c:	4629      	mov	r1, r5
 801046e:	4638      	mov	r0, r7
 8010470:	f7ff ffc0 	bl	80103f4 <sbrk_aligned>
 8010474:	1c43      	adds	r3, r0, #1
 8010476:	4604      	mov	r4, r0
 8010478:	d155      	bne.n	8010526 <_malloc_r+0xf2>
 801047a:	f8d8 4000 	ldr.w	r4, [r8]
 801047e:	4626      	mov	r6, r4
 8010480:	2e00      	cmp	r6, #0
 8010482:	d145      	bne.n	8010510 <_malloc_r+0xdc>
 8010484:	2c00      	cmp	r4, #0
 8010486:	d048      	beq.n	801051a <_malloc_r+0xe6>
 8010488:	6823      	ldr	r3, [r4, #0]
 801048a:	4631      	mov	r1, r6
 801048c:	4638      	mov	r0, r7
 801048e:	eb04 0903 	add.w	r9, r4, r3
 8010492:	f000 fe4d 	bl	8011130 <_sbrk_r>
 8010496:	4581      	cmp	r9, r0
 8010498:	d13f      	bne.n	801051a <_malloc_r+0xe6>
 801049a:	6821      	ldr	r1, [r4, #0]
 801049c:	1a6d      	subs	r5, r5, r1
 801049e:	4629      	mov	r1, r5
 80104a0:	4638      	mov	r0, r7
 80104a2:	f7ff ffa7 	bl	80103f4 <sbrk_aligned>
 80104a6:	3001      	adds	r0, #1
 80104a8:	d037      	beq.n	801051a <_malloc_r+0xe6>
 80104aa:	6823      	ldr	r3, [r4, #0]
 80104ac:	442b      	add	r3, r5
 80104ae:	6023      	str	r3, [r4, #0]
 80104b0:	f8d8 3000 	ldr.w	r3, [r8]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d038      	beq.n	801052a <_malloc_r+0xf6>
 80104b8:	685a      	ldr	r2, [r3, #4]
 80104ba:	42a2      	cmp	r2, r4
 80104bc:	d12b      	bne.n	8010516 <_malloc_r+0xe2>
 80104be:	2200      	movs	r2, #0
 80104c0:	605a      	str	r2, [r3, #4]
 80104c2:	e00f      	b.n	80104e4 <_malloc_r+0xb0>
 80104c4:	6822      	ldr	r2, [r4, #0]
 80104c6:	1b52      	subs	r2, r2, r5
 80104c8:	d41f      	bmi.n	801050a <_malloc_r+0xd6>
 80104ca:	2a0b      	cmp	r2, #11
 80104cc:	d917      	bls.n	80104fe <_malloc_r+0xca>
 80104ce:	1961      	adds	r1, r4, r5
 80104d0:	42a3      	cmp	r3, r4
 80104d2:	6025      	str	r5, [r4, #0]
 80104d4:	bf18      	it	ne
 80104d6:	6059      	strne	r1, [r3, #4]
 80104d8:	6863      	ldr	r3, [r4, #4]
 80104da:	bf08      	it	eq
 80104dc:	f8c8 1000 	streq.w	r1, [r8]
 80104e0:	5162      	str	r2, [r4, r5]
 80104e2:	604b      	str	r3, [r1, #4]
 80104e4:	4638      	mov	r0, r7
 80104e6:	f104 060b 	add.w	r6, r4, #11
 80104ea:	f000 f829 	bl	8010540 <__malloc_unlock>
 80104ee:	f026 0607 	bic.w	r6, r6, #7
 80104f2:	1d23      	adds	r3, r4, #4
 80104f4:	1af2      	subs	r2, r6, r3
 80104f6:	d0ae      	beq.n	8010456 <_malloc_r+0x22>
 80104f8:	1b9b      	subs	r3, r3, r6
 80104fa:	50a3      	str	r3, [r4, r2]
 80104fc:	e7ab      	b.n	8010456 <_malloc_r+0x22>
 80104fe:	42a3      	cmp	r3, r4
 8010500:	6862      	ldr	r2, [r4, #4]
 8010502:	d1dd      	bne.n	80104c0 <_malloc_r+0x8c>
 8010504:	f8c8 2000 	str.w	r2, [r8]
 8010508:	e7ec      	b.n	80104e4 <_malloc_r+0xb0>
 801050a:	4623      	mov	r3, r4
 801050c:	6864      	ldr	r4, [r4, #4]
 801050e:	e7ac      	b.n	801046a <_malloc_r+0x36>
 8010510:	4634      	mov	r4, r6
 8010512:	6876      	ldr	r6, [r6, #4]
 8010514:	e7b4      	b.n	8010480 <_malloc_r+0x4c>
 8010516:	4613      	mov	r3, r2
 8010518:	e7cc      	b.n	80104b4 <_malloc_r+0x80>
 801051a:	230c      	movs	r3, #12
 801051c:	603b      	str	r3, [r7, #0]
 801051e:	4638      	mov	r0, r7
 8010520:	f000 f80e 	bl	8010540 <__malloc_unlock>
 8010524:	e797      	b.n	8010456 <_malloc_r+0x22>
 8010526:	6025      	str	r5, [r4, #0]
 8010528:	e7dc      	b.n	80104e4 <_malloc_r+0xb0>
 801052a:	605b      	str	r3, [r3, #4]
 801052c:	deff      	udf	#255	; 0xff
 801052e:	bf00      	nop
 8010530:	20005824 	.word	0x20005824

08010534 <__malloc_lock>:
 8010534:	4801      	ldr	r0, [pc, #4]	; (801053c <__malloc_lock+0x8>)
 8010536:	f7ff b87f 	b.w	800f638 <__retarget_lock_acquire_recursive>
 801053a:	bf00      	nop
 801053c:	20005820 	.word	0x20005820

08010540 <__malloc_unlock>:
 8010540:	4801      	ldr	r0, [pc, #4]	; (8010548 <__malloc_unlock+0x8>)
 8010542:	f7ff b87a 	b.w	800f63a <__retarget_lock_release_recursive>
 8010546:	bf00      	nop
 8010548:	20005820 	.word	0x20005820

0801054c <_Balloc>:
 801054c:	b570      	push	{r4, r5, r6, lr}
 801054e:	69c6      	ldr	r6, [r0, #28]
 8010550:	4604      	mov	r4, r0
 8010552:	460d      	mov	r5, r1
 8010554:	b976      	cbnz	r6, 8010574 <_Balloc+0x28>
 8010556:	2010      	movs	r0, #16
 8010558:	f7ff ff44 	bl	80103e4 <malloc>
 801055c:	4602      	mov	r2, r0
 801055e:	61e0      	str	r0, [r4, #28]
 8010560:	b920      	cbnz	r0, 801056c <_Balloc+0x20>
 8010562:	4b18      	ldr	r3, [pc, #96]	; (80105c4 <_Balloc+0x78>)
 8010564:	4818      	ldr	r0, [pc, #96]	; (80105c8 <_Balloc+0x7c>)
 8010566:	216b      	movs	r1, #107	; 0x6b
 8010568:	f000 fdf2 	bl	8011150 <__assert_func>
 801056c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010570:	6006      	str	r6, [r0, #0]
 8010572:	60c6      	str	r6, [r0, #12]
 8010574:	69e6      	ldr	r6, [r4, #28]
 8010576:	68f3      	ldr	r3, [r6, #12]
 8010578:	b183      	cbz	r3, 801059c <_Balloc+0x50>
 801057a:	69e3      	ldr	r3, [r4, #28]
 801057c:	68db      	ldr	r3, [r3, #12]
 801057e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010582:	b9b8      	cbnz	r0, 80105b4 <_Balloc+0x68>
 8010584:	2101      	movs	r1, #1
 8010586:	fa01 f605 	lsl.w	r6, r1, r5
 801058a:	1d72      	adds	r2, r6, #5
 801058c:	0092      	lsls	r2, r2, #2
 801058e:	4620      	mov	r0, r4
 8010590:	f000 fdfc 	bl	801118c <_calloc_r>
 8010594:	b160      	cbz	r0, 80105b0 <_Balloc+0x64>
 8010596:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801059a:	e00e      	b.n	80105ba <_Balloc+0x6e>
 801059c:	2221      	movs	r2, #33	; 0x21
 801059e:	2104      	movs	r1, #4
 80105a0:	4620      	mov	r0, r4
 80105a2:	f000 fdf3 	bl	801118c <_calloc_r>
 80105a6:	69e3      	ldr	r3, [r4, #28]
 80105a8:	60f0      	str	r0, [r6, #12]
 80105aa:	68db      	ldr	r3, [r3, #12]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d1e4      	bne.n	801057a <_Balloc+0x2e>
 80105b0:	2000      	movs	r0, #0
 80105b2:	bd70      	pop	{r4, r5, r6, pc}
 80105b4:	6802      	ldr	r2, [r0, #0]
 80105b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80105ba:	2300      	movs	r3, #0
 80105bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80105c0:	e7f7      	b.n	80105b2 <_Balloc+0x66>
 80105c2:	bf00      	nop
 80105c4:	08011dd1 	.word	0x08011dd1
 80105c8:	08011e51 	.word	0x08011e51

080105cc <_Bfree>:
 80105cc:	b570      	push	{r4, r5, r6, lr}
 80105ce:	69c6      	ldr	r6, [r0, #28]
 80105d0:	4605      	mov	r5, r0
 80105d2:	460c      	mov	r4, r1
 80105d4:	b976      	cbnz	r6, 80105f4 <_Bfree+0x28>
 80105d6:	2010      	movs	r0, #16
 80105d8:	f7ff ff04 	bl	80103e4 <malloc>
 80105dc:	4602      	mov	r2, r0
 80105de:	61e8      	str	r0, [r5, #28]
 80105e0:	b920      	cbnz	r0, 80105ec <_Bfree+0x20>
 80105e2:	4b09      	ldr	r3, [pc, #36]	; (8010608 <_Bfree+0x3c>)
 80105e4:	4809      	ldr	r0, [pc, #36]	; (801060c <_Bfree+0x40>)
 80105e6:	218f      	movs	r1, #143	; 0x8f
 80105e8:	f000 fdb2 	bl	8011150 <__assert_func>
 80105ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80105f0:	6006      	str	r6, [r0, #0]
 80105f2:	60c6      	str	r6, [r0, #12]
 80105f4:	b13c      	cbz	r4, 8010606 <_Bfree+0x3a>
 80105f6:	69eb      	ldr	r3, [r5, #28]
 80105f8:	6862      	ldr	r2, [r4, #4]
 80105fa:	68db      	ldr	r3, [r3, #12]
 80105fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010600:	6021      	str	r1, [r4, #0]
 8010602:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010606:	bd70      	pop	{r4, r5, r6, pc}
 8010608:	08011dd1 	.word	0x08011dd1
 801060c:	08011e51 	.word	0x08011e51

08010610 <__multadd>:
 8010610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010614:	690d      	ldr	r5, [r1, #16]
 8010616:	4607      	mov	r7, r0
 8010618:	460c      	mov	r4, r1
 801061a:	461e      	mov	r6, r3
 801061c:	f101 0c14 	add.w	ip, r1, #20
 8010620:	2000      	movs	r0, #0
 8010622:	f8dc 3000 	ldr.w	r3, [ip]
 8010626:	b299      	uxth	r1, r3
 8010628:	fb02 6101 	mla	r1, r2, r1, r6
 801062c:	0c1e      	lsrs	r6, r3, #16
 801062e:	0c0b      	lsrs	r3, r1, #16
 8010630:	fb02 3306 	mla	r3, r2, r6, r3
 8010634:	b289      	uxth	r1, r1
 8010636:	3001      	adds	r0, #1
 8010638:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801063c:	4285      	cmp	r5, r0
 801063e:	f84c 1b04 	str.w	r1, [ip], #4
 8010642:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010646:	dcec      	bgt.n	8010622 <__multadd+0x12>
 8010648:	b30e      	cbz	r6, 801068e <__multadd+0x7e>
 801064a:	68a3      	ldr	r3, [r4, #8]
 801064c:	42ab      	cmp	r3, r5
 801064e:	dc19      	bgt.n	8010684 <__multadd+0x74>
 8010650:	6861      	ldr	r1, [r4, #4]
 8010652:	4638      	mov	r0, r7
 8010654:	3101      	adds	r1, #1
 8010656:	f7ff ff79 	bl	801054c <_Balloc>
 801065a:	4680      	mov	r8, r0
 801065c:	b928      	cbnz	r0, 801066a <__multadd+0x5a>
 801065e:	4602      	mov	r2, r0
 8010660:	4b0c      	ldr	r3, [pc, #48]	; (8010694 <__multadd+0x84>)
 8010662:	480d      	ldr	r0, [pc, #52]	; (8010698 <__multadd+0x88>)
 8010664:	21ba      	movs	r1, #186	; 0xba
 8010666:	f000 fd73 	bl	8011150 <__assert_func>
 801066a:	6922      	ldr	r2, [r4, #16]
 801066c:	3202      	adds	r2, #2
 801066e:	f104 010c 	add.w	r1, r4, #12
 8010672:	0092      	lsls	r2, r2, #2
 8010674:	300c      	adds	r0, #12
 8010676:	f7fe ffe1 	bl	800f63c <memcpy>
 801067a:	4621      	mov	r1, r4
 801067c:	4638      	mov	r0, r7
 801067e:	f7ff ffa5 	bl	80105cc <_Bfree>
 8010682:	4644      	mov	r4, r8
 8010684:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010688:	3501      	adds	r5, #1
 801068a:	615e      	str	r6, [r3, #20]
 801068c:	6125      	str	r5, [r4, #16]
 801068e:	4620      	mov	r0, r4
 8010690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010694:	08011e40 	.word	0x08011e40
 8010698:	08011e51 	.word	0x08011e51

0801069c <__hi0bits>:
 801069c:	0c03      	lsrs	r3, r0, #16
 801069e:	041b      	lsls	r3, r3, #16
 80106a0:	b9d3      	cbnz	r3, 80106d8 <__hi0bits+0x3c>
 80106a2:	0400      	lsls	r0, r0, #16
 80106a4:	2310      	movs	r3, #16
 80106a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80106aa:	bf04      	itt	eq
 80106ac:	0200      	lsleq	r0, r0, #8
 80106ae:	3308      	addeq	r3, #8
 80106b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80106b4:	bf04      	itt	eq
 80106b6:	0100      	lsleq	r0, r0, #4
 80106b8:	3304      	addeq	r3, #4
 80106ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80106be:	bf04      	itt	eq
 80106c0:	0080      	lsleq	r0, r0, #2
 80106c2:	3302      	addeq	r3, #2
 80106c4:	2800      	cmp	r0, #0
 80106c6:	db05      	blt.n	80106d4 <__hi0bits+0x38>
 80106c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80106cc:	f103 0301 	add.w	r3, r3, #1
 80106d0:	bf08      	it	eq
 80106d2:	2320      	moveq	r3, #32
 80106d4:	4618      	mov	r0, r3
 80106d6:	4770      	bx	lr
 80106d8:	2300      	movs	r3, #0
 80106da:	e7e4      	b.n	80106a6 <__hi0bits+0xa>

080106dc <__lo0bits>:
 80106dc:	6803      	ldr	r3, [r0, #0]
 80106de:	f013 0207 	ands.w	r2, r3, #7
 80106e2:	d00c      	beq.n	80106fe <__lo0bits+0x22>
 80106e4:	07d9      	lsls	r1, r3, #31
 80106e6:	d422      	bmi.n	801072e <__lo0bits+0x52>
 80106e8:	079a      	lsls	r2, r3, #30
 80106ea:	bf49      	itett	mi
 80106ec:	085b      	lsrmi	r3, r3, #1
 80106ee:	089b      	lsrpl	r3, r3, #2
 80106f0:	6003      	strmi	r3, [r0, #0]
 80106f2:	2201      	movmi	r2, #1
 80106f4:	bf5c      	itt	pl
 80106f6:	6003      	strpl	r3, [r0, #0]
 80106f8:	2202      	movpl	r2, #2
 80106fa:	4610      	mov	r0, r2
 80106fc:	4770      	bx	lr
 80106fe:	b299      	uxth	r1, r3
 8010700:	b909      	cbnz	r1, 8010706 <__lo0bits+0x2a>
 8010702:	0c1b      	lsrs	r3, r3, #16
 8010704:	2210      	movs	r2, #16
 8010706:	b2d9      	uxtb	r1, r3
 8010708:	b909      	cbnz	r1, 801070e <__lo0bits+0x32>
 801070a:	3208      	adds	r2, #8
 801070c:	0a1b      	lsrs	r3, r3, #8
 801070e:	0719      	lsls	r1, r3, #28
 8010710:	bf04      	itt	eq
 8010712:	091b      	lsreq	r3, r3, #4
 8010714:	3204      	addeq	r2, #4
 8010716:	0799      	lsls	r1, r3, #30
 8010718:	bf04      	itt	eq
 801071a:	089b      	lsreq	r3, r3, #2
 801071c:	3202      	addeq	r2, #2
 801071e:	07d9      	lsls	r1, r3, #31
 8010720:	d403      	bmi.n	801072a <__lo0bits+0x4e>
 8010722:	085b      	lsrs	r3, r3, #1
 8010724:	f102 0201 	add.w	r2, r2, #1
 8010728:	d003      	beq.n	8010732 <__lo0bits+0x56>
 801072a:	6003      	str	r3, [r0, #0]
 801072c:	e7e5      	b.n	80106fa <__lo0bits+0x1e>
 801072e:	2200      	movs	r2, #0
 8010730:	e7e3      	b.n	80106fa <__lo0bits+0x1e>
 8010732:	2220      	movs	r2, #32
 8010734:	e7e1      	b.n	80106fa <__lo0bits+0x1e>
	...

08010738 <__i2b>:
 8010738:	b510      	push	{r4, lr}
 801073a:	460c      	mov	r4, r1
 801073c:	2101      	movs	r1, #1
 801073e:	f7ff ff05 	bl	801054c <_Balloc>
 8010742:	4602      	mov	r2, r0
 8010744:	b928      	cbnz	r0, 8010752 <__i2b+0x1a>
 8010746:	4b05      	ldr	r3, [pc, #20]	; (801075c <__i2b+0x24>)
 8010748:	4805      	ldr	r0, [pc, #20]	; (8010760 <__i2b+0x28>)
 801074a:	f240 1145 	movw	r1, #325	; 0x145
 801074e:	f000 fcff 	bl	8011150 <__assert_func>
 8010752:	2301      	movs	r3, #1
 8010754:	6144      	str	r4, [r0, #20]
 8010756:	6103      	str	r3, [r0, #16]
 8010758:	bd10      	pop	{r4, pc}
 801075a:	bf00      	nop
 801075c:	08011e40 	.word	0x08011e40
 8010760:	08011e51 	.word	0x08011e51

08010764 <__multiply>:
 8010764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010768:	4691      	mov	r9, r2
 801076a:	690a      	ldr	r2, [r1, #16]
 801076c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010770:	429a      	cmp	r2, r3
 8010772:	bfb8      	it	lt
 8010774:	460b      	movlt	r3, r1
 8010776:	460c      	mov	r4, r1
 8010778:	bfbc      	itt	lt
 801077a:	464c      	movlt	r4, r9
 801077c:	4699      	movlt	r9, r3
 801077e:	6927      	ldr	r7, [r4, #16]
 8010780:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010784:	68a3      	ldr	r3, [r4, #8]
 8010786:	6861      	ldr	r1, [r4, #4]
 8010788:	eb07 060a 	add.w	r6, r7, sl
 801078c:	42b3      	cmp	r3, r6
 801078e:	b085      	sub	sp, #20
 8010790:	bfb8      	it	lt
 8010792:	3101      	addlt	r1, #1
 8010794:	f7ff feda 	bl	801054c <_Balloc>
 8010798:	b930      	cbnz	r0, 80107a8 <__multiply+0x44>
 801079a:	4602      	mov	r2, r0
 801079c:	4b44      	ldr	r3, [pc, #272]	; (80108b0 <__multiply+0x14c>)
 801079e:	4845      	ldr	r0, [pc, #276]	; (80108b4 <__multiply+0x150>)
 80107a0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80107a4:	f000 fcd4 	bl	8011150 <__assert_func>
 80107a8:	f100 0514 	add.w	r5, r0, #20
 80107ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80107b0:	462b      	mov	r3, r5
 80107b2:	2200      	movs	r2, #0
 80107b4:	4543      	cmp	r3, r8
 80107b6:	d321      	bcc.n	80107fc <__multiply+0x98>
 80107b8:	f104 0314 	add.w	r3, r4, #20
 80107bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80107c0:	f109 0314 	add.w	r3, r9, #20
 80107c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80107c8:	9202      	str	r2, [sp, #8]
 80107ca:	1b3a      	subs	r2, r7, r4
 80107cc:	3a15      	subs	r2, #21
 80107ce:	f022 0203 	bic.w	r2, r2, #3
 80107d2:	3204      	adds	r2, #4
 80107d4:	f104 0115 	add.w	r1, r4, #21
 80107d8:	428f      	cmp	r7, r1
 80107da:	bf38      	it	cc
 80107dc:	2204      	movcc	r2, #4
 80107de:	9201      	str	r2, [sp, #4]
 80107e0:	9a02      	ldr	r2, [sp, #8]
 80107e2:	9303      	str	r3, [sp, #12]
 80107e4:	429a      	cmp	r2, r3
 80107e6:	d80c      	bhi.n	8010802 <__multiply+0x9e>
 80107e8:	2e00      	cmp	r6, #0
 80107ea:	dd03      	ble.n	80107f4 <__multiply+0x90>
 80107ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d05b      	beq.n	80108ac <__multiply+0x148>
 80107f4:	6106      	str	r6, [r0, #16]
 80107f6:	b005      	add	sp, #20
 80107f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107fc:	f843 2b04 	str.w	r2, [r3], #4
 8010800:	e7d8      	b.n	80107b4 <__multiply+0x50>
 8010802:	f8b3 a000 	ldrh.w	sl, [r3]
 8010806:	f1ba 0f00 	cmp.w	sl, #0
 801080a:	d024      	beq.n	8010856 <__multiply+0xf2>
 801080c:	f104 0e14 	add.w	lr, r4, #20
 8010810:	46a9      	mov	r9, r5
 8010812:	f04f 0c00 	mov.w	ip, #0
 8010816:	f85e 2b04 	ldr.w	r2, [lr], #4
 801081a:	f8d9 1000 	ldr.w	r1, [r9]
 801081e:	fa1f fb82 	uxth.w	fp, r2
 8010822:	b289      	uxth	r1, r1
 8010824:	fb0a 110b 	mla	r1, sl, fp, r1
 8010828:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801082c:	f8d9 2000 	ldr.w	r2, [r9]
 8010830:	4461      	add	r1, ip
 8010832:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010836:	fb0a c20b 	mla	r2, sl, fp, ip
 801083a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801083e:	b289      	uxth	r1, r1
 8010840:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010844:	4577      	cmp	r7, lr
 8010846:	f849 1b04 	str.w	r1, [r9], #4
 801084a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801084e:	d8e2      	bhi.n	8010816 <__multiply+0xb2>
 8010850:	9a01      	ldr	r2, [sp, #4]
 8010852:	f845 c002 	str.w	ip, [r5, r2]
 8010856:	9a03      	ldr	r2, [sp, #12]
 8010858:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801085c:	3304      	adds	r3, #4
 801085e:	f1b9 0f00 	cmp.w	r9, #0
 8010862:	d021      	beq.n	80108a8 <__multiply+0x144>
 8010864:	6829      	ldr	r1, [r5, #0]
 8010866:	f104 0c14 	add.w	ip, r4, #20
 801086a:	46ae      	mov	lr, r5
 801086c:	f04f 0a00 	mov.w	sl, #0
 8010870:	f8bc b000 	ldrh.w	fp, [ip]
 8010874:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010878:	fb09 220b 	mla	r2, r9, fp, r2
 801087c:	4452      	add	r2, sl
 801087e:	b289      	uxth	r1, r1
 8010880:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010884:	f84e 1b04 	str.w	r1, [lr], #4
 8010888:	f85c 1b04 	ldr.w	r1, [ip], #4
 801088c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010890:	f8be 1000 	ldrh.w	r1, [lr]
 8010894:	fb09 110a 	mla	r1, r9, sl, r1
 8010898:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801089c:	4567      	cmp	r7, ip
 801089e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80108a2:	d8e5      	bhi.n	8010870 <__multiply+0x10c>
 80108a4:	9a01      	ldr	r2, [sp, #4]
 80108a6:	50a9      	str	r1, [r5, r2]
 80108a8:	3504      	adds	r5, #4
 80108aa:	e799      	b.n	80107e0 <__multiply+0x7c>
 80108ac:	3e01      	subs	r6, #1
 80108ae:	e79b      	b.n	80107e8 <__multiply+0x84>
 80108b0:	08011e40 	.word	0x08011e40
 80108b4:	08011e51 	.word	0x08011e51

080108b8 <__pow5mult>:
 80108b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108bc:	4615      	mov	r5, r2
 80108be:	f012 0203 	ands.w	r2, r2, #3
 80108c2:	4606      	mov	r6, r0
 80108c4:	460f      	mov	r7, r1
 80108c6:	d007      	beq.n	80108d8 <__pow5mult+0x20>
 80108c8:	4c25      	ldr	r4, [pc, #148]	; (8010960 <__pow5mult+0xa8>)
 80108ca:	3a01      	subs	r2, #1
 80108cc:	2300      	movs	r3, #0
 80108ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80108d2:	f7ff fe9d 	bl	8010610 <__multadd>
 80108d6:	4607      	mov	r7, r0
 80108d8:	10ad      	asrs	r5, r5, #2
 80108da:	d03d      	beq.n	8010958 <__pow5mult+0xa0>
 80108dc:	69f4      	ldr	r4, [r6, #28]
 80108de:	b97c      	cbnz	r4, 8010900 <__pow5mult+0x48>
 80108e0:	2010      	movs	r0, #16
 80108e2:	f7ff fd7f 	bl	80103e4 <malloc>
 80108e6:	4602      	mov	r2, r0
 80108e8:	61f0      	str	r0, [r6, #28]
 80108ea:	b928      	cbnz	r0, 80108f8 <__pow5mult+0x40>
 80108ec:	4b1d      	ldr	r3, [pc, #116]	; (8010964 <__pow5mult+0xac>)
 80108ee:	481e      	ldr	r0, [pc, #120]	; (8010968 <__pow5mult+0xb0>)
 80108f0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80108f4:	f000 fc2c 	bl	8011150 <__assert_func>
 80108f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80108fc:	6004      	str	r4, [r0, #0]
 80108fe:	60c4      	str	r4, [r0, #12]
 8010900:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010904:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010908:	b94c      	cbnz	r4, 801091e <__pow5mult+0x66>
 801090a:	f240 2171 	movw	r1, #625	; 0x271
 801090e:	4630      	mov	r0, r6
 8010910:	f7ff ff12 	bl	8010738 <__i2b>
 8010914:	2300      	movs	r3, #0
 8010916:	f8c8 0008 	str.w	r0, [r8, #8]
 801091a:	4604      	mov	r4, r0
 801091c:	6003      	str	r3, [r0, #0]
 801091e:	f04f 0900 	mov.w	r9, #0
 8010922:	07eb      	lsls	r3, r5, #31
 8010924:	d50a      	bpl.n	801093c <__pow5mult+0x84>
 8010926:	4639      	mov	r1, r7
 8010928:	4622      	mov	r2, r4
 801092a:	4630      	mov	r0, r6
 801092c:	f7ff ff1a 	bl	8010764 <__multiply>
 8010930:	4639      	mov	r1, r7
 8010932:	4680      	mov	r8, r0
 8010934:	4630      	mov	r0, r6
 8010936:	f7ff fe49 	bl	80105cc <_Bfree>
 801093a:	4647      	mov	r7, r8
 801093c:	106d      	asrs	r5, r5, #1
 801093e:	d00b      	beq.n	8010958 <__pow5mult+0xa0>
 8010940:	6820      	ldr	r0, [r4, #0]
 8010942:	b938      	cbnz	r0, 8010954 <__pow5mult+0x9c>
 8010944:	4622      	mov	r2, r4
 8010946:	4621      	mov	r1, r4
 8010948:	4630      	mov	r0, r6
 801094a:	f7ff ff0b 	bl	8010764 <__multiply>
 801094e:	6020      	str	r0, [r4, #0]
 8010950:	f8c0 9000 	str.w	r9, [r0]
 8010954:	4604      	mov	r4, r0
 8010956:	e7e4      	b.n	8010922 <__pow5mult+0x6a>
 8010958:	4638      	mov	r0, r7
 801095a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801095e:	bf00      	nop
 8010960:	08011fa0 	.word	0x08011fa0
 8010964:	08011dd1 	.word	0x08011dd1
 8010968:	08011e51 	.word	0x08011e51

0801096c <__lshift>:
 801096c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010970:	460c      	mov	r4, r1
 8010972:	6849      	ldr	r1, [r1, #4]
 8010974:	6923      	ldr	r3, [r4, #16]
 8010976:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801097a:	68a3      	ldr	r3, [r4, #8]
 801097c:	4607      	mov	r7, r0
 801097e:	4691      	mov	r9, r2
 8010980:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010984:	f108 0601 	add.w	r6, r8, #1
 8010988:	42b3      	cmp	r3, r6
 801098a:	db0b      	blt.n	80109a4 <__lshift+0x38>
 801098c:	4638      	mov	r0, r7
 801098e:	f7ff fddd 	bl	801054c <_Balloc>
 8010992:	4605      	mov	r5, r0
 8010994:	b948      	cbnz	r0, 80109aa <__lshift+0x3e>
 8010996:	4602      	mov	r2, r0
 8010998:	4b28      	ldr	r3, [pc, #160]	; (8010a3c <__lshift+0xd0>)
 801099a:	4829      	ldr	r0, [pc, #164]	; (8010a40 <__lshift+0xd4>)
 801099c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80109a0:	f000 fbd6 	bl	8011150 <__assert_func>
 80109a4:	3101      	adds	r1, #1
 80109a6:	005b      	lsls	r3, r3, #1
 80109a8:	e7ee      	b.n	8010988 <__lshift+0x1c>
 80109aa:	2300      	movs	r3, #0
 80109ac:	f100 0114 	add.w	r1, r0, #20
 80109b0:	f100 0210 	add.w	r2, r0, #16
 80109b4:	4618      	mov	r0, r3
 80109b6:	4553      	cmp	r3, sl
 80109b8:	db33      	blt.n	8010a22 <__lshift+0xb6>
 80109ba:	6920      	ldr	r0, [r4, #16]
 80109bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80109c0:	f104 0314 	add.w	r3, r4, #20
 80109c4:	f019 091f 	ands.w	r9, r9, #31
 80109c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80109cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80109d0:	d02b      	beq.n	8010a2a <__lshift+0xbe>
 80109d2:	f1c9 0e20 	rsb	lr, r9, #32
 80109d6:	468a      	mov	sl, r1
 80109d8:	2200      	movs	r2, #0
 80109da:	6818      	ldr	r0, [r3, #0]
 80109dc:	fa00 f009 	lsl.w	r0, r0, r9
 80109e0:	4310      	orrs	r0, r2
 80109e2:	f84a 0b04 	str.w	r0, [sl], #4
 80109e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80109ea:	459c      	cmp	ip, r3
 80109ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80109f0:	d8f3      	bhi.n	80109da <__lshift+0x6e>
 80109f2:	ebac 0304 	sub.w	r3, ip, r4
 80109f6:	3b15      	subs	r3, #21
 80109f8:	f023 0303 	bic.w	r3, r3, #3
 80109fc:	3304      	adds	r3, #4
 80109fe:	f104 0015 	add.w	r0, r4, #21
 8010a02:	4584      	cmp	ip, r0
 8010a04:	bf38      	it	cc
 8010a06:	2304      	movcc	r3, #4
 8010a08:	50ca      	str	r2, [r1, r3]
 8010a0a:	b10a      	cbz	r2, 8010a10 <__lshift+0xa4>
 8010a0c:	f108 0602 	add.w	r6, r8, #2
 8010a10:	3e01      	subs	r6, #1
 8010a12:	4638      	mov	r0, r7
 8010a14:	612e      	str	r6, [r5, #16]
 8010a16:	4621      	mov	r1, r4
 8010a18:	f7ff fdd8 	bl	80105cc <_Bfree>
 8010a1c:	4628      	mov	r0, r5
 8010a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a22:	f842 0f04 	str.w	r0, [r2, #4]!
 8010a26:	3301      	adds	r3, #1
 8010a28:	e7c5      	b.n	80109b6 <__lshift+0x4a>
 8010a2a:	3904      	subs	r1, #4
 8010a2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a30:	f841 2f04 	str.w	r2, [r1, #4]!
 8010a34:	459c      	cmp	ip, r3
 8010a36:	d8f9      	bhi.n	8010a2c <__lshift+0xc0>
 8010a38:	e7ea      	b.n	8010a10 <__lshift+0xa4>
 8010a3a:	bf00      	nop
 8010a3c:	08011e40 	.word	0x08011e40
 8010a40:	08011e51 	.word	0x08011e51

08010a44 <__mcmp>:
 8010a44:	b530      	push	{r4, r5, lr}
 8010a46:	6902      	ldr	r2, [r0, #16]
 8010a48:	690c      	ldr	r4, [r1, #16]
 8010a4a:	1b12      	subs	r2, r2, r4
 8010a4c:	d10e      	bne.n	8010a6c <__mcmp+0x28>
 8010a4e:	f100 0314 	add.w	r3, r0, #20
 8010a52:	3114      	adds	r1, #20
 8010a54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010a58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010a5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010a60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010a64:	42a5      	cmp	r5, r4
 8010a66:	d003      	beq.n	8010a70 <__mcmp+0x2c>
 8010a68:	d305      	bcc.n	8010a76 <__mcmp+0x32>
 8010a6a:	2201      	movs	r2, #1
 8010a6c:	4610      	mov	r0, r2
 8010a6e:	bd30      	pop	{r4, r5, pc}
 8010a70:	4283      	cmp	r3, r0
 8010a72:	d3f3      	bcc.n	8010a5c <__mcmp+0x18>
 8010a74:	e7fa      	b.n	8010a6c <__mcmp+0x28>
 8010a76:	f04f 32ff 	mov.w	r2, #4294967295
 8010a7a:	e7f7      	b.n	8010a6c <__mcmp+0x28>

08010a7c <__mdiff>:
 8010a7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a80:	460c      	mov	r4, r1
 8010a82:	4606      	mov	r6, r0
 8010a84:	4611      	mov	r1, r2
 8010a86:	4620      	mov	r0, r4
 8010a88:	4690      	mov	r8, r2
 8010a8a:	f7ff ffdb 	bl	8010a44 <__mcmp>
 8010a8e:	1e05      	subs	r5, r0, #0
 8010a90:	d110      	bne.n	8010ab4 <__mdiff+0x38>
 8010a92:	4629      	mov	r1, r5
 8010a94:	4630      	mov	r0, r6
 8010a96:	f7ff fd59 	bl	801054c <_Balloc>
 8010a9a:	b930      	cbnz	r0, 8010aaa <__mdiff+0x2e>
 8010a9c:	4b3a      	ldr	r3, [pc, #232]	; (8010b88 <__mdiff+0x10c>)
 8010a9e:	4602      	mov	r2, r0
 8010aa0:	f240 2137 	movw	r1, #567	; 0x237
 8010aa4:	4839      	ldr	r0, [pc, #228]	; (8010b8c <__mdiff+0x110>)
 8010aa6:	f000 fb53 	bl	8011150 <__assert_func>
 8010aaa:	2301      	movs	r3, #1
 8010aac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010ab0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ab4:	bfa4      	itt	ge
 8010ab6:	4643      	movge	r3, r8
 8010ab8:	46a0      	movge	r8, r4
 8010aba:	4630      	mov	r0, r6
 8010abc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010ac0:	bfa6      	itte	ge
 8010ac2:	461c      	movge	r4, r3
 8010ac4:	2500      	movge	r5, #0
 8010ac6:	2501      	movlt	r5, #1
 8010ac8:	f7ff fd40 	bl	801054c <_Balloc>
 8010acc:	b920      	cbnz	r0, 8010ad8 <__mdiff+0x5c>
 8010ace:	4b2e      	ldr	r3, [pc, #184]	; (8010b88 <__mdiff+0x10c>)
 8010ad0:	4602      	mov	r2, r0
 8010ad2:	f240 2145 	movw	r1, #581	; 0x245
 8010ad6:	e7e5      	b.n	8010aa4 <__mdiff+0x28>
 8010ad8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010adc:	6926      	ldr	r6, [r4, #16]
 8010ade:	60c5      	str	r5, [r0, #12]
 8010ae0:	f104 0914 	add.w	r9, r4, #20
 8010ae4:	f108 0514 	add.w	r5, r8, #20
 8010ae8:	f100 0e14 	add.w	lr, r0, #20
 8010aec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010af0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010af4:	f108 0210 	add.w	r2, r8, #16
 8010af8:	46f2      	mov	sl, lr
 8010afa:	2100      	movs	r1, #0
 8010afc:	f859 3b04 	ldr.w	r3, [r9], #4
 8010b00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010b04:	fa11 f88b 	uxtah	r8, r1, fp
 8010b08:	b299      	uxth	r1, r3
 8010b0a:	0c1b      	lsrs	r3, r3, #16
 8010b0c:	eba8 0801 	sub.w	r8, r8, r1
 8010b10:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010b14:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010b18:	fa1f f888 	uxth.w	r8, r8
 8010b1c:	1419      	asrs	r1, r3, #16
 8010b1e:	454e      	cmp	r6, r9
 8010b20:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010b24:	f84a 3b04 	str.w	r3, [sl], #4
 8010b28:	d8e8      	bhi.n	8010afc <__mdiff+0x80>
 8010b2a:	1b33      	subs	r3, r6, r4
 8010b2c:	3b15      	subs	r3, #21
 8010b2e:	f023 0303 	bic.w	r3, r3, #3
 8010b32:	3304      	adds	r3, #4
 8010b34:	3415      	adds	r4, #21
 8010b36:	42a6      	cmp	r6, r4
 8010b38:	bf38      	it	cc
 8010b3a:	2304      	movcc	r3, #4
 8010b3c:	441d      	add	r5, r3
 8010b3e:	4473      	add	r3, lr
 8010b40:	469e      	mov	lr, r3
 8010b42:	462e      	mov	r6, r5
 8010b44:	4566      	cmp	r6, ip
 8010b46:	d30e      	bcc.n	8010b66 <__mdiff+0xea>
 8010b48:	f10c 0203 	add.w	r2, ip, #3
 8010b4c:	1b52      	subs	r2, r2, r5
 8010b4e:	f022 0203 	bic.w	r2, r2, #3
 8010b52:	3d03      	subs	r5, #3
 8010b54:	45ac      	cmp	ip, r5
 8010b56:	bf38      	it	cc
 8010b58:	2200      	movcc	r2, #0
 8010b5a:	4413      	add	r3, r2
 8010b5c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010b60:	b17a      	cbz	r2, 8010b82 <__mdiff+0x106>
 8010b62:	6107      	str	r7, [r0, #16]
 8010b64:	e7a4      	b.n	8010ab0 <__mdiff+0x34>
 8010b66:	f856 8b04 	ldr.w	r8, [r6], #4
 8010b6a:	fa11 f288 	uxtah	r2, r1, r8
 8010b6e:	1414      	asrs	r4, r2, #16
 8010b70:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010b74:	b292      	uxth	r2, r2
 8010b76:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010b7a:	f84e 2b04 	str.w	r2, [lr], #4
 8010b7e:	1421      	asrs	r1, r4, #16
 8010b80:	e7e0      	b.n	8010b44 <__mdiff+0xc8>
 8010b82:	3f01      	subs	r7, #1
 8010b84:	e7ea      	b.n	8010b5c <__mdiff+0xe0>
 8010b86:	bf00      	nop
 8010b88:	08011e40 	.word	0x08011e40
 8010b8c:	08011e51 	.word	0x08011e51

08010b90 <__d2b>:
 8010b90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010b94:	460f      	mov	r7, r1
 8010b96:	2101      	movs	r1, #1
 8010b98:	ec59 8b10 	vmov	r8, r9, d0
 8010b9c:	4616      	mov	r6, r2
 8010b9e:	f7ff fcd5 	bl	801054c <_Balloc>
 8010ba2:	4604      	mov	r4, r0
 8010ba4:	b930      	cbnz	r0, 8010bb4 <__d2b+0x24>
 8010ba6:	4602      	mov	r2, r0
 8010ba8:	4b24      	ldr	r3, [pc, #144]	; (8010c3c <__d2b+0xac>)
 8010baa:	4825      	ldr	r0, [pc, #148]	; (8010c40 <__d2b+0xb0>)
 8010bac:	f240 310f 	movw	r1, #783	; 0x30f
 8010bb0:	f000 face 	bl	8011150 <__assert_func>
 8010bb4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010bb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010bbc:	bb2d      	cbnz	r5, 8010c0a <__d2b+0x7a>
 8010bbe:	9301      	str	r3, [sp, #4]
 8010bc0:	f1b8 0300 	subs.w	r3, r8, #0
 8010bc4:	d026      	beq.n	8010c14 <__d2b+0x84>
 8010bc6:	4668      	mov	r0, sp
 8010bc8:	9300      	str	r3, [sp, #0]
 8010bca:	f7ff fd87 	bl	80106dc <__lo0bits>
 8010bce:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010bd2:	b1e8      	cbz	r0, 8010c10 <__d2b+0x80>
 8010bd4:	f1c0 0320 	rsb	r3, r0, #32
 8010bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8010bdc:	430b      	orrs	r3, r1
 8010bde:	40c2      	lsrs	r2, r0
 8010be0:	6163      	str	r3, [r4, #20]
 8010be2:	9201      	str	r2, [sp, #4]
 8010be4:	9b01      	ldr	r3, [sp, #4]
 8010be6:	61a3      	str	r3, [r4, #24]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	bf14      	ite	ne
 8010bec:	2202      	movne	r2, #2
 8010bee:	2201      	moveq	r2, #1
 8010bf0:	6122      	str	r2, [r4, #16]
 8010bf2:	b1bd      	cbz	r5, 8010c24 <__d2b+0x94>
 8010bf4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010bf8:	4405      	add	r5, r0
 8010bfa:	603d      	str	r5, [r7, #0]
 8010bfc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010c00:	6030      	str	r0, [r6, #0]
 8010c02:	4620      	mov	r0, r4
 8010c04:	b003      	add	sp, #12
 8010c06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010c0e:	e7d6      	b.n	8010bbe <__d2b+0x2e>
 8010c10:	6161      	str	r1, [r4, #20]
 8010c12:	e7e7      	b.n	8010be4 <__d2b+0x54>
 8010c14:	a801      	add	r0, sp, #4
 8010c16:	f7ff fd61 	bl	80106dc <__lo0bits>
 8010c1a:	9b01      	ldr	r3, [sp, #4]
 8010c1c:	6163      	str	r3, [r4, #20]
 8010c1e:	3020      	adds	r0, #32
 8010c20:	2201      	movs	r2, #1
 8010c22:	e7e5      	b.n	8010bf0 <__d2b+0x60>
 8010c24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010c28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010c2c:	6038      	str	r0, [r7, #0]
 8010c2e:	6918      	ldr	r0, [r3, #16]
 8010c30:	f7ff fd34 	bl	801069c <__hi0bits>
 8010c34:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010c38:	e7e2      	b.n	8010c00 <__d2b+0x70>
 8010c3a:	bf00      	nop
 8010c3c:	08011e40 	.word	0x08011e40
 8010c40:	08011e51 	.word	0x08011e51

08010c44 <__sfputc_r>:
 8010c44:	6893      	ldr	r3, [r2, #8]
 8010c46:	3b01      	subs	r3, #1
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	b410      	push	{r4}
 8010c4c:	6093      	str	r3, [r2, #8]
 8010c4e:	da08      	bge.n	8010c62 <__sfputc_r+0x1e>
 8010c50:	6994      	ldr	r4, [r2, #24]
 8010c52:	42a3      	cmp	r3, r4
 8010c54:	db01      	blt.n	8010c5a <__sfputc_r+0x16>
 8010c56:	290a      	cmp	r1, #10
 8010c58:	d103      	bne.n	8010c62 <__sfputc_r+0x1e>
 8010c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c5e:	f7fe bb84 	b.w	800f36a <__swbuf_r>
 8010c62:	6813      	ldr	r3, [r2, #0]
 8010c64:	1c58      	adds	r0, r3, #1
 8010c66:	6010      	str	r0, [r2, #0]
 8010c68:	7019      	strb	r1, [r3, #0]
 8010c6a:	4608      	mov	r0, r1
 8010c6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c70:	4770      	bx	lr

08010c72 <__sfputs_r>:
 8010c72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c74:	4606      	mov	r6, r0
 8010c76:	460f      	mov	r7, r1
 8010c78:	4614      	mov	r4, r2
 8010c7a:	18d5      	adds	r5, r2, r3
 8010c7c:	42ac      	cmp	r4, r5
 8010c7e:	d101      	bne.n	8010c84 <__sfputs_r+0x12>
 8010c80:	2000      	movs	r0, #0
 8010c82:	e007      	b.n	8010c94 <__sfputs_r+0x22>
 8010c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c88:	463a      	mov	r2, r7
 8010c8a:	4630      	mov	r0, r6
 8010c8c:	f7ff ffda 	bl	8010c44 <__sfputc_r>
 8010c90:	1c43      	adds	r3, r0, #1
 8010c92:	d1f3      	bne.n	8010c7c <__sfputs_r+0xa>
 8010c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010c98 <_vfiprintf_r>:
 8010c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c9c:	460d      	mov	r5, r1
 8010c9e:	b09d      	sub	sp, #116	; 0x74
 8010ca0:	4614      	mov	r4, r2
 8010ca2:	4698      	mov	r8, r3
 8010ca4:	4606      	mov	r6, r0
 8010ca6:	b118      	cbz	r0, 8010cb0 <_vfiprintf_r+0x18>
 8010ca8:	6a03      	ldr	r3, [r0, #32]
 8010caa:	b90b      	cbnz	r3, 8010cb0 <_vfiprintf_r+0x18>
 8010cac:	f7fe fa76 	bl	800f19c <__sinit>
 8010cb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010cb2:	07d9      	lsls	r1, r3, #31
 8010cb4:	d405      	bmi.n	8010cc2 <_vfiprintf_r+0x2a>
 8010cb6:	89ab      	ldrh	r3, [r5, #12]
 8010cb8:	059a      	lsls	r2, r3, #22
 8010cba:	d402      	bmi.n	8010cc2 <_vfiprintf_r+0x2a>
 8010cbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010cbe:	f7fe fcbb 	bl	800f638 <__retarget_lock_acquire_recursive>
 8010cc2:	89ab      	ldrh	r3, [r5, #12]
 8010cc4:	071b      	lsls	r3, r3, #28
 8010cc6:	d501      	bpl.n	8010ccc <_vfiprintf_r+0x34>
 8010cc8:	692b      	ldr	r3, [r5, #16]
 8010cca:	b99b      	cbnz	r3, 8010cf4 <_vfiprintf_r+0x5c>
 8010ccc:	4629      	mov	r1, r5
 8010cce:	4630      	mov	r0, r6
 8010cd0:	f7fe fb88 	bl	800f3e4 <__swsetup_r>
 8010cd4:	b170      	cbz	r0, 8010cf4 <_vfiprintf_r+0x5c>
 8010cd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010cd8:	07dc      	lsls	r4, r3, #31
 8010cda:	d504      	bpl.n	8010ce6 <_vfiprintf_r+0x4e>
 8010cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8010ce0:	b01d      	add	sp, #116	; 0x74
 8010ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ce6:	89ab      	ldrh	r3, [r5, #12]
 8010ce8:	0598      	lsls	r0, r3, #22
 8010cea:	d4f7      	bmi.n	8010cdc <_vfiprintf_r+0x44>
 8010cec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010cee:	f7fe fca4 	bl	800f63a <__retarget_lock_release_recursive>
 8010cf2:	e7f3      	b.n	8010cdc <_vfiprintf_r+0x44>
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8010cf8:	2320      	movs	r3, #32
 8010cfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010cfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d02:	2330      	movs	r3, #48	; 0x30
 8010d04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010eb8 <_vfiprintf_r+0x220>
 8010d08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d0c:	f04f 0901 	mov.w	r9, #1
 8010d10:	4623      	mov	r3, r4
 8010d12:	469a      	mov	sl, r3
 8010d14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d18:	b10a      	cbz	r2, 8010d1e <_vfiprintf_r+0x86>
 8010d1a:	2a25      	cmp	r2, #37	; 0x25
 8010d1c:	d1f9      	bne.n	8010d12 <_vfiprintf_r+0x7a>
 8010d1e:	ebba 0b04 	subs.w	fp, sl, r4
 8010d22:	d00b      	beq.n	8010d3c <_vfiprintf_r+0xa4>
 8010d24:	465b      	mov	r3, fp
 8010d26:	4622      	mov	r2, r4
 8010d28:	4629      	mov	r1, r5
 8010d2a:	4630      	mov	r0, r6
 8010d2c:	f7ff ffa1 	bl	8010c72 <__sfputs_r>
 8010d30:	3001      	adds	r0, #1
 8010d32:	f000 80a9 	beq.w	8010e88 <_vfiprintf_r+0x1f0>
 8010d36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d38:	445a      	add	r2, fp
 8010d3a:	9209      	str	r2, [sp, #36]	; 0x24
 8010d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	f000 80a1 	beq.w	8010e88 <_vfiprintf_r+0x1f0>
 8010d46:	2300      	movs	r3, #0
 8010d48:	f04f 32ff 	mov.w	r2, #4294967295
 8010d4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d50:	f10a 0a01 	add.w	sl, sl, #1
 8010d54:	9304      	str	r3, [sp, #16]
 8010d56:	9307      	str	r3, [sp, #28]
 8010d58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d5c:	931a      	str	r3, [sp, #104]	; 0x68
 8010d5e:	4654      	mov	r4, sl
 8010d60:	2205      	movs	r2, #5
 8010d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d66:	4854      	ldr	r0, [pc, #336]	; (8010eb8 <_vfiprintf_r+0x220>)
 8010d68:	f7ef fa32 	bl	80001d0 <memchr>
 8010d6c:	9a04      	ldr	r2, [sp, #16]
 8010d6e:	b9d8      	cbnz	r0, 8010da8 <_vfiprintf_r+0x110>
 8010d70:	06d1      	lsls	r1, r2, #27
 8010d72:	bf44      	itt	mi
 8010d74:	2320      	movmi	r3, #32
 8010d76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d7a:	0713      	lsls	r3, r2, #28
 8010d7c:	bf44      	itt	mi
 8010d7e:	232b      	movmi	r3, #43	; 0x2b
 8010d80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d84:	f89a 3000 	ldrb.w	r3, [sl]
 8010d88:	2b2a      	cmp	r3, #42	; 0x2a
 8010d8a:	d015      	beq.n	8010db8 <_vfiprintf_r+0x120>
 8010d8c:	9a07      	ldr	r2, [sp, #28]
 8010d8e:	4654      	mov	r4, sl
 8010d90:	2000      	movs	r0, #0
 8010d92:	f04f 0c0a 	mov.w	ip, #10
 8010d96:	4621      	mov	r1, r4
 8010d98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d9c:	3b30      	subs	r3, #48	; 0x30
 8010d9e:	2b09      	cmp	r3, #9
 8010da0:	d94d      	bls.n	8010e3e <_vfiprintf_r+0x1a6>
 8010da2:	b1b0      	cbz	r0, 8010dd2 <_vfiprintf_r+0x13a>
 8010da4:	9207      	str	r2, [sp, #28]
 8010da6:	e014      	b.n	8010dd2 <_vfiprintf_r+0x13a>
 8010da8:	eba0 0308 	sub.w	r3, r0, r8
 8010dac:	fa09 f303 	lsl.w	r3, r9, r3
 8010db0:	4313      	orrs	r3, r2
 8010db2:	9304      	str	r3, [sp, #16]
 8010db4:	46a2      	mov	sl, r4
 8010db6:	e7d2      	b.n	8010d5e <_vfiprintf_r+0xc6>
 8010db8:	9b03      	ldr	r3, [sp, #12]
 8010dba:	1d19      	adds	r1, r3, #4
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	9103      	str	r1, [sp, #12]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	bfbb      	ittet	lt
 8010dc4:	425b      	neglt	r3, r3
 8010dc6:	f042 0202 	orrlt.w	r2, r2, #2
 8010dca:	9307      	strge	r3, [sp, #28]
 8010dcc:	9307      	strlt	r3, [sp, #28]
 8010dce:	bfb8      	it	lt
 8010dd0:	9204      	strlt	r2, [sp, #16]
 8010dd2:	7823      	ldrb	r3, [r4, #0]
 8010dd4:	2b2e      	cmp	r3, #46	; 0x2e
 8010dd6:	d10c      	bne.n	8010df2 <_vfiprintf_r+0x15a>
 8010dd8:	7863      	ldrb	r3, [r4, #1]
 8010dda:	2b2a      	cmp	r3, #42	; 0x2a
 8010ddc:	d134      	bne.n	8010e48 <_vfiprintf_r+0x1b0>
 8010dde:	9b03      	ldr	r3, [sp, #12]
 8010de0:	1d1a      	adds	r2, r3, #4
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	9203      	str	r2, [sp, #12]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	bfb8      	it	lt
 8010dea:	f04f 33ff 	movlt.w	r3, #4294967295
 8010dee:	3402      	adds	r4, #2
 8010df0:	9305      	str	r3, [sp, #20]
 8010df2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010ec8 <_vfiprintf_r+0x230>
 8010df6:	7821      	ldrb	r1, [r4, #0]
 8010df8:	2203      	movs	r2, #3
 8010dfa:	4650      	mov	r0, sl
 8010dfc:	f7ef f9e8 	bl	80001d0 <memchr>
 8010e00:	b138      	cbz	r0, 8010e12 <_vfiprintf_r+0x17a>
 8010e02:	9b04      	ldr	r3, [sp, #16]
 8010e04:	eba0 000a 	sub.w	r0, r0, sl
 8010e08:	2240      	movs	r2, #64	; 0x40
 8010e0a:	4082      	lsls	r2, r0
 8010e0c:	4313      	orrs	r3, r2
 8010e0e:	3401      	adds	r4, #1
 8010e10:	9304      	str	r3, [sp, #16]
 8010e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e16:	4829      	ldr	r0, [pc, #164]	; (8010ebc <_vfiprintf_r+0x224>)
 8010e18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e1c:	2206      	movs	r2, #6
 8010e1e:	f7ef f9d7 	bl	80001d0 <memchr>
 8010e22:	2800      	cmp	r0, #0
 8010e24:	d03f      	beq.n	8010ea6 <_vfiprintf_r+0x20e>
 8010e26:	4b26      	ldr	r3, [pc, #152]	; (8010ec0 <_vfiprintf_r+0x228>)
 8010e28:	bb1b      	cbnz	r3, 8010e72 <_vfiprintf_r+0x1da>
 8010e2a:	9b03      	ldr	r3, [sp, #12]
 8010e2c:	3307      	adds	r3, #7
 8010e2e:	f023 0307 	bic.w	r3, r3, #7
 8010e32:	3308      	adds	r3, #8
 8010e34:	9303      	str	r3, [sp, #12]
 8010e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e38:	443b      	add	r3, r7
 8010e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8010e3c:	e768      	b.n	8010d10 <_vfiprintf_r+0x78>
 8010e3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e42:	460c      	mov	r4, r1
 8010e44:	2001      	movs	r0, #1
 8010e46:	e7a6      	b.n	8010d96 <_vfiprintf_r+0xfe>
 8010e48:	2300      	movs	r3, #0
 8010e4a:	3401      	adds	r4, #1
 8010e4c:	9305      	str	r3, [sp, #20]
 8010e4e:	4619      	mov	r1, r3
 8010e50:	f04f 0c0a 	mov.w	ip, #10
 8010e54:	4620      	mov	r0, r4
 8010e56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e5a:	3a30      	subs	r2, #48	; 0x30
 8010e5c:	2a09      	cmp	r2, #9
 8010e5e:	d903      	bls.n	8010e68 <_vfiprintf_r+0x1d0>
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d0c6      	beq.n	8010df2 <_vfiprintf_r+0x15a>
 8010e64:	9105      	str	r1, [sp, #20]
 8010e66:	e7c4      	b.n	8010df2 <_vfiprintf_r+0x15a>
 8010e68:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e6c:	4604      	mov	r4, r0
 8010e6e:	2301      	movs	r3, #1
 8010e70:	e7f0      	b.n	8010e54 <_vfiprintf_r+0x1bc>
 8010e72:	ab03      	add	r3, sp, #12
 8010e74:	9300      	str	r3, [sp, #0]
 8010e76:	462a      	mov	r2, r5
 8010e78:	4b12      	ldr	r3, [pc, #72]	; (8010ec4 <_vfiprintf_r+0x22c>)
 8010e7a:	a904      	add	r1, sp, #16
 8010e7c:	4630      	mov	r0, r6
 8010e7e:	f7fd fd4d 	bl	800e91c <_printf_float>
 8010e82:	4607      	mov	r7, r0
 8010e84:	1c78      	adds	r0, r7, #1
 8010e86:	d1d6      	bne.n	8010e36 <_vfiprintf_r+0x19e>
 8010e88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e8a:	07d9      	lsls	r1, r3, #31
 8010e8c:	d405      	bmi.n	8010e9a <_vfiprintf_r+0x202>
 8010e8e:	89ab      	ldrh	r3, [r5, #12]
 8010e90:	059a      	lsls	r2, r3, #22
 8010e92:	d402      	bmi.n	8010e9a <_vfiprintf_r+0x202>
 8010e94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e96:	f7fe fbd0 	bl	800f63a <__retarget_lock_release_recursive>
 8010e9a:	89ab      	ldrh	r3, [r5, #12]
 8010e9c:	065b      	lsls	r3, r3, #25
 8010e9e:	f53f af1d 	bmi.w	8010cdc <_vfiprintf_r+0x44>
 8010ea2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ea4:	e71c      	b.n	8010ce0 <_vfiprintf_r+0x48>
 8010ea6:	ab03      	add	r3, sp, #12
 8010ea8:	9300      	str	r3, [sp, #0]
 8010eaa:	462a      	mov	r2, r5
 8010eac:	4b05      	ldr	r3, [pc, #20]	; (8010ec4 <_vfiprintf_r+0x22c>)
 8010eae:	a904      	add	r1, sp, #16
 8010eb0:	4630      	mov	r0, r6
 8010eb2:	f7fd ffd7 	bl	800ee64 <_printf_i>
 8010eb6:	e7e4      	b.n	8010e82 <_vfiprintf_r+0x1ea>
 8010eb8:	08011fac 	.word	0x08011fac
 8010ebc:	08011fb6 	.word	0x08011fb6
 8010ec0:	0800e91d 	.word	0x0800e91d
 8010ec4:	08010c73 	.word	0x08010c73
 8010ec8:	08011fb2 	.word	0x08011fb2

08010ecc <__sflush_r>:
 8010ecc:	898a      	ldrh	r2, [r1, #12]
 8010ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ed2:	4605      	mov	r5, r0
 8010ed4:	0710      	lsls	r0, r2, #28
 8010ed6:	460c      	mov	r4, r1
 8010ed8:	d458      	bmi.n	8010f8c <__sflush_r+0xc0>
 8010eda:	684b      	ldr	r3, [r1, #4]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	dc05      	bgt.n	8010eec <__sflush_r+0x20>
 8010ee0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	dc02      	bgt.n	8010eec <__sflush_r+0x20>
 8010ee6:	2000      	movs	r0, #0
 8010ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010eee:	2e00      	cmp	r6, #0
 8010ef0:	d0f9      	beq.n	8010ee6 <__sflush_r+0x1a>
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010ef8:	682f      	ldr	r7, [r5, #0]
 8010efa:	6a21      	ldr	r1, [r4, #32]
 8010efc:	602b      	str	r3, [r5, #0]
 8010efe:	d032      	beq.n	8010f66 <__sflush_r+0x9a>
 8010f00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010f02:	89a3      	ldrh	r3, [r4, #12]
 8010f04:	075a      	lsls	r2, r3, #29
 8010f06:	d505      	bpl.n	8010f14 <__sflush_r+0x48>
 8010f08:	6863      	ldr	r3, [r4, #4]
 8010f0a:	1ac0      	subs	r0, r0, r3
 8010f0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010f0e:	b10b      	cbz	r3, 8010f14 <__sflush_r+0x48>
 8010f10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010f12:	1ac0      	subs	r0, r0, r3
 8010f14:	2300      	movs	r3, #0
 8010f16:	4602      	mov	r2, r0
 8010f18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010f1a:	6a21      	ldr	r1, [r4, #32]
 8010f1c:	4628      	mov	r0, r5
 8010f1e:	47b0      	blx	r6
 8010f20:	1c43      	adds	r3, r0, #1
 8010f22:	89a3      	ldrh	r3, [r4, #12]
 8010f24:	d106      	bne.n	8010f34 <__sflush_r+0x68>
 8010f26:	6829      	ldr	r1, [r5, #0]
 8010f28:	291d      	cmp	r1, #29
 8010f2a:	d82b      	bhi.n	8010f84 <__sflush_r+0xb8>
 8010f2c:	4a29      	ldr	r2, [pc, #164]	; (8010fd4 <__sflush_r+0x108>)
 8010f2e:	410a      	asrs	r2, r1
 8010f30:	07d6      	lsls	r6, r2, #31
 8010f32:	d427      	bmi.n	8010f84 <__sflush_r+0xb8>
 8010f34:	2200      	movs	r2, #0
 8010f36:	6062      	str	r2, [r4, #4]
 8010f38:	04d9      	lsls	r1, r3, #19
 8010f3a:	6922      	ldr	r2, [r4, #16]
 8010f3c:	6022      	str	r2, [r4, #0]
 8010f3e:	d504      	bpl.n	8010f4a <__sflush_r+0x7e>
 8010f40:	1c42      	adds	r2, r0, #1
 8010f42:	d101      	bne.n	8010f48 <__sflush_r+0x7c>
 8010f44:	682b      	ldr	r3, [r5, #0]
 8010f46:	b903      	cbnz	r3, 8010f4a <__sflush_r+0x7e>
 8010f48:	6560      	str	r0, [r4, #84]	; 0x54
 8010f4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f4c:	602f      	str	r7, [r5, #0]
 8010f4e:	2900      	cmp	r1, #0
 8010f50:	d0c9      	beq.n	8010ee6 <__sflush_r+0x1a>
 8010f52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f56:	4299      	cmp	r1, r3
 8010f58:	d002      	beq.n	8010f60 <__sflush_r+0x94>
 8010f5a:	4628      	mov	r0, r5
 8010f5c:	f7ff f9f6 	bl	801034c <_free_r>
 8010f60:	2000      	movs	r0, #0
 8010f62:	6360      	str	r0, [r4, #52]	; 0x34
 8010f64:	e7c0      	b.n	8010ee8 <__sflush_r+0x1c>
 8010f66:	2301      	movs	r3, #1
 8010f68:	4628      	mov	r0, r5
 8010f6a:	47b0      	blx	r6
 8010f6c:	1c41      	adds	r1, r0, #1
 8010f6e:	d1c8      	bne.n	8010f02 <__sflush_r+0x36>
 8010f70:	682b      	ldr	r3, [r5, #0]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d0c5      	beq.n	8010f02 <__sflush_r+0x36>
 8010f76:	2b1d      	cmp	r3, #29
 8010f78:	d001      	beq.n	8010f7e <__sflush_r+0xb2>
 8010f7a:	2b16      	cmp	r3, #22
 8010f7c:	d101      	bne.n	8010f82 <__sflush_r+0xb6>
 8010f7e:	602f      	str	r7, [r5, #0]
 8010f80:	e7b1      	b.n	8010ee6 <__sflush_r+0x1a>
 8010f82:	89a3      	ldrh	r3, [r4, #12]
 8010f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f88:	81a3      	strh	r3, [r4, #12]
 8010f8a:	e7ad      	b.n	8010ee8 <__sflush_r+0x1c>
 8010f8c:	690f      	ldr	r7, [r1, #16]
 8010f8e:	2f00      	cmp	r7, #0
 8010f90:	d0a9      	beq.n	8010ee6 <__sflush_r+0x1a>
 8010f92:	0793      	lsls	r3, r2, #30
 8010f94:	680e      	ldr	r6, [r1, #0]
 8010f96:	bf08      	it	eq
 8010f98:	694b      	ldreq	r3, [r1, #20]
 8010f9a:	600f      	str	r7, [r1, #0]
 8010f9c:	bf18      	it	ne
 8010f9e:	2300      	movne	r3, #0
 8010fa0:	eba6 0807 	sub.w	r8, r6, r7
 8010fa4:	608b      	str	r3, [r1, #8]
 8010fa6:	f1b8 0f00 	cmp.w	r8, #0
 8010faa:	dd9c      	ble.n	8010ee6 <__sflush_r+0x1a>
 8010fac:	6a21      	ldr	r1, [r4, #32]
 8010fae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010fb0:	4643      	mov	r3, r8
 8010fb2:	463a      	mov	r2, r7
 8010fb4:	4628      	mov	r0, r5
 8010fb6:	47b0      	blx	r6
 8010fb8:	2800      	cmp	r0, #0
 8010fba:	dc06      	bgt.n	8010fca <__sflush_r+0xfe>
 8010fbc:	89a3      	ldrh	r3, [r4, #12]
 8010fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010fc2:	81a3      	strh	r3, [r4, #12]
 8010fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8010fc8:	e78e      	b.n	8010ee8 <__sflush_r+0x1c>
 8010fca:	4407      	add	r7, r0
 8010fcc:	eba8 0800 	sub.w	r8, r8, r0
 8010fd0:	e7e9      	b.n	8010fa6 <__sflush_r+0xda>
 8010fd2:	bf00      	nop
 8010fd4:	dfbffffe 	.word	0xdfbffffe

08010fd8 <_fflush_r>:
 8010fd8:	b538      	push	{r3, r4, r5, lr}
 8010fda:	690b      	ldr	r3, [r1, #16]
 8010fdc:	4605      	mov	r5, r0
 8010fde:	460c      	mov	r4, r1
 8010fe0:	b913      	cbnz	r3, 8010fe8 <_fflush_r+0x10>
 8010fe2:	2500      	movs	r5, #0
 8010fe4:	4628      	mov	r0, r5
 8010fe6:	bd38      	pop	{r3, r4, r5, pc}
 8010fe8:	b118      	cbz	r0, 8010ff2 <_fflush_r+0x1a>
 8010fea:	6a03      	ldr	r3, [r0, #32]
 8010fec:	b90b      	cbnz	r3, 8010ff2 <_fflush_r+0x1a>
 8010fee:	f7fe f8d5 	bl	800f19c <__sinit>
 8010ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d0f3      	beq.n	8010fe2 <_fflush_r+0xa>
 8010ffa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010ffc:	07d0      	lsls	r0, r2, #31
 8010ffe:	d404      	bmi.n	801100a <_fflush_r+0x32>
 8011000:	0599      	lsls	r1, r3, #22
 8011002:	d402      	bmi.n	801100a <_fflush_r+0x32>
 8011004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011006:	f7fe fb17 	bl	800f638 <__retarget_lock_acquire_recursive>
 801100a:	4628      	mov	r0, r5
 801100c:	4621      	mov	r1, r4
 801100e:	f7ff ff5d 	bl	8010ecc <__sflush_r>
 8011012:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011014:	07da      	lsls	r2, r3, #31
 8011016:	4605      	mov	r5, r0
 8011018:	d4e4      	bmi.n	8010fe4 <_fflush_r+0xc>
 801101a:	89a3      	ldrh	r3, [r4, #12]
 801101c:	059b      	lsls	r3, r3, #22
 801101e:	d4e1      	bmi.n	8010fe4 <_fflush_r+0xc>
 8011020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011022:	f7fe fb0a 	bl	800f63a <__retarget_lock_release_recursive>
 8011026:	e7dd      	b.n	8010fe4 <_fflush_r+0xc>

08011028 <__swhatbuf_r>:
 8011028:	b570      	push	{r4, r5, r6, lr}
 801102a:	460c      	mov	r4, r1
 801102c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011030:	2900      	cmp	r1, #0
 8011032:	b096      	sub	sp, #88	; 0x58
 8011034:	4615      	mov	r5, r2
 8011036:	461e      	mov	r6, r3
 8011038:	da0d      	bge.n	8011056 <__swhatbuf_r+0x2e>
 801103a:	89a3      	ldrh	r3, [r4, #12]
 801103c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011040:	f04f 0100 	mov.w	r1, #0
 8011044:	bf0c      	ite	eq
 8011046:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801104a:	2340      	movne	r3, #64	; 0x40
 801104c:	2000      	movs	r0, #0
 801104e:	6031      	str	r1, [r6, #0]
 8011050:	602b      	str	r3, [r5, #0]
 8011052:	b016      	add	sp, #88	; 0x58
 8011054:	bd70      	pop	{r4, r5, r6, pc}
 8011056:	466a      	mov	r2, sp
 8011058:	f000 f848 	bl	80110ec <_fstat_r>
 801105c:	2800      	cmp	r0, #0
 801105e:	dbec      	blt.n	801103a <__swhatbuf_r+0x12>
 8011060:	9901      	ldr	r1, [sp, #4]
 8011062:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011066:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801106a:	4259      	negs	r1, r3
 801106c:	4159      	adcs	r1, r3
 801106e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011072:	e7eb      	b.n	801104c <__swhatbuf_r+0x24>

08011074 <__smakebuf_r>:
 8011074:	898b      	ldrh	r3, [r1, #12]
 8011076:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011078:	079d      	lsls	r5, r3, #30
 801107a:	4606      	mov	r6, r0
 801107c:	460c      	mov	r4, r1
 801107e:	d507      	bpl.n	8011090 <__smakebuf_r+0x1c>
 8011080:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011084:	6023      	str	r3, [r4, #0]
 8011086:	6123      	str	r3, [r4, #16]
 8011088:	2301      	movs	r3, #1
 801108a:	6163      	str	r3, [r4, #20]
 801108c:	b002      	add	sp, #8
 801108e:	bd70      	pop	{r4, r5, r6, pc}
 8011090:	ab01      	add	r3, sp, #4
 8011092:	466a      	mov	r2, sp
 8011094:	f7ff ffc8 	bl	8011028 <__swhatbuf_r>
 8011098:	9900      	ldr	r1, [sp, #0]
 801109a:	4605      	mov	r5, r0
 801109c:	4630      	mov	r0, r6
 801109e:	f7ff f9c9 	bl	8010434 <_malloc_r>
 80110a2:	b948      	cbnz	r0, 80110b8 <__smakebuf_r+0x44>
 80110a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110a8:	059a      	lsls	r2, r3, #22
 80110aa:	d4ef      	bmi.n	801108c <__smakebuf_r+0x18>
 80110ac:	f023 0303 	bic.w	r3, r3, #3
 80110b0:	f043 0302 	orr.w	r3, r3, #2
 80110b4:	81a3      	strh	r3, [r4, #12]
 80110b6:	e7e3      	b.n	8011080 <__smakebuf_r+0xc>
 80110b8:	89a3      	ldrh	r3, [r4, #12]
 80110ba:	6020      	str	r0, [r4, #0]
 80110bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110c0:	81a3      	strh	r3, [r4, #12]
 80110c2:	9b00      	ldr	r3, [sp, #0]
 80110c4:	6163      	str	r3, [r4, #20]
 80110c6:	9b01      	ldr	r3, [sp, #4]
 80110c8:	6120      	str	r0, [r4, #16]
 80110ca:	b15b      	cbz	r3, 80110e4 <__smakebuf_r+0x70>
 80110cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80110d0:	4630      	mov	r0, r6
 80110d2:	f000 f81d 	bl	8011110 <_isatty_r>
 80110d6:	b128      	cbz	r0, 80110e4 <__smakebuf_r+0x70>
 80110d8:	89a3      	ldrh	r3, [r4, #12]
 80110da:	f023 0303 	bic.w	r3, r3, #3
 80110de:	f043 0301 	orr.w	r3, r3, #1
 80110e2:	81a3      	strh	r3, [r4, #12]
 80110e4:	89a3      	ldrh	r3, [r4, #12]
 80110e6:	431d      	orrs	r5, r3
 80110e8:	81a5      	strh	r5, [r4, #12]
 80110ea:	e7cf      	b.n	801108c <__smakebuf_r+0x18>

080110ec <_fstat_r>:
 80110ec:	b538      	push	{r3, r4, r5, lr}
 80110ee:	4d07      	ldr	r5, [pc, #28]	; (801110c <_fstat_r+0x20>)
 80110f0:	2300      	movs	r3, #0
 80110f2:	4604      	mov	r4, r0
 80110f4:	4608      	mov	r0, r1
 80110f6:	4611      	mov	r1, r2
 80110f8:	602b      	str	r3, [r5, #0]
 80110fa:	f7f1 fa9c 	bl	8002636 <_fstat>
 80110fe:	1c43      	adds	r3, r0, #1
 8011100:	d102      	bne.n	8011108 <_fstat_r+0x1c>
 8011102:	682b      	ldr	r3, [r5, #0]
 8011104:	b103      	cbz	r3, 8011108 <_fstat_r+0x1c>
 8011106:	6023      	str	r3, [r4, #0]
 8011108:	bd38      	pop	{r3, r4, r5, pc}
 801110a:	bf00      	nop
 801110c:	2000581c 	.word	0x2000581c

08011110 <_isatty_r>:
 8011110:	b538      	push	{r3, r4, r5, lr}
 8011112:	4d06      	ldr	r5, [pc, #24]	; (801112c <_isatty_r+0x1c>)
 8011114:	2300      	movs	r3, #0
 8011116:	4604      	mov	r4, r0
 8011118:	4608      	mov	r0, r1
 801111a:	602b      	str	r3, [r5, #0]
 801111c:	f7f1 fa9b 	bl	8002656 <_isatty>
 8011120:	1c43      	adds	r3, r0, #1
 8011122:	d102      	bne.n	801112a <_isatty_r+0x1a>
 8011124:	682b      	ldr	r3, [r5, #0]
 8011126:	b103      	cbz	r3, 801112a <_isatty_r+0x1a>
 8011128:	6023      	str	r3, [r4, #0]
 801112a:	bd38      	pop	{r3, r4, r5, pc}
 801112c:	2000581c 	.word	0x2000581c

08011130 <_sbrk_r>:
 8011130:	b538      	push	{r3, r4, r5, lr}
 8011132:	4d06      	ldr	r5, [pc, #24]	; (801114c <_sbrk_r+0x1c>)
 8011134:	2300      	movs	r3, #0
 8011136:	4604      	mov	r4, r0
 8011138:	4608      	mov	r0, r1
 801113a:	602b      	str	r3, [r5, #0]
 801113c:	f7f1 faa4 	bl	8002688 <_sbrk>
 8011140:	1c43      	adds	r3, r0, #1
 8011142:	d102      	bne.n	801114a <_sbrk_r+0x1a>
 8011144:	682b      	ldr	r3, [r5, #0]
 8011146:	b103      	cbz	r3, 801114a <_sbrk_r+0x1a>
 8011148:	6023      	str	r3, [r4, #0]
 801114a:	bd38      	pop	{r3, r4, r5, pc}
 801114c:	2000581c 	.word	0x2000581c

08011150 <__assert_func>:
 8011150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011152:	4614      	mov	r4, r2
 8011154:	461a      	mov	r2, r3
 8011156:	4b09      	ldr	r3, [pc, #36]	; (801117c <__assert_func+0x2c>)
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	4605      	mov	r5, r0
 801115c:	68d8      	ldr	r0, [r3, #12]
 801115e:	b14c      	cbz	r4, 8011174 <__assert_func+0x24>
 8011160:	4b07      	ldr	r3, [pc, #28]	; (8011180 <__assert_func+0x30>)
 8011162:	9100      	str	r1, [sp, #0]
 8011164:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011168:	4906      	ldr	r1, [pc, #24]	; (8011184 <__assert_func+0x34>)
 801116a:	462b      	mov	r3, r5
 801116c:	f000 f844 	bl	80111f8 <fiprintf>
 8011170:	f000 f854 	bl	801121c <abort>
 8011174:	4b04      	ldr	r3, [pc, #16]	; (8011188 <__assert_func+0x38>)
 8011176:	461c      	mov	r4, r3
 8011178:	e7f3      	b.n	8011162 <__assert_func+0x12>
 801117a:	bf00      	nop
 801117c:	2000006c 	.word	0x2000006c
 8011180:	08011fc7 	.word	0x08011fc7
 8011184:	08011fd4 	.word	0x08011fd4
 8011188:	08012002 	.word	0x08012002

0801118c <_calloc_r>:
 801118c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801118e:	fba1 2402 	umull	r2, r4, r1, r2
 8011192:	b94c      	cbnz	r4, 80111a8 <_calloc_r+0x1c>
 8011194:	4611      	mov	r1, r2
 8011196:	9201      	str	r2, [sp, #4]
 8011198:	f7ff f94c 	bl	8010434 <_malloc_r>
 801119c:	9a01      	ldr	r2, [sp, #4]
 801119e:	4605      	mov	r5, r0
 80111a0:	b930      	cbnz	r0, 80111b0 <_calloc_r+0x24>
 80111a2:	4628      	mov	r0, r5
 80111a4:	b003      	add	sp, #12
 80111a6:	bd30      	pop	{r4, r5, pc}
 80111a8:	220c      	movs	r2, #12
 80111aa:	6002      	str	r2, [r0, #0]
 80111ac:	2500      	movs	r5, #0
 80111ae:	e7f8      	b.n	80111a2 <_calloc_r+0x16>
 80111b0:	4621      	mov	r1, r4
 80111b2:	f7fe f96f 	bl	800f494 <memset>
 80111b6:	e7f4      	b.n	80111a2 <_calloc_r+0x16>

080111b8 <__ascii_mbtowc>:
 80111b8:	b082      	sub	sp, #8
 80111ba:	b901      	cbnz	r1, 80111be <__ascii_mbtowc+0x6>
 80111bc:	a901      	add	r1, sp, #4
 80111be:	b142      	cbz	r2, 80111d2 <__ascii_mbtowc+0x1a>
 80111c0:	b14b      	cbz	r3, 80111d6 <__ascii_mbtowc+0x1e>
 80111c2:	7813      	ldrb	r3, [r2, #0]
 80111c4:	600b      	str	r3, [r1, #0]
 80111c6:	7812      	ldrb	r2, [r2, #0]
 80111c8:	1e10      	subs	r0, r2, #0
 80111ca:	bf18      	it	ne
 80111cc:	2001      	movne	r0, #1
 80111ce:	b002      	add	sp, #8
 80111d0:	4770      	bx	lr
 80111d2:	4610      	mov	r0, r2
 80111d4:	e7fb      	b.n	80111ce <__ascii_mbtowc+0x16>
 80111d6:	f06f 0001 	mvn.w	r0, #1
 80111da:	e7f8      	b.n	80111ce <__ascii_mbtowc+0x16>

080111dc <__ascii_wctomb>:
 80111dc:	b149      	cbz	r1, 80111f2 <__ascii_wctomb+0x16>
 80111de:	2aff      	cmp	r2, #255	; 0xff
 80111e0:	bf85      	ittet	hi
 80111e2:	238a      	movhi	r3, #138	; 0x8a
 80111e4:	6003      	strhi	r3, [r0, #0]
 80111e6:	700a      	strbls	r2, [r1, #0]
 80111e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80111ec:	bf98      	it	ls
 80111ee:	2001      	movls	r0, #1
 80111f0:	4770      	bx	lr
 80111f2:	4608      	mov	r0, r1
 80111f4:	4770      	bx	lr
	...

080111f8 <fiprintf>:
 80111f8:	b40e      	push	{r1, r2, r3}
 80111fa:	b503      	push	{r0, r1, lr}
 80111fc:	4601      	mov	r1, r0
 80111fe:	ab03      	add	r3, sp, #12
 8011200:	4805      	ldr	r0, [pc, #20]	; (8011218 <fiprintf+0x20>)
 8011202:	f853 2b04 	ldr.w	r2, [r3], #4
 8011206:	6800      	ldr	r0, [r0, #0]
 8011208:	9301      	str	r3, [sp, #4]
 801120a:	f7ff fd45 	bl	8010c98 <_vfiprintf_r>
 801120e:	b002      	add	sp, #8
 8011210:	f85d eb04 	ldr.w	lr, [sp], #4
 8011214:	b003      	add	sp, #12
 8011216:	4770      	bx	lr
 8011218:	2000006c 	.word	0x2000006c

0801121c <abort>:
 801121c:	b508      	push	{r3, lr}
 801121e:	2006      	movs	r0, #6
 8011220:	f000 f82c 	bl	801127c <raise>
 8011224:	2001      	movs	r0, #1
 8011226:	f7f1 f9b7 	bl	8002598 <_exit>

0801122a <_raise_r>:
 801122a:	291f      	cmp	r1, #31
 801122c:	b538      	push	{r3, r4, r5, lr}
 801122e:	4604      	mov	r4, r0
 8011230:	460d      	mov	r5, r1
 8011232:	d904      	bls.n	801123e <_raise_r+0x14>
 8011234:	2316      	movs	r3, #22
 8011236:	6003      	str	r3, [r0, #0]
 8011238:	f04f 30ff 	mov.w	r0, #4294967295
 801123c:	bd38      	pop	{r3, r4, r5, pc}
 801123e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011240:	b112      	cbz	r2, 8011248 <_raise_r+0x1e>
 8011242:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011246:	b94b      	cbnz	r3, 801125c <_raise_r+0x32>
 8011248:	4620      	mov	r0, r4
 801124a:	f000 f831 	bl	80112b0 <_getpid_r>
 801124e:	462a      	mov	r2, r5
 8011250:	4601      	mov	r1, r0
 8011252:	4620      	mov	r0, r4
 8011254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011258:	f000 b818 	b.w	801128c <_kill_r>
 801125c:	2b01      	cmp	r3, #1
 801125e:	d00a      	beq.n	8011276 <_raise_r+0x4c>
 8011260:	1c59      	adds	r1, r3, #1
 8011262:	d103      	bne.n	801126c <_raise_r+0x42>
 8011264:	2316      	movs	r3, #22
 8011266:	6003      	str	r3, [r0, #0]
 8011268:	2001      	movs	r0, #1
 801126a:	e7e7      	b.n	801123c <_raise_r+0x12>
 801126c:	2400      	movs	r4, #0
 801126e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011272:	4628      	mov	r0, r5
 8011274:	4798      	blx	r3
 8011276:	2000      	movs	r0, #0
 8011278:	e7e0      	b.n	801123c <_raise_r+0x12>
	...

0801127c <raise>:
 801127c:	4b02      	ldr	r3, [pc, #8]	; (8011288 <raise+0xc>)
 801127e:	4601      	mov	r1, r0
 8011280:	6818      	ldr	r0, [r3, #0]
 8011282:	f7ff bfd2 	b.w	801122a <_raise_r>
 8011286:	bf00      	nop
 8011288:	2000006c 	.word	0x2000006c

0801128c <_kill_r>:
 801128c:	b538      	push	{r3, r4, r5, lr}
 801128e:	4d07      	ldr	r5, [pc, #28]	; (80112ac <_kill_r+0x20>)
 8011290:	2300      	movs	r3, #0
 8011292:	4604      	mov	r4, r0
 8011294:	4608      	mov	r0, r1
 8011296:	4611      	mov	r1, r2
 8011298:	602b      	str	r3, [r5, #0]
 801129a:	f7f1 f96d 	bl	8002578 <_kill>
 801129e:	1c43      	adds	r3, r0, #1
 80112a0:	d102      	bne.n	80112a8 <_kill_r+0x1c>
 80112a2:	682b      	ldr	r3, [r5, #0]
 80112a4:	b103      	cbz	r3, 80112a8 <_kill_r+0x1c>
 80112a6:	6023      	str	r3, [r4, #0]
 80112a8:	bd38      	pop	{r3, r4, r5, pc}
 80112aa:	bf00      	nop
 80112ac:	2000581c 	.word	0x2000581c

080112b0 <_getpid_r>:
 80112b0:	f7f1 b95a 	b.w	8002568 <_getpid>

080112b4 <_init>:
 80112b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112b6:	bf00      	nop
 80112b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112ba:	bc08      	pop	{r3}
 80112bc:	469e      	mov	lr, r3
 80112be:	4770      	bx	lr

080112c0 <_fini>:
 80112c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112c2:	bf00      	nop
 80112c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112c6:	bc08      	pop	{r3}
 80112c8:	469e      	mov	lr, r3
 80112ca:	4770      	bx	lr
