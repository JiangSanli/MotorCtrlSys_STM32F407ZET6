
MotorCtrlSys_STM32F407ZET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001037c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c0  08010510  08010510  00020510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010cd0  08010cd0  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08010cd0  08010cd0  00020cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010cd8  08010cd8  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010cd8  08010cd8  00020cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010cdc  08010cdc  00020cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08010ce0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e8  2**0
                  CONTENTS
 10 .bss          000054e8  200001e8  200001e8  000301e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200056d0  200056d0  000301e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028760  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000059b8  00000000  00000000  00058978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f90  00000000  00000000  0005e330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d40  00000000  00000000  000602c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b9ff  00000000  00000000  00062000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002af1a  00000000  00000000  0008d9ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eed56  00000000  00000000  000b8919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a766f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000092d0  00000000  00000000  001a76c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080104f4 	.word	0x080104f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	080104f4 	.word	0x080104f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f52:	463b      	mov	r3, r7
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f5e:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <MX_ADC1_Init+0x98>)
 8000f60:	4a21      	ldr	r2, [pc, #132]	; (8000fe8 <MX_ADC1_Init+0x9c>)
 8000f62:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f64:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <MX_ADC1_Init+0x98>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <MX_ADC1_Init+0x98>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f70:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <MX_ADC1_Init+0x98>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f76:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <MX_ADC1_Init+0x98>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f7c:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <MX_ADC1_Init+0x98>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f84:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <MX_ADC1_Init+0x98>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <MX_ADC1_Init+0x98>)
 8000f8c:	4a17      	ldr	r2, [pc, #92]	; (8000fec <MX_ADC1_Init+0xa0>)
 8000f8e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <MX_ADC1_Init+0x98>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <MX_ADC1_Init+0x98>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f9c:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <MX_ADC1_Init+0x98>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MX_ADC1_Init+0x98>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000faa:	480e      	ldr	r0, [pc, #56]	; (8000fe4 <MX_ADC1_Init+0x98>)
 8000fac:	f003 fe90 	bl	8004cd0 <HAL_ADC_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fb6:	f001 fc39 	bl	800282c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000fba:	230a      	movs	r3, #10
 8000fbc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4806      	ldr	r0, [pc, #24]	; (8000fe4 <MX_ADC1_Init+0x98>)
 8000fcc:	f003 fec4 	bl	8004d58 <HAL_ADC_ConfigChannel>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000fd6:	f001 fc29 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000204 	.word	0x20000204
 8000fe8:	40012000 	.word	0x40012000
 8000fec:	0f000001 	.word	0x0f000001

08000ff0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001002:	4b21      	ldr	r3, [pc, #132]	; (8001088 <MX_ADC2_Init+0x98>)
 8001004:	4a21      	ldr	r2, [pc, #132]	; (800108c <MX_ADC2_Init+0x9c>)
 8001006:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001008:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <MX_ADC2_Init+0x98>)
 800100a:	2200      	movs	r2, #0
 800100c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800100e:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <MX_ADC2_Init+0x98>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001014:	4b1c      	ldr	r3, [pc, #112]	; (8001088 <MX_ADC2_Init+0x98>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800101a:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <MX_ADC2_Init+0x98>)
 800101c:	2200      	movs	r2, #0
 800101e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001020:	4b19      	ldr	r3, [pc, #100]	; (8001088 <MX_ADC2_Init+0x98>)
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001028:	4b17      	ldr	r3, [pc, #92]	; (8001088 <MX_ADC2_Init+0x98>)
 800102a:	2200      	movs	r2, #0
 800102c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800102e:	4b16      	ldr	r3, [pc, #88]	; (8001088 <MX_ADC2_Init+0x98>)
 8001030:	4a17      	ldr	r2, [pc, #92]	; (8001090 <MX_ADC2_Init+0xa0>)
 8001032:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <MX_ADC2_Init+0x98>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <MX_ADC2_Init+0x98>)
 800103c:	2201      	movs	r2, #1
 800103e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_ADC2_Init+0x98>)
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_ADC2_Init+0x98>)
 800104a:	2201      	movs	r2, #1
 800104c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800104e:	480e      	ldr	r0, [pc, #56]	; (8001088 <MX_ADC2_Init+0x98>)
 8001050:	f003 fe3e 	bl	8004cd0 <HAL_ADC_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800105a:	f001 fbe7 	bl	800282c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800105e:	230c      	movs	r3, #12
 8001060:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001062:	2301      	movs	r3, #1
 8001064:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800106a:	463b      	mov	r3, r7
 800106c:	4619      	mov	r1, r3
 800106e:	4806      	ldr	r0, [pc, #24]	; (8001088 <MX_ADC2_Init+0x98>)
 8001070:	f003 fe72 	bl	8004d58 <HAL_ADC_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800107a:	f001 fbd7 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	2000024c 	.word	0x2000024c
 800108c:	40012100 	.word	0x40012100
 8001090:	0f000001 	.word	0x0f000001

08001094 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08c      	sub	sp, #48	; 0x30
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a2e      	ldr	r2, [pc, #184]	; (800116c <HAL_ADC_MspInit+0xd8>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d128      	bne.n	8001108 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
 80010ba:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <HAL_ADC_MspInit+0xdc>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	4a2c      	ldr	r2, [pc, #176]	; (8001170 <HAL_ADC_MspInit+0xdc>)
 80010c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c4:	6453      	str	r3, [r2, #68]	; 0x44
 80010c6:	4b2a      	ldr	r3, [pc, #168]	; (8001170 <HAL_ADC_MspInit+0xdc>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ce:	61bb      	str	r3, [r7, #24]
 80010d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	4b26      	ldr	r3, [pc, #152]	; (8001170 <HAL_ADC_MspInit+0xdc>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a25      	ldr	r2, [pc, #148]	; (8001170 <HAL_ADC_MspInit+0xdc>)
 80010dc:	f043 0304 	orr.w	r3, r3, #4
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b23      	ldr	r3, [pc, #140]	; (8001170 <HAL_ADC_MspInit+0xdc>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0304 	and.w	r3, r3, #4
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = VM6_SensA_ADC_Pin|VM6_SensB_ADC_Pin;
 80010ee:	2303      	movs	r3, #3
 80010f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f2:	2303      	movs	r3, #3
 80010f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	4619      	mov	r1, r3
 8001100:	481c      	ldr	r0, [pc, #112]	; (8001174 <HAL_ADC_MspInit+0xe0>)
 8001102:	f004 fe8f 	bl	8005e24 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001106:	e02c      	b.n	8001162 <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a1a      	ldr	r2, [pc, #104]	; (8001178 <HAL_ADC_MspInit+0xe4>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d127      	bne.n	8001162 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b16      	ldr	r3, [pc, #88]	; (8001170 <HAL_ADC_MspInit+0xdc>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	4a15      	ldr	r2, [pc, #84]	; (8001170 <HAL_ADC_MspInit+0xdc>)
 800111c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001120:	6453      	str	r3, [r2, #68]	; 0x44
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <HAL_ADC_MspInit+0xdc>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <HAL_ADC_MspInit+0xdc>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a0e      	ldr	r2, [pc, #56]	; (8001170 <HAL_ADC_MspInit+0xdc>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <HAL_ADC_MspInit+0xdc>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VM8_SensA_ADC_Pin|VM8_SensB_ADC_Pin;
 800114a:	230c      	movs	r3, #12
 800114c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800114e:	2303      	movs	r3, #3
 8001150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	4619      	mov	r1, r3
 800115c:	4805      	ldr	r0, [pc, #20]	; (8001174 <HAL_ADC_MspInit+0xe0>)
 800115e:	f004 fe61 	bl	8005e24 <HAL_GPIO_Init>
}
 8001162:	bf00      	nop
 8001164:	3730      	adds	r7, #48	; 0x30
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40012000 	.word	0x40012000
 8001170:	40023800 	.word	0x40023800
 8001174:	40020800 	.word	0x40020800
 8001178:	40012100 	.word	0x40012100

0800117c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001180:	4b16      	ldr	r3, [pc, #88]	; (80011dc <MX_CAN1_Init+0x60>)
 8001182:	4a17      	ldr	r2, [pc, #92]	; (80011e0 <MX_CAN1_Init+0x64>)
 8001184:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <MX_CAN1_Init+0x60>)
 8001188:	2210      	movs	r2, #16
 800118a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <MX_CAN1_Init+0x60>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MX_CAN1_Init+0x60>)
 8001194:	2200      	movs	r2, #0
 8001196:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001198:	4b10      	ldr	r3, [pc, #64]	; (80011dc <MX_CAN1_Init+0x60>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800119e:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_CAN1_Init+0x60>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80011a4:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <MX_CAN1_Init+0x60>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_CAN1_Init+0x60>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MX_CAN1_Init+0x60>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_CAN1_Init+0x60>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <MX_CAN1_Init+0x60>)
 80011be:	2200      	movs	r2, #0
 80011c0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_CAN1_Init+0x60>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80011c8:	4804      	ldr	r0, [pc, #16]	; (80011dc <MX_CAN1_Init+0x60>)
 80011ca:	f003 ffe3 	bl	8005194 <HAL_CAN_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80011d4:	f001 fb2a 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000294 	.word	0x20000294
 80011e0:	40006400 	.word	0x40006400

080011e4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a19      	ldr	r2, [pc, #100]	; (8001268 <HAL_CAN_MspInit+0x84>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d12c      	bne.n	8001260 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <HAL_CAN_MspInit+0x88>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	4a17      	ldr	r2, [pc, #92]	; (800126c <HAL_CAN_MspInit+0x88>)
 8001210:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001214:	6413      	str	r3, [r2, #64]	; 0x40
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <HAL_CAN_MspInit+0x88>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_CAN_MspInit+0x88>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a10      	ldr	r2, [pc, #64]	; (800126c <HAL_CAN_MspInit+0x88>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <HAL_CAN_MspInit+0x88>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800123e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124c:	2303      	movs	r3, #3
 800124e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001250:	2309      	movs	r3, #9
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <HAL_CAN_MspInit+0x8c>)
 800125c:	f004 fde2 	bl	8005e24 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001260:	bf00      	nop
 8001262:	3728      	adds	r7, #40	; 0x28
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40006400 	.word	0x40006400
 800126c:	40023800 	.word	0x40023800
 8001270:	40020000 	.word	0x40020000

08001274 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800127a:	463b      	mov	r3, r7
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <MX_DAC_Init+0x4c>)
 8001284:	4a0f      	ldr	r2, [pc, #60]	; (80012c4 <MX_DAC_Init+0x50>)
 8001286:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001288:	480d      	ldr	r0, [pc, #52]	; (80012c0 <MX_DAC_Init+0x4c>)
 800128a:	f004 f961 	bl	8005550 <HAL_DAC_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001294:	f001 faca 	bl	800282c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001298:	2300      	movs	r3, #0
 800129a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800129c:	2300      	movs	r3, #0
 800129e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80012a0:	463b      	mov	r3, r7
 80012a2:	2200      	movs	r2, #0
 80012a4:	4619      	mov	r1, r3
 80012a6:	4806      	ldr	r0, [pc, #24]	; (80012c0 <MX_DAC_Init+0x4c>)
 80012a8:	f004 f9d8 	bl	800565c <HAL_DAC_ConfigChannel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80012b2:	f001 fabb 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200002bc 	.word	0x200002bc
 80012c4:	40007400 	.word	0x40007400

080012c8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a1b      	ldr	r2, [pc, #108]	; (8001354 <HAL_DAC_MspInit+0x8c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d12f      	bne.n	800134a <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <HAL_DAC_MspInit+0x90>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	4a19      	ldr	r2, [pc, #100]	; (8001358 <HAL_DAC_MspInit+0x90>)
 80012f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012f8:	6413      	str	r3, [r2, #64]	; 0x40
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <HAL_DAC_MspInit+0x90>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <HAL_DAC_MspInit+0x90>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a12      	ldr	r2, [pc, #72]	; (8001358 <HAL_DAC_MspInit+0x90>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <HAL_DAC_MspInit+0x90>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001322:	2310      	movs	r3, #16
 8001324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001326:	2303      	movs	r3, #3
 8001328:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	4809      	ldr	r0, [pc, #36]	; (800135c <HAL_DAC_MspInit+0x94>)
 8001336:	f004 fd75 	bl	8005e24 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 7, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2107      	movs	r1, #7
 800133e:	2036      	movs	r0, #54	; 0x36
 8001340:	f004 f8dc 	bl	80054fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001344:	2036      	movs	r0, #54	; 0x36
 8001346:	f004 f8f5 	bl	8005534 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800134a:	bf00      	nop
 800134c:	3728      	adds	r7, #40	; 0x28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40007400 	.word	0x40007400
 8001358:	40023800 	.word	0x40023800
 800135c:	40020000 	.word	0x40020000

08001360 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_DMA_Init+0x3c>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a0b      	ldr	r2, [pc, #44]	; (800139c <MX_DMA_Init+0x3c>)
 8001370:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_DMA_Init+0x3c>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 7, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2107      	movs	r1, #7
 8001386:	200d      	movs	r0, #13
 8001388:	f004 f8b8 	bl	80054fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800138c:	200d      	movs	r0, #13
 800138e:	f004 f8d1 	bl	8005534 <HAL_NVIC_EnableIRQ>

}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800

080013a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80013a4:	4a10      	ldr	r2, [pc, #64]	; (80013e8 <MX_FREERTOS_Init+0x48>)
 80013a6:	2100      	movs	r1, #0
 80013a8:	4810      	ldr	r0, [pc, #64]	; (80013ec <MX_FREERTOS_Init+0x4c>)
 80013aa:	f009 fd2b 	bl	800ae04 <osThreadNew>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4a0f      	ldr	r2, [pc, #60]	; (80013f0 <MX_FREERTOS_Init+0x50>)
 80013b2:	6013      	str	r3, [r2, #0]

  /* creation of messageTask */
  messageTaskHandle = osThreadNew(StartmessageTask, NULL, &messageTask_attributes);
 80013b4:	4a0f      	ldr	r2, [pc, #60]	; (80013f4 <MX_FREERTOS_Init+0x54>)
 80013b6:	2100      	movs	r1, #0
 80013b8:	480f      	ldr	r0, [pc, #60]	; (80013f8 <MX_FREERTOS_Init+0x58>)
 80013ba:	f009 fd23 	bl	800ae04 <osThreadNew>
 80013be:	4603      	mov	r3, r0
 80013c0:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <MX_FREERTOS_Init+0x5c>)
 80013c2:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 80013c4:	4a0e      	ldr	r2, [pc, #56]	; (8001400 <MX_FREERTOS_Init+0x60>)
 80013c6:	2100      	movs	r1, #0
 80013c8:	480e      	ldr	r0, [pc, #56]	; (8001404 <MX_FREERTOS_Init+0x64>)
 80013ca:	f009 fd1b 	bl	800ae04 <osThreadNew>
 80013ce:	4603      	mov	r3, r0
 80013d0:	4a0d      	ldr	r2, [pc, #52]	; (8001408 <MX_FREERTOS_Init+0x68>)
 80013d2:	6013      	str	r3, [r2, #0]

  /* creation of DetectionTask */
  DetectionTaskHandle = osThreadNew(StartDetectionTask, NULL, &DetectionTask_attributes);
 80013d4:	4a0d      	ldr	r2, [pc, #52]	; (800140c <MX_FREERTOS_Init+0x6c>)
 80013d6:	2100      	movs	r1, #0
 80013d8:	480d      	ldr	r0, [pc, #52]	; (8001410 <MX_FREERTOS_Init+0x70>)
 80013da:	f009 fd13 	bl	800ae04 <osThreadNew>
 80013de:	4603      	mov	r3, r0
 80013e0:	4a0c      	ldr	r2, [pc, #48]	; (8001414 <MX_FREERTOS_Init+0x74>)
 80013e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	08010830 	.word	0x08010830
 80013ec:	08001419 	.word	0x08001419
 80013f0:	200002d0 	.word	0x200002d0
 80013f4:	08010854 	.word	0x08010854
 80013f8:	08004845 	.word	0x08004845
 80013fc:	200002d4 	.word	0x200002d4
 8001400:	08010878 	.word	0x08010878
 8001404:	08004939 	.word	0x08004939
 8001408:	200002d8 	.word	0x200002d8
 800140c:	0801089c 	.word	0x0801089c
 8001410:	08001439 	.word	0x08001439
 8001414:	200002dc 	.word	0x200002dc

08001418 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  LED_Heart_Toggle();
 8001420:	2120      	movs	r1, #32
 8001422:	4804      	ldr	r0, [pc, #16]	; (8001434 <StartDefaultTask+0x1c>)
 8001424:	f004 fecb 	bl	80061be <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8001428:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800142c:	f009 fd7c 	bl	800af28 <osDelay>
	  LED_Heart_Toggle();
 8001430:	e7f6      	b.n	8001420 <StartDefaultTask+0x8>
 8001432:	bf00      	nop
 8001434:	40021800 	.word	0x40021800

08001438 <StartDetectionTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDetectionTask */
__weak void StartDetectionTask(void *argument)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDetectionTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 8001440:	f242 7010 	movw	r0, #10000	; 0x2710
 8001444:	f009 fd70 	bl	800af28 <osDelay>
 8001448:	e7fa      	b.n	8001440 <StartDetectionTask+0x8>
	...

0800144c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08e      	sub	sp, #56	; 0x38
 8001450:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
 8001466:	4bb5      	ldr	r3, [pc, #724]	; (800173c <MX_GPIO_Init+0x2f0>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4ab4      	ldr	r2, [pc, #720]	; (800173c <MX_GPIO_Init+0x2f0>)
 800146c:	f043 0310 	orr.w	r3, r3, #16
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4bb2      	ldr	r3, [pc, #712]	; (800173c <MX_GPIO_Init+0x2f0>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0310 	and.w	r3, r3, #16
 800147a:	623b      	str	r3, [r7, #32]
 800147c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
 8001482:	4bae      	ldr	r3, [pc, #696]	; (800173c <MX_GPIO_Init+0x2f0>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4aad      	ldr	r2, [pc, #692]	; (800173c <MX_GPIO_Init+0x2f0>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4bab      	ldr	r3, [pc, #684]	; (800173c <MX_GPIO_Init+0x2f0>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	61fb      	str	r3, [r7, #28]
 8001498:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
 800149e:	4ba7      	ldr	r3, [pc, #668]	; (800173c <MX_GPIO_Init+0x2f0>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4aa6      	ldr	r2, [pc, #664]	; (800173c <MX_GPIO_Init+0x2f0>)
 80014a4:	f043 0320 	orr.w	r3, r3, #32
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4ba4      	ldr	r3, [pc, #656]	; (800173c <MX_GPIO_Init+0x2f0>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0320 	and.w	r3, r3, #32
 80014b2:	61bb      	str	r3, [r7, #24]
 80014b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	4ba0      	ldr	r3, [pc, #640]	; (800173c <MX_GPIO_Init+0x2f0>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a9f      	ldr	r2, [pc, #636]	; (800173c <MX_GPIO_Init+0x2f0>)
 80014c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b9d      	ldr	r3, [pc, #628]	; (800173c <MX_GPIO_Init+0x2f0>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	4b99      	ldr	r3, [pc, #612]	; (800173c <MX_GPIO_Init+0x2f0>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a98      	ldr	r2, [pc, #608]	; (800173c <MX_GPIO_Init+0x2f0>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b96      	ldr	r3, [pc, #600]	; (800173c <MX_GPIO_Init+0x2f0>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b92      	ldr	r3, [pc, #584]	; (800173c <MX_GPIO_Init+0x2f0>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a91      	ldr	r2, [pc, #580]	; (800173c <MX_GPIO_Init+0x2f0>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b8f      	ldr	r3, [pc, #572]	; (800173c <MX_GPIO_Init+0x2f0>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	4b8b      	ldr	r3, [pc, #556]	; (800173c <MX_GPIO_Init+0x2f0>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a8a      	ldr	r2, [pc, #552]	; (800173c <MX_GPIO_Init+0x2f0>)
 8001514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b88      	ldr	r3, [pc, #544]	; (800173c <MX_GPIO_Init+0x2f0>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	4b84      	ldr	r3, [pc, #528]	; (800173c <MX_GPIO_Init+0x2f0>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a83      	ldr	r2, [pc, #524]	; (800173c <MX_GPIO_Init+0x2f0>)
 8001530:	f043 0308 	orr.w	r3, r3, #8
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b81      	ldr	r3, [pc, #516]	; (800173c <MX_GPIO_Init+0x2f0>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VM4_Step_Pin|VM4_Dir_Pin|VM6_IN1_Pin|VM6_IN2_Pin
 8001542:	2200      	movs	r2, #0
 8001544:	f248 31f6 	movw	r1, #33782	; 0x83f6
 8001548:	487d      	ldr	r0, [pc, #500]	; (8001740 <MX_GPIO_Init+0x2f4>)
 800154a:	f004 fe1f 	bl	800618c <HAL_GPIO_WritePin>
                          |VM6_EnA_Pin|VM5_EnB_Pin|VM5_EnA_Pin|BEEP_Pin
                          |VM3_Dir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VM4_En_Pin|VM3_En_Pin, GPIO_PIN_SET);
 800154e:	2201      	movs	r2, #1
 8001550:	2109      	movs	r1, #9
 8001552:	487b      	ldr	r0, [pc, #492]	; (8001740 <MX_GPIO_Init+0x2f4>)
 8001554:	f004 fe1a 	bl	800618c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, FDCshutdown_Pin|OUT6_Pin|OUT5_Pin|OUT4_Pin
 8001558:	2200      	movs	r2, #0
 800155a:	f24e 71e8 	movw	r1, #59368	; 0xe7e8
 800155e:	4879      	ldr	r0, [pc, #484]	; (8001744 <MX_GPIO_Init+0x2f8>)
 8001560:	f004 fe14 	bl	800618c <HAL_GPIO_WritePin>
                          |OUT3_Pin|OUT2_Pin|OUT1_Pin|VM8_EnB_Pin
                          |VM8_EnA_Pin|VM7_EnB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VM8_IN3_Pin|VM8_IN4_Pin, GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	210c      	movs	r1, #12
 8001568:	4877      	ldr	r0, [pc, #476]	; (8001748 <MX_GPIO_Init+0x2fc>)
 800156a:	f004 fe0f 	bl	800618c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VM7_IN3_Pin|VM7_IN4_Pin|VM7_IN1_Pin|VM7_IN2_Pin
 800156e:	2200      	movs	r2, #0
 8001570:	f64f 716b 	movw	r1, #65387	; 0xff6b
 8001574:	4875      	ldr	r0, [pc, #468]	; (800174c <MX_GPIO_Init+0x300>)
 8001576:	f004 fe09 	bl	800618c <HAL_GPIO_WritePin>
                          |VM5_IN1_Pin|VM5_IN2_Pin|VM5_IN3_Pin|VM5_IN4_Pin
                          |VM1_Step_Pin|VM1_Dir_Pin|VM2_Step_Pin|VM2_Dir_Pin
                          |VM3_Step_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, VM7_EnA_Pin|VM6_EnB_Pin|LED_Heart_Pin, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	2123      	movs	r1, #35	; 0x23
 800157e:	4874      	ldr	r0, [pc, #464]	; (8001750 <MX_GPIO_Init+0x304>)
 8001580:	f004 fe04 	bl	800618c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, VM8_IN1_Pin|VM8_IN2_Pin, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800158a:	4872      	ldr	r0, [pc, #456]	; (8001754 <MX_GPIO_Init+0x308>)
 800158c:	f004 fdfe 	bl	800618c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED2_Pin|LED1_Pin|LED0_Pin, GPIO_PIN_SET);
 8001590:	2201      	movs	r2, #1
 8001592:	211c      	movs	r1, #28
 8001594:	486e      	ldr	r0, [pc, #440]	; (8001750 <MX_GPIO_Init+0x304>)
 8001596:	f004 fdf9 	bl	800618c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VM6_IN3_Pin|VM6_IN4_Pin, GPIO_PIN_RESET);
 800159a:	2200      	movs	r2, #0
 800159c:	f44f 7140 	mov.w	r1, #768	; 0x300
 80015a0:	486d      	ldr	r0, [pc, #436]	; (8001758 <MX_GPIO_Init+0x30c>)
 80015a2:	f004 fdf3 	bl	800618c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VM1_En_Pin|VM2_En_Pin, GPIO_PIN_SET);
 80015a6:	2201      	movs	r2, #1
 80015a8:	2190      	movs	r1, #144	; 0x90
 80015aa:	4868      	ldr	r0, [pc, #416]	; (800174c <MX_GPIO_Init+0x300>)
 80015ac:	f004 fdee 	bl	800618c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VM4_Step_Pin;
 80015b0:	2304      	movs	r3, #4
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b4:	2301      	movs	r3, #1
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(VM4_Step_GPIO_Port, &GPIO_InitStruct);
 80015c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c4:	4619      	mov	r1, r3
 80015c6:	485e      	ldr	r0, [pc, #376]	; (8001740 <MX_GPIO_Init+0x2f4>)
 80015c8:	f004 fc2c 	bl	8005e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = VM4_En_Pin|VM4_Dir_Pin|BEEP_Pin|VM3_En_Pin
 80015cc:	f248 031b 	movw	r3, #32795	; 0x801b
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
                          |VM3_Dir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d2:	2301      	movs	r3, #1
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e2:	4619      	mov	r1, r3
 80015e4:	4856      	ldr	r0, [pc, #344]	; (8001740 <MX_GPIO_Init+0x2f4>)
 80015e6:	f004 fc1d 	bl	8005e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = VM6_IN1_Pin|VM6_IN2_Pin;
 80015ea:	2360      	movs	r3, #96	; 0x60
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ee:	2301      	movs	r3, #1
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015f6:	2302      	movs	r3, #2
 80015f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fe:	4619      	mov	r1, r3
 8001600:	484f      	ldr	r0, [pc, #316]	; (8001740 <MX_GPIO_Init+0x2f4>)
 8001602:	f004 fc0f 	bl	8005e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FDCINTB_Pin;
 8001606:	2304      	movs	r3, #4
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160a:	2300      	movs	r3, #0
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(FDCINTB_GPIO_Port, &GPIO_InitStruct);
 8001612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001616:	4619      	mov	r1, r3
 8001618:	484a      	ldr	r0, [pc, #296]	; (8001744 <MX_GPIO_Init+0x2f8>)
 800161a:	f004 fc03 	bl	8005e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FDCshutdown_Pin;
 800161e:	2308      	movs	r3, #8
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001622:	2301      	movs	r3, #1
 8001624:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FDCshutdown_GPIO_Port, &GPIO_InitStruct);
 800162e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001632:	4619      	mov	r1, r3
 8001634:	4843      	ldr	r0, [pc, #268]	; (8001744 <MX_GPIO_Init+0x2f8>)
 8001636:	f004 fbf5 	bl	8005e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = OUT6_Pin|OUT5_Pin|OUT4_Pin|OUT3_Pin
 800163a:	f24e 73e0 	movw	r3, #59360	; 0xe7e0
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT2_Pin|OUT1_Pin|VM8_EnB_Pin|VM8_EnA_Pin
                          |VM7_EnB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	2301      	movs	r3, #1
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001644:	2302      	movs	r3, #2
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800164c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001650:	4619      	mov	r1, r3
 8001652:	483c      	ldr	r0, [pc, #240]	; (8001744 <MX_GPIO_Init+0x2f8>)
 8001654:	f004 fbe6 	bl	8005e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Liquid_Detect_Pin;
 8001658:	2301      	movs	r3, #1
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800165c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001662:	2301      	movs	r3, #1
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Liquid_Detect_GPIO_Port, &GPIO_InitStruct);
 8001666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166a:	4619      	mov	r1, r3
 800166c:	4836      	ldr	r0, [pc, #216]	; (8001748 <MX_GPIO_Init+0x2fc>)
 800166e:	f004 fbd9 	bl	8005e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VM8_IN3_Pin|VM8_IN4_Pin;
 8001672:	230c      	movs	r3, #12
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001676:	2301      	movs	r3, #1
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800167e:	2302      	movs	r3, #2
 8001680:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001686:	4619      	mov	r1, r3
 8001688:	482f      	ldr	r0, [pc, #188]	; (8001748 <MX_GPIO_Init+0x2fc>)
 800168a:	f004 fbcb 	bl	8005e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Encoder3_Z_Pin|Encoder4_Z_Pin;
 800168e:	2330      	movs	r3, #48	; 0x30
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001692:	2300      	movs	r3, #0
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800169a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169e:	4619      	mov	r1, r3
 80016a0:	482d      	ldr	r0, [pc, #180]	; (8001758 <MX_GPIO_Init+0x30c>)
 80016a2:	f004 fbbf 	bl	8005e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = VM7_IN3_Pin|VM7_IN4_Pin|VM7_IN1_Pin|VM7_IN2_Pin
 80016a6:	f64f 4303 	movw	r3, #64515	; 0xfc03
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
                          |VM5_IN1_Pin|VM5_IN2_Pin|VM5_IN3_Pin|VM5_IN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b4:	2302      	movs	r3, #2
 80016b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016bc:	4619      	mov	r1, r3
 80016be:	4823      	ldr	r0, [pc, #140]	; (800174c <MX_GPIO_Init+0x300>)
 80016c0:	f004 fbb0 	bl	8005e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = VM7_EnA_Pin|VM6_EnB_Pin;
 80016c4:	2303      	movs	r3, #3
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c8:	2301      	movs	r3, #1
 80016ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016cc:	2302      	movs	r3, #2
 80016ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d0:	2300      	movs	r3, #0
 80016d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d8:	4619      	mov	r1, r3
 80016da:	481d      	ldr	r0, [pc, #116]	; (8001750 <MX_GPIO_Init+0x304>)
 80016dc:	f004 fba2 	bl	8005e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VM6_EnA_Pin|VM5_EnB_Pin|VM5_EnA_Pin;
 80016e0:	f44f 7360 	mov.w	r3, #896	; 0x380
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016ea:	2302      	movs	r3, #2
 80016ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f6:	4619      	mov	r1, r3
 80016f8:	4811      	ldr	r0, [pc, #68]	; (8001740 <MX_GPIO_Init+0x2f4>)
 80016fa:	f004 fb93 	bl	8005e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encoder2_Z_Pin;
 80016fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001704:	2300      	movs	r3, #0
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Encoder2_Z_GPIO_Port, &GPIO_InitStruct);
 800170c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001710:	4619      	mov	r1, r3
 8001712:	4810      	ldr	r0, [pc, #64]	; (8001754 <MX_GPIO_Init+0x308>)
 8001714:	f004 fb86 	bl	8005e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = VM8_IN1_Pin|VM8_IN2_Pin;
 8001718:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171e:	2301      	movs	r3, #1
 8001720:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001726:	2302      	movs	r3, #2
 8001728:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800172a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172e:	4619      	mov	r1, r3
 8001730:	4808      	ldr	r0, [pc, #32]	; (8001754 <MX_GPIO_Init+0x308>)
 8001732:	f004 fb77 	bl	8005e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|LED0_Pin|LED_Heart_Pin;
 8001736:	233c      	movs	r3, #60	; 0x3c
 8001738:	e010      	b.n	800175c <MX_GPIO_Init+0x310>
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800
 8001740:	40021000 	.word	0x40021000
 8001744:	40021400 	.word	0x40021400
 8001748:	40020000 	.word	0x40020000
 800174c:	40020400 	.word	0x40020400
 8001750:	40021800 	.word	0x40021800
 8001754:	40020c00 	.word	0x40020c00
 8001758:	40020800 	.word	0x40020800
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175e:	2301      	movs	r3, #1
 8001760:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800176a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176e:	4619      	mov	r1, r3
 8001770:	4848      	ldr	r0, [pc, #288]	; (8001894 <MX_GPIO_Init+0x448>)
 8001772:	f004 fb57 	bl	8005e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin|KEY2_Pin;
 8001776:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177c:	2300      	movs	r3, #0
 800177e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001780:	2301      	movs	r3, #1
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001788:	4619      	mov	r1, r3
 800178a:	4842      	ldr	r0, [pc, #264]	; (8001894 <MX_GPIO_Init+0x448>)
 800178c:	f004 fb4a 	bl	8005e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VM6_IN3_Pin|VM6_IN4_Pin;
 8001790:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001796:	2301      	movs	r3, #1
 8001798:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800179e:	2302      	movs	r3, #2
 80017a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a6:	4619      	mov	r1, r3
 80017a8:	483b      	ldr	r0, [pc, #236]	; (8001898 <MX_GPIO_Init+0x44c>)
 80017aa:	f004 fb3b 	bl	8005e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encoder1_Z_Pin;
 80017ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Encoder1_Z_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c0:	4619      	mov	r1, r3
 80017c2:	4836      	ldr	r0, [pc, #216]	; (800189c <MX_GPIO_Init+0x450>)
 80017c4:	f004 fb2e 	bl	8005e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = OPT_IN1_Pin|OPT_IN2_Pin|OPT_IN3_Pin|OPT_IN4_Pin
 80017c8:	23f8      	movs	r3, #248	; 0xf8
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
                          |OPT_IN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80017cc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017da:	4619      	mov	r1, r3
 80017dc:	4830      	ldr	r0, [pc, #192]	; (80018a0 <MX_GPIO_Init+0x454>)
 80017de:	f004 fb21 	bl	8005e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OPT_IN6_Pin|OPT_IN7_Pin|OPT_IN8_Pin|OPT_IN9_Pin
 80017e2:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
                          |OPT_IN10_Pin|OPT_IN11_Pin|OPT_IN12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80017e8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f6:	4619      	mov	r1, r3
 80017f8:	4826      	ldr	r0, [pc, #152]	; (8001894 <MX_GPIO_Init+0x448>)
 80017fa:	f004 fb13 	bl	8005e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = VM1_Step_Pin|VM2_Step_Pin|VM3_Step_Pin;
 80017fe:	f44f 7312 	mov.w	r3, #584	; 0x248
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001804:	2301      	movs	r3, #1
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180c:	2303      	movs	r3, #3
 800180e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001814:	4619      	mov	r1, r3
 8001816:	4823      	ldr	r0, [pc, #140]	; (80018a4 <MX_GPIO_Init+0x458>)
 8001818:	f004 fb04 	bl	8005e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = VM1_En_Pin|VM1_Dir_Pin|VM2_En_Pin|VM2_Dir_Pin;
 800181c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001822:	2301      	movs	r3, #1
 8001824:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001832:	4619      	mov	r1, r3
 8001834:	481b      	ldr	r0, [pc, #108]	; (80018a4 <MX_GPIO_Init+0x458>)
 8001836:	f004 faf5 	bl	8005e24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2105      	movs	r1, #5
 800183e:	2006      	movs	r0, #6
 8001840:	f003 fe5c 	bl	80054fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001844:	2006      	movs	r0, #6
 8001846:	f003 fe75 	bl	8005534 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2105      	movs	r1, #5
 800184e:	2009      	movs	r0, #9
 8001850:	f003 fe54 	bl	80054fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001854:	2009      	movs	r0, #9
 8001856:	f003 fe6d 	bl	8005534 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	2105      	movs	r1, #5
 800185e:	200a      	movs	r0, #10
 8001860:	f003 fe4c 	bl	80054fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001864:	200a      	movs	r0, #10
 8001866:	f003 fe65 	bl	8005534 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2105      	movs	r1, #5
 800186e:	2017      	movs	r0, #23
 8001870:	f003 fe44 	bl	80054fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001874:	2017      	movs	r0, #23
 8001876:	f003 fe5d 	bl	8005534 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	2105      	movs	r1, #5
 800187e:	2028      	movs	r0, #40	; 0x28
 8001880:	f003 fe3c 	bl	80054fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001884:	2028      	movs	r0, #40	; 0x28
 8001886:	f003 fe55 	bl	8005534 <HAL_NVIC_EnableIRQ>

}
 800188a:	bf00      	nop
 800188c:	3738      	adds	r7, #56	; 0x38
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40021800 	.word	0x40021800
 8001898:	40020800 	.word	0x40020800
 800189c:	40020000 	.word	0x40020000
 80018a0:	40020c00 	.word	0x40020c00
 80018a4:	40020400 	.word	0x40020400

080018a8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	80fb      	strh	r3, [r7, #6]
    switch(GPIO_Pin)
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	2b40      	cmp	r3, #64	; 0x40
 80018b6:	d019      	beq.n	80018ec <HAL_GPIO_EXTI_Callback+0x44>
 80018b8:	2b40      	cmp	r3, #64	; 0x40
 80018ba:	dc25      	bgt.n	8001908 <HAL_GPIO_EXTI_Callback+0x60>
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d002      	beq.n	80018c6 <HAL_GPIO_EXTI_Callback+0x1e>
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_EXTI_Callback+0x24>
        		 ;
        	}
            break;
#endif
    }
}
 80018c4:	e020      	b.n	8001908 <HAL_GPIO_EXTI_Callback+0x60>
        	if (Liquid_Detect_GPIO_Port->IDR & Liquid_Detect_Pin){ 	// if Rising edge trigger
 80018c6:	4b13      	ldr	r3, [pc, #76]	; (8001914 <HAL_GPIO_EXTI_Callback+0x6c>)
 80018c8:	691b      	ldr	r3, [r3, #16]
            break;
 80018ca:	e01d      	b.n	8001908 <HAL_GPIO_EXTI_Callback+0x60>
        	if (OPT_IN1_GPIO_Port->IDR & OPT_IN1_Pin){ 	// if Rising edge trigger
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_GPIO_EXTI_Callback+0x70>)
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d114      	bne.n	8001902 <HAL_GPIO_EXTI_Callback+0x5a>
        		if(Motor[1].MotorDirection == 0){
 80018d8:	4b10      	ldr	r3, [pc, #64]	; (800191c <HAL_GPIO_EXTI_Callback+0x74>)
 80018da:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10f      	bne.n	8001902 <HAL_GPIO_EXTI_Callback+0x5a>
        			Motor[1].StepPosition =0 ;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <HAL_GPIO_EXTI_Callback+0x74>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            break;
 80018ea:	e00a      	b.n	8001902 <HAL_GPIO_EXTI_Callback+0x5a>
        	if (OPT_IN4_GPIO_Port->IDR & OPT_IN4_Pin) { 	// if Rising edge trigger
 80018ec:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <HAL_GPIO_EXTI_Callback+0x70>)
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d006      	beq.n	8001906 <HAL_GPIO_EXTI_Callback+0x5e>
        		Motor[4].StepPosition =0 ;
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <HAL_GPIO_EXTI_Callback+0x74>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
            break;
 8001900:	e001      	b.n	8001906 <HAL_GPIO_EXTI_Callback+0x5e>
            break;
 8001902:	bf00      	nop
 8001904:	e000      	b.n	8001908 <HAL_GPIO_EXTI_Callback+0x60>
            break;
 8001906:	bf00      	nop
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	40020000 	.word	0x40020000
 8001918:	40020c00 	.word	0x40020c00
 800191c:	200008b0 	.word	0x200008b0

08001920 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c2_rx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <MX_I2C2_Init+0x50>)
 8001926:	4a13      	ldr	r2, [pc, #76]	; (8001974 <MX_I2C2_Init+0x54>)
 8001928:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800192a:	4b11      	ldr	r3, [pc, #68]	; (8001970 <MX_I2C2_Init+0x50>)
 800192c:	4a12      	ldr	r2, [pc, #72]	; (8001978 <MX_I2C2_Init+0x58>)
 800192e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001930:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <MX_I2C2_Init+0x50>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <MX_I2C2_Init+0x50>)
 8001938:	2200      	movs	r2, #0
 800193a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <MX_I2C2_Init+0x50>)
 800193e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001942:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001944:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <MX_I2C2_Init+0x50>)
 8001946:	2200      	movs	r2, #0
 8001948:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <MX_I2C2_Init+0x50>)
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001950:	4b07      	ldr	r3, [pc, #28]	; (8001970 <MX_I2C2_Init+0x50>)
 8001952:	2200      	movs	r2, #0
 8001954:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <MX_I2C2_Init+0x50>)
 8001958:	2200      	movs	r2, #0
 800195a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800195c:	4804      	ldr	r0, [pc, #16]	; (8001970 <MX_I2C2_Init+0x50>)
 800195e:	f004 fc61 	bl	8006224 <HAL_I2C_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001968:	f000 ff60 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}
 8001970:	200002e0 	.word	0x200002e0
 8001974:	40005800 	.word	0x40005800
 8001978:	000186a0 	.word	0x000186a0

0800197c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08a      	sub	sp, #40	; 0x28
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a39      	ldr	r2, [pc, #228]	; (8001a80 <HAL_I2C_MspInit+0x104>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d16b      	bne.n	8001a76 <HAL_I2C_MspInit+0xfa>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	4b38      	ldr	r3, [pc, #224]	; (8001a84 <HAL_I2C_MspInit+0x108>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a37      	ldr	r2, [pc, #220]	; (8001a84 <HAL_I2C_MspInit+0x108>)
 80019a8:	f043 0320 	orr.w	r3, r3, #32
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b35      	ldr	r3, [pc, #212]	; (8001a84 <HAL_I2C_MspInit+0x108>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0320 	and.w	r3, r3, #32
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019ba:	2303      	movs	r3, #3
 80019bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019be:	2312      	movs	r3, #18
 80019c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c6:	2303      	movs	r3, #3
 80019c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019ca:	2304      	movs	r3, #4
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019ce:	f107 0314 	add.w	r3, r7, #20
 80019d2:	4619      	mov	r1, r3
 80019d4:	482c      	ldr	r0, [pc, #176]	; (8001a88 <HAL_I2C_MspInit+0x10c>)
 80019d6:	f004 fa25 	bl	8005e24 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	4b29      	ldr	r3, [pc, #164]	; (8001a84 <HAL_I2C_MspInit+0x108>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	4a28      	ldr	r2, [pc, #160]	; (8001a84 <HAL_I2C_MspInit+0x108>)
 80019e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019e8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ea:	4b26      	ldr	r3, [pc, #152]	; (8001a84 <HAL_I2C_MspInit+0x108>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 80019f6:	4b25      	ldr	r3, [pc, #148]	; (8001a8c <HAL_I2C_MspInit+0x110>)
 80019f8:	4a25      	ldr	r2, [pc, #148]	; (8001a90 <HAL_I2C_MspInit+0x114>)
 80019fa:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80019fc:	4b23      	ldr	r3, [pc, #140]	; (8001a8c <HAL_I2C_MspInit+0x110>)
 80019fe:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001a02:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a04:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <HAL_I2C_MspInit+0x110>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a0a:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <HAL_I2C_MspInit+0x110>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a10:	4b1e      	ldr	r3, [pc, #120]	; (8001a8c <HAL_I2C_MspInit+0x110>)
 8001a12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a16:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a18:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <HAL_I2C_MspInit+0x110>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a1e:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <HAL_I2C_MspInit+0x110>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_CIRCULAR;
 8001a24:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <HAL_I2C_MspInit+0x110>)
 8001a26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a2a:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001a2c:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <HAL_I2C_MspInit+0x110>)
 8001a2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a32:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a34:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <HAL_I2C_MspInit+0x110>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001a3a:	4814      	ldr	r0, [pc, #80]	; (8001a8c <HAL_I2C_MspInit+0x110>)
 8001a3c:	f003 fe68 	bl	8005710 <HAL_DMA_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8001a46:	f000 fef1 	bl	800282c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a0f      	ldr	r2, [pc, #60]	; (8001a8c <HAL_I2C_MspInit+0x110>)
 8001a4e:	639a      	str	r2, [r3, #56]	; 0x38
 8001a50:	4a0e      	ldr	r2, [pc, #56]	; (8001a8c <HAL_I2C_MspInit+0x110>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2105      	movs	r1, #5
 8001a5a:	2021      	movs	r0, #33	; 0x21
 8001a5c:	f003 fd4e 	bl	80054fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001a60:	2021      	movs	r0, #33	; 0x21
 8001a62:	f003 fd67 	bl	8005534 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2105      	movs	r1, #5
 8001a6a:	2022      	movs	r0, #34	; 0x22
 8001a6c:	f003 fd46 	bl	80054fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001a70:	2022      	movs	r0, #34	; 0x22
 8001a72:	f003 fd5f 	bl	8005534 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001a76:	bf00      	nop
 8001a78:	3728      	adds	r7, #40	; 0x28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40005800 	.word	0x40005800
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40021400 	.word	0x40021400
 8001a8c:	20000334 	.word	0x20000334
 8001a90:	40026040 	.word	0x40026040

08001a94 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch,1,HAL_MAX_DELAY);
 8001a9c:	1d39      	adds	r1, r7, #4
 8001a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	4803      	ldr	r0, [pc, #12]	; (8001ab4 <__io_putchar+0x20>)
 8001aa6:	f008 f8f4 	bl	8009c92 <HAL_UART_Transmit>
    return ch;
 8001aaa:	687b      	ldr	r3, [r7, #4]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	2000086c 	.word	0x2000086c

08001ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001abc:	f003 f8a2 	bl	8004c04 <HAL_Init>
  /* USER CODE BEGIN Init */
  //HAL_Delay(6000);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ac0:	f000 f836 	bl	8001b30 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 8001ac4:	f7ff fcc2 	bl	800144c <MX_GPIO_Init>
  MX_DMA_Init();
 8001ac8:	f7ff fc4a 	bl	8001360 <MX_DMA_Init>
  MX_CAN1_Init();
 8001acc:	f7ff fb56 	bl	800117c <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8001ad0:	f001 fd8e 	bl	80035f0 <MX_USART1_UART_Init>
  MX_DAC_Init();
 8001ad4:	f7ff fbce 	bl	8001274 <MX_DAC_Init>
  MX_TIM2_Init();
 8001ad8:	f001 f91a 	bl	8002d10 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001adc:	f001 f96c 	bl	8002db8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001ae0:	f001 f9be 	bl	8002e60 <MX_TIM4_Init>
  MX_UART4_Init();
 8001ae4:	f001 fd2a 	bl	800353c <MX_UART4_Init>
  MX_UART5_Init();
 8001ae8:	f001 fd52 	bl	8003590 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8001aec:	f001 fdaa 	bl	8003644 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001af0:	f7ff fa2c 	bl	8000f4c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001af4:	f7ff fa7c 	bl	8000ff0 <MX_ADC2_Init>
  MX_I2C2_Init();
 8001af8:	f7ff ff12 	bl	8001920 <MX_I2C2_Init>
  MX_TIM10_Init();
 8001afc:	f001 faa4 	bl	8003048 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001b00:	f001 fac4 	bl	800308c <MX_TIM11_Init>
  MX_TIM13_Init();
 8001b04:	f001 fb1c 	bl	8003140 <MX_TIM13_Init>
  MX_TIM14_Init();
 8001b08:	f001 fb3c 	bl	8003184 <MX_TIM14_Init>
  MX_TIM9_Init();
 8001b0c:	f001 fa64 	bl	8002fd8 <MX_TIM9_Init>
  MX_TIM7_Init();
 8001b10:	f001 fa2e 	bl	8002f70 <MX_TIM7_Init>
  MX_TIM6_Init();
 8001b14:	f001 f9f8 	bl	8002f08 <MX_TIM6_Init>
  MX_TIM12_Init();
 8001b18:	f001 fada 	bl	80030d0 <MX_TIM12_Init>
  MX_TIM7_Init();
  MX_TIM6_Init();
  MX_TIM12_Init();
  /* USER CODE BEGIN 2 */
#endif
  ALL_Motors_Disable();
 8001b1c:	f002 f8e8 	bl	8003cf0 <ALL_Motors_Disable>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001b20:	f009 f926 	bl	800ad70 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001b24:	f7ff fc3c 	bl	80013a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001b28:	f009 f946 	bl	800adb8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <main+0x74>
	...

08001b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b094      	sub	sp, #80	; 0x50
 8001b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b36:	f107 0320 	add.w	r3, r7, #32
 8001b3a:	2230      	movs	r2, #48	; 0x30
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f00b fff5 	bl	800db2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b54:	2300      	movs	r3, #0
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	4b28      	ldr	r3, [pc, #160]	; (8001bfc <SystemClock_Config+0xcc>)
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	4a27      	ldr	r2, [pc, #156]	; (8001bfc <SystemClock_Config+0xcc>)
 8001b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b62:	6413      	str	r3, [r2, #64]	; 0x40
 8001b64:	4b25      	ldr	r3, [pc, #148]	; (8001bfc <SystemClock_Config+0xcc>)
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b70:	2300      	movs	r3, #0
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	4b22      	ldr	r3, [pc, #136]	; (8001c00 <SystemClock_Config+0xd0>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a21      	ldr	r2, [pc, #132]	; (8001c00 <SystemClock_Config+0xd0>)
 8001b7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b1f      	ldr	r3, [pc, #124]	; (8001c00 <SystemClock_Config+0xd0>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b96:	2302      	movs	r3, #2
 8001b98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001ba4:	23a0      	movs	r3, #160	; 0xa0
 8001ba6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001bac:	2304      	movs	r3, #4
 8001bae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb0:	f107 0320 	add.w	r3, r7, #32
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f006 fdff 	bl	80087b8 <HAL_RCC_OscConfig>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001bc0:	f000 fe34 	bl	800282c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc4:	230f      	movs	r3, #15
 8001bc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bd0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001bd6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bdc:	f107 030c 	add.w	r3, r7, #12
 8001be0:	2105      	movs	r1, #5
 8001be2:	4618      	mov	r0, r3
 8001be4:	f007 f860 	bl	8008ca8 <HAL_RCC_ClockConfig>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001bee:	f000 fe1d 	bl	800282c <Error_Handler>
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	3750      	adds	r7, #80	; 0x50
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40007000 	.word	0x40007000

08001c04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a9e      	ldr	r2, [pc, #632]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d101      	bne.n	8001c1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c16:	f003 f817 	bl	8004c48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

	if (htim->Instance == TIM9) {	// 计时器周期为0.1ms
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a9c      	ldr	r2, [pc, #624]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d126      	bne.n	8001c72 <HAL_TIM_PeriodElapsedCallback+0x6e>
		uart_reieve_timeoutCount++;
 8001c24:	4b9b      	ldr	r3, [pc, #620]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	4a9a      	ldr	r2, [pc, #616]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001c2c:	6013      	str	r3, [r2, #0]
		if( (USART_RX_STA&0x8000) || (USART_RX_STA==0) ){	// 判断串口接收超时
 8001c2e:	4b9a      	ldr	r3, [pc, #616]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	b21b      	sxth	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	db03      	blt.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0x3c>
 8001c38:	4b97      	ldr	r3, [pc, #604]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c3a:	881b      	ldrh	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d106      	bne.n	8001c4e <HAL_TIM_PeriodElapsedCallback+0x4a>
			uart_reieve_timeoutCount = 0;
 8001c40:	4b94      	ldr	r3, [pc, #592]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim9);
 8001c46:	4895      	ldr	r0, [pc, #596]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001c48:	f007 fb40 	bl	80092cc <HAL_TIM_Base_Stop_IT>
 8001c4c:	e011      	b.n	8001c72 <HAL_TIM_PeriodElapsedCallback+0x6e>
		}
		else{
			if(uart_reieve_timeoutCount > 5000){
 8001c4e:	4b91      	ldr	r3, [pc, #580]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d90b      	bls.n	8001c72 <HAL_TIM_PeriodElapsedCallback+0x6e>
				printf("[WRONG] Data Input Timeout ! \r\n");
 8001c5a:	4891      	ldr	r0, [pc, #580]	; (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001c5c:	f00c fe4e 	bl	800e8fc <puts>
				uart_reieve_timeoutCount = 0;
 8001c60:	4b8c      	ldr	r3, [pc, #560]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
				USART_RX_STA = 0;
 8001c66:	4b8c      	ldr	r3, [pc, #560]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	801a      	strh	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim9);
 8001c6c:	488b      	ldr	r0, [pc, #556]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001c6e:	f007 fb2d 	bl	80092cc <HAL_TIM_Base_Stop_IT>
			}
		}
	}

	if (htim->Instance == TIM10)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a8b      	ldr	r2, [pc, #556]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	f040 80c2 	bne.w	8001e02 <HAL_TIM_PeriodElapsedCallback+0x1fe>
	{
			timecount_TIM10++;
 8001c7e:	4b8a      	ldr	r3, [pc, #552]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	3301      	adds	r3, #1
 8001c84:	4a88      	ldr	r2, [pc, #544]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c86:	6013      	str	r3, [r2, #0]
			AccelDecelcount_TIM10++;
 8001c88:	4b88      	ldr	r3, [pc, #544]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	4a87      	ldr	r2, [pc, #540]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001c90:	6013      	str	r3, [r2, #0]
			if(timecount_TIM10 <= Pluse_High)
 8001c92:	4b85      	ldr	r3, [pc, #532]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	4b86      	ldr	r3, [pc, #536]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d805      	bhi.n	8001caa <HAL_TIM_PeriodElapsedCallback+0xa6>
			{
				Motorpluse1_High();
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	2108      	movs	r1, #8
 8001ca2:	4884      	ldr	r0, [pc, #528]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001ca4:	f004 fa72 	bl	800618c <HAL_GPIO_WritePin>
 8001ca8:	e00a      	b.n	8001cc0 <HAL_TIM_PeriodElapsedCallback+0xbc>
			}
			else if(timecount_TIM10 > Pluse_High)
 8001caa:	4b7f      	ldr	r3, [pc, #508]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4b80      	ldr	r3, [pc, #512]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d904      	bls.n	8001cc0 <HAL_TIM_PeriodElapsedCallback+0xbc>
			{
				Motorpluse1_Low();
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2108      	movs	r1, #8
 8001cba:	487e      	ldr	r0, [pc, #504]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001cbc:	f004 fa66 	bl	800618c <HAL_GPIO_WritePin>
			}
			if(timecount_TIM10 >= Motor[1].StepperSpeedTMR)
 8001cc0:	4b7d      	ldr	r3, [pc, #500]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001cc2:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8001cc6:	4b78      	ldr	r3, [pc, #480]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d843      	bhi.n	8001d56 <HAL_TIM_PeriodElapsedCallback+0x152>
			{
				timecount_TIM10 = 0 ;
 8001cce:	4b76      	ldr	r3, [pc, #472]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
				Motor[1].NumberofSteps--;
 8001cd4:	4b78      	ldr	r3, [pc, #480]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001cd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	4a76      	ldr	r2, [pc, #472]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001cde:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
				if (Motor[1].MotorDirection == 1){
 8001ce2:	4b75      	ldr	r3, [pc, #468]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001ce4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d11c      	bne.n	8001d26 <HAL_TIM_PeriodElapsedCallback+0x122>
					Motor[1].StepPosition++;
 8001cec:	4b72      	ldr	r3, [pc, #456]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	4a70      	ldr	r2, [pc, #448]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001cf6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					if (Motor[1].StepPosition >= Motor[1].StepsInOneCircle){
 8001cfa:	4b6f      	ldr	r3, [pc, #444]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b6d      	ldr	r3, [pc, #436]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d324      	bcc.n	8001d56 <HAL_TIM_PeriodElapsedCallback+0x152>
						Motor[1].StepPosition = Motor[1].StepPosition - Motor[1].StepsInOneCircle ;
 8001d0c:	4b6a      	ldr	r3, [pc, #424]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d12:	461a      	mov	r2, r3
 8001d14:	4b68      	ldr	r3, [pc, #416]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4b66      	ldr	r3, [pc, #408]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8001d24:	e017      	b.n	8001d56 <HAL_TIM_PeriodElapsedCallback+0x152>
					}
				}
				else{
					Motor[1].StepPosition--;
 8001d26:	4b64      	ldr	r3, [pc, #400]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	4a62      	ldr	r2, [pc, #392]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					if (Motor[1].StepPosition < 0){
 8001d34:	4b60      	ldr	r3, [pc, #384]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	da0b      	bge.n	8001d56 <HAL_TIM_PeriodElapsedCallback+0x152>
						Motor[1].StepPosition = Motor[1].StepPosition + Motor[1].StepsInOneCircle ;
 8001d3e:	4b5e      	ldr	r3, [pc, #376]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b5c      	ldr	r3, [pc, #368]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d4c:	4413      	add	r3, r2
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b59      	ldr	r3, [pc, #356]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}
				}
			}
			if(Motor[1].StepPosition == Motor[1].TargetPosition)
 8001d56:	4b58      	ldr	r3, [pc, #352]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d58:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d5c:	4b56      	ldr	r3, [pc, #344]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d10e      	bne.n	8001d84 <HAL_TIM_PeriodElapsedCallback+0x180>
			{
				Motor[1].Status = 0;
 8001d66:	4b54      	ldr	r3, [pc, #336]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
				printf("---Motor1 Steps Position:%ld---\r\n",Motor[1].StepPosition);
 8001d6e:	4b52      	ldr	r3, [pc, #328]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d74:	4619      	mov	r1, r3
 8001d76:	4851      	ldr	r0, [pc, #324]	; (8001ebc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001d78:	f00c fd3a 	bl	800e7f0 <iprintf>
				HAL_TIM_Base_Stop_IT(&htim10);
 8001d7c:	4850      	ldr	r0, [pc, #320]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001d7e:	f007 faa5 	bl	80092cc <HAL_TIM_Base_Stop_IT>
 8001d82:	e00b      	b.n	8001d9c <HAL_TIM_PeriodElapsedCallback+0x198>
			}
			else if (Motor[1].NumberofSteps <= 0){
 8001d84:	4b4c      	ldr	r3, [pc, #304]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d106      	bne.n	8001d9c <HAL_TIM_PeriodElapsedCallback+0x198>
				Motor[1].Status = 0;
 8001d8e:	4b4a      	ldr	r3, [pc, #296]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
				//printf("[WRONG]Motor1 Goto Target Position Failed!---Current_Position:%ld---\r\n",Motor[1].StepPosition);
				HAL_TIM_Base_Stop_IT(&htim10);
 8001d96:	484a      	ldr	r0, [pc, #296]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001d98:	f007 fa98 	bl	80092cc <HAL_TIM_Base_Stop_IT>
			}

			if (Motor[1].NumberofSteps > Motor[1].NumberofSteps_StopAccel)  // if.. begin Acceleration
 8001d9c:	4b46      	ldr	r3, [pc, #280]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d9e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001da2:	4b45      	ldr	r3, [pc, #276]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001da4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d910      	bls.n	8001dce <HAL_TIM_PeriodElapsedCallback+0x1ca>
			{
				if(AccelDecelcount_TIM10 >= Motor[1].AccelerationTimeTMR)
 8001dac:	4b42      	ldr	r3, [pc, #264]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001dae:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001db2:	4b3e      	ldr	r3, [pc, #248]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	f200 8529 	bhi.w	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
				{
					AccelDecelcount_TIM10=0;
 8001dbc:	4b3b      	ldr	r3, [pc, #236]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
					AccelDecel(ACCEL,&Motor[1]);
 8001dc2:	4940      	ldr	r1, [pc, #256]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	f002 f855 	bl	8003e74 <AccelDecel>
				}
			}
	}
#endif
  /* USER CODE END Callback 1 */
}
 8001dca:	f000 bd20 	b.w	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
			else if (Motor[1].NumberofSteps < Motor[1].NumberofSteps_BeginDecel)  // if.. begin Deceleration
 8001dce:	4b3a      	ldr	r3, [pc, #232]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001dd0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001dd4:	4b38      	ldr	r3, [pc, #224]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001dd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	f080 8517 	bcs.w	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
				if(AccelDecelcount_TIM10 >= Motor[1].DecelerationTimeTMR)
 8001de0:	4b35      	ldr	r3, [pc, #212]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001de2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001de6:	4b31      	ldr	r3, [pc, #196]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	f200 850f 	bhi.w	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
					AccelDecelcount_TIM10=0;
 8001df0:	4b2e      	ldr	r3, [pc, #184]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
					AccelDecel(DECEL,&Motor[1]);
 8001df6:	4933      	ldr	r1, [pc, #204]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001df8:	2002      	movs	r0, #2
 8001dfa:	f002 f83b 	bl	8003e74 <AccelDecel>
}
 8001dfe:	f000 bd06 	b.w	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
	else if (htim->Instance == TIM11)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a30      	ldr	r2, [pc, #192]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	f040 80c0 	bne.w	8001f8e <HAL_TIM_PeriodElapsedCallback+0x38a>
			timecount_TIM11++;
 8001e0e:	4b2f      	ldr	r3, [pc, #188]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	3301      	adds	r3, #1
 8001e14:	4a2d      	ldr	r2, [pc, #180]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001e16:	6013      	str	r3, [r2, #0]
			AccelDecelcount_TIM11++;
 8001e18:	4b2d      	ldr	r3, [pc, #180]	; (8001ed0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	4a2c      	ldr	r2, [pc, #176]	; (8001ed0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001e20:	6013      	str	r3, [r2, #0]
			if(timecount_TIM11 <= Pluse_High)
 8001e22:	4b2a      	ldr	r3, [pc, #168]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d805      	bhi.n	8001e3a <HAL_TIM_PeriodElapsedCallback+0x236>
				Motorpluse2_High();
 8001e2e:	2201      	movs	r2, #1
 8001e30:	2140      	movs	r1, #64	; 0x40
 8001e32:	4820      	ldr	r0, [pc, #128]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001e34:	f004 f9aa 	bl	800618c <HAL_GPIO_WritePin>
 8001e38:	e00a      	b.n	8001e50 <HAL_TIM_PeriodElapsedCallback+0x24c>
			else if(timecount_TIM11 > Pluse_High)
 8001e3a:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	4b1c      	ldr	r3, [pc, #112]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d904      	bls.n	8001e50 <HAL_TIM_PeriodElapsedCallback+0x24c>
				Motorpluse2_Low();
 8001e46:	2200      	movs	r2, #0
 8001e48:	2140      	movs	r1, #64	; 0x40
 8001e4a:	481a      	ldr	r0, [pc, #104]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001e4c:	f004 f99e 	bl	800618c <HAL_GPIO_WritePin>
			if(timecount_TIM11 >= Motor[2].StepperSpeedTMR)
 8001e50:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e52:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001e56:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d841      	bhi.n	8001ee2 <HAL_TIM_PeriodElapsedCallback+0x2de>
				timecount_TIM11 = 0 ;
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
				Motor[2].NumberofSteps--;
 8001e64:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e66:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	4a12      	ldr	r2, [pc, #72]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e6e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
				if (Motor[2].MotorDirection == 1){
 8001e72:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e74:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d12b      	bne.n	8001ed4 <HAL_TIM_PeriodElapsedCallback+0x2d0>
					Motor[2].StepPosition++;
 8001e7c:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e82:	3301      	adds	r3, #1
 8001e84:	4a0c      	ldr	r2, [pc, #48]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e8a:	e02a      	b.n	8001ee2 <HAL_TIM_PeriodElapsedCallback+0x2de>
 8001e8c:	40010000 	.word	0x40010000
 8001e90:	40014000 	.word	0x40014000
 8001e94:	20000394 	.word	0x20000394
 8001e98:	2000079c 	.word	0x2000079c
 8001e9c:	20000584 	.word	0x20000584
 8001ea0:	08010544 	.word	0x08010544
 8001ea4:	40014400 	.word	0x40014400
 8001ea8:	20000398 	.word	0x20000398
 8001eac:	2000039c 	.word	0x2000039c
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	40020400 	.word	0x40020400
 8001eb8:	200008b0 	.word	0x200008b0
 8001ebc:	08010564 	.word	0x08010564
 8001ec0:	200005cc 	.word	0x200005cc
 8001ec4:	20000910 	.word	0x20000910
 8001ec8:	40014800 	.word	0x40014800
 8001ecc:	200003a0 	.word	0x200003a0
 8001ed0:	200003a4 	.word	0x200003a4
					Motor[2].StepPosition--;
 8001ed4:	4ba5      	ldr	r3, [pc, #660]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001ed6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001eda:	3b01      	subs	r3, #1
 8001edc:	4aa3      	ldr	r2, [pc, #652]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001ede:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
			if(Motor[2].StepPosition == Motor[2].TargetPosition){
 8001ee2:	4ba2      	ldr	r3, [pc, #648]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001ee4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001ee8:	4ba0      	ldr	r3, [pc, #640]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001eea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d10e      	bne.n	8001f10 <HAL_TIM_PeriodElapsedCallback+0x30c>
				Motor[2].Status = 0;
 8001ef2:	4b9e      	ldr	r3, [pc, #632]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				printf("---Motor2 Steps Position:%ld---\r\n",Motor[2].StepPosition);
 8001efa:	4b9c      	ldr	r3, [pc, #624]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001efc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f00:	4619      	mov	r1, r3
 8001f02:	489b      	ldr	r0, [pc, #620]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8001f04:	f00c fc74 	bl	800e7f0 <iprintf>
				HAL_TIM_Base_Stop_IT(&htim11);
 8001f08:	489a      	ldr	r0, [pc, #616]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8001f0a:	f007 f9df 	bl	80092cc <HAL_TIM_Base_Stop_IT>
 8001f0e:	e00b      	b.n	8001f28 <HAL_TIM_PeriodElapsedCallback+0x324>
			else if (Motor[2].NumberofSteps <= 0){
 8001f10:	4b96      	ldr	r3, [pc, #600]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001f12:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d106      	bne.n	8001f28 <HAL_TIM_PeriodElapsedCallback+0x324>
				Motor[2].Status = 0;
 8001f1a:	4b94      	ldr	r3, [pc, #592]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				HAL_TIM_Base_Stop_IT(&htim11);
 8001f22:	4894      	ldr	r0, [pc, #592]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8001f24:	f007 f9d2 	bl	80092cc <HAL_TIM_Base_Stop_IT>
			if (Motor[2].NumberofSteps > Motor[2].NumberofSteps_StopAccel)
 8001f28:	4b90      	ldr	r3, [pc, #576]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001f2a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001f2e:	4b8f      	ldr	r3, [pc, #572]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001f30:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d910      	bls.n	8001f5a <HAL_TIM_PeriodElapsedCallback+0x356>
				if(AccelDecelcount_TIM11 >= Motor[2].AccelerationTimeTMR)
 8001f38:	4b8c      	ldr	r3, [pc, #560]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001f3a:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8001f3e:	4b8e      	ldr	r3, [pc, #568]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	f200 8463 	bhi.w	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
					AccelDecelcount_TIM11=0;
 8001f48:	4b8b      	ldr	r3, [pc, #556]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
					AccelDecel(ACCEL,&Motor[2]);
 8001f4e:	498b      	ldr	r1, [pc, #556]	; (800217c <HAL_TIM_PeriodElapsedCallback+0x578>)
 8001f50:	2001      	movs	r0, #1
 8001f52:	f001 ff8f 	bl	8003e74 <AccelDecel>
}
 8001f56:	f000 bc5a 	b.w	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
			else if (Motor[2].NumberofSteps < Motor[2].NumberofSteps_BeginDecel)
 8001f5a:	4b84      	ldr	r3, [pc, #528]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001f5c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001f60:	4b82      	ldr	r3, [pc, #520]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001f62:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001f66:	429a      	cmp	r2, r3
 8001f68:	f080 8451 	bcs.w	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
				if(AccelDecelcount_TIM11 >= Motor[2].DecelerationTimeTMR)
 8001f6c:	4b7f      	ldr	r3, [pc, #508]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001f6e:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8001f72:	4b81      	ldr	r3, [pc, #516]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	f200 8449 	bhi.w	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
					AccelDecelcount_TIM11=0;
 8001f7c:	4b7e      	ldr	r3, [pc, #504]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
					AccelDecel(DECEL,&Motor[2]);
 8001f82:	497e      	ldr	r1, [pc, #504]	; (800217c <HAL_TIM_PeriodElapsedCallback+0x578>)
 8001f84:	2002      	movs	r0, #2
 8001f86:	f001 ff75 	bl	8003e74 <AccelDecel>
}
 8001f8a:	f000 bc40 	b.w	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
	else if (htim->Instance == TIM13)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a7b      	ldr	r2, [pc, #492]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	f040 80a3 	bne.w	80020e0 <HAL_TIM_PeriodElapsedCallback+0x4dc>
			timecount_TIM13++;
 8001f9a:	4b7a      	ldr	r3, [pc, #488]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	4a78      	ldr	r2, [pc, #480]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001fa2:	6013      	str	r3, [r2, #0]
			AccelDecelcount_TIM13++;
 8001fa4:	4b78      	ldr	r3, [pc, #480]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	4a77      	ldr	r2, [pc, #476]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8001fac:	6013      	str	r3, [r2, #0]
				if(timecount_TIM13 <= Pluse_High){
 8001fae:	4b75      	ldr	r3, [pc, #468]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	4b76      	ldr	r3, [pc, #472]	; (800218c <HAL_TIM_PeriodElapsedCallback+0x588>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d806      	bhi.n	8001fc8 <HAL_TIM_PeriodElapsedCallback+0x3c4>
					Motorpluse3_High();
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fc0:	4873      	ldr	r0, [pc, #460]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8001fc2:	f004 f8e3 	bl	800618c <HAL_GPIO_WritePin>
 8001fc6:	e00b      	b.n	8001fe0 <HAL_TIM_PeriodElapsedCallback+0x3dc>
				else if(timecount_TIM13 > Pluse_High){
 8001fc8:	4b6e      	ldr	r3, [pc, #440]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b6f      	ldr	r3, [pc, #444]	; (800218c <HAL_TIM_PeriodElapsedCallback+0x588>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d905      	bls.n	8001fe0 <HAL_TIM_PeriodElapsedCallback+0x3dc>
					Motorpluse3_Low();
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fda:	486d      	ldr	r0, [pc, #436]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8001fdc:	f004 f8d6 	bl	800618c <HAL_GPIO_WritePin>
				if(timecount_TIM13 >= Motor[3].StepperSpeedTMR){
 8001fe0:	4b62      	ldr	r3, [pc, #392]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001fe2:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8001fe6:	4b67      	ldr	r3, [pc, #412]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d81d      	bhi.n	800202a <HAL_TIM_PeriodElapsedCallback+0x426>
					timecount_TIM13 = 0 ;
 8001fee:	4b65      	ldr	r3, [pc, #404]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
					Motor[3].NumberofSteps--;
 8001ff4:	4b5d      	ldr	r3, [pc, #372]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001ff6:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	4a5b      	ldr	r2, [pc, #364]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001ffe:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
					if (Motor[3].MotorDirection == 1){
 8002002:	4b5a      	ldr	r3, [pc, #360]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8002004:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8002008:	2b01      	cmp	r3, #1
 800200a:	d107      	bne.n	800201c <HAL_TIM_PeriodElapsedCallback+0x418>
						Motor[3].StepPosition++;
 800200c:	4b57      	ldr	r3, [pc, #348]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 800200e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002012:	3301      	adds	r3, #1
 8002014:	4a55      	ldr	r2, [pc, #340]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8002016:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800201a:	e006      	b.n	800202a <HAL_TIM_PeriodElapsedCallback+0x426>
						Motor[3].StepPosition--;
 800201c:	4b53      	ldr	r3, [pc, #332]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 800201e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002022:	3b01      	subs	r3, #1
 8002024:	4a51      	ldr	r2, [pc, #324]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8002026:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
				if(Motor[3].StepPosition == Motor[3].TargetPosition){
 800202a:	4b50      	ldr	r3, [pc, #320]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 800202c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8002030:	4b4e      	ldr	r3, [pc, #312]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8002032:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8002036:	429a      	cmp	r2, r3
 8002038:	d10e      	bne.n	8002058 <HAL_TIM_PeriodElapsedCallback+0x454>
					Motor[3].Status = 0;
 800203a:	4b4c      	ldr	r3, [pc, #304]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
					printf("---Motor3 Steps Position:%ld---\r\n",Motor[3].StepPosition);
 8002042:	4b4a      	ldr	r3, [pc, #296]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8002044:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002048:	4619      	mov	r1, r3
 800204a:	4852      	ldr	r0, [pc, #328]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x590>)
 800204c:	f00c fbd0 	bl	800e7f0 <iprintf>
					HAL_TIM_Base_Stop_IT(&htim13);
 8002050:	4851      	ldr	r0, [pc, #324]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x594>)
 8002052:	f007 f93b 	bl	80092cc <HAL_TIM_Base_Stop_IT>
 8002056:	e012      	b.n	800207e <HAL_TIM_PeriodElapsedCallback+0x47a>
				else if (Motor[3].NumberofSteps <= 0){
 8002058:	4b44      	ldr	r3, [pc, #272]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 800205a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10d      	bne.n	800207e <HAL_TIM_PeriodElapsedCallback+0x47a>
					Motor[3].Status = 0;
 8002062:	4b42      	ldr	r3, [pc, #264]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
					printf("[WRONG]Motor3 Goto Target Position Failed!---Current_Position:%ld---\r\n",Motor[3].StepPosition);
 800206a:	4b40      	ldr	r3, [pc, #256]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 800206c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002070:	4619      	mov	r1, r3
 8002072:	484a      	ldr	r0, [pc, #296]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x598>)
 8002074:	f00c fbbc 	bl	800e7f0 <iprintf>
					HAL_TIM_Base_Stop_IT(&htim13);
 8002078:	4847      	ldr	r0, [pc, #284]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x594>)
 800207a:	f007 f927 	bl	80092cc <HAL_TIM_Base_Stop_IT>
				if (Motor[3].NumberofSteps > Motor[3].NumberofSteps_StopAccel){
 800207e:	4b3b      	ldr	r3, [pc, #236]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8002080:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 8002084:	4b39      	ldr	r3, [pc, #228]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8002086:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800208a:	429a      	cmp	r2, r3
 800208c:	d90f      	bls.n	80020ae <HAL_TIM_PeriodElapsedCallback+0x4aa>
					if(AccelDecelcount_TIM13 >= Motor[3].AccelerationTimeTMR){
 800208e:	4b37      	ldr	r3, [pc, #220]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8002090:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 8002094:	4b3c      	ldr	r3, [pc, #240]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	f200 83b8 	bhi.w	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
						AccelDecelcount_TIM13=0;
 800209e:	4b3a      	ldr	r3, [pc, #232]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x584>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
						AccelDecel(ACCEL,&Motor[3]);
 80020a4:	493e      	ldr	r1, [pc, #248]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80020a6:	2001      	movs	r0, #1
 80020a8:	f001 fee4 	bl	8003e74 <AccelDecel>
}
 80020ac:	e3af      	b.n	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
				else if (Motor[3].NumberofSteps < Motor[3].NumberofSteps_BeginDecel){
 80020ae:	4b2f      	ldr	r3, [pc, #188]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 80020b0:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 80020b4:	4b2d      	ldr	r3, [pc, #180]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 80020b6:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80020ba:	429a      	cmp	r2, r3
 80020bc:	f080 83a7 	bcs.w	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
					if(AccelDecelcount_TIM13 >= Motor[3].DecelerationTimeTMR){
 80020c0:	4b2a      	ldr	r3, [pc, #168]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 80020c2:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80020c6:	4b30      	ldr	r3, [pc, #192]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x584>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	f200 839f 	bhi.w	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
						AccelDecelcount_TIM13=0;
 80020d0:	4b2d      	ldr	r3, [pc, #180]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x584>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
						AccelDecel(DECEL,&Motor[3]);
 80020d6:	4932      	ldr	r1, [pc, #200]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80020d8:	2002      	movs	r0, #2
 80020da:	f001 fecb 	bl	8003e74 <AccelDecel>
}
 80020de:	e396      	b.n	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
	else if (htim->Instance == TIM14)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a2f      	ldr	r2, [pc, #188]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	f040 80bf 	bne.w	800226a <HAL_TIM_PeriodElapsedCallback+0x666>
			timecount_TIM14++;
 80020ec:	4b2e      	ldr	r3, [pc, #184]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	3301      	adds	r3, #1
 80020f2:	4a2d      	ldr	r2, [pc, #180]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80020f4:	6013      	str	r3, [r2, #0]
			AccelDecelcount_TIM14++;
 80020f6:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	3301      	adds	r3, #1
 80020fc:	4a2b      	ldr	r2, [pc, #172]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80020fe:	6013      	str	r3, [r2, #0]
			if(timecount_TIM14 <= Pluse_High)
 8002100:	4b29      	ldr	r3, [pc, #164]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4b21      	ldr	r3, [pc, #132]	; (800218c <HAL_TIM_PeriodElapsedCallback+0x588>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d805      	bhi.n	8002118 <HAL_TIM_PeriodElapsedCallback+0x514>
				Motorpluse4_High();
 800210c:	2201      	movs	r2, #1
 800210e:	2104      	movs	r1, #4
 8002110:	4827      	ldr	r0, [pc, #156]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8002112:	f004 f83b 	bl	800618c <HAL_GPIO_WritePin>
 8002116:	e00a      	b.n	800212e <HAL_TIM_PeriodElapsedCallback+0x52a>
			else if(timecount_TIM14 > Pluse_High)
 8002118:	4b23      	ldr	r3, [pc, #140]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b1b      	ldr	r3, [pc, #108]	; (800218c <HAL_TIM_PeriodElapsedCallback+0x588>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d904      	bls.n	800212e <HAL_TIM_PeriodElapsedCallback+0x52a>
				Motorpluse4_Low();
 8002124:	2200      	movs	r2, #0
 8002126:	2104      	movs	r1, #4
 8002128:	4821      	ldr	r0, [pc, #132]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 800212a:	f004 f82f 	bl	800618c <HAL_GPIO_WritePin>
			if(timecount_TIM14 >= Motor[4].StepperSpeedTMR)
 800212e:	4b0f      	ldr	r3, [pc, #60]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8002130:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8002134:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d842      	bhi.n	80021c2 <HAL_TIM_PeriodElapsedCallback+0x5be>
				timecount_TIM14 = 0 ;
 800213c:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
				Motor[4].NumberofSteps--;
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8002144:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8002148:	3b01      	subs	r3, #1
 800214a:	4a08      	ldr	r2, [pc, #32]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 800214c:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
				if (Motor[4].MotorDirection == 1){
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8002152:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8002156:	2b01      	cmp	r3, #1
 8002158:	d12c      	bne.n	80021b4 <HAL_TIM_PeriodElapsedCallback+0x5b0>
					Motor[4].StepPosition++;
 800215a:	4b04      	ldr	r3, [pc, #16]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 800215c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8002160:	3301      	adds	r3, #1
 8002162:	4a02      	ldr	r2, [pc, #8]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x568>)
 8002164:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
 8002168:	e02b      	b.n	80021c2 <HAL_TIM_PeriodElapsedCallback+0x5be>
 800216a:	bf00      	nop
 800216c:	200008b0 	.word	0x200008b0
 8002170:	08010588 	.word	0x08010588
 8002174:	20000614 	.word	0x20000614
 8002178:	200003a4 	.word	0x200003a4
 800217c:	20000970 	.word	0x20000970
 8002180:	40001c00 	.word	0x40001c00
 8002184:	200003a8 	.word	0x200003a8
 8002188:	200003ac 	.word	0x200003ac
 800218c:	20000000 	.word	0x20000000
 8002190:	40020400 	.word	0x40020400
 8002194:	080105ac 	.word	0x080105ac
 8002198:	200006a4 	.word	0x200006a4
 800219c:	080105d0 	.word	0x080105d0
 80021a0:	200009d0 	.word	0x200009d0
 80021a4:	40002000 	.word	0x40002000
 80021a8:	200003b0 	.word	0x200003b0
 80021ac:	200003b4 	.word	0x200003b4
 80021b0:	40021000 	.word	0x40021000
					Motor[4].StepPosition--;
 80021b4:	4b9e      	ldr	r3, [pc, #632]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 80021b6:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 80021ba:	3b01      	subs	r3, #1
 80021bc:	4a9c      	ldr	r2, [pc, #624]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 80021be:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
			if(Motor[4].StepPosition == Motor[4].TargetPosition)
 80021c2:	4b9b      	ldr	r3, [pc, #620]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 80021c4:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 80021c8:	4b99      	ldr	r3, [pc, #612]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 80021ca:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d107      	bne.n	80021e2 <HAL_TIM_PeriodElapsedCallback+0x5de>
				Motor[4].Status = 0;
 80021d2:	4b97      	ldr	r3, [pc, #604]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
				HAL_TIM_Base_Stop_IT(&htim14);
 80021da:	4896      	ldr	r0, [pc, #600]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x830>)
 80021dc:	f007 f876 	bl	80092cc <HAL_TIM_Base_Stop_IT>
 80021e0:	e012      	b.n	8002208 <HAL_TIM_PeriodElapsedCallback+0x604>
			else if (Motor[4].NumberofSteps <= 0){
 80021e2:	4b93      	ldr	r3, [pc, #588]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 80021e4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10d      	bne.n	8002208 <HAL_TIM_PeriodElapsedCallback+0x604>
				Motor[4].Status = 0;
 80021ec:	4b90      	ldr	r3, [pc, #576]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
				printf("[WRONG]Motor4 Goto Target Position Failed!---Current_Position:%ld---\r\n",Motor[4].StepPosition);
 80021f4:	4b8e      	ldr	r3, [pc, #568]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 80021f6:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 80021fa:	4619      	mov	r1, r3
 80021fc:	488e      	ldr	r0, [pc, #568]	; (8002438 <HAL_TIM_PeriodElapsedCallback+0x834>)
 80021fe:	f00c faf7 	bl	800e7f0 <iprintf>
				HAL_TIM_Base_Stop_IT(&htim14);
 8002202:	488c      	ldr	r0, [pc, #560]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8002204:	f007 f862 	bl	80092cc <HAL_TIM_Base_Stop_IT>
			if (Motor[4].NumberofSteps > Motor[4].NumberofSteps_StopAccel)
 8002208:	4b89      	ldr	r3, [pc, #548]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 800220a:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 800220e:	4b88      	ldr	r3, [pc, #544]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8002210:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8002214:	429a      	cmp	r2, r3
 8002216:	d90f      	bls.n	8002238 <HAL_TIM_PeriodElapsedCallback+0x634>
				if(AccelDecelcount_TIM14 >= Motor[4].AccelerationTimeTMR)
 8002218:	4b85      	ldr	r3, [pc, #532]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 800221a:	f8d3 21d8 	ldr.w	r2, [r3, #472]	; 0x1d8
 800221e:	4b87      	ldr	r3, [pc, #540]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x838>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	f200 82f3 	bhi.w	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
					AccelDecelcount_TIM14=0;
 8002228:	4b84      	ldr	r3, [pc, #528]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x838>)
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
					AccelDecel(ACCEL,&Motor[4]);
 800222e:	4984      	ldr	r1, [pc, #528]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8002230:	2001      	movs	r0, #1
 8002232:	f001 fe1f 	bl	8003e74 <AccelDecel>
}
 8002236:	e2ea      	b.n	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
			else if (Motor[4].NumberofSteps < Motor[4].NumberofSteps_BeginDecel)
 8002238:	4b7d      	ldr	r3, [pc, #500]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 800223a:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 800223e:	4b7c      	ldr	r3, [pc, #496]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8002240:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8002244:	429a      	cmp	r2, r3
 8002246:	f080 82e2 	bcs.w	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
				if(AccelDecelcount_TIM14 >= Motor[4].DecelerationTimeTMR)
 800224a:	4b79      	ldr	r3, [pc, #484]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 800224c:	f8d3 21dc 	ldr.w	r2, [r3, #476]	; 0x1dc
 8002250:	4b7a      	ldr	r3, [pc, #488]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x838>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	f200 82da 	bhi.w	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
					AccelDecelcount_TIM14=0;
 800225a:	4b78      	ldr	r3, [pc, #480]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x838>)
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
					AccelDecel(DECEL,&Motor[4]);
 8002260:	4977      	ldr	r1, [pc, #476]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8002262:	2002      	movs	r0, #2
 8002264:	f001 fe06 	bl	8003e74 <AccelDecel>
}
 8002268:	e2d1      	b.n	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
	else if (htim->Instance == TIM6)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a75      	ldr	r2, [pc, #468]	; (8002444 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8002270:	4293      	cmp	r3, r2
 8002272:	f040 80f5 	bne.w	8002460 <HAL_TIM_PeriodElapsedCallback+0x85c>
			timecount_TIM6++;
 8002276:	4b74      	ldr	r3, [pc, #464]	; (8002448 <HAL_TIM_PeriodElapsedCallback+0x844>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	3301      	adds	r3, #1
 800227c:	4a72      	ldr	r2, [pc, #456]	; (8002448 <HAL_TIM_PeriodElapsedCallback+0x844>)
 800227e:	6013      	str	r3, [r2, #0]
			AccelDecelcount_TIM6++;
 8002280:	4b72      	ldr	r3, [pc, #456]	; (800244c <HAL_TIM_PeriodElapsedCallback+0x848>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	3301      	adds	r3, #1
 8002286:	4a71      	ldr	r2, [pc, #452]	; (800244c <HAL_TIM_PeriodElapsedCallback+0x848>)
 8002288:	6013      	str	r3, [r2, #0]
			if(timecount_TIM6 >= Motor[5].StepperSpeedTMR)
 800228a:	4b69      	ldr	r3, [pc, #420]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 800228c:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 8002290:	4b6d      	ldr	r3, [pc, #436]	; (8002448 <HAL_TIM_PeriodElapsedCallback+0x844>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d872      	bhi.n	800237e <HAL_TIM_PeriodElapsedCallback+0x77a>
				timecount_TIM6 = 0 ;
 8002298:	4b6b      	ldr	r3, [pc, #428]	; (8002448 <HAL_TIM_PeriodElapsedCallback+0x844>)
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
				if (Motor[5].MotorDirection == 1){
 800229e:	4b64      	ldr	r3, [pc, #400]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 80022a0:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d127      	bne.n	80022f8 <HAL_TIM_PeriodElapsedCallback+0x6f4>
					switch ( Motor5_State )
 80022a8:	4b69      	ldr	r3, [pc, #420]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d84a      	bhi.n	8002348 <HAL_TIM_PeriodElapsedCallback+0x744>
 80022b2:	a201      	add	r2, pc, #4	; (adr r2, 80022b8 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 80022b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b8:	080022c9 	.word	0x080022c9
 80022bc:	080022d5 	.word	0x080022d5
 80022c0:	080022e1 	.word	0x080022e1
 80022c4:	080022ed 	.word	0x080022ed
						Motor5_AB();
 80022c8:	f001 fbe6 	bl	8003a98 <Motor5_AB>
						Motor5_State = 2 ;
 80022cc:	4b60      	ldr	r3, [pc, #384]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 80022ce:	2202      	movs	r2, #2
 80022d0:	701a      	strb	r2, [r3, #0]
						break;
 80022d2:	e039      	b.n	8002348 <HAL_TIM_PeriodElapsedCallback+0x744>
						Motor5_Ab();
 80022d4:	f001 fc3a 	bl	8003b4c <Motor5_Ab>
						Motor5_State = 3 ;
 80022d8:	4b5d      	ldr	r3, [pc, #372]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 80022da:	2203      	movs	r2, #3
 80022dc:	701a      	strb	r2, [r3, #0]
						break;
 80022de:	e033      	b.n	8002348 <HAL_TIM_PeriodElapsedCallback+0x744>
						Motor5_ab();
 80022e0:	f001 fc16 	bl	8003b10 <Motor5_ab>
						Motor5_State = 4 ;
 80022e4:	4b5a      	ldr	r3, [pc, #360]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 80022e6:	2204      	movs	r2, #4
 80022e8:	701a      	strb	r2, [r3, #0]
						break;
 80022ea:	e02d      	b.n	8002348 <HAL_TIM_PeriodElapsedCallback+0x744>
						Motor5_aB();
 80022ec:	f001 fbf2 	bl	8003ad4 <Motor5_aB>
						Motor5_State = 1 ;
 80022f0:	4b57      	ldr	r3, [pc, #348]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]
						break;
 80022f6:	e027      	b.n	8002348 <HAL_TIM_PeriodElapsedCallback+0x744>
					switch ( Motor5_State )
 80022f8:	4b55      	ldr	r3, [pc, #340]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	3b01      	subs	r3, #1
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d822      	bhi.n	8002348 <HAL_TIM_PeriodElapsedCallback+0x744>
 8002302:	a201      	add	r2, pc, #4	; (adr r2, 8002308 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8002304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002308:	08002319 	.word	0x08002319
 800230c:	08002325 	.word	0x08002325
 8002310:	08002331 	.word	0x08002331
 8002314:	0800233d 	.word	0x0800233d
						Motor5_AB();
 8002318:	f001 fbbe 	bl	8003a98 <Motor5_AB>
						Motor5_State = 2 ;
 800231c:	4b4c      	ldr	r3, [pc, #304]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 800231e:	2202      	movs	r2, #2
 8002320:	701a      	strb	r2, [r3, #0]
						break;
 8002322:	e011      	b.n	8002348 <HAL_TIM_PeriodElapsedCallback+0x744>
						Motor5_aB();
 8002324:	f001 fbd6 	bl	8003ad4 <Motor5_aB>
						Motor5_State = 3 ;
 8002328:	4b49      	ldr	r3, [pc, #292]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 800232a:	2203      	movs	r2, #3
 800232c:	701a      	strb	r2, [r3, #0]
						break;
 800232e:	e00b      	b.n	8002348 <HAL_TIM_PeriodElapsedCallback+0x744>
						Motor5_ab();
 8002330:	f001 fbee 	bl	8003b10 <Motor5_ab>
						Motor5_State = 4 ;
 8002334:	4b46      	ldr	r3, [pc, #280]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8002336:	2204      	movs	r2, #4
 8002338:	701a      	strb	r2, [r3, #0]
						break;
 800233a:	e005      	b.n	8002348 <HAL_TIM_PeriodElapsedCallback+0x744>
						Motor5_Ab();
 800233c:	f001 fc06 	bl	8003b4c <Motor5_Ab>
						Motor5_State = 1 ;
 8002340:	4b43      	ldr	r3, [pc, #268]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8002342:	2201      	movs	r2, #1
 8002344:	701a      	strb	r2, [r3, #0]
						break;
 8002346:	bf00      	nop
				Motor[5].NumberofSteps--;
 8002348:	4b39      	ldr	r3, [pc, #228]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 800234a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800234e:	3b01      	subs	r3, #1
 8002350:	4a37      	ldr	r2, [pc, #220]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8002352:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
				if (Motor[5].MotorDirection == 1){
 8002356:	4b36      	ldr	r3, [pc, #216]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8002358:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800235c:	2b01      	cmp	r3, #1
 800235e:	d107      	bne.n	8002370 <HAL_TIM_PeriodElapsedCallback+0x76c>
					Motor[5].StepPosition++;
 8002360:	4b33      	ldr	r3, [pc, #204]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8002362:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002366:	3301      	adds	r3, #1
 8002368:	4a31      	ldr	r2, [pc, #196]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 800236a:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
 800236e:	e006      	b.n	800237e <HAL_TIM_PeriodElapsedCallback+0x77a>
					Motor[5].StepPosition--;
 8002370:	4b2f      	ldr	r3, [pc, #188]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8002372:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002376:	3b01      	subs	r3, #1
 8002378:	4a2d      	ldr	r2, [pc, #180]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 800237a:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
			if(Motor[5].StepPosition == Motor[5].TargetPosition){
 800237e:	4b2c      	ldr	r3, [pc, #176]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8002380:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8002384:	4b2a      	ldr	r3, [pc, #168]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8002386:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800238a:	429a      	cmp	r2, r3
 800238c:	d110      	bne.n	80023b0 <HAL_TIM_PeriodElapsedCallback+0x7ac>
				Motor[5].Status = 0;
 800238e:	4b28      	ldr	r3, [pc, #160]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
				Motor5_Release();
 8002396:	f001 fbf7 	bl	8003b88 <Motor5_Release>
				printf("---Motor5 Steps Position:%ld---\r\n",Motor[5].StepPosition);
 800239a:	4b25      	ldr	r3, [pc, #148]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 800239c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80023a0:	4619      	mov	r1, r3
 80023a2:	482c      	ldr	r0, [pc, #176]	; (8002454 <HAL_TIM_PeriodElapsedCallback+0x850>)
 80023a4:	f00c fa24 	bl	800e7f0 <iprintf>
				HAL_TIM_Base_Stop_IT(&htim6);
 80023a8:	482b      	ldr	r0, [pc, #172]	; (8002458 <HAL_TIM_PeriodElapsedCallback+0x854>)
 80023aa:	f006 ff8f 	bl	80092cc <HAL_TIM_Base_Stop_IT>
 80023ae:	e00d      	b.n	80023cc <HAL_TIM_PeriodElapsedCallback+0x7c8>
			else if (Motor[5].NumberofSteps <= 0){
 80023b0:	4b1f      	ldr	r3, [pc, #124]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 80023b2:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d108      	bne.n	80023cc <HAL_TIM_PeriodElapsedCallback+0x7c8>
				Motor[5].Status = 0;
 80023ba:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
				Motor5_Release();
 80023c2:	f001 fbe1 	bl	8003b88 <Motor5_Release>
				HAL_TIM_Base_Stop_IT(&htim6);
 80023c6:	4824      	ldr	r0, [pc, #144]	; (8002458 <HAL_TIM_PeriodElapsedCallback+0x854>)
 80023c8:	f006 ff80 	bl	80092cc <HAL_TIM_Base_Stop_IT>
			if (Motor[5].NumberofSteps > Motor[5].NumberofSteps_StopAccel){
 80023cc:	4b18      	ldr	r3, [pc, #96]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 80023ce:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80023d2:	4b17      	ldr	r3, [pc, #92]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 80023d4:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80023d8:	429a      	cmp	r2, r3
 80023da:	d90f      	bls.n	80023fc <HAL_TIM_PeriodElapsedCallback+0x7f8>
				if(AccelDecelcount_TIM6 >= Motor[5].AccelerationTimeTMR){
 80023dc:	4b14      	ldr	r3, [pc, #80]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 80023de:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80023e2:	4b1a      	ldr	r3, [pc, #104]	; (800244c <HAL_TIM_PeriodElapsedCallback+0x848>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	f200 8211 	bhi.w	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
					AccelDecelcount_TIM6=0;
 80023ec:	4b17      	ldr	r3, [pc, #92]	; (800244c <HAL_TIM_PeriodElapsedCallback+0x848>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
					AccelDecel(ACCEL,&Motor[5]);
 80023f2:	491a      	ldr	r1, [pc, #104]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x858>)
 80023f4:	2001      	movs	r0, #1
 80023f6:	f001 fd3d 	bl	8003e74 <AccelDecel>
}
 80023fa:	e208      	b.n	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
			else if (Motor[5].NumberofSteps < Motor[5].NumberofSteps_BeginDecel){
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 80023fe:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8002402:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8002404:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8002408:	429a      	cmp	r2, r3
 800240a:	f080 8200 	bcs.w	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
				if(AccelDecelcount_TIM6 >= Motor[5].DecelerationTimeTMR){
 800240e:	4b08      	ldr	r3, [pc, #32]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8002410:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8002414:	4b0d      	ldr	r3, [pc, #52]	; (800244c <HAL_TIM_PeriodElapsedCallback+0x848>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	f200 81f8 	bhi.w	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
					AccelDecelcount_TIM6=0;
 800241e:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_TIM_PeriodElapsedCallback+0x848>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
					AccelDecel(DECEL,&Motor[5]);
 8002424:	490d      	ldr	r1, [pc, #52]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x858>)
 8002426:	2002      	movs	r0, #2
 8002428:	f001 fd24 	bl	8003e74 <AccelDecel>
}
 800242c:	e1ef      	b.n	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
 800242e:	bf00      	nop
 8002430:	200008b0 	.word	0x200008b0
 8002434:	200006ec 	.word	0x200006ec
 8002438:	08010618 	.word	0x08010618
 800243c:	200003b4 	.word	0x200003b4
 8002440:	20000a30 	.word	0x20000a30
 8002444:	40001000 	.word	0x40001000
 8002448:	200003b8 	.word	0x200003b8
 800244c:	200003bc 	.word	0x200003bc
 8002450:	20000004 	.word	0x20000004
 8002454:	08010660 	.word	0x08010660
 8002458:	200004f4 	.word	0x200004f4
 800245c:	20000a90 	.word	0x20000a90
	else if (htim->Instance == TIM7)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4aa5      	ldr	r2, [pc, #660]	; (80026fc <HAL_TIM_PeriodElapsedCallback+0xaf8>)
 8002466:	4293      	cmp	r3, r2
 8002468:	f040 80dc 	bne.w	8002624 <HAL_TIM_PeriodElapsedCallback+0xa20>
			timecount_TIM7++;
 800246c:	4ba4      	ldr	r3, [pc, #656]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0xafc>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	3301      	adds	r3, #1
 8002472:	4aa3      	ldr	r2, [pc, #652]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0xafc>)
 8002474:	6013      	str	r3, [r2, #0]
			AccelDecelcount_TIM7++;
 8002476:	4ba3      	ldr	r3, [pc, #652]	; (8002704 <HAL_TIM_PeriodElapsedCallback+0xb00>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	3301      	adds	r3, #1
 800247c:	4aa1      	ldr	r2, [pc, #644]	; (8002704 <HAL_TIM_PeriodElapsedCallback+0xb00>)
 800247e:	6013      	str	r3, [r2, #0]
			if(timecount_TIM7 >= Motor[6].StepperSpeedTMR)
 8002480:	4ba1      	ldr	r3, [pc, #644]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 8002482:	f8d3 2288 	ldr.w	r2, [r3, #648]	; 0x288
 8002486:	4b9e      	ldr	r3, [pc, #632]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0xafc>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d872      	bhi.n	8002574 <HAL_TIM_PeriodElapsedCallback+0x970>
				timecount_TIM7 = 0 ;
 800248e:	4b9c      	ldr	r3, [pc, #624]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0xafc>)
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
				Motor[6].NumberofSteps--;
 8002494:	4b9c      	ldr	r3, [pc, #624]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 8002496:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800249a:	3b01      	subs	r3, #1
 800249c:	4a9a      	ldr	r2, [pc, #616]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 800249e:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c
				if (Motor[6].MotorDirection == 1){
 80024a2:	4b99      	ldr	r3, [pc, #612]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 80024a4:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d127      	bne.n	80024fc <HAL_TIM_PeriodElapsedCallback+0x8f8>
					switch ( Motor6_State )
 80024ac:	4b97      	ldr	r3, [pc, #604]	; (800270c <HAL_TIM_PeriodElapsedCallback+0xb08>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	3b01      	subs	r3, #1
 80024b2:	2b03      	cmp	r3, #3
 80024b4:	d84a      	bhi.n	800254c <HAL_TIM_PeriodElapsedCallback+0x948>
 80024b6:	a201      	add	r2, pc, #4	; (adr r2, 80024bc <HAL_TIM_PeriodElapsedCallback+0x8b8>)
 80024b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024bc:	080024cd 	.word	0x080024cd
 80024c0:	080024d9 	.word	0x080024d9
 80024c4:	080024e5 	.word	0x080024e5
 80024c8:	080024f1 	.word	0x080024f1
						Motor6_AB();
 80024cc:	f001 fb7a 	bl	8003bc4 <Motor6_AB>
						Motor6_State = 2 ;
 80024d0:	4b8e      	ldr	r3, [pc, #568]	; (800270c <HAL_TIM_PeriodElapsedCallback+0xb08>)
 80024d2:	2202      	movs	r2, #2
 80024d4:	701a      	strb	r2, [r3, #0]
						break;
 80024d6:	e039      	b.n	800254c <HAL_TIM_PeriodElapsedCallback+0x948>
						Motor6_Ab();
 80024d8:	f001 fbce 	bl	8003c78 <Motor6_Ab>
						Motor6_State = 3 ;
 80024dc:	4b8b      	ldr	r3, [pc, #556]	; (800270c <HAL_TIM_PeriodElapsedCallback+0xb08>)
 80024de:	2203      	movs	r2, #3
 80024e0:	701a      	strb	r2, [r3, #0]
						break;
 80024e2:	e033      	b.n	800254c <HAL_TIM_PeriodElapsedCallback+0x948>
						Motor6_ab();
 80024e4:	f001 fbaa 	bl	8003c3c <Motor6_ab>
						Motor6_State = 4 ;
 80024e8:	4b88      	ldr	r3, [pc, #544]	; (800270c <HAL_TIM_PeriodElapsedCallback+0xb08>)
 80024ea:	2204      	movs	r2, #4
 80024ec:	701a      	strb	r2, [r3, #0]
						break;
 80024ee:	e02d      	b.n	800254c <HAL_TIM_PeriodElapsedCallback+0x948>
						Motor6_aB();
 80024f0:	f001 fb86 	bl	8003c00 <Motor6_aB>
						Motor6_State = 1 ;
 80024f4:	4b85      	ldr	r3, [pc, #532]	; (800270c <HAL_TIM_PeriodElapsedCallback+0xb08>)
 80024f6:	2201      	movs	r2, #1
 80024f8:	701a      	strb	r2, [r3, #0]
						break;
 80024fa:	e027      	b.n	800254c <HAL_TIM_PeriodElapsedCallback+0x948>
					switch ( Motor6_State )
 80024fc:	4b83      	ldr	r3, [pc, #524]	; (800270c <HAL_TIM_PeriodElapsedCallback+0xb08>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	3b01      	subs	r3, #1
 8002502:	2b03      	cmp	r3, #3
 8002504:	d822      	bhi.n	800254c <HAL_TIM_PeriodElapsedCallback+0x948>
 8002506:	a201      	add	r2, pc, #4	; (adr r2, 800250c <HAL_TIM_PeriodElapsedCallback+0x908>)
 8002508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250c:	0800251d 	.word	0x0800251d
 8002510:	08002529 	.word	0x08002529
 8002514:	08002535 	.word	0x08002535
 8002518:	08002541 	.word	0x08002541
						Motor6_AB();
 800251c:	f001 fb52 	bl	8003bc4 <Motor6_AB>
						Motor6_State = 2 ;
 8002520:	4b7a      	ldr	r3, [pc, #488]	; (800270c <HAL_TIM_PeriodElapsedCallback+0xb08>)
 8002522:	2202      	movs	r2, #2
 8002524:	701a      	strb	r2, [r3, #0]
						break;
 8002526:	e011      	b.n	800254c <HAL_TIM_PeriodElapsedCallback+0x948>
						Motor6_aB();
 8002528:	f001 fb6a 	bl	8003c00 <Motor6_aB>
						Motor6_State = 3 ;
 800252c:	4b77      	ldr	r3, [pc, #476]	; (800270c <HAL_TIM_PeriodElapsedCallback+0xb08>)
 800252e:	2203      	movs	r2, #3
 8002530:	701a      	strb	r2, [r3, #0]
						break;
 8002532:	e00b      	b.n	800254c <HAL_TIM_PeriodElapsedCallback+0x948>
						Motor6_ab();
 8002534:	f001 fb82 	bl	8003c3c <Motor6_ab>
						Motor6_State = 4 ;
 8002538:	4b74      	ldr	r3, [pc, #464]	; (800270c <HAL_TIM_PeriodElapsedCallback+0xb08>)
 800253a:	2204      	movs	r2, #4
 800253c:	701a      	strb	r2, [r3, #0]
						break;
 800253e:	e005      	b.n	800254c <HAL_TIM_PeriodElapsedCallback+0x948>
						Motor6_Ab();
 8002540:	f001 fb9a 	bl	8003c78 <Motor6_Ab>
						Motor6_State = 1 ;
 8002544:	4b71      	ldr	r3, [pc, #452]	; (800270c <HAL_TIM_PeriodElapsedCallback+0xb08>)
 8002546:	2201      	movs	r2, #1
 8002548:	701a      	strb	r2, [r3, #0]
						break;
 800254a:	bf00      	nop
				if (Motor[6].MotorDirection == 1){
 800254c:	4b6e      	ldr	r3, [pc, #440]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 800254e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8002552:	2b01      	cmp	r3, #1
 8002554:	d107      	bne.n	8002566 <HAL_TIM_PeriodElapsedCallback+0x962>
					Motor[6].StepPosition++;
 8002556:	4b6c      	ldr	r3, [pc, #432]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 8002558:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800255c:	3301      	adds	r3, #1
 800255e:	4a6a      	ldr	r2, [pc, #424]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 8002560:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
 8002564:	e006      	b.n	8002574 <HAL_TIM_PeriodElapsedCallback+0x970>
					Motor[6].StepPosition--;
 8002566:	4b68      	ldr	r3, [pc, #416]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 8002568:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800256c:	3b01      	subs	r3, #1
 800256e:	4a66      	ldr	r2, [pc, #408]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 8002570:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
			if(Motor[6].StepPosition == Motor[6].TargetPosition){
 8002574:	4b64      	ldr	r3, [pc, #400]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 8002576:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800257a:	4b63      	ldr	r3, [pc, #396]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 800257c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8002580:	429a      	cmp	r2, r3
 8002582:	d110      	bne.n	80025a6 <HAL_TIM_PeriodElapsedCallback+0x9a2>
				Motor[6].Status = 0;
 8002584:	4b60      	ldr	r3, [pc, #384]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
				Motor6_Release();
 800258c:	f001 fb92 	bl	8003cb4 <Motor6_Release>
				printf("---Motor[6] Steps Position:%ld---\r\n",Motor[6].StepPosition);
 8002590:	4b5d      	ldr	r3, [pc, #372]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 8002592:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8002596:	4619      	mov	r1, r3
 8002598:	485d      	ldr	r0, [pc, #372]	; (8002710 <HAL_TIM_PeriodElapsedCallback+0xb0c>)
 800259a:	f00c f929 	bl	800e7f0 <iprintf>
				HAL_TIM_Base_Stop_IT(&htim7);
 800259e:	485d      	ldr	r0, [pc, #372]	; (8002714 <HAL_TIM_PeriodElapsedCallback+0xb10>)
 80025a0:	f006 fe94 	bl	80092cc <HAL_TIM_Base_Stop_IT>
 80025a4:	e00d      	b.n	80025c2 <HAL_TIM_PeriodElapsedCallback+0x9be>
			else if (Motor[6].NumberofSteps <= 0){
 80025a6:	4b58      	ldr	r3, [pc, #352]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 80025a8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d108      	bne.n	80025c2 <HAL_TIM_PeriodElapsedCallback+0x9be>
				Motor[6].Status = 0;
 80025b0:	4b55      	ldr	r3, [pc, #340]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
				Motor6_Release();
 80025b8:	f001 fb7c 	bl	8003cb4 <Motor6_Release>
				HAL_TIM_Base_Stop_IT(&htim7);
 80025bc:	4855      	ldr	r0, [pc, #340]	; (8002714 <HAL_TIM_PeriodElapsedCallback+0xb10>)
 80025be:	f006 fe85 	bl	80092cc <HAL_TIM_Base_Stop_IT>
			if (Motor[6].NumberofSteps > Motor[6].NumberofSteps_StopAccel){
 80025c2:	4b51      	ldr	r3, [pc, #324]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 80025c4:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
 80025c8:	4b4f      	ldr	r3, [pc, #316]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 80025ca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d90f      	bls.n	80025f2 <HAL_TIM_PeriodElapsedCallback+0x9ee>
				if(AccelDecelcount_TIM7 >= Motor[6].AccelerationTimeTMR){
 80025d2:	4b4d      	ldr	r3, [pc, #308]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 80025d4:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
 80025d8:	4b4a      	ldr	r3, [pc, #296]	; (8002704 <HAL_TIM_PeriodElapsedCallback+0xb00>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	f200 8116 	bhi.w	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
					AccelDecelcount_TIM7=0;
 80025e2:	4b48      	ldr	r3, [pc, #288]	; (8002704 <HAL_TIM_PeriodElapsedCallback+0xb00>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
					AccelDecel(ACCEL,&Motor[6]);
 80025e8:	494b      	ldr	r1, [pc, #300]	; (8002718 <HAL_TIM_PeriodElapsedCallback+0xb14>)
 80025ea:	2001      	movs	r0, #1
 80025ec:	f001 fc42 	bl	8003e74 <AccelDecel>
}
 80025f0:	e10d      	b.n	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
			else if (Motor[6].NumberofSteps < Motor[6].NumberofSteps_BeginDecel){
 80025f2:	4b45      	ldr	r3, [pc, #276]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 80025f4:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
 80025f8:	4b43      	ldr	r3, [pc, #268]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 80025fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80025fe:	429a      	cmp	r2, r3
 8002600:	f080 8105 	bcs.w	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
				if(AccelDecelcount_TIM7 >= Motor[6].DecelerationTimeTMR){
 8002604:	4b40      	ldr	r3, [pc, #256]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 8002606:	f8d3 229c 	ldr.w	r2, [r3, #668]	; 0x29c
 800260a:	4b3e      	ldr	r3, [pc, #248]	; (8002704 <HAL_TIM_PeriodElapsedCallback+0xb00>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	f200 80fd 	bhi.w	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
					AccelDecelcount_TIM7=0;
 8002614:	4b3b      	ldr	r3, [pc, #236]	; (8002704 <HAL_TIM_PeriodElapsedCallback+0xb00>)
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
					AccelDecel(DECEL,&Motor[6]);
 800261a:	493f      	ldr	r1, [pc, #252]	; (8002718 <HAL_TIM_PeriodElapsedCallback+0xb14>)
 800261c:	2002      	movs	r0, #2
 800261e:	f001 fc29 	bl	8003e74 <AccelDecel>
}
 8002622:	e0f4      	b.n	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
	else if (htim->Instance == TIM12)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a3c      	ldr	r2, [pc, #240]	; (800271c <HAL_TIM_PeriodElapsedCallback+0xb18>)
 800262a:	4293      	cmp	r3, r2
 800262c:	f040 80ef 	bne.w	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
			timecount_TIM12_DCM7++;
 8002630:	4b3b      	ldr	r3, [pc, #236]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0xb1c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	3301      	adds	r3, #1
 8002636:	4a3a      	ldr	r2, [pc, #232]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0xb1c>)
 8002638:	6013      	str	r3, [r2, #0]
			timecount_TIM12_DCM8++;
 800263a:	4b3a      	ldr	r3, [pc, #232]	; (8002724 <HAL_TIM_PeriodElapsedCallback+0xb20>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	3301      	adds	r3, #1
 8002640:	4a38      	ldr	r2, [pc, #224]	; (8002724 <HAL_TIM_PeriodElapsedCallback+0xb20>)
 8002642:	6013      	str	r3, [r2, #0]
			if (Motor[7].Status){
 8002644:	4b30      	ldr	r3, [pc, #192]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 8002646:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d079      	beq.n	8002742 <HAL_TIM_PeriodElapsedCallback+0xb3e>
				if(timecount_TIM12_DCM7 <= Motor[7].AccelerationTimeTMR)
 800264e:	4b2e      	ldr	r3, [pc, #184]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 8002650:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8002654:	4b32      	ldr	r3, [pc, #200]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0xb1c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d323      	bcc.n	80026a4 <HAL_TIM_PeriodElapsedCallback+0xaa0>
					switch( Motor[7].Status ){
 800265c:	4b2a      	ldr	r3, [pc, #168]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 800265e:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
 8002662:	2b03      	cmp	r3, #3
 8002664:	d012      	beq.n	800268c <HAL_TIM_PeriodElapsedCallback+0xa88>
 8002666:	2b03      	cmp	r3, #3
 8002668:	dc61      	bgt.n	800272e <HAL_TIM_PeriodElapsedCallback+0xb2a>
 800266a:	2b01      	cmp	r3, #1
 800266c:	d008      	beq.n	8002680 <HAL_TIM_PeriodElapsedCallback+0xa7c>
 800266e:	2b02      	cmp	r3, #2
 8002670:	d15d      	bne.n	800272e <HAL_TIM_PeriodElapsedCallback+0xb2a>
						VM7_IN1_H();
 8002672:	2201      	movs	r2, #1
 8002674:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002678:	482b      	ldr	r0, [pc, #172]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0xb24>)
 800267a:	f003 fd87 	bl	800618c <HAL_GPIO_WritePin>
						break;
 800267e:	e056      	b.n	800272e <HAL_TIM_PeriodElapsedCallback+0xb2a>
						VM7_IN4_H();
 8002680:	2201      	movs	r2, #1
 8002682:	2102      	movs	r1, #2
 8002684:	4828      	ldr	r0, [pc, #160]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0xb24>)
 8002686:	f003 fd81 	bl	800618c <HAL_GPIO_WritePin>
						break;
 800268a:	e050      	b.n	800272e <HAL_TIM_PeriodElapsedCallback+0xb2a>
						VM7_IN1_H();
 800268c:	2201      	movs	r2, #1
 800268e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002692:	4825      	ldr	r0, [pc, #148]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0xb24>)
 8002694:	f003 fd7a 	bl	800618c <HAL_GPIO_WritePin>
						VM7_IN4_H();
 8002698:	2201      	movs	r2, #1
 800269a:	2102      	movs	r1, #2
 800269c:	4822      	ldr	r0, [pc, #136]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0xb24>)
 800269e:	f003 fd75 	bl	800618c <HAL_GPIO_WritePin>
						break;
 80026a2:	e044      	b.n	800272e <HAL_TIM_PeriodElapsedCallback+0xb2a>
				else if(timecount_TIM12_DCM7 > Motor[7].AccelerationTimeTMR)
 80026a4:	4b18      	ldr	r3, [pc, #96]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 80026a6:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80026aa:	4b1d      	ldr	r3, [pc, #116]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0xb1c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d23c      	bcs.n	800272c <HAL_TIM_PeriodElapsedCallback+0xb28>
					switch( Motor[7].Status ){
 80026b2:	4b15      	ldr	r3, [pc, #84]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0xb04>)
 80026b4:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d012      	beq.n	80026e2 <HAL_TIM_PeriodElapsedCallback+0xade>
 80026bc:	2b03      	cmp	r3, #3
 80026be:	dc36      	bgt.n	800272e <HAL_TIM_PeriodElapsedCallback+0xb2a>
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d008      	beq.n	80026d6 <HAL_TIM_PeriodElapsedCallback+0xad2>
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d132      	bne.n	800272e <HAL_TIM_PeriodElapsedCallback+0xb2a>
						VM7_IN1_L();
 80026c8:	2200      	movs	r2, #0
 80026ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026ce:	4816      	ldr	r0, [pc, #88]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0xb24>)
 80026d0:	f003 fd5c 	bl	800618c <HAL_GPIO_WritePin>
						break;
 80026d4:	e02b      	b.n	800272e <HAL_TIM_PeriodElapsedCallback+0xb2a>
						VM7_IN4_L();
 80026d6:	2200      	movs	r2, #0
 80026d8:	2102      	movs	r1, #2
 80026da:	4813      	ldr	r0, [pc, #76]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0xb24>)
 80026dc:	f003 fd56 	bl	800618c <HAL_GPIO_WritePin>
						break;
 80026e0:	e025      	b.n	800272e <HAL_TIM_PeriodElapsedCallback+0xb2a>
						VM7_IN1_L();
 80026e2:	2200      	movs	r2, #0
 80026e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026e8:	480f      	ldr	r0, [pc, #60]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0xb24>)
 80026ea:	f003 fd4f 	bl	800618c <HAL_GPIO_WritePin>
						VM7_IN4_L();
 80026ee:	2200      	movs	r2, #0
 80026f0:	2102      	movs	r1, #2
 80026f2:	480d      	ldr	r0, [pc, #52]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0xb24>)
 80026f4:	f003 fd4a 	bl	800618c <HAL_GPIO_WritePin>
						break;
 80026f8:	e019      	b.n	800272e <HAL_TIM_PeriodElapsedCallback+0xb2a>
 80026fa:	bf00      	nop
 80026fc:	40001400 	.word	0x40001400
 8002700:	200003c0 	.word	0x200003c0
 8002704:	200003c4 	.word	0x200003c4
 8002708:	200008b0 	.word	0x200008b0
 800270c:	20000005 	.word	0x20000005
 8002710:	08010684 	.word	0x08010684
 8002714:	2000053c 	.word	0x2000053c
 8002718:	20000af0 	.word	0x20000af0
 800271c:	40001800 	.word	0x40001800
 8002720:	200003c8 	.word	0x200003c8
 8002724:	200003cc 	.word	0x200003cc
 8002728:	40020400 	.word	0x40020400
				}
 800272c:	bf00      	nop
				if(timecount_TIM12_DCM7 >= Motor[7].StepperSpeedTMR)
 800272e:	4b3a      	ldr	r3, [pc, #232]	; (8002818 <HAL_TIM_PeriodElapsedCallback+0xc14>)
 8002730:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8002734:	4b39      	ldr	r3, [pc, #228]	; (800281c <HAL_TIM_PeriodElapsedCallback+0xc18>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d802      	bhi.n	8002742 <HAL_TIM_PeriodElapsedCallback+0xb3e>
					timecount_TIM12_DCM7 = 0 ;
 800273c:	4b37      	ldr	r3, [pc, #220]	; (800281c <HAL_TIM_PeriodElapsedCallback+0xc18>)
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
			if (Motor[8].Status){
 8002742:	4b35      	ldr	r3, [pc, #212]	; (8002818 <HAL_TIM_PeriodElapsedCallback+0xc14>)
 8002744:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8002748:	2b00      	cmp	r3, #0
 800274a:	d060      	beq.n	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
				if(timecount_TIM12_DCM8 <= Motor[8].AccelerationTimeTMR)
 800274c:	4b32      	ldr	r3, [pc, #200]	; (8002818 <HAL_TIM_PeriodElapsedCallback+0xc14>)
 800274e:	f8d3 2358 	ldr.w	r2, [r3, #856]	; 0x358
 8002752:	4b33      	ldr	r3, [pc, #204]	; (8002820 <HAL_TIM_PeriodElapsedCallback+0xc1c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d323      	bcc.n	80027a2 <HAL_TIM_PeriodElapsedCallback+0xb9e>
					switch( Motor[8].Status ){
 800275a:	4b2f      	ldr	r3, [pc, #188]	; (8002818 <HAL_TIM_PeriodElapsedCallback+0xc14>)
 800275c:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8002760:	2b03      	cmp	r3, #3
 8002762:	d012      	beq.n	800278a <HAL_TIM_PeriodElapsedCallback+0xb86>
 8002764:	2b03      	cmp	r3, #3
 8002766:	dc48      	bgt.n	80027fa <HAL_TIM_PeriodElapsedCallback+0xbf6>
 8002768:	2b01      	cmp	r3, #1
 800276a:	d008      	beq.n	800277e <HAL_TIM_PeriodElapsedCallback+0xb7a>
 800276c:	2b02      	cmp	r3, #2
 800276e:	d144      	bne.n	80027fa <HAL_TIM_PeriodElapsedCallback+0xbf6>
						VM8_IN1_H();
 8002770:	2201      	movs	r2, #1
 8002772:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002776:	482b      	ldr	r0, [pc, #172]	; (8002824 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 8002778:	f003 fd08 	bl	800618c <HAL_GPIO_WritePin>
						break;
 800277c:	e03d      	b.n	80027fa <HAL_TIM_PeriodElapsedCallback+0xbf6>
						VM8_IN4_H();
 800277e:	2201      	movs	r2, #1
 8002780:	2108      	movs	r1, #8
 8002782:	4829      	ldr	r0, [pc, #164]	; (8002828 <HAL_TIM_PeriodElapsedCallback+0xc24>)
 8002784:	f003 fd02 	bl	800618c <HAL_GPIO_WritePin>
						break;
 8002788:	e037      	b.n	80027fa <HAL_TIM_PeriodElapsedCallback+0xbf6>
						VM8_IN1_H();
 800278a:	2201      	movs	r2, #1
 800278c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002790:	4824      	ldr	r0, [pc, #144]	; (8002824 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 8002792:	f003 fcfb 	bl	800618c <HAL_GPIO_WritePin>
						VM8_IN4_H();
 8002796:	2201      	movs	r2, #1
 8002798:	2108      	movs	r1, #8
 800279a:	4823      	ldr	r0, [pc, #140]	; (8002828 <HAL_TIM_PeriodElapsedCallback+0xc24>)
 800279c:	f003 fcf6 	bl	800618c <HAL_GPIO_WritePin>
						break;
 80027a0:	e02b      	b.n	80027fa <HAL_TIM_PeriodElapsedCallback+0xbf6>
				else if(timecount_TIM12_DCM8 > Motor[8].AccelerationTimeTMR)
 80027a2:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <HAL_TIM_PeriodElapsedCallback+0xc14>)
 80027a4:	f8d3 2358 	ldr.w	r2, [r3, #856]	; 0x358
 80027a8:	4b1d      	ldr	r3, [pc, #116]	; (8002820 <HAL_TIM_PeriodElapsedCallback+0xc1c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d223      	bcs.n	80027f8 <HAL_TIM_PeriodElapsedCallback+0xbf4>
					switch( Motor[8].Status ){
 80027b0:	4b19      	ldr	r3, [pc, #100]	; (8002818 <HAL_TIM_PeriodElapsedCallback+0xc14>)
 80027b2:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	d012      	beq.n	80027e0 <HAL_TIM_PeriodElapsedCallback+0xbdc>
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	dc1d      	bgt.n	80027fa <HAL_TIM_PeriodElapsedCallback+0xbf6>
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d008      	beq.n	80027d4 <HAL_TIM_PeriodElapsedCallback+0xbd0>
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d119      	bne.n	80027fa <HAL_TIM_PeriodElapsedCallback+0xbf6>
						VM8_IN1_L();
 80027c6:	2200      	movs	r2, #0
 80027c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027cc:	4815      	ldr	r0, [pc, #84]	; (8002824 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 80027ce:	f003 fcdd 	bl	800618c <HAL_GPIO_WritePin>
						break;
 80027d2:	e012      	b.n	80027fa <HAL_TIM_PeriodElapsedCallback+0xbf6>
						VM8_IN4_L();
 80027d4:	2200      	movs	r2, #0
 80027d6:	2108      	movs	r1, #8
 80027d8:	4813      	ldr	r0, [pc, #76]	; (8002828 <HAL_TIM_PeriodElapsedCallback+0xc24>)
 80027da:	f003 fcd7 	bl	800618c <HAL_GPIO_WritePin>
						break;
 80027de:	e00c      	b.n	80027fa <HAL_TIM_PeriodElapsedCallback+0xbf6>
						VM8_IN1_L();
 80027e0:	2200      	movs	r2, #0
 80027e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027e6:	480f      	ldr	r0, [pc, #60]	; (8002824 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 80027e8:	f003 fcd0 	bl	800618c <HAL_GPIO_WritePin>
						VM8_IN4_L();
 80027ec:	2200      	movs	r2, #0
 80027ee:	2108      	movs	r1, #8
 80027f0:	480d      	ldr	r0, [pc, #52]	; (8002828 <HAL_TIM_PeriodElapsedCallback+0xc24>)
 80027f2:	f003 fccb 	bl	800618c <HAL_GPIO_WritePin>
						break;
 80027f6:	e000      	b.n	80027fa <HAL_TIM_PeriodElapsedCallback+0xbf6>
				}
 80027f8:	bf00      	nop
				if(timecount_TIM12_DCM8 >= Motor[8].StepperSpeedTMR)
 80027fa:	4b07      	ldr	r3, [pc, #28]	; (8002818 <HAL_TIM_PeriodElapsedCallback+0xc14>)
 80027fc:	f8d3 2348 	ldr.w	r2, [r3, #840]	; 0x348
 8002800:	4b07      	ldr	r3, [pc, #28]	; (8002820 <HAL_TIM_PeriodElapsedCallback+0xc1c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d802      	bhi.n	800280e <HAL_TIM_PeriodElapsedCallback+0xc0a>
					timecount_TIM12_DCM8 = 0 ;
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <HAL_TIM_PeriodElapsedCallback+0xc1c>)
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	200008b0 	.word	0x200008b0
 800281c:	200003c8 	.word	0x200003c8
 8002820:	200003cc 	.word	0x200003cc
 8002824:	40020c00 	.word	0x40020c00
 8002828:	40020000 	.word	0x40020000

0800282c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002830:	b672      	cpsid	i
}
 8002832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002834:	e7fe      	b.n	8002834 <Error_Handler+0x8>
	...

08002838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	607b      	str	r3, [r7, #4]
 8002842:	4b12      	ldr	r3, [pc, #72]	; (800288c <HAL_MspInit+0x54>)
 8002844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002846:	4a11      	ldr	r2, [pc, #68]	; (800288c <HAL_MspInit+0x54>)
 8002848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800284c:	6453      	str	r3, [r2, #68]	; 0x44
 800284e:	4b0f      	ldr	r3, [pc, #60]	; (800288c <HAL_MspInit+0x54>)
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002856:	607b      	str	r3, [r7, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	603b      	str	r3, [r7, #0]
 800285e:	4b0b      	ldr	r3, [pc, #44]	; (800288c <HAL_MspInit+0x54>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	4a0a      	ldr	r2, [pc, #40]	; (800288c <HAL_MspInit+0x54>)
 8002864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002868:	6413      	str	r3, [r2, #64]	; 0x40
 800286a:	4b08      	ldr	r3, [pc, #32]	; (800288c <HAL_MspInit+0x54>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002872:	603b      	str	r3, [r7, #0]
 8002874:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002876:	2200      	movs	r2, #0
 8002878:	210f      	movs	r1, #15
 800287a:	f06f 0001 	mvn.w	r0, #1
 800287e:	f002 fe3d 	bl	80054fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40023800 	.word	0x40023800

08002890 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08c      	sub	sp, #48	; 0x30
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80028a0:	2300      	movs	r3, #0
 80028a2:	60bb      	str	r3, [r7, #8]
 80028a4:	4b2f      	ldr	r3, [pc, #188]	; (8002964 <HAL_InitTick+0xd4>)
 80028a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a8:	4a2e      	ldr	r2, [pc, #184]	; (8002964 <HAL_InitTick+0xd4>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	6453      	str	r3, [r2, #68]	; 0x44
 80028b0:	4b2c      	ldr	r3, [pc, #176]	; (8002964 <HAL_InitTick+0xd4>)
 80028b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028bc:	f107 020c 	add.w	r2, r7, #12
 80028c0:	f107 0310 	add.w	r3, r7, #16
 80028c4:	4611      	mov	r1, r2
 80028c6:	4618      	mov	r0, r3
 80028c8:	f006 fc0e 	bl	80090e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80028cc:	f006 fbf8 	bl	80090c0 <HAL_RCC_GetPCLK2Freq>
 80028d0:	4603      	mov	r3, r0
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80028d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d8:	4a23      	ldr	r2, [pc, #140]	; (8002968 <HAL_InitTick+0xd8>)
 80028da:	fba2 2303 	umull	r2, r3, r2, r3
 80028de:	0c9b      	lsrs	r3, r3, #18
 80028e0:	3b01      	subs	r3, #1
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80028e4:	4b21      	ldr	r3, [pc, #132]	; (800296c <HAL_InitTick+0xdc>)
 80028e6:	4a22      	ldr	r2, [pc, #136]	; (8002970 <HAL_InitTick+0xe0>)
 80028e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80028ea:	4b20      	ldr	r3, [pc, #128]	; (800296c <HAL_InitTick+0xdc>)
 80028ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028f0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80028f2:	4a1e      	ldr	r2, [pc, #120]	; (800296c <HAL_InitTick+0xdc>)
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80028f8:	4b1c      	ldr	r3, [pc, #112]	; (800296c <HAL_InitTick+0xdc>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028fe:	4b1b      	ldr	r3, [pc, #108]	; (800296c <HAL_InitTick+0xdc>)
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002904:	4b19      	ldr	r3, [pc, #100]	; (800296c <HAL_InitTick+0xdc>)
 8002906:	2200      	movs	r2, #0
 8002908:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800290a:	4818      	ldr	r0, [pc, #96]	; (800296c <HAL_InitTick+0xdc>)
 800290c:	f006 fc1e 	bl	800914c <HAL_TIM_Base_Init>
 8002910:	4603      	mov	r3, r0
 8002912:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002916:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800291a:	2b00      	cmp	r3, #0
 800291c:	d11b      	bne.n	8002956 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800291e:	4813      	ldr	r0, [pc, #76]	; (800296c <HAL_InitTick+0xdc>)
 8002920:	f006 fc64 	bl	80091ec <HAL_TIM_Base_Start_IT>
 8002924:	4603      	mov	r3, r0
 8002926:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800292a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800292e:	2b00      	cmp	r3, #0
 8002930:	d111      	bne.n	8002956 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002932:	2019      	movs	r0, #25
 8002934:	f002 fdfe 	bl	8005534 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b0f      	cmp	r3, #15
 800293c:	d808      	bhi.n	8002950 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800293e:	2200      	movs	r2, #0
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	2019      	movs	r0, #25
 8002944:	f002 fdda 	bl	80054fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002948:	4a0a      	ldr	r2, [pc, #40]	; (8002974 <HAL_InitTick+0xe4>)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	e002      	b.n	8002956 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002956:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800295a:	4618      	mov	r0, r3
 800295c:	3730      	adds	r7, #48	; 0x30
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40023800 	.word	0x40023800
 8002968:	431bde83 	.word	0x431bde83
 800296c:	200003d0 	.word	0x200003d0
 8002970:	40010000 	.word	0x40010000
 8002974:	2000000c 	.word	0x2000000c

08002978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800297c:	e7fe      	b.n	800297c <NMI_Handler+0x4>

0800297e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800297e:	b480      	push	{r7}
 8002980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002982:	e7fe      	b.n	8002982 <HardFault_Handler+0x4>

08002984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002988:	e7fe      	b.n	8002988 <MemManage_Handler+0x4>

0800298a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800298e:	e7fe      	b.n	800298e <BusFault_Handler+0x4>

08002990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002994:	e7fe      	b.n	8002994 <UsageFault_Handler+0x4>

08002996 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002996:	b480      	push	{r7}
 8002998:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Liquid_Detect_Pin);
 80029a8:	2001      	movs	r0, #1
 80029aa:	f003 fc23 	bl	80061f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPT_IN1_Pin);
 80029b6:	2008      	movs	r0, #8
 80029b8:	f003 fc1c 	bl	80061f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80029bc:	bf00      	nop
 80029be:	bd80      	pop	{r7, pc}

080029c0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPT_IN2_Pin);
 80029c4:	2010      	movs	r0, #16
 80029c6:	f003 fc15 	bl	80061f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80029d4:	4802      	ldr	r0, [pc, #8]	; (80029e0 <DMA1_Stream2_IRQHandler+0x10>)
 80029d6:	f002 ffdb 	bl	8005990 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000334 	.word	0x20000334

080029e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPT_IN3_Pin);
 80029e8:	2020      	movs	r0, #32
 80029ea:	f003 fc03 	bl	80061f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN4_Pin);
 80029ee:	2040      	movs	r0, #64	; 0x40
 80029f0:	f003 fc00 	bl	80061f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN5_Pin);
 80029f4:	2080      	movs	r0, #128	; 0x80
 80029f6:	f003 fbfd 	bl	80061f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN6_Pin);
 80029fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80029fe:	f003 fbf9 	bl	80061f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002a0c:	4802      	ldr	r0, [pc, #8]	; (8002a18 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002a0e:	f006 fd32 	bl	8009476 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20000584 	.word	0x20000584

08002a1c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a20:	4803      	ldr	r0, [pc, #12]	; (8002a30 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002a22:	f006 fd28 	bl	8009476 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002a26:	4803      	ldr	r0, [pc, #12]	; (8002a34 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002a28:	f006 fd25 	bl	8009476 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002a2c:	bf00      	nop
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	200003d0 	.word	0x200003d0
 8002a34:	200005cc 	.word	0x200005cc

08002a38 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002a3c:	4802      	ldr	r0, [pc, #8]	; (8002a48 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002a3e:	f006 fd1a 	bl	8009476 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000614 	.word	0x20000614

08002a4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
#ifdef JiaYangZhen_EncoderMode
	Motor[3].StepPosition = Encoder3_0position_number - (__HAL_TIM_GET_COUNTER(&htim3)) ;
#endif

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a50:	4802      	ldr	r0, [pc, #8]	; (8002a5c <TIM3_IRQHandler+0x10>)
 8002a52:	f006 fd10 	bl	8009476 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000464 	.word	0x20000464

08002a60 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
#ifdef JiaYangZhen_EncoderMode
	Motor[2].StepPosition = __HAL_TIM_GET_COUNTER(&htim4) - Encoder2_0position_number ;
#endif

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002a64:	4802      	ldr	r0, [pc, #8]	; (8002a70 <TIM4_IRQHandler+0x10>)
 8002a66:	f006 fd06 	bl	8009476 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	200004ac 	.word	0x200004ac

08002a74 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002a78:	4802      	ldr	r0, [pc, #8]	; (8002a84 <I2C2_EV_IRQHandler+0x10>)
 8002a7a:	f003 ff3d 	bl	80068f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	200002e0 	.word	0x200002e0

08002a88 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002a8c:	4802      	ldr	r0, [pc, #8]	; (8002a98 <I2C2_ER_IRQHandler+0x10>)
 8002a8e:	f004 f8a4 	bl	8006bda <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	200002e0 	.word	0x200002e0

08002a9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPT_IN7_Pin);
 8002aa0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002aa4:	f003 fba6 	bl	80061f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN8_Pin);
 8002aa8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002aac:	f003 fba2 	bl	80061f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN9_Pin);
 8002ab0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002ab4:	f003 fb9e 	bl	80061f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN10_Pin);
 8002ab8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002abc:	f003 fb9a 	bl	80061f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN11_Pin);
 8002ac0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ac4:	f003 fb96 	bl	80061f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN12_Pin);
 8002ac8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002acc:	f003 fb92 	bl	80061f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ad0:	bf00      	nop
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002ad8:	4802      	ldr	r0, [pc, #8]	; (8002ae4 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8002ada:	f006 fccc 	bl	8009476 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	2000065c 	.word	0x2000065c

08002ae8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002aec:	4802      	ldr	r0, [pc, #8]	; (8002af8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002aee:	f006 fcc2 	bl	8009476 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	200006a4 	.word	0x200006a4

08002afc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002b00:	4802      	ldr	r0, [pc, #8]	; (8002b0c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002b02:	f006 fcb8 	bl	8009476 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	200006ec 	.word	0x200006ec

08002b10 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002b14:	4804      	ldr	r0, [pc, #16]	; (8002b28 <UART5_IRQHandler+0x18>)
 8002b16:	f007 f97f 	bl	8009e18 <HAL_UART_IRQHandler>
//  while(HAL_UART_Receive_IT(&huart5, (uint8_t *)aRxBuffer, 1) != HAL_OK)	//每次中断处理完成之后，重新开启中断并设置RxXferCount 1
//  {
//	 timeout++; 	//超时处理
//	 if(timeout>HAL_MAX_DELAY) break;
//  }
  	HAL_UART_Receive_IT(&huart5, (uint8_t *)aRxBuffer, 1);
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	4903      	ldr	r1, [pc, #12]	; (8002b2c <UART5_IRQHandler+0x1c>)
 8002b1e:	4802      	ldr	r0, [pc, #8]	; (8002b28 <UART5_IRQHandler+0x18>)
 8002b20:	f007 f949 	bl	8009db6 <HAL_UART_Receive_IT>

  /* USER CODE END UART5_IRQn 1 */
}
 8002b24:	bf00      	nop
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	200007e4 	.word	0x200007e4
 8002b2c:	20000734 	.word	0x20000734

08002b30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002b34:	4803      	ldr	r0, [pc, #12]	; (8002b44 <TIM6_DAC_IRQHandler+0x14>)
 8002b36:	f002 fd2d 	bl	8005594 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002b3a:	4803      	ldr	r0, [pc, #12]	; (8002b48 <TIM6_DAC_IRQHandler+0x18>)
 8002b3c:	f006 fc9b 	bl	8009476 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b40:	bf00      	nop
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	200002bc 	.word	0x200002bc
 8002b48:	200004f4 	.word	0x200004f4

08002b4c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002b50:	4802      	ldr	r0, [pc, #8]	; (8002b5c <TIM7_IRQHandler+0x10>)
 8002b52:	f006 fc90 	bl	8009476 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	2000053c 	.word	0x2000053c

08002b60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
	return 1;
 8002b64:	2301      	movs	r3, #1
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <_kill>:

int _kill(int pid, int sig)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b7a:	f00a fe95 	bl	800d8a8 <__errno>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2216      	movs	r2, #22
 8002b82:	601a      	str	r2, [r3, #0]
	return -1;
 8002b84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <_exit>:

void _exit (int status)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b98:	f04f 31ff 	mov.w	r1, #4294967295
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff ffe7 	bl	8002b70 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ba2:	e7fe      	b.n	8002ba2 <_exit+0x12>

08002ba4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	e00a      	b.n	8002bcc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002bb6:	f3af 8000 	nop.w
 8002bba:	4601      	mov	r1, r0
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	60ba      	str	r2, [r7, #8]
 8002bc2:	b2ca      	uxtb	r2, r1
 8002bc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	dbf0      	blt.n	8002bb6 <_read+0x12>
	}

return len;
 8002bd4:	687b      	ldr	r3, [r7, #4]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b086      	sub	sp, #24
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	e009      	b.n	8002c04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	60ba      	str	r2, [r7, #8]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fe ff4b 	bl	8001a94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	3301      	adds	r3, #1
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	dbf1      	blt.n	8002bf0 <_write+0x12>
	}
	return len;
 8002c0c:	687b      	ldr	r3, [r7, #4]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <_close>:

int _close(int file)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
	return -1;
 8002c1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c3e:	605a      	str	r2, [r3, #4]
	return 0;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <_isatty>:

int _isatty(int file)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
	return 1;
 8002c56:	2301      	movs	r3, #1
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
	return 0;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c88:	4a14      	ldr	r2, [pc, #80]	; (8002cdc <_sbrk+0x5c>)
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <_sbrk+0x60>)
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c94:	4b13      	ldr	r3, [pc, #76]	; (8002ce4 <_sbrk+0x64>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d102      	bne.n	8002ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c9c:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <_sbrk+0x64>)
 8002c9e:	4a12      	ldr	r2, [pc, #72]	; (8002ce8 <_sbrk+0x68>)
 8002ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ca2:	4b10      	ldr	r3, [pc, #64]	; (8002ce4 <_sbrk+0x64>)
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4413      	add	r3, r2
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d207      	bcs.n	8002cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cb0:	f00a fdfa 	bl	800d8a8 <__errno>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	220c      	movs	r2, #12
 8002cb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cba:	f04f 33ff 	mov.w	r3, #4294967295
 8002cbe:	e009      	b.n	8002cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cc0:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <_sbrk+0x64>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cc6:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <_sbrk+0x64>)
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4413      	add	r3, r2
 8002cce:	4a05      	ldr	r2, [pc, #20]	; (8002ce4 <_sbrk+0x64>)
 8002cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	20020000 	.word	0x20020000
 8002ce0:	00000400 	.word	0x00000400
 8002ce4:	20000418 	.word	0x20000418
 8002ce8:	200056d0 	.word	0x200056d0

08002cec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cf0:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <SystemInit+0x20>)
 8002cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf6:	4a05      	ldr	r2, [pc, #20]	; (8002d0c <SystemInit+0x20>)
 8002cf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <MX_TIM2_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08c      	sub	sp, #48	; 0x30
 8002d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d16:	f107 030c 	add.w	r3, r7, #12
 8002d1a:	2224      	movs	r2, #36	; 0x24
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f00a ff05 	bl	800db2e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d24:	1d3b      	adds	r3, r7, #4
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d2c:	4b21      	ldr	r3, [pc, #132]	; (8002db4 <MX_TIM2_Init+0xa4>)
 8002d2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8002d34:	4b1f      	ldr	r3, [pc, #124]	; (8002db4 <MX_TIM2_Init+0xa4>)
 8002d36:	2203      	movs	r2, #3
 8002d38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d3a:	4b1e      	ldr	r3, [pc, #120]	; (8002db4 <MX_TIM2_Init+0xa4>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002d40:	4b1c      	ldr	r3, [pc, #112]	; (8002db4 <MX_TIM2_Init+0xa4>)
 8002d42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d48:	4b1a      	ldr	r3, [pc, #104]	; (8002db4 <MX_TIM2_Init+0xa4>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d4e:	4b19      	ldr	r3, [pc, #100]	; (8002db4 <MX_TIM2_Init+0xa4>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002d54:	2301      	movs	r3, #1
 8002d56:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d60:	2300      	movs	r3, #0
 8002d62:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002d64:	2300      	movs	r3, #0
 8002d66:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d70:	2300      	movs	r3, #0
 8002d72:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002d78:	f107 030c 	add.w	r3, r7, #12
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	480d      	ldr	r0, [pc, #52]	; (8002db4 <MX_TIM2_Init+0xa4>)
 8002d80:	f006 fad3 	bl	800932a <HAL_TIM_Encoder_Init>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002d8a:	f7ff fd4f 	bl	800282c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d92:	2300      	movs	r3, #0
 8002d94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d96:	1d3b      	adds	r3, r7, #4
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4806      	ldr	r0, [pc, #24]	; (8002db4 <MX_TIM2_Init+0xa4>)
 8002d9c:	f006 fe9c 	bl	8009ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002da6:	f7ff fd41 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002daa:	bf00      	nop
 8002dac:	3730      	adds	r7, #48	; 0x30
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	2000041c 	.word	0x2000041c

08002db8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08c      	sub	sp, #48	; 0x30
 8002dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002dbe:	f107 030c 	add.w	r3, r7, #12
 8002dc2:	2224      	movs	r2, #36	; 0x24
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f00a feb1 	bl	800db2e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dcc:	1d3b      	adds	r3, r7, #4
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002dd4:	4b20      	ldr	r3, [pc, #128]	; (8002e58 <MX_TIM3_Init+0xa0>)
 8002dd6:	4a21      	ldr	r2, [pc, #132]	; (8002e5c <MX_TIM3_Init+0xa4>)
 8002dd8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8002dda:	4b1f      	ldr	r3, [pc, #124]	; (8002e58 <MX_TIM3_Init+0xa0>)
 8002ddc:	2203      	movs	r2, #3
 8002dde:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002de0:	4b1d      	ldr	r3, [pc, #116]	; (8002e58 <MX_TIM3_Init+0xa0>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002de6:	4b1c      	ldr	r3, [pc, #112]	; (8002e58 <MX_TIM3_Init+0xa0>)
 8002de8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dee:	4b1a      	ldr	r3, [pc, #104]	; (8002e58 <MX_TIM3_Init+0xa0>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002df4:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <MX_TIM3_Init+0xa0>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e02:	2301      	movs	r3, #1
 8002e04:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e06:	2300      	movs	r3, #0
 8002e08:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002e0a:	230f      	movs	r3, #15
 8002e0c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e12:	2301      	movs	r3, #1
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e16:	2300      	movs	r3, #0
 8002e18:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002e1a:	230f      	movs	r3, #15
 8002e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002e1e:	f107 030c 	add.w	r3, r7, #12
 8002e22:	4619      	mov	r1, r3
 8002e24:	480c      	ldr	r0, [pc, #48]	; (8002e58 <MX_TIM3_Init+0xa0>)
 8002e26:	f006 fa80 	bl	800932a <HAL_TIM_Encoder_Init>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002e30:	f7ff fcfc 	bl	800282c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e34:	2300      	movs	r3, #0
 8002e36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e3c:	1d3b      	adds	r3, r7, #4
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4805      	ldr	r0, [pc, #20]	; (8002e58 <MX_TIM3_Init+0xa0>)
 8002e42:	f006 fe49 	bl	8009ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002e4c:	f7ff fcee 	bl	800282c <Error_Handler>
#ifdef JiaYangZhen_EncoderMode
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
#endif
  /* USER CODE END TIM3_Init 2 */

}
 8002e50:	bf00      	nop
 8002e52:	3730      	adds	r7, #48	; 0x30
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20000464 	.word	0x20000464
 8002e5c:	40000400 	.word	0x40000400

08002e60 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08c      	sub	sp, #48	; 0x30
 8002e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e66:	f107 030c 	add.w	r3, r7, #12
 8002e6a:	2224      	movs	r2, #36	; 0x24
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f00a fe5d 	bl	800db2e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e74:	1d3b      	adds	r3, r7, #4
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e7c:	4b20      	ldr	r3, [pc, #128]	; (8002f00 <MX_TIM4_Init+0xa0>)
 8002e7e:	4a21      	ldr	r2, [pc, #132]	; (8002f04 <MX_TIM4_Init+0xa4>)
 8002e80:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 8002e82:	4b1f      	ldr	r3, [pc, #124]	; (8002f00 <MX_TIM4_Init+0xa0>)
 8002e84:	2203      	movs	r2, #3
 8002e86:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e88:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <MX_TIM4_Init+0xa0>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002e8e:	4b1c      	ldr	r3, [pc, #112]	; (8002f00 <MX_TIM4_Init+0xa0>)
 8002e90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e94:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e96:	4b1a      	ldr	r3, [pc, #104]	; (8002f00 <MX_TIM4_Init+0xa0>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e9c:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <MX_TIM4_Init+0xa0>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002eb2:	230f      	movs	r3, #15
 8002eb4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002ec2:	230f      	movs	r3, #15
 8002ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002ec6:	f107 030c 	add.w	r3, r7, #12
 8002eca:	4619      	mov	r1, r3
 8002ecc:	480c      	ldr	r0, [pc, #48]	; (8002f00 <MX_TIM4_Init+0xa0>)
 8002ece:	f006 fa2c 	bl	800932a <HAL_TIM_Encoder_Init>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002ed8:	f7ff fca8 	bl	800282c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002edc:	2300      	movs	r3, #0
 8002ede:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ee4:	1d3b      	adds	r3, r7, #4
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4805      	ldr	r0, [pc, #20]	; (8002f00 <MX_TIM4_Init+0xa0>)
 8002eea:	f006 fdf5 	bl	8009ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002ef4:	f7ff fc9a 	bl	800282c <Error_Handler>
#ifdef JiaYangZhen_EncoderMode
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
#endif
  /* USER CODE END TIM4_Init 2 */

}
 8002ef8:	bf00      	nop
 8002efa:	3730      	adds	r7, #48	; 0x30
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	200004ac 	.word	0x200004ac
 8002f04:	40000800 	.word	0x40000800

08002f08 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f0e:	463b      	mov	r3, r7
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002f16:	4b14      	ldr	r3, [pc, #80]	; (8002f68 <MX_TIM6_Init+0x60>)
 8002f18:	4a14      	ldr	r2, [pc, #80]	; (8002f6c <MX_TIM6_Init+0x64>)
 8002f1a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 8002f1c:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <MX_TIM6_Init+0x60>)
 8002f1e:	224f      	movs	r2, #79	; 0x4f
 8002f20:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f22:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <MX_TIM6_Init+0x60>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8002f28:	4b0f      	ldr	r3, [pc, #60]	; (8002f68 <MX_TIM6_Init+0x60>)
 8002f2a:	2209      	movs	r2, #9
 8002f2c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f2e:	4b0e      	ldr	r3, [pc, #56]	; (8002f68 <MX_TIM6_Init+0x60>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002f34:	480c      	ldr	r0, [pc, #48]	; (8002f68 <MX_TIM6_Init+0x60>)
 8002f36:	f006 f909 	bl	800914c <HAL_TIM_Base_Init>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8002f40:	f7ff fc74 	bl	800282c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f44:	2300      	movs	r3, #0
 8002f46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002f4c:	463b      	mov	r3, r7
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4805      	ldr	r0, [pc, #20]	; (8002f68 <MX_TIM6_Init+0x60>)
 8002f52:	f006 fdc1 	bl	8009ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8002f5c:	f7ff fc66 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	200004f4 	.word	0x200004f4
 8002f6c:	40001000 	.word	0x40001000

08002f70 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f76:	463b      	mov	r3, r7
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002f7e:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <MX_TIM7_Init+0x60>)
 8002f80:	4a14      	ldr	r2, [pc, #80]	; (8002fd4 <MX_TIM7_Init+0x64>)
 8002f82:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 79;
 8002f84:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <MX_TIM7_Init+0x60>)
 8002f86:	224f      	movs	r2, #79	; 0x4f
 8002f88:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f8a:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <MX_TIM7_Init+0x60>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8002f90:	4b0f      	ldr	r3, [pc, #60]	; (8002fd0 <MX_TIM7_Init+0x60>)
 8002f92:	2209      	movs	r2, #9
 8002f94:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f96:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <MX_TIM7_Init+0x60>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002f9c:	480c      	ldr	r0, [pc, #48]	; (8002fd0 <MX_TIM7_Init+0x60>)
 8002f9e:	f006 f8d5 	bl	800914c <HAL_TIM_Base_Init>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8002fa8:	f7ff fc40 	bl	800282c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fac:	2300      	movs	r3, #0
 8002fae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002fb4:	463b      	mov	r3, r7
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4805      	ldr	r0, [pc, #20]	; (8002fd0 <MX_TIM7_Init+0x60>)
 8002fba:	f006 fd8d 	bl	8009ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8002fc4:	f7ff fc32 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002fc8:	bf00      	nop
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	2000053c 	.word	0x2000053c
 8002fd4:	40001400 	.word	0x40001400

08002fd8 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fde:	463b      	mov	r3, r7
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	609a      	str	r2, [r3, #8]
 8002fe8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <MX_TIM9_Init+0x68>)
 8002fec:	4a15      	ldr	r2, [pc, #84]	; (8003044 <MX_TIM9_Init+0x6c>)
 8002fee:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 79;
 8002ff0:	4b13      	ldr	r3, [pc, #76]	; (8003040 <MX_TIM9_Init+0x68>)
 8002ff2:	224f      	movs	r2, #79	; 0x4f
 8002ff4:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ff6:	4b12      	ldr	r3, [pc, #72]	; (8003040 <MX_TIM9_Init+0x68>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 99;
 8002ffc:	4b10      	ldr	r3, [pc, #64]	; (8003040 <MX_TIM9_Init+0x68>)
 8002ffe:	2263      	movs	r2, #99	; 0x63
 8003000:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003002:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <MX_TIM9_Init+0x68>)
 8003004:	2200      	movs	r2, #0
 8003006:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003008:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <MX_TIM9_Init+0x68>)
 800300a:	2200      	movs	r2, #0
 800300c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800300e:	480c      	ldr	r0, [pc, #48]	; (8003040 <MX_TIM9_Init+0x68>)
 8003010:	f006 f89c 	bl	800914c <HAL_TIM_Base_Init>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <MX_TIM9_Init+0x46>
  {
    Error_Handler();
 800301a:	f7ff fc07 	bl	800282c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800301e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003022:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003024:	463b      	mov	r3, r7
 8003026:	4619      	mov	r1, r3
 8003028:	4805      	ldr	r0, [pc, #20]	; (8003040 <MX_TIM9_Init+0x68>)
 800302a:	f006 fb2c 	bl	8009686 <HAL_TIM_ConfigClockSource>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <MX_TIM9_Init+0x60>
  {
    Error_Handler();
 8003034:	f7ff fbfa 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003038:	bf00      	nop
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20000584 	.word	0x20000584
 8003044:	40014000 	.word	0x40014000

08003048 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800304c:	4b0d      	ldr	r3, [pc, #52]	; (8003084 <MX_TIM10_Init+0x3c>)
 800304e:	4a0e      	ldr	r2, [pc, #56]	; (8003088 <MX_TIM10_Init+0x40>)
 8003050:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 79;
 8003052:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <MX_TIM10_Init+0x3c>)
 8003054:	224f      	movs	r2, #79	; 0x4f
 8003056:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003058:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <MX_TIM10_Init+0x3c>)
 800305a:	2200      	movs	r2, #0
 800305c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9;
 800305e:	4b09      	ldr	r3, [pc, #36]	; (8003084 <MX_TIM10_Init+0x3c>)
 8003060:	2209      	movs	r2, #9
 8003062:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003064:	4b07      	ldr	r3, [pc, #28]	; (8003084 <MX_TIM10_Init+0x3c>)
 8003066:	2200      	movs	r2, #0
 8003068:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800306a:	4b06      	ldr	r3, [pc, #24]	; (8003084 <MX_TIM10_Init+0x3c>)
 800306c:	2200      	movs	r2, #0
 800306e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003070:	4804      	ldr	r0, [pc, #16]	; (8003084 <MX_TIM10_Init+0x3c>)
 8003072:	f006 f86b 	bl	800914c <HAL_TIM_Base_Init>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 800307c:	f7ff fbd6 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003080:	bf00      	nop
 8003082:	bd80      	pop	{r7, pc}
 8003084:	200005cc 	.word	0x200005cc
 8003088:	40014400 	.word	0x40014400

0800308c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003090:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <MX_TIM11_Init+0x3c>)
 8003092:	4a0e      	ldr	r2, [pc, #56]	; (80030cc <MX_TIM11_Init+0x40>)
 8003094:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 79;
 8003096:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <MX_TIM11_Init+0x3c>)
 8003098:	224f      	movs	r2, #79	; 0x4f
 800309a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800309c:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <MX_TIM11_Init+0x3c>)
 800309e:	2200      	movs	r2, #0
 80030a0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9;
 80030a2:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <MX_TIM11_Init+0x3c>)
 80030a4:	2209      	movs	r2, #9
 80030a6:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030a8:	4b07      	ldr	r3, [pc, #28]	; (80030c8 <MX_TIM11_Init+0x3c>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030ae:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <MX_TIM11_Init+0x3c>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80030b4:	4804      	ldr	r0, [pc, #16]	; (80030c8 <MX_TIM11_Init+0x3c>)
 80030b6:	f006 f849 	bl	800914c <HAL_TIM_Base_Init>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 80030c0:	f7ff fbb4 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80030c4:	bf00      	nop
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	20000614 	.word	0x20000614
 80030cc:	40014800 	.word	0x40014800

080030d0 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030d6:	463b      	mov	r3, r7
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80030e2:	4b15      	ldr	r3, [pc, #84]	; (8003138 <MX_TIM12_Init+0x68>)
 80030e4:	4a15      	ldr	r2, [pc, #84]	; (800313c <MX_TIM12_Init+0x6c>)
 80030e6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 79;
 80030e8:	4b13      	ldr	r3, [pc, #76]	; (8003138 <MX_TIM12_Init+0x68>)
 80030ea:	224f      	movs	r2, #79	; 0x4f
 80030ec:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030ee:	4b12      	ldr	r3, [pc, #72]	; (8003138 <MX_TIM12_Init+0x68>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 9;
 80030f4:	4b10      	ldr	r3, [pc, #64]	; (8003138 <MX_TIM12_Init+0x68>)
 80030f6:	2209      	movs	r2, #9
 80030f8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030fa:	4b0f      	ldr	r3, [pc, #60]	; (8003138 <MX_TIM12_Init+0x68>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003100:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <MX_TIM12_Init+0x68>)
 8003102:	2200      	movs	r2, #0
 8003104:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8003106:	480c      	ldr	r0, [pc, #48]	; (8003138 <MX_TIM12_Init+0x68>)
 8003108:	f006 f820 	bl	800914c <HAL_TIM_Base_Init>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <MX_TIM12_Init+0x46>
  {
    Error_Handler();
 8003112:	f7ff fb8b 	bl	800282c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800311a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800311c:	463b      	mov	r3, r7
 800311e:	4619      	mov	r1, r3
 8003120:	4805      	ldr	r0, [pc, #20]	; (8003138 <MX_TIM12_Init+0x68>)
 8003122:	f006 fab0 	bl	8009686 <HAL_TIM_ConfigClockSource>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <MX_TIM12_Init+0x60>
  {
    Error_Handler();
 800312c:	f7ff fb7e 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8003130:	bf00      	nop
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	2000065c 	.word	0x2000065c
 800313c:	40001800 	.word	0x40001800

08003140 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003144:	4b0d      	ldr	r3, [pc, #52]	; (800317c <MX_TIM13_Init+0x3c>)
 8003146:	4a0e      	ldr	r2, [pc, #56]	; (8003180 <MX_TIM13_Init+0x40>)
 8003148:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 79;
 800314a:	4b0c      	ldr	r3, [pc, #48]	; (800317c <MX_TIM13_Init+0x3c>)
 800314c:	224f      	movs	r2, #79	; 0x4f
 800314e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003150:	4b0a      	ldr	r3, [pc, #40]	; (800317c <MX_TIM13_Init+0x3c>)
 8003152:	2200      	movs	r2, #0
 8003154:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9;
 8003156:	4b09      	ldr	r3, [pc, #36]	; (800317c <MX_TIM13_Init+0x3c>)
 8003158:	2209      	movs	r2, #9
 800315a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800315c:	4b07      	ldr	r3, [pc, #28]	; (800317c <MX_TIM13_Init+0x3c>)
 800315e:	2200      	movs	r2, #0
 8003160:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003162:	4b06      	ldr	r3, [pc, #24]	; (800317c <MX_TIM13_Init+0x3c>)
 8003164:	2200      	movs	r2, #0
 8003166:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003168:	4804      	ldr	r0, [pc, #16]	; (800317c <MX_TIM13_Init+0x3c>)
 800316a:	f005 ffef 	bl	800914c <HAL_TIM_Base_Init>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <MX_TIM13_Init+0x38>
  {
    Error_Handler();
 8003174:	f7ff fb5a 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003178:	bf00      	nop
 800317a:	bd80      	pop	{r7, pc}
 800317c:	200006a4 	.word	0x200006a4
 8003180:	40001c00 	.word	0x40001c00

08003184 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003188:	4b0d      	ldr	r3, [pc, #52]	; (80031c0 <MX_TIM14_Init+0x3c>)
 800318a:	4a0e      	ldr	r2, [pc, #56]	; (80031c4 <MX_TIM14_Init+0x40>)
 800318c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 79;
 800318e:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <MX_TIM14_Init+0x3c>)
 8003190:	224f      	movs	r2, #79	; 0x4f
 8003192:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003194:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <MX_TIM14_Init+0x3c>)
 8003196:	2200      	movs	r2, #0
 8003198:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9;
 800319a:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <MX_TIM14_Init+0x3c>)
 800319c:	2209      	movs	r2, #9
 800319e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031a0:	4b07      	ldr	r3, [pc, #28]	; (80031c0 <MX_TIM14_Init+0x3c>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031a6:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <MX_TIM14_Init+0x3c>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80031ac:	4804      	ldr	r0, [pc, #16]	; (80031c0 <MX_TIM14_Init+0x3c>)
 80031ae:	f005 ffcd 	bl	800914c <HAL_TIM_Base_Init>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80031b8:	f7ff fb38 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80031bc:	bf00      	nop
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	200006ec 	.word	0x200006ec
 80031c4:	40002000 	.word	0x40002000

080031c8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08e      	sub	sp, #56	; 0x38
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e8:	d12c      	bne.n	8003244 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	623b      	str	r3, [r7, #32]
 80031ee:	4b51      	ldr	r3, [pc, #324]	; (8003334 <HAL_TIM_Encoder_MspInit+0x16c>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	4a50      	ldr	r2, [pc, #320]	; (8003334 <HAL_TIM_Encoder_MspInit+0x16c>)
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	6413      	str	r3, [r2, #64]	; 0x40
 80031fa:	4b4e      	ldr	r3, [pc, #312]	; (8003334 <HAL_TIM_Encoder_MspInit+0x16c>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	623b      	str	r3, [r7, #32]
 8003204:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
 800320a:	4b4a      	ldr	r3, [pc, #296]	; (8003334 <HAL_TIM_Encoder_MspInit+0x16c>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	4a49      	ldr	r2, [pc, #292]	; (8003334 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	6313      	str	r3, [r2, #48]	; 0x30
 8003216:	4b47      	ldr	r3, [pc, #284]	; (8003334 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	61fb      	str	r3, [r7, #28]
 8003220:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Encoder4_B_Pin|Encoder4_A_Pin;
 8003222:	2322      	movs	r3, #34	; 0x22
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003226:	2302      	movs	r3, #2
 8003228:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322a:	2300      	movs	r3, #0
 800322c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322e:	2300      	movs	r3, #0
 8003230:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003232:	2301      	movs	r3, #1
 8003234:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800323a:	4619      	mov	r1, r3
 800323c:	483e      	ldr	r0, [pc, #248]	; (8003338 <HAL_TIM_Encoder_MspInit+0x170>)
 800323e:	f002 fdf1 	bl	8005e24 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003242:	e073      	b.n	800332c <HAL_TIM_Encoder_MspInit+0x164>
  else if(tim_encoderHandle->Instance==TIM3)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a3c      	ldr	r2, [pc, #240]	; (800333c <HAL_TIM_Encoder_MspInit+0x174>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d134      	bne.n	80032b8 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	61bb      	str	r3, [r7, #24]
 8003252:	4b38      	ldr	r3, [pc, #224]	; (8003334 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	4a37      	ldr	r2, [pc, #220]	; (8003334 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003258:	f043 0302 	orr.w	r3, r3, #2
 800325c:	6413      	str	r3, [r2, #64]	; 0x40
 800325e:	4b35      	ldr	r3, [pc, #212]	; (8003334 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	61bb      	str	r3, [r7, #24]
 8003268:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	4b31      	ldr	r3, [pc, #196]	; (8003334 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	4a30      	ldr	r2, [pc, #192]	; (8003334 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	6313      	str	r3, [r2, #48]	; 0x30
 800327a:	4b2e      	ldr	r3, [pc, #184]	; (8003334 <HAL_TIM_Encoder_MspInit+0x16c>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Encoder3_A_Pin|Encoder3_B_Pin;
 8003286:	23c0      	movs	r3, #192	; 0xc0
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328a:	2302      	movs	r3, #2
 800328c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328e:	2300      	movs	r3, #0
 8003290:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003292:	2300      	movs	r3, #0
 8003294:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003296:	2302      	movs	r3, #2
 8003298:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800329a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800329e:	4619      	mov	r1, r3
 80032a0:	4825      	ldr	r0, [pc, #148]	; (8003338 <HAL_TIM_Encoder_MspInit+0x170>)
 80032a2:	f002 fdbf 	bl	8005e24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80032a6:	2200      	movs	r2, #0
 80032a8:	2105      	movs	r1, #5
 80032aa:	201d      	movs	r0, #29
 80032ac:	f002 f926 	bl	80054fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80032b0:	201d      	movs	r0, #29
 80032b2:	f002 f93f 	bl	8005534 <HAL_NVIC_EnableIRQ>
}
 80032b6:	e039      	b.n	800332c <HAL_TIM_Encoder_MspInit+0x164>
  else if(tim_encoderHandle->Instance==TIM4)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a20      	ldr	r2, [pc, #128]	; (8003340 <HAL_TIM_Encoder_MspInit+0x178>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d134      	bne.n	800332c <HAL_TIM_Encoder_MspInit+0x164>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <HAL_TIM_Encoder_MspInit+0x16c>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	4a1a      	ldr	r2, [pc, #104]	; (8003334 <HAL_TIM_Encoder_MspInit+0x16c>)
 80032cc:	f043 0304 	orr.w	r3, r3, #4
 80032d0:	6413      	str	r3, [r2, #64]	; 0x40
 80032d2:	4b18      	ldr	r3, [pc, #96]	; (8003334 <HAL_TIM_Encoder_MspInit+0x16c>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	4b14      	ldr	r3, [pc, #80]	; (8003334 <HAL_TIM_Encoder_MspInit+0x16c>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	4a13      	ldr	r2, [pc, #76]	; (8003334 <HAL_TIM_Encoder_MspInit+0x16c>)
 80032e8:	f043 0308 	orr.w	r3, r3, #8
 80032ec:	6313      	str	r3, [r2, #48]	; 0x30
 80032ee:	4b11      	ldr	r3, [pc, #68]	; (8003334 <HAL_TIM_Encoder_MspInit+0x16c>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 80032fa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003300:	2302      	movs	r3, #2
 8003302:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003304:	2300      	movs	r3, #0
 8003306:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003308:	2300      	movs	r3, #0
 800330a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800330c:	2302      	movs	r3, #2
 800330e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003314:	4619      	mov	r1, r3
 8003316:	480b      	ldr	r0, [pc, #44]	; (8003344 <HAL_TIM_Encoder_MspInit+0x17c>)
 8003318:	f002 fd84 	bl	8005e24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800331c:	2200      	movs	r2, #0
 800331e:	2105      	movs	r1, #5
 8003320:	201e      	movs	r0, #30
 8003322:	f002 f8eb 	bl	80054fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003326:	201e      	movs	r0, #30
 8003328:	f002 f904 	bl	8005534 <HAL_NVIC_EnableIRQ>
}
 800332c:	bf00      	nop
 800332e:	3738      	adds	r7, #56	; 0x38
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40023800 	.word	0x40023800
 8003338:	40020000 	.word	0x40020000
 800333c:	40000400 	.word	0x40000400
 8003340:	40000800 	.word	0x40000800
 8003344:	40020c00 	.word	0x40020c00

08003348 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08a      	sub	sp, #40	; 0x28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a70      	ldr	r2, [pc, #448]	; (8003518 <HAL_TIM_Base_MspInit+0x1d0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d116      	bne.n	8003388 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	627b      	str	r3, [r7, #36]	; 0x24
 800335e:	4b6f      	ldr	r3, [pc, #444]	; (800351c <HAL_TIM_Base_MspInit+0x1d4>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	4a6e      	ldr	r2, [pc, #440]	; (800351c <HAL_TIM_Base_MspInit+0x1d4>)
 8003364:	f043 0310 	orr.w	r3, r3, #16
 8003368:	6413      	str	r3, [r2, #64]	; 0x40
 800336a:	4b6c      	ldr	r3, [pc, #432]	; (800351c <HAL_TIM_Base_MspInit+0x1d4>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 7, 0);
 8003376:	2200      	movs	r2, #0
 8003378:	2107      	movs	r1, #7
 800337a:	2036      	movs	r0, #54	; 0x36
 800337c:	f002 f8be 	bl	80054fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003380:	2036      	movs	r0, #54	; 0x36
 8003382:	f002 f8d7 	bl	8005534 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8003386:	e0c2      	b.n	800350e <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM7)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a64      	ldr	r2, [pc, #400]	; (8003520 <HAL_TIM_Base_MspInit+0x1d8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d116      	bne.n	80033c0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	623b      	str	r3, [r7, #32]
 8003396:	4b61      	ldr	r3, [pc, #388]	; (800351c <HAL_TIM_Base_MspInit+0x1d4>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	4a60      	ldr	r2, [pc, #384]	; (800351c <HAL_TIM_Base_MspInit+0x1d4>)
 800339c:	f043 0320 	orr.w	r3, r3, #32
 80033a0:	6413      	str	r3, [r2, #64]	; 0x40
 80033a2:	4b5e      	ldr	r3, [pc, #376]	; (800351c <HAL_TIM_Base_MspInit+0x1d4>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f003 0320 	and.w	r3, r3, #32
 80033aa:	623b      	str	r3, [r7, #32]
 80033ac:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM7_IRQn, 6, 0);
 80033ae:	2200      	movs	r2, #0
 80033b0:	2106      	movs	r1, #6
 80033b2:	2037      	movs	r0, #55	; 0x37
 80033b4:	f002 f8a2 	bl	80054fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80033b8:	2037      	movs	r0, #55	; 0x37
 80033ba:	f002 f8bb 	bl	8005534 <HAL_NVIC_EnableIRQ>
}
 80033be:	e0a6      	b.n	800350e <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM9)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a57      	ldr	r2, [pc, #348]	; (8003524 <HAL_TIM_Base_MspInit+0x1dc>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d116      	bne.n	80033f8 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	4b53      	ldr	r3, [pc, #332]	; (800351c <HAL_TIM_Base_MspInit+0x1d4>)
 80033d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d2:	4a52      	ldr	r2, [pc, #328]	; (800351c <HAL_TIM_Base_MspInit+0x1d4>)
 80033d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d8:	6453      	str	r3, [r2, #68]	; 0x44
 80033da:	4b50      	ldr	r3, [pc, #320]	; (800351c <HAL_TIM_Base_MspInit+0x1d4>)
 80033dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e2:	61fb      	str	r3, [r7, #28]
 80033e4:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80033e6:	2200      	movs	r2, #0
 80033e8:	2105      	movs	r1, #5
 80033ea:	2018      	movs	r0, #24
 80033ec:	f002 f886 	bl	80054fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80033f0:	2018      	movs	r0, #24
 80033f2:	f002 f89f 	bl	8005534 <HAL_NVIC_EnableIRQ>
}
 80033f6:	e08a      	b.n	800350e <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM10)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a4a      	ldr	r2, [pc, #296]	; (8003528 <HAL_TIM_Base_MspInit+0x1e0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d116      	bne.n	8003430 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003402:	2300      	movs	r3, #0
 8003404:	61bb      	str	r3, [r7, #24]
 8003406:	4b45      	ldr	r3, [pc, #276]	; (800351c <HAL_TIM_Base_MspInit+0x1d4>)
 8003408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340a:	4a44      	ldr	r2, [pc, #272]	; (800351c <HAL_TIM_Base_MspInit+0x1d4>)
 800340c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003410:	6453      	str	r3, [r2, #68]	; 0x44
 8003412:	4b42      	ldr	r3, [pc, #264]	; (800351c <HAL_TIM_Base_MspInit+0x1d4>)
 8003414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	61bb      	str	r3, [r7, #24]
 800341c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800341e:	2200      	movs	r2, #0
 8003420:	2105      	movs	r1, #5
 8003422:	2019      	movs	r0, #25
 8003424:	f002 f86a 	bl	80054fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003428:	2019      	movs	r0, #25
 800342a:	f002 f883 	bl	8005534 <HAL_NVIC_EnableIRQ>
}
 800342e:	e06e      	b.n	800350e <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM11)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a3d      	ldr	r2, [pc, #244]	; (800352c <HAL_TIM_Base_MspInit+0x1e4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d116      	bne.n	8003468 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800343a:	2300      	movs	r3, #0
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	4b37      	ldr	r3, [pc, #220]	; (800351c <HAL_TIM_Base_MspInit+0x1d4>)
 8003440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003442:	4a36      	ldr	r2, [pc, #216]	; (800351c <HAL_TIM_Base_MspInit+0x1d4>)
 8003444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003448:	6453      	str	r3, [r2, #68]	; 0x44
 800344a:	4b34      	ldr	r3, [pc, #208]	; (800351c <HAL_TIM_Base_MspInit+0x1d4>)
 800344c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003452:	617b      	str	r3, [r7, #20]
 8003454:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8003456:	2200      	movs	r2, #0
 8003458:	2105      	movs	r1, #5
 800345a:	201a      	movs	r0, #26
 800345c:	f002 f84e 	bl	80054fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003460:	201a      	movs	r0, #26
 8003462:	f002 f867 	bl	8005534 <HAL_NVIC_EnableIRQ>
}
 8003466:	e052      	b.n	800350e <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM12)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a30      	ldr	r2, [pc, #192]	; (8003530 <HAL_TIM_Base_MspInit+0x1e8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d116      	bne.n	80034a0 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	4b29      	ldr	r3, [pc, #164]	; (800351c <HAL_TIM_Base_MspInit+0x1d4>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	4a28      	ldr	r2, [pc, #160]	; (800351c <HAL_TIM_Base_MspInit+0x1d4>)
 800347c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003480:	6413      	str	r3, [r2, #64]	; 0x40
 8003482:	4b26      	ldr	r3, [pc, #152]	; (800351c <HAL_TIM_Base_MspInit+0x1d4>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 800348e:	2200      	movs	r2, #0
 8003490:	2105      	movs	r1, #5
 8003492:	202b      	movs	r0, #43	; 0x2b
 8003494:	f002 f832 	bl	80054fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003498:	202b      	movs	r0, #43	; 0x2b
 800349a:	f002 f84b 	bl	8005534 <HAL_NVIC_EnableIRQ>
}
 800349e:	e036      	b.n	800350e <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM13)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a23      	ldr	r2, [pc, #140]	; (8003534 <HAL_TIM_Base_MspInit+0x1ec>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d116      	bne.n	80034d8 <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	4b1b      	ldr	r3, [pc, #108]	; (800351c <HAL_TIM_Base_MspInit+0x1d4>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	4a1a      	ldr	r2, [pc, #104]	; (800351c <HAL_TIM_Base_MspInit+0x1d4>)
 80034b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b8:	6413      	str	r3, [r2, #64]	; 0x40
 80034ba:	4b18      	ldr	r3, [pc, #96]	; (800351c <HAL_TIM_Base_MspInit+0x1d4>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 80034c6:	2200      	movs	r2, #0
 80034c8:	2105      	movs	r1, #5
 80034ca:	202c      	movs	r0, #44	; 0x2c
 80034cc:	f002 f816 	bl	80054fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80034d0:	202c      	movs	r0, #44	; 0x2c
 80034d2:	f002 f82f 	bl	8005534 <HAL_NVIC_EnableIRQ>
}
 80034d6:	e01a      	b.n	800350e <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM14)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a16      	ldr	r2, [pc, #88]	; (8003538 <HAL_TIM_Base_MspInit+0x1f0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d115      	bne.n	800350e <HAL_TIM_Base_MspInit+0x1c6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80034e2:	2300      	movs	r3, #0
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	4b0d      	ldr	r3, [pc, #52]	; (800351c <HAL_TIM_Base_MspInit+0x1d4>)
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	4a0c      	ldr	r2, [pc, #48]	; (800351c <HAL_TIM_Base_MspInit+0x1d4>)
 80034ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f0:	6413      	str	r3, [r2, #64]	; 0x40
 80034f2:	4b0a      	ldr	r3, [pc, #40]	; (800351c <HAL_TIM_Base_MspInit+0x1d4>)
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fa:	60bb      	str	r3, [r7, #8]
 80034fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 80034fe:	2200      	movs	r2, #0
 8003500:	2105      	movs	r1, #5
 8003502:	202d      	movs	r0, #45	; 0x2d
 8003504:	f001 fffa 	bl	80054fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003508:	202d      	movs	r0, #45	; 0x2d
 800350a:	f002 f813 	bl	8005534 <HAL_NVIC_EnableIRQ>
}
 800350e:	bf00      	nop
 8003510:	3728      	adds	r7, #40	; 0x28
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40001000 	.word	0x40001000
 800351c:	40023800 	.word	0x40023800
 8003520:	40001400 	.word	0x40001400
 8003524:	40014000 	.word	0x40014000
 8003528:	40014400 	.word	0x40014400
 800352c:	40014800 	.word	0x40014800
 8003530:	40001800 	.word	0x40001800
 8003534:	40001c00 	.word	0x40001c00
 8003538:	40002000 	.word	0x40002000

0800353c <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003540:	4b11      	ldr	r3, [pc, #68]	; (8003588 <MX_UART4_Init+0x4c>)
 8003542:	4a12      	ldr	r2, [pc, #72]	; (800358c <MX_UART4_Init+0x50>)
 8003544:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003546:	4b10      	ldr	r3, [pc, #64]	; (8003588 <MX_UART4_Init+0x4c>)
 8003548:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800354c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800354e:	4b0e      	ldr	r3, [pc, #56]	; (8003588 <MX_UART4_Init+0x4c>)
 8003550:	2200      	movs	r2, #0
 8003552:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003554:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <MX_UART4_Init+0x4c>)
 8003556:	2200      	movs	r2, #0
 8003558:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800355a:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <MX_UART4_Init+0x4c>)
 800355c:	2200      	movs	r2, #0
 800355e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003560:	4b09      	ldr	r3, [pc, #36]	; (8003588 <MX_UART4_Init+0x4c>)
 8003562:	220c      	movs	r2, #12
 8003564:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003566:	4b08      	ldr	r3, [pc, #32]	; (8003588 <MX_UART4_Init+0x4c>)
 8003568:	2200      	movs	r2, #0
 800356a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800356c:	4b06      	ldr	r3, [pc, #24]	; (8003588 <MX_UART4_Init+0x4c>)
 800356e:	2200      	movs	r2, #0
 8003570:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003572:	4805      	ldr	r0, [pc, #20]	; (8003588 <MX_UART4_Init+0x4c>)
 8003574:	f006 fb40 	bl	8009bf8 <HAL_UART_Init>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800357e:	f7ff f955 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003582:	bf00      	nop
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	200007a0 	.word	0x200007a0
 800358c:	40004c00 	.word	0x40004c00

08003590 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */
#ifndef DushuModule
  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003594:	4b13      	ldr	r3, [pc, #76]	; (80035e4 <MX_UART5_Init+0x54>)
 8003596:	4a14      	ldr	r2, [pc, #80]	; (80035e8 <MX_UART5_Init+0x58>)
 8003598:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800359a:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <MX_UART5_Init+0x54>)
 800359c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80035a0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80035a2:	4b10      	ldr	r3, [pc, #64]	; (80035e4 <MX_UART5_Init+0x54>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80035a8:	4b0e      	ldr	r3, [pc, #56]	; (80035e4 <MX_UART5_Init+0x54>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80035ae:	4b0d      	ldr	r3, [pc, #52]	; (80035e4 <MX_UART5_Init+0x54>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80035b4:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <MX_UART5_Init+0x54>)
 80035b6:	220c      	movs	r2, #12
 80035b8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035ba:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <MX_UART5_Init+0x54>)
 80035bc:	2200      	movs	r2, #0
 80035be:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80035c0:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <MX_UART5_Init+0x54>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80035c6:	4807      	ldr	r0, [pc, #28]	; (80035e4 <MX_UART5_Init+0x54>)
 80035c8:	f006 fb16 	bl	8009bf8 <HAL_UART_Init>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80035d2:	f7ff f92b 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
  HAL_UART_Receive_IT(&huart5, (uint8_t *)aRxBuffer, 1);
 80035d6:	2201      	movs	r2, #1
 80035d8:	4904      	ldr	r1, [pc, #16]	; (80035ec <MX_UART5_Init+0x5c>)
 80035da:	4802      	ldr	r0, [pc, #8]	; (80035e4 <MX_UART5_Init+0x54>)
 80035dc:	f006 fbeb 	bl	8009db6 <HAL_UART_Receive_IT>
  }
  HAL_UART_Receive_IT(&huart5, (uint8_t *)aRxBuffer, 1);	//接收中断：标志位UART_IT_RXNE，并且设置接收缓冲以及接收缓冲接收最大数据量
#endif
  /* USER CODE END UART5_Init 2 */

}
 80035e0:	bf00      	nop
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	200007e4 	.word	0x200007e4
 80035e8:	40005000 	.word	0x40005000
 80035ec:	20000734 	.word	0x20000734

080035f0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80035f4:	4b11      	ldr	r3, [pc, #68]	; (800363c <MX_USART1_UART_Init+0x4c>)
 80035f6:	4a12      	ldr	r2, [pc, #72]	; (8003640 <MX_USART1_UART_Init+0x50>)
 80035f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80035fa:	4b10      	ldr	r3, [pc, #64]	; (800363c <MX_USART1_UART_Init+0x4c>)
 80035fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003600:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003602:	4b0e      	ldr	r3, [pc, #56]	; (800363c <MX_USART1_UART_Init+0x4c>)
 8003604:	2200      	movs	r2, #0
 8003606:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003608:	4b0c      	ldr	r3, [pc, #48]	; (800363c <MX_USART1_UART_Init+0x4c>)
 800360a:	2200      	movs	r2, #0
 800360c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800360e:	4b0b      	ldr	r3, [pc, #44]	; (800363c <MX_USART1_UART_Init+0x4c>)
 8003610:	2200      	movs	r2, #0
 8003612:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003614:	4b09      	ldr	r3, [pc, #36]	; (800363c <MX_USART1_UART_Init+0x4c>)
 8003616:	220c      	movs	r2, #12
 8003618:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800361a:	4b08      	ldr	r3, [pc, #32]	; (800363c <MX_USART1_UART_Init+0x4c>)
 800361c:	2200      	movs	r2, #0
 800361e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003620:	4b06      	ldr	r3, [pc, #24]	; (800363c <MX_USART1_UART_Init+0x4c>)
 8003622:	2200      	movs	r2, #0
 8003624:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003626:	4805      	ldr	r0, [pc, #20]	; (800363c <MX_USART1_UART_Init+0x4c>)
 8003628:	f006 fae6 	bl	8009bf8 <HAL_UART_Init>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003632:	f7ff f8fb 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003636:	bf00      	nop
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	20000828 	.word	0x20000828
 8003640:	40011000 	.word	0x40011000

08003644 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003648:	4b11      	ldr	r3, [pc, #68]	; (8003690 <MX_USART3_UART_Init+0x4c>)
 800364a:	4a12      	ldr	r2, [pc, #72]	; (8003694 <MX_USART3_UART_Init+0x50>)
 800364c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800364e:	4b10      	ldr	r3, [pc, #64]	; (8003690 <MX_USART3_UART_Init+0x4c>)
 8003650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003654:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003656:	4b0e      	ldr	r3, [pc, #56]	; (8003690 <MX_USART3_UART_Init+0x4c>)
 8003658:	2200      	movs	r2, #0
 800365a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800365c:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <MX_USART3_UART_Init+0x4c>)
 800365e:	2200      	movs	r2, #0
 8003660:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003662:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <MX_USART3_UART_Init+0x4c>)
 8003664:	2200      	movs	r2, #0
 8003666:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003668:	4b09      	ldr	r3, [pc, #36]	; (8003690 <MX_USART3_UART_Init+0x4c>)
 800366a:	220c      	movs	r2, #12
 800366c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800366e:	4b08      	ldr	r3, [pc, #32]	; (8003690 <MX_USART3_UART_Init+0x4c>)
 8003670:	2200      	movs	r2, #0
 8003672:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003674:	4b06      	ldr	r3, [pc, #24]	; (8003690 <MX_USART3_UART_Init+0x4c>)
 8003676:	2200      	movs	r2, #0
 8003678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800367a:	4805      	ldr	r0, [pc, #20]	; (8003690 <MX_USART3_UART_Init+0x4c>)
 800367c:	f006 fabc 	bl	8009bf8 <HAL_UART_Init>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003686:	f7ff f8d1 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800368a:	bf00      	nop
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	2000086c 	.word	0x2000086c
 8003694:	40004800 	.word	0x40004800

08003698 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b090      	sub	sp, #64	; 0x40
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	605a      	str	r2, [r3, #4]
 80036aa:	609a      	str	r2, [r3, #8]
 80036ac:	60da      	str	r2, [r3, #12]
 80036ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a79      	ldr	r2, [pc, #484]	; (800389c <HAL_UART_MspInit+0x204>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d12d      	bne.n	8003716 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80036ba:	2300      	movs	r3, #0
 80036bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80036be:	4b78      	ldr	r3, [pc, #480]	; (80038a0 <HAL_UART_MspInit+0x208>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	4a77      	ldr	r2, [pc, #476]	; (80038a0 <HAL_UART_MspInit+0x208>)
 80036c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036c8:	6413      	str	r3, [r2, #64]	; 0x40
 80036ca:	4b75      	ldr	r3, [pc, #468]	; (80038a0 <HAL_UART_MspInit+0x208>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80036d4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036d6:	2300      	movs	r3, #0
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
 80036da:	4b71      	ldr	r3, [pc, #452]	; (80038a0 <HAL_UART_MspInit+0x208>)
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	4a70      	ldr	r2, [pc, #448]	; (80038a0 <HAL_UART_MspInit+0x208>)
 80036e0:	f043 0304 	orr.w	r3, r3, #4
 80036e4:	6313      	str	r3, [r2, #48]	; 0x30
 80036e6:	4b6e      	ldr	r3, [pc, #440]	; (80038a0 <HAL_UART_MspInit+0x208>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80036f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80036f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f8:	2302      	movs	r3, #2
 80036fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003700:	2303      	movs	r3, #3
 8003702:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003704:	2308      	movs	r3, #8
 8003706:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003708:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800370c:	4619      	mov	r1, r3
 800370e:	4865      	ldr	r0, [pc, #404]	; (80038a4 <HAL_UART_MspInit+0x20c>)
 8003710:	f002 fb88 	bl	8005e24 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003714:	e0bd      	b.n	8003892 <HAL_UART_MspInit+0x1fa>
  else if(uartHandle->Instance==UART5)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a63      	ldr	r2, [pc, #396]	; (80038a8 <HAL_UART_MspInit+0x210>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d153      	bne.n	80037c8 <HAL_UART_MspInit+0x130>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003720:	2300      	movs	r3, #0
 8003722:	623b      	str	r3, [r7, #32]
 8003724:	4b5e      	ldr	r3, [pc, #376]	; (80038a0 <HAL_UART_MspInit+0x208>)
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	4a5d      	ldr	r2, [pc, #372]	; (80038a0 <HAL_UART_MspInit+0x208>)
 800372a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800372e:	6413      	str	r3, [r2, #64]	; 0x40
 8003730:	4b5b      	ldr	r3, [pc, #364]	; (80038a0 <HAL_UART_MspInit+0x208>)
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003738:	623b      	str	r3, [r7, #32]
 800373a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800373c:	2300      	movs	r3, #0
 800373e:	61fb      	str	r3, [r7, #28]
 8003740:	4b57      	ldr	r3, [pc, #348]	; (80038a0 <HAL_UART_MspInit+0x208>)
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	4a56      	ldr	r2, [pc, #344]	; (80038a0 <HAL_UART_MspInit+0x208>)
 8003746:	f043 0304 	orr.w	r3, r3, #4
 800374a:	6313      	str	r3, [r2, #48]	; 0x30
 800374c:	4b54      	ldr	r3, [pc, #336]	; (80038a0 <HAL_UART_MspInit+0x208>)
 800374e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	61fb      	str	r3, [r7, #28]
 8003756:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003758:	2300      	movs	r3, #0
 800375a:	61bb      	str	r3, [r7, #24]
 800375c:	4b50      	ldr	r3, [pc, #320]	; (80038a0 <HAL_UART_MspInit+0x208>)
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	4a4f      	ldr	r2, [pc, #316]	; (80038a0 <HAL_UART_MspInit+0x208>)
 8003762:	f043 0308 	orr.w	r3, r3, #8
 8003766:	6313      	str	r3, [r2, #48]	; 0x30
 8003768:	4b4d      	ldr	r3, [pc, #308]	; (80038a0 <HAL_UART_MspInit+0x208>)
 800376a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376c:	f003 0308 	and.w	r3, r3, #8
 8003770:	61bb      	str	r3, [r7, #24]
 8003772:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003778:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377a:	2302      	movs	r3, #2
 800377c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377e:	2300      	movs	r3, #0
 8003780:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003782:	2303      	movs	r3, #3
 8003784:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003786:	2308      	movs	r3, #8
 8003788:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800378a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800378e:	4619      	mov	r1, r3
 8003790:	4844      	ldr	r0, [pc, #272]	; (80038a4 <HAL_UART_MspInit+0x20c>)
 8003792:	f002 fb47 	bl	8005e24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003796:	2304      	movs	r3, #4
 8003798:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379a:	2302      	movs	r3, #2
 800379c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037a2:	2303      	movs	r3, #3
 80037a4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80037a6:	2308      	movs	r3, #8
 80037a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037ae:	4619      	mov	r1, r3
 80037b0:	483e      	ldr	r0, [pc, #248]	; (80038ac <HAL_UART_MspInit+0x214>)
 80037b2:	f002 fb37 	bl	8005e24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 9, 0);
 80037b6:	2200      	movs	r2, #0
 80037b8:	2109      	movs	r1, #9
 80037ba:	2035      	movs	r0, #53	; 0x35
 80037bc:	f001 fe9e 	bl	80054fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80037c0:	2035      	movs	r0, #53	; 0x35
 80037c2:	f001 feb7 	bl	8005534 <HAL_NVIC_EnableIRQ>
}
 80037c6:	e064      	b.n	8003892 <HAL_UART_MspInit+0x1fa>
  else if(uartHandle->Instance==USART1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a38      	ldr	r2, [pc, #224]	; (80038b0 <HAL_UART_MspInit+0x218>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d12d      	bne.n	800382e <HAL_UART_MspInit+0x196>
    __HAL_RCC_USART1_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	4b32      	ldr	r3, [pc, #200]	; (80038a0 <HAL_UART_MspInit+0x208>)
 80037d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037da:	4a31      	ldr	r2, [pc, #196]	; (80038a0 <HAL_UART_MspInit+0x208>)
 80037dc:	f043 0310 	orr.w	r3, r3, #16
 80037e0:	6453      	str	r3, [r2, #68]	; 0x44
 80037e2:	4b2f      	ldr	r3, [pc, #188]	; (80038a0 <HAL_UART_MspInit+0x208>)
 80037e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e6:	f003 0310 	and.w	r3, r3, #16
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	613b      	str	r3, [r7, #16]
 80037f2:	4b2b      	ldr	r3, [pc, #172]	; (80038a0 <HAL_UART_MspInit+0x208>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	4a2a      	ldr	r2, [pc, #168]	; (80038a0 <HAL_UART_MspInit+0x208>)
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	6313      	str	r3, [r2, #48]	; 0x30
 80037fe:	4b28      	ldr	r3, [pc, #160]	; (80038a0 <HAL_UART_MspInit+0x208>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800380a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800380e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003810:	2302      	movs	r3, #2
 8003812:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003814:	2300      	movs	r3, #0
 8003816:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003818:	2303      	movs	r3, #3
 800381a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800381c:	2307      	movs	r3, #7
 800381e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003820:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003824:	4619      	mov	r1, r3
 8003826:	4823      	ldr	r0, [pc, #140]	; (80038b4 <HAL_UART_MspInit+0x21c>)
 8003828:	f002 fafc 	bl	8005e24 <HAL_GPIO_Init>
}
 800382c:	e031      	b.n	8003892 <HAL_UART_MspInit+0x1fa>
  else if(uartHandle->Instance==USART3)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a21      	ldr	r2, [pc, #132]	; (80038b8 <HAL_UART_MspInit+0x220>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d12c      	bne.n	8003892 <HAL_UART_MspInit+0x1fa>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003838:	2300      	movs	r3, #0
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	4b18      	ldr	r3, [pc, #96]	; (80038a0 <HAL_UART_MspInit+0x208>)
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	4a17      	ldr	r2, [pc, #92]	; (80038a0 <HAL_UART_MspInit+0x208>)
 8003842:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003846:	6413      	str	r3, [r2, #64]	; 0x40
 8003848:	4b15      	ldr	r3, [pc, #84]	; (80038a0 <HAL_UART_MspInit+0x208>)
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003854:	2300      	movs	r3, #0
 8003856:	60bb      	str	r3, [r7, #8]
 8003858:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <HAL_UART_MspInit+0x208>)
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	4a10      	ldr	r2, [pc, #64]	; (80038a0 <HAL_UART_MspInit+0x208>)
 800385e:	f043 0308 	orr.w	r3, r3, #8
 8003862:	6313      	str	r3, [r2, #48]	; 0x30
 8003864:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <HAL_UART_MspInit+0x208>)
 8003866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003868:	f003 0308 	and.w	r3, r3, #8
 800386c:	60bb      	str	r3, [r7, #8]
 800386e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003870:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003874:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003876:	2302      	movs	r3, #2
 8003878:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387a:	2300      	movs	r3, #0
 800387c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800387e:	2303      	movs	r3, #3
 8003880:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003882:	2307      	movs	r3, #7
 8003884:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003886:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800388a:	4619      	mov	r1, r3
 800388c:	4807      	ldr	r0, [pc, #28]	; (80038ac <HAL_UART_MspInit+0x214>)
 800388e:	f002 fac9 	bl	8005e24 <HAL_GPIO_Init>
}
 8003892:	bf00      	nop
 8003894:	3740      	adds	r7, #64	; 0x40
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40004c00 	.word	0x40004c00
 80038a0:	40023800 	.word	0x40023800
 80038a4:	40020800 	.word	0x40020800
 80038a8:	40005000 	.word	0x40005000
 80038ac:	40020c00 	.word	0x40020c00
 80038b0:	40011000 	.word	0x40011000
 80038b4:	40020000 	.word	0x40020000
 80038b8:	40004800 	.word	0x40004800

080038bc <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 1 */

#ifndef DushuModule
#ifdef QuanxiePVctrl
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
	if(huart->Instance==UART5)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a2c      	ldr	r2, [pc, #176]	; (800397c <HAL_UART_RxCpltCallback+0xc0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d151      	bne.n	8003972 <HAL_UART_RxCpltCallback+0xb6>
	{
		if ( USART_RX_STA&0x8000 ){		// 判断是否已经完成接收(bit15-1则已接收完成)
 80038ce:	4b2c      	ldr	r3, [pc, #176]	; (8003980 <HAL_UART_RxCpltCallback+0xc4>)
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	b21b      	sxth	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	db4c      	blt.n	8003972 <HAL_UART_RxCpltCallback+0xb6>
			;							// 如果完成接收数据接收且尚未处理，则不接受后续data
		}
		else{
			if( USART_RX_STA&0x4000 ){		// start byte received
 80038d8:	4b29      	ldr	r3, [pc, #164]	; (8003980 <HAL_UART_RxCpltCallback+0xc4>)
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d02e      	beq.n	8003942 <HAL_UART_RxCpltCallback+0x86>
				if( (aRxBuffer[0]==0x0A) || (aRxBuffer[0]==0x0D) ){	// end byte received
 80038e4:	4b27      	ldr	r3, [pc, #156]	; (8003984 <HAL_UART_RxCpltCallback+0xc8>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b0a      	cmp	r3, #10
 80038ea:	d003      	beq.n	80038f4 <HAL_UART_RxCpltCallback+0x38>
 80038ec:	4b25      	ldr	r3, [pc, #148]	; (8003984 <HAL_UART_RxCpltCallback+0xc8>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b0d      	cmp	r3, #13
 80038f2:	d117      	bne.n	8003924 <HAL_UART_RxCpltCallback+0x68>
					USART_RX_STA|=0x8000;
 80038f4:	4b22      	ldr	r3, [pc, #136]	; (8003980 <HAL_UART_RxCpltCallback+0xc4>)
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003900:	b29a      	uxth	r2, r3
 8003902:	4b1f      	ldr	r3, [pc, #124]	; (8003980 <HAL_UART_RxCpltCallback+0xc4>)
 8003904:	801a      	strh	r2, [r3, #0]
					USART5_RX_BUF[USART_RX_STA&0X3FFF]=aRxBuffer[0] ;
 8003906:	4b1e      	ldr	r3, [pc, #120]	; (8003980 <HAL_UART_RxCpltCallback+0xc4>)
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800390e:	4a1d      	ldr	r2, [pc, #116]	; (8003984 <HAL_UART_RxCpltCallback+0xc8>)
 8003910:	7811      	ldrb	r1, [r2, #0]
 8003912:	4a1d      	ldr	r2, [pc, #116]	; (8003988 <HAL_UART_RxCpltCallback+0xcc>)
 8003914:	54d1      	strb	r1, [r2, r3]
					USART_RX_STA++;
 8003916:	4b1a      	ldr	r3, [pc, #104]	; (8003980 <HAL_UART_RxCpltCallback+0xc4>)
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	3301      	adds	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	4b18      	ldr	r3, [pc, #96]	; (8003980 <HAL_UART_RxCpltCallback+0xc4>)
 8003920:	801a      	strh	r2, [r3, #0]
				USART_RX_STA++;
				HAL_TIM_Base_Start_IT(&htim9);
			}
		}
	}
}
 8003922:	e026      	b.n	8003972 <HAL_UART_RxCpltCallback+0xb6>
					USART5_RX_BUF[USART_RX_STA&0X3FFF]=aRxBuffer[0] ;
 8003924:	4b16      	ldr	r3, [pc, #88]	; (8003980 <HAL_UART_RxCpltCallback+0xc4>)
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800392c:	4a15      	ldr	r2, [pc, #84]	; (8003984 <HAL_UART_RxCpltCallback+0xc8>)
 800392e:	7811      	ldrb	r1, [r2, #0]
 8003930:	4a15      	ldr	r2, [pc, #84]	; (8003988 <HAL_UART_RxCpltCallback+0xcc>)
 8003932:	54d1      	strb	r1, [r2, r3]
					USART_RX_STA++;
 8003934:	4b12      	ldr	r3, [pc, #72]	; (8003980 <HAL_UART_RxCpltCallback+0xc4>)
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	3301      	adds	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	4b10      	ldr	r3, [pc, #64]	; (8003980 <HAL_UART_RxCpltCallback+0xc4>)
 800393e:	801a      	strh	r2, [r3, #0]
}
 8003940:	e017      	b.n	8003972 <HAL_UART_RxCpltCallback+0xb6>
				USART_RX_STA|=0x4000;
 8003942:	4b0f      	ldr	r3, [pc, #60]	; (8003980 <HAL_UART_RxCpltCallback+0xc4>)
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800394a:	b29a      	uxth	r2, r3
 800394c:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <HAL_UART_RxCpltCallback+0xc4>)
 800394e:	801a      	strh	r2, [r3, #0]
				USART5_RX_BUF[USART_RX_STA&0X3FFF]=aRxBuffer[0] ;
 8003950:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <HAL_UART_RxCpltCallback+0xc4>)
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003958:	4a0a      	ldr	r2, [pc, #40]	; (8003984 <HAL_UART_RxCpltCallback+0xc8>)
 800395a:	7811      	ldrb	r1, [r2, #0]
 800395c:	4a0a      	ldr	r2, [pc, #40]	; (8003988 <HAL_UART_RxCpltCallback+0xcc>)
 800395e:	54d1      	strb	r1, [r2, r3]
				USART_RX_STA++;
 8003960:	4b07      	ldr	r3, [pc, #28]	; (8003980 <HAL_UART_RxCpltCallback+0xc4>)
 8003962:	881b      	ldrh	r3, [r3, #0]
 8003964:	3301      	adds	r3, #1
 8003966:	b29a      	uxth	r2, r3
 8003968:	4b05      	ldr	r3, [pc, #20]	; (8003980 <HAL_UART_RxCpltCallback+0xc4>)
 800396a:	801a      	strh	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim9);
 800396c:	4807      	ldr	r0, [pc, #28]	; (800398c <HAL_UART_RxCpltCallback+0xd0>)
 800396e:	f005 fc3d 	bl	80091ec <HAL_TIM_Base_Start_IT>
}
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40005000 	.word	0x40005000
 8003980:	2000079c 	.word	0x2000079c
 8003984:	20000734 	.word	0x20000734
 8003988:	20000738 	.word	0x20000738
 800398c:	20000584 	.word	0x20000584

08003990 <Motor_Data_Init>:
#include "stdlib.h"

struct MotorDefine Motor[10];

void Motor_Data_Init(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
		Motor[6].accelerationRate = 8000;
		Motor[6].decelerationRate = 8000;
#endif

/*  Motor4 : 柱塞泵，负责注液（也可以抽液），最大排量1000uL，总行程10rads（2000步），每步0.5uL  */
		Motor[4].MotorNumber = 4;
 8003994:	4b39      	ldr	r3, [pc, #228]	; (8003a7c <Motor_Data_Init+0xec>)
 8003996:	2204      	movs	r2, #4
 8003998:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
		Motor[4].Status = 0,
 800399c:	4b37      	ldr	r3, [pc, #220]	; (8003a7c <Motor_Data_Init+0xec>)
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
		Motor[4].htim_x = &htim14,
 80039a4:	4b35      	ldr	r3, [pc, #212]	; (8003a7c <Motor_Data_Init+0xec>)
 80039a6:	4a36      	ldr	r2, [pc, #216]	; (8003a80 <Motor_Data_Init+0xf0>)
 80039a8:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		//机械参数
		Motor[4].deceleration_ratio = 1;
 80039ac:	4b33      	ldr	r3, [pc, #204]	; (8003a7c <Motor_Data_Init+0xec>)
 80039ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80039b2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		Motor[4].step_angle = 1.8;
 80039b6:	4b31      	ldr	r3, [pc, #196]	; (8003a7c <Motor_Data_Init+0xec>)
 80039b8:	4a32      	ldr	r2, [pc, #200]	; (8003a84 <Motor_Data_Init+0xf4>)
 80039ba:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
		Motor[4].mircro_steps = 16;
 80039be:	4b2f      	ldr	r3, [pc, #188]	; (8003a7c <Motor_Data_Init+0xec>)
 80039c0:	2210      	movs	r2, #16
 80039c2:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		Motor[4].MaxSpeedInRads= 13;
 80039c6:	4b2d      	ldr	r3, [pc, #180]	; (8003a7c <Motor_Data_Init+0xec>)
 80039c8:	4a2f      	ldr	r2, [pc, #188]	; (8003a88 <Motor_Data_Init+0xf8>)
 80039ca:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
		//设定默认速度参数，以下为实测优化后结果，可以通过参数控制模式修改
		Motor[4].StartupSpeedInRads = 5;
 80039ce:	4b2b      	ldr	r3, [pc, #172]	; (8003a7c <Motor_Data_Init+0xec>)
 80039d0:	4a2e      	ldr	r2, [pc, #184]	; (8003a8c <Motor_Data_Init+0xfc>)
 80039d2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
		Motor[4].DesiredSpeedInRads = 10;
 80039d6:	4b29      	ldr	r3, [pc, #164]	; (8003a7c <Motor_Data_Init+0xec>)
 80039d8:	4a2d      	ldr	r2, [pc, #180]	; (8003a90 <Motor_Data_Init+0x100>)
 80039da:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
		Motor[4].accelerationRate = 20000;
 80039de:	4b27      	ldr	r3, [pc, #156]	; (8003a7c <Motor_Data_Init+0xec>)
 80039e0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80039e4:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
		Motor[4].decelerationRate = 10000;
 80039e8:	4b24      	ldr	r3, [pc, #144]	; (8003a7c <Motor_Data_Init+0xec>)
 80039ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80039ee:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	Motor[8].AccelerationTimeTMR = Motor[8].StepperSpeedTMR ; 	// 此参数在直流电机应用下，定义实际高电平的TMR计时器个数
#endif

#ifdef QuanxiePVctrl
/*  Motor7 : 加样针24V直流电机  A相-抽出液体0.6L/min */
	Motor[7].MotorNumber = 7;
 80039f2:	4b22      	ldr	r3, [pc, #136]	; (8003a7c <Motor_Data_Init+0xec>)
 80039f4:	2207      	movs	r2, #7
 80039f6:	f883 22c0 	strb.w	r2, [r3, #704]	; 0x2c0
	Motor[7].Status = 0,
 80039fa:	4b20      	ldr	r3, [pc, #128]	; (8003a7c <Motor_Data_Init+0xec>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
	Motor[7].htim_x = &htim12,
 8003a02:	4b1e      	ldr	r3, [pc, #120]	; (8003a7c <Motor_Data_Init+0xec>)
 8003a04:	4a23      	ldr	r2, [pc, #140]	; (8003a94 <Motor_Data_Init+0x104>)
 8003a06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4

	//设定默认的PWM控制频率，设置占空比来控制直流电机输出
	Motor[7].StepperSpeedTMR = 400 ;  			// PWM控制直流电机频率：100KHz/100=1KHz
 8003a0a:	4b1c      	ldr	r3, [pc, #112]	; (8003a7c <Motor_Data_Init+0xec>)
 8003a0c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003a10:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
	Motor[7].NumberofSteps_StopAccel = 100 ; 	// 此参数在直流电机应用下，定义为占空比
 8003a14:	4b19      	ldr	r3, [pc, #100]	; (8003a7c <Motor_Data_Init+0xec>)
 8003a16:	2264      	movs	r2, #100	; 0x64
 8003a18:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
	Motor[7].AccelerationTimeTMR = Motor[7].StepperSpeedTMR ; 	// 此参数在直流电机应用下，定义实际高电平的TMR计时器个数
 8003a1c:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <Motor_Data_Init+0xec>)
 8003a1e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8003a22:	4a16      	ldr	r2, [pc, #88]	; (8003a7c <Motor_Data_Init+0xec>)
 8003a24:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
	Motor[7].DecelerationTimeTMR = 100 ; // 定义为看空比设置最大值
 8003a28:	4b14      	ldr	r3, [pc, #80]	; (8003a7c <Motor_Data_Init+0xec>)
 8003a2a:	2264      	movs	r2, #100	; 0x64
 8003a2c:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc

/*  Motor8 : 加样针24V直流电机  A相针内壁清洗  B相针外壁清洗  */
	Motor[8].MotorNumber = 8;
 8003a30:	4b12      	ldr	r3, [pc, #72]	; (8003a7c <Motor_Data_Init+0xec>)
 8003a32:	2208      	movs	r2, #8
 8003a34:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
	Motor[8].Status = 0,
 8003a38:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <Motor_Data_Init+0xec>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
	Motor[8].htim_x = &htim12,
 8003a40:	4b0e      	ldr	r3, [pc, #56]	; (8003a7c <Motor_Data_Init+0xec>)
 8003a42:	4a14      	ldr	r2, [pc, #80]	; (8003a94 <Motor_Data_Init+0x104>)
 8003a44:	f8c3 2334 	str.w	r2, [r3, #820]	; 0x334

	//设定默认的PWM控制频率，设置占空比来控制直流电机输出
	Motor[8].StepperSpeedTMR = 10000 ;  		// PWM控制直流电机频率：100KHz/100=1KHz
 8003a48:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <Motor_Data_Init+0xec>)
 8003a4a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003a4e:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	Motor[8].NumberofSteps_StopAccel = 10000 ; 	// 此参数在直流电机应用下，定义为占空比
 8003a52:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <Motor_Data_Init+0xec>)
 8003a54:	f242 7210 	movw	r2, #10000	; 0x2710
 8003a58:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
	Motor[8].AccelerationTimeTMR = Motor[8].StepperSpeedTMR ; 	// 此参数在直流电机应用下，定义实际高电平的TMR计时器个数
 8003a5c:	4b07      	ldr	r3, [pc, #28]	; (8003a7c <Motor_Data_Init+0xec>)
 8003a5e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8003a62:	4a06      	ldr	r2, [pc, #24]	; (8003a7c <Motor_Data_Init+0xec>)
 8003a64:	f8c2 3358 	str.w	r3, [r2, #856]	; 0x358
	Motor[8].DecelerationTimeTMR = 10000 ; // 定义为看空比设置最大值
 8003a68:	4b04      	ldr	r3, [pc, #16]	; (8003a7c <Motor_Data_Init+0xec>)
 8003a6a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003a6e:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
	Motor[6].StartupSpeedInRads = 5;
	Motor[6].DesiredSpeedInRads = 20;
	Motor[6].accelerationRate = 20000;
	Motor[6].decelerationRate = 20000;
#endif
}
 8003a72:	bf00      	nop
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	200008b0 	.word	0x200008b0
 8003a80:	200006ec 	.word	0x200006ec
 8003a84:	3fe66666 	.word	0x3fe66666
 8003a88:	41500000 	.word	0x41500000
 8003a8c:	40a00000 	.word	0x40a00000
 8003a90:	41200000 	.word	0x41200000
 8003a94:	2000065c 	.word	0x2000065c

08003a98 <Motor5_AB>:



void Motor5_AB(void) // 电机5状态1
{VM5_IN1_H();	VM5_IN2_L();	VM5_IN3_H()	;	VM5_IN4_L();}
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003aa2:	480b      	ldr	r0, [pc, #44]	; (8003ad0 <Motor5_AB+0x38>)
 8003aa4:	f002 fb72 	bl	800618c <HAL_GPIO_WritePin>
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003aae:	4808      	ldr	r0, [pc, #32]	; (8003ad0 <Motor5_AB+0x38>)
 8003ab0:	f002 fb6c 	bl	800618c <HAL_GPIO_WritePin>
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003aba:	4805      	ldr	r0, [pc, #20]	; (8003ad0 <Motor5_AB+0x38>)
 8003abc:	f002 fb66 	bl	800618c <HAL_GPIO_WritePin>
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ac6:	4802      	ldr	r0, [pc, #8]	; (8003ad0 <Motor5_AB+0x38>)
 8003ac8:	f002 fb60 	bl	800618c <HAL_GPIO_WritePin>
 8003acc:	bf00      	nop
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40020400 	.word	0x40020400

08003ad4 <Motor5_aB>:
void Motor5_aB(void) // 电机5状态2
{VM5_IN1_L();	VM5_IN2_H();	VM5_IN3_H()	;	VM5_IN4_L();}
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ade:	480b      	ldr	r0, [pc, #44]	; (8003b0c <Motor5_aB+0x38>)
 8003ae0:	f002 fb54 	bl	800618c <HAL_GPIO_WritePin>
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003aea:	4808      	ldr	r0, [pc, #32]	; (8003b0c <Motor5_aB+0x38>)
 8003aec:	f002 fb4e 	bl	800618c <HAL_GPIO_WritePin>
 8003af0:	2201      	movs	r2, #1
 8003af2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003af6:	4805      	ldr	r0, [pc, #20]	; (8003b0c <Motor5_aB+0x38>)
 8003af8:	f002 fb48 	bl	800618c <HAL_GPIO_WritePin>
 8003afc:	2200      	movs	r2, #0
 8003afe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b02:	4802      	ldr	r0, [pc, #8]	; (8003b0c <Motor5_aB+0x38>)
 8003b04:	f002 fb42 	bl	800618c <HAL_GPIO_WritePin>
 8003b08:	bf00      	nop
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40020400 	.word	0x40020400

08003b10 <Motor5_ab>:
void Motor5_ab(void) // 电机5状态3
{VM5_IN1_L();	VM5_IN2_H();	VM5_IN3_L()	;	VM5_IN4_H();}
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	2200      	movs	r2, #0
 8003b16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b1a:	480b      	ldr	r0, [pc, #44]	; (8003b48 <Motor5_ab+0x38>)
 8003b1c:	f002 fb36 	bl	800618c <HAL_GPIO_WritePin>
 8003b20:	2201      	movs	r2, #1
 8003b22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b26:	4808      	ldr	r0, [pc, #32]	; (8003b48 <Motor5_ab+0x38>)
 8003b28:	f002 fb30 	bl	800618c <HAL_GPIO_WritePin>
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b32:	4805      	ldr	r0, [pc, #20]	; (8003b48 <Motor5_ab+0x38>)
 8003b34:	f002 fb2a 	bl	800618c <HAL_GPIO_WritePin>
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b3e:	4802      	ldr	r0, [pc, #8]	; (8003b48 <Motor5_ab+0x38>)
 8003b40:	f002 fb24 	bl	800618c <HAL_GPIO_WritePin>
 8003b44:	bf00      	nop
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40020400 	.word	0x40020400

08003b4c <Motor5_Ab>:
void Motor5_Ab(void) // 电机5状态4
{VM5_IN1_H();	VM5_IN2_L();	VM5_IN3_L()	;	VM5_IN4_H();}
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	2201      	movs	r2, #1
 8003b52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b56:	480b      	ldr	r0, [pc, #44]	; (8003b84 <Motor5_Ab+0x38>)
 8003b58:	f002 fb18 	bl	800618c <HAL_GPIO_WritePin>
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b62:	4808      	ldr	r0, [pc, #32]	; (8003b84 <Motor5_Ab+0x38>)
 8003b64:	f002 fb12 	bl	800618c <HAL_GPIO_WritePin>
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b6e:	4805      	ldr	r0, [pc, #20]	; (8003b84 <Motor5_Ab+0x38>)
 8003b70:	f002 fb0c 	bl	800618c <HAL_GPIO_WritePin>
 8003b74:	2201      	movs	r2, #1
 8003b76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b7a:	4802      	ldr	r0, [pc, #8]	; (8003b84 <Motor5_Ab+0x38>)
 8003b7c:	f002 fb06 	bl	800618c <HAL_GPIO_WritePin>
 8003b80:	bf00      	nop
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40020400 	.word	0x40020400

08003b88 <Motor5_Release>:
void Motor5_Release(void) // 电机5释放锁定
{VM5_IN1_L();	VM5_IN2_L();	VM5_IN3_L()	;	VM5_IN4_L();}
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b92:	480b      	ldr	r0, [pc, #44]	; (8003bc0 <Motor5_Release+0x38>)
 8003b94:	f002 fafa 	bl	800618c <HAL_GPIO_WritePin>
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b9e:	4808      	ldr	r0, [pc, #32]	; (8003bc0 <Motor5_Release+0x38>)
 8003ba0:	f002 faf4 	bl	800618c <HAL_GPIO_WritePin>
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003baa:	4805      	ldr	r0, [pc, #20]	; (8003bc0 <Motor5_Release+0x38>)
 8003bac:	f002 faee 	bl	800618c <HAL_GPIO_WritePin>
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bb6:	4802      	ldr	r0, [pc, #8]	; (8003bc0 <Motor5_Release+0x38>)
 8003bb8:	f002 fae8 	bl	800618c <HAL_GPIO_WritePin>
 8003bbc:	bf00      	nop
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40020400 	.word	0x40020400

08003bc4 <Motor6_AB>:

void Motor6_AB(void) // 电机6状态1
{VM6_IN1_H();	VM6_IN2_L();	VM6_IN3_H()	;	VM6_IN4_L();}
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	2201      	movs	r2, #1
 8003bca:	2120      	movs	r1, #32
 8003bcc:	480a      	ldr	r0, [pc, #40]	; (8003bf8 <Motor6_AB+0x34>)
 8003bce:	f002 fadd 	bl	800618c <HAL_GPIO_WritePin>
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	2140      	movs	r1, #64	; 0x40
 8003bd6:	4808      	ldr	r0, [pc, #32]	; (8003bf8 <Motor6_AB+0x34>)
 8003bd8:	f002 fad8 	bl	800618c <HAL_GPIO_WritePin>
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003be2:	4806      	ldr	r0, [pc, #24]	; (8003bfc <Motor6_AB+0x38>)
 8003be4:	f002 fad2 	bl	800618c <HAL_GPIO_WritePin>
 8003be8:	2200      	movs	r2, #0
 8003bea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003bee:	4803      	ldr	r0, [pc, #12]	; (8003bfc <Motor6_AB+0x38>)
 8003bf0:	f002 facc 	bl	800618c <HAL_GPIO_WritePin>
 8003bf4:	bf00      	nop
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	40020800 	.word	0x40020800

08003c00 <Motor6_aB>:
void Motor6_aB(void) // 电机6状态2
{VM6_IN1_L();	VM6_IN2_H();	VM6_IN3_H()	;	VM6_IN4_L();}
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	2200      	movs	r2, #0
 8003c06:	2120      	movs	r1, #32
 8003c08:	480a      	ldr	r0, [pc, #40]	; (8003c34 <Motor6_aB+0x34>)
 8003c0a:	f002 fabf 	bl	800618c <HAL_GPIO_WritePin>
 8003c0e:	2201      	movs	r2, #1
 8003c10:	2140      	movs	r1, #64	; 0x40
 8003c12:	4808      	ldr	r0, [pc, #32]	; (8003c34 <Motor6_aB+0x34>)
 8003c14:	f002 faba 	bl	800618c <HAL_GPIO_WritePin>
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c1e:	4806      	ldr	r0, [pc, #24]	; (8003c38 <Motor6_aB+0x38>)
 8003c20:	f002 fab4 	bl	800618c <HAL_GPIO_WritePin>
 8003c24:	2200      	movs	r2, #0
 8003c26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c2a:	4803      	ldr	r0, [pc, #12]	; (8003c38 <Motor6_aB+0x38>)
 8003c2c:	f002 faae 	bl	800618c <HAL_GPIO_WritePin>
 8003c30:	bf00      	nop
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40020800 	.word	0x40020800

08003c3c <Motor6_ab>:
void Motor6_ab(void) // 电机6状态3
{VM6_IN1_L();	VM6_IN2_H();	VM6_IN3_L()	;	VM6_IN4_H();}
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	2200      	movs	r2, #0
 8003c42:	2120      	movs	r1, #32
 8003c44:	480a      	ldr	r0, [pc, #40]	; (8003c70 <Motor6_ab+0x34>)
 8003c46:	f002 faa1 	bl	800618c <HAL_GPIO_WritePin>
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	2140      	movs	r1, #64	; 0x40
 8003c4e:	4808      	ldr	r0, [pc, #32]	; (8003c70 <Motor6_ab+0x34>)
 8003c50:	f002 fa9c 	bl	800618c <HAL_GPIO_WritePin>
 8003c54:	2200      	movs	r2, #0
 8003c56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c5a:	4806      	ldr	r0, [pc, #24]	; (8003c74 <Motor6_ab+0x38>)
 8003c5c:	f002 fa96 	bl	800618c <HAL_GPIO_WritePin>
 8003c60:	2201      	movs	r2, #1
 8003c62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c66:	4803      	ldr	r0, [pc, #12]	; (8003c74 <Motor6_ab+0x38>)
 8003c68:	f002 fa90 	bl	800618c <HAL_GPIO_WritePin>
 8003c6c:	bf00      	nop
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40021000 	.word	0x40021000
 8003c74:	40020800 	.word	0x40020800

08003c78 <Motor6_Ab>:
void Motor6_Ab(void) // 电机6状态4
{VM6_IN1_H();	VM6_IN2_L();	VM6_IN3_L()	;	VM6_IN4_H();}
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	2120      	movs	r1, #32
 8003c80:	480a      	ldr	r0, [pc, #40]	; (8003cac <Motor6_Ab+0x34>)
 8003c82:	f002 fa83 	bl	800618c <HAL_GPIO_WritePin>
 8003c86:	2200      	movs	r2, #0
 8003c88:	2140      	movs	r1, #64	; 0x40
 8003c8a:	4808      	ldr	r0, [pc, #32]	; (8003cac <Motor6_Ab+0x34>)
 8003c8c:	f002 fa7e 	bl	800618c <HAL_GPIO_WritePin>
 8003c90:	2200      	movs	r2, #0
 8003c92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c96:	4806      	ldr	r0, [pc, #24]	; (8003cb0 <Motor6_Ab+0x38>)
 8003c98:	f002 fa78 	bl	800618c <HAL_GPIO_WritePin>
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ca2:	4803      	ldr	r0, [pc, #12]	; (8003cb0 <Motor6_Ab+0x38>)
 8003ca4:	f002 fa72 	bl	800618c <HAL_GPIO_WritePin>
 8003ca8:	bf00      	nop
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	40020800 	.word	0x40020800

08003cb4 <Motor6_Release>:
void Motor6_A_release(void)
{VM6_IN1_L();	VM6_IN2_L();}
void Motor6_B_release(void)
{VM6_IN3_L();	VM6_IN4_L();}
void Motor6_Release(void) // 电机6释放锁定
{VM6_IN1_L();	VM6_IN2_L();	VM6_IN3_L()	;	VM6_IN4_L();}
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2120      	movs	r1, #32
 8003cbc:	480a      	ldr	r0, [pc, #40]	; (8003ce8 <Motor6_Release+0x34>)
 8003cbe:	f002 fa65 	bl	800618c <HAL_GPIO_WritePin>
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	2140      	movs	r1, #64	; 0x40
 8003cc6:	4808      	ldr	r0, [pc, #32]	; (8003ce8 <Motor6_Release+0x34>)
 8003cc8:	f002 fa60 	bl	800618c <HAL_GPIO_WritePin>
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cd2:	4806      	ldr	r0, [pc, #24]	; (8003cec <Motor6_Release+0x38>)
 8003cd4:	f002 fa5a 	bl	800618c <HAL_GPIO_WritePin>
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003cde:	4803      	ldr	r0, [pc, #12]	; (8003cec <Motor6_Release+0x38>)
 8003ce0:	f002 fa54 	bl	800618c <HAL_GPIO_WritePin>
 8003ce4:	bf00      	nop
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	40020800 	.word	0x40020800

08003cf0 <ALL_Motors_Disable>:
	printf("DecelerationTimeTMR:%ld\r\n",a->DecelerationTimeTMR);
	printf("********************\r\n");
}

void ALL_Motors_Disable(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
	Motor1_Disable();	Motor2_Disable();	Motor3_Disable();	Motor4_Disable();
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	2110      	movs	r1, #16
 8003cf8:	4857      	ldr	r0, [pc, #348]	; (8003e58 <ALL_Motors_Disable+0x168>)
 8003cfa:	f002 fa47 	bl	800618c <HAL_GPIO_WritePin>
 8003cfe:	2201      	movs	r2, #1
 8003d00:	2180      	movs	r1, #128	; 0x80
 8003d02:	4855      	ldr	r0, [pc, #340]	; (8003e58 <ALL_Motors_Disable+0x168>)
 8003d04:	f002 fa42 	bl	800618c <HAL_GPIO_WritePin>
 8003d08:	2201      	movs	r2, #1
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	4853      	ldr	r0, [pc, #332]	; (8003e5c <ALL_Motors_Disable+0x16c>)
 8003d0e:	f002 fa3d 	bl	800618c <HAL_GPIO_WritePin>
 8003d12:	2201      	movs	r2, #1
 8003d14:	2108      	movs	r1, #8
 8003d16:	4851      	ldr	r0, [pc, #324]	; (8003e5c <ALL_Motors_Disable+0x16c>)
 8003d18:	f002 fa38 	bl	800618c <HAL_GPIO_WritePin>
	VM5_Disable_A();	VM5_Disable_B();	VM6_Disable_A();	VM6_Disable_B();
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d22:	484e      	ldr	r0, [pc, #312]	; (8003e5c <ALL_Motors_Disable+0x16c>)
 8003d24:	f002 fa32 	bl	800618c <HAL_GPIO_WritePin>
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d2e:	484b      	ldr	r0, [pc, #300]	; (8003e5c <ALL_Motors_Disable+0x16c>)
 8003d30:	f002 fa2c 	bl	800618c <HAL_GPIO_WritePin>
 8003d34:	2200      	movs	r2, #0
 8003d36:	2180      	movs	r1, #128	; 0x80
 8003d38:	4848      	ldr	r0, [pc, #288]	; (8003e5c <ALL_Motors_Disable+0x16c>)
 8003d3a:	f002 fa27 	bl	800618c <HAL_GPIO_WritePin>
 8003d3e:	2200      	movs	r2, #0
 8003d40:	2102      	movs	r1, #2
 8003d42:	4847      	ldr	r0, [pc, #284]	; (8003e60 <ALL_Motors_Disable+0x170>)
 8003d44:	f002 fa22 	bl	800618c <HAL_GPIO_WritePin>
	VM7_Disable_A();	VM7_Disable_B();	VM8_Disable_A();	VM8_Disable_B();
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	4844      	ldr	r0, [pc, #272]	; (8003e60 <ALL_Motors_Disable+0x170>)
 8003d4e:	f002 fa1d 	bl	800618c <HAL_GPIO_WritePin>
 8003d52:	2200      	movs	r2, #0
 8003d54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d58:	4842      	ldr	r0, [pc, #264]	; (8003e64 <ALL_Motors_Disable+0x174>)
 8003d5a:	f002 fa17 	bl	800618c <HAL_GPIO_WritePin>
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d64:	483f      	ldr	r0, [pc, #252]	; (8003e64 <ALL_Motors_Disable+0x174>)
 8003d66:	f002 fa11 	bl	800618c <HAL_GPIO_WritePin>
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d70:	483c      	ldr	r0, [pc, #240]	; (8003e64 <ALL_Motors_Disable+0x174>)
 8003d72:	f002 fa0b 	bl	800618c <HAL_GPIO_WritePin>
	Motorpluse1_Low();	Motorpluse2_Low();	Motorpluse3_Low();	Motorpluse4_Low();
 8003d76:	2200      	movs	r2, #0
 8003d78:	2108      	movs	r1, #8
 8003d7a:	4837      	ldr	r0, [pc, #220]	; (8003e58 <ALL_Motors_Disable+0x168>)
 8003d7c:	f002 fa06 	bl	800618c <HAL_GPIO_WritePin>
 8003d80:	2200      	movs	r2, #0
 8003d82:	2140      	movs	r1, #64	; 0x40
 8003d84:	4834      	ldr	r0, [pc, #208]	; (8003e58 <ALL_Motors_Disable+0x168>)
 8003d86:	f002 fa01 	bl	800618c <HAL_GPIO_WritePin>
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d90:	4831      	ldr	r0, [pc, #196]	; (8003e58 <ALL_Motors_Disable+0x168>)
 8003d92:	f002 f9fb 	bl	800618c <HAL_GPIO_WritePin>
 8003d96:	2200      	movs	r2, #0
 8003d98:	2104      	movs	r1, #4
 8003d9a:	4830      	ldr	r0, [pc, #192]	; (8003e5c <ALL_Motors_Disable+0x16c>)
 8003d9c:	f002 f9f6 	bl	800618c <HAL_GPIO_WritePin>
	VM5_IN1_L();	VM5_IN2_L();	VM5_IN3_L();	VM5_IN4_L();
 8003da0:	2200      	movs	r2, #0
 8003da2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003da6:	482c      	ldr	r0, [pc, #176]	; (8003e58 <ALL_Motors_Disable+0x168>)
 8003da8:	f002 f9f0 	bl	800618c <HAL_GPIO_WritePin>
 8003dac:	2200      	movs	r2, #0
 8003dae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003db2:	4829      	ldr	r0, [pc, #164]	; (8003e58 <ALL_Motors_Disable+0x168>)
 8003db4:	f002 f9ea 	bl	800618c <HAL_GPIO_WritePin>
 8003db8:	2200      	movs	r2, #0
 8003dba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003dbe:	4826      	ldr	r0, [pc, #152]	; (8003e58 <ALL_Motors_Disable+0x168>)
 8003dc0:	f002 f9e4 	bl	800618c <HAL_GPIO_WritePin>
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003dca:	4823      	ldr	r0, [pc, #140]	; (8003e58 <ALL_Motors_Disable+0x168>)
 8003dcc:	f002 f9de 	bl	800618c <HAL_GPIO_WritePin>
	VM6_IN1_L();	VM6_IN2_L();	VM6_IN3_L();	VM6_IN4_L();
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2120      	movs	r1, #32
 8003dd4:	4821      	ldr	r0, [pc, #132]	; (8003e5c <ALL_Motors_Disable+0x16c>)
 8003dd6:	f002 f9d9 	bl	800618c <HAL_GPIO_WritePin>
 8003dda:	2200      	movs	r2, #0
 8003ddc:	2140      	movs	r1, #64	; 0x40
 8003dde:	481f      	ldr	r0, [pc, #124]	; (8003e5c <ALL_Motors_Disable+0x16c>)
 8003de0:	f002 f9d4 	bl	800618c <HAL_GPIO_WritePin>
 8003de4:	2200      	movs	r2, #0
 8003de6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dea:	481f      	ldr	r0, [pc, #124]	; (8003e68 <ALL_Motors_Disable+0x178>)
 8003dec:	f002 f9ce 	bl	800618c <HAL_GPIO_WritePin>
 8003df0:	2200      	movs	r2, #0
 8003df2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003df6:	481c      	ldr	r0, [pc, #112]	; (8003e68 <ALL_Motors_Disable+0x178>)
 8003df8:	f002 f9c8 	bl	800618c <HAL_GPIO_WritePin>
	VM7_IN1_L();	VM7_IN2_L();	VM7_IN3_L();	VM7_IN4_L();
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e02:	4815      	ldr	r0, [pc, #84]	; (8003e58 <ALL_Motors_Disable+0x168>)
 8003e04:	f002 f9c2 	bl	800618c <HAL_GPIO_WritePin>
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e0e:	4812      	ldr	r0, [pc, #72]	; (8003e58 <ALL_Motors_Disable+0x168>)
 8003e10:	f002 f9bc 	bl	800618c <HAL_GPIO_WritePin>
 8003e14:	2200      	movs	r2, #0
 8003e16:	2101      	movs	r1, #1
 8003e18:	480f      	ldr	r0, [pc, #60]	; (8003e58 <ALL_Motors_Disable+0x168>)
 8003e1a:	f002 f9b7 	bl	800618c <HAL_GPIO_WritePin>
 8003e1e:	2200      	movs	r2, #0
 8003e20:	2102      	movs	r1, #2
 8003e22:	480d      	ldr	r0, [pc, #52]	; (8003e58 <ALL_Motors_Disable+0x168>)
 8003e24:	f002 f9b2 	bl	800618c <HAL_GPIO_WritePin>
	VM8_IN1_L();	VM8_IN2_L();	VM8_IN3_L();	VM8_IN4_L();
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003e2e:	480f      	ldr	r0, [pc, #60]	; (8003e6c <ALL_Motors_Disable+0x17c>)
 8003e30:	f002 f9ac 	bl	800618c <HAL_GPIO_WritePin>
 8003e34:	2200      	movs	r2, #0
 8003e36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e3a:	480c      	ldr	r0, [pc, #48]	; (8003e6c <ALL_Motors_Disable+0x17c>)
 8003e3c:	f002 f9a6 	bl	800618c <HAL_GPIO_WritePin>
 8003e40:	2200      	movs	r2, #0
 8003e42:	2104      	movs	r1, #4
 8003e44:	480a      	ldr	r0, [pc, #40]	; (8003e70 <ALL_Motors_Disable+0x180>)
 8003e46:	f002 f9a1 	bl	800618c <HAL_GPIO_WritePin>
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2108      	movs	r1, #8
 8003e4e:	4808      	ldr	r0, [pc, #32]	; (8003e70 <ALL_Motors_Disable+0x180>)
 8003e50:	f002 f99c 	bl	800618c <HAL_GPIO_WritePin>
}
 8003e54:	bf00      	nop
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40020400 	.word	0x40020400
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	40021800 	.word	0x40021800
 8003e64:	40021400 	.word	0x40021400
 8003e68:	40020800 	.word	0x40020800
 8003e6c:	40020c00 	.word	0x40020c00
 8003e70:	40020000 	.word	0x40020000

08003e74 <AccelDecel>:
	temp_AccelDecelTimeTMR = MOTORTIM_TMR / AccelDecelRate ;  // 计算对应的加减速计时器TMR
	return temp_AccelDecelTimeTMR;
}

void AccelDecel(uint32_t AccelDecelState,struct MotorDefine *a)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
	switch (AccelDecelState){
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d022      	beq.n	8003eca <AccelDecel+0x56>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d839      	bhi.n	8003efe <AccelDecel+0x8a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d035      	beq.n	8003efc <AccelDecel+0x88>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d000      	beq.n	8003e98 <AccelDecel+0x24>
			a->ActualSpeedInHz = a->StartupSpeedInHz;
			AccelDecelState = 0;
		}
		a->StepperSpeedTMR = MOTORTIM_TMR / a->ActualSpeedInHz;
	}
}
 8003e96:	e032      	b.n	8003efe <AccelDecel+0x8a>
		a->ActualSpeedInHz ++ ;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9c:	1c5a      	adds	r2, r3, #1
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	641a      	str	r2, [r3, #64]	; 0x40
		if (a->ActualSpeedInHz >= a->DesiredSpeedInHz){
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d305      	bcc.n	8003eba <AccelDecel+0x46>
			a->ActualSpeedInHz = a->DesiredSpeedInHz;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40
			AccelDecelState = 0;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	607b      	str	r3, [r7, #4]
		a->StepperSpeedTMR = MOTORTIM_TMR / a->ActualSpeedInHz;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	4a13      	ldr	r2, [pc, #76]	; (8003f0c <AccelDecel+0x98>)
 8003ec0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	649a      	str	r2, [r3, #72]	; 0x48
	break;
 8003ec8:	e019      	b.n	8003efe <AccelDecel+0x8a>
		a->ActualSpeedInHz -- ;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	1e5a      	subs	r2, r3, #1
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	641a      	str	r2, [r3, #64]	; 0x40
		if (a->ActualSpeedInHz <= a->StartupSpeedInHz){
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d805      	bhi.n	8003eec <AccelDecel+0x78>
			a->ActualSpeedInHz = a->StartupSpeedInHz;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	641a      	str	r2, [r3, #64]	; 0x40
			AccelDecelState = 0;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	607b      	str	r3, [r7, #4]
		a->StepperSpeedTMR = MOTORTIM_TMR / a->ActualSpeedInHz;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef0:	4a06      	ldr	r2, [pc, #24]	; (8003f0c <AccelDecel+0x98>)
 8003ef2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003efa:	e000      	b.n	8003efe <AccelDecel+0x8a>
	break;
 8003efc:	bf00      	nop
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	000186a0 	.word	0x000186a0

08003f10 <DC_Motor_ON>:

/*            *****************    0x10-0b00010000 直流电机控制模式 ：  ******************
根据协议，通过USART5进行出串口通讯，输入直流电机的【编号、AB相、占空比】参数
Status - 0x02 代表A相使能，0x01代表B相使能。同一个电机的AB相占空比一致 ***/
void DC_Motor_ON(struct MotorDefine *temp ,char x, uint32_t Duty_Cycle)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	607a      	str	r2, [r7, #4]
 8003f1c:	72fb      	strb	r3, [r7, #11]
	if ( x == 'A' ){
 8003f1e:	7afb      	ldrb	r3, [r7, #11]
 8003f20:	2b41      	cmp	r3, #65	; 0x41
 8003f22:	d13d      	bne.n	8003fa0 <DC_Motor_ON+0x90>
		Motor[temp->MotorNumber].Status = Motor[temp->MotorNumber].Status | 0b00000010 ;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4a61      	ldr	r2, [pc, #388]	; (80040b4 <DC_Motor_ON+0x1a4>)
 8003f2e:	460b      	mov	r3, r1
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	440b      	add	r3, r1
 8003f34:	015b      	lsls	r3, r3, #5
 8003f36:	4413      	add	r3, r2
 8003f38:	3330      	adds	r3, #48	; 0x30
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003f42:	4611      	mov	r1, r2
 8003f44:	f043 0302 	orr.w	r3, r3, #2
 8003f48:	b2d8      	uxtb	r0, r3
 8003f4a:	4a5a      	ldr	r2, [pc, #360]	; (80040b4 <DC_Motor_ON+0x1a4>)
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	440b      	add	r3, r1
 8003f52:	015b      	lsls	r3, r3, #5
 8003f54:	4413      	add	r3, r2
 8003f56:	3330      	adds	r3, #48	; 0x30
 8003f58:	4602      	mov	r2, r0
 8003f5a:	701a      	strb	r2, [r3, #0]
		if ( temp->MotorNumber == 6 ){
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f62:	2b06      	cmp	r3, #6
 8003f64:	d105      	bne.n	8003f72 <DC_Motor_ON+0x62>
			VM6_Enable_A();
 8003f66:	2201      	movs	r2, #1
 8003f68:	2180      	movs	r1, #128	; 0x80
 8003f6a:	4853      	ldr	r0, [pc, #332]	; (80040b8 <DC_Motor_ON+0x1a8>)
 8003f6c:	f002 f90e 	bl	800618c <HAL_GPIO_WritePin>
 8003f70:	e057      	b.n	8004022 <DC_Motor_ON+0x112>
		}
		else if ( temp->MotorNumber == 7 ){
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f78:	2b07      	cmp	r3, #7
 8003f7a:	d105      	bne.n	8003f88 <DC_Motor_ON+0x78>
			VM7_Enable_A();
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	2101      	movs	r1, #1
 8003f80:	484e      	ldr	r0, [pc, #312]	; (80040bc <DC_Motor_ON+0x1ac>)
 8003f82:	f002 f903 	bl	800618c <HAL_GPIO_WritePin>
 8003f86:	e04c      	b.n	8004022 <DC_Motor_ON+0x112>
		}
		else if ( temp->MotorNumber == 8 ){
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f8e:	2b08      	cmp	r3, #8
 8003f90:	d147      	bne.n	8004022 <DC_Motor_ON+0x112>
			VM8_Enable_A();
 8003f92:	2201      	movs	r2, #1
 8003f94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f98:	4849      	ldr	r0, [pc, #292]	; (80040c0 <DC_Motor_ON+0x1b0>)
 8003f9a:	f002 f8f7 	bl	800618c <HAL_GPIO_WritePin>
 8003f9e:	e040      	b.n	8004022 <DC_Motor_ON+0x112>
		}
	}
	else if ( x == 'B' ){
 8003fa0:	7afb      	ldrb	r3, [r7, #11]
 8003fa2:	2b42      	cmp	r3, #66	; 0x42
 8003fa4:	d13d      	bne.n	8004022 <DC_Motor_ON+0x112>
		Motor[temp->MotorNumber].Status = Motor[temp->MotorNumber].Status | 0b00000001 ;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fac:	4619      	mov	r1, r3
 8003fae:	4a41      	ldr	r2, [pc, #260]	; (80040b4 <DC_Motor_ON+0x1a4>)
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	440b      	add	r3, r1
 8003fb6:	015b      	lsls	r3, r3, #5
 8003fb8:	4413      	add	r3, r2
 8003fba:	3330      	adds	r3, #48	; 0x30
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	f043 0301 	orr.w	r3, r3, #1
 8003fca:	b2d8      	uxtb	r0, r3
 8003fcc:	4a39      	ldr	r2, [pc, #228]	; (80040b4 <DC_Motor_ON+0x1a4>)
 8003fce:	460b      	mov	r3, r1
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	440b      	add	r3, r1
 8003fd4:	015b      	lsls	r3, r3, #5
 8003fd6:	4413      	add	r3, r2
 8003fd8:	3330      	adds	r3, #48	; 0x30
 8003fda:	4602      	mov	r2, r0
 8003fdc:	701a      	strb	r2, [r3, #0]
		if ( temp->MotorNumber == 6 ){
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fe4:	2b06      	cmp	r3, #6
 8003fe6:	d105      	bne.n	8003ff4 <DC_Motor_ON+0xe4>
			VM6_Enable_B();
 8003fe8:	2201      	movs	r2, #1
 8003fea:	2102      	movs	r1, #2
 8003fec:	4833      	ldr	r0, [pc, #204]	; (80040bc <DC_Motor_ON+0x1ac>)
 8003fee:	f002 f8cd 	bl	800618c <HAL_GPIO_WritePin>
 8003ff2:	e016      	b.n	8004022 <DC_Motor_ON+0x112>
		}
		else if ( temp->MotorNumber == 7 ){
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ffa:	2b07      	cmp	r3, #7
 8003ffc:	d106      	bne.n	800400c <DC_Motor_ON+0xfc>
			VM7_Enable_B();
 8003ffe:	2201      	movs	r2, #1
 8004000:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004004:	482e      	ldr	r0, [pc, #184]	; (80040c0 <DC_Motor_ON+0x1b0>)
 8004006:	f002 f8c1 	bl	800618c <HAL_GPIO_WritePin>
 800400a:	e00a      	b.n	8004022 <DC_Motor_ON+0x112>
		}
		else if ( temp->MotorNumber == 8 ){
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004012:	2b08      	cmp	r3, #8
 8004014:	d105      	bne.n	8004022 <DC_Motor_ON+0x112>
			VM8_Enable_B();
 8004016:	2201      	movs	r2, #1
 8004018:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800401c:	4828      	ldr	r0, [pc, #160]	; (80040c0 <DC_Motor_ON+0x1b0>)
 800401e:	f002 f8b5 	bl	800618c <HAL_GPIO_WritePin>
		}
	}

	Motor[temp->MotorNumber].NumberofSteps_StopAccel = Duty_Cycle;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004028:	4619      	mov	r1, r3
 800402a:	4a22      	ldr	r2, [pc, #136]	; (80040b4 <DC_Motor_ON+0x1a4>)
 800402c:	460b      	mov	r3, r1
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	440b      	add	r3, r1
 8004032:	015b      	lsls	r3, r3, #5
 8004034:	4413      	add	r3, r2
 8004036:	3350      	adds	r3, #80	; 0x50
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].AccelerationTimeTMR = Duty_Cycle * Motor[temp->MotorNumber].StepperSpeedTMR / Motor[temp->MotorNumber].DecelerationTimeTMR ;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004042:	4619      	mov	r1, r3
 8004044:	4a1b      	ldr	r2, [pc, #108]	; (80040b4 <DC_Motor_ON+0x1a4>)
 8004046:	460b      	mov	r3, r1
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	440b      	add	r3, r1
 800404c:	015b      	lsls	r3, r3, #5
 800404e:	4413      	add	r3, r2
 8004050:	3348      	adds	r3, #72	; 0x48
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	fb03 f202 	mul.w	r2, r3, r2
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004060:	4618      	mov	r0, r3
 8004062:	4914      	ldr	r1, [pc, #80]	; (80040b4 <DC_Motor_ON+0x1a4>)
 8004064:	4603      	mov	r3, r0
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	4403      	add	r3, r0
 800406a:	015b      	lsls	r3, r3, #5
 800406c:	440b      	add	r3, r1
 800406e:	335c      	adds	r3, #92	; 0x5c
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68f9      	ldr	r1, [r7, #12]
 8004074:	f891 1020 	ldrb.w	r1, [r1, #32]
 8004078:	4608      	mov	r0, r1
 800407a:	fbb2 f2f3 	udiv	r2, r2, r3
 800407e:	490d      	ldr	r1, [pc, #52]	; (80040b4 <DC_Motor_ON+0x1a4>)
 8004080:	4603      	mov	r3, r0
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	4403      	add	r3, r0
 8004086:	015b      	lsls	r3, r3, #5
 8004088:	440b      	add	r3, r1
 800408a:	3358      	adds	r3, #88	; 0x58
 800408c:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(Motor[temp->MotorNumber].htim_x);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004094:	4619      	mov	r1, r3
 8004096:	4a07      	ldr	r2, [pc, #28]	; (80040b4 <DC_Motor_ON+0x1a4>)
 8004098:	460b      	mov	r3, r1
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	440b      	add	r3, r1
 800409e:	015b      	lsls	r3, r3, #5
 80040a0:	4413      	add	r3, r2
 80040a2:	3334      	adds	r3, #52	; 0x34
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f005 f8a0 	bl	80091ec <HAL_TIM_Base_Start_IT>
}
 80040ac:	bf00      	nop
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	200008b0 	.word	0x200008b0
 80040b8:	40021000 	.word	0x40021000
 80040bc:	40021800 	.word	0x40021800
 80040c0:	40021400 	.word	0x40021400

080040c4 <Init_SSCDANT250K_Pressure>:

uint16_t 	Pressure_Data_Digit ;
float		Pressure_Data_Float ;

uint8_t Init_SSCDANT250K_Pressure(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af04      	add	r7, sp, #16
	uint8_t 	temp_data[2];
	if ( HAL_I2C_Mem_Read(&hi2c2,SSCDANT250K_Read,IIC_address,I2C_MEMADD_SIZE_8BIT,temp_data,2,100) == HAL_OK ){
 80040ca:	2364      	movs	r3, #100	; 0x64
 80040cc:	9302      	str	r3, [sp, #8]
 80040ce:	2302      	movs	r3, #2
 80040d0:	9301      	str	r3, [sp, #4]
 80040d2:	1d3b      	adds	r3, r7, #4
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	2301      	movs	r3, #1
 80040d8:	2200      	movs	r2, #0
 80040da:	2151      	movs	r1, #81	; 0x51
 80040dc:	4809      	ldr	r0, [pc, #36]	; (8004104 <Init_SSCDANT250K_Pressure+0x40>)
 80040de:	f002 f9e5 	bl	80064ac <HAL_I2C_Mem_Read>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d104      	bne.n	80040f2 <Init_SSCDANT250K_Pressure+0x2e>
		printf("Pressure_S init successful \r\n");
 80040e8:	4807      	ldr	r0, [pc, #28]	; (8004108 <Init_SSCDANT250K_Pressure+0x44>)
 80040ea:	f00a fc07 	bl	800e8fc <puts>
		return SUCCESS_1 ;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e003      	b.n	80040fa <Init_SSCDANT250K_Pressure+0x36>
	}else{
		printf("[FAIL]Pressure_S init FAIL! \r\n");
 80040f2:	4806      	ldr	r0, [pc, #24]	; (800410c <Init_SSCDANT250K_Pressure+0x48>)
 80040f4:	f00a fc02 	bl	800e8fc <puts>
		return FAIL_0 ;
 80040f8:	2300      	movs	r3, #0
	}
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	200002e0 	.word	0x200002e0
 8004108:	080106a8 	.word	0x080106a8
 800410c:	080106c8 	.word	0x080106c8

08004110 <Read_Pressure_Average_ntimes>:
		return FAIL_0 ;
	}
}

float Read_Pressure_Average_ntimes(uint8_t ntimes)
{
 8004110:	b5b0      	push	{r4, r5, r7, lr}
 8004112:	b08a      	sub	sp, #40	; 0x28
 8004114:	af04      	add	r7, sp, #16
 8004116:	4603      	mov	r3, r0
 8004118:	71fb      	strb	r3, [r7, #7]
	uint8_t 	temp_data[2];
	uint16_t	pres_temp = 0;
 800411a:	2300      	movs	r3, #0
 800411c:	823b      	strh	r3, [r7, #16]
	uint32_t 	pres_d_av = 0 ;
 800411e:	2300      	movs	r3, #0
 8004120:	617b      	str	r3, [r7, #20]
	float		pres_f ;
	for(uint16_t j=0 ; j<ntimes ; j++){
 8004122:	2300      	movs	r3, #0
 8004124:	827b      	strh	r3, [r7, #18]
 8004126:	e028      	b.n	800417a <Read_Pressure_Average_ntimes+0x6a>
		if ( HAL_I2C_Mem_Read(&hi2c2,SSCDANT250K_Read,IIC_address,I2C_MEMADD_SIZE_8BIT,temp_data,2,100) == HAL_OK ){
 8004128:	2364      	movs	r3, #100	; 0x64
 800412a:	9302      	str	r3, [sp, #8]
 800412c:	2302      	movs	r3, #2
 800412e:	9301      	str	r3, [sp, #4]
 8004130:	f107 0308 	add.w	r3, r7, #8
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	2301      	movs	r3, #1
 8004138:	2200      	movs	r2, #0
 800413a:	2151      	movs	r1, #81	; 0x51
 800413c:	4834      	ldr	r0, [pc, #208]	; (8004210 <Read_Pressure_Average_ntimes+0x100>)
 800413e:	f002 f9b5 	bl	80064ac <HAL_I2C_Mem_Read>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10f      	bne.n	8004168 <Read_Pressure_Average_ntimes+0x58>
			pres_temp = ( (temp_data[0]<<8) + temp_data[1] );
 8004148:	7a3b      	ldrb	r3, [r7, #8]
 800414a:	b29b      	uxth	r3, r3
 800414c:	021b      	lsls	r3, r3, #8
 800414e:	b29a      	uxth	r2, r3
 8004150:	7a7b      	ldrb	r3, [r7, #9]
 8004152:	b29b      	uxth	r3, r3
 8004154:	4413      	add	r3, r2
 8004156:	823b      	strh	r3, [r7, #16]
			pres_d_av = pres_d_av + pres_temp ;
 8004158:	8a3b      	ldrh	r3, [r7, #16]
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	4413      	add	r3, r2
 800415e:	617b      	str	r3, [r7, #20]
			HAL_Delay(5);
 8004160:	2005      	movs	r0, #5
 8004162:	f000 fd91 	bl	8004c88 <HAL_Delay>
 8004166:	e005      	b.n	8004174 <Read_Pressure_Average_ntimes+0x64>
		}else{
			printf("IIC WRONG!!! \r\n");
 8004168:	482a      	ldr	r0, [pc, #168]	; (8004214 <Read_Pressure_Average_ntimes+0x104>)
 800416a:	f00a fbc7 	bl	800e8fc <puts>
			return FAIL_0 ;
 800416e:	f04f 0300 	mov.w	r3, #0
 8004172:	e041      	b.n	80041f8 <Read_Pressure_Average_ntimes+0xe8>
	for(uint16_t j=0 ; j<ntimes ; j++){
 8004174:	8a7b      	ldrh	r3, [r7, #18]
 8004176:	3301      	adds	r3, #1
 8004178:	827b      	strh	r3, [r7, #18]
 800417a:	79fb      	ldrb	r3, [r7, #7]
 800417c:	b29b      	uxth	r3, r3
 800417e:	8a7a      	ldrh	r2, [r7, #18]
 8004180:	429a      	cmp	r2, r3
 8004182:	d3d1      	bcc.n	8004128 <Read_Pressure_Average_ntimes+0x18>
		}
	}
	pres_f = ( (pres_d_av/163.83/ntimes)-10 ) *250/80;
 8004184:	6978      	ldr	r0, [r7, #20]
 8004186:	f7fc f9bd 	bl	8000504 <__aeabi_ui2d>
 800418a:	a31f      	add	r3, pc, #124	; (adr r3, 8004208 <Read_Pressure_Average_ntimes+0xf8>)
 800418c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004190:	f7fc fb5c 	bl	800084c <__aeabi_ddiv>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4614      	mov	r4, r2
 800419a:	461d      	mov	r5, r3
 800419c:	79fb      	ldrb	r3, [r7, #7]
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fc f9c0 	bl	8000524 <__aeabi_i2d>
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4620      	mov	r0, r4
 80041aa:	4629      	mov	r1, r5
 80041ac:	f7fc fb4e 	bl	800084c <__aeabi_ddiv>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4610      	mov	r0, r2
 80041b6:	4619      	mov	r1, r3
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	4b16      	ldr	r3, [pc, #88]	; (8004218 <Read_Pressure_Average_ntimes+0x108>)
 80041be:	f7fc f863 	bl	8000288 <__aeabi_dsub>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4610      	mov	r0, r2
 80041c8:	4619      	mov	r1, r3
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	4b13      	ldr	r3, [pc, #76]	; (800421c <Read_Pressure_Average_ntimes+0x10c>)
 80041d0:	f7fc fa12 	bl	80005f8 <__aeabi_dmul>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	4610      	mov	r0, r2
 80041da:	4619      	mov	r1, r3
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	4b0f      	ldr	r3, [pc, #60]	; (8004220 <Read_Pressure_Average_ntimes+0x110>)
 80041e2:	f7fc fb33 	bl	800084c <__aeabi_ddiv>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4610      	mov	r0, r2
 80041ec:	4619      	mov	r1, r3
 80041ee:	f7fc fcdb 	bl	8000ba8 <__aeabi_d2f>
 80041f2:	4603      	mov	r3, r0
 80041f4:	60fb      	str	r3, [r7, #12]
	return pres_f;
 80041f6:	68fb      	ldr	r3, [r7, #12]
}
 80041f8:	ee07 3a90 	vmov	s15, r3
 80041fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bdb0      	pop	{r4, r5, r7, pc}
 8004206:	bf00      	nop
 8004208:	5c28f5c3 	.word	0x5c28f5c3
 800420c:	40647a8f 	.word	0x40647a8f
 8004210:	200002e0 	.word	0x200002e0
 8004214:	080106e8 	.word	0x080106e8
 8004218:	40240000 	.word	0x40240000
 800421c:	406f4000 	.word	0x406f4000
 8004220:	40540000 	.word	0x40540000

08004224 <PID_Init>:


struct _PID pid1 ;

void PID_Init(struct _PID *pid,float kp,float ki,float kd,float max_ki,float max_out)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6178      	str	r0, [r7, #20]
 800422c:	ed87 0a04 	vstr	s0, [r7, #16]
 8004230:	edc7 0a03 	vstr	s1, [r7, #12]
 8004234:	ed87 1a02 	vstr	s2, [r7, #8]
 8004238:	edc7 1a01 	vstr	s3, [r7, #4]
 800423c:	ed87 2a00 	vstr	s4, [r7]
	pid->kp=kp;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	601a      	str	r2, [r3, #0]
	pid->ki=ki;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	605a      	str	r2, [r3, #4]
	pid->kd=kd;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	609a      	str	r2, [r3, #8]
	pid->maxIntegral=max_ki;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	619a      	str	r2, [r3, #24]
	pid->maxOutput=max_out;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	621a      	str	r2, [r3, #32]
}
 800425e:	bf00      	nop
 8004260:	371c      	adds	r7, #28
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <PID_Clear>:

void PID_Clear(struct _PID *pid)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
	pid->error=0;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	60da      	str	r2, [r3, #12]
	pid->lastError=0;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	611a      	str	r2, [r3, #16]
	pid->integral=0;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	615a      	str	r2, [r3, #20]
	pid->output=0;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	61da      	str	r2, [r3, #28]
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <PID_SingleCalc>:

void PID_SingleCalc(struct _PID *pid,float SetValue,float feedback)
{
 800429e:	b480      	push	{r7}
 80042a0:	b085      	sub	sp, #20
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	60f8      	str	r0, [r7, #12]
 80042a6:	ed87 0a02 	vstr	s0, [r7, #8]
 80042aa:	edc7 0a01 	vstr	s1, [r7, #4]
	//更新数据
	pid->lastError=pid->error;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	68da      	ldr	r2, [r3, #12]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	611a      	str	r2, [r3, #16]
	//pid->error=SetValue-feedback;
	pid->error=feedback-SetValue;
 80042b6:	ed97 7a01 	vldr	s14, [r7, #4]
 80042ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80042be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	edc3 7a03 	vstr	s15, [r3, #12]
	//计算微分
	pid->output=(pid->error-pid->lastError)*pid->kd;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	ed93 7a03 	vldr	s14, [r3, #12]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80042d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	edd3 7a02 	vldr	s15, [r3, #8]
 80042de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	edc3 7a07 	vstr	s15, [r3, #28]
	//计算比例
	pid->output+=pid->error*pid->kp;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	ed93 7a07 	vldr	s14, [r3, #28]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	edd3 6a03 	vldr	s13, [r3, #12]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	edd3 7a00 	vldr	s15, [r3]
 80042fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	edc3 7a07 	vstr	s15, [r3, #28]
	//计算积分
	pid->integral+=pid->error*pid->ki;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	ed93 7a05 	vldr	s14, [r3, #20]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	edd3 6a03 	vldr	s13, [r3, #12]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	edd3 7a01 	vldr	s15, [r3, #4]
 800431a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800431e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	edc3 7a05 	vstr	s15, [r3, #20]
	LIMIT(pid->integral,-pid->maxIntegral,pid->maxIntegral);//积分限幅
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	ed93 7a05 	vldr	s14, [r3, #20]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	edd3 7a06 	vldr	s15, [r3, #24]
 8004334:	eef1 7a67 	vneg.f32	s15, s15
 8004338:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800433c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004340:	d805      	bhi.n	800434e <PID_SingleCalc+0xb0>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	edd3 7a06 	vldr	s15, [r3, #24]
 8004348:	eef1 7a67 	vneg.f32	s15, s15
 800434c:	e011      	b.n	8004372 <PID_SingleCalc+0xd4>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	ed93 7a05 	vldr	s14, [r3, #20]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	edd3 7a06 	vldr	s15, [r3, #24]
 800435a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800435e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004362:	db03      	blt.n	800436c <PID_SingleCalc+0xce>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	edd3 7a06 	vldr	s15, [r3, #24]
 800436a:	e002      	b.n	8004372 <PID_SingleCalc+0xd4>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	edd3 7a05 	vldr	s15, [r3, #20]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	edc3 7a05 	vstr	s15, [r3, #20]
	pid->output+=pid->integral;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	ed93 7a07 	vldr	s14, [r3, #28]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	edd3 7a05 	vldr	s15, [r3, #20]
 8004384:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	edc3 7a07 	vstr	s15, [r3, #28]
	//输出限幅
	LIMIT(pid->output,-pid->maxOutput,pid->maxOutput);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	ed93 7a07 	vldr	s14, [r3, #28]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	edd3 7a08 	vldr	s15, [r3, #32]
 800439a:	eef1 7a67 	vneg.f32	s15, s15
 800439e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a6:	d805      	bhi.n	80043b4 <PID_SingleCalc+0x116>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	edd3 7a08 	vldr	s15, [r3, #32]
 80043ae:	eef1 7a67 	vneg.f32	s15, s15
 80043b2:	e011      	b.n	80043d8 <PID_SingleCalc+0x13a>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	ed93 7a07 	vldr	s14, [r3, #28]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	edd3 7a08 	vldr	s15, [r3, #32]
 80043c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c8:	db03      	blt.n	80043d2 <PID_SingleCalc+0x134>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	edd3 7a08 	vldr	s15, [r3, #32]
 80043d0:	e002      	b.n	80043d8 <PID_SingleCalc+0x13a>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	edd3 7a07 	vldr	s15, [r3, #28]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80043de:	bf00      	nop
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
	...

080043ec <Char_to_Float>:
#endif


#ifdef	QuanxiePVctrl
float Char_to_Float(char *str)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
    float n = 0.0;
 80043f4:	f04f 0300 	mov.w	r3, #0
 80043f8:	617b      	str	r3, [r7, #20]
    float tmp = 10.0;
 80043fa:	4b38      	ldr	r3, [pc, #224]	; (80044dc <Char_to_Float+0xf0>)
 80043fc:	613b      	str	r3, [r7, #16]
    int flag = 0;
 80043fe:	2300      	movs	r3, #0
 8004400:	60fb      	str	r3, [r7, #12]
    assert(str);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d105      	bne.n	8004414 <Char_to_Float+0x28>
 8004408:	4b35      	ldr	r3, [pc, #212]	; (80044e0 <Char_to_Float+0xf4>)
 800440a:	4a36      	ldr	r2, [pc, #216]	; (80044e4 <Char_to_Float+0xf8>)
 800440c:	21bd      	movs	r1, #189	; 0xbd
 800440e:	4836      	ldr	r0, [pc, #216]	; (80044e8 <Char_to_Float+0xfc>)
 8004410:	f009 fa2c 	bl	800d86c <__assert_func>
    if(*str == '-')
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	2b2d      	cmp	r3, #45	; 0x2d
 800441a:	d119      	bne.n	8004450 <Char_to_Float+0x64>
    {
        flag = 1;
 800441c:	2301      	movs	r3, #1
 800441e:	60fb      	str	r3, [r7, #12]
        str++;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3301      	adds	r3, #1
 8004424:	607b      	str	r3, [r7, #4]
    }
    while(*str >= '0' && *str <= '9')
 8004426:	e013      	b.n	8004450 <Char_to_Float+0x64>
    {
        n = n*10 + (*str - '0');
 8004428:	edd7 7a05 	vldr	s15, [r7, #20]
 800442c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004430:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	3b30      	subs	r3, #48	; 0x30
 800443a:	ee07 3a90 	vmov	s15, r3
 800443e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004446:	edc7 7a05 	vstr	s15, [r7, #20]
        str++;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	3301      	adds	r3, #1
 800444e:	607b      	str	r3, [r7, #4]
    while(*str >= '0' && *str <= '9')
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	2b2f      	cmp	r3, #47	; 0x2f
 8004456:	d903      	bls.n	8004460 <Char_to_Float+0x74>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	2b39      	cmp	r3, #57	; 0x39
 800445e:	d9e3      	bls.n	8004428 <Char_to_Float+0x3c>
    }
    if(*str == '.')
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b2e      	cmp	r3, #46	; 0x2e
 8004466:	d127      	bne.n	80044b8 <Char_to_Float+0xcc>
    {
        str++;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3301      	adds	r3, #1
 800446c:	607b      	str	r3, [r7, #4]
        while(*str >= '0' && *str <= '9')
 800446e:	e01b      	b.n	80044a8 <Char_to_Float+0xbc>
        {
            n = n + (*str -'0')/tmp;;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	3b30      	subs	r3, #48	; 0x30
 8004476:	ee07 3a90 	vmov	s15, r3
 800447a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800447e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004482:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004486:	ed97 7a05 	vldr	s14, [r7, #20]
 800448a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800448e:	edc7 7a05 	vstr	s15, [r7, #20]
            tmp = tmp * 10;
 8004492:	edd7 7a04 	vldr	s15, [r7, #16]
 8004496:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800449a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800449e:	edc7 7a04 	vstr	s15, [r7, #16]
            str++;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3301      	adds	r3, #1
 80044a6:	607b      	str	r3, [r7, #4]
        while(*str >= '0' && *str <= '9')
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b2f      	cmp	r3, #47	; 0x2f
 80044ae:	d903      	bls.n	80044b8 <Char_to_Float+0xcc>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b39      	cmp	r3, #57	; 0x39
 80044b6:	d9db      	bls.n	8004470 <Char_to_Float+0x84>
        }
    }
    if(flag == 1)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d105      	bne.n	80044ca <Char_to_Float+0xde>
    {
        n = -n;
 80044be:	edd7 7a05 	vldr	s15, [r7, #20]
 80044c2:	eef1 7a67 	vneg.f32	s15, s15
 80044c6:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return n;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	ee07 3a90 	vmov	s15, r3
}
 80044d0:	eeb0 0a67 	vmov.f32	s0, s15
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	41200000 	.word	0x41200000
 80044e0:	080106f8 	.word	0x080106f8
 80044e4:	080108d8 	.word	0x080108d8
 80044e8:	080106fc 	.word	0x080106fc

080044ec <Get_Char_SetValue>:
    return n;
}

float SetValue_Update ;
void Get_Char_SetValue(char *str , uint8_t len)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	70fb      	strb	r3, [r7, #3]
	char temp[10] = {0};
 80044f8:	2300      	movs	r3, #0
 80044fa:	60bb      	str	r3, [r7, #8]
 80044fc:	f107 030c 	add.w	r3, r7, #12
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	809a      	strh	r2, [r3, #4]
	uint8_t a=0;
 8004506:	2300      	movs	r3, #0
 8004508:	75fb      	strb	r3, [r7, #23]
	uint8_t b=0;
 800450a:	2300      	movs	r3, #0
 800450c:	75bb      	strb	r3, [r7, #22]
	for(uint8_t i=0 ; i<len ; i++){
 800450e:	2300      	movs	r3, #0
 8004510:	757b      	strb	r3, [r7, #21]
 8004512:	e016      	b.n	8004542 <Get_Char_SetValue+0x56>
		if(str[i] == 'v'){
 8004514:	7d7b      	ldrb	r3, [r7, #21]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	4413      	add	r3, r2
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b76      	cmp	r3, #118	; 0x76
 800451e:	d103      	bne.n	8004528 <Get_Char_SetValue+0x3c>
			a = i+2 ;
 8004520:	7d7b      	ldrb	r3, [r7, #21]
 8004522:	3302      	adds	r3, #2
 8004524:	75fb      	strb	r3, [r7, #23]
 8004526:	e009      	b.n	800453c <Get_Char_SetValue+0x50>
		}
		else if(str[i] == ','){
 8004528:	7d7b      	ldrb	r3, [r7, #21]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	4413      	add	r3, r2
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	2b2c      	cmp	r3, #44	; 0x2c
 8004532:	d103      	bne.n	800453c <Get_Char_SetValue+0x50>
			b = i-1 ;
 8004534:	7d7b      	ldrb	r3, [r7, #21]
 8004536:	3b01      	subs	r3, #1
 8004538:	75bb      	strb	r3, [r7, #22]
			break;
 800453a:	e006      	b.n	800454a <Get_Char_SetValue+0x5e>
	for(uint8_t i=0 ; i<len ; i++){
 800453c:	7d7b      	ldrb	r3, [r7, #21]
 800453e:	3301      	adds	r3, #1
 8004540:	757b      	strb	r3, [r7, #21]
 8004542:	7d7a      	ldrb	r2, [r7, #21]
 8004544:	78fb      	ldrb	r3, [r7, #3]
 8004546:	429a      	cmp	r2, r3
 8004548:	d3e4      	bcc.n	8004514 <Get_Char_SetValue+0x28>
		}
	}
	if ( a && b){
 800454a:	7dfb      	ldrb	r3, [r7, #23]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d024      	beq.n	800459a <Get_Char_SetValue+0xae>
 8004550:	7dbb      	ldrb	r3, [r7, #22]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d021      	beq.n	800459a <Get_Char_SetValue+0xae>
		for(uint8_t j=0 ; j<(b-a+1) ; j++){
 8004556:	2300      	movs	r3, #0
 8004558:	753b      	strb	r3, [r7, #20]
 800455a:	e00e      	b.n	800457a <Get_Char_SetValue+0x8e>
			temp[j] = str[a+j] ;
 800455c:	7dfa      	ldrb	r2, [r7, #23]
 800455e:	7d3b      	ldrb	r3, [r7, #20]
 8004560:	4413      	add	r3, r2
 8004562:	461a      	mov	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	441a      	add	r2, r3
 8004568:	7d3b      	ldrb	r3, [r7, #20]
 800456a:	7812      	ldrb	r2, [r2, #0]
 800456c:	3318      	adds	r3, #24
 800456e:	443b      	add	r3, r7
 8004570:	f803 2c10 	strb.w	r2, [r3, #-16]
		for(uint8_t j=0 ; j<(b-a+1) ; j++){
 8004574:	7d3b      	ldrb	r3, [r7, #20]
 8004576:	3301      	adds	r3, #1
 8004578:	753b      	strb	r3, [r7, #20]
 800457a:	7dba      	ldrb	r2, [r7, #22]
 800457c:	7dfb      	ldrb	r3, [r7, #23]
 800457e:	1ad2      	subs	r2, r2, r3
 8004580:	7d3b      	ldrb	r3, [r7, #20]
 8004582:	429a      	cmp	r2, r3
 8004584:	daea      	bge.n	800455c <Get_Char_SetValue+0x70>
		}
		SetValue_Update = Char_to_Float(temp) ;
 8004586:	f107 0308 	add.w	r3, r7, #8
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff ff2e 	bl	80043ec <Char_to_Float>
 8004590:	eef0 7a40 	vmov.f32	s15, s0
 8004594:	4b03      	ldr	r3, [pc, #12]	; (80045a4 <Get_Char_SetValue+0xb8>)
 8004596:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800459a:	bf00      	nop
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20000c98 	.word	0x20000c98

080045a8 <Get_Char_p_i_d>:

float pid_Update[3];
void Get_Char_p_i_d(char *str , uint8_t len)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08e      	sub	sp, #56	; 0x38
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	460b      	mov	r3, r1
 80045b2:	70fb      	strb	r3, [r7, #3]
	char temp_p[10] = {0};
 80045b4:	2300      	movs	r3, #0
 80045b6:	623b      	str	r3, [r7, #32]
 80045b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	809a      	strh	r2, [r3, #4]
	char temp_i[10] = {0};
 80045c2:	2300      	movs	r3, #0
 80045c4:	617b      	str	r3, [r7, #20]
 80045c6:	f107 0318 	add.w	r3, r7, #24
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	809a      	strh	r2, [r3, #4]
	char temp_d[10] = {0};
 80045d0:	2300      	movs	r3, #0
 80045d2:	60bb      	str	r3, [r7, #8]
 80045d4:	f107 030c 	add.w	r3, r7, #12
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	809a      	strh	r2, [r3, #4]
	uint8_t num_p,num_i,num_d;
	num_p=num_i=num_d=0;
 80045de:	2300      	movs	r3, #0
 80045e0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80045e4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80045e8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80045ec:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80045f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t num_p_end,num_i_end,num_d_end;
	num_p_end=num_i_end=num_d_end=0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80045fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80045fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004602:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004606:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	for(uint8_t i=0 ; i<len ; i++){
 800460a:	2300      	movs	r3, #0
 800460c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8004610:	e020      	b.n	8004654 <Get_Char_p_i_d+0xac>
		if(str[i] == 'p'){
 8004612:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	4413      	add	r3, r2
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	2b70      	cmp	r3, #112	; 0x70
 800461e:	d104      	bne.n	800462a <Get_Char_p_i_d+0x82>
			num_p = i+2 ;
 8004620:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004624:	3302      	adds	r3, #2
 8004626:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
		if (num_p && (str[i] == ',')){
 800462a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00b      	beq.n	800464a <Get_Char_p_i_d+0xa2>
 8004632:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	4413      	add	r3, r2
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	2b2c      	cmp	r3, #44	; 0x2c
 800463e:	d104      	bne.n	800464a <Get_Char_p_i_d+0xa2>
			num_p_end = i-1 ;
 8004640:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004644:	3b01      	subs	r3, #1
 8004646:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	for(uint8_t i=0 ; i<len ; i++){
 800464a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800464e:	3301      	adds	r3, #1
 8004650:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8004654:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8004658:	78fb      	ldrb	r3, [r7, #3]
 800465a:	429a      	cmp	r2, r3
 800465c:	d3d9      	bcc.n	8004612 <Get_Char_p_i_d+0x6a>
		}
	}
	for(uint8_t i=0 ; i<len ; i++){
 800465e:	2300      	movs	r3, #0
 8004660:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8004664:	e020      	b.n	80046a8 <Get_Char_p_i_d+0x100>
		if(str[i] == 'i'){
 8004666:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	4413      	add	r3, r2
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b69      	cmp	r3, #105	; 0x69
 8004672:	d104      	bne.n	800467e <Get_Char_p_i_d+0xd6>
			num_i = i+2 ;
 8004674:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004678:	3302      	adds	r3, #2
 800467a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		}
		if (num_i && (str[i] == ',')){
 800467e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00b      	beq.n	800469e <Get_Char_p_i_d+0xf6>
 8004686:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	4413      	add	r3, r2
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b2c      	cmp	r3, #44	; 0x2c
 8004692:	d104      	bne.n	800469e <Get_Char_p_i_d+0xf6>
			num_i_end = i-1 ;
 8004694:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004698:	3b01      	subs	r3, #1
 800469a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	for(uint8_t i=0 ; i<len ; i++){
 800469e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80046a2:	3301      	adds	r3, #1
 80046a4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80046a8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80046ac:	78fb      	ldrb	r3, [r7, #3]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d3d9      	bcc.n	8004666 <Get_Char_p_i_d+0xbe>
		}
	}
	for(uint8_t i=0 ; i<len ; i++){
 80046b2:	2300      	movs	r3, #0
 80046b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80046b8:	e020      	b.n	80046fc <Get_Char_p_i_d+0x154>
		if(str[i] == 'd'){
 80046ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	4413      	add	r3, r2
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	2b64      	cmp	r3, #100	; 0x64
 80046c6:	d104      	bne.n	80046d2 <Get_Char_p_i_d+0x12a>
			num_d = i+2 ;
 80046c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046cc:	3302      	adds	r3, #2
 80046ce:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		}
		if (num_d && (str[i] == ',')){
 80046d2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00b      	beq.n	80046f2 <Get_Char_p_i_d+0x14a>
 80046da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	4413      	add	r3, r2
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b2c      	cmp	r3, #44	; 0x2c
 80046e6:	d104      	bne.n	80046f2 <Get_Char_p_i_d+0x14a>
			num_d_end = i-1 ;
 80046e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046ec:	3b01      	subs	r3, #1
 80046ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	for(uint8_t i=0 ; i<len ; i++){
 80046f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046f6:	3301      	adds	r3, #1
 80046f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80046fc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	429a      	cmp	r2, r3
 8004704:	d3d9      	bcc.n	80046ba <Get_Char_p_i_d+0x112>
		}
	}

	if ( num_p && num_p_end){
 8004706:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800470a:	2b00      	cmp	r3, #0
 800470c:	d02e      	beq.n	800476c <Get_Char_p_i_d+0x1c4>
 800470e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004712:	2b00      	cmp	r3, #0
 8004714:	d02a      	beq.n	800476c <Get_Char_p_i_d+0x1c4>
		for(uint8_t j=0 ; j<(num_p_end-num_p+1) ; j++){
 8004716:	2300      	movs	r3, #0
 8004718:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800471c:	e013      	b.n	8004746 <Get_Char_p_i_d+0x19e>
			temp_p[j] = str[num_p+j] ;
 800471e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004722:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004726:	4413      	add	r3, r2
 8004728:	461a      	mov	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	441a      	add	r2, r3
 800472e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004732:	7812      	ldrb	r2, [r2, #0]
 8004734:	3338      	adds	r3, #56	; 0x38
 8004736:	443b      	add	r3, r7
 8004738:	f803 2c18 	strb.w	r2, [r3, #-24]
		for(uint8_t j=0 ; j<(num_p_end-num_p+1) ; j++){
 800473c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004740:	3301      	adds	r3, #1
 8004742:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004746:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800474a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800474e:	1ad2      	subs	r2, r2, r3
 8004750:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004754:	429a      	cmp	r2, r3
 8004756:	dae2      	bge.n	800471e <Get_Char_p_i_d+0x176>
		}
		pid_Update[0]=Char_to_Float(temp_p);
 8004758:	f107 0320 	add.w	r3, r7, #32
 800475c:	4618      	mov	r0, r3
 800475e:	f7ff fe45 	bl	80043ec <Char_to_Float>
 8004762:	eef0 7a40 	vmov.f32	s15, s0
 8004766:	4b36      	ldr	r3, [pc, #216]	; (8004840 <Get_Char_p_i_d+0x298>)
 8004768:	edc3 7a00 	vstr	s15, [r3]
	}
	if ( num_i && num_i_end){
 800476c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004770:	2b00      	cmp	r3, #0
 8004772:	d02e      	beq.n	80047d2 <Get_Char_p_i_d+0x22a>
 8004774:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004778:	2b00      	cmp	r3, #0
 800477a:	d02a      	beq.n	80047d2 <Get_Char_p_i_d+0x22a>
		for(uint8_t j=0 ; j<(num_i_end-num_i+1) ; j++){
 800477c:	2300      	movs	r3, #0
 800477e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8004782:	e013      	b.n	80047ac <Get_Char_p_i_d+0x204>
			temp_i[j] = str[num_i+j] ;
 8004784:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004788:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800478c:	4413      	add	r3, r2
 800478e:	461a      	mov	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	441a      	add	r2, r3
 8004794:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004798:	7812      	ldrb	r2, [r2, #0]
 800479a:	3338      	adds	r3, #56	; 0x38
 800479c:	443b      	add	r3, r7
 800479e:	f803 2c24 	strb.w	r2, [r3, #-36]
		for(uint8_t j=0 ; j<(num_i_end-num_i+1) ; j++){
 80047a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80047a6:	3301      	adds	r3, #1
 80047a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80047ac:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80047b0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80047b4:	1ad2      	subs	r2, r2, r3
 80047b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80047ba:	429a      	cmp	r2, r3
 80047bc:	dae2      	bge.n	8004784 <Get_Char_p_i_d+0x1dc>
		}
		pid_Update[1]=Char_to_Float(temp_i);
 80047be:	f107 0314 	add.w	r3, r7, #20
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff fe12 	bl	80043ec <Char_to_Float>
 80047c8:	eef0 7a40 	vmov.f32	s15, s0
 80047cc:	4b1c      	ldr	r3, [pc, #112]	; (8004840 <Get_Char_p_i_d+0x298>)
 80047ce:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	if ( num_d && num_d_end){
 80047d2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d02e      	beq.n	8004838 <Get_Char_p_i_d+0x290>
 80047da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d02a      	beq.n	8004838 <Get_Char_p_i_d+0x290>
		for(uint8_t j=0 ; j<(num_d_end-num_d+1) ; j++){
 80047e2:	2300      	movs	r3, #0
 80047e4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80047e8:	e013      	b.n	8004812 <Get_Char_p_i_d+0x26a>
			temp_d[j] = str[num_d+j] ;
 80047ea:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80047ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80047f2:	4413      	add	r3, r2
 80047f4:	461a      	mov	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	441a      	add	r2, r3
 80047fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80047fe:	7812      	ldrb	r2, [r2, #0]
 8004800:	3338      	adds	r3, #56	; 0x38
 8004802:	443b      	add	r3, r7
 8004804:	f803 2c30 	strb.w	r2, [r3, #-48]
		for(uint8_t j=0 ; j<(num_d_end-num_d+1) ; j++){
 8004808:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800480c:	3301      	adds	r3, #1
 800480e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8004812:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8004816:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800481a:	1ad2      	subs	r2, r2, r3
 800481c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004820:	429a      	cmp	r2, r3
 8004822:	dae2      	bge.n	80047ea <Get_Char_p_i_d+0x242>
		}
		pid_Update[2]=Char_to_Float(temp_d);
 8004824:	f107 0308 	add.w	r3, r7, #8
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff fddf 	bl	80043ec <Char_to_Float>
 800482e:	eef0 7a40 	vmov.f32	s15, s0
 8004832:	4b03      	ldr	r3, [pc, #12]	; (8004840 <Get_Char_p_i_d+0x298>)
 8004834:	edc3 7a02 	vstr	s15, [r3, #8]
	}
}
 8004838:	bf00      	nop
 800483a:	3738      	adds	r7, #56	; 0x38
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	20000c9c 	.word	0x20000c9c

08004844 <StartmessageTask>:




void StartmessageTask(void *argument)
{
 8004844:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004848:	b088      	sub	sp, #32
 800484a:	af04      	add	r7, sp, #16
 800484c:	6078      	str	r0, [r7, #4]
	osDelay(20);
 800484e:	2014      	movs	r0, #20
 8004850:	f006 fb6a 	bl	800af28 <osDelay>
	uint8_t rx5_len = 0;
 8004854:	2300      	movs	r3, #0
 8004856:	73fb      	strb	r3, [r7, #15]

	printf("messageTask starts! \r\n");
 8004858:	482e      	ldr	r0, [pc, #184]	; (8004914 <StartmessageTask+0xd0>)
 800485a:	f00a f84f 	bl	800e8fc <puts>


	for(;;){
		osDelay(10);
 800485e:	200a      	movs	r0, #10
 8004860:	f006 fb62 	bl	800af28 <osDelay>

	    if(USART_RX_STA&0x8000)
 8004864:	4b2c      	ldr	r3, [pc, #176]	; (8004918 <StartmessageTask+0xd4>)
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	b21b      	sxth	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	daf7      	bge.n	800485e <StartmessageTask+0x1a>
		{
	    	rx5_len = USART_RX_STA&0x3fff;
 800486e:	4b2a      	ldr	r3, [pc, #168]	; (8004918 <StartmessageTask+0xd4>)
 8004870:	881b      	ldrh	r3, [r3, #0]
 8004872:	73fb      	strb	r3, [r7, #15]
	    	Get_Char_SetValue(USART5_RX_BUF,rx5_len);
 8004874:	7bfb      	ldrb	r3, [r7, #15]
 8004876:	4619      	mov	r1, r3
 8004878:	4828      	ldr	r0, [pc, #160]	; (800491c <StartmessageTask+0xd8>)
 800487a:	f7ff fe37 	bl	80044ec <Get_Char_SetValue>
	    	Get_Char_p_i_d(USART5_RX_BUF,rx5_len);
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	4619      	mov	r1, r3
 8004882:	4826      	ldr	r0, [pc, #152]	; (800491c <StartmessageTask+0xd8>)
 8004884:	f7ff fe90 	bl	80045a8 <Get_Char_p_i_d>
	    	printf("SetValue_Update: %.4f \r\n",SetValue_Update);
 8004888:	4b25      	ldr	r3, [pc, #148]	; (8004920 <StartmessageTask+0xdc>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4618      	mov	r0, r3
 800488e:	f7fb fe5b 	bl	8000548 <__aeabi_f2d>
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	4823      	ldr	r0, [pc, #140]	; (8004924 <StartmessageTask+0xe0>)
 8004898:	f009 ffaa 	bl	800e7f0 <iprintf>
	    	printf("pid_Update:  P=%.4f  I=%.4f  D=%.4f \r\n",pid_Update[0],pid_Update[1],pid_Update[2]);
 800489c:	4b22      	ldr	r3, [pc, #136]	; (8004928 <StartmessageTask+0xe4>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fb fe51 	bl	8000548 <__aeabi_f2d>
 80048a6:	4680      	mov	r8, r0
 80048a8:	4689      	mov	r9, r1
 80048aa:	4b1f      	ldr	r3, [pc, #124]	; (8004928 <StartmessageTask+0xe4>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fb fe4a 	bl	8000548 <__aeabi_f2d>
 80048b4:	4604      	mov	r4, r0
 80048b6:	460d      	mov	r5, r1
 80048b8:	4b1b      	ldr	r3, [pc, #108]	; (8004928 <StartmessageTask+0xe4>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fb fe43 	bl	8000548 <__aeabi_f2d>
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80048ca:	e9cd 4500 	strd	r4, r5, [sp]
 80048ce:	4642      	mov	r2, r8
 80048d0:	464b      	mov	r3, r9
 80048d2:	4816      	ldr	r0, [pc, #88]	; (800492c <StartmessageTask+0xe8>)
 80048d4:	f009 ff8c 	bl	800e7f0 <iprintf>
	    	PID_Clear(&pid1);
 80048d8:	4815      	ldr	r0, [pc, #84]	; (8004930 <StartmessageTask+0xec>)
 80048da:	f7ff fcc6 	bl	800426a <PID_Clear>
	    	PID_Init(&pid1,pid_Update[0],pid_Update[1],pid_Update[2],10000,10000);
 80048de:	4b12      	ldr	r3, [pc, #72]	; (8004928 <StartmessageTask+0xe4>)
 80048e0:	edd3 7a00 	vldr	s15, [r3]
 80048e4:	4b10      	ldr	r3, [pc, #64]	; (8004928 <StartmessageTask+0xe4>)
 80048e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80048ea:	4b0f      	ldr	r3, [pc, #60]	; (8004928 <StartmessageTask+0xe4>)
 80048ec:	edd3 6a02 	vldr	s13, [r3, #8]
 80048f0:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8004934 <StartmessageTask+0xf0>
 80048f4:	eddf 1a0f 	vldr	s3, [pc, #60]	; 8004934 <StartmessageTask+0xf0>
 80048f8:	eeb0 1a66 	vmov.f32	s2, s13
 80048fc:	eef0 0a47 	vmov.f32	s1, s14
 8004900:	eeb0 0a67 	vmov.f32	s0, s15
 8004904:	480a      	ldr	r0, [pc, #40]	; (8004930 <StartmessageTask+0xec>)
 8004906:	f7ff fc8d 	bl	8004224 <PID_Init>
	    	USART_RX_STA = 0;
 800490a:	4b03      	ldr	r3, [pc, #12]	; (8004918 <StartmessageTask+0xd4>)
 800490c:	2200      	movs	r2, #0
 800490e:	801a      	strh	r2, [r3, #0]
		osDelay(10);
 8004910:	e7a5      	b.n	800485e <StartmessageTask+0x1a>
 8004912:	bf00      	nop
 8004914:	08010720 	.word	0x08010720
 8004918:	2000079c 	.word	0x2000079c
 800491c:	20000738 	.word	0x20000738
 8004920:	20000c98 	.word	0x20000c98
 8004924:	08010738 	.word	0x08010738
 8004928:	20000c9c 	.word	0x20000c9c
 800492c:	08010754 	.word	0x08010754
 8004930:	20000c74 	.word	0x20000c74
 8004934:	461c4000 	.word	0x461c4000

08004938 <StartTask03>:

extern float SetValue_Update ;
extern float pid_Update[3];

void StartTask03(void *argument)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
	osDelay(10);
 8004940:	200a      	movs	r0, #10
 8004942:	f006 faf1 	bl	800af28 <osDelay>
	printf("myTask03 starts! \r\n");
 8004946:	4887      	ldr	r0, [pc, #540]	; (8004b64 <StartTask03+0x22c>)
 8004948:	f009 ffd8 	bl	800e8fc <puts>

	Motor_Data_Init();
 800494c:	f7ff f820 	bl	8003990 <Motor_Data_Init>
	osDelay(100);
 8004950:	2064      	movs	r0, #100	; 0x64
 8004952:	f006 fae9 	bl	800af28 <osDelay>
	if ( Init_SSCDANT250K_Pressure() ){
 8004956:	f7ff fbb5 	bl	80040c4 <Init_SSCDANT250K_Pressure>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d006      	beq.n	800496e <StartTask03+0x36>
		printf("I2C Initialization Completed! \r\n");
 8004960:	4881      	ldr	r0, [pc, #516]	; (8004b68 <StartTask03+0x230>)
 8004962:	f009 ffcb 	bl	800e8fc <puts>
		myTask03_Status = INITPASSSTATE;
 8004966:	4b81      	ldr	r3, [pc, #516]	; (8004b6c <StartTask03+0x234>)
 8004968:	2263      	movs	r2, #99	; 0x63
 800496a:	701a      	strb	r2, [r3, #0]
 800496c:	e002      	b.n	8004974 <StartTask03+0x3c>
	}
	else{
		myTask03_Status = INITFAILSTATE;
 800496e:	4b7f      	ldr	r3, [pc, #508]	; (8004b6c <StartTask03+0x234>)
 8004970:	2264      	movs	r2, #100	; 0x64
 8004972:	701a      	strb	r2, [r3, #0]
	}

	SetValue_Update = 82.5 ;// target
 8004974:	4b7e      	ldr	r3, [pc, #504]	; (8004b70 <StartTask03+0x238>)
 8004976:	4a7f      	ldr	r2, [pc, #508]	; (8004b74 <StartTask03+0x23c>)
 8004978:	601a      	str	r2, [r3, #0]
	pid_Update[0] = 80 ; 	// kp
 800497a:	4b7f      	ldr	r3, [pc, #508]	; (8004b78 <StartTask03+0x240>)
 800497c:	4a7f      	ldr	r2, [pc, #508]	; (8004b7c <StartTask03+0x244>)
 800497e:	601a      	str	r2, [r3, #0]
	pid_Update[1] = 0.3 ; 	// ki
 8004980:	4b7d      	ldr	r3, [pc, #500]	; (8004b78 <StartTask03+0x240>)
 8004982:	4a7f      	ldr	r2, [pc, #508]	; (8004b80 <StartTask03+0x248>)
 8004984:	605a      	str	r2, [r3, #4]
	pid_Update[2] = 20 ; 	// kd
 8004986:	4b7c      	ldr	r3, [pc, #496]	; (8004b78 <StartTask03+0x240>)
 8004988:	4a7e      	ldr	r2, [pc, #504]	; (8004b84 <StartTask03+0x24c>)
 800498a:	609a      	str	r2, [r3, #8]

	PID_Clear(&pid1);
 800498c:	487e      	ldr	r0, [pc, #504]	; (8004b88 <StartTask03+0x250>)
 800498e:	f7ff fc6c 	bl	800426a <PID_Clear>
	HAL_Delay(1);
 8004992:	2001      	movs	r0, #1
 8004994:	f000 f978 	bl	8004c88 <HAL_Delay>
	PID_Init(&pid1,pid_Update[0],pid_Update[1],pid_Update[2],10000,10000);
 8004998:	4b77      	ldr	r3, [pc, #476]	; (8004b78 <StartTask03+0x240>)
 800499a:	edd3 7a00 	vldr	s15, [r3]
 800499e:	4b76      	ldr	r3, [pc, #472]	; (8004b78 <StartTask03+0x240>)
 80049a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80049a4:	4b74      	ldr	r3, [pc, #464]	; (8004b78 <StartTask03+0x240>)
 80049a6:	edd3 6a02 	vldr	s13, [r3, #8]
 80049aa:	ed9f 2a78 	vldr	s4, [pc, #480]	; 8004b8c <StartTask03+0x254>
 80049ae:	eddf 1a77 	vldr	s3, [pc, #476]	; 8004b8c <StartTask03+0x254>
 80049b2:	eeb0 1a66 	vmov.f32	s2, s13
 80049b6:	eef0 0a47 	vmov.f32	s1, s14
 80049ba:	eeb0 0a67 	vmov.f32	s0, s15
 80049be:	4872      	ldr	r0, [pc, #456]	; (8004b88 <StartTask03+0x250>)
 80049c0:	f7ff fc30 	bl	8004224 <PID_Init>

	for(;;)
	{
		osDelay(1);
 80049c4:	2001      	movs	r0, #1
 80049c6:	f006 faaf 	bl	800af28 <osDelay>
		switch (myTask03_Status)
 80049ca:	4b68      	ldr	r3, [pc, #416]	; (8004b6c <StartTask03+0x234>)
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	2b64      	cmp	r3, #100	; 0x64
 80049d0:	f000 80bd 	beq.w	8004b4e <StartTask03+0x216>
 80049d4:	2b64      	cmp	r3, #100	; 0x64
 80049d6:	dcf5      	bgt.n	80049c4 <StartTask03+0x8c>
 80049d8:	2b63      	cmp	r3, #99	; 0x63
 80049da:	d00c      	beq.n	80049f6 <StartTask03+0xbe>
 80049dc:	2b63      	cmp	r3, #99	; 0x63
 80049de:	dcf1      	bgt.n	80049c4 <StartTask03+0x8c>
 80049e0:	2b0c      	cmp	r3, #12
 80049e2:	f000 80a6 	beq.w	8004b32 <StartTask03+0x1fa>
 80049e6:	2b0c      	cmp	r3, #12
 80049e8:	dcec      	bgt.n	80049c4 <StartTask03+0x8c>
 80049ea:	2b0a      	cmp	r3, #10
 80049ec:	d079      	beq.n	8004ae2 <StartTask03+0x1aa>
 80049ee:	2b0b      	cmp	r3, #11
 80049f0:	f000 8083 	beq.w	8004afa <StartTask03+0x1c2>
 80049f4:	e0b4      	b.n	8004b60 <StartTask03+0x228>
		{
		case INITPASSSTATE:
			osDelay(10);
 80049f6:	200a      	movs	r0, #10
 80049f8:	f006 fa96 	bl	800af28 <osDelay>
			if(KEY0_Pressed()){
 80049fc:	2140      	movs	r1, #64	; 0x40
 80049fe:	4864      	ldr	r0, [pc, #400]	; (8004b90 <StartTask03+0x258>)
 8004a00:	f001 fbac 	bl	800615c <HAL_GPIO_ReadPin>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d11d      	bne.n	8004a46 <StartTask03+0x10e>
				osDelay(20);
 8004a0a:	2014      	movs	r0, #20
 8004a0c:	f006 fa8c 	bl	800af28 <osDelay>
				if(KEY0_Pressed())
 8004a10:	2140      	movs	r1, #64	; 0x40
 8004a12:	485f      	ldr	r0, [pc, #380]	; (8004b90 <StartTask03+0x258>)
 8004a14:	f001 fba2 	bl	800615c <HAL_GPIO_ReadPin>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d113      	bne.n	8004a46 <StartTask03+0x10e>
				{
					osDelay(20);
 8004a1e:	2014      	movs	r0, #20
 8004a20:	f006 fa82 	bl	800af28 <osDelay>
					while (KEY0_Pressed()){osDelay(1);}
 8004a24:	e002      	b.n	8004a2c <StartTask03+0xf4>
 8004a26:	2001      	movs	r0, #1
 8004a28:	f006 fa7e 	bl	800af28 <osDelay>
 8004a2c:	2140      	movs	r1, #64	; 0x40
 8004a2e:	4858      	ldr	r0, [pc, #352]	; (8004b90 <StartTask03+0x258>)
 8004a30:	f001 fb94 	bl	800615c <HAL_GPIO_ReadPin>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f5      	beq.n	8004a26 <StartTask03+0xee>
					myTask03_Status = 10;
 8004a3a:	4b4c      	ldr	r3, [pc, #304]	; (8004b6c <StartTask03+0x234>)
 8004a3c:	220a      	movs	r2, #10
 8004a3e:	701a      	strb	r2, [r3, #0]
					printf("Key0 pressed!\r\n");
 8004a40:	4854      	ldr	r0, [pc, #336]	; (8004b94 <StartTask03+0x25c>)
 8004a42:	f009 ff5b 	bl	800e8fc <puts>
				}
			}
			if(KEY1_Pressed()){
 8004a46:	2180      	movs	r1, #128	; 0x80
 8004a48:	4851      	ldr	r0, [pc, #324]	; (8004b90 <StartTask03+0x258>)
 8004a4a:	f001 fb87 	bl	800615c <HAL_GPIO_ReadPin>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d11d      	bne.n	8004a90 <StartTask03+0x158>
				osDelay(20);
 8004a54:	2014      	movs	r0, #20
 8004a56:	f006 fa67 	bl	800af28 <osDelay>
				if(KEY1_Pressed())
 8004a5a:	2180      	movs	r1, #128	; 0x80
 8004a5c:	484c      	ldr	r0, [pc, #304]	; (8004b90 <StartTask03+0x258>)
 8004a5e:	f001 fb7d 	bl	800615c <HAL_GPIO_ReadPin>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d113      	bne.n	8004a90 <StartTask03+0x158>
				{
					osDelay(20);
 8004a68:	2014      	movs	r0, #20
 8004a6a:	f006 fa5d 	bl	800af28 <osDelay>
					while (KEY1_Pressed()){osDelay(1);}
 8004a6e:	e002      	b.n	8004a76 <StartTask03+0x13e>
 8004a70:	2001      	movs	r0, #1
 8004a72:	f006 fa59 	bl	800af28 <osDelay>
 8004a76:	2180      	movs	r1, #128	; 0x80
 8004a78:	4845      	ldr	r0, [pc, #276]	; (8004b90 <StartTask03+0x258>)
 8004a7a:	f001 fb6f 	bl	800615c <HAL_GPIO_ReadPin>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0f5      	beq.n	8004a70 <StartTask03+0x138>
					myTask03_Status = 20;
 8004a84:	4b39      	ldr	r3, [pc, #228]	; (8004b6c <StartTask03+0x234>)
 8004a86:	2214      	movs	r2, #20
 8004a88:	701a      	strb	r2, [r3, #0]
					printf("Key1 pressed!\r\n");
 8004a8a:	4843      	ldr	r0, [pc, #268]	; (8004b98 <StartTask03+0x260>)
 8004a8c:	f009 ff36 	bl	800e8fc <puts>
				}
			}
			if(KEY2_Pressed()){
 8004a90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a94:	483e      	ldr	r0, [pc, #248]	; (8004b90 <StartTask03+0x258>)
 8004a96:	f001 fb61 	bl	800615c <HAL_GPIO_ReadPin>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d15e      	bne.n	8004b5e <StartTask03+0x226>
				osDelay(20);
 8004aa0:	2014      	movs	r0, #20
 8004aa2:	f006 fa41 	bl	800af28 <osDelay>
				if(KEY2_Pressed())
 8004aa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004aaa:	4839      	ldr	r0, [pc, #228]	; (8004b90 <StartTask03+0x258>)
 8004aac:	f001 fb56 	bl	800615c <HAL_GPIO_ReadPin>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d153      	bne.n	8004b5e <StartTask03+0x226>
				{
					osDelay(20);
 8004ab6:	2014      	movs	r0, #20
 8004ab8:	f006 fa36 	bl	800af28 <osDelay>
					while (KEY2_Pressed()){osDelay(1);}
 8004abc:	e002      	b.n	8004ac4 <StartTask03+0x18c>
 8004abe:	2001      	movs	r0, #1
 8004ac0:	f006 fa32 	bl	800af28 <osDelay>
 8004ac4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ac8:	4831      	ldr	r0, [pc, #196]	; (8004b90 <StartTask03+0x258>)
 8004aca:	f001 fb47 	bl	800615c <HAL_GPIO_ReadPin>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d0f4      	beq.n	8004abe <StartTask03+0x186>
					myTask03_Status = 30;
 8004ad4:	4b25      	ldr	r3, [pc, #148]	; (8004b6c <StartTask03+0x234>)
 8004ad6:	221e      	movs	r2, #30
 8004ad8:	701a      	strb	r2, [r3, #0]
					printf("Key2 pressed!\r\n");
 8004ada:	4830      	ldr	r0, [pc, #192]	; (8004b9c <StartTask03+0x264>)
 8004adc:	f009 ff0e 	bl	800e8fc <puts>
				}
			}
			break;
 8004ae0:	e03d      	b.n	8004b5e <StartTask03+0x226>

		case 10:
			Pressure_Data_Float = Read_Pressure_Average_ntimes(3) ;
 8004ae2:	2003      	movs	r0, #3
 8004ae4:	f7ff fb14 	bl	8004110 <Read_Pressure_Average_ntimes>
 8004ae8:	eef0 7a40 	vmov.f32	s15, s0
 8004aec:	4b2c      	ldr	r3, [pc, #176]	; (8004ba0 <StartTask03+0x268>)
 8004aee:	edc3 7a00 	vstr	s15, [r3]
			myTask03_Status = 11;
 8004af2:	4b1e      	ldr	r3, [pc, #120]	; (8004b6c <StartTask03+0x234>)
 8004af4:	220b      	movs	r2, #11
 8004af6:	701a      	strb	r2, [r3, #0]
		break;
 8004af8:	e032      	b.n	8004b60 <StartTask03+0x228>

		case 11:
			PID_SingleCalc(&pid1, SetValue_Update, Pressure_Data_Float);
 8004afa:	4b1d      	ldr	r3, [pc, #116]	; (8004b70 <StartTask03+0x238>)
 8004afc:	edd3 7a00 	vldr	s15, [r3]
 8004b00:	4b27      	ldr	r3, [pc, #156]	; (8004ba0 <StartTask03+0x268>)
 8004b02:	ed93 7a00 	vldr	s14, [r3]
 8004b06:	eef0 0a47 	vmov.f32	s1, s14
 8004b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8004b0e:	481e      	ldr	r0, [pc, #120]	; (8004b88 <StartTask03+0x250>)
 8004b10:	f7ff fbc5 	bl	800429e <PID_SingleCalc>
			DC_Motor_ON(&Motor[8],'A',pid1.output);
 8004b14:	4b1c      	ldr	r3, [pc, #112]	; (8004b88 <StartTask03+0x250>)
 8004b16:	edd3 7a07 	vldr	s15, [r3, #28]
 8004b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b1e:	ee17 2a90 	vmov	r2, s15
 8004b22:	2141      	movs	r1, #65	; 0x41
 8004b24:	481f      	ldr	r0, [pc, #124]	; (8004ba4 <StartTask03+0x26c>)
 8004b26:	f7ff f9f3 	bl	8003f10 <DC_Motor_ON>
			myTask03_Status = 12;
 8004b2a:	4b10      	ldr	r3, [pc, #64]	; (8004b6c <StartTask03+0x234>)
 8004b2c:	220c      	movs	r2, #12
 8004b2e:	701a      	strb	r2, [r3, #0]
		break;
 8004b30:	e016      	b.n	8004b60 <StartTask03+0x228>

		case 12:
			//printf("%.2f,%f\r\n",Pressure_Data_Float,pid1.output);
			printf("%.2f\r\n",Pressure_Data_Float);
 8004b32:	4b1b      	ldr	r3, [pc, #108]	; (8004ba0 <StartTask03+0x268>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fb fd06 	bl	8000548 <__aeabi_f2d>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	460b      	mov	r3, r1
 8004b40:	4819      	ldr	r0, [pc, #100]	; (8004ba8 <StartTask03+0x270>)
 8004b42:	f009 fe55 	bl	800e7f0 <iprintf>
			myTask03_Status = 10;
 8004b46:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <StartTask03+0x234>)
 8004b48:	220a      	movs	r2, #10
 8004b4a:	701a      	strb	r2, [r3, #0]
		break;
 8004b4c:	e008      	b.n	8004b60 <StartTask03+0x228>


		case INITFAILSTATE:
			printf("[WRONG]IIC Initialization FAILED!Please Check!\r\n");
 8004b4e:	4817      	ldr	r0, [pc, #92]	; (8004bac <StartTask03+0x274>)
 8004b50:	f009 fed4 	bl	800e8fc <puts>
			osDelay(10000);
 8004b54:	f242 7010 	movw	r0, #10000	; 0x2710
 8004b58:	f006 f9e6 	bl	800af28 <osDelay>
			break;
 8004b5c:	e000      	b.n	8004b60 <StartTask03+0x228>
			break;
 8004b5e:	bf00      	nop
		osDelay(1);
 8004b60:	e730      	b.n	80049c4 <StartTask03+0x8c>
 8004b62:	bf00      	nop
 8004b64:	0801077c 	.word	0x0801077c
 8004b68:	08010790 	.word	0x08010790
 8004b6c:	20000ca8 	.word	0x20000ca8
 8004b70:	20000c98 	.word	0x20000c98
 8004b74:	42a50000 	.word	0x42a50000
 8004b78:	20000c9c 	.word	0x20000c9c
 8004b7c:	42a00000 	.word	0x42a00000
 8004b80:	3e99999a 	.word	0x3e99999a
 8004b84:	41a00000 	.word	0x41a00000
 8004b88:	20000c74 	.word	0x20000c74
 8004b8c:	461c4000 	.word	0x461c4000
 8004b90:	40021800 	.word	0x40021800
 8004b94:	080107b0 	.word	0x080107b0
 8004b98:	080107c0 	.word	0x080107c0
 8004b9c:	080107d0 	.word	0x080107d0
 8004ba0:	20000c70 	.word	0x20000c70
 8004ba4:	20000bb0 	.word	0x20000bb0
 8004ba8:	080107e0 	.word	0x080107e0
 8004bac:	080107e8 	.word	0x080107e8

08004bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004be8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004bb4:	480d      	ldr	r0, [pc, #52]	; (8004bec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004bb6:	490e      	ldr	r1, [pc, #56]	; (8004bf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004bb8:	4a0e      	ldr	r2, [pc, #56]	; (8004bf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004bbc:	e002      	b.n	8004bc4 <LoopCopyDataInit>

08004bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bc2:	3304      	adds	r3, #4

08004bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004bc8:	d3f9      	bcc.n	8004bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004bca:	4a0b      	ldr	r2, [pc, #44]	; (8004bf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004bcc:	4c0b      	ldr	r4, [pc, #44]	; (8004bfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8004bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004bd0:	e001      	b.n	8004bd6 <LoopFillZerobss>

08004bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004bd4:	3204      	adds	r2, #4

08004bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bd8:	d3fb      	bcc.n	8004bd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004bda:	f7fe f887 	bl	8002cec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004bde:	f008 ff71 	bl	800dac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004be2:	f7fc ff69 	bl	8001ab8 <main>
  bx  lr    
 8004be6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004be8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004bf0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8004bf4:	08010ce0 	.word	0x08010ce0
  ldr r2, =_sbss
 8004bf8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8004bfc:	200056d0 	.word	0x200056d0

08004c00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c00:	e7fe      	b.n	8004c00 <ADC_IRQHandler>
	...

08004c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c08:	4b0e      	ldr	r3, [pc, #56]	; (8004c44 <HAL_Init+0x40>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a0d      	ldr	r2, [pc, #52]	; (8004c44 <HAL_Init+0x40>)
 8004c0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c14:	4b0b      	ldr	r3, [pc, #44]	; (8004c44 <HAL_Init+0x40>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a0a      	ldr	r2, [pc, #40]	; (8004c44 <HAL_Init+0x40>)
 8004c1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c20:	4b08      	ldr	r3, [pc, #32]	; (8004c44 <HAL_Init+0x40>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a07      	ldr	r2, [pc, #28]	; (8004c44 <HAL_Init+0x40>)
 8004c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c2c:	2003      	movs	r0, #3
 8004c2e:	f000 fc5a 	bl	80054e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c32:	2005      	movs	r0, #5
 8004c34:	f7fd fe2c 	bl	8002890 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c38:	f7fd fdfe 	bl	8002838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	40023c00 	.word	0x40023c00

08004c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c4c:	4b06      	ldr	r3, [pc, #24]	; (8004c68 <HAL_IncTick+0x20>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	461a      	mov	r2, r3
 8004c52:	4b06      	ldr	r3, [pc, #24]	; (8004c6c <HAL_IncTick+0x24>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4413      	add	r3, r2
 8004c58:	4a04      	ldr	r2, [pc, #16]	; (8004c6c <HAL_IncTick+0x24>)
 8004c5a:	6013      	str	r3, [r2, #0]
}
 8004c5c:	bf00      	nop
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	20000010 	.word	0x20000010
 8004c6c:	20000cac 	.word	0x20000cac

08004c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  return uwTick;
 8004c74:	4b03      	ldr	r3, [pc, #12]	; (8004c84 <HAL_GetTick+0x14>)
 8004c76:	681b      	ldr	r3, [r3, #0]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	20000cac 	.word	0x20000cac

08004c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c90:	f7ff ffee 	bl	8004c70 <HAL_GetTick>
 8004c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca0:	d005      	beq.n	8004cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ca2:	4b0a      	ldr	r3, [pc, #40]	; (8004ccc <HAL_Delay+0x44>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4413      	add	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004cae:	bf00      	nop
 8004cb0:	f7ff ffde 	bl	8004c70 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d8f7      	bhi.n	8004cb0 <HAL_Delay+0x28>
  {
  }
}
 8004cc0:	bf00      	nop
 8004cc2:	bf00      	nop
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20000010 	.word	0x20000010

08004cd0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e033      	b.n	8004d4e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d109      	bne.n	8004d02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fc f9d0 	bl	8001094 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	f003 0310 	and.w	r3, r3, #16
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d118      	bne.n	8004d40 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004d16:	f023 0302 	bic.w	r3, r3, #2
 8004d1a:	f043 0202 	orr.w	r2, r3, #2
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f93a 	bl	8004f9c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	f023 0303 	bic.w	r3, r3, #3
 8004d36:	f043 0201 	orr.w	r2, r3, #1
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	641a      	str	r2, [r3, #64]	; 0x40
 8004d3e:	e001      	b.n	8004d44 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
	...

08004d58 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d101      	bne.n	8004d74 <HAL_ADC_ConfigChannel+0x1c>
 8004d70:	2302      	movs	r3, #2
 8004d72:	e105      	b.n	8004f80 <HAL_ADC_ConfigChannel+0x228>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b09      	cmp	r3, #9
 8004d82:	d925      	bls.n	8004dd0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68d9      	ldr	r1, [r3, #12]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	461a      	mov	r2, r3
 8004d92:	4613      	mov	r3, r2
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	4413      	add	r3, r2
 8004d98:	3b1e      	subs	r3, #30
 8004d9a:	2207      	movs	r2, #7
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	43da      	mvns	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	400a      	ands	r2, r1
 8004da8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68d9      	ldr	r1, [r3, #12]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	4618      	mov	r0, r3
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	4403      	add	r3, r0
 8004dc2:	3b1e      	subs	r3, #30
 8004dc4:	409a      	lsls	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	60da      	str	r2, [r3, #12]
 8004dce:	e022      	b.n	8004e16 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6919      	ldr	r1, [r3, #16]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	461a      	mov	r2, r3
 8004dde:	4613      	mov	r3, r2
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	4413      	add	r3, r2
 8004de4:	2207      	movs	r2, #7
 8004de6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dea:	43da      	mvns	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	400a      	ands	r2, r1
 8004df2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6919      	ldr	r1, [r3, #16]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	689a      	ldr	r2, [r3, #8]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	4618      	mov	r0, r3
 8004e06:	4603      	mov	r3, r0
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	4403      	add	r3, r0
 8004e0c:	409a      	lsls	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2b06      	cmp	r3, #6
 8004e1c:	d824      	bhi.n	8004e68 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	3b05      	subs	r3, #5
 8004e30:	221f      	movs	r2, #31
 8004e32:	fa02 f303 	lsl.w	r3, r2, r3
 8004e36:	43da      	mvns	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	400a      	ands	r2, r1
 8004e3e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	4613      	mov	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	3b05      	subs	r3, #5
 8004e5a:	fa00 f203 	lsl.w	r2, r0, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	635a      	str	r2, [r3, #52]	; 0x34
 8004e66:	e04c      	b.n	8004f02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	2b0c      	cmp	r3, #12
 8004e6e:	d824      	bhi.n	8004eba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4413      	add	r3, r2
 8004e80:	3b23      	subs	r3, #35	; 0x23
 8004e82:	221f      	movs	r2, #31
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	43da      	mvns	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	400a      	ands	r2, r1
 8004e90:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	3b23      	subs	r3, #35	; 0x23
 8004eac:	fa00 f203 	lsl.w	r2, r0, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	631a      	str	r2, [r3, #48]	; 0x30
 8004eb8:	e023      	b.n	8004f02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	3b41      	subs	r3, #65	; 0x41
 8004ecc:	221f      	movs	r2, #31
 8004ece:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed2:	43da      	mvns	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	400a      	ands	r2, r1
 8004eda:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	4618      	mov	r0, r3
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	3b41      	subs	r3, #65	; 0x41
 8004ef6:	fa00 f203 	lsl.w	r2, r0, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f02:	4b22      	ldr	r3, [pc, #136]	; (8004f8c <HAL_ADC_ConfigChannel+0x234>)
 8004f04:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a21      	ldr	r2, [pc, #132]	; (8004f90 <HAL_ADC_ConfigChannel+0x238>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d109      	bne.n	8004f24 <HAL_ADC_ConfigChannel+0x1cc>
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b12      	cmp	r3, #18
 8004f16:	d105      	bne.n	8004f24 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a19      	ldr	r2, [pc, #100]	; (8004f90 <HAL_ADC_ConfigChannel+0x238>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d123      	bne.n	8004f76 <HAL_ADC_ConfigChannel+0x21e>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b10      	cmp	r3, #16
 8004f34:	d003      	beq.n	8004f3e <HAL_ADC_ConfigChannel+0x1e6>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b11      	cmp	r3, #17
 8004f3c:	d11b      	bne.n	8004f76 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2b10      	cmp	r3, #16
 8004f50:	d111      	bne.n	8004f76 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f52:	4b10      	ldr	r3, [pc, #64]	; (8004f94 <HAL_ADC_ConfigChannel+0x23c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a10      	ldr	r2, [pc, #64]	; (8004f98 <HAL_ADC_ConfigChannel+0x240>)
 8004f58:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5c:	0c9a      	lsrs	r2, r3, #18
 8004f5e:	4613      	mov	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004f68:	e002      	b.n	8004f70 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f9      	bne.n	8004f6a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	40012300 	.word	0x40012300
 8004f90:	40012000 	.word	0x40012000
 8004f94:	20000008 	.word	0x20000008
 8004f98:	431bde83 	.word	0x431bde83

08004f9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004fa4:	4b79      	ldr	r3, [pc, #484]	; (800518c <ADC_Init+0x1f0>)
 8004fa6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6859      	ldr	r1, [r3, #4]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	021a      	lsls	r2, r3, #8
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004ff4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6859      	ldr	r1, [r3, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689a      	ldr	r2, [r3, #8]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005016:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6899      	ldr	r1, [r3, #8]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502e:	4a58      	ldr	r2, [pc, #352]	; (8005190 <ADC_Init+0x1f4>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d022      	beq.n	800507a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005042:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6899      	ldr	r1, [r3, #8]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005064:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6899      	ldr	r1, [r3, #8]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	609a      	str	r2, [r3, #8]
 8005078:	e00f      	b.n	800509a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005088:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005098:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0202 	bic.w	r2, r2, #2
 80050a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6899      	ldr	r1, [r3, #8]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	7e1b      	ldrb	r3, [r3, #24]
 80050b4:	005a      	lsls	r2, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d01b      	beq.n	8005100 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685a      	ldr	r2, [r3, #4]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80050e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6859      	ldr	r1, [r3, #4]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	3b01      	subs	r3, #1
 80050f4:	035a      	lsls	r2, r3, #13
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	605a      	str	r2, [r3, #4]
 80050fe:	e007      	b.n	8005110 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800510e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800511e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	3b01      	subs	r3, #1
 800512c:	051a      	lsls	r2, r3, #20
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005144:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6899      	ldr	r1, [r3, #8]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005152:	025a      	lsls	r2, r3, #9
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	430a      	orrs	r2, r1
 800515a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689a      	ldr	r2, [r3, #8]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800516a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6899      	ldr	r1, [r3, #8]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	029a      	lsls	r2, r3, #10
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	609a      	str	r2, [r3, #8]
}
 8005180:	bf00      	nop
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	40012300 	.word	0x40012300
 8005190:	0f000001 	.word	0x0f000001

08005194 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e0ed      	b.n	8005382 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d102      	bne.n	80051b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7fc f816 	bl	80011e4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0201 	orr.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051c8:	f7ff fd52 	bl	8004c70 <HAL_GetTick>
 80051cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80051ce:	e012      	b.n	80051f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80051d0:	f7ff fd4e 	bl	8004c70 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b0a      	cmp	r3, #10
 80051dc:	d90b      	bls.n	80051f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2205      	movs	r2, #5
 80051ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e0c5      	b.n	8005382 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0e5      	beq.n	80051d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0202 	bic.w	r2, r2, #2
 8005212:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005214:	f7ff fd2c 	bl	8004c70 <HAL_GetTick>
 8005218:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800521a:	e012      	b.n	8005242 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800521c:	f7ff fd28 	bl	8004c70 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b0a      	cmp	r3, #10
 8005228:	d90b      	bls.n	8005242 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2205      	movs	r2, #5
 800523a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e09f      	b.n	8005382 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1e5      	bne.n	800521c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	7e1b      	ldrb	r3, [r3, #24]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d108      	bne.n	800526a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	e007      	b.n	800527a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005278:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	7e5b      	ldrb	r3, [r3, #25]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d108      	bne.n	8005294 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	e007      	b.n	80052a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	7e9b      	ldrb	r3, [r3, #26]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d108      	bne.n	80052be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0220 	orr.w	r2, r2, #32
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	e007      	b.n	80052ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 0220 	bic.w	r2, r2, #32
 80052cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	7edb      	ldrb	r3, [r3, #27]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d108      	bne.n	80052e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0210 	bic.w	r2, r2, #16
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	e007      	b.n	80052f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0210 	orr.w	r2, r2, #16
 80052f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	7f1b      	ldrb	r3, [r3, #28]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d108      	bne.n	8005312 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0208 	orr.w	r2, r2, #8
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	e007      	b.n	8005322 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0208 	bic.w	r2, r2, #8
 8005320:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	7f5b      	ldrb	r3, [r3, #29]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d108      	bne.n	800533c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f042 0204 	orr.w	r2, r2, #4
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	e007      	b.n	800534c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f022 0204 	bic.w	r2, r2, #4
 800534a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	431a      	orrs	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	431a      	orrs	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	ea42 0103 	orr.w	r1, r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	1e5a      	subs	r2, r3, #1
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
	...

0800538c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f003 0307 	and.w	r3, r3, #7
 800539a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800539c:	4b0c      	ldr	r3, [pc, #48]	; (80053d0 <__NVIC_SetPriorityGrouping+0x44>)
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053a8:	4013      	ands	r3, r2
 80053aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053be:	4a04      	ldr	r2, [pc, #16]	; (80053d0 <__NVIC_SetPriorityGrouping+0x44>)
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	60d3      	str	r3, [r2, #12]
}
 80053c4:	bf00      	nop
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	e000ed00 	.word	0xe000ed00

080053d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053d8:	4b04      	ldr	r3, [pc, #16]	; (80053ec <__NVIC_GetPriorityGrouping+0x18>)
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	0a1b      	lsrs	r3, r3, #8
 80053de:	f003 0307 	and.w	r3, r3, #7
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	e000ed00 	.word	0xe000ed00

080053f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	4603      	mov	r3, r0
 80053f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	db0b      	blt.n	800541a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005402:	79fb      	ldrb	r3, [r7, #7]
 8005404:	f003 021f 	and.w	r2, r3, #31
 8005408:	4907      	ldr	r1, [pc, #28]	; (8005428 <__NVIC_EnableIRQ+0x38>)
 800540a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800540e:	095b      	lsrs	r3, r3, #5
 8005410:	2001      	movs	r0, #1
 8005412:	fa00 f202 	lsl.w	r2, r0, r2
 8005416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800541a:	bf00      	nop
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	e000e100 	.word	0xe000e100

0800542c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	4603      	mov	r3, r0
 8005434:	6039      	str	r1, [r7, #0]
 8005436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800543c:	2b00      	cmp	r3, #0
 800543e:	db0a      	blt.n	8005456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	b2da      	uxtb	r2, r3
 8005444:	490c      	ldr	r1, [pc, #48]	; (8005478 <__NVIC_SetPriority+0x4c>)
 8005446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800544a:	0112      	lsls	r2, r2, #4
 800544c:	b2d2      	uxtb	r2, r2
 800544e:	440b      	add	r3, r1
 8005450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005454:	e00a      	b.n	800546c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	b2da      	uxtb	r2, r3
 800545a:	4908      	ldr	r1, [pc, #32]	; (800547c <__NVIC_SetPriority+0x50>)
 800545c:	79fb      	ldrb	r3, [r7, #7]
 800545e:	f003 030f 	and.w	r3, r3, #15
 8005462:	3b04      	subs	r3, #4
 8005464:	0112      	lsls	r2, r2, #4
 8005466:	b2d2      	uxtb	r2, r2
 8005468:	440b      	add	r3, r1
 800546a:	761a      	strb	r2, [r3, #24]
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	e000e100 	.word	0xe000e100
 800547c:	e000ed00 	.word	0xe000ed00

08005480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005480:	b480      	push	{r7}
 8005482:	b089      	sub	sp, #36	; 0x24
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f003 0307 	and.w	r3, r3, #7
 8005492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	f1c3 0307 	rsb	r3, r3, #7
 800549a:	2b04      	cmp	r3, #4
 800549c:	bf28      	it	cs
 800549e:	2304      	movcs	r3, #4
 80054a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	3304      	adds	r3, #4
 80054a6:	2b06      	cmp	r3, #6
 80054a8:	d902      	bls.n	80054b0 <NVIC_EncodePriority+0x30>
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	3b03      	subs	r3, #3
 80054ae:	e000      	b.n	80054b2 <NVIC_EncodePriority+0x32>
 80054b0:	2300      	movs	r3, #0
 80054b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054b4:	f04f 32ff 	mov.w	r2, #4294967295
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	fa02 f303 	lsl.w	r3, r2, r3
 80054be:	43da      	mvns	r2, r3
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	401a      	ands	r2, r3
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054c8:	f04f 31ff 	mov.w	r1, #4294967295
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	fa01 f303 	lsl.w	r3, r1, r3
 80054d2:	43d9      	mvns	r1, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054d8:	4313      	orrs	r3, r2
         );
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3724      	adds	r7, #36	; 0x24
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b082      	sub	sp, #8
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7ff ff4c 	bl	800538c <__NVIC_SetPriorityGrouping>
}
 80054f4:	bf00      	nop
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	4603      	mov	r3, r0
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
 8005508:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800550a:	2300      	movs	r3, #0
 800550c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800550e:	f7ff ff61 	bl	80053d4 <__NVIC_GetPriorityGrouping>
 8005512:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	68b9      	ldr	r1, [r7, #8]
 8005518:	6978      	ldr	r0, [r7, #20]
 800551a:	f7ff ffb1 	bl	8005480 <NVIC_EncodePriority>
 800551e:	4602      	mov	r2, r0
 8005520:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005524:	4611      	mov	r1, r2
 8005526:	4618      	mov	r0, r3
 8005528:	f7ff ff80 	bl	800542c <__NVIC_SetPriority>
}
 800552c:	bf00      	nop
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	4603      	mov	r3, r0
 800553c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800553e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005542:	4618      	mov	r0, r3
 8005544:	f7ff ff54 	bl	80053f0 <__NVIC_EnableIRQ>
}
 8005548:	bf00      	nop
 800554a:	3708      	adds	r7, #8
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e014      	b.n	800558c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	791b      	ldrb	r3, [r3, #4]
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b00      	cmp	r3, #0
 800556a:	d105      	bne.n	8005578 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fb fea8 	bl	80012c8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055aa:	d120      	bne.n	80055ee <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ba:	d118      	bne.n	80055ee <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2204      	movs	r2, #4
 80055c0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	f043 0201 	orr.w	r2, r3, #1
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80055d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055e6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f82d 	bl	8005648 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055fc:	d120      	bne.n	8005640 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005604:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005608:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800560c:	d118      	bne.n	8005640 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2204      	movs	r2, #4
 8005612:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	f043 0202 	orr.w	r2, r3, #2
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005628:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005638:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f85d 	bl	80056fa <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8005640:	bf00      	nop
 8005642:	3708      	adds	r7, #8
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	795b      	ldrb	r3, [r3, #5]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_DAC_ConfigChannel+0x18>
 8005670:	2302      	movs	r3, #2
 8005672:	e03c      	b.n	80056ee <HAL_DAC_ConfigChannel+0x92>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2201      	movs	r2, #1
 8005678:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2202      	movs	r2, #2
 800567e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f003 0310 	and.w	r3, r3, #16
 800568e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005692:	fa02 f303 	lsl.w	r3, r2, r3
 8005696:	43db      	mvns	r3, r3
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	4013      	ands	r3, r2
 800569c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f003 0310 	and.w	r3, r3, #16
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	fa02 f303 	lsl.w	r3, r2, r3
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6819      	ldr	r1, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f003 0310 	and.w	r3, r3, #16
 80056d0:	22c0      	movs	r2, #192	; 0xc0
 80056d2:	fa02 f303 	lsl.w	r3, r2, r3
 80056d6:	43da      	mvns	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	400a      	ands	r2, r1
 80056de:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2201      	movs	r2, #1
 80056e4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	371c      	adds	r7, #28
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b083      	sub	sp, #12
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005702:	bf00      	nop
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
	...

08005710 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800571c:	f7ff faa8 	bl	8004c70 <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e099      	b.n	8005860 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 0201 	bic.w	r2, r2, #1
 800574a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800574c:	e00f      	b.n	800576e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800574e:	f7ff fa8f 	bl	8004c70 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	2b05      	cmp	r3, #5
 800575a:	d908      	bls.n	800576e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2220      	movs	r2, #32
 8005760:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2203      	movs	r2, #3
 8005766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e078      	b.n	8005860 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1e8      	bne.n	800574e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	4b38      	ldr	r3, [pc, #224]	; (8005868 <HAL_DMA_Init+0x158>)
 8005788:	4013      	ands	r3, r2
 800578a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800579a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	4313      	orrs	r3, r2
 80057be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c4:	2b04      	cmp	r3, #4
 80057c6:	d107      	bne.n	80057d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d0:	4313      	orrs	r3, r2
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f023 0307 	bic.w	r3, r3, #7
 80057ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	2b04      	cmp	r3, #4
 8005800:	d117      	bne.n	8005832 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4313      	orrs	r3, r2
 800580a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00e      	beq.n	8005832 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 fa89 	bl	8005d2c <DMA_CheckFifoParam>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d008      	beq.n	8005832 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2240      	movs	r2, #64	; 0x40
 8005824:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800582e:	2301      	movs	r3, #1
 8005830:	e016      	b.n	8005860 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 fa40 	bl	8005cc0 <DMA_CalcBaseAndBitshift>
 8005840:	4603      	mov	r3, r0
 8005842:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005848:	223f      	movs	r2, #63	; 0x3f
 800584a:	409a      	lsls	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	f010803f 	.word	0xf010803f

0800586c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005878:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800587a:	f7ff f9f9 	bl	8004c70 <HAL_GetTick>
 800587e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d008      	beq.n	800589e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2280      	movs	r2, #128	; 0x80
 8005890:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e052      	b.n	8005944 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0216 	bic.w	r2, r2, #22
 80058ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	695a      	ldr	r2, [r3, #20]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d103      	bne.n	80058ce <HAL_DMA_Abort+0x62>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d007      	beq.n	80058de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0208 	bic.w	r2, r2, #8
 80058dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 0201 	bic.w	r2, r2, #1
 80058ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058ee:	e013      	b.n	8005918 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058f0:	f7ff f9be 	bl	8004c70 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b05      	cmp	r3, #5
 80058fc:	d90c      	bls.n	8005918 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2220      	movs	r2, #32
 8005902:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2203      	movs	r2, #3
 8005908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e015      	b.n	8005944 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e4      	bne.n	80058f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800592a:	223f      	movs	r2, #63	; 0x3f
 800592c:	409a      	lsls	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d004      	beq.n	800596a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2280      	movs	r2, #128	; 0x80
 8005964:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e00c      	b.n	8005984 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2205      	movs	r2, #5
 800596e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0201 	bic.w	r2, r2, #1
 8005980:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005998:	2300      	movs	r3, #0
 800599a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800599c:	4b8e      	ldr	r3, [pc, #568]	; (8005bd8 <HAL_DMA_IRQHandler+0x248>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a8e      	ldr	r2, [pc, #568]	; (8005bdc <HAL_DMA_IRQHandler+0x24c>)
 80059a2:	fba2 2303 	umull	r2, r3, r2, r3
 80059a6:	0a9b      	lsrs	r3, r3, #10
 80059a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ba:	2208      	movs	r2, #8
 80059bc:	409a      	lsls	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4013      	ands	r3, r2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d01a      	beq.n	80059fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d013      	beq.n	80059fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0204 	bic.w	r2, r2, #4
 80059e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059e8:	2208      	movs	r2, #8
 80059ea:	409a      	lsls	r2, r3
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f4:	f043 0201 	orr.w	r2, r3, #1
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a00:	2201      	movs	r2, #1
 8005a02:	409a      	lsls	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4013      	ands	r3, r2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d012      	beq.n	8005a32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00b      	beq.n	8005a32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a1e:	2201      	movs	r2, #1
 8005a20:	409a      	lsls	r2, r3
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2a:	f043 0202 	orr.w	r2, r3, #2
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a36:	2204      	movs	r2, #4
 8005a38:	409a      	lsls	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d012      	beq.n	8005a68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00b      	beq.n	8005a68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a54:	2204      	movs	r2, #4
 8005a56:	409a      	lsls	r2, r3
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a60:	f043 0204 	orr.w	r2, r3, #4
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a6c:	2210      	movs	r2, #16
 8005a6e:	409a      	lsls	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4013      	ands	r3, r2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d043      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0308 	and.w	r3, r3, #8
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d03c      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a8a:	2210      	movs	r2, #16
 8005a8c:	409a      	lsls	r2, r3
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d018      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d108      	bne.n	8005ac0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d024      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	4798      	blx	r3
 8005abe:	e01f      	b.n	8005b00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d01b      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	4798      	blx	r3
 8005ad0:	e016      	b.n	8005b00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d107      	bne.n	8005af0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0208 	bic.w	r2, r2, #8
 8005aee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b04:	2220      	movs	r2, #32
 8005b06:	409a      	lsls	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 808f 	beq.w	8005c30 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0310 	and.w	r3, r3, #16
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 8087 	beq.w	8005c30 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b26:	2220      	movs	r2, #32
 8005b28:	409a      	lsls	r2, r3
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b05      	cmp	r3, #5
 8005b38:	d136      	bne.n	8005ba8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 0216 	bic.w	r2, r2, #22
 8005b48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	695a      	ldr	r2, [r3, #20]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d103      	bne.n	8005b6a <HAL_DMA_IRQHandler+0x1da>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d007      	beq.n	8005b7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0208 	bic.w	r2, r2, #8
 8005b78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b7e:	223f      	movs	r2, #63	; 0x3f
 8005b80:	409a      	lsls	r2, r3
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d07e      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	4798      	blx	r3
        }
        return;
 8005ba6:	e079      	b.n	8005c9c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d01d      	beq.n	8005bf2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10d      	bne.n	8005be0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d031      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	4798      	blx	r3
 8005bd4:	e02c      	b.n	8005c30 <HAL_DMA_IRQHandler+0x2a0>
 8005bd6:	bf00      	nop
 8005bd8:	20000008 	.word	0x20000008
 8005bdc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d023      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	4798      	blx	r3
 8005bf0:	e01e      	b.n	8005c30 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10f      	bne.n	8005c20 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 0210 	bic.w	r2, r2, #16
 8005c0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d032      	beq.n	8005c9e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d022      	beq.n	8005c8a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2205      	movs	r2, #5
 8005c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 0201 	bic.w	r2, r2, #1
 8005c5a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	60bb      	str	r3, [r7, #8]
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d307      	bcc.n	8005c78 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1f2      	bne.n	8005c5c <HAL_DMA_IRQHandler+0x2cc>
 8005c76:	e000      	b.n	8005c7a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005c78:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d005      	beq.n	8005c9e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	4798      	blx	r3
 8005c9a:	e000      	b.n	8005c9e <HAL_DMA_IRQHandler+0x30e>
        return;
 8005c9c:	bf00      	nop
    }
  }
}
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cb2:	b2db      	uxtb	r3, r3
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	3b10      	subs	r3, #16
 8005cd0:	4a14      	ldr	r2, [pc, #80]	; (8005d24 <DMA_CalcBaseAndBitshift+0x64>)
 8005cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd6:	091b      	lsrs	r3, r3, #4
 8005cd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005cda:	4a13      	ldr	r2, [pc, #76]	; (8005d28 <DMA_CalcBaseAndBitshift+0x68>)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	4413      	add	r3, r2
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2b03      	cmp	r3, #3
 8005cec:	d909      	bls.n	8005d02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005cf6:	f023 0303 	bic.w	r3, r3, #3
 8005cfa:	1d1a      	adds	r2, r3, #4
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	659a      	str	r2, [r3, #88]	; 0x58
 8005d00:	e007      	b.n	8005d12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005d0a:	f023 0303 	bic.w	r3, r3, #3
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	aaaaaaab 	.word	0xaaaaaaab
 8005d28:	080108e8 	.word	0x080108e8

08005d2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d34:	2300      	movs	r3, #0
 8005d36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d11f      	bne.n	8005d86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2b03      	cmp	r3, #3
 8005d4a:	d856      	bhi.n	8005dfa <DMA_CheckFifoParam+0xce>
 8005d4c:	a201      	add	r2, pc, #4	; (adr r2, 8005d54 <DMA_CheckFifoParam+0x28>)
 8005d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d52:	bf00      	nop
 8005d54:	08005d65 	.word	0x08005d65
 8005d58:	08005d77 	.word	0x08005d77
 8005d5c:	08005d65 	.word	0x08005d65
 8005d60:	08005dfb 	.word	0x08005dfb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d046      	beq.n	8005dfe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d74:	e043      	b.n	8005dfe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d7e:	d140      	bne.n	8005e02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d84:	e03d      	b.n	8005e02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d8e:	d121      	bne.n	8005dd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	2b03      	cmp	r3, #3
 8005d94:	d837      	bhi.n	8005e06 <DMA_CheckFifoParam+0xda>
 8005d96:	a201      	add	r2, pc, #4	; (adr r2, 8005d9c <DMA_CheckFifoParam+0x70>)
 8005d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9c:	08005dad 	.word	0x08005dad
 8005da0:	08005db3 	.word	0x08005db3
 8005da4:	08005dad 	.word	0x08005dad
 8005da8:	08005dc5 	.word	0x08005dc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	73fb      	strb	r3, [r7, #15]
      break;
 8005db0:	e030      	b.n	8005e14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d025      	beq.n	8005e0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dc2:	e022      	b.n	8005e0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005dcc:	d11f      	bne.n	8005e0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005dd2:	e01c      	b.n	8005e0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d903      	bls.n	8005de2 <DMA_CheckFifoParam+0xb6>
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	2b03      	cmp	r3, #3
 8005dde:	d003      	beq.n	8005de8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005de0:	e018      	b.n	8005e14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	73fb      	strb	r3, [r7, #15]
      break;
 8005de6:	e015      	b.n	8005e14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00e      	beq.n	8005e12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	73fb      	strb	r3, [r7, #15]
      break;
 8005df8:	e00b      	b.n	8005e12 <DMA_CheckFifoParam+0xe6>
      break;
 8005dfa:	bf00      	nop
 8005dfc:	e00a      	b.n	8005e14 <DMA_CheckFifoParam+0xe8>
      break;
 8005dfe:	bf00      	nop
 8005e00:	e008      	b.n	8005e14 <DMA_CheckFifoParam+0xe8>
      break;
 8005e02:	bf00      	nop
 8005e04:	e006      	b.n	8005e14 <DMA_CheckFifoParam+0xe8>
      break;
 8005e06:	bf00      	nop
 8005e08:	e004      	b.n	8005e14 <DMA_CheckFifoParam+0xe8>
      break;
 8005e0a:	bf00      	nop
 8005e0c:	e002      	b.n	8005e14 <DMA_CheckFifoParam+0xe8>
      break;   
 8005e0e:	bf00      	nop
 8005e10:	e000      	b.n	8005e14 <DMA_CheckFifoParam+0xe8>
      break;
 8005e12:	bf00      	nop
    }
  } 
  
  return status; 
 8005e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop

08005e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b089      	sub	sp, #36	; 0x24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005e32:	2300      	movs	r3, #0
 8005e34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	61fb      	str	r3, [r7, #28]
 8005e3e:	e16b      	b.n	8006118 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e40:	2201      	movs	r2, #1
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	fa02 f303 	lsl.w	r3, r2, r3
 8005e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	4013      	ands	r3, r2
 8005e52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	f040 815a 	bne.w	8006112 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f003 0303 	and.w	r3, r3, #3
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d005      	beq.n	8005e76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d130      	bne.n	8005ed8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	005b      	lsls	r3, r3, #1
 8005e80:	2203      	movs	r2, #3
 8005e82:	fa02 f303 	lsl.w	r3, r2, r3
 8005e86:	43db      	mvns	r3, r3
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	68da      	ldr	r2, [r3, #12]
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005eac:	2201      	movs	r2, #1
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb4:	43db      	mvns	r3, r3
 8005eb6:	69ba      	ldr	r2, [r7, #24]
 8005eb8:	4013      	ands	r3, r2
 8005eba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	091b      	lsrs	r3, r3, #4
 8005ec2:	f003 0201 	and.w	r2, r3, #1
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ecc:	69ba      	ldr	r2, [r7, #24]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f003 0303 	and.w	r3, r3, #3
 8005ee0:	2b03      	cmp	r3, #3
 8005ee2:	d017      	beq.n	8005f14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	2203      	movs	r2, #3
 8005ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef4:	43db      	mvns	r3, r3
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	4013      	ands	r3, r2
 8005efa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	005b      	lsls	r3, r3, #1
 8005f04:	fa02 f303 	lsl.w	r3, r2, r3
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f003 0303 	and.w	r3, r3, #3
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d123      	bne.n	8005f68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	08da      	lsrs	r2, r3, #3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	3208      	adds	r2, #8
 8005f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	f003 0307 	and.w	r3, r3, #7
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	220f      	movs	r2, #15
 8005f38:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3c:	43db      	mvns	r3, r3
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	4013      	ands	r3, r2
 8005f42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	691a      	ldr	r2, [r3, #16]
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	f003 0307 	and.w	r3, r3, #7
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	fa02 f303 	lsl.w	r3, r2, r3
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	08da      	lsrs	r2, r3, #3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	3208      	adds	r2, #8
 8005f62:	69b9      	ldr	r1, [r7, #24]
 8005f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	2203      	movs	r2, #3
 8005f74:	fa02 f303 	lsl.w	r3, r2, r3
 8005f78:	43db      	mvns	r3, r3
 8005f7a:	69ba      	ldr	r2, [r7, #24]
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	f003 0203 	and.w	r2, r3, #3
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	005b      	lsls	r3, r3, #1
 8005f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f90:	69ba      	ldr	r2, [r7, #24]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 80b4 	beq.w	8006112 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005faa:	2300      	movs	r3, #0
 8005fac:	60fb      	str	r3, [r7, #12]
 8005fae:	4b60      	ldr	r3, [pc, #384]	; (8006130 <HAL_GPIO_Init+0x30c>)
 8005fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb2:	4a5f      	ldr	r2, [pc, #380]	; (8006130 <HAL_GPIO_Init+0x30c>)
 8005fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8005fba:	4b5d      	ldr	r3, [pc, #372]	; (8006130 <HAL_GPIO_Init+0x30c>)
 8005fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005fc6:	4a5b      	ldr	r2, [pc, #364]	; (8006134 <HAL_GPIO_Init+0x310>)
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	089b      	lsrs	r3, r3, #2
 8005fcc:	3302      	adds	r3, #2
 8005fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	f003 0303 	and.w	r3, r3, #3
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	220f      	movs	r2, #15
 8005fde:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe2:	43db      	mvns	r3, r3
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a52      	ldr	r2, [pc, #328]	; (8006138 <HAL_GPIO_Init+0x314>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d02b      	beq.n	800604a <HAL_GPIO_Init+0x226>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a51      	ldr	r2, [pc, #324]	; (800613c <HAL_GPIO_Init+0x318>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d025      	beq.n	8006046 <HAL_GPIO_Init+0x222>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a50      	ldr	r2, [pc, #320]	; (8006140 <HAL_GPIO_Init+0x31c>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d01f      	beq.n	8006042 <HAL_GPIO_Init+0x21e>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a4f      	ldr	r2, [pc, #316]	; (8006144 <HAL_GPIO_Init+0x320>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d019      	beq.n	800603e <HAL_GPIO_Init+0x21a>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a4e      	ldr	r2, [pc, #312]	; (8006148 <HAL_GPIO_Init+0x324>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d013      	beq.n	800603a <HAL_GPIO_Init+0x216>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a4d      	ldr	r2, [pc, #308]	; (800614c <HAL_GPIO_Init+0x328>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d00d      	beq.n	8006036 <HAL_GPIO_Init+0x212>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a4c      	ldr	r2, [pc, #304]	; (8006150 <HAL_GPIO_Init+0x32c>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d007      	beq.n	8006032 <HAL_GPIO_Init+0x20e>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a4b      	ldr	r2, [pc, #300]	; (8006154 <HAL_GPIO_Init+0x330>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d101      	bne.n	800602e <HAL_GPIO_Init+0x20a>
 800602a:	2307      	movs	r3, #7
 800602c:	e00e      	b.n	800604c <HAL_GPIO_Init+0x228>
 800602e:	2308      	movs	r3, #8
 8006030:	e00c      	b.n	800604c <HAL_GPIO_Init+0x228>
 8006032:	2306      	movs	r3, #6
 8006034:	e00a      	b.n	800604c <HAL_GPIO_Init+0x228>
 8006036:	2305      	movs	r3, #5
 8006038:	e008      	b.n	800604c <HAL_GPIO_Init+0x228>
 800603a:	2304      	movs	r3, #4
 800603c:	e006      	b.n	800604c <HAL_GPIO_Init+0x228>
 800603e:	2303      	movs	r3, #3
 8006040:	e004      	b.n	800604c <HAL_GPIO_Init+0x228>
 8006042:	2302      	movs	r3, #2
 8006044:	e002      	b.n	800604c <HAL_GPIO_Init+0x228>
 8006046:	2301      	movs	r3, #1
 8006048:	e000      	b.n	800604c <HAL_GPIO_Init+0x228>
 800604a:	2300      	movs	r3, #0
 800604c:	69fa      	ldr	r2, [r7, #28]
 800604e:	f002 0203 	and.w	r2, r2, #3
 8006052:	0092      	lsls	r2, r2, #2
 8006054:	4093      	lsls	r3, r2
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	4313      	orrs	r3, r2
 800605a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800605c:	4935      	ldr	r1, [pc, #212]	; (8006134 <HAL_GPIO_Init+0x310>)
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	089b      	lsrs	r3, r3, #2
 8006062:	3302      	adds	r3, #2
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800606a:	4b3b      	ldr	r3, [pc, #236]	; (8006158 <HAL_GPIO_Init+0x334>)
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	43db      	mvns	r3, r3
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	4013      	ands	r3, r2
 8006078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	4313      	orrs	r3, r2
 800608c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800608e:	4a32      	ldr	r2, [pc, #200]	; (8006158 <HAL_GPIO_Init+0x334>)
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006094:	4b30      	ldr	r3, [pc, #192]	; (8006158 <HAL_GPIO_Init+0x334>)
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	43db      	mvns	r3, r3
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	4013      	ands	r3, r2
 80060a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d003      	beq.n	80060b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80060b0:	69ba      	ldr	r2, [r7, #24]
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80060b8:	4a27      	ldr	r2, [pc, #156]	; (8006158 <HAL_GPIO_Init+0x334>)
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80060be:	4b26      	ldr	r3, [pc, #152]	; (8006158 <HAL_GPIO_Init+0x334>)
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	43db      	mvns	r3, r3
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	4013      	ands	r3, r2
 80060cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80060da:	69ba      	ldr	r2, [r7, #24]
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	4313      	orrs	r3, r2
 80060e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80060e2:	4a1d      	ldr	r2, [pc, #116]	; (8006158 <HAL_GPIO_Init+0x334>)
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80060e8:	4b1b      	ldr	r3, [pc, #108]	; (8006158 <HAL_GPIO_Init+0x334>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	43db      	mvns	r3, r3
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	4013      	ands	r3, r2
 80060f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d003      	beq.n	800610c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	4313      	orrs	r3, r2
 800610a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800610c:	4a12      	ldr	r2, [pc, #72]	; (8006158 <HAL_GPIO_Init+0x334>)
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	3301      	adds	r3, #1
 8006116:	61fb      	str	r3, [r7, #28]
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	2b0f      	cmp	r3, #15
 800611c:	f67f ae90 	bls.w	8005e40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006120:	bf00      	nop
 8006122:	bf00      	nop
 8006124:	3724      	adds	r7, #36	; 0x24
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	40023800 	.word	0x40023800
 8006134:	40013800 	.word	0x40013800
 8006138:	40020000 	.word	0x40020000
 800613c:	40020400 	.word	0x40020400
 8006140:	40020800 	.word	0x40020800
 8006144:	40020c00 	.word	0x40020c00
 8006148:	40021000 	.word	0x40021000
 800614c:	40021400 	.word	0x40021400
 8006150:	40021800 	.word	0x40021800
 8006154:	40021c00 	.word	0x40021c00
 8006158:	40013c00 	.word	0x40013c00

0800615c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	460b      	mov	r3, r1
 8006166:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	691a      	ldr	r2, [r3, #16]
 800616c:	887b      	ldrh	r3, [r7, #2]
 800616e:	4013      	ands	r3, r2
 8006170:	2b00      	cmp	r3, #0
 8006172:	d002      	beq.n	800617a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006174:	2301      	movs	r3, #1
 8006176:	73fb      	strb	r3, [r7, #15]
 8006178:	e001      	b.n	800617e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800617a:	2300      	movs	r3, #0
 800617c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800617e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3714      	adds	r7, #20
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	807b      	strh	r3, [r7, #2]
 8006198:	4613      	mov	r3, r2
 800619a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800619c:	787b      	ldrb	r3, [r7, #1]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061a2:	887a      	ldrh	r2, [r7, #2]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80061a8:	e003      	b.n	80061b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80061aa:	887b      	ldrh	r3, [r7, #2]
 80061ac:	041a      	lsls	r2, r3, #16
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	619a      	str	r2, [r3, #24]
}
 80061b2:	bf00      	nop
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80061be:	b480      	push	{r7}
 80061c0:	b085      	sub	sp, #20
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
 80061c6:	460b      	mov	r3, r1
 80061c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80061d0:	887a      	ldrh	r2, [r7, #2]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	4013      	ands	r3, r2
 80061d6:	041a      	lsls	r2, r3, #16
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	43d9      	mvns	r1, r3
 80061dc:	887b      	ldrh	r3, [r7, #2]
 80061de:	400b      	ands	r3, r1
 80061e0:	431a      	orrs	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	619a      	str	r2, [r3, #24]
}
 80061e6:	bf00      	nop
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
	...

080061f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	4603      	mov	r3, r0
 80061fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80061fe:	4b08      	ldr	r3, [pc, #32]	; (8006220 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006200:	695a      	ldr	r2, [r3, #20]
 8006202:	88fb      	ldrh	r3, [r7, #6]
 8006204:	4013      	ands	r3, r2
 8006206:	2b00      	cmp	r3, #0
 8006208:	d006      	beq.n	8006218 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800620a:	4a05      	ldr	r2, [pc, #20]	; (8006220 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800620c:	88fb      	ldrh	r3, [r7, #6]
 800620e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006210:	88fb      	ldrh	r3, [r7, #6]
 8006212:	4618      	mov	r0, r3
 8006214:	f7fb fb48 	bl	80018a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006218:	bf00      	nop
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	40013c00 	.word	0x40013c00

08006224 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e12b      	b.n	800648e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d106      	bne.n	8006250 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7fb fb96 	bl	800197c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2224      	movs	r2, #36	; 0x24
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 0201 	bic.w	r2, r2, #1
 8006266:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006276:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006286:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006288:	f002 ff06 	bl	8009098 <HAL_RCC_GetPCLK1Freq>
 800628c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	4a81      	ldr	r2, [pc, #516]	; (8006498 <HAL_I2C_Init+0x274>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d807      	bhi.n	80062a8 <HAL_I2C_Init+0x84>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	4a80      	ldr	r2, [pc, #512]	; (800649c <HAL_I2C_Init+0x278>)
 800629c:	4293      	cmp	r3, r2
 800629e:	bf94      	ite	ls
 80062a0:	2301      	movls	r3, #1
 80062a2:	2300      	movhi	r3, #0
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	e006      	b.n	80062b6 <HAL_I2C_Init+0x92>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4a7d      	ldr	r2, [pc, #500]	; (80064a0 <HAL_I2C_Init+0x27c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	bf94      	ite	ls
 80062b0:	2301      	movls	r3, #1
 80062b2:	2300      	movhi	r3, #0
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e0e7      	b.n	800648e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	4a78      	ldr	r2, [pc, #480]	; (80064a4 <HAL_I2C_Init+0x280>)
 80062c2:	fba2 2303 	umull	r2, r3, r2, r3
 80062c6:	0c9b      	lsrs	r3, r3, #18
 80062c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	430a      	orrs	r2, r1
 80062dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	4a6a      	ldr	r2, [pc, #424]	; (8006498 <HAL_I2C_Init+0x274>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d802      	bhi.n	80062f8 <HAL_I2C_Init+0xd4>
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	3301      	adds	r3, #1
 80062f6:	e009      	b.n	800630c <HAL_I2C_Init+0xe8>
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80062fe:	fb02 f303 	mul.w	r3, r2, r3
 8006302:	4a69      	ldr	r2, [pc, #420]	; (80064a8 <HAL_I2C_Init+0x284>)
 8006304:	fba2 2303 	umull	r2, r3, r2, r3
 8006308:	099b      	lsrs	r3, r3, #6
 800630a:	3301      	adds	r3, #1
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	6812      	ldr	r2, [r2, #0]
 8006310:	430b      	orrs	r3, r1
 8006312:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800631e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	495c      	ldr	r1, [pc, #368]	; (8006498 <HAL_I2C_Init+0x274>)
 8006328:	428b      	cmp	r3, r1
 800632a:	d819      	bhi.n	8006360 <HAL_I2C_Init+0x13c>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	1e59      	subs	r1, r3, #1
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	005b      	lsls	r3, r3, #1
 8006336:	fbb1 f3f3 	udiv	r3, r1, r3
 800633a:	1c59      	adds	r1, r3, #1
 800633c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006340:	400b      	ands	r3, r1
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00a      	beq.n	800635c <HAL_I2C_Init+0x138>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	1e59      	subs	r1, r3, #1
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	fbb1 f3f3 	udiv	r3, r1, r3
 8006354:	3301      	adds	r3, #1
 8006356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800635a:	e051      	b.n	8006400 <HAL_I2C_Init+0x1dc>
 800635c:	2304      	movs	r3, #4
 800635e:	e04f      	b.n	8006400 <HAL_I2C_Init+0x1dc>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d111      	bne.n	800638c <HAL_I2C_Init+0x168>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	1e58      	subs	r0, r3, #1
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6859      	ldr	r1, [r3, #4]
 8006370:	460b      	mov	r3, r1
 8006372:	005b      	lsls	r3, r3, #1
 8006374:	440b      	add	r3, r1
 8006376:	fbb0 f3f3 	udiv	r3, r0, r3
 800637a:	3301      	adds	r3, #1
 800637c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006380:	2b00      	cmp	r3, #0
 8006382:	bf0c      	ite	eq
 8006384:	2301      	moveq	r3, #1
 8006386:	2300      	movne	r3, #0
 8006388:	b2db      	uxtb	r3, r3
 800638a:	e012      	b.n	80063b2 <HAL_I2C_Init+0x18e>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	1e58      	subs	r0, r3, #1
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6859      	ldr	r1, [r3, #4]
 8006394:	460b      	mov	r3, r1
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	440b      	add	r3, r1
 800639a:	0099      	lsls	r1, r3, #2
 800639c:	440b      	add	r3, r1
 800639e:	fbb0 f3f3 	udiv	r3, r0, r3
 80063a2:	3301      	adds	r3, #1
 80063a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	bf0c      	ite	eq
 80063ac:	2301      	moveq	r3, #1
 80063ae:	2300      	movne	r3, #0
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <HAL_I2C_Init+0x196>
 80063b6:	2301      	movs	r3, #1
 80063b8:	e022      	b.n	8006400 <HAL_I2C_Init+0x1dc>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10e      	bne.n	80063e0 <HAL_I2C_Init+0x1bc>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	1e58      	subs	r0, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6859      	ldr	r1, [r3, #4]
 80063ca:	460b      	mov	r3, r1
 80063cc:	005b      	lsls	r3, r3, #1
 80063ce:	440b      	add	r3, r1
 80063d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80063d4:	3301      	adds	r3, #1
 80063d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063de:	e00f      	b.n	8006400 <HAL_I2C_Init+0x1dc>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	1e58      	subs	r0, r3, #1
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6859      	ldr	r1, [r3, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	440b      	add	r3, r1
 80063ee:	0099      	lsls	r1, r3, #2
 80063f0:	440b      	add	r3, r1
 80063f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80063f6:	3301      	adds	r3, #1
 80063f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006400:	6879      	ldr	r1, [r7, #4]
 8006402:	6809      	ldr	r1, [r1, #0]
 8006404:	4313      	orrs	r3, r2
 8006406:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	69da      	ldr	r2, [r3, #28]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	431a      	orrs	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	430a      	orrs	r2, r1
 8006422:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800642e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	6911      	ldr	r1, [r2, #16]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	68d2      	ldr	r2, [r2, #12]
 800643a:	4311      	orrs	r1, r2
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	6812      	ldr	r2, [r2, #0]
 8006440:	430b      	orrs	r3, r1
 8006442:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	695a      	ldr	r2, [r3, #20]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	431a      	orrs	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f042 0201 	orr.w	r2, r2, #1
 800646e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2220      	movs	r2, #32
 800647a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	000186a0 	.word	0x000186a0
 800649c:	001e847f 	.word	0x001e847f
 80064a0:	003d08ff 	.word	0x003d08ff
 80064a4:	431bde83 	.word	0x431bde83
 80064a8:	10624dd3 	.word	0x10624dd3

080064ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b08c      	sub	sp, #48	; 0x30
 80064b0:	af02      	add	r7, sp, #8
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	4608      	mov	r0, r1
 80064b6:	4611      	mov	r1, r2
 80064b8:	461a      	mov	r2, r3
 80064ba:	4603      	mov	r3, r0
 80064bc:	817b      	strh	r3, [r7, #10]
 80064be:	460b      	mov	r3, r1
 80064c0:	813b      	strh	r3, [r7, #8]
 80064c2:	4613      	mov	r3, r2
 80064c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80064c6:	f7fe fbd3 	bl	8004c70 <HAL_GetTick>
 80064ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b20      	cmp	r3, #32
 80064d6:	f040 8208 	bne.w	80068ea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	2319      	movs	r3, #25
 80064e0:	2201      	movs	r2, #1
 80064e2:	497b      	ldr	r1, [pc, #492]	; (80066d0 <HAL_I2C_Mem_Read+0x224>)
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f001 ff7d 	bl	80083e4 <I2C_WaitOnFlagUntilTimeout>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80064f0:	2302      	movs	r3, #2
 80064f2:	e1fb      	b.n	80068ec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d101      	bne.n	8006502 <HAL_I2C_Mem_Read+0x56>
 80064fe:	2302      	movs	r3, #2
 8006500:	e1f4      	b.n	80068ec <HAL_I2C_Mem_Read+0x440>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	2b01      	cmp	r3, #1
 8006516:	d007      	beq.n	8006528 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f042 0201 	orr.w	r2, r2, #1
 8006526:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006536:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2222      	movs	r2, #34	; 0x22
 800653c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2240      	movs	r2, #64	; 0x40
 8006544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006552:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006558:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800655e:	b29a      	uxth	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4a5b      	ldr	r2, [pc, #364]	; (80066d4 <HAL_I2C_Mem_Read+0x228>)
 8006568:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800656a:	88f8      	ldrh	r0, [r7, #6]
 800656c:	893a      	ldrh	r2, [r7, #8]
 800656e:	8979      	ldrh	r1, [r7, #10]
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	9301      	str	r3, [sp, #4]
 8006574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006576:	9300      	str	r3, [sp, #0]
 8006578:	4603      	mov	r3, r0
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f001 fda2 	bl	80080c4 <I2C_RequestMemoryRead>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d001      	beq.n	800658a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e1b0      	b.n	80068ec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800658e:	2b00      	cmp	r3, #0
 8006590:	d113      	bne.n	80065ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006592:	2300      	movs	r3, #0
 8006594:	623b      	str	r3, [r7, #32]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	623b      	str	r3, [r7, #32]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	623b      	str	r3, [r7, #32]
 80065a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065b6:	601a      	str	r2, [r3, #0]
 80065b8:	e184      	b.n	80068c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d11b      	bne.n	80065fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065d2:	2300      	movs	r3, #0
 80065d4:	61fb      	str	r3, [r7, #28]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	695b      	ldr	r3, [r3, #20]
 80065dc:	61fb      	str	r3, [r7, #28]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	61fb      	str	r3, [r7, #28]
 80065e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065f6:	601a      	str	r2, [r3, #0]
 80065f8:	e164      	b.n	80068c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d11b      	bne.n	800663a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006610:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006620:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006622:	2300      	movs	r3, #0
 8006624:	61bb      	str	r3, [r7, #24]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	61bb      	str	r3, [r7, #24]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	61bb      	str	r3, [r7, #24]
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	e144      	b.n	80068c4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800663a:	2300      	movs	r3, #0
 800663c:	617b      	str	r3, [r7, #20]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	695b      	ldr	r3, [r3, #20]
 8006644:	617b      	str	r3, [r7, #20]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	617b      	str	r3, [r7, #20]
 800664e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006650:	e138      	b.n	80068c4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006656:	2b03      	cmp	r3, #3
 8006658:	f200 80f1 	bhi.w	800683e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006660:	2b01      	cmp	r3, #1
 8006662:	d123      	bne.n	80066ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006666:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f002 f805 	bl	8008678 <I2C_WaitOnRXNEFlagUntilTimeout>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e139      	b.n	80068ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	691a      	ldr	r2, [r3, #16]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006682:	b2d2      	uxtb	r2, r2
 8006684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668a:	1c5a      	adds	r2, r3, #1
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006694:	3b01      	subs	r3, #1
 8006696:	b29a      	uxth	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	3b01      	subs	r3, #1
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066aa:	e10b      	b.n	80068c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d14e      	bne.n	8006752 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ba:	2200      	movs	r2, #0
 80066bc:	4906      	ldr	r1, [pc, #24]	; (80066d8 <HAL_I2C_Mem_Read+0x22c>)
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f001 fe90 	bl	80083e4 <I2C_WaitOnFlagUntilTimeout>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d008      	beq.n	80066dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e10e      	b.n	80068ec <HAL_I2C_Mem_Read+0x440>
 80066ce:	bf00      	nop
 80066d0:	00100002 	.word	0x00100002
 80066d4:	ffff0000 	.word	0xffff0000
 80066d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	691a      	ldr	r2, [r3, #16]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f6:	b2d2      	uxtb	r2, r2
 80066f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fe:	1c5a      	adds	r2, r3, #1
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006708:	3b01      	subs	r3, #1
 800670a:	b29a      	uxth	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006714:	b29b      	uxth	r3, r3
 8006716:	3b01      	subs	r3, #1
 8006718:	b29a      	uxth	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	691a      	ldr	r2, [r3, #16]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006728:	b2d2      	uxtb	r2, r2
 800672a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800673a:	3b01      	subs	r3, #1
 800673c:	b29a      	uxth	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006746:	b29b      	uxth	r3, r3
 8006748:	3b01      	subs	r3, #1
 800674a:	b29a      	uxth	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006750:	e0b8      	b.n	80068c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006758:	2200      	movs	r2, #0
 800675a:	4966      	ldr	r1, [pc, #408]	; (80068f4 <HAL_I2C_Mem_Read+0x448>)
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f001 fe41 	bl	80083e4 <I2C_WaitOnFlagUntilTimeout>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d001      	beq.n	800676c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e0bf      	b.n	80068ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800677a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	691a      	ldr	r2, [r3, #16]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678e:	1c5a      	adds	r2, r3, #1
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006798:	3b01      	subs	r3, #1
 800679a:	b29a      	uxth	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	3b01      	subs	r3, #1
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b4:	2200      	movs	r2, #0
 80067b6:	494f      	ldr	r1, [pc, #316]	; (80068f4 <HAL_I2C_Mem_Read+0x448>)
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f001 fe13 	bl	80083e4 <I2C_WaitOnFlagUntilTimeout>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e091      	b.n	80068ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	691a      	ldr	r2, [r3, #16]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e2:	b2d2      	uxtb	r2, r2
 80067e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ea:	1c5a      	adds	r2, r3, #1
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067f4:	3b01      	subs	r3, #1
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006800:	b29b      	uxth	r3, r3
 8006802:	3b01      	subs	r3, #1
 8006804:	b29a      	uxth	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	691a      	ldr	r2, [r3, #16]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006814:	b2d2      	uxtb	r2, r2
 8006816:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681c:	1c5a      	adds	r2, r3, #1
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006826:	3b01      	subs	r3, #1
 8006828:	b29a      	uxth	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006832:	b29b      	uxth	r3, r3
 8006834:	3b01      	subs	r3, #1
 8006836:	b29a      	uxth	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800683c:	e042      	b.n	80068c4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800683e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006840:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f001 ff18 	bl	8008678 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e04c      	b.n	80068ec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	691a      	ldr	r2, [r3, #16]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	b2d2      	uxtb	r2, r2
 800685e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	1c5a      	adds	r2, r3, #1
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800686e:	3b01      	subs	r3, #1
 8006870:	b29a      	uxth	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800687a:	b29b      	uxth	r3, r3
 800687c:	3b01      	subs	r3, #1
 800687e:	b29a      	uxth	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	f003 0304 	and.w	r3, r3, #4
 800688e:	2b04      	cmp	r3, #4
 8006890:	d118      	bne.n	80068c4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	691a      	ldr	r2, [r3, #16]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689c:	b2d2      	uxtb	r2, r2
 800689e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a4:	1c5a      	adds	r2, r3, #1
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ae:	3b01      	subs	r3, #1
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	3b01      	subs	r3, #1
 80068be:	b29a      	uxth	r2, r3
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f47f aec2 	bne.w	8006652 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2220      	movs	r2, #32
 80068d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	e000      	b.n	80068ec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80068ea:	2302      	movs	r3, #2
  }
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3728      	adds	r7, #40	; 0x28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	00010004 	.word	0x00010004

080068f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b088      	sub	sp, #32
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006900:	2300      	movs	r3, #0
 8006902:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006910:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006918:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006920:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006922:	7bfb      	ldrb	r3, [r7, #15]
 8006924:	2b10      	cmp	r3, #16
 8006926:	d003      	beq.n	8006930 <HAL_I2C_EV_IRQHandler+0x38>
 8006928:	7bfb      	ldrb	r3, [r7, #15]
 800692a:	2b40      	cmp	r3, #64	; 0x40
 800692c:	f040 80c1 	bne.w	8006ab2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10d      	bne.n	8006966 <HAL_I2C_EV_IRQHandler+0x6e>
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006950:	d003      	beq.n	800695a <HAL_I2C_EV_IRQHandler+0x62>
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006958:	d101      	bne.n	800695e <HAL_I2C_EV_IRQHandler+0x66>
 800695a:	2301      	movs	r3, #1
 800695c:	e000      	b.n	8006960 <HAL_I2C_EV_IRQHandler+0x68>
 800695e:	2300      	movs	r3, #0
 8006960:	2b01      	cmp	r3, #1
 8006962:	f000 8132 	beq.w	8006bca <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00c      	beq.n	800698a <HAL_I2C_EV_IRQHandler+0x92>
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	0a5b      	lsrs	r3, r3, #9
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b00      	cmp	r3, #0
 800697a:	d006      	beq.n	800698a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f001 ff00 	bl	8008782 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fd83 	bl	800748e <I2C_Master_SB>
 8006988:	e092      	b.n	8006ab0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	08db      	lsrs	r3, r3, #3
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b00      	cmp	r3, #0
 8006994:	d009      	beq.n	80069aa <HAL_I2C_EV_IRQHandler+0xb2>
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	0a5b      	lsrs	r3, r3, #9
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fdf9 	bl	800759a <I2C_Master_ADD10>
 80069a8:	e082      	b.n	8006ab0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	085b      	lsrs	r3, r3, #1
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d009      	beq.n	80069ca <HAL_I2C_EV_IRQHandler+0xd2>
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	0a5b      	lsrs	r3, r3, #9
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d003      	beq.n	80069ca <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fe13 	bl	80075ee <I2C_Master_ADDR>
 80069c8:	e072      	b.n	8006ab0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	089b      	lsrs	r3, r3, #2
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d03b      	beq.n	8006a4e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069e4:	f000 80f3 	beq.w	8006bce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	09db      	lsrs	r3, r3, #7
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00f      	beq.n	8006a14 <HAL_I2C_EV_IRQHandler+0x11c>
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	0a9b      	lsrs	r3, r3, #10
 80069f8:	f003 0301 	and.w	r3, r3, #1
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d009      	beq.n	8006a14 <HAL_I2C_EV_IRQHandler+0x11c>
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	089b      	lsrs	r3, r3, #2
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d103      	bne.n	8006a14 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f9f3 	bl	8006df8 <I2C_MasterTransmit_TXE>
 8006a12:	e04d      	b.n	8006ab0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	089b      	lsrs	r3, r3, #2
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f000 80d6 	beq.w	8006bce <HAL_I2C_EV_IRQHandler+0x2d6>
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	0a5b      	lsrs	r3, r3, #9
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f000 80cf 	beq.w	8006bce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006a30:	7bbb      	ldrb	r3, [r7, #14]
 8006a32:	2b21      	cmp	r3, #33	; 0x21
 8006a34:	d103      	bne.n	8006a3e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fa7a 	bl	8006f30 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a3c:	e0c7      	b.n	8006bce <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006a3e:	7bfb      	ldrb	r3, [r7, #15]
 8006a40:	2b40      	cmp	r3, #64	; 0x40
 8006a42:	f040 80c4 	bne.w	8006bce <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fae8 	bl	800701c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a4c:	e0bf      	b.n	8006bce <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a5c:	f000 80b7 	beq.w	8006bce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	099b      	lsrs	r3, r3, #6
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00f      	beq.n	8006a8c <HAL_I2C_EV_IRQHandler+0x194>
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	0a9b      	lsrs	r3, r3, #10
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d009      	beq.n	8006a8c <HAL_I2C_EV_IRQHandler+0x194>
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	089b      	lsrs	r3, r3, #2
 8006a7c:	f003 0301 	and.w	r3, r3, #1
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d103      	bne.n	8006a8c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fb5d 	bl	8007144 <I2C_MasterReceive_RXNE>
 8006a8a:	e011      	b.n	8006ab0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	089b      	lsrs	r3, r3, #2
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 809a 	beq.w	8006bce <HAL_I2C_EV_IRQHandler+0x2d6>
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	0a5b      	lsrs	r3, r3, #9
 8006a9e:	f003 0301 	and.w	r3, r3, #1
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f000 8093 	beq.w	8006bce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fc06 	bl	80072ba <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006aae:	e08e      	b.n	8006bce <HAL_I2C_EV_IRQHandler+0x2d6>
 8006ab0:	e08d      	b.n	8006bce <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d004      	beq.n	8006ac4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	61fb      	str	r3, [r7, #28]
 8006ac2:	e007      	b.n	8006ad4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	085b      	lsrs	r3, r3, #1
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d012      	beq.n	8006b06 <HAL_I2C_EV_IRQHandler+0x20e>
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	0a5b      	lsrs	r3, r3, #9
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00c      	beq.n	8006b06 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d003      	beq.n	8006afc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006afc:	69b9      	ldr	r1, [r7, #24]
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 ffc4 	bl	8007a8c <I2C_Slave_ADDR>
 8006b04:	e066      	b.n	8006bd4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	091b      	lsrs	r3, r3, #4
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d009      	beq.n	8006b26 <HAL_I2C_EV_IRQHandler+0x22e>
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	0a5b      	lsrs	r3, r3, #9
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fffe 	bl	8007b20 <I2C_Slave_STOPF>
 8006b24:	e056      	b.n	8006bd4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006b26:	7bbb      	ldrb	r3, [r7, #14]
 8006b28:	2b21      	cmp	r3, #33	; 0x21
 8006b2a:	d002      	beq.n	8006b32 <HAL_I2C_EV_IRQHandler+0x23a>
 8006b2c:	7bbb      	ldrb	r3, [r7, #14]
 8006b2e:	2b29      	cmp	r3, #41	; 0x29
 8006b30:	d125      	bne.n	8006b7e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	09db      	lsrs	r3, r3, #7
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00f      	beq.n	8006b5e <HAL_I2C_EV_IRQHandler+0x266>
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	0a9b      	lsrs	r3, r3, #10
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d009      	beq.n	8006b5e <HAL_I2C_EV_IRQHandler+0x266>
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	089b      	lsrs	r3, r3, #2
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d103      	bne.n	8006b5e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 feda 	bl	8007910 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b5c:	e039      	b.n	8006bd2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	089b      	lsrs	r3, r3, #2
 8006b62:	f003 0301 	and.w	r3, r3, #1
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d033      	beq.n	8006bd2 <HAL_I2C_EV_IRQHandler+0x2da>
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	0a5b      	lsrs	r3, r3, #9
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d02d      	beq.n	8006bd2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 ff07 	bl	800798a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b7c:	e029      	b.n	8006bd2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	099b      	lsrs	r3, r3, #6
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00f      	beq.n	8006baa <HAL_I2C_EV_IRQHandler+0x2b2>
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	0a9b      	lsrs	r3, r3, #10
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d009      	beq.n	8006baa <HAL_I2C_EV_IRQHandler+0x2b2>
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	089b      	lsrs	r3, r3, #2
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d103      	bne.n	8006baa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 ff12 	bl	80079cc <I2C_SlaveReceive_RXNE>
 8006ba8:	e014      	b.n	8006bd4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	089b      	lsrs	r3, r3, #2
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00e      	beq.n	8006bd4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	0a5b      	lsrs	r3, r3, #9
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d008      	beq.n	8006bd4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 ff40 	bl	8007a48 <I2C_SlaveReceive_BTF>
 8006bc8:	e004      	b.n	8006bd4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006bca:	bf00      	nop
 8006bcc:	e002      	b.n	8006bd4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006bce:	bf00      	nop
 8006bd0:	e000      	b.n	8006bd4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006bd2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006bd4:	3720      	adds	r7, #32
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b08a      	sub	sp, #40	; 0x28
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bfc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006bfe:	6a3b      	ldr	r3, [r7, #32]
 8006c00:	0a1b      	lsrs	r3, r3, #8
 8006c02:	f003 0301 	and.w	r3, r3, #1
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00e      	beq.n	8006c28 <HAL_I2C_ER_IRQHandler+0x4e>
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	0a1b      	lsrs	r3, r3, #8
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d008      	beq.n	8006c28 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c18:	f043 0301 	orr.w	r3, r3, #1
 8006c1c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006c26:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	0a5b      	lsrs	r3, r3, #9
 8006c2c:	f003 0301 	and.w	r3, r3, #1
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00e      	beq.n	8006c52 <HAL_I2C_ER_IRQHandler+0x78>
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	0a1b      	lsrs	r3, r3, #8
 8006c38:	f003 0301 	and.w	r3, r3, #1
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d008      	beq.n	8006c52 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	f043 0302 	orr.w	r3, r3, #2
 8006c46:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006c50:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006c52:	6a3b      	ldr	r3, [r7, #32]
 8006c54:	0a9b      	lsrs	r3, r3, #10
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d03f      	beq.n	8006cde <HAL_I2C_ER_IRQHandler+0x104>
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	0a1b      	lsrs	r3, r3, #8
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d039      	beq.n	8006cde <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006c6a:	7efb      	ldrb	r3, [r7, #27]
 8006c6c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c7c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c82:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006c84:	7ebb      	ldrb	r3, [r7, #26]
 8006c86:	2b20      	cmp	r3, #32
 8006c88:	d112      	bne.n	8006cb0 <HAL_I2C_ER_IRQHandler+0xd6>
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10f      	bne.n	8006cb0 <HAL_I2C_ER_IRQHandler+0xd6>
 8006c90:	7cfb      	ldrb	r3, [r7, #19]
 8006c92:	2b21      	cmp	r3, #33	; 0x21
 8006c94:	d008      	beq.n	8006ca8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006c96:	7cfb      	ldrb	r3, [r7, #19]
 8006c98:	2b29      	cmp	r3, #41	; 0x29
 8006c9a:	d005      	beq.n	8006ca8 <HAL_I2C_ER_IRQHandler+0xce>
 8006c9c:	7cfb      	ldrb	r3, [r7, #19]
 8006c9e:	2b28      	cmp	r3, #40	; 0x28
 8006ca0:	d106      	bne.n	8006cb0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2b21      	cmp	r3, #33	; 0x21
 8006ca6:	d103      	bne.n	8006cb0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f001 f869 	bl	8007d80 <I2C_Slave_AF>
 8006cae:	e016      	b.n	8006cde <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006cb8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbc:	f043 0304 	orr.w	r3, r3, #4
 8006cc0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006cc2:	7efb      	ldrb	r3, [r7, #27]
 8006cc4:	2b10      	cmp	r3, #16
 8006cc6:	d002      	beq.n	8006cce <HAL_I2C_ER_IRQHandler+0xf4>
 8006cc8:	7efb      	ldrb	r3, [r7, #27]
 8006cca:	2b40      	cmp	r3, #64	; 0x40
 8006ccc:	d107      	bne.n	8006cde <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cdc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006cde:	6a3b      	ldr	r3, [r7, #32]
 8006ce0:	0adb      	lsrs	r3, r3, #11
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00e      	beq.n	8006d08 <HAL_I2C_ER_IRQHandler+0x12e>
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	0a1b      	lsrs	r3, r3, #8
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d008      	beq.n	8006d08 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf8:	f043 0308 	orr.w	r3, r3, #8
 8006cfc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006d06:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d008      	beq.n	8006d20 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	431a      	orrs	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f001 f8a0 	bl	8007e60 <I2C_ITError>
  }
}
 8006d20:	bf00      	nop
 8006d22:	3728      	adds	r7, #40	; 0x28
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	460b      	mov	r3, r1
 8006d82:	70fb      	strb	r3, [r7, #3]
 8006d84:	4613      	mov	r3, r2
 8006d86:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e06:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e0e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e14:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d150      	bne.n	8006ec0 <I2C_MasterTransmit_TXE+0xc8>
 8006e1e:	7bfb      	ldrb	r3, [r7, #15]
 8006e20:	2b21      	cmp	r3, #33	; 0x21
 8006e22:	d14d      	bne.n	8006ec0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	2b08      	cmp	r3, #8
 8006e28:	d01d      	beq.n	8006e66 <I2C_MasterTransmit_TXE+0x6e>
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2b20      	cmp	r3, #32
 8006e2e:	d01a      	beq.n	8006e66 <I2C_MasterTransmit_TXE+0x6e>
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e36:	d016      	beq.n	8006e66 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e46:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2211      	movs	r2, #17
 8006e4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2220      	movs	r2, #32
 8006e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f7ff ff62 	bl	8006d28 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006e64:	e060      	b.n	8006f28 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e74:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e84:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2220      	movs	r2, #32
 8006e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	2b40      	cmp	r3, #64	; 0x40
 8006e9e:	d107      	bne.n	8006eb0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7ff ff7d 	bl	8006da8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006eae:	e03b      	b.n	8006f28 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f7ff ff35 	bl	8006d28 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006ebe:	e033      	b.n	8006f28 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
 8006ec2:	2b21      	cmp	r3, #33	; 0x21
 8006ec4:	d005      	beq.n	8006ed2 <I2C_MasterTransmit_TXE+0xda>
 8006ec6:	7bbb      	ldrb	r3, [r7, #14]
 8006ec8:	2b40      	cmp	r3, #64	; 0x40
 8006eca:	d12d      	bne.n	8006f28 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006ecc:	7bfb      	ldrb	r3, [r7, #15]
 8006ece:	2b22      	cmp	r3, #34	; 0x22
 8006ed0:	d12a      	bne.n	8006f28 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d108      	bne.n	8006eee <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eea:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006eec:	e01c      	b.n	8006f28 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b40      	cmp	r3, #64	; 0x40
 8006ef8:	d103      	bne.n	8006f02 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f88e 	bl	800701c <I2C_MemoryTransmit_TXE_BTF>
}
 8006f00:	e012      	b.n	8006f28 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	781a      	ldrb	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f12:	1c5a      	adds	r2, r3, #1
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006f26:	e7ff      	b.n	8006f28 <I2C_MasterTransmit_TXE+0x130>
 8006f28:	bf00      	nop
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b21      	cmp	r3, #33	; 0x21
 8006f48:	d164      	bne.n	8007014 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d012      	beq.n	8006f7a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f58:	781a      	ldrb	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f64:	1c5a      	adds	r2, r3, #1
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	3b01      	subs	r3, #1
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006f78:	e04c      	b.n	8007014 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2b08      	cmp	r3, #8
 8006f7e:	d01d      	beq.n	8006fbc <I2C_MasterTransmit_BTF+0x8c>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2b20      	cmp	r3, #32
 8006f84:	d01a      	beq.n	8006fbc <I2C_MasterTransmit_BTF+0x8c>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f8c:	d016      	beq.n	8006fbc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	685a      	ldr	r2, [r3, #4]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f9c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2211      	movs	r2, #17
 8006fa2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f7ff feb7 	bl	8006d28 <HAL_I2C_MasterTxCpltCallback>
}
 8006fba:	e02b      	b.n	8007014 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fca:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fda:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b40      	cmp	r3, #64	; 0x40
 8006ff4:	d107      	bne.n	8007006 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7ff fed2 	bl	8006da8 <HAL_I2C_MemTxCpltCallback>
}
 8007004:	e006      	b.n	8007014 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7ff fe8a 	bl	8006d28 <HAL_I2C_MasterTxCpltCallback>
}
 8007014:	bf00      	nop
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800702a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007030:	2b00      	cmp	r3, #0
 8007032:	d11d      	bne.n	8007070 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007038:	2b01      	cmp	r3, #1
 800703a:	d10b      	bne.n	8007054 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007040:	b2da      	uxtb	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800704c:	1c9a      	adds	r2, r3, #2
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007052:	e073      	b.n	800713c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007058:	b29b      	uxth	r3, r3
 800705a:	121b      	asrs	r3, r3, #8
 800705c:	b2da      	uxtb	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800706e:	e065      	b.n	800713c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007074:	2b01      	cmp	r3, #1
 8007076:	d10b      	bne.n	8007090 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800707c:	b2da      	uxtb	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007088:	1c5a      	adds	r2, r3, #1
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800708e:	e055      	b.n	800713c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007094:	2b02      	cmp	r3, #2
 8007096:	d151      	bne.n	800713c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007098:	7bfb      	ldrb	r3, [r7, #15]
 800709a:	2b22      	cmp	r3, #34	; 0x22
 800709c:	d10d      	bne.n	80070ba <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070ac:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070b2:	1c5a      	adds	r2, r3, #1
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80070b8:	e040      	b.n	800713c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070be:	b29b      	uxth	r3, r3
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d015      	beq.n	80070f0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80070c4:	7bfb      	ldrb	r3, [r7, #15]
 80070c6:	2b21      	cmp	r3, #33	; 0x21
 80070c8:	d112      	bne.n	80070f0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ce:	781a      	ldrb	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070da:	1c5a      	adds	r2, r3, #1
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	3b01      	subs	r3, #1
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80070ee:	e025      	b.n	800713c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d120      	bne.n	800713c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80070fa:	7bfb      	ldrb	r3, [r7, #15]
 80070fc:	2b21      	cmp	r3, #33	; 0x21
 80070fe:	d11d      	bne.n	800713c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	685a      	ldr	r2, [r3, #4]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800710e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800711e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2220      	movs	r2, #32
 800712a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7ff fe36 	bl	8006da8 <HAL_I2C_MemTxCpltCallback>
}
 800713c:	bf00      	nop
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b22      	cmp	r3, #34	; 0x22
 8007156:	f040 80ac 	bne.w	80072b2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800715e:	b29b      	uxth	r3, r3
 8007160:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2b03      	cmp	r3, #3
 8007166:	d921      	bls.n	80071ac <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	691a      	ldr	r2, [r3, #16]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007172:	b2d2      	uxtb	r2, r2
 8007174:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717a:	1c5a      	adds	r2, r3, #1
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007184:	b29b      	uxth	r3, r3
 8007186:	3b01      	subs	r3, #1
 8007188:	b29a      	uxth	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007192:	b29b      	uxth	r3, r3
 8007194:	2b03      	cmp	r3, #3
 8007196:	f040 808c 	bne.w	80072b2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071a8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80071aa:	e082      	b.n	80072b2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d075      	beq.n	80072a0 <I2C_MasterReceive_RXNE+0x15c>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d002      	beq.n	80071c0 <I2C_MasterReceive_RXNE+0x7c>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d16f      	bne.n	80072a0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f001 fa27 	bl	8008614 <I2C_WaitOnSTOPRequestThroughIT>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d142      	bne.n	8007252 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071da:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	685a      	ldr	r2, [r3, #4]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80071ea:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	691a      	ldr	r2, [r3, #16]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f6:	b2d2      	uxtb	r2, r2
 80071f8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fe:	1c5a      	adds	r2, r3, #1
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007208:	b29b      	uxth	r3, r3
 800720a:	3b01      	subs	r3, #1
 800720c:	b29a      	uxth	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2220      	movs	r2, #32
 8007216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b40      	cmp	r3, #64	; 0x40
 8007224:	d10a      	bne.n	800723c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7ff fdc1 	bl	8006dbc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800723a:	e03a      	b.n	80072b2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2212      	movs	r2, #18
 8007248:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7ff fd76 	bl	8006d3c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007250:	e02f      	b.n	80072b2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007260:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	691a      	ldr	r2, [r3, #16]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726c:	b2d2      	uxtb	r2, r2
 800726e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007274:	1c5a      	adds	r2, r3, #1
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800727e:	b29b      	uxth	r3, r3
 8007280:	3b01      	subs	r3, #1
 8007282:	b29a      	uxth	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2220      	movs	r2, #32
 800728c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7ff fd99 	bl	8006dd0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800729e:	e008      	b.n	80072b2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072ae:	605a      	str	r2, [r3, #4]
}
 80072b0:	e7ff      	b.n	80072b2 <I2C_MasterReceive_RXNE+0x16e>
 80072b2:	bf00      	nop
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b084      	sub	sp, #16
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	2b04      	cmp	r3, #4
 80072d0:	d11b      	bne.n	800730a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	685a      	ldr	r2, [r3, #4]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072e0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	691a      	ldr	r2, [r3, #16]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ec:	b2d2      	uxtb	r2, r2
 80072ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f4:	1c5a      	adds	r2, r3, #1
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072fe:	b29b      	uxth	r3, r3
 8007300:	3b01      	subs	r3, #1
 8007302:	b29a      	uxth	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007308:	e0bd      	b.n	8007486 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800730e:	b29b      	uxth	r3, r3
 8007310:	2b03      	cmp	r3, #3
 8007312:	d129      	bne.n	8007368 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007322:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2b04      	cmp	r3, #4
 8007328:	d00a      	beq.n	8007340 <I2C_MasterReceive_BTF+0x86>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2b02      	cmp	r3, #2
 800732e:	d007      	beq.n	8007340 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800733e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	691a      	ldr	r2, [r3, #16]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734a:	b2d2      	uxtb	r2, r2
 800734c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007352:	1c5a      	adds	r2, r3, #1
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800735c:	b29b      	uxth	r3, r3
 800735e:	3b01      	subs	r3, #1
 8007360:	b29a      	uxth	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007366:	e08e      	b.n	8007486 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800736c:	b29b      	uxth	r3, r3
 800736e:	2b02      	cmp	r3, #2
 8007370:	d176      	bne.n	8007460 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d002      	beq.n	800737e <I2C_MasterReceive_BTF+0xc4>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2b10      	cmp	r3, #16
 800737c:	d108      	bne.n	8007390 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800738c:	601a      	str	r2, [r3, #0]
 800738e:	e019      	b.n	80073c4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2b04      	cmp	r3, #4
 8007394:	d002      	beq.n	800739c <I2C_MasterReceive_BTF+0xe2>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2b02      	cmp	r3, #2
 800739a:	d108      	bne.n	80073ae <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073aa:	601a      	str	r2, [r3, #0]
 80073ac:	e00a      	b.n	80073c4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2b10      	cmp	r3, #16
 80073b2:	d007      	beq.n	80073c4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073c2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	691a      	ldr	r2, [r3, #16]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ce:	b2d2      	uxtb	r2, r2
 80073d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d6:	1c5a      	adds	r2, r3, #1
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	3b01      	subs	r3, #1
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	691a      	ldr	r2, [r3, #16]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f4:	b2d2      	uxtb	r2, r2
 80073f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fc:	1c5a      	adds	r2, r3, #1
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007406:	b29b      	uxth	r3, r3
 8007408:	3b01      	subs	r3, #1
 800740a:	b29a      	uxth	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800741e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2220      	movs	r2, #32
 8007424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b40      	cmp	r3, #64	; 0x40
 8007432:	d10a      	bne.n	800744a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7ff fcba 	bl	8006dbc <HAL_I2C_MemRxCpltCallback>
}
 8007448:	e01d      	b.n	8007486 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2212      	movs	r2, #18
 8007456:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f7ff fc6f 	bl	8006d3c <HAL_I2C_MasterRxCpltCallback>
}
 800745e:	e012      	b.n	8007486 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	691a      	ldr	r2, [r3, #16]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746a:	b2d2      	uxtb	r2, r2
 800746c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007472:	1c5a      	adds	r2, r3, #1
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800747c:	b29b      	uxth	r3, r3
 800747e:	3b01      	subs	r3, #1
 8007480:	b29a      	uxth	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007486:	bf00      	nop
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800748e:	b480      	push	{r7}
 8007490:	b083      	sub	sp, #12
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b40      	cmp	r3, #64	; 0x40
 80074a0:	d117      	bne.n	80074d2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d109      	bne.n	80074be <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	461a      	mov	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80074ba:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80074bc:	e067      	b.n	800758e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	f043 0301 	orr.w	r3, r3, #1
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	611a      	str	r2, [r3, #16]
}
 80074d0:	e05d      	b.n	800758e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074da:	d133      	bne.n	8007544 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	2b21      	cmp	r3, #33	; 0x21
 80074e6:	d109      	bne.n	80074fc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	461a      	mov	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80074f8:	611a      	str	r2, [r3, #16]
 80074fa:	e008      	b.n	800750e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007500:	b2db      	uxtb	r3, r3
 8007502:	f043 0301 	orr.w	r3, r3, #1
 8007506:	b2da      	uxtb	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007512:	2b00      	cmp	r3, #0
 8007514:	d004      	beq.n	8007520 <I2C_Master_SB+0x92>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800751a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800751c:	2b00      	cmp	r3, #0
 800751e:	d108      	bne.n	8007532 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007524:	2b00      	cmp	r3, #0
 8007526:	d032      	beq.n	800758e <I2C_Master_SB+0x100>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800752e:	2b00      	cmp	r3, #0
 8007530:	d02d      	beq.n	800758e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007540:	605a      	str	r2, [r3, #4]
}
 8007542:	e024      	b.n	800758e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10e      	bne.n	800756a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007550:	b29b      	uxth	r3, r3
 8007552:	11db      	asrs	r3, r3, #7
 8007554:	b2db      	uxtb	r3, r3
 8007556:	f003 0306 	and.w	r3, r3, #6
 800755a:	b2db      	uxtb	r3, r3
 800755c:	f063 030f 	orn	r3, r3, #15
 8007560:	b2da      	uxtb	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	611a      	str	r2, [r3, #16]
}
 8007568:	e011      	b.n	800758e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800756e:	2b01      	cmp	r3, #1
 8007570:	d10d      	bne.n	800758e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007576:	b29b      	uxth	r3, r3
 8007578:	11db      	asrs	r3, r3, #7
 800757a:	b2db      	uxtb	r3, r3
 800757c:	f003 0306 	and.w	r3, r3, #6
 8007580:	b2db      	uxtb	r3, r3
 8007582:	f063 030e 	orn	r3, r3, #14
 8007586:	b2da      	uxtb	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	611a      	str	r2, [r3, #16]
}
 800758e:	bf00      	nop
 8007590:	370c      	adds	r7, #12
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800759a:	b480      	push	{r7}
 800759c:	b083      	sub	sp, #12
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075a6:	b2da      	uxtb	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d004      	beq.n	80075c0 <I2C_Master_ADD10+0x26>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d108      	bne.n	80075d2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00c      	beq.n	80075e2 <I2C_Master_ADD10+0x48>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d007      	beq.n	80075e2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	685a      	ldr	r2, [r3, #4]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075e0:	605a      	str	r2, [r3, #4]
  }
}
 80075e2:	bf00      	nop
 80075e4:	370c      	adds	r7, #12
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b091      	sub	sp, #68	; 0x44
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007604:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007612:	b2db      	uxtb	r3, r3
 8007614:	2b22      	cmp	r3, #34	; 0x22
 8007616:	f040 8169 	bne.w	80078ec <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10f      	bne.n	8007642 <I2C_Master_ADDR+0x54>
 8007622:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007626:	2b40      	cmp	r3, #64	; 0x40
 8007628:	d10b      	bne.n	8007642 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800762a:	2300      	movs	r3, #0
 800762c:	633b      	str	r3, [r7, #48]	; 0x30
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	695b      	ldr	r3, [r3, #20]
 8007634:	633b      	str	r3, [r7, #48]	; 0x30
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	633b      	str	r3, [r7, #48]	; 0x30
 800763e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007640:	e160      	b.n	8007904 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007646:	2b00      	cmp	r3, #0
 8007648:	d11d      	bne.n	8007686 <I2C_Master_ADDR+0x98>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007652:	d118      	bne.n	8007686 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007654:	2300      	movs	r3, #0
 8007656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007668:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007678:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	651a      	str	r2, [r3, #80]	; 0x50
 8007684:	e13e      	b.n	8007904 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800768a:	b29b      	uxth	r3, r3
 800768c:	2b00      	cmp	r3, #0
 800768e:	d113      	bne.n	80076b8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007690:	2300      	movs	r3, #0
 8007692:	62bb      	str	r3, [r7, #40]	; 0x28
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	62bb      	str	r3, [r7, #40]	; 0x28
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80076a4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076b4:	601a      	str	r2, [r3, #0]
 80076b6:	e115      	b.n	80078e4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076bc:	b29b      	uxth	r3, r3
 80076be:	2b01      	cmp	r3, #1
 80076c0:	f040 808a 	bne.w	80077d8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80076c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80076ca:	d137      	bne.n	800773c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076da:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076ea:	d113      	bne.n	8007714 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076fa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076fc:	2300      	movs	r3, #0
 80076fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	627b      	str	r3, [r7, #36]	; 0x24
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	627b      	str	r3, [r7, #36]	; 0x24
 8007710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007712:	e0e7      	b.n	80078e4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007714:	2300      	movs	r3, #0
 8007716:	623b      	str	r3, [r7, #32]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	623b      	str	r3, [r7, #32]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	623b      	str	r3, [r7, #32]
 8007728:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007738:	601a      	str	r2, [r3, #0]
 800773a:	e0d3      	b.n	80078e4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800773c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773e:	2b08      	cmp	r3, #8
 8007740:	d02e      	beq.n	80077a0 <I2C_Master_ADDR+0x1b2>
 8007742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007744:	2b20      	cmp	r3, #32
 8007746:	d02b      	beq.n	80077a0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800774a:	2b12      	cmp	r3, #18
 800774c:	d102      	bne.n	8007754 <I2C_Master_ADDR+0x166>
 800774e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007750:	2b01      	cmp	r3, #1
 8007752:	d125      	bne.n	80077a0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007756:	2b04      	cmp	r3, #4
 8007758:	d00e      	beq.n	8007778 <I2C_Master_ADDR+0x18a>
 800775a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775c:	2b02      	cmp	r3, #2
 800775e:	d00b      	beq.n	8007778 <I2C_Master_ADDR+0x18a>
 8007760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007762:	2b10      	cmp	r3, #16
 8007764:	d008      	beq.n	8007778 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007774:	601a      	str	r2, [r3, #0]
 8007776:	e007      	b.n	8007788 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007786:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007788:	2300      	movs	r3, #0
 800778a:	61fb      	str	r3, [r7, #28]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	61fb      	str	r3, [r7, #28]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	61fb      	str	r3, [r7, #28]
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	e0a1      	b.n	80078e4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077ae:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077b0:	2300      	movs	r3, #0
 80077b2:	61bb      	str	r3, [r7, #24]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	61bb      	str	r3, [r7, #24]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	61bb      	str	r3, [r7, #24]
 80077c4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	e085      	b.n	80078e4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077dc:	b29b      	uxth	r3, r3
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d14d      	bne.n	800787e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80077e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e4:	2b04      	cmp	r3, #4
 80077e6:	d016      	beq.n	8007816 <I2C_Master_ADDR+0x228>
 80077e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d013      	beq.n	8007816 <I2C_Master_ADDR+0x228>
 80077ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f0:	2b10      	cmp	r3, #16
 80077f2:	d010      	beq.n	8007816 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007802:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007812:	601a      	str	r2, [r3, #0]
 8007814:	e007      	b.n	8007826 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007824:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007834:	d117      	bne.n	8007866 <I2C_Master_ADDR+0x278>
 8007836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007838:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800783c:	d00b      	beq.n	8007856 <I2C_Master_ADDR+0x268>
 800783e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007840:	2b01      	cmp	r3, #1
 8007842:	d008      	beq.n	8007856 <I2C_Master_ADDR+0x268>
 8007844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007846:	2b08      	cmp	r3, #8
 8007848:	d005      	beq.n	8007856 <I2C_Master_ADDR+0x268>
 800784a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784c:	2b10      	cmp	r3, #16
 800784e:	d002      	beq.n	8007856 <I2C_Master_ADDR+0x268>
 8007850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007852:	2b20      	cmp	r3, #32
 8007854:	d107      	bne.n	8007866 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	685a      	ldr	r2, [r3, #4]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007864:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007866:	2300      	movs	r3, #0
 8007868:	617b      	str	r3, [r7, #20]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	695b      	ldr	r3, [r3, #20]
 8007870:	617b      	str	r3, [r7, #20]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	617b      	str	r3, [r7, #20]
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	e032      	b.n	80078e4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800788c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800789c:	d117      	bne.n	80078ce <I2C_Master_ADDR+0x2e0>
 800789e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80078a4:	d00b      	beq.n	80078be <I2C_Master_ADDR+0x2d0>
 80078a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d008      	beq.n	80078be <I2C_Master_ADDR+0x2d0>
 80078ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ae:	2b08      	cmp	r3, #8
 80078b0:	d005      	beq.n	80078be <I2C_Master_ADDR+0x2d0>
 80078b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b4:	2b10      	cmp	r3, #16
 80078b6:	d002      	beq.n	80078be <I2C_Master_ADDR+0x2d0>
 80078b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ba:	2b20      	cmp	r3, #32
 80078bc:	d107      	bne.n	80078ce <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	685a      	ldr	r2, [r3, #4]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078cc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078ce:	2300      	movs	r3, #0
 80078d0:	613b      	str	r3, [r7, #16]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	613b      	str	r3, [r7, #16]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	613b      	str	r3, [r7, #16]
 80078e2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80078ea:	e00b      	b.n	8007904 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078ec:	2300      	movs	r3, #0
 80078ee:	60fb      	str	r3, [r7, #12]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	60fb      	str	r3, [r7, #12]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	60fb      	str	r3, [r7, #12]
 8007900:	68fb      	ldr	r3, [r7, #12]
}
 8007902:	e7ff      	b.n	8007904 <I2C_Master_ADDR+0x316>
 8007904:	bf00      	nop
 8007906:	3744      	adds	r7, #68	; 0x44
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800791e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007924:	b29b      	uxth	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d02b      	beq.n	8007982 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792e:	781a      	ldrb	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793a:	1c5a      	adds	r2, r3, #1
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007944:	b29b      	uxth	r3, r3
 8007946:	3b01      	subs	r3, #1
 8007948:	b29a      	uxth	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007952:	b29b      	uxth	r3, r3
 8007954:	2b00      	cmp	r3, #0
 8007956:	d114      	bne.n	8007982 <I2C_SlaveTransmit_TXE+0x72>
 8007958:	7bfb      	ldrb	r3, [r7, #15]
 800795a:	2b29      	cmp	r3, #41	; 0x29
 800795c:	d111      	bne.n	8007982 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800796c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2221      	movs	r2, #33	; 0x21
 8007972:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2228      	movs	r2, #40	; 0x28
 8007978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7ff f9e7 	bl	8006d50 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007982:	bf00      	nop
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800798a:	b480      	push	{r7}
 800798c:	b083      	sub	sp, #12
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007996:	b29b      	uxth	r3, r3
 8007998:	2b00      	cmp	r3, #0
 800799a:	d011      	beq.n	80079c0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a0:	781a      	ldrb	r2, [r3, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	1c5a      	adds	r2, r3, #1
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	3b01      	subs	r3, #1
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d02c      	beq.n	8007a40 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	691a      	ldr	r2, [r3, #16]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f0:	b2d2      	uxtb	r2, r2
 80079f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f8:	1c5a      	adds	r2, r3, #1
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	3b01      	subs	r3, #1
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d114      	bne.n	8007a40 <I2C_SlaveReceive_RXNE+0x74>
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
 8007a18:	2b2a      	cmp	r3, #42	; 0x2a
 8007a1a:	d111      	bne.n	8007a40 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	685a      	ldr	r2, [r3, #4]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a2a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2222      	movs	r2, #34	; 0x22
 8007a30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2228      	movs	r2, #40	; 0x28
 8007a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7ff f992 	bl	8006d64 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007a40:	bf00      	nop
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d012      	beq.n	8007a80 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	691a      	ldr	r2, [r3, #16]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a64:	b2d2      	uxtb	r2, r2
 8007a66:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6c:	1c5a      	adds	r2, r3, #1
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007a96:	2300      	movs	r3, #0
 8007a98:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007aa6:	2b28      	cmp	r3, #40	; 0x28
 8007aa8:	d127      	bne.n	8007afa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	685a      	ldr	r2, [r3, #4]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ab8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	089b      	lsrs	r3, r3, #2
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d101      	bne.n	8007aca <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	09db      	lsrs	r3, r3, #7
 8007ace:	f003 0301 	and.w	r3, r3, #1
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d103      	bne.n	8007ade <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	81bb      	strh	r3, [r7, #12]
 8007adc:	e002      	b.n	8007ae4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007aec:	89ba      	ldrh	r2, [r7, #12]
 8007aee:	7bfb      	ldrb	r3, [r7, #15]
 8007af0:	4619      	mov	r1, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f7ff f940 	bl	8006d78 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007af8:	e00e      	b.n	8007b18 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007afa:	2300      	movs	r3, #0
 8007afc:	60bb      	str	r3, [r7, #8]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	695b      	ldr	r3, [r3, #20]
 8007b04:	60bb      	str	r3, [r7, #8]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	60bb      	str	r3, [r7, #8]
 8007b0e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007b18:	bf00      	nop
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b2e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	685a      	ldr	r2, [r3, #4]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b3e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007b40:	2300      	movs	r3, #0
 8007b42:	60bb      	str	r3, [r7, #8]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	60bb      	str	r3, [r7, #8]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f042 0201 	orr.w	r2, r2, #1
 8007b5a:	601a      	str	r2, [r3, #0]
 8007b5c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b6c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b7c:	d172      	bne.n	8007c64 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007b7e:	7bfb      	ldrb	r3, [r7, #15]
 8007b80:	2b22      	cmp	r3, #34	; 0x22
 8007b82:	d002      	beq.n	8007b8a <I2C_Slave_STOPF+0x6a>
 8007b84:	7bfb      	ldrb	r3, [r7, #15]
 8007b86:	2b2a      	cmp	r3, #42	; 0x2a
 8007b88:	d135      	bne.n	8007bf6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d005      	beq.n	8007bae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba6:	f043 0204 	orr.w	r2, r3, #4
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	685a      	ldr	r2, [r3, #4]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bbc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7fe f86e 	bl	8005ca4 <HAL_DMA_GetState>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d049      	beq.n	8007c62 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd2:	4a69      	ldr	r2, [pc, #420]	; (8007d78 <I2C_Slave_STOPF+0x258>)
 8007bd4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fd feb6 	bl	800594c <HAL_DMA_Abort_IT>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d03d      	beq.n	8007c62 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007bf0:	4610      	mov	r0, r2
 8007bf2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007bf4:	e035      	b.n	8007c62 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d005      	beq.n	8007c1a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c12:	f043 0204 	orr.w	r2, r3, #4
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	685a      	ldr	r2, [r3, #4]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c28:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fe f838 	bl	8005ca4 <HAL_DMA_GetState>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d014      	beq.n	8007c64 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c3e:	4a4e      	ldr	r2, [pc, #312]	; (8007d78 <I2C_Slave_STOPF+0x258>)
 8007c40:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fd fe80 	bl	800594c <HAL_DMA_Abort_IT>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d008      	beq.n	8007c64 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007c5c:	4610      	mov	r0, r2
 8007c5e:	4798      	blx	r3
 8007c60:	e000      	b.n	8007c64 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007c62:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d03e      	beq.n	8007cec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	f003 0304 	and.w	r3, r3, #4
 8007c78:	2b04      	cmp	r3, #4
 8007c7a:	d112      	bne.n	8007ca2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	691a      	ldr	r2, [r3, #16]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c86:	b2d2      	uxtb	r2, r2
 8007c88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8e:	1c5a      	adds	r2, r3, #1
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	695b      	ldr	r3, [r3, #20]
 8007ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cac:	2b40      	cmp	r3, #64	; 0x40
 8007cae:	d112      	bne.n	8007cd6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	691a      	ldr	r2, [r3, #16]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cba:	b2d2      	uxtb	r2, r2
 8007cbc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc2:	1c5a      	adds	r2, r3, #1
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d005      	beq.n	8007cec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce4:	f043 0204 	orr.w	r2, r3, #4
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d003      	beq.n	8007cfc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f8b3 	bl	8007e60 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007cfa:	e039      	b.n	8007d70 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007cfc:	7bfb      	ldrb	r3, [r7, #15]
 8007cfe:	2b2a      	cmp	r3, #42	; 0x2a
 8007d00:	d109      	bne.n	8007d16 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2228      	movs	r2, #40	; 0x28
 8007d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f7ff f827 	bl	8006d64 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b28      	cmp	r3, #40	; 0x28
 8007d20:	d111      	bne.n	8007d46 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a15      	ldr	r2, [pc, #84]	; (8007d7c <I2C_Slave_STOPF+0x25c>)
 8007d26:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2220      	movs	r2, #32
 8007d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7ff f828 	bl	8006d94 <HAL_I2C_ListenCpltCallback>
}
 8007d44:	e014      	b.n	8007d70 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d4a:	2b22      	cmp	r3, #34	; 0x22
 8007d4c:	d002      	beq.n	8007d54 <I2C_Slave_STOPF+0x234>
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
 8007d50:	2b22      	cmp	r3, #34	; 0x22
 8007d52:	d10d      	bne.n	8007d70 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2220      	movs	r2, #32
 8007d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7fe fffa 	bl	8006d64 <HAL_I2C_SlaveRxCpltCallback>
}
 8007d70:	bf00      	nop
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	08008295 	.word	0x08008295
 8007d7c:	ffff0000 	.word	0xffff0000

08007d80 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d94:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	2b08      	cmp	r3, #8
 8007d9a:	d002      	beq.n	8007da2 <I2C_Slave_AF+0x22>
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	2b20      	cmp	r3, #32
 8007da0:	d129      	bne.n	8007df6 <I2C_Slave_AF+0x76>
 8007da2:	7bfb      	ldrb	r3, [r7, #15]
 8007da4:	2b28      	cmp	r3, #40	; 0x28
 8007da6:	d126      	bne.n	8007df6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a2c      	ldr	r2, [pc, #176]	; (8007e5c <I2C_Slave_AF+0xdc>)
 8007dac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	685a      	ldr	r2, [r3, #4]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007dbc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007dc6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dd6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2220      	movs	r2, #32
 8007de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7fe ffd0 	bl	8006d94 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007df4:	e02e      	b.n	8007e54 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007df6:	7bfb      	ldrb	r3, [r7, #15]
 8007df8:	2b21      	cmp	r3, #33	; 0x21
 8007dfa:	d126      	bne.n	8007e4a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a17      	ldr	r2, [pc, #92]	; (8007e5c <I2C_Slave_AF+0xdc>)
 8007e00:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2221      	movs	r2, #33	; 0x21
 8007e06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2220      	movs	r2, #32
 8007e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	685a      	ldr	r2, [r3, #4]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e26:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e30:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e40:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f7fe ff84 	bl	8006d50 <HAL_I2C_SlaveTxCpltCallback>
}
 8007e48:	e004      	b.n	8007e54 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e52:	615a      	str	r2, [r3, #20]
}
 8007e54:	bf00      	nop
 8007e56:	3710      	adds	r7, #16
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	ffff0000 	.word	0xffff0000

08007e60 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e6e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e76:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007e78:	7bbb      	ldrb	r3, [r7, #14]
 8007e7a:	2b10      	cmp	r3, #16
 8007e7c:	d002      	beq.n	8007e84 <I2C_ITError+0x24>
 8007e7e:	7bbb      	ldrb	r3, [r7, #14]
 8007e80:	2b40      	cmp	r3, #64	; 0x40
 8007e82:	d10a      	bne.n	8007e9a <I2C_ITError+0x3a>
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
 8007e86:	2b22      	cmp	r3, #34	; 0x22
 8007e88:	d107      	bne.n	8007e9a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e98:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
 8007e9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007ea0:	2b28      	cmp	r3, #40	; 0x28
 8007ea2:	d107      	bne.n	8007eb4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2228      	movs	r2, #40	; 0x28
 8007eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007eb2:	e015      	b.n	8007ee0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ebe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ec2:	d00a      	beq.n	8007eda <I2C_ITError+0x7a>
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
 8007ec6:	2b60      	cmp	r3, #96	; 0x60
 8007ec8:	d007      	beq.n	8007eda <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2220      	movs	r2, #32
 8007ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eee:	d162      	bne.n	8007fb6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	685a      	ldr	r2, [r3, #4]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007efe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d020      	beq.n	8007f50 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f12:	4a6a      	ldr	r2, [pc, #424]	; (80080bc <I2C_ITError+0x25c>)
 8007f14:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fd fd16 	bl	800594c <HAL_DMA_Abort_IT>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f000 8089 	beq.w	800803a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f022 0201 	bic.w	r2, r2, #1
 8007f36:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2220      	movs	r2, #32
 8007f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007f4a:	4610      	mov	r0, r2
 8007f4c:	4798      	blx	r3
 8007f4e:	e074      	b.n	800803a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f54:	4a59      	ldr	r2, [pc, #356]	; (80080bc <I2C_ITError+0x25c>)
 8007f56:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7fd fcf5 	bl	800594c <HAL_DMA_Abort_IT>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d068      	beq.n	800803a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f72:	2b40      	cmp	r3, #64	; 0x40
 8007f74:	d10b      	bne.n	8007f8e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	691a      	ldr	r2, [r3, #16]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f80:	b2d2      	uxtb	r2, r2
 8007f82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f88:	1c5a      	adds	r2, r3, #1
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f022 0201 	bic.w	r2, r2, #1
 8007f9c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2220      	movs	r2, #32
 8007fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007fb0:	4610      	mov	r0, r2
 8007fb2:	4798      	blx	r3
 8007fb4:	e041      	b.n	800803a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	2b60      	cmp	r3, #96	; 0x60
 8007fc0:	d125      	bne.n	800800e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2220      	movs	r2, #32
 8007fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fda:	2b40      	cmp	r3, #64	; 0x40
 8007fdc:	d10b      	bne.n	8007ff6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	691a      	ldr	r2, [r3, #16]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe8:	b2d2      	uxtb	r2, r2
 8007fea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff0:	1c5a      	adds	r2, r3, #1
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f022 0201 	bic.w	r2, r2, #1
 8008004:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f7fe feec 	bl	8006de4 <HAL_I2C_AbortCpltCallback>
 800800c:	e015      	b.n	800803a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	695b      	ldr	r3, [r3, #20]
 8008014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008018:	2b40      	cmp	r3, #64	; 0x40
 800801a:	d10b      	bne.n	8008034 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	691a      	ldr	r2, [r3, #16]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008026:	b2d2      	uxtb	r2, r2
 8008028:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802e:	1c5a      	adds	r2, r3, #1
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f7fe fecb 	bl	8006dd0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	f003 0301 	and.w	r3, r3, #1
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10e      	bne.n	8008068 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008050:	2b00      	cmp	r3, #0
 8008052:	d109      	bne.n	8008068 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800805a:	2b00      	cmp	r3, #0
 800805c:	d104      	bne.n	8008068 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008064:	2b00      	cmp	r3, #0
 8008066:	d007      	beq.n	8008078 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	685a      	ldr	r2, [r3, #4]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008076:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800807e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008084:	f003 0304 	and.w	r3, r3, #4
 8008088:	2b04      	cmp	r3, #4
 800808a:	d113      	bne.n	80080b4 <I2C_ITError+0x254>
 800808c:	7bfb      	ldrb	r3, [r7, #15]
 800808e:	2b28      	cmp	r3, #40	; 0x28
 8008090:	d110      	bne.n	80080b4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a0a      	ldr	r2, [pc, #40]	; (80080c0 <I2C_ITError+0x260>)
 8008096:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2220      	movs	r2, #32
 80080a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7fe fe70 	bl	8006d94 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80080b4:	bf00      	nop
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	08008295 	.word	0x08008295
 80080c0:	ffff0000 	.word	0xffff0000

080080c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b088      	sub	sp, #32
 80080c8:	af02      	add	r7, sp, #8
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	4608      	mov	r0, r1
 80080ce:	4611      	mov	r1, r2
 80080d0:	461a      	mov	r2, r3
 80080d2:	4603      	mov	r3, r0
 80080d4:	817b      	strh	r3, [r7, #10]
 80080d6:	460b      	mov	r3, r1
 80080d8:	813b      	strh	r3, [r7, #8]
 80080da:	4613      	mov	r3, r2
 80080dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80080ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80080fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	2200      	movs	r2, #0
 8008106:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f000 f96a 	bl	80083e4 <I2C_WaitOnFlagUntilTimeout>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00d      	beq.n	8008132 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008124:	d103      	bne.n	800812e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f44f 7200 	mov.w	r2, #512	; 0x200
 800812c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e0aa      	b.n	8008288 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008132:	897b      	ldrh	r3, [r7, #10]
 8008134:	b2db      	uxtb	r3, r3
 8008136:	461a      	mov	r2, r3
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008140:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008144:	6a3a      	ldr	r2, [r7, #32]
 8008146:	4952      	ldr	r1, [pc, #328]	; (8008290 <I2C_RequestMemoryRead+0x1cc>)
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f000 f9a2 	bl	8008492 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d001      	beq.n	8008158 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e097      	b.n	8008288 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008158:	2300      	movs	r3, #0
 800815a:	617b      	str	r3, [r7, #20]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	617b      	str	r3, [r7, #20]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	617b      	str	r3, [r7, #20]
 800816c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800816e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008170:	6a39      	ldr	r1, [r7, #32]
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f000 fa0c 	bl	8008590 <I2C_WaitOnTXEFlagUntilTimeout>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00d      	beq.n	800819a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008182:	2b04      	cmp	r3, #4
 8008184:	d107      	bne.n	8008196 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008194:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e076      	b.n	8008288 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800819a:	88fb      	ldrh	r3, [r7, #6]
 800819c:	2b01      	cmp	r3, #1
 800819e:	d105      	bne.n	80081ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80081a0:	893b      	ldrh	r3, [r7, #8]
 80081a2:	b2da      	uxtb	r2, r3
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	611a      	str	r2, [r3, #16]
 80081aa:	e021      	b.n	80081f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80081ac:	893b      	ldrh	r3, [r7, #8]
 80081ae:	0a1b      	lsrs	r3, r3, #8
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	b2da      	uxtb	r2, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081bc:	6a39      	ldr	r1, [r7, #32]
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f000 f9e6 	bl	8008590 <I2C_WaitOnTXEFlagUntilTimeout>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00d      	beq.n	80081e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ce:	2b04      	cmp	r3, #4
 80081d0:	d107      	bne.n	80081e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e050      	b.n	8008288 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80081e6:	893b      	ldrh	r3, [r7, #8]
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081f2:	6a39      	ldr	r1, [r7, #32]
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f000 f9cb 	bl	8008590 <I2C_WaitOnTXEFlagUntilTimeout>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00d      	beq.n	800821c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008204:	2b04      	cmp	r3, #4
 8008206:	d107      	bne.n	8008218 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008216:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	e035      	b.n	8008288 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800822a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800822c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	6a3b      	ldr	r3, [r7, #32]
 8008232:	2200      	movs	r2, #0
 8008234:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f000 f8d3 	bl	80083e4 <I2C_WaitOnFlagUntilTimeout>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00d      	beq.n	8008260 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800824e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008252:	d103      	bne.n	800825c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f44f 7200 	mov.w	r2, #512	; 0x200
 800825a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800825c:	2303      	movs	r3, #3
 800825e:	e013      	b.n	8008288 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008260:	897b      	ldrh	r3, [r7, #10]
 8008262:	b2db      	uxtb	r3, r3
 8008264:	f043 0301 	orr.w	r3, r3, #1
 8008268:	b2da      	uxtb	r2, r3
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008272:	6a3a      	ldr	r2, [r7, #32]
 8008274:	4906      	ldr	r1, [pc, #24]	; (8008290 <I2C_RequestMemoryRead+0x1cc>)
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f000 f90b 	bl	8008492 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e000      	b.n	8008288 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3718      	adds	r7, #24
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	00010002 	.word	0x00010002

08008294 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800829c:	2300      	movs	r3, #0
 800829e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082ac:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80082ae:	4b4b      	ldr	r3, [pc, #300]	; (80083dc <I2C_DMAAbort+0x148>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	08db      	lsrs	r3, r3, #3
 80082b4:	4a4a      	ldr	r2, [pc, #296]	; (80083e0 <I2C_DMAAbort+0x14c>)
 80082b6:	fba2 2303 	umull	r2, r3, r2, r3
 80082ba:	0a1a      	lsrs	r2, r3, #8
 80082bc:	4613      	mov	r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4413      	add	r3, r2
 80082c2:	00da      	lsls	r2, r3, #3
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d106      	bne.n	80082dc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d2:	f043 0220 	orr.w	r2, r3, #32
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80082da:	e00a      	b.n	80082f2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	3b01      	subs	r3, #1
 80082e0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082f0:	d0ea      	beq.n	80082c8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d003      	beq.n	8008302 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082fe:	2200      	movs	r2, #0
 8008300:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008306:	2b00      	cmp	r3, #0
 8008308:	d003      	beq.n	8008312 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800830e:	2200      	movs	r2, #0
 8008310:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008320:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	2200      	movs	r2, #0
 8008326:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800832c:	2b00      	cmp	r3, #0
 800832e:	d003      	beq.n	8008338 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008334:	2200      	movs	r2, #0
 8008336:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833c:	2b00      	cmp	r3, #0
 800833e:	d003      	beq.n	8008348 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008344:	2200      	movs	r2, #0
 8008346:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f022 0201 	bic.w	r2, r2, #1
 8008356:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800835e:	b2db      	uxtb	r3, r3
 8008360:	2b60      	cmp	r3, #96	; 0x60
 8008362:	d10e      	bne.n	8008382 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	2220      	movs	r2, #32
 8008368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	2200      	movs	r2, #0
 8008378:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800837a:	6978      	ldr	r0, [r7, #20]
 800837c:	f7fe fd32 	bl	8006de4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008380:	e027      	b.n	80083d2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008382:	7cfb      	ldrb	r3, [r7, #19]
 8008384:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008388:	2b28      	cmp	r3, #40	; 0x28
 800838a:	d117      	bne.n	80083bc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f042 0201 	orr.w	r2, r2, #1
 800839a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80083aa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	2200      	movs	r2, #0
 80083b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	2228      	movs	r2, #40	; 0x28
 80083b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80083ba:	e007      	b.n	80083cc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	2220      	movs	r2, #32
 80083c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80083cc:	6978      	ldr	r0, [r7, #20]
 80083ce:	f7fe fcff 	bl	8006dd0 <HAL_I2C_ErrorCallback>
}
 80083d2:	bf00      	nop
 80083d4:	3718      	adds	r7, #24
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	20000008 	.word	0x20000008
 80083e0:	14f8b589 	.word	0x14f8b589

080083e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	603b      	str	r3, [r7, #0]
 80083f0:	4613      	mov	r3, r2
 80083f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80083f4:	e025      	b.n	8008442 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fc:	d021      	beq.n	8008442 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083fe:	f7fc fc37 	bl	8004c70 <HAL_GetTick>
 8008402:	4602      	mov	r2, r0
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	1ad3      	subs	r3, r2, r3
 8008408:	683a      	ldr	r2, [r7, #0]
 800840a:	429a      	cmp	r2, r3
 800840c:	d302      	bcc.n	8008414 <I2C_WaitOnFlagUntilTimeout+0x30>
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d116      	bne.n	8008442 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2200      	movs	r2, #0
 8008418:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2220      	movs	r2, #32
 800841e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842e:	f043 0220 	orr.w	r2, r3, #32
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	e023      	b.n	800848a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	0c1b      	lsrs	r3, r3, #16
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b01      	cmp	r3, #1
 800844a:	d10d      	bne.n	8008468 <I2C_WaitOnFlagUntilTimeout+0x84>
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	43da      	mvns	r2, r3
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	4013      	ands	r3, r2
 8008458:	b29b      	uxth	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	bf0c      	ite	eq
 800845e:	2301      	moveq	r3, #1
 8008460:	2300      	movne	r3, #0
 8008462:	b2db      	uxtb	r3, r3
 8008464:	461a      	mov	r2, r3
 8008466:	e00c      	b.n	8008482 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	43da      	mvns	r2, r3
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	4013      	ands	r3, r2
 8008474:	b29b      	uxth	r3, r3
 8008476:	2b00      	cmp	r3, #0
 8008478:	bf0c      	ite	eq
 800847a:	2301      	moveq	r3, #1
 800847c:	2300      	movne	r3, #0
 800847e:	b2db      	uxtb	r3, r3
 8008480:	461a      	mov	r2, r3
 8008482:	79fb      	ldrb	r3, [r7, #7]
 8008484:	429a      	cmp	r2, r3
 8008486:	d0b6      	beq.n	80083f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b084      	sub	sp, #16
 8008496:	af00      	add	r7, sp, #0
 8008498:	60f8      	str	r0, [r7, #12]
 800849a:	60b9      	str	r1, [r7, #8]
 800849c:	607a      	str	r2, [r7, #4]
 800849e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80084a0:	e051      	b.n	8008546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	695b      	ldr	r3, [r3, #20]
 80084a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084b0:	d123      	bne.n	80084fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80084ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2220      	movs	r2, #32
 80084d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2200      	movs	r2, #0
 80084de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e6:	f043 0204 	orr.w	r2, r3, #4
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	e046      	b.n	8008588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008500:	d021      	beq.n	8008546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008502:	f7fc fbb5 	bl	8004c70 <HAL_GetTick>
 8008506:	4602      	mov	r2, r0
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	429a      	cmp	r2, r3
 8008510:	d302      	bcc.n	8008518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d116      	bne.n	8008546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2220      	movs	r2, #32
 8008522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008532:	f043 0220 	orr.w	r2, r3, #32
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e020      	b.n	8008588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	0c1b      	lsrs	r3, r3, #16
 800854a:	b2db      	uxtb	r3, r3
 800854c:	2b01      	cmp	r3, #1
 800854e:	d10c      	bne.n	800856a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	43da      	mvns	r2, r3
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	4013      	ands	r3, r2
 800855c:	b29b      	uxth	r3, r3
 800855e:	2b00      	cmp	r3, #0
 8008560:	bf14      	ite	ne
 8008562:	2301      	movne	r3, #1
 8008564:	2300      	moveq	r3, #0
 8008566:	b2db      	uxtb	r3, r3
 8008568:	e00b      	b.n	8008582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	699b      	ldr	r3, [r3, #24]
 8008570:	43da      	mvns	r2, r3
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	4013      	ands	r3, r2
 8008576:	b29b      	uxth	r3, r3
 8008578:	2b00      	cmp	r3, #0
 800857a:	bf14      	ite	ne
 800857c:	2301      	movne	r3, #1
 800857e:	2300      	moveq	r3, #0
 8008580:	b2db      	uxtb	r3, r3
 8008582:	2b00      	cmp	r3, #0
 8008584:	d18d      	bne.n	80084a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008586:	2300      	movs	r3, #0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800859c:	e02d      	b.n	80085fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f000 f8c0 	bl	8008724 <I2C_IsAcknowledgeFailed>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e02d      	b.n	800860a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b4:	d021      	beq.n	80085fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085b6:	f7fc fb5b 	bl	8004c70 <HAL_GetTick>
 80085ba:	4602      	mov	r2, r0
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	68ba      	ldr	r2, [r7, #8]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d302      	bcc.n	80085cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d116      	bne.n	80085fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2220      	movs	r2, #32
 80085d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e6:	f043 0220 	orr.w	r2, r3, #32
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e007      	b.n	800860a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	695b      	ldr	r3, [r3, #20]
 8008600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008604:	2b80      	cmp	r3, #128	; 0x80
 8008606:	d1ca      	bne.n	800859e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
	...

08008614 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800861c:	2300      	movs	r3, #0
 800861e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008620:	4b13      	ldr	r3, [pc, #76]	; (8008670 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	08db      	lsrs	r3, r3, #3
 8008626:	4a13      	ldr	r2, [pc, #76]	; (8008674 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008628:	fba2 2303 	umull	r2, r3, r2, r3
 800862c:	0a1a      	lsrs	r2, r3, #8
 800862e:	4613      	mov	r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	4413      	add	r3, r2
 8008634:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	3b01      	subs	r3, #1
 800863a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d107      	bne.n	8008652 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008646:	f043 0220 	orr.w	r2, r3, #32
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e008      	b.n	8008664 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800865c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008660:	d0e9      	beq.n	8008636 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr
 8008670:	20000008 	.word	0x20000008
 8008674:	14f8b589 	.word	0x14f8b589

08008678 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008684:	e042      	b.n	800870c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	695b      	ldr	r3, [r3, #20]
 800868c:	f003 0310 	and.w	r3, r3, #16
 8008690:	2b10      	cmp	r3, #16
 8008692:	d119      	bne.n	80086c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f06f 0210 	mvn.w	r2, #16
 800869c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2200      	movs	r2, #0
 80086a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2220      	movs	r2, #32
 80086a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e029      	b.n	800871c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086c8:	f7fc fad2 	bl	8004c70 <HAL_GetTick>
 80086cc:	4602      	mov	r2, r0
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d302      	bcc.n	80086de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d116      	bne.n	800870c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2220      	movs	r2, #32
 80086e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f8:	f043 0220 	orr.w	r2, r3, #32
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	e007      	b.n	800871c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	695b      	ldr	r3, [r3, #20]
 8008712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008716:	2b40      	cmp	r3, #64	; 0x40
 8008718:	d1b5      	bne.n	8008686 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	695b      	ldr	r3, [r3, #20]
 8008732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800873a:	d11b      	bne.n	8008774 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008744:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2220      	movs	r2, #32
 8008750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008760:	f043 0204 	orr.w	r2, r3, #4
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	e000      	b.n	8008776 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008782:	b480      	push	{r7}
 8008784:	b083      	sub	sp, #12
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008792:	d103      	bne.n	800879c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800879a:	e007      	b.n	80087ac <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80087a4:	d102      	bne.n	80087ac <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2208      	movs	r2, #8
 80087aa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80087ac:	bf00      	nop
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b086      	sub	sp, #24
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d101      	bne.n	80087ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e267      	b.n	8008c9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 0301 	and.w	r3, r3, #1
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d075      	beq.n	80088c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80087d6:	4b88      	ldr	r3, [pc, #544]	; (80089f8 <HAL_RCC_OscConfig+0x240>)
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	f003 030c 	and.w	r3, r3, #12
 80087de:	2b04      	cmp	r3, #4
 80087e0:	d00c      	beq.n	80087fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087e2:	4b85      	ldr	r3, [pc, #532]	; (80089f8 <HAL_RCC_OscConfig+0x240>)
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80087ea:	2b08      	cmp	r3, #8
 80087ec:	d112      	bne.n	8008814 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087ee:	4b82      	ldr	r3, [pc, #520]	; (80089f8 <HAL_RCC_OscConfig+0x240>)
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087fa:	d10b      	bne.n	8008814 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087fc:	4b7e      	ldr	r3, [pc, #504]	; (80089f8 <HAL_RCC_OscConfig+0x240>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d05b      	beq.n	80088c0 <HAL_RCC_OscConfig+0x108>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d157      	bne.n	80088c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e242      	b.n	8008c9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800881c:	d106      	bne.n	800882c <HAL_RCC_OscConfig+0x74>
 800881e:	4b76      	ldr	r3, [pc, #472]	; (80089f8 <HAL_RCC_OscConfig+0x240>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a75      	ldr	r2, [pc, #468]	; (80089f8 <HAL_RCC_OscConfig+0x240>)
 8008824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008828:	6013      	str	r3, [r2, #0]
 800882a:	e01d      	b.n	8008868 <HAL_RCC_OscConfig+0xb0>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008834:	d10c      	bne.n	8008850 <HAL_RCC_OscConfig+0x98>
 8008836:	4b70      	ldr	r3, [pc, #448]	; (80089f8 <HAL_RCC_OscConfig+0x240>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a6f      	ldr	r2, [pc, #444]	; (80089f8 <HAL_RCC_OscConfig+0x240>)
 800883c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008840:	6013      	str	r3, [r2, #0]
 8008842:	4b6d      	ldr	r3, [pc, #436]	; (80089f8 <HAL_RCC_OscConfig+0x240>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a6c      	ldr	r2, [pc, #432]	; (80089f8 <HAL_RCC_OscConfig+0x240>)
 8008848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800884c:	6013      	str	r3, [r2, #0]
 800884e:	e00b      	b.n	8008868 <HAL_RCC_OscConfig+0xb0>
 8008850:	4b69      	ldr	r3, [pc, #420]	; (80089f8 <HAL_RCC_OscConfig+0x240>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a68      	ldr	r2, [pc, #416]	; (80089f8 <HAL_RCC_OscConfig+0x240>)
 8008856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800885a:	6013      	str	r3, [r2, #0]
 800885c:	4b66      	ldr	r3, [pc, #408]	; (80089f8 <HAL_RCC_OscConfig+0x240>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a65      	ldr	r2, [pc, #404]	; (80089f8 <HAL_RCC_OscConfig+0x240>)
 8008862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d013      	beq.n	8008898 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008870:	f7fc f9fe 	bl	8004c70 <HAL_GetTick>
 8008874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008876:	e008      	b.n	800888a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008878:	f7fc f9fa 	bl	8004c70 <HAL_GetTick>
 800887c:	4602      	mov	r2, r0
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	2b64      	cmp	r3, #100	; 0x64
 8008884:	d901      	bls.n	800888a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008886:	2303      	movs	r3, #3
 8008888:	e207      	b.n	8008c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800888a:	4b5b      	ldr	r3, [pc, #364]	; (80089f8 <HAL_RCC_OscConfig+0x240>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008892:	2b00      	cmp	r3, #0
 8008894:	d0f0      	beq.n	8008878 <HAL_RCC_OscConfig+0xc0>
 8008896:	e014      	b.n	80088c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008898:	f7fc f9ea 	bl	8004c70 <HAL_GetTick>
 800889c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800889e:	e008      	b.n	80088b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80088a0:	f7fc f9e6 	bl	8004c70 <HAL_GetTick>
 80088a4:	4602      	mov	r2, r0
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	2b64      	cmp	r3, #100	; 0x64
 80088ac:	d901      	bls.n	80088b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80088ae:	2303      	movs	r3, #3
 80088b0:	e1f3      	b.n	8008c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088b2:	4b51      	ldr	r3, [pc, #324]	; (80089f8 <HAL_RCC_OscConfig+0x240>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1f0      	bne.n	80088a0 <HAL_RCC_OscConfig+0xe8>
 80088be:	e000      	b.n	80088c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 0302 	and.w	r3, r3, #2
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d063      	beq.n	8008996 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80088ce:	4b4a      	ldr	r3, [pc, #296]	; (80089f8 <HAL_RCC_OscConfig+0x240>)
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	f003 030c 	and.w	r3, r3, #12
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00b      	beq.n	80088f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088da:	4b47      	ldr	r3, [pc, #284]	; (80089f8 <HAL_RCC_OscConfig+0x240>)
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80088e2:	2b08      	cmp	r3, #8
 80088e4:	d11c      	bne.n	8008920 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088e6:	4b44      	ldr	r3, [pc, #272]	; (80089f8 <HAL_RCC_OscConfig+0x240>)
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d116      	bne.n	8008920 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088f2:	4b41      	ldr	r3, [pc, #260]	; (80089f8 <HAL_RCC_OscConfig+0x240>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f003 0302 	and.w	r3, r3, #2
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d005      	beq.n	800890a <HAL_RCC_OscConfig+0x152>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	2b01      	cmp	r3, #1
 8008904:	d001      	beq.n	800890a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e1c7      	b.n	8008c9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800890a:	4b3b      	ldr	r3, [pc, #236]	; (80089f8 <HAL_RCC_OscConfig+0x240>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	691b      	ldr	r3, [r3, #16]
 8008916:	00db      	lsls	r3, r3, #3
 8008918:	4937      	ldr	r1, [pc, #220]	; (80089f8 <HAL_RCC_OscConfig+0x240>)
 800891a:	4313      	orrs	r3, r2
 800891c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800891e:	e03a      	b.n	8008996 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d020      	beq.n	800896a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008928:	4b34      	ldr	r3, [pc, #208]	; (80089fc <HAL_RCC_OscConfig+0x244>)
 800892a:	2201      	movs	r2, #1
 800892c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800892e:	f7fc f99f 	bl	8004c70 <HAL_GetTick>
 8008932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008934:	e008      	b.n	8008948 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008936:	f7fc f99b 	bl	8004c70 <HAL_GetTick>
 800893a:	4602      	mov	r2, r0
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	1ad3      	subs	r3, r2, r3
 8008940:	2b02      	cmp	r3, #2
 8008942:	d901      	bls.n	8008948 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008944:	2303      	movs	r3, #3
 8008946:	e1a8      	b.n	8008c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008948:	4b2b      	ldr	r3, [pc, #172]	; (80089f8 <HAL_RCC_OscConfig+0x240>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 0302 	and.w	r3, r3, #2
 8008950:	2b00      	cmp	r3, #0
 8008952:	d0f0      	beq.n	8008936 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008954:	4b28      	ldr	r3, [pc, #160]	; (80089f8 <HAL_RCC_OscConfig+0x240>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	00db      	lsls	r3, r3, #3
 8008962:	4925      	ldr	r1, [pc, #148]	; (80089f8 <HAL_RCC_OscConfig+0x240>)
 8008964:	4313      	orrs	r3, r2
 8008966:	600b      	str	r3, [r1, #0]
 8008968:	e015      	b.n	8008996 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800896a:	4b24      	ldr	r3, [pc, #144]	; (80089fc <HAL_RCC_OscConfig+0x244>)
 800896c:	2200      	movs	r2, #0
 800896e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008970:	f7fc f97e 	bl	8004c70 <HAL_GetTick>
 8008974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008976:	e008      	b.n	800898a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008978:	f7fc f97a 	bl	8004c70 <HAL_GetTick>
 800897c:	4602      	mov	r2, r0
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	2b02      	cmp	r3, #2
 8008984:	d901      	bls.n	800898a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008986:	2303      	movs	r3, #3
 8008988:	e187      	b.n	8008c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800898a:	4b1b      	ldr	r3, [pc, #108]	; (80089f8 <HAL_RCC_OscConfig+0x240>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 0302 	and.w	r3, r3, #2
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1f0      	bne.n	8008978 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 0308 	and.w	r3, r3, #8
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d036      	beq.n	8008a10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	695b      	ldr	r3, [r3, #20]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d016      	beq.n	80089d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80089aa:	4b15      	ldr	r3, [pc, #84]	; (8008a00 <HAL_RCC_OscConfig+0x248>)
 80089ac:	2201      	movs	r2, #1
 80089ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089b0:	f7fc f95e 	bl	8004c70 <HAL_GetTick>
 80089b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089b6:	e008      	b.n	80089ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089b8:	f7fc f95a 	bl	8004c70 <HAL_GetTick>
 80089bc:	4602      	mov	r2, r0
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d901      	bls.n	80089ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80089c6:	2303      	movs	r3, #3
 80089c8:	e167      	b.n	8008c9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089ca:	4b0b      	ldr	r3, [pc, #44]	; (80089f8 <HAL_RCC_OscConfig+0x240>)
 80089cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089ce:	f003 0302 	and.w	r3, r3, #2
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d0f0      	beq.n	80089b8 <HAL_RCC_OscConfig+0x200>
 80089d6:	e01b      	b.n	8008a10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089d8:	4b09      	ldr	r3, [pc, #36]	; (8008a00 <HAL_RCC_OscConfig+0x248>)
 80089da:	2200      	movs	r2, #0
 80089dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089de:	f7fc f947 	bl	8004c70 <HAL_GetTick>
 80089e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089e4:	e00e      	b.n	8008a04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089e6:	f7fc f943 	bl	8004c70 <HAL_GetTick>
 80089ea:	4602      	mov	r2, r0
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	d907      	bls.n	8008a04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80089f4:	2303      	movs	r3, #3
 80089f6:	e150      	b.n	8008c9a <HAL_RCC_OscConfig+0x4e2>
 80089f8:	40023800 	.word	0x40023800
 80089fc:	42470000 	.word	0x42470000
 8008a00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a04:	4b88      	ldr	r3, [pc, #544]	; (8008c28 <HAL_RCC_OscConfig+0x470>)
 8008a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a08:	f003 0302 	and.w	r3, r3, #2
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d1ea      	bne.n	80089e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 0304 	and.w	r3, r3, #4
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f000 8097 	beq.w	8008b4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a22:	4b81      	ldr	r3, [pc, #516]	; (8008c28 <HAL_RCC_OscConfig+0x470>)
 8008a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10f      	bne.n	8008a4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a2e:	2300      	movs	r3, #0
 8008a30:	60bb      	str	r3, [r7, #8]
 8008a32:	4b7d      	ldr	r3, [pc, #500]	; (8008c28 <HAL_RCC_OscConfig+0x470>)
 8008a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a36:	4a7c      	ldr	r2, [pc, #496]	; (8008c28 <HAL_RCC_OscConfig+0x470>)
 8008a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8008a3e:	4b7a      	ldr	r3, [pc, #488]	; (8008c28 <HAL_RCC_OscConfig+0x470>)
 8008a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a46:	60bb      	str	r3, [r7, #8]
 8008a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a4e:	4b77      	ldr	r3, [pc, #476]	; (8008c2c <HAL_RCC_OscConfig+0x474>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d118      	bne.n	8008a8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a5a:	4b74      	ldr	r3, [pc, #464]	; (8008c2c <HAL_RCC_OscConfig+0x474>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a73      	ldr	r2, [pc, #460]	; (8008c2c <HAL_RCC_OscConfig+0x474>)
 8008a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a66:	f7fc f903 	bl	8004c70 <HAL_GetTick>
 8008a6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a6c:	e008      	b.n	8008a80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a6e:	f7fc f8ff 	bl	8004c70 <HAL_GetTick>
 8008a72:	4602      	mov	r2, r0
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	1ad3      	subs	r3, r2, r3
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	d901      	bls.n	8008a80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008a7c:	2303      	movs	r3, #3
 8008a7e:	e10c      	b.n	8008c9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a80:	4b6a      	ldr	r3, [pc, #424]	; (8008c2c <HAL_RCC_OscConfig+0x474>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d0f0      	beq.n	8008a6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d106      	bne.n	8008aa2 <HAL_RCC_OscConfig+0x2ea>
 8008a94:	4b64      	ldr	r3, [pc, #400]	; (8008c28 <HAL_RCC_OscConfig+0x470>)
 8008a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a98:	4a63      	ldr	r2, [pc, #396]	; (8008c28 <HAL_RCC_OscConfig+0x470>)
 8008a9a:	f043 0301 	orr.w	r3, r3, #1
 8008a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8008aa0:	e01c      	b.n	8008adc <HAL_RCC_OscConfig+0x324>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	2b05      	cmp	r3, #5
 8008aa8:	d10c      	bne.n	8008ac4 <HAL_RCC_OscConfig+0x30c>
 8008aaa:	4b5f      	ldr	r3, [pc, #380]	; (8008c28 <HAL_RCC_OscConfig+0x470>)
 8008aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aae:	4a5e      	ldr	r2, [pc, #376]	; (8008c28 <HAL_RCC_OscConfig+0x470>)
 8008ab0:	f043 0304 	orr.w	r3, r3, #4
 8008ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8008ab6:	4b5c      	ldr	r3, [pc, #368]	; (8008c28 <HAL_RCC_OscConfig+0x470>)
 8008ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aba:	4a5b      	ldr	r2, [pc, #364]	; (8008c28 <HAL_RCC_OscConfig+0x470>)
 8008abc:	f043 0301 	orr.w	r3, r3, #1
 8008ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8008ac2:	e00b      	b.n	8008adc <HAL_RCC_OscConfig+0x324>
 8008ac4:	4b58      	ldr	r3, [pc, #352]	; (8008c28 <HAL_RCC_OscConfig+0x470>)
 8008ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ac8:	4a57      	ldr	r2, [pc, #348]	; (8008c28 <HAL_RCC_OscConfig+0x470>)
 8008aca:	f023 0301 	bic.w	r3, r3, #1
 8008ace:	6713      	str	r3, [r2, #112]	; 0x70
 8008ad0:	4b55      	ldr	r3, [pc, #340]	; (8008c28 <HAL_RCC_OscConfig+0x470>)
 8008ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ad4:	4a54      	ldr	r2, [pc, #336]	; (8008c28 <HAL_RCC_OscConfig+0x470>)
 8008ad6:	f023 0304 	bic.w	r3, r3, #4
 8008ada:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d015      	beq.n	8008b10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ae4:	f7fc f8c4 	bl	8004c70 <HAL_GetTick>
 8008ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008aea:	e00a      	b.n	8008b02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008aec:	f7fc f8c0 	bl	8004c70 <HAL_GetTick>
 8008af0:	4602      	mov	r2, r0
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d901      	bls.n	8008b02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008afe:	2303      	movs	r3, #3
 8008b00:	e0cb      	b.n	8008c9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b02:	4b49      	ldr	r3, [pc, #292]	; (8008c28 <HAL_RCC_OscConfig+0x470>)
 8008b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b06:	f003 0302 	and.w	r3, r3, #2
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d0ee      	beq.n	8008aec <HAL_RCC_OscConfig+0x334>
 8008b0e:	e014      	b.n	8008b3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b10:	f7fc f8ae 	bl	8004c70 <HAL_GetTick>
 8008b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b16:	e00a      	b.n	8008b2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b18:	f7fc f8aa 	bl	8004c70 <HAL_GetTick>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d901      	bls.n	8008b2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	e0b5      	b.n	8008c9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b2e:	4b3e      	ldr	r3, [pc, #248]	; (8008c28 <HAL_RCC_OscConfig+0x470>)
 8008b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b32:	f003 0302 	and.w	r3, r3, #2
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1ee      	bne.n	8008b18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008b3a:	7dfb      	ldrb	r3, [r7, #23]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d105      	bne.n	8008b4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b40:	4b39      	ldr	r3, [pc, #228]	; (8008c28 <HAL_RCC_OscConfig+0x470>)
 8008b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b44:	4a38      	ldr	r2, [pc, #224]	; (8008c28 <HAL_RCC_OscConfig+0x470>)
 8008b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	699b      	ldr	r3, [r3, #24]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	f000 80a1 	beq.w	8008c98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008b56:	4b34      	ldr	r3, [pc, #208]	; (8008c28 <HAL_RCC_OscConfig+0x470>)
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	f003 030c 	and.w	r3, r3, #12
 8008b5e:	2b08      	cmp	r3, #8
 8008b60:	d05c      	beq.n	8008c1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	2b02      	cmp	r3, #2
 8008b68:	d141      	bne.n	8008bee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b6a:	4b31      	ldr	r3, [pc, #196]	; (8008c30 <HAL_RCC_OscConfig+0x478>)
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b70:	f7fc f87e 	bl	8004c70 <HAL_GetTick>
 8008b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b76:	e008      	b.n	8008b8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b78:	f7fc f87a 	bl	8004c70 <HAL_GetTick>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	2b02      	cmp	r3, #2
 8008b84:	d901      	bls.n	8008b8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008b86:	2303      	movs	r3, #3
 8008b88:	e087      	b.n	8008c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b8a:	4b27      	ldr	r3, [pc, #156]	; (8008c28 <HAL_RCC_OscConfig+0x470>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1f0      	bne.n	8008b78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	69da      	ldr	r2, [r3, #28]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a1b      	ldr	r3, [r3, #32]
 8008b9e:	431a      	orrs	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba4:	019b      	lsls	r3, r3, #6
 8008ba6:	431a      	orrs	r2, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bac:	085b      	lsrs	r3, r3, #1
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	041b      	lsls	r3, r3, #16
 8008bb2:	431a      	orrs	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb8:	061b      	lsls	r3, r3, #24
 8008bba:	491b      	ldr	r1, [pc, #108]	; (8008c28 <HAL_RCC_OscConfig+0x470>)
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008bc0:	4b1b      	ldr	r3, [pc, #108]	; (8008c30 <HAL_RCC_OscConfig+0x478>)
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bc6:	f7fc f853 	bl	8004c70 <HAL_GetTick>
 8008bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bcc:	e008      	b.n	8008be0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008bce:	f7fc f84f 	bl	8004c70 <HAL_GetTick>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	1ad3      	subs	r3, r2, r3
 8008bd8:	2b02      	cmp	r3, #2
 8008bda:	d901      	bls.n	8008be0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	e05c      	b.n	8008c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008be0:	4b11      	ldr	r3, [pc, #68]	; (8008c28 <HAL_RCC_OscConfig+0x470>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d0f0      	beq.n	8008bce <HAL_RCC_OscConfig+0x416>
 8008bec:	e054      	b.n	8008c98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bee:	4b10      	ldr	r3, [pc, #64]	; (8008c30 <HAL_RCC_OscConfig+0x478>)
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bf4:	f7fc f83c 	bl	8004c70 <HAL_GetTick>
 8008bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bfa:	e008      	b.n	8008c0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008bfc:	f7fc f838 	bl	8004c70 <HAL_GetTick>
 8008c00:	4602      	mov	r2, r0
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d901      	bls.n	8008c0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	e045      	b.n	8008c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c0e:	4b06      	ldr	r3, [pc, #24]	; (8008c28 <HAL_RCC_OscConfig+0x470>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1f0      	bne.n	8008bfc <HAL_RCC_OscConfig+0x444>
 8008c1a:	e03d      	b.n	8008c98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d107      	bne.n	8008c34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e038      	b.n	8008c9a <HAL_RCC_OscConfig+0x4e2>
 8008c28:	40023800 	.word	0x40023800
 8008c2c:	40007000 	.word	0x40007000
 8008c30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008c34:	4b1b      	ldr	r3, [pc, #108]	; (8008ca4 <HAL_RCC_OscConfig+0x4ec>)
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	699b      	ldr	r3, [r3, #24]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d028      	beq.n	8008c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d121      	bne.n	8008c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d11a      	bne.n	8008c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008c64:	4013      	ands	r3, r2
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008c6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d111      	bne.n	8008c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c7a:	085b      	lsrs	r3, r3, #1
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d107      	bne.n	8008c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d001      	beq.n	8008c98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008c94:	2301      	movs	r3, #1
 8008c96:	e000      	b.n	8008c9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3718      	adds	r7, #24
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	40023800 	.word	0x40023800

08008ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d101      	bne.n	8008cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e0cc      	b.n	8008e56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008cbc:	4b68      	ldr	r3, [pc, #416]	; (8008e60 <HAL_RCC_ClockConfig+0x1b8>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 0307 	and.w	r3, r3, #7
 8008cc4:	683a      	ldr	r2, [r7, #0]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d90c      	bls.n	8008ce4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cca:	4b65      	ldr	r3, [pc, #404]	; (8008e60 <HAL_RCC_ClockConfig+0x1b8>)
 8008ccc:	683a      	ldr	r2, [r7, #0]
 8008cce:	b2d2      	uxtb	r2, r2
 8008cd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cd2:	4b63      	ldr	r3, [pc, #396]	; (8008e60 <HAL_RCC_ClockConfig+0x1b8>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f003 0307 	and.w	r3, r3, #7
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d001      	beq.n	8008ce4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e0b8      	b.n	8008e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 0302 	and.w	r3, r3, #2
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d020      	beq.n	8008d32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 0304 	and.w	r3, r3, #4
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d005      	beq.n	8008d08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008cfc:	4b59      	ldr	r3, [pc, #356]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	4a58      	ldr	r2, [pc, #352]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008d02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008d06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 0308 	and.w	r3, r3, #8
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d005      	beq.n	8008d20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d14:	4b53      	ldr	r3, [pc, #332]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	4a52      	ldr	r2, [pc, #328]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008d1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008d1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d20:	4b50      	ldr	r3, [pc, #320]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	494d      	ldr	r1, [pc, #308]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 0301 	and.w	r3, r3, #1
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d044      	beq.n	8008dc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d107      	bne.n	8008d56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d46:	4b47      	ldr	r3, [pc, #284]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d119      	bne.n	8008d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	e07f      	b.n	8008e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d003      	beq.n	8008d66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d62:	2b03      	cmp	r3, #3
 8008d64:	d107      	bne.n	8008d76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d66:	4b3f      	ldr	r3, [pc, #252]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d109      	bne.n	8008d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e06f      	b.n	8008e56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d76:	4b3b      	ldr	r3, [pc, #236]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 0302 	and.w	r3, r3, #2
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d101      	bne.n	8008d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	e067      	b.n	8008e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d86:	4b37      	ldr	r3, [pc, #220]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	f023 0203 	bic.w	r2, r3, #3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	4934      	ldr	r1, [pc, #208]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008d94:	4313      	orrs	r3, r2
 8008d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008d98:	f7fb ff6a 	bl	8004c70 <HAL_GetTick>
 8008d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d9e:	e00a      	b.n	8008db6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008da0:	f7fb ff66 	bl	8004c70 <HAL_GetTick>
 8008da4:	4602      	mov	r2, r0
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d901      	bls.n	8008db6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008db2:	2303      	movs	r3, #3
 8008db4:	e04f      	b.n	8008e56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008db6:	4b2b      	ldr	r3, [pc, #172]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	f003 020c 	and.w	r2, r3, #12
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d1eb      	bne.n	8008da0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008dc8:	4b25      	ldr	r3, [pc, #148]	; (8008e60 <HAL_RCC_ClockConfig+0x1b8>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 0307 	and.w	r3, r3, #7
 8008dd0:	683a      	ldr	r2, [r7, #0]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d20c      	bcs.n	8008df0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dd6:	4b22      	ldr	r3, [pc, #136]	; (8008e60 <HAL_RCC_ClockConfig+0x1b8>)
 8008dd8:	683a      	ldr	r2, [r7, #0]
 8008dda:	b2d2      	uxtb	r2, r2
 8008ddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dde:	4b20      	ldr	r3, [pc, #128]	; (8008e60 <HAL_RCC_ClockConfig+0x1b8>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f003 0307 	and.w	r3, r3, #7
 8008de6:	683a      	ldr	r2, [r7, #0]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d001      	beq.n	8008df0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	e032      	b.n	8008e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f003 0304 	and.w	r3, r3, #4
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d008      	beq.n	8008e0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008dfc:	4b19      	ldr	r3, [pc, #100]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	4916      	ldr	r1, [pc, #88]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f003 0308 	and.w	r3, r3, #8
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d009      	beq.n	8008e2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008e1a:	4b12      	ldr	r3, [pc, #72]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	00db      	lsls	r3, r3, #3
 8008e28:	490e      	ldr	r1, [pc, #56]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008e2e:	f000 f821 	bl	8008e74 <HAL_RCC_GetSysClockFreq>
 8008e32:	4602      	mov	r2, r0
 8008e34:	4b0b      	ldr	r3, [pc, #44]	; (8008e64 <HAL_RCC_ClockConfig+0x1bc>)
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	091b      	lsrs	r3, r3, #4
 8008e3a:	f003 030f 	and.w	r3, r3, #15
 8008e3e:	490a      	ldr	r1, [pc, #40]	; (8008e68 <HAL_RCC_ClockConfig+0x1c0>)
 8008e40:	5ccb      	ldrb	r3, [r1, r3]
 8008e42:	fa22 f303 	lsr.w	r3, r2, r3
 8008e46:	4a09      	ldr	r2, [pc, #36]	; (8008e6c <HAL_RCC_ClockConfig+0x1c4>)
 8008e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008e4a:	4b09      	ldr	r3, [pc, #36]	; (8008e70 <HAL_RCC_ClockConfig+0x1c8>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7f9 fd1e 	bl	8002890 <HAL_InitTick>

  return HAL_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	40023c00 	.word	0x40023c00
 8008e64:	40023800 	.word	0x40023800
 8008e68:	080108c0 	.word	0x080108c0
 8008e6c:	20000008 	.word	0x20000008
 8008e70:	2000000c 	.word	0x2000000c

08008e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e78:	b094      	sub	sp, #80	; 0x50
 8008e7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	647b      	str	r3, [r7, #68]	; 0x44
 8008e80:	2300      	movs	r3, #0
 8008e82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e84:	2300      	movs	r3, #0
 8008e86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e8c:	4b79      	ldr	r3, [pc, #484]	; (8009074 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	f003 030c 	and.w	r3, r3, #12
 8008e94:	2b08      	cmp	r3, #8
 8008e96:	d00d      	beq.n	8008eb4 <HAL_RCC_GetSysClockFreq+0x40>
 8008e98:	2b08      	cmp	r3, #8
 8008e9a:	f200 80e1 	bhi.w	8009060 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d002      	beq.n	8008ea8 <HAL_RCC_GetSysClockFreq+0x34>
 8008ea2:	2b04      	cmp	r3, #4
 8008ea4:	d003      	beq.n	8008eae <HAL_RCC_GetSysClockFreq+0x3a>
 8008ea6:	e0db      	b.n	8009060 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ea8:	4b73      	ldr	r3, [pc, #460]	; (8009078 <HAL_RCC_GetSysClockFreq+0x204>)
 8008eaa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008eac:	e0db      	b.n	8009066 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008eae:	4b73      	ldr	r3, [pc, #460]	; (800907c <HAL_RCC_GetSysClockFreq+0x208>)
 8008eb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008eb2:	e0d8      	b.n	8009066 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008eb4:	4b6f      	ldr	r3, [pc, #444]	; (8009074 <HAL_RCC_GetSysClockFreq+0x200>)
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ebc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008ebe:	4b6d      	ldr	r3, [pc, #436]	; (8009074 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d063      	beq.n	8008f92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008eca:	4b6a      	ldr	r3, [pc, #424]	; (8009074 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	099b      	lsrs	r3, r3, #6
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ed4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008edc:	633b      	str	r3, [r7, #48]	; 0x30
 8008ede:	2300      	movs	r3, #0
 8008ee0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ee2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008ee6:	4622      	mov	r2, r4
 8008ee8:	462b      	mov	r3, r5
 8008eea:	f04f 0000 	mov.w	r0, #0
 8008eee:	f04f 0100 	mov.w	r1, #0
 8008ef2:	0159      	lsls	r1, r3, #5
 8008ef4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008ef8:	0150      	lsls	r0, r2, #5
 8008efa:	4602      	mov	r2, r0
 8008efc:	460b      	mov	r3, r1
 8008efe:	4621      	mov	r1, r4
 8008f00:	1a51      	subs	r1, r2, r1
 8008f02:	6139      	str	r1, [r7, #16]
 8008f04:	4629      	mov	r1, r5
 8008f06:	eb63 0301 	sbc.w	r3, r3, r1
 8008f0a:	617b      	str	r3, [r7, #20]
 8008f0c:	f04f 0200 	mov.w	r2, #0
 8008f10:	f04f 0300 	mov.w	r3, #0
 8008f14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f18:	4659      	mov	r1, fp
 8008f1a:	018b      	lsls	r3, r1, #6
 8008f1c:	4651      	mov	r1, sl
 8008f1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008f22:	4651      	mov	r1, sl
 8008f24:	018a      	lsls	r2, r1, #6
 8008f26:	4651      	mov	r1, sl
 8008f28:	ebb2 0801 	subs.w	r8, r2, r1
 8008f2c:	4659      	mov	r1, fp
 8008f2e:	eb63 0901 	sbc.w	r9, r3, r1
 8008f32:	f04f 0200 	mov.w	r2, #0
 8008f36:	f04f 0300 	mov.w	r3, #0
 8008f3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008f42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f46:	4690      	mov	r8, r2
 8008f48:	4699      	mov	r9, r3
 8008f4a:	4623      	mov	r3, r4
 8008f4c:	eb18 0303 	adds.w	r3, r8, r3
 8008f50:	60bb      	str	r3, [r7, #8]
 8008f52:	462b      	mov	r3, r5
 8008f54:	eb49 0303 	adc.w	r3, r9, r3
 8008f58:	60fb      	str	r3, [r7, #12]
 8008f5a:	f04f 0200 	mov.w	r2, #0
 8008f5e:	f04f 0300 	mov.w	r3, #0
 8008f62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008f66:	4629      	mov	r1, r5
 8008f68:	024b      	lsls	r3, r1, #9
 8008f6a:	4621      	mov	r1, r4
 8008f6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008f70:	4621      	mov	r1, r4
 8008f72:	024a      	lsls	r2, r1, #9
 8008f74:	4610      	mov	r0, r2
 8008f76:	4619      	mov	r1, r3
 8008f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f84:	f7f7 fe60 	bl	8000c48 <__aeabi_uldivmod>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	4613      	mov	r3, r2
 8008f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f90:	e058      	b.n	8009044 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f92:	4b38      	ldr	r3, [pc, #224]	; (8009074 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	099b      	lsrs	r3, r3, #6
 8008f98:	2200      	movs	r2, #0
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	4611      	mov	r1, r2
 8008f9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008fa2:	623b      	str	r3, [r7, #32]
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8008fa8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008fac:	4642      	mov	r2, r8
 8008fae:	464b      	mov	r3, r9
 8008fb0:	f04f 0000 	mov.w	r0, #0
 8008fb4:	f04f 0100 	mov.w	r1, #0
 8008fb8:	0159      	lsls	r1, r3, #5
 8008fba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008fbe:	0150      	lsls	r0, r2, #5
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	4641      	mov	r1, r8
 8008fc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8008fca:	4649      	mov	r1, r9
 8008fcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8008fd0:	f04f 0200 	mov.w	r2, #0
 8008fd4:	f04f 0300 	mov.w	r3, #0
 8008fd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008fdc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008fe0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008fe4:	ebb2 040a 	subs.w	r4, r2, sl
 8008fe8:	eb63 050b 	sbc.w	r5, r3, fp
 8008fec:	f04f 0200 	mov.w	r2, #0
 8008ff0:	f04f 0300 	mov.w	r3, #0
 8008ff4:	00eb      	lsls	r3, r5, #3
 8008ff6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ffa:	00e2      	lsls	r2, r4, #3
 8008ffc:	4614      	mov	r4, r2
 8008ffe:	461d      	mov	r5, r3
 8009000:	4643      	mov	r3, r8
 8009002:	18e3      	adds	r3, r4, r3
 8009004:	603b      	str	r3, [r7, #0]
 8009006:	464b      	mov	r3, r9
 8009008:	eb45 0303 	adc.w	r3, r5, r3
 800900c:	607b      	str	r3, [r7, #4]
 800900e:	f04f 0200 	mov.w	r2, #0
 8009012:	f04f 0300 	mov.w	r3, #0
 8009016:	e9d7 4500 	ldrd	r4, r5, [r7]
 800901a:	4629      	mov	r1, r5
 800901c:	028b      	lsls	r3, r1, #10
 800901e:	4621      	mov	r1, r4
 8009020:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009024:	4621      	mov	r1, r4
 8009026:	028a      	lsls	r2, r1, #10
 8009028:	4610      	mov	r0, r2
 800902a:	4619      	mov	r1, r3
 800902c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800902e:	2200      	movs	r2, #0
 8009030:	61bb      	str	r3, [r7, #24]
 8009032:	61fa      	str	r2, [r7, #28]
 8009034:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009038:	f7f7 fe06 	bl	8000c48 <__aeabi_uldivmod>
 800903c:	4602      	mov	r2, r0
 800903e:	460b      	mov	r3, r1
 8009040:	4613      	mov	r3, r2
 8009042:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009044:	4b0b      	ldr	r3, [pc, #44]	; (8009074 <HAL_RCC_GetSysClockFreq+0x200>)
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	0c1b      	lsrs	r3, r3, #16
 800904a:	f003 0303 	and.w	r3, r3, #3
 800904e:	3301      	adds	r3, #1
 8009050:	005b      	lsls	r3, r3, #1
 8009052:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009054:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009058:	fbb2 f3f3 	udiv	r3, r2, r3
 800905c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800905e:	e002      	b.n	8009066 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009060:	4b05      	ldr	r3, [pc, #20]	; (8009078 <HAL_RCC_GetSysClockFreq+0x204>)
 8009062:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009068:	4618      	mov	r0, r3
 800906a:	3750      	adds	r7, #80	; 0x50
 800906c:	46bd      	mov	sp, r7
 800906e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009072:	bf00      	nop
 8009074:	40023800 	.word	0x40023800
 8009078:	00f42400 	.word	0x00f42400
 800907c:	007a1200 	.word	0x007a1200

08009080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009080:	b480      	push	{r7}
 8009082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009084:	4b03      	ldr	r3, [pc, #12]	; (8009094 <HAL_RCC_GetHCLKFreq+0x14>)
 8009086:	681b      	ldr	r3, [r3, #0]
}
 8009088:	4618      	mov	r0, r3
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	20000008 	.word	0x20000008

08009098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800909c:	f7ff fff0 	bl	8009080 <HAL_RCC_GetHCLKFreq>
 80090a0:	4602      	mov	r2, r0
 80090a2:	4b05      	ldr	r3, [pc, #20]	; (80090b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	0a9b      	lsrs	r3, r3, #10
 80090a8:	f003 0307 	and.w	r3, r3, #7
 80090ac:	4903      	ldr	r1, [pc, #12]	; (80090bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80090ae:	5ccb      	ldrb	r3, [r1, r3]
 80090b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	40023800 	.word	0x40023800
 80090bc:	080108d0 	.word	0x080108d0

080090c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80090c4:	f7ff ffdc 	bl	8009080 <HAL_RCC_GetHCLKFreq>
 80090c8:	4602      	mov	r2, r0
 80090ca:	4b05      	ldr	r3, [pc, #20]	; (80090e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	0b5b      	lsrs	r3, r3, #13
 80090d0:	f003 0307 	and.w	r3, r3, #7
 80090d4:	4903      	ldr	r1, [pc, #12]	; (80090e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80090d6:	5ccb      	ldrb	r3, [r1, r3]
 80090d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80090dc:	4618      	mov	r0, r3
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	40023800 	.word	0x40023800
 80090e4:	080108d0 	.word	0x080108d0

080090e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	220f      	movs	r2, #15
 80090f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80090f8:	4b12      	ldr	r3, [pc, #72]	; (8009144 <HAL_RCC_GetClockConfig+0x5c>)
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	f003 0203 	and.w	r2, r3, #3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009104:	4b0f      	ldr	r3, [pc, #60]	; (8009144 <HAL_RCC_GetClockConfig+0x5c>)
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009110:	4b0c      	ldr	r3, [pc, #48]	; (8009144 <HAL_RCC_GetClockConfig+0x5c>)
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800911c:	4b09      	ldr	r3, [pc, #36]	; (8009144 <HAL_RCC_GetClockConfig+0x5c>)
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	08db      	lsrs	r3, r3, #3
 8009122:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800912a:	4b07      	ldr	r3, [pc, #28]	; (8009148 <HAL_RCC_GetClockConfig+0x60>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f003 0207 	and.w	r2, r3, #7
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	601a      	str	r2, [r3, #0]
}
 8009136:	bf00      	nop
 8009138:	370c      	adds	r7, #12
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	40023800 	.word	0x40023800
 8009148:	40023c00 	.word	0x40023c00

0800914c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d101      	bne.n	800915e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e041      	b.n	80091e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009164:	b2db      	uxtb	r3, r3
 8009166:	2b00      	cmp	r3, #0
 8009168:	d106      	bne.n	8009178 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f7fa f8e8 	bl	8003348 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2202      	movs	r2, #2
 800917c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	3304      	adds	r3, #4
 8009188:	4619      	mov	r1, r3
 800918a:	4610      	mov	r0, r2
 800918c:	f000 fb6a 	bl	8009864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
	...

080091ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d001      	beq.n	8009204 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	e04e      	b.n	80092a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2202      	movs	r2, #2
 8009208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	68da      	ldr	r2, [r3, #12]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f042 0201 	orr.w	r2, r2, #1
 800921a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a23      	ldr	r2, [pc, #140]	; (80092b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d022      	beq.n	800926c <HAL_TIM_Base_Start_IT+0x80>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800922e:	d01d      	beq.n	800926c <HAL_TIM_Base_Start_IT+0x80>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a1f      	ldr	r2, [pc, #124]	; (80092b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d018      	beq.n	800926c <HAL_TIM_Base_Start_IT+0x80>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a1e      	ldr	r2, [pc, #120]	; (80092b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d013      	beq.n	800926c <HAL_TIM_Base_Start_IT+0x80>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a1c      	ldr	r2, [pc, #112]	; (80092bc <HAL_TIM_Base_Start_IT+0xd0>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d00e      	beq.n	800926c <HAL_TIM_Base_Start_IT+0x80>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a1b      	ldr	r2, [pc, #108]	; (80092c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d009      	beq.n	800926c <HAL_TIM_Base_Start_IT+0x80>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a19      	ldr	r2, [pc, #100]	; (80092c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d004      	beq.n	800926c <HAL_TIM_Base_Start_IT+0x80>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a18      	ldr	r2, [pc, #96]	; (80092c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d111      	bne.n	8009290 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	f003 0307 	and.w	r3, r3, #7
 8009276:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2b06      	cmp	r3, #6
 800927c:	d010      	beq.n	80092a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f042 0201 	orr.w	r2, r2, #1
 800928c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800928e:	e007      	b.n	80092a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f042 0201 	orr.w	r2, r2, #1
 800929e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3714      	adds	r7, #20
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop
 80092b0:	40010000 	.word	0x40010000
 80092b4:	40000400 	.word	0x40000400
 80092b8:	40000800 	.word	0x40000800
 80092bc:	40000c00 	.word	0x40000c00
 80092c0:	40010400 	.word	0x40010400
 80092c4:	40014000 	.word	0x40014000
 80092c8:	40001800 	.word	0x40001800

080092cc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	68da      	ldr	r2, [r3, #12]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f022 0201 	bic.w	r2, r2, #1
 80092e2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	6a1a      	ldr	r2, [r3, #32]
 80092ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80092ee:	4013      	ands	r3, r2
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d10f      	bne.n	8009314 <HAL_TIM_Base_Stop_IT+0x48>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	6a1a      	ldr	r2, [r3, #32]
 80092fa:	f240 4344 	movw	r3, #1092	; 0x444
 80092fe:	4013      	ands	r3, r2
 8009300:	2b00      	cmp	r3, #0
 8009302:	d107      	bne.n	8009314 <HAL_TIM_Base_Stop_IT+0x48>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f022 0201 	bic.w	r2, r2, #1
 8009312:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	370c      	adds	r7, #12
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr

0800932a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b086      	sub	sp, #24
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
 8009332:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d101      	bne.n	800933e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	e097      	b.n	800946e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009344:	b2db      	uxtb	r3, r3
 8009346:	2b00      	cmp	r3, #0
 8009348:	d106      	bne.n	8009358 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f7f9 ff38 	bl	80031c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2202      	movs	r2, #2
 800935c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	6812      	ldr	r2, [r2, #0]
 800936a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800936e:	f023 0307 	bic.w	r3, r3, #7
 8009372:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	3304      	adds	r3, #4
 800937c:	4619      	mov	r1, r3
 800937e:	4610      	mov	r0, r2
 8009380:	f000 fa70 	bl	8009864 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	699b      	ldr	r3, [r3, #24]
 8009392:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	6a1b      	ldr	r3, [r3, #32]
 800939a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	697a      	ldr	r2, [r7, #20]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093ac:	f023 0303 	bic.w	r3, r3, #3
 80093b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	689a      	ldr	r2, [r3, #8]
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	699b      	ldr	r3, [r3, #24]
 80093ba:	021b      	lsls	r3, r3, #8
 80093bc:	4313      	orrs	r3, r2
 80093be:	693a      	ldr	r2, [r7, #16]
 80093c0:	4313      	orrs	r3, r2
 80093c2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80093ca:	f023 030c 	bic.w	r3, r3, #12
 80093ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80093d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80093da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	68da      	ldr	r2, [r3, #12]
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	69db      	ldr	r3, [r3, #28]
 80093e4:	021b      	lsls	r3, r3, #8
 80093e6:	4313      	orrs	r3, r2
 80093e8:	693a      	ldr	r2, [r7, #16]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	011a      	lsls	r2, r3, #4
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	6a1b      	ldr	r3, [r3, #32]
 80093f8:	031b      	lsls	r3, r3, #12
 80093fa:	4313      	orrs	r3, r2
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	4313      	orrs	r3, r2
 8009400:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009408:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009410:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	685a      	ldr	r2, [r3, #4]
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	695b      	ldr	r3, [r3, #20]
 800941a:	011b      	lsls	r3, r3, #4
 800941c:	4313      	orrs	r3, r2
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	4313      	orrs	r3, r2
 8009422:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	693a      	ldr	r2, [r7, #16]
 8009432:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	68fa      	ldr	r2, [r7, #12]
 800943a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800946c:	2300      	movs	r3, #0
}
 800946e:	4618      	mov	r0, r3
 8009470:	3718      	adds	r7, #24
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b082      	sub	sp, #8
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	691b      	ldr	r3, [r3, #16]
 8009484:	f003 0302 	and.w	r3, r3, #2
 8009488:	2b02      	cmp	r3, #2
 800948a:	d122      	bne.n	80094d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	f003 0302 	and.w	r3, r3, #2
 8009496:	2b02      	cmp	r3, #2
 8009498:	d11b      	bne.n	80094d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f06f 0202 	mvn.w	r2, #2
 80094a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2201      	movs	r2, #1
 80094a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	699b      	ldr	r3, [r3, #24]
 80094b0:	f003 0303 	and.w	r3, r3, #3
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d003      	beq.n	80094c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f9b5 	bl	8009828 <HAL_TIM_IC_CaptureCallback>
 80094be:	e005      	b.n	80094cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 f9a7 	bl	8009814 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 f9b8 	bl	800983c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	f003 0304 	and.w	r3, r3, #4
 80094dc:	2b04      	cmp	r3, #4
 80094de:	d122      	bne.n	8009526 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	f003 0304 	and.w	r3, r3, #4
 80094ea:	2b04      	cmp	r3, #4
 80094ec:	d11b      	bne.n	8009526 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f06f 0204 	mvn.w	r2, #4
 80094f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2202      	movs	r2, #2
 80094fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009508:	2b00      	cmp	r3, #0
 800950a:	d003      	beq.n	8009514 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 f98b 	bl	8009828 <HAL_TIM_IC_CaptureCallback>
 8009512:	e005      	b.n	8009520 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 f97d 	bl	8009814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f98e 	bl	800983c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	691b      	ldr	r3, [r3, #16]
 800952c:	f003 0308 	and.w	r3, r3, #8
 8009530:	2b08      	cmp	r3, #8
 8009532:	d122      	bne.n	800957a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	f003 0308 	and.w	r3, r3, #8
 800953e:	2b08      	cmp	r3, #8
 8009540:	d11b      	bne.n	800957a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f06f 0208 	mvn.w	r2, #8
 800954a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2204      	movs	r2, #4
 8009550:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	69db      	ldr	r3, [r3, #28]
 8009558:	f003 0303 	and.w	r3, r3, #3
 800955c:	2b00      	cmp	r3, #0
 800955e:	d003      	beq.n	8009568 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 f961 	bl	8009828 <HAL_TIM_IC_CaptureCallback>
 8009566:	e005      	b.n	8009574 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 f953 	bl	8009814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 f964 	bl	800983c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	f003 0310 	and.w	r3, r3, #16
 8009584:	2b10      	cmp	r3, #16
 8009586:	d122      	bne.n	80095ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	f003 0310 	and.w	r3, r3, #16
 8009592:	2b10      	cmp	r3, #16
 8009594:	d11b      	bne.n	80095ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f06f 0210 	mvn.w	r2, #16
 800959e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2208      	movs	r2, #8
 80095a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	69db      	ldr	r3, [r3, #28]
 80095ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d003      	beq.n	80095bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f937 	bl	8009828 <HAL_TIM_IC_CaptureCallback>
 80095ba:	e005      	b.n	80095c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 f929 	bl	8009814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 f93a 	bl	800983c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	691b      	ldr	r3, [r3, #16]
 80095d4:	f003 0301 	and.w	r3, r3, #1
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d10e      	bne.n	80095fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	f003 0301 	and.w	r3, r3, #1
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d107      	bne.n	80095fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f06f 0201 	mvn.w	r2, #1
 80095f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f7f8 fb05 	bl	8001c04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	691b      	ldr	r3, [r3, #16]
 8009600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009604:	2b80      	cmp	r3, #128	; 0x80
 8009606:	d10e      	bne.n	8009626 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	68db      	ldr	r3, [r3, #12]
 800960e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009612:	2b80      	cmp	r3, #128	; 0x80
 8009614:	d107      	bne.n	8009626 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800961e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 fadf 	bl	8009be4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009630:	2b40      	cmp	r3, #64	; 0x40
 8009632:	d10e      	bne.n	8009652 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800963e:	2b40      	cmp	r3, #64	; 0x40
 8009640:	d107      	bne.n	8009652 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800964a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 f8ff 	bl	8009850 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	f003 0320 	and.w	r3, r3, #32
 800965c:	2b20      	cmp	r3, #32
 800965e:	d10e      	bne.n	800967e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	f003 0320 	and.w	r3, r3, #32
 800966a:	2b20      	cmp	r3, #32
 800966c:	d107      	bne.n	800967e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f06f 0220 	mvn.w	r2, #32
 8009676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 faa9 	bl	8009bd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800967e:	bf00      	nop
 8009680:	3708      	adds	r7, #8
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b084      	sub	sp, #16
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009690:	2300      	movs	r3, #0
 8009692:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800969a:	2b01      	cmp	r3, #1
 800969c:	d101      	bne.n	80096a2 <HAL_TIM_ConfigClockSource+0x1c>
 800969e:	2302      	movs	r3, #2
 80096a0:	e0b4      	b.n	800980c <HAL_TIM_ConfigClockSource+0x186>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2201      	movs	r2, #1
 80096a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2202      	movs	r2, #2
 80096ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80096c0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096c8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68ba      	ldr	r2, [r7, #8]
 80096d0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096da:	d03e      	beq.n	800975a <HAL_TIM_ConfigClockSource+0xd4>
 80096dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096e0:	f200 8087 	bhi.w	80097f2 <HAL_TIM_ConfigClockSource+0x16c>
 80096e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096e8:	f000 8086 	beq.w	80097f8 <HAL_TIM_ConfigClockSource+0x172>
 80096ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096f0:	d87f      	bhi.n	80097f2 <HAL_TIM_ConfigClockSource+0x16c>
 80096f2:	2b70      	cmp	r3, #112	; 0x70
 80096f4:	d01a      	beq.n	800972c <HAL_TIM_ConfigClockSource+0xa6>
 80096f6:	2b70      	cmp	r3, #112	; 0x70
 80096f8:	d87b      	bhi.n	80097f2 <HAL_TIM_ConfigClockSource+0x16c>
 80096fa:	2b60      	cmp	r3, #96	; 0x60
 80096fc:	d050      	beq.n	80097a0 <HAL_TIM_ConfigClockSource+0x11a>
 80096fe:	2b60      	cmp	r3, #96	; 0x60
 8009700:	d877      	bhi.n	80097f2 <HAL_TIM_ConfigClockSource+0x16c>
 8009702:	2b50      	cmp	r3, #80	; 0x50
 8009704:	d03c      	beq.n	8009780 <HAL_TIM_ConfigClockSource+0xfa>
 8009706:	2b50      	cmp	r3, #80	; 0x50
 8009708:	d873      	bhi.n	80097f2 <HAL_TIM_ConfigClockSource+0x16c>
 800970a:	2b40      	cmp	r3, #64	; 0x40
 800970c:	d058      	beq.n	80097c0 <HAL_TIM_ConfigClockSource+0x13a>
 800970e:	2b40      	cmp	r3, #64	; 0x40
 8009710:	d86f      	bhi.n	80097f2 <HAL_TIM_ConfigClockSource+0x16c>
 8009712:	2b30      	cmp	r3, #48	; 0x30
 8009714:	d064      	beq.n	80097e0 <HAL_TIM_ConfigClockSource+0x15a>
 8009716:	2b30      	cmp	r3, #48	; 0x30
 8009718:	d86b      	bhi.n	80097f2 <HAL_TIM_ConfigClockSource+0x16c>
 800971a:	2b20      	cmp	r3, #32
 800971c:	d060      	beq.n	80097e0 <HAL_TIM_ConfigClockSource+0x15a>
 800971e:	2b20      	cmp	r3, #32
 8009720:	d867      	bhi.n	80097f2 <HAL_TIM_ConfigClockSource+0x16c>
 8009722:	2b00      	cmp	r3, #0
 8009724:	d05c      	beq.n	80097e0 <HAL_TIM_ConfigClockSource+0x15a>
 8009726:	2b10      	cmp	r3, #16
 8009728:	d05a      	beq.n	80097e0 <HAL_TIM_ConfigClockSource+0x15a>
 800972a:	e062      	b.n	80097f2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6818      	ldr	r0, [r3, #0]
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	6899      	ldr	r1, [r3, #8]
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	685a      	ldr	r2, [r3, #4]
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	f000 f9ac 	bl	8009a98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800974e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	68ba      	ldr	r2, [r7, #8]
 8009756:	609a      	str	r2, [r3, #8]
      break;
 8009758:	e04f      	b.n	80097fa <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6818      	ldr	r0, [r3, #0]
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	6899      	ldr	r1, [r3, #8]
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	685a      	ldr	r2, [r3, #4]
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	f000 f995 	bl	8009a98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	689a      	ldr	r2, [r3, #8]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800977c:	609a      	str	r2, [r3, #8]
      break;
 800977e:	e03c      	b.n	80097fa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6818      	ldr	r0, [r3, #0]
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	6859      	ldr	r1, [r3, #4]
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	461a      	mov	r2, r3
 800978e:	f000 f909 	bl	80099a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2150      	movs	r1, #80	; 0x50
 8009798:	4618      	mov	r0, r3
 800979a:	f000 f962 	bl	8009a62 <TIM_ITRx_SetConfig>
      break;
 800979e:	e02c      	b.n	80097fa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6818      	ldr	r0, [r3, #0]
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	6859      	ldr	r1, [r3, #4]
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	461a      	mov	r2, r3
 80097ae:	f000 f928 	bl	8009a02 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2160      	movs	r1, #96	; 0x60
 80097b8:	4618      	mov	r0, r3
 80097ba:	f000 f952 	bl	8009a62 <TIM_ITRx_SetConfig>
      break;
 80097be:	e01c      	b.n	80097fa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6818      	ldr	r0, [r3, #0]
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	6859      	ldr	r1, [r3, #4]
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	461a      	mov	r2, r3
 80097ce:	f000 f8e9 	bl	80099a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	2140      	movs	r1, #64	; 0x40
 80097d8:	4618      	mov	r0, r3
 80097da:	f000 f942 	bl	8009a62 <TIM_ITRx_SetConfig>
      break;
 80097de:	e00c      	b.n	80097fa <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4619      	mov	r1, r3
 80097ea:	4610      	mov	r0, r2
 80097ec:	f000 f939 	bl	8009a62 <TIM_ITRx_SetConfig>
      break;
 80097f0:	e003      	b.n	80097fa <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	73fb      	strb	r3, [r7, #15]
      break;
 80097f6:	e000      	b.n	80097fa <HAL_TIM_ConfigClockSource+0x174>
      break;
 80097f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2201      	movs	r2, #1
 80097fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800980a:	7bfb      	ldrb	r3, [r7, #15]
}
 800980c:	4618      	mov	r0, r3
 800980e:	3710      	adds	r7, #16
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009830:	bf00      	nop
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009844:	bf00      	nop
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009858:	bf00      	nop
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009864:	b480      	push	{r7}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	4a40      	ldr	r2, [pc, #256]	; (8009978 <TIM_Base_SetConfig+0x114>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d013      	beq.n	80098a4 <TIM_Base_SetConfig+0x40>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009882:	d00f      	beq.n	80098a4 <TIM_Base_SetConfig+0x40>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a3d      	ldr	r2, [pc, #244]	; (800997c <TIM_Base_SetConfig+0x118>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d00b      	beq.n	80098a4 <TIM_Base_SetConfig+0x40>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	4a3c      	ldr	r2, [pc, #240]	; (8009980 <TIM_Base_SetConfig+0x11c>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d007      	beq.n	80098a4 <TIM_Base_SetConfig+0x40>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	4a3b      	ldr	r2, [pc, #236]	; (8009984 <TIM_Base_SetConfig+0x120>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d003      	beq.n	80098a4 <TIM_Base_SetConfig+0x40>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4a3a      	ldr	r2, [pc, #232]	; (8009988 <TIM_Base_SetConfig+0x124>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d108      	bne.n	80098b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4a2f      	ldr	r2, [pc, #188]	; (8009978 <TIM_Base_SetConfig+0x114>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d02b      	beq.n	8009916 <TIM_Base_SetConfig+0xb2>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098c4:	d027      	beq.n	8009916 <TIM_Base_SetConfig+0xb2>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a2c      	ldr	r2, [pc, #176]	; (800997c <TIM_Base_SetConfig+0x118>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d023      	beq.n	8009916 <TIM_Base_SetConfig+0xb2>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a2b      	ldr	r2, [pc, #172]	; (8009980 <TIM_Base_SetConfig+0x11c>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d01f      	beq.n	8009916 <TIM_Base_SetConfig+0xb2>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4a2a      	ldr	r2, [pc, #168]	; (8009984 <TIM_Base_SetConfig+0x120>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d01b      	beq.n	8009916 <TIM_Base_SetConfig+0xb2>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a29      	ldr	r2, [pc, #164]	; (8009988 <TIM_Base_SetConfig+0x124>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d017      	beq.n	8009916 <TIM_Base_SetConfig+0xb2>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a28      	ldr	r2, [pc, #160]	; (800998c <TIM_Base_SetConfig+0x128>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d013      	beq.n	8009916 <TIM_Base_SetConfig+0xb2>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a27      	ldr	r2, [pc, #156]	; (8009990 <TIM_Base_SetConfig+0x12c>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d00f      	beq.n	8009916 <TIM_Base_SetConfig+0xb2>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4a26      	ldr	r2, [pc, #152]	; (8009994 <TIM_Base_SetConfig+0x130>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d00b      	beq.n	8009916 <TIM_Base_SetConfig+0xb2>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4a25      	ldr	r2, [pc, #148]	; (8009998 <TIM_Base_SetConfig+0x134>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d007      	beq.n	8009916 <TIM_Base_SetConfig+0xb2>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4a24      	ldr	r2, [pc, #144]	; (800999c <TIM_Base_SetConfig+0x138>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d003      	beq.n	8009916 <TIM_Base_SetConfig+0xb2>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	4a23      	ldr	r2, [pc, #140]	; (80099a0 <TIM_Base_SetConfig+0x13c>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d108      	bne.n	8009928 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800991c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	4313      	orrs	r3, r2
 8009926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	695b      	ldr	r3, [r3, #20]
 8009932:	4313      	orrs	r3, r2
 8009934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	68fa      	ldr	r2, [r7, #12]
 800993a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	689a      	ldr	r2, [r3, #8]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	4a0a      	ldr	r2, [pc, #40]	; (8009978 <TIM_Base_SetConfig+0x114>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d003      	beq.n	800995c <TIM_Base_SetConfig+0xf8>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4a0c      	ldr	r2, [pc, #48]	; (8009988 <TIM_Base_SetConfig+0x124>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d103      	bne.n	8009964 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	691a      	ldr	r2, [r3, #16]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2201      	movs	r2, #1
 8009968:	615a      	str	r2, [r3, #20]
}
 800996a:	bf00      	nop
 800996c:	3714      	adds	r7, #20
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop
 8009978:	40010000 	.word	0x40010000
 800997c:	40000400 	.word	0x40000400
 8009980:	40000800 	.word	0x40000800
 8009984:	40000c00 	.word	0x40000c00
 8009988:	40010400 	.word	0x40010400
 800998c:	40014000 	.word	0x40014000
 8009990:	40014400 	.word	0x40014400
 8009994:	40014800 	.word	0x40014800
 8009998:	40001800 	.word	0x40001800
 800999c:	40001c00 	.word	0x40001c00
 80099a0:	40002000 	.word	0x40002000

080099a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b087      	sub	sp, #28
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6a1b      	ldr	r3, [r3, #32]
 80099b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6a1b      	ldr	r3, [r3, #32]
 80099ba:	f023 0201 	bic.w	r2, r3, #1
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	699b      	ldr	r3, [r3, #24]
 80099c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80099ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	011b      	lsls	r3, r3, #4
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	f023 030a 	bic.w	r3, r3, #10
 80099e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80099e2:	697a      	ldr	r2, [r7, #20]
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	693a      	ldr	r2, [r7, #16]
 80099ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	697a      	ldr	r2, [r7, #20]
 80099f4:	621a      	str	r2, [r3, #32]
}
 80099f6:	bf00      	nop
 80099f8:	371c      	adds	r7, #28
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr

08009a02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a02:	b480      	push	{r7}
 8009a04:	b087      	sub	sp, #28
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	60f8      	str	r0, [r7, #12]
 8009a0a:	60b9      	str	r1, [r7, #8]
 8009a0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	6a1b      	ldr	r3, [r3, #32]
 8009a12:	f023 0210 	bic.w	r2, r3, #16
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	699b      	ldr	r3, [r3, #24]
 8009a1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6a1b      	ldr	r3, [r3, #32]
 8009a24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	031b      	lsls	r3, r3, #12
 8009a32:	697a      	ldr	r2, [r7, #20]
 8009a34:	4313      	orrs	r3, r2
 8009a36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	011b      	lsls	r3, r3, #4
 8009a44:	693a      	ldr	r2, [r7, #16]
 8009a46:	4313      	orrs	r3, r2
 8009a48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	697a      	ldr	r2, [r7, #20]
 8009a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	693a      	ldr	r2, [r7, #16]
 8009a54:	621a      	str	r2, [r3, #32]
}
 8009a56:	bf00      	nop
 8009a58:	371c      	adds	r7, #28
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr

08009a62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a62:	b480      	push	{r7}
 8009a64:	b085      	sub	sp, #20
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
 8009a6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a7a:	683a      	ldr	r2, [r7, #0]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	f043 0307 	orr.w	r3, r3, #7
 8009a84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	68fa      	ldr	r2, [r7, #12]
 8009a8a:	609a      	str	r2, [r3, #8]
}
 8009a8c:	bf00      	nop
 8009a8e:	3714      	adds	r7, #20
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b087      	sub	sp, #28
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	607a      	str	r2, [r7, #4]
 8009aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ab2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	021a      	lsls	r2, r3, #8
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	431a      	orrs	r2, r3
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	697a      	ldr	r2, [r7, #20]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	697a      	ldr	r2, [r7, #20]
 8009aca:	609a      	str	r2, [r3, #8]
}
 8009acc:	bf00      	nop
 8009ace:	371c      	adds	r7, #28
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b085      	sub	sp, #20
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d101      	bne.n	8009af0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009aec:	2302      	movs	r3, #2
 8009aee:	e05a      	b.n	8009ba6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2201      	movs	r2, #1
 8009af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2202      	movs	r2, #2
 8009afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	68fa      	ldr	r2, [r7, #12]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a21      	ldr	r2, [pc, #132]	; (8009bb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d022      	beq.n	8009b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b3c:	d01d      	beq.n	8009b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a1d      	ldr	r2, [pc, #116]	; (8009bb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d018      	beq.n	8009b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a1b      	ldr	r2, [pc, #108]	; (8009bbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d013      	beq.n	8009b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a1a      	ldr	r2, [pc, #104]	; (8009bc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d00e      	beq.n	8009b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a18      	ldr	r2, [pc, #96]	; (8009bc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d009      	beq.n	8009b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a17      	ldr	r2, [pc, #92]	; (8009bc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d004      	beq.n	8009b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a15      	ldr	r2, [pc, #84]	; (8009bcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d10c      	bne.n	8009b94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	68ba      	ldr	r2, [r7, #8]
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	68ba      	ldr	r2, [r7, #8]
 8009b92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ba4:	2300      	movs	r3, #0
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3714      	adds	r7, #20
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr
 8009bb2:	bf00      	nop
 8009bb4:	40010000 	.word	0x40010000
 8009bb8:	40000400 	.word	0x40000400
 8009bbc:	40000800 	.word	0x40000800
 8009bc0:	40000c00 	.word	0x40000c00
 8009bc4:	40010400 	.word	0x40010400
 8009bc8:	40014000 	.word	0x40014000
 8009bcc:	40001800 	.word	0x40001800

08009bd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b083      	sub	sp, #12
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009bd8:	bf00      	nop
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009bec:	bf00      	nop
 8009bee:	370c      	adds	r7, #12
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d101      	bne.n	8009c0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	e03f      	b.n	8009c8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d106      	bne.n	8009c24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f7f9 fd3a 	bl	8003698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2224      	movs	r2, #36	; 0x24
 8009c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68da      	ldr	r2, [r3, #12]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009c3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 fddf 	bl	800a800 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	691a      	ldr	r2, [r3, #16]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	695a      	ldr	r2, [r3, #20]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	68da      	ldr	r2, [r3, #12]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2220      	movs	r2, #32
 8009c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2220      	movs	r2, #32
 8009c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3708      	adds	r7, #8
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b08a      	sub	sp, #40	; 0x28
 8009c96:	af02      	add	r7, sp, #8
 8009c98:	60f8      	str	r0, [r7, #12]
 8009c9a:	60b9      	str	r1, [r7, #8]
 8009c9c:	603b      	str	r3, [r7, #0]
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	2b20      	cmp	r3, #32
 8009cb0:	d17c      	bne.n	8009dac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d002      	beq.n	8009cbe <HAL_UART_Transmit+0x2c>
 8009cb8:	88fb      	ldrh	r3, [r7, #6]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d101      	bne.n	8009cc2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e075      	b.n	8009dae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d101      	bne.n	8009cd0 <HAL_UART_Transmit+0x3e>
 8009ccc:	2302      	movs	r3, #2
 8009cce:	e06e      	b.n	8009dae <HAL_UART_Transmit+0x11c>
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2221      	movs	r2, #33	; 0x21
 8009ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009ce6:	f7fa ffc3 	bl	8004c70 <HAL_GetTick>
 8009cea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	88fa      	ldrh	r2, [r7, #6]
 8009cf0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	88fa      	ldrh	r2, [r7, #6]
 8009cf6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d00:	d108      	bne.n	8009d14 <HAL_UART_Transmit+0x82>
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	691b      	ldr	r3, [r3, #16]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d104      	bne.n	8009d14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	61bb      	str	r3, [r7, #24]
 8009d12:	e003      	b.n	8009d1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009d24:	e02a      	b.n	8009d7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	2180      	movs	r1, #128	; 0x80
 8009d30:	68f8      	ldr	r0, [r7, #12]
 8009d32:	f000 fb1f 	bl	800a374 <UART_WaitOnFlagUntilTimeout>
 8009d36:	4603      	mov	r3, r0
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d001      	beq.n	8009d40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	e036      	b.n	8009dae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d10b      	bne.n	8009d5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d46:	69bb      	ldr	r3, [r7, #24]
 8009d48:	881b      	ldrh	r3, [r3, #0]
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	3302      	adds	r3, #2
 8009d5a:	61bb      	str	r3, [r7, #24]
 8009d5c:	e007      	b.n	8009d6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	781a      	ldrb	r2, [r3, #0]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	3b01      	subs	r3, #1
 8009d76:	b29a      	uxth	r2, r3
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1cf      	bne.n	8009d26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	9300      	str	r3, [sp, #0]
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	2140      	movs	r1, #64	; 0x40
 8009d90:	68f8      	ldr	r0, [r7, #12]
 8009d92:	f000 faef 	bl	800a374 <UART_WaitOnFlagUntilTimeout>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d001      	beq.n	8009da0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009d9c:	2303      	movs	r3, #3
 8009d9e:	e006      	b.n	8009dae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2220      	movs	r2, #32
 8009da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009da8:	2300      	movs	r3, #0
 8009daa:	e000      	b.n	8009dae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009dac:	2302      	movs	r3, #2
  }
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3720      	adds	r7, #32
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b084      	sub	sp, #16
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	60f8      	str	r0, [r7, #12]
 8009dbe:	60b9      	str	r1, [r7, #8]
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	2b20      	cmp	r3, #32
 8009dce:	d11d      	bne.n	8009e0c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d002      	beq.n	8009ddc <HAL_UART_Receive_IT+0x26>
 8009dd6:	88fb      	ldrh	r3, [r7, #6]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d101      	bne.n	8009de0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	e016      	b.n	8009e0e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d101      	bne.n	8009dee <HAL_UART_Receive_IT+0x38>
 8009dea:	2302      	movs	r3, #2
 8009dec:	e00f      	b.n	8009e0e <HAL_UART_Receive_IT+0x58>
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2201      	movs	r2, #1
 8009df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009dfc:	88fb      	ldrh	r3, [r7, #6]
 8009dfe:	461a      	mov	r2, r3
 8009e00:	68b9      	ldr	r1, [r7, #8]
 8009e02:	68f8      	ldr	r0, [r7, #12]
 8009e04:	f000 fb24 	bl	800a450 <UART_Start_Receive_IT>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	e000      	b.n	8009e0e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009e0c:	2302      	movs	r3, #2
  }
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
	...

08009e18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b0ba      	sub	sp, #232	; 0xe8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	695b      	ldr	r3, [r3, #20]
 8009e3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009e44:	2300      	movs	r3, #0
 8009e46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e4e:	f003 030f 	and.w	r3, r3, #15
 8009e52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009e56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d10f      	bne.n	8009e7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e62:	f003 0320 	and.w	r3, r3, #32
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d009      	beq.n	8009e7e <HAL_UART_IRQHandler+0x66>
 8009e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e6e:	f003 0320 	and.w	r3, r3, #32
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d003      	beq.n	8009e7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fc07 	bl	800a68a <UART_Receive_IT>
      return;
 8009e7c:	e256      	b.n	800a32c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009e7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	f000 80de 	beq.w	800a044 <HAL_UART_IRQHandler+0x22c>
 8009e88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e8c:	f003 0301 	and.w	r3, r3, #1
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d106      	bne.n	8009ea2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f000 80d1 	beq.w	800a044 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ea6:	f003 0301 	and.w	r3, r3, #1
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00b      	beq.n	8009ec6 <HAL_UART_IRQHandler+0xae>
 8009eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d005      	beq.n	8009ec6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ebe:	f043 0201 	orr.w	r2, r3, #1
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eca:	f003 0304 	and.w	r3, r3, #4
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d00b      	beq.n	8009eea <HAL_UART_IRQHandler+0xd2>
 8009ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ed6:	f003 0301 	and.w	r3, r3, #1
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d005      	beq.n	8009eea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee2:	f043 0202 	orr.w	r2, r3, #2
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eee:	f003 0302 	and.w	r3, r3, #2
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00b      	beq.n	8009f0e <HAL_UART_IRQHandler+0xf6>
 8009ef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009efa:	f003 0301 	and.w	r3, r3, #1
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d005      	beq.n	8009f0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f06:	f043 0204 	orr.w	r2, r3, #4
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f12:	f003 0308 	and.w	r3, r3, #8
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d011      	beq.n	8009f3e <HAL_UART_IRQHandler+0x126>
 8009f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f1e:	f003 0320 	and.w	r3, r3, #32
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d105      	bne.n	8009f32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f2a:	f003 0301 	and.w	r3, r3, #1
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d005      	beq.n	8009f3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f36:	f043 0208 	orr.w	r2, r3, #8
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	f000 81ed 	beq.w	800a322 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f4c:	f003 0320 	and.w	r3, r3, #32
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d008      	beq.n	8009f66 <HAL_UART_IRQHandler+0x14e>
 8009f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f58:	f003 0320 	and.w	r3, r3, #32
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d002      	beq.n	8009f66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 fb92 	bl	800a68a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	695b      	ldr	r3, [r3, #20]
 8009f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f70:	2b40      	cmp	r3, #64	; 0x40
 8009f72:	bf0c      	ite	eq
 8009f74:	2301      	moveq	r3, #1
 8009f76:	2300      	movne	r3, #0
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f82:	f003 0308 	and.w	r3, r3, #8
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d103      	bne.n	8009f92 <HAL_UART_IRQHandler+0x17a>
 8009f8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d04f      	beq.n	800a032 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 fa9a 	bl	800a4cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	695b      	ldr	r3, [r3, #20]
 8009f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fa2:	2b40      	cmp	r3, #64	; 0x40
 8009fa4:	d141      	bne.n	800a02a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	3314      	adds	r3, #20
 8009fac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009fb4:	e853 3f00 	ldrex	r3, [r3]
 8009fb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009fbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009fc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	3314      	adds	r3, #20
 8009fce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009fd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009fd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009fde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009fe2:	e841 2300 	strex	r3, r2, [r1]
 8009fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009fea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d1d9      	bne.n	8009fa6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d013      	beq.n	800a022 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ffe:	4a7d      	ldr	r2, [pc, #500]	; (800a1f4 <HAL_UART_IRQHandler+0x3dc>)
 800a000:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a006:	4618      	mov	r0, r3
 800a008:	f7fb fca0 	bl	800594c <HAL_DMA_Abort_IT>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d016      	beq.n	800a040 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a01c:	4610      	mov	r0, r2
 800a01e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a020:	e00e      	b.n	800a040 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 f990 	bl	800a348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a028:	e00a      	b.n	800a040 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 f98c 	bl	800a348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a030:	e006      	b.n	800a040 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 f988 	bl	800a348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a03e:	e170      	b.n	800a322 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a040:	bf00      	nop
    return;
 800a042:	e16e      	b.n	800a322 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a048:	2b01      	cmp	r3, #1
 800a04a:	f040 814a 	bne.w	800a2e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a04e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a052:	f003 0310 	and.w	r3, r3, #16
 800a056:	2b00      	cmp	r3, #0
 800a058:	f000 8143 	beq.w	800a2e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a05c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a060:	f003 0310 	and.w	r3, r3, #16
 800a064:	2b00      	cmp	r3, #0
 800a066:	f000 813c 	beq.w	800a2e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a06a:	2300      	movs	r3, #0
 800a06c:	60bb      	str	r3, [r7, #8]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	60bb      	str	r3, [r7, #8]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	60bb      	str	r3, [r7, #8]
 800a07e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	695b      	ldr	r3, [r3, #20]
 800a086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a08a:	2b40      	cmp	r3, #64	; 0x40
 800a08c:	f040 80b4 	bne.w	800a1f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a09c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 8140 	beq.w	800a326 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a0aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	f080 8139 	bcs.w	800a326 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a0ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c0:	69db      	ldr	r3, [r3, #28]
 800a0c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0c6:	f000 8088 	beq.w	800a1da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	330c      	adds	r3, #12
 800a0d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a0d8:	e853 3f00 	ldrex	r3, [r3]
 800a0dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a0e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a0e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	330c      	adds	r3, #12
 800a0f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a0f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a0fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a102:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a106:	e841 2300 	strex	r3, r2, [r1]
 800a10a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a10e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1d9      	bne.n	800a0ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	3314      	adds	r3, #20
 800a11c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a11e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a120:	e853 3f00 	ldrex	r3, [r3]
 800a124:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a126:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a128:	f023 0301 	bic.w	r3, r3, #1
 800a12c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	3314      	adds	r3, #20
 800a136:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a13a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a13e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a140:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a142:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a146:	e841 2300 	strex	r3, r2, [r1]
 800a14a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a14c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1e1      	bne.n	800a116 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	3314      	adds	r3, #20
 800a158:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a15a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a15c:	e853 3f00 	ldrex	r3, [r3]
 800a160:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a168:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	3314      	adds	r3, #20
 800a172:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a176:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a178:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a17c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a17e:	e841 2300 	strex	r3, r2, [r1]
 800a182:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a184:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a186:	2b00      	cmp	r3, #0
 800a188:	d1e3      	bne.n	800a152 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2220      	movs	r2, #32
 800a18e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2200      	movs	r2, #0
 800a196:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	330c      	adds	r3, #12
 800a19e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1a2:	e853 3f00 	ldrex	r3, [r3]
 800a1a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a1a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1aa:	f023 0310 	bic.w	r3, r3, #16
 800a1ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	330c      	adds	r3, #12
 800a1b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a1bc:	65ba      	str	r2, [r7, #88]	; 0x58
 800a1be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a1c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a1c4:	e841 2300 	strex	r3, r2, [r1]
 800a1c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a1ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d1e3      	bne.n	800a198 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f7fb fb49 	bl	800586c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	1ad3      	subs	r3, r2, r3
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 f8b6 	bl	800a35c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a1f0:	e099      	b.n	800a326 <HAL_UART_IRQHandler+0x50e>
 800a1f2:	bf00      	nop
 800a1f4:	0800a593 	.word	0x0800a593
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a200:	b29b      	uxth	r3, r3
 800a202:	1ad3      	subs	r3, r2, r3
 800a204:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	2b00      	cmp	r3, #0
 800a210:	f000 808b 	beq.w	800a32a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a214:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f000 8086 	beq.w	800a32a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	330c      	adds	r3, #12
 800a224:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a228:	e853 3f00 	ldrex	r3, [r3]
 800a22c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a22e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a230:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a234:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	330c      	adds	r3, #12
 800a23e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a242:	647a      	str	r2, [r7, #68]	; 0x44
 800a244:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a246:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a248:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a24a:	e841 2300 	strex	r3, r2, [r1]
 800a24e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a252:	2b00      	cmp	r3, #0
 800a254:	d1e3      	bne.n	800a21e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	3314      	adds	r3, #20
 800a25c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a260:	e853 3f00 	ldrex	r3, [r3]
 800a264:	623b      	str	r3, [r7, #32]
   return(result);
 800a266:	6a3b      	ldr	r3, [r7, #32]
 800a268:	f023 0301 	bic.w	r3, r3, #1
 800a26c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	3314      	adds	r3, #20
 800a276:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a27a:	633a      	str	r2, [r7, #48]	; 0x30
 800a27c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a282:	e841 2300 	strex	r3, r2, [r1]
 800a286:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d1e3      	bne.n	800a256 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2220      	movs	r2, #32
 800a292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	330c      	adds	r3, #12
 800a2a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	e853 3f00 	ldrex	r3, [r3]
 800a2aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f023 0310 	bic.w	r3, r3, #16
 800a2b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	330c      	adds	r3, #12
 800a2bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a2c0:	61fa      	str	r2, [r7, #28]
 800a2c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c4:	69b9      	ldr	r1, [r7, #24]
 800a2c6:	69fa      	ldr	r2, [r7, #28]
 800a2c8:	e841 2300 	strex	r3, r2, [r1]
 800a2cc:	617b      	str	r3, [r7, #20]
   return(result);
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d1e3      	bne.n	800a29c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a2d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a2d8:	4619      	mov	r1, r3
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 f83e 	bl	800a35c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a2e0:	e023      	b.n	800a32a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a2e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d009      	beq.n	800a302 <HAL_UART_IRQHandler+0x4ea>
 800a2ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d003      	beq.n	800a302 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 f95d 	bl	800a5ba <UART_Transmit_IT>
    return;
 800a300:	e014      	b.n	800a32c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00e      	beq.n	800a32c <HAL_UART_IRQHandler+0x514>
 800a30e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a316:	2b00      	cmp	r3, #0
 800a318:	d008      	beq.n	800a32c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 f99d 	bl	800a65a <UART_EndTransmit_IT>
    return;
 800a320:	e004      	b.n	800a32c <HAL_UART_IRQHandler+0x514>
    return;
 800a322:	bf00      	nop
 800a324:	e002      	b.n	800a32c <HAL_UART_IRQHandler+0x514>
      return;
 800a326:	bf00      	nop
 800a328:	e000      	b.n	800a32c <HAL_UART_IRQHandler+0x514>
      return;
 800a32a:	bf00      	nop
  }
}
 800a32c:	37e8      	adds	r7, #232	; 0xe8
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop

0800a334 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a33c:	bf00      	nop
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a350:	bf00      	nop
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	460b      	mov	r3, r1
 800a366:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a368:	bf00      	nop
 800a36a:	370c      	adds	r7, #12
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr

0800a374 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b090      	sub	sp, #64	; 0x40
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	603b      	str	r3, [r7, #0]
 800a380:	4613      	mov	r3, r2
 800a382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a384:	e050      	b.n	800a428 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a38c:	d04c      	beq.n	800a428 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a38e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a390:	2b00      	cmp	r3, #0
 800a392:	d007      	beq.n	800a3a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a394:	f7fa fc6c 	bl	8004c70 <HAL_GetTick>
 800a398:	4602      	mov	r2, r0
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	1ad3      	subs	r3, r2, r3
 800a39e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d241      	bcs.n	800a428 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	330c      	adds	r3, #12
 800a3aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ae:	e853 3f00 	ldrex	r3, [r3]
 800a3b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	330c      	adds	r3, #12
 800a3c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a3c4:	637a      	str	r2, [r7, #52]	; 0x34
 800a3c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a3ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3cc:	e841 2300 	strex	r3, r2, [r1]
 800a3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1e5      	bne.n	800a3a4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	3314      	adds	r3, #20
 800a3de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	e853 3f00 	ldrex	r3, [r3]
 800a3e6:	613b      	str	r3, [r7, #16]
   return(result);
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	f023 0301 	bic.w	r3, r3, #1
 800a3ee:	63bb      	str	r3, [r7, #56]	; 0x38
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	3314      	adds	r3, #20
 800a3f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3f8:	623a      	str	r2, [r7, #32]
 800a3fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fc:	69f9      	ldr	r1, [r7, #28]
 800a3fe:	6a3a      	ldr	r2, [r7, #32]
 800a400:	e841 2300 	strex	r3, r2, [r1]
 800a404:	61bb      	str	r3, [r7, #24]
   return(result);
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d1e5      	bne.n	800a3d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2220      	movs	r2, #32
 800a410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2220      	movs	r2, #32
 800a418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2200      	movs	r2, #0
 800a420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a424:	2303      	movs	r3, #3
 800a426:	e00f      	b.n	800a448 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	4013      	ands	r3, r2
 800a432:	68ba      	ldr	r2, [r7, #8]
 800a434:	429a      	cmp	r2, r3
 800a436:	bf0c      	ite	eq
 800a438:	2301      	moveq	r3, #1
 800a43a:	2300      	movne	r3, #0
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	461a      	mov	r2, r3
 800a440:	79fb      	ldrb	r3, [r7, #7]
 800a442:	429a      	cmp	r2, r3
 800a444:	d09f      	beq.n	800a386 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3740      	adds	r7, #64	; 0x40
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a450:	b480      	push	{r7}
 800a452:	b085      	sub	sp, #20
 800a454:	af00      	add	r7, sp, #0
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	4613      	mov	r3, r2
 800a45c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	68ba      	ldr	r2, [r7, #8]
 800a462:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	88fa      	ldrh	r2, [r7, #6]
 800a468:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	88fa      	ldrh	r2, [r7, #6]
 800a46e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2200      	movs	r2, #0
 800a474:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2222      	movs	r2, #34	; 0x22
 800a47a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2200      	movs	r2, #0
 800a482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d007      	beq.n	800a49e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68da      	ldr	r2, [r3, #12]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a49c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	695a      	ldr	r2, [r3, #20]
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f042 0201 	orr.w	r2, r2, #1
 800a4ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	68da      	ldr	r2, [r3, #12]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f042 0220 	orr.w	r2, r2, #32
 800a4bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a4be:	2300      	movs	r3, #0
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3714      	adds	r7, #20
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b095      	sub	sp, #84	; 0x54
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	330c      	adds	r3, #12
 800a4da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4de:	e853 3f00 	ldrex	r3, [r3]
 800a4e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a4ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	330c      	adds	r3, #12
 800a4f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a4f4:	643a      	str	r2, [r7, #64]	; 0x40
 800a4f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a4fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a4fc:	e841 2300 	strex	r3, r2, [r1]
 800a500:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a504:	2b00      	cmp	r3, #0
 800a506:	d1e5      	bne.n	800a4d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	3314      	adds	r3, #20
 800a50e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a510:	6a3b      	ldr	r3, [r7, #32]
 800a512:	e853 3f00 	ldrex	r3, [r3]
 800a516:	61fb      	str	r3, [r7, #28]
   return(result);
 800a518:	69fb      	ldr	r3, [r7, #28]
 800a51a:	f023 0301 	bic.w	r3, r3, #1
 800a51e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	3314      	adds	r3, #20
 800a526:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a528:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a52a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a52c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a52e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a530:	e841 2300 	strex	r3, r2, [r1]
 800a534:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d1e5      	bne.n	800a508 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a540:	2b01      	cmp	r3, #1
 800a542:	d119      	bne.n	800a578 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	330c      	adds	r3, #12
 800a54a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	e853 3f00 	ldrex	r3, [r3]
 800a552:	60bb      	str	r3, [r7, #8]
   return(result);
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	f023 0310 	bic.w	r3, r3, #16
 800a55a:	647b      	str	r3, [r7, #68]	; 0x44
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	330c      	adds	r3, #12
 800a562:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a564:	61ba      	str	r2, [r7, #24]
 800a566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a568:	6979      	ldr	r1, [r7, #20]
 800a56a:	69ba      	ldr	r2, [r7, #24]
 800a56c:	e841 2300 	strex	r3, r2, [r1]
 800a570:	613b      	str	r3, [r7, #16]
   return(result);
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d1e5      	bne.n	800a544 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2220      	movs	r2, #32
 800a57c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a586:	bf00      	nop
 800a588:	3754      	adds	r7, #84	; 0x54
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr

0800a592 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a592:	b580      	push	{r7, lr}
 800a594:	b084      	sub	sp, #16
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a59e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f7ff fecb 	bl	800a348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5b2:	bf00      	nop
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a5ba:	b480      	push	{r7}
 800a5bc:	b085      	sub	sp, #20
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	2b21      	cmp	r3, #33	; 0x21
 800a5cc:	d13e      	bne.n	800a64c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5d6:	d114      	bne.n	800a602 <UART_Transmit_IT+0x48>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	691b      	ldr	r3, [r3, #16]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d110      	bne.n	800a602 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6a1b      	ldr	r3, [r3, #32]
 800a5e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	881b      	ldrh	r3, [r3, #0]
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6a1b      	ldr	r3, [r3, #32]
 800a5fa:	1c9a      	adds	r2, r3, #2
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	621a      	str	r2, [r3, #32]
 800a600:	e008      	b.n	800a614 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a1b      	ldr	r3, [r3, #32]
 800a606:	1c59      	adds	r1, r3, #1
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	6211      	str	r1, [r2, #32]
 800a60c:	781a      	ldrb	r2, [r3, #0]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a618:	b29b      	uxth	r3, r3
 800a61a:	3b01      	subs	r3, #1
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	4619      	mov	r1, r3
 800a622:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a624:	2b00      	cmp	r3, #0
 800a626:	d10f      	bne.n	800a648 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	68da      	ldr	r2, [r3, #12]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a636:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	68da      	ldr	r2, [r3, #12]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a646:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a648:	2300      	movs	r3, #0
 800a64a:	e000      	b.n	800a64e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a64c:	2302      	movs	r3, #2
  }
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3714      	adds	r7, #20
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr

0800a65a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b082      	sub	sp, #8
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	68da      	ldr	r2, [r3, #12]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a670:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2220      	movs	r2, #32
 800a676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f7ff fe5a 	bl	800a334 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a680:	2300      	movs	r3, #0
}
 800a682:	4618      	mov	r0, r3
 800a684:	3708      	adds	r7, #8
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b08c      	sub	sp, #48	; 0x30
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	2b22      	cmp	r3, #34	; 0x22
 800a69c:	f040 80ab 	bne.w	800a7f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6a8:	d117      	bne.n	800a6da <UART_Receive_IT+0x50>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d113      	bne.n	800a6da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6c8:	b29a      	uxth	r2, r3
 800a6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6d2:	1c9a      	adds	r2, r3, #2
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	629a      	str	r2, [r3, #40]	; 0x28
 800a6d8:	e026      	b.n	800a728 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6ec:	d007      	beq.n	800a6fe <UART_Receive_IT+0x74>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d10a      	bne.n	800a70c <UART_Receive_IT+0x82>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	691b      	ldr	r3, [r3, #16]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d106      	bne.n	800a70c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	b2da      	uxtb	r2, r3
 800a706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a708:	701a      	strb	r2, [r3, #0]
 800a70a:	e008      	b.n	800a71e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	b2db      	uxtb	r3, r3
 800a714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a718:	b2da      	uxtb	r2, r3
 800a71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a71c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a722:	1c5a      	adds	r2, r3, #1
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	3b01      	subs	r3, #1
 800a730:	b29b      	uxth	r3, r3
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	4619      	mov	r1, r3
 800a736:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d15a      	bne.n	800a7f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	68da      	ldr	r2, [r3, #12]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f022 0220 	bic.w	r2, r2, #32
 800a74a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	68da      	ldr	r2, [r3, #12]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a75a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	695a      	ldr	r2, [r3, #20]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f022 0201 	bic.w	r2, r2, #1
 800a76a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2220      	movs	r2, #32
 800a770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d135      	bne.n	800a7e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	330c      	adds	r3, #12
 800a788:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	e853 3f00 	ldrex	r3, [r3]
 800a790:	613b      	str	r3, [r7, #16]
   return(result);
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	f023 0310 	bic.w	r3, r3, #16
 800a798:	627b      	str	r3, [r7, #36]	; 0x24
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	330c      	adds	r3, #12
 800a7a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7a2:	623a      	str	r2, [r7, #32]
 800a7a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a6:	69f9      	ldr	r1, [r7, #28]
 800a7a8:	6a3a      	ldr	r2, [r7, #32]
 800a7aa:	e841 2300 	strex	r3, r2, [r1]
 800a7ae:	61bb      	str	r3, [r7, #24]
   return(result);
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d1e5      	bne.n	800a782 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f003 0310 	and.w	r3, r3, #16
 800a7c0:	2b10      	cmp	r3, #16
 800a7c2:	d10a      	bne.n	800a7da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	60fb      	str	r3, [r7, #12]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	60fb      	str	r3, [r7, #12]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	60fb      	str	r3, [r7, #12]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a7de:	4619      	mov	r1, r3
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f7ff fdbb 	bl	800a35c <HAL_UARTEx_RxEventCallback>
 800a7e6:	e002      	b.n	800a7ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f7f9 f867 	bl	80038bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	e002      	b.n	800a7f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	e000      	b.n	800a7f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a7f6:	2302      	movs	r3, #2
  }
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3730      	adds	r7, #48	; 0x30
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a804:	b0c0      	sub	sp, #256	; 0x100
 800a806:	af00      	add	r7, sp, #0
 800a808:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a80c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	691b      	ldr	r3, [r3, #16]
 800a814:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a81c:	68d9      	ldr	r1, [r3, #12]
 800a81e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	ea40 0301 	orr.w	r3, r0, r1
 800a828:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a82a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a82e:	689a      	ldr	r2, [r3, #8]
 800a830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a834:	691b      	ldr	r3, [r3, #16]
 800a836:	431a      	orrs	r2, r3
 800a838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a83c:	695b      	ldr	r3, [r3, #20]
 800a83e:	431a      	orrs	r2, r3
 800a840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a844:	69db      	ldr	r3, [r3, #28]
 800a846:	4313      	orrs	r3, r2
 800a848:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a84c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a858:	f021 010c 	bic.w	r1, r1, #12
 800a85c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a866:	430b      	orrs	r3, r1
 800a868:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a86a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	695b      	ldr	r3, [r3, #20]
 800a872:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a87a:	6999      	ldr	r1, [r3, #24]
 800a87c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	ea40 0301 	orr.w	r3, r0, r1
 800a886:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	4b8f      	ldr	r3, [pc, #572]	; (800aacc <UART_SetConfig+0x2cc>)
 800a890:	429a      	cmp	r2, r3
 800a892:	d005      	beq.n	800a8a0 <UART_SetConfig+0xa0>
 800a894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	4b8d      	ldr	r3, [pc, #564]	; (800aad0 <UART_SetConfig+0x2d0>)
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d104      	bne.n	800a8aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a8a0:	f7fe fc0e 	bl	80090c0 <HAL_RCC_GetPCLK2Freq>
 800a8a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a8a8:	e003      	b.n	800a8b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a8aa:	f7fe fbf5 	bl	8009098 <HAL_RCC_GetPCLK1Freq>
 800a8ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a8b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8b6:	69db      	ldr	r3, [r3, #28]
 800a8b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8bc:	f040 810c 	bne.w	800aad8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a8c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a8ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a8ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a8d2:	4622      	mov	r2, r4
 800a8d4:	462b      	mov	r3, r5
 800a8d6:	1891      	adds	r1, r2, r2
 800a8d8:	65b9      	str	r1, [r7, #88]	; 0x58
 800a8da:	415b      	adcs	r3, r3
 800a8dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a8de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a8e2:	4621      	mov	r1, r4
 800a8e4:	eb12 0801 	adds.w	r8, r2, r1
 800a8e8:	4629      	mov	r1, r5
 800a8ea:	eb43 0901 	adc.w	r9, r3, r1
 800a8ee:	f04f 0200 	mov.w	r2, #0
 800a8f2:	f04f 0300 	mov.w	r3, #0
 800a8f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a8fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a8fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a902:	4690      	mov	r8, r2
 800a904:	4699      	mov	r9, r3
 800a906:	4623      	mov	r3, r4
 800a908:	eb18 0303 	adds.w	r3, r8, r3
 800a90c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a910:	462b      	mov	r3, r5
 800a912:	eb49 0303 	adc.w	r3, r9, r3
 800a916:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a91a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	2200      	movs	r2, #0
 800a922:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a926:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a92a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a92e:	460b      	mov	r3, r1
 800a930:	18db      	adds	r3, r3, r3
 800a932:	653b      	str	r3, [r7, #80]	; 0x50
 800a934:	4613      	mov	r3, r2
 800a936:	eb42 0303 	adc.w	r3, r2, r3
 800a93a:	657b      	str	r3, [r7, #84]	; 0x54
 800a93c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a940:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a944:	f7f6 f980 	bl	8000c48 <__aeabi_uldivmod>
 800a948:	4602      	mov	r2, r0
 800a94a:	460b      	mov	r3, r1
 800a94c:	4b61      	ldr	r3, [pc, #388]	; (800aad4 <UART_SetConfig+0x2d4>)
 800a94e:	fba3 2302 	umull	r2, r3, r3, r2
 800a952:	095b      	lsrs	r3, r3, #5
 800a954:	011c      	lsls	r4, r3, #4
 800a956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a95a:	2200      	movs	r2, #0
 800a95c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a960:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a964:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a968:	4642      	mov	r2, r8
 800a96a:	464b      	mov	r3, r9
 800a96c:	1891      	adds	r1, r2, r2
 800a96e:	64b9      	str	r1, [r7, #72]	; 0x48
 800a970:	415b      	adcs	r3, r3
 800a972:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a974:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a978:	4641      	mov	r1, r8
 800a97a:	eb12 0a01 	adds.w	sl, r2, r1
 800a97e:	4649      	mov	r1, r9
 800a980:	eb43 0b01 	adc.w	fp, r3, r1
 800a984:	f04f 0200 	mov.w	r2, #0
 800a988:	f04f 0300 	mov.w	r3, #0
 800a98c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a990:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a994:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a998:	4692      	mov	sl, r2
 800a99a:	469b      	mov	fp, r3
 800a99c:	4643      	mov	r3, r8
 800a99e:	eb1a 0303 	adds.w	r3, sl, r3
 800a9a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a9a6:	464b      	mov	r3, r9
 800a9a8:	eb4b 0303 	adc.w	r3, fp, r3
 800a9ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a9b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a9bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a9c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	18db      	adds	r3, r3, r3
 800a9c8:	643b      	str	r3, [r7, #64]	; 0x40
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	eb42 0303 	adc.w	r3, r2, r3
 800a9d0:	647b      	str	r3, [r7, #68]	; 0x44
 800a9d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a9d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a9da:	f7f6 f935 	bl	8000c48 <__aeabi_uldivmod>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	4611      	mov	r1, r2
 800a9e4:	4b3b      	ldr	r3, [pc, #236]	; (800aad4 <UART_SetConfig+0x2d4>)
 800a9e6:	fba3 2301 	umull	r2, r3, r3, r1
 800a9ea:	095b      	lsrs	r3, r3, #5
 800a9ec:	2264      	movs	r2, #100	; 0x64
 800a9ee:	fb02 f303 	mul.w	r3, r2, r3
 800a9f2:	1acb      	subs	r3, r1, r3
 800a9f4:	00db      	lsls	r3, r3, #3
 800a9f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a9fa:	4b36      	ldr	r3, [pc, #216]	; (800aad4 <UART_SetConfig+0x2d4>)
 800a9fc:	fba3 2302 	umull	r2, r3, r3, r2
 800aa00:	095b      	lsrs	r3, r3, #5
 800aa02:	005b      	lsls	r3, r3, #1
 800aa04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aa08:	441c      	add	r4, r3
 800aa0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aa14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800aa18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800aa1c:	4642      	mov	r2, r8
 800aa1e:	464b      	mov	r3, r9
 800aa20:	1891      	adds	r1, r2, r2
 800aa22:	63b9      	str	r1, [r7, #56]	; 0x38
 800aa24:	415b      	adcs	r3, r3
 800aa26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800aa2c:	4641      	mov	r1, r8
 800aa2e:	1851      	adds	r1, r2, r1
 800aa30:	6339      	str	r1, [r7, #48]	; 0x30
 800aa32:	4649      	mov	r1, r9
 800aa34:	414b      	adcs	r3, r1
 800aa36:	637b      	str	r3, [r7, #52]	; 0x34
 800aa38:	f04f 0200 	mov.w	r2, #0
 800aa3c:	f04f 0300 	mov.w	r3, #0
 800aa40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800aa44:	4659      	mov	r1, fp
 800aa46:	00cb      	lsls	r3, r1, #3
 800aa48:	4651      	mov	r1, sl
 800aa4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa4e:	4651      	mov	r1, sl
 800aa50:	00ca      	lsls	r2, r1, #3
 800aa52:	4610      	mov	r0, r2
 800aa54:	4619      	mov	r1, r3
 800aa56:	4603      	mov	r3, r0
 800aa58:	4642      	mov	r2, r8
 800aa5a:	189b      	adds	r3, r3, r2
 800aa5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aa60:	464b      	mov	r3, r9
 800aa62:	460a      	mov	r2, r1
 800aa64:	eb42 0303 	adc.w	r3, r2, r3
 800aa68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	2200      	movs	r2, #0
 800aa74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800aa78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800aa7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800aa80:	460b      	mov	r3, r1
 800aa82:	18db      	adds	r3, r3, r3
 800aa84:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa86:	4613      	mov	r3, r2
 800aa88:	eb42 0303 	adc.w	r3, r2, r3
 800aa8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800aa92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800aa96:	f7f6 f8d7 	bl	8000c48 <__aeabi_uldivmod>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	4b0d      	ldr	r3, [pc, #52]	; (800aad4 <UART_SetConfig+0x2d4>)
 800aaa0:	fba3 1302 	umull	r1, r3, r3, r2
 800aaa4:	095b      	lsrs	r3, r3, #5
 800aaa6:	2164      	movs	r1, #100	; 0x64
 800aaa8:	fb01 f303 	mul.w	r3, r1, r3
 800aaac:	1ad3      	subs	r3, r2, r3
 800aaae:	00db      	lsls	r3, r3, #3
 800aab0:	3332      	adds	r3, #50	; 0x32
 800aab2:	4a08      	ldr	r2, [pc, #32]	; (800aad4 <UART_SetConfig+0x2d4>)
 800aab4:	fba2 2303 	umull	r2, r3, r2, r3
 800aab8:	095b      	lsrs	r3, r3, #5
 800aaba:	f003 0207 	and.w	r2, r3, #7
 800aabe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4422      	add	r2, r4
 800aac6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800aac8:	e105      	b.n	800acd6 <UART_SetConfig+0x4d6>
 800aaca:	bf00      	nop
 800aacc:	40011000 	.word	0x40011000
 800aad0:	40011400 	.word	0x40011400
 800aad4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aad8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aadc:	2200      	movs	r2, #0
 800aade:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800aae2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aae6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800aaea:	4642      	mov	r2, r8
 800aaec:	464b      	mov	r3, r9
 800aaee:	1891      	adds	r1, r2, r2
 800aaf0:	6239      	str	r1, [r7, #32]
 800aaf2:	415b      	adcs	r3, r3
 800aaf4:	627b      	str	r3, [r7, #36]	; 0x24
 800aaf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aafa:	4641      	mov	r1, r8
 800aafc:	1854      	adds	r4, r2, r1
 800aafe:	4649      	mov	r1, r9
 800ab00:	eb43 0501 	adc.w	r5, r3, r1
 800ab04:	f04f 0200 	mov.w	r2, #0
 800ab08:	f04f 0300 	mov.w	r3, #0
 800ab0c:	00eb      	lsls	r3, r5, #3
 800ab0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ab12:	00e2      	lsls	r2, r4, #3
 800ab14:	4614      	mov	r4, r2
 800ab16:	461d      	mov	r5, r3
 800ab18:	4643      	mov	r3, r8
 800ab1a:	18e3      	adds	r3, r4, r3
 800ab1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ab20:	464b      	mov	r3, r9
 800ab22:	eb45 0303 	adc.w	r3, r5, r3
 800ab26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ab2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ab36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ab3a:	f04f 0200 	mov.w	r2, #0
 800ab3e:	f04f 0300 	mov.w	r3, #0
 800ab42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ab46:	4629      	mov	r1, r5
 800ab48:	008b      	lsls	r3, r1, #2
 800ab4a:	4621      	mov	r1, r4
 800ab4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab50:	4621      	mov	r1, r4
 800ab52:	008a      	lsls	r2, r1, #2
 800ab54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ab58:	f7f6 f876 	bl	8000c48 <__aeabi_uldivmod>
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	460b      	mov	r3, r1
 800ab60:	4b60      	ldr	r3, [pc, #384]	; (800ace4 <UART_SetConfig+0x4e4>)
 800ab62:	fba3 2302 	umull	r2, r3, r3, r2
 800ab66:	095b      	lsrs	r3, r3, #5
 800ab68:	011c      	lsls	r4, r3, #4
 800ab6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab6e:	2200      	movs	r2, #0
 800ab70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ab74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ab78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ab7c:	4642      	mov	r2, r8
 800ab7e:	464b      	mov	r3, r9
 800ab80:	1891      	adds	r1, r2, r2
 800ab82:	61b9      	str	r1, [r7, #24]
 800ab84:	415b      	adcs	r3, r3
 800ab86:	61fb      	str	r3, [r7, #28]
 800ab88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ab8c:	4641      	mov	r1, r8
 800ab8e:	1851      	adds	r1, r2, r1
 800ab90:	6139      	str	r1, [r7, #16]
 800ab92:	4649      	mov	r1, r9
 800ab94:	414b      	adcs	r3, r1
 800ab96:	617b      	str	r3, [r7, #20]
 800ab98:	f04f 0200 	mov.w	r2, #0
 800ab9c:	f04f 0300 	mov.w	r3, #0
 800aba0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800aba4:	4659      	mov	r1, fp
 800aba6:	00cb      	lsls	r3, r1, #3
 800aba8:	4651      	mov	r1, sl
 800abaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800abae:	4651      	mov	r1, sl
 800abb0:	00ca      	lsls	r2, r1, #3
 800abb2:	4610      	mov	r0, r2
 800abb4:	4619      	mov	r1, r3
 800abb6:	4603      	mov	r3, r0
 800abb8:	4642      	mov	r2, r8
 800abba:	189b      	adds	r3, r3, r2
 800abbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800abc0:	464b      	mov	r3, r9
 800abc2:	460a      	mov	r2, r1
 800abc4:	eb42 0303 	adc.w	r3, r2, r3
 800abc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800abcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	67bb      	str	r3, [r7, #120]	; 0x78
 800abd6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800abd8:	f04f 0200 	mov.w	r2, #0
 800abdc:	f04f 0300 	mov.w	r3, #0
 800abe0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800abe4:	4649      	mov	r1, r9
 800abe6:	008b      	lsls	r3, r1, #2
 800abe8:	4641      	mov	r1, r8
 800abea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800abee:	4641      	mov	r1, r8
 800abf0:	008a      	lsls	r2, r1, #2
 800abf2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800abf6:	f7f6 f827 	bl	8000c48 <__aeabi_uldivmod>
 800abfa:	4602      	mov	r2, r0
 800abfc:	460b      	mov	r3, r1
 800abfe:	4b39      	ldr	r3, [pc, #228]	; (800ace4 <UART_SetConfig+0x4e4>)
 800ac00:	fba3 1302 	umull	r1, r3, r3, r2
 800ac04:	095b      	lsrs	r3, r3, #5
 800ac06:	2164      	movs	r1, #100	; 0x64
 800ac08:	fb01 f303 	mul.w	r3, r1, r3
 800ac0c:	1ad3      	subs	r3, r2, r3
 800ac0e:	011b      	lsls	r3, r3, #4
 800ac10:	3332      	adds	r3, #50	; 0x32
 800ac12:	4a34      	ldr	r2, [pc, #208]	; (800ace4 <UART_SetConfig+0x4e4>)
 800ac14:	fba2 2303 	umull	r2, r3, r2, r3
 800ac18:	095b      	lsrs	r3, r3, #5
 800ac1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac1e:	441c      	add	r4, r3
 800ac20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac24:	2200      	movs	r2, #0
 800ac26:	673b      	str	r3, [r7, #112]	; 0x70
 800ac28:	677a      	str	r2, [r7, #116]	; 0x74
 800ac2a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ac2e:	4642      	mov	r2, r8
 800ac30:	464b      	mov	r3, r9
 800ac32:	1891      	adds	r1, r2, r2
 800ac34:	60b9      	str	r1, [r7, #8]
 800ac36:	415b      	adcs	r3, r3
 800ac38:	60fb      	str	r3, [r7, #12]
 800ac3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ac3e:	4641      	mov	r1, r8
 800ac40:	1851      	adds	r1, r2, r1
 800ac42:	6039      	str	r1, [r7, #0]
 800ac44:	4649      	mov	r1, r9
 800ac46:	414b      	adcs	r3, r1
 800ac48:	607b      	str	r3, [r7, #4]
 800ac4a:	f04f 0200 	mov.w	r2, #0
 800ac4e:	f04f 0300 	mov.w	r3, #0
 800ac52:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ac56:	4659      	mov	r1, fp
 800ac58:	00cb      	lsls	r3, r1, #3
 800ac5a:	4651      	mov	r1, sl
 800ac5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac60:	4651      	mov	r1, sl
 800ac62:	00ca      	lsls	r2, r1, #3
 800ac64:	4610      	mov	r0, r2
 800ac66:	4619      	mov	r1, r3
 800ac68:	4603      	mov	r3, r0
 800ac6a:	4642      	mov	r2, r8
 800ac6c:	189b      	adds	r3, r3, r2
 800ac6e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac70:	464b      	mov	r3, r9
 800ac72:	460a      	mov	r2, r1
 800ac74:	eb42 0303 	adc.w	r3, r2, r3
 800ac78:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	663b      	str	r3, [r7, #96]	; 0x60
 800ac84:	667a      	str	r2, [r7, #100]	; 0x64
 800ac86:	f04f 0200 	mov.w	r2, #0
 800ac8a:	f04f 0300 	mov.w	r3, #0
 800ac8e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ac92:	4649      	mov	r1, r9
 800ac94:	008b      	lsls	r3, r1, #2
 800ac96:	4641      	mov	r1, r8
 800ac98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac9c:	4641      	mov	r1, r8
 800ac9e:	008a      	lsls	r2, r1, #2
 800aca0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800aca4:	f7f5 ffd0 	bl	8000c48 <__aeabi_uldivmod>
 800aca8:	4602      	mov	r2, r0
 800acaa:	460b      	mov	r3, r1
 800acac:	4b0d      	ldr	r3, [pc, #52]	; (800ace4 <UART_SetConfig+0x4e4>)
 800acae:	fba3 1302 	umull	r1, r3, r3, r2
 800acb2:	095b      	lsrs	r3, r3, #5
 800acb4:	2164      	movs	r1, #100	; 0x64
 800acb6:	fb01 f303 	mul.w	r3, r1, r3
 800acba:	1ad3      	subs	r3, r2, r3
 800acbc:	011b      	lsls	r3, r3, #4
 800acbe:	3332      	adds	r3, #50	; 0x32
 800acc0:	4a08      	ldr	r2, [pc, #32]	; (800ace4 <UART_SetConfig+0x4e4>)
 800acc2:	fba2 2303 	umull	r2, r3, r2, r3
 800acc6:	095b      	lsrs	r3, r3, #5
 800acc8:	f003 020f 	and.w	r2, r3, #15
 800accc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4422      	add	r2, r4
 800acd4:	609a      	str	r2, [r3, #8]
}
 800acd6:	bf00      	nop
 800acd8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800acdc:	46bd      	mov	sp, r7
 800acde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ace2:	bf00      	nop
 800ace4:	51eb851f 	.word	0x51eb851f

0800ace8 <__NVIC_SetPriority>:
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	4603      	mov	r3, r0
 800acf0:	6039      	str	r1, [r7, #0]
 800acf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800acf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	db0a      	blt.n	800ad12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	b2da      	uxtb	r2, r3
 800ad00:	490c      	ldr	r1, [pc, #48]	; (800ad34 <__NVIC_SetPriority+0x4c>)
 800ad02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad06:	0112      	lsls	r2, r2, #4
 800ad08:	b2d2      	uxtb	r2, r2
 800ad0a:	440b      	add	r3, r1
 800ad0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ad10:	e00a      	b.n	800ad28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	b2da      	uxtb	r2, r3
 800ad16:	4908      	ldr	r1, [pc, #32]	; (800ad38 <__NVIC_SetPriority+0x50>)
 800ad18:	79fb      	ldrb	r3, [r7, #7]
 800ad1a:	f003 030f 	and.w	r3, r3, #15
 800ad1e:	3b04      	subs	r3, #4
 800ad20:	0112      	lsls	r2, r2, #4
 800ad22:	b2d2      	uxtb	r2, r2
 800ad24:	440b      	add	r3, r1
 800ad26:	761a      	strb	r2, [r3, #24]
}
 800ad28:	bf00      	nop
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr
 800ad34:	e000e100 	.word	0xe000e100
 800ad38:	e000ed00 	.word	0xe000ed00

0800ad3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ad40:	4b05      	ldr	r3, [pc, #20]	; (800ad58 <SysTick_Handler+0x1c>)
 800ad42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ad44:	f001 fd28 	bl	800c798 <xTaskGetSchedulerState>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	d001      	beq.n	800ad52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ad4e:	f002 fb13 	bl	800d378 <xPortSysTickHandler>
  }
}
 800ad52:	bf00      	nop
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	e000e010 	.word	0xe000e010

0800ad5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ad60:	2100      	movs	r1, #0
 800ad62:	f06f 0004 	mvn.w	r0, #4
 800ad66:	f7ff ffbf 	bl	800ace8 <__NVIC_SetPriority>
#endif
}
 800ad6a:	bf00      	nop
 800ad6c:	bd80      	pop	{r7, pc}
	...

0800ad70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad76:	f3ef 8305 	mrs	r3, IPSR
 800ad7a:	603b      	str	r3, [r7, #0]
  return(result);
 800ad7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d003      	beq.n	800ad8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ad82:	f06f 0305 	mvn.w	r3, #5
 800ad86:	607b      	str	r3, [r7, #4]
 800ad88:	e00c      	b.n	800ada4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ad8a:	4b0a      	ldr	r3, [pc, #40]	; (800adb4 <osKernelInitialize+0x44>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d105      	bne.n	800ad9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ad92:	4b08      	ldr	r3, [pc, #32]	; (800adb4 <osKernelInitialize+0x44>)
 800ad94:	2201      	movs	r2, #1
 800ad96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	607b      	str	r3, [r7, #4]
 800ad9c:	e002      	b.n	800ada4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ad9e:	f04f 33ff 	mov.w	r3, #4294967295
 800ada2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ada4:	687b      	ldr	r3, [r7, #4]
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	370c      	adds	r7, #12
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop
 800adb4:	20000cb0 	.word	0x20000cb0

0800adb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adbe:	f3ef 8305 	mrs	r3, IPSR
 800adc2:	603b      	str	r3, [r7, #0]
  return(result);
 800adc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d003      	beq.n	800add2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800adca:	f06f 0305 	mvn.w	r3, #5
 800adce:	607b      	str	r3, [r7, #4]
 800add0:	e010      	b.n	800adf4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800add2:	4b0b      	ldr	r3, [pc, #44]	; (800ae00 <osKernelStart+0x48>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2b01      	cmp	r3, #1
 800add8:	d109      	bne.n	800adee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800adda:	f7ff ffbf 	bl	800ad5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800adde:	4b08      	ldr	r3, [pc, #32]	; (800ae00 <osKernelStart+0x48>)
 800ade0:	2202      	movs	r2, #2
 800ade2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ade4:	f001 f87c 	bl	800bee0 <vTaskStartScheduler>
      stat = osOK;
 800ade8:	2300      	movs	r3, #0
 800adea:	607b      	str	r3, [r7, #4]
 800adec:	e002      	b.n	800adf4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800adee:	f04f 33ff 	mov.w	r3, #4294967295
 800adf2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800adf4:	687b      	ldr	r3, [r7, #4]
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3708      	adds	r7, #8
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}
 800adfe:	bf00      	nop
 800ae00:	20000cb0 	.word	0x20000cb0

0800ae04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b08e      	sub	sp, #56	; 0x38
 800ae08:	af04      	add	r7, sp, #16
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ae10:	2300      	movs	r3, #0
 800ae12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae14:	f3ef 8305 	mrs	r3, IPSR
 800ae18:	617b      	str	r3, [r7, #20]
  return(result);
 800ae1a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d17e      	bne.n	800af1e <osThreadNew+0x11a>
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d07b      	beq.n	800af1e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ae26:	2380      	movs	r3, #128	; 0x80
 800ae28:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ae2a:	2318      	movs	r3, #24
 800ae2c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ae32:	f04f 33ff 	mov.w	r3, #4294967295
 800ae36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d045      	beq.n	800aeca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d002      	beq.n	800ae4c <osThreadNew+0x48>
        name = attr->name;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	699b      	ldr	r3, [r3, #24]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d002      	beq.n	800ae5a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	699b      	ldr	r3, [r3, #24]
 800ae58:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ae5a:	69fb      	ldr	r3, [r7, #28]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d008      	beq.n	800ae72 <osThreadNew+0x6e>
 800ae60:	69fb      	ldr	r3, [r7, #28]
 800ae62:	2b38      	cmp	r3, #56	; 0x38
 800ae64:	d805      	bhi.n	800ae72 <osThreadNew+0x6e>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	f003 0301 	and.w	r3, r3, #1
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d001      	beq.n	800ae76 <osThreadNew+0x72>
        return (NULL);
 800ae72:	2300      	movs	r3, #0
 800ae74:	e054      	b.n	800af20 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	695b      	ldr	r3, [r3, #20]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d003      	beq.n	800ae86 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	695b      	ldr	r3, [r3, #20]
 800ae82:	089b      	lsrs	r3, r3, #2
 800ae84:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	689b      	ldr	r3, [r3, #8]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d00e      	beq.n	800aeac <osThreadNew+0xa8>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	68db      	ldr	r3, [r3, #12]
 800ae92:	2bbb      	cmp	r3, #187	; 0xbb
 800ae94:	d90a      	bls.n	800aeac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d006      	beq.n	800aeac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	695b      	ldr	r3, [r3, #20]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d002      	beq.n	800aeac <osThreadNew+0xa8>
        mem = 1;
 800aea6:	2301      	movs	r3, #1
 800aea8:	61bb      	str	r3, [r7, #24]
 800aeaa:	e010      	b.n	800aece <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	689b      	ldr	r3, [r3, #8]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d10c      	bne.n	800aece <osThreadNew+0xca>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d108      	bne.n	800aece <osThreadNew+0xca>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	691b      	ldr	r3, [r3, #16]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d104      	bne.n	800aece <osThreadNew+0xca>
          mem = 0;
 800aec4:	2300      	movs	r3, #0
 800aec6:	61bb      	str	r3, [r7, #24]
 800aec8:	e001      	b.n	800aece <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800aeca:	2300      	movs	r3, #0
 800aecc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800aece:	69bb      	ldr	r3, [r7, #24]
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d110      	bne.n	800aef6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aedc:	9202      	str	r2, [sp, #8]
 800aede:	9301      	str	r3, [sp, #4]
 800aee0:	69fb      	ldr	r3, [r7, #28]
 800aee2:	9300      	str	r3, [sp, #0]
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	6a3a      	ldr	r2, [r7, #32]
 800aee8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f000 fe0c 	bl	800bb08 <xTaskCreateStatic>
 800aef0:	4603      	mov	r3, r0
 800aef2:	613b      	str	r3, [r7, #16]
 800aef4:	e013      	b.n	800af1e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800aef6:	69bb      	ldr	r3, [r7, #24]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d110      	bne.n	800af1e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800aefc:	6a3b      	ldr	r3, [r7, #32]
 800aefe:	b29a      	uxth	r2, r3
 800af00:	f107 0310 	add.w	r3, r7, #16
 800af04:	9301      	str	r3, [sp, #4]
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	9300      	str	r3, [sp, #0]
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af0e:	68f8      	ldr	r0, [r7, #12]
 800af10:	f000 fe57 	bl	800bbc2 <xTaskCreate>
 800af14:	4603      	mov	r3, r0
 800af16:	2b01      	cmp	r3, #1
 800af18:	d001      	beq.n	800af1e <osThreadNew+0x11a>
            hTask = NULL;
 800af1a:	2300      	movs	r3, #0
 800af1c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800af1e:	693b      	ldr	r3, [r7, #16]
}
 800af20:	4618      	mov	r0, r3
 800af22:	3728      	adds	r7, #40	; 0x28
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af30:	f3ef 8305 	mrs	r3, IPSR
 800af34:	60bb      	str	r3, [r7, #8]
  return(result);
 800af36:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d003      	beq.n	800af44 <osDelay+0x1c>
    stat = osErrorISR;
 800af3c:	f06f 0305 	mvn.w	r3, #5
 800af40:	60fb      	str	r3, [r7, #12]
 800af42:	e007      	b.n	800af54 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800af44:	2300      	movs	r3, #0
 800af46:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d002      	beq.n	800af54 <osDelay+0x2c>
      vTaskDelay(ticks);
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 ff92 	bl	800be78 <vTaskDelay>
    }
  }

  return (stat);
 800af54:	68fb      	ldr	r3, [r7, #12]
}
 800af56:	4618      	mov	r0, r3
 800af58:	3710      	adds	r7, #16
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
	...

0800af60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800af60:	b480      	push	{r7}
 800af62:	b085      	sub	sp, #20
 800af64:	af00      	add	r7, sp, #0
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	60b9      	str	r1, [r7, #8]
 800af6a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	4a07      	ldr	r2, [pc, #28]	; (800af8c <vApplicationGetIdleTaskMemory+0x2c>)
 800af70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	4a06      	ldr	r2, [pc, #24]	; (800af90 <vApplicationGetIdleTaskMemory+0x30>)
 800af76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2280      	movs	r2, #128	; 0x80
 800af7c:	601a      	str	r2, [r3, #0]
}
 800af7e:	bf00      	nop
 800af80:	3714      	adds	r7, #20
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr
 800af8a:	bf00      	nop
 800af8c:	20000cb4 	.word	0x20000cb4
 800af90:	20000d70 	.word	0x20000d70

0800af94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800af94:	b480      	push	{r7}
 800af96:	b085      	sub	sp, #20
 800af98:	af00      	add	r7, sp, #0
 800af9a:	60f8      	str	r0, [r7, #12]
 800af9c:	60b9      	str	r1, [r7, #8]
 800af9e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	4a07      	ldr	r2, [pc, #28]	; (800afc0 <vApplicationGetTimerTaskMemory+0x2c>)
 800afa4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	4a06      	ldr	r2, [pc, #24]	; (800afc4 <vApplicationGetTimerTaskMemory+0x30>)
 800afaa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800afb2:	601a      	str	r2, [r3, #0]
}
 800afb4:	bf00      	nop
 800afb6:	3714      	adds	r7, #20
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr
 800afc0:	20000f70 	.word	0x20000f70
 800afc4:	2000102c 	.word	0x2000102c

0800afc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800afc8:	b480      	push	{r7}
 800afca:	b083      	sub	sp, #12
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f103 0208 	add.w	r2, r3, #8
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f04f 32ff 	mov.w	r2, #4294967295
 800afe0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f103 0208 	add.w	r2, r3, #8
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f103 0208 	add.w	r2, r3, #8
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800affc:	bf00      	nop
 800affe:	370c      	adds	r7, #12
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr

0800b008 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b008:	b480      	push	{r7}
 800b00a:	b083      	sub	sp, #12
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2200      	movs	r2, #0
 800b014:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b016:	bf00      	nop
 800b018:	370c      	adds	r7, #12
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr

0800b022 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b022:	b480      	push	{r7}
 800b024:	b085      	sub	sp, #20
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
 800b02a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	68fa      	ldr	r2, [r7, #12]
 800b036:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	689a      	ldr	r2, [r3, #8]
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	683a      	ldr	r2, [r7, #0]
 800b046:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	683a      	ldr	r2, [r7, #0]
 800b04c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	1c5a      	adds	r2, r3, #1
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	601a      	str	r2, [r3, #0]
}
 800b05e:	bf00      	nop
 800b060:	3714      	adds	r7, #20
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr

0800b06a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b06a:	b480      	push	{r7}
 800b06c:	b085      	sub	sp, #20
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
 800b072:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b080:	d103      	bne.n	800b08a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	691b      	ldr	r3, [r3, #16]
 800b086:	60fb      	str	r3, [r7, #12]
 800b088:	e00c      	b.n	800b0a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	3308      	adds	r3, #8
 800b08e:	60fb      	str	r3, [r7, #12]
 800b090:	e002      	b.n	800b098 <vListInsert+0x2e>
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	60fb      	str	r3, [r7, #12]
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	68ba      	ldr	r2, [r7, #8]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d2f6      	bcs.n	800b092 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	685a      	ldr	r2, [r3, #4]
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	683a      	ldr	r2, [r7, #0]
 800b0b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	68fa      	ldr	r2, [r7, #12]
 800b0b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	683a      	ldr	r2, [r7, #0]
 800b0be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	1c5a      	adds	r2, r3, #1
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	601a      	str	r2, [r3, #0]
}
 800b0d0:	bf00      	nop
 800b0d2:	3714      	adds	r7, #20
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr

0800b0dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b085      	sub	sp, #20
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	691b      	ldr	r3, [r3, #16]
 800b0e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	6892      	ldr	r2, [r2, #8]
 800b0f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	6852      	ldr	r2, [r2, #4]
 800b0fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	429a      	cmp	r2, r3
 800b106:	d103      	bne.n	800b110 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	689a      	ldr	r2, [r3, #8]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	1e5a      	subs	r2, r3, #1
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
}
 800b124:	4618      	mov	r0, r3
 800b126:	3714      	adds	r7, #20
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr

0800b130 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b084      	sub	sp, #16
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d10a      	bne.n	800b15a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b148:	f383 8811 	msr	BASEPRI, r3
 800b14c:	f3bf 8f6f 	isb	sy
 800b150:	f3bf 8f4f 	dsb	sy
 800b154:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b156:	bf00      	nop
 800b158:	e7fe      	b.n	800b158 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b15a:	f002 f87b 	bl	800d254 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b166:	68f9      	ldr	r1, [r7, #12]
 800b168:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b16a:	fb01 f303 	mul.w	r3, r1, r3
 800b16e:	441a      	add	r2, r3
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2200      	movs	r2, #0
 800b178:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681a      	ldr	r2, [r3, #0]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b18a:	3b01      	subs	r3, #1
 800b18c:	68f9      	ldr	r1, [r7, #12]
 800b18e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b190:	fb01 f303 	mul.w	r3, r1, r3
 800b194:	441a      	add	r2, r3
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	22ff      	movs	r2, #255	; 0xff
 800b19e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	22ff      	movs	r2, #255	; 0xff
 800b1a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d114      	bne.n	800b1da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	691b      	ldr	r3, [r3, #16]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d01a      	beq.n	800b1ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	3310      	adds	r3, #16
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f001 f929 	bl	800c414 <xTaskRemoveFromEventList>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d012      	beq.n	800b1ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b1c8:	4b0c      	ldr	r3, [pc, #48]	; (800b1fc <xQueueGenericReset+0xcc>)
 800b1ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1ce:	601a      	str	r2, [r3, #0]
 800b1d0:	f3bf 8f4f 	dsb	sy
 800b1d4:	f3bf 8f6f 	isb	sy
 800b1d8:	e009      	b.n	800b1ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	3310      	adds	r3, #16
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f7ff fef2 	bl	800afc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	3324      	adds	r3, #36	; 0x24
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f7ff feed 	bl	800afc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b1ee:	f002 f861 	bl	800d2b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b1f2:	2301      	movs	r3, #1
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3710      	adds	r7, #16
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	e000ed04 	.word	0xe000ed04

0800b200 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b200:	b580      	push	{r7, lr}
 800b202:	b08e      	sub	sp, #56	; 0x38
 800b204:	af02      	add	r7, sp, #8
 800b206:	60f8      	str	r0, [r7, #12]
 800b208:	60b9      	str	r1, [r7, #8]
 800b20a:	607a      	str	r2, [r7, #4]
 800b20c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d10a      	bne.n	800b22a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b218:	f383 8811 	msr	BASEPRI, r3
 800b21c:	f3bf 8f6f 	isb	sy
 800b220:	f3bf 8f4f 	dsb	sy
 800b224:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b226:	bf00      	nop
 800b228:	e7fe      	b.n	800b228 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d10a      	bne.n	800b246 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b234:	f383 8811 	msr	BASEPRI, r3
 800b238:	f3bf 8f6f 	isb	sy
 800b23c:	f3bf 8f4f 	dsb	sy
 800b240:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b242:	bf00      	nop
 800b244:	e7fe      	b.n	800b244 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d002      	beq.n	800b252 <xQueueGenericCreateStatic+0x52>
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d001      	beq.n	800b256 <xQueueGenericCreateStatic+0x56>
 800b252:	2301      	movs	r3, #1
 800b254:	e000      	b.n	800b258 <xQueueGenericCreateStatic+0x58>
 800b256:	2300      	movs	r3, #0
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d10a      	bne.n	800b272 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b260:	f383 8811 	msr	BASEPRI, r3
 800b264:	f3bf 8f6f 	isb	sy
 800b268:	f3bf 8f4f 	dsb	sy
 800b26c:	623b      	str	r3, [r7, #32]
}
 800b26e:	bf00      	nop
 800b270:	e7fe      	b.n	800b270 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d102      	bne.n	800b27e <xQueueGenericCreateStatic+0x7e>
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d101      	bne.n	800b282 <xQueueGenericCreateStatic+0x82>
 800b27e:	2301      	movs	r3, #1
 800b280:	e000      	b.n	800b284 <xQueueGenericCreateStatic+0x84>
 800b282:	2300      	movs	r3, #0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d10a      	bne.n	800b29e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b28c:	f383 8811 	msr	BASEPRI, r3
 800b290:	f3bf 8f6f 	isb	sy
 800b294:	f3bf 8f4f 	dsb	sy
 800b298:	61fb      	str	r3, [r7, #28]
}
 800b29a:	bf00      	nop
 800b29c:	e7fe      	b.n	800b29c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b29e:	2350      	movs	r3, #80	; 0x50
 800b2a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	2b50      	cmp	r3, #80	; 0x50
 800b2a6:	d00a      	beq.n	800b2be <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ac:	f383 8811 	msr	BASEPRI, r3
 800b2b0:	f3bf 8f6f 	isb	sy
 800b2b4:	f3bf 8f4f 	dsb	sy
 800b2b8:	61bb      	str	r3, [r7, #24]
}
 800b2ba:	bf00      	nop
 800b2bc:	e7fe      	b.n	800b2bc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b2be:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d00d      	beq.n	800b2e6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b2d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d8:	9300      	str	r3, [sp, #0]
 800b2da:	4613      	mov	r3, r2
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	68b9      	ldr	r1, [r7, #8]
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	f000 f805 	bl	800b2f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3730      	adds	r7, #48	; 0x30
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	607a      	str	r2, [r7, #4]
 800b2fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d103      	bne.n	800b30c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b304:	69bb      	ldr	r3, [r7, #24]
 800b306:	69ba      	ldr	r2, [r7, #24]
 800b308:	601a      	str	r2, [r3, #0]
 800b30a:	e002      	b.n	800b312 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b30c:	69bb      	ldr	r3, [r7, #24]
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b312:	69bb      	ldr	r3, [r7, #24]
 800b314:	68fa      	ldr	r2, [r7, #12]
 800b316:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b318:	69bb      	ldr	r3, [r7, #24]
 800b31a:	68ba      	ldr	r2, [r7, #8]
 800b31c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b31e:	2101      	movs	r1, #1
 800b320:	69b8      	ldr	r0, [r7, #24]
 800b322:	f7ff ff05 	bl	800b130 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b326:	69bb      	ldr	r3, [r7, #24]
 800b328:	78fa      	ldrb	r2, [r7, #3]
 800b32a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b32e:	bf00      	nop
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
	...

0800b338 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b08e      	sub	sp, #56	; 0x38
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	60b9      	str	r1, [r7, #8]
 800b342:	607a      	str	r2, [r7, #4]
 800b344:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b346:	2300      	movs	r3, #0
 800b348:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b350:	2b00      	cmp	r3, #0
 800b352:	d10a      	bne.n	800b36a <xQueueGenericSend+0x32>
	__asm volatile
 800b354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b358:	f383 8811 	msr	BASEPRI, r3
 800b35c:	f3bf 8f6f 	isb	sy
 800b360:	f3bf 8f4f 	dsb	sy
 800b364:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b366:	bf00      	nop
 800b368:	e7fe      	b.n	800b368 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d103      	bne.n	800b378 <xQueueGenericSend+0x40>
 800b370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b374:	2b00      	cmp	r3, #0
 800b376:	d101      	bne.n	800b37c <xQueueGenericSend+0x44>
 800b378:	2301      	movs	r3, #1
 800b37a:	e000      	b.n	800b37e <xQueueGenericSend+0x46>
 800b37c:	2300      	movs	r3, #0
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d10a      	bne.n	800b398 <xQueueGenericSend+0x60>
	__asm volatile
 800b382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b386:	f383 8811 	msr	BASEPRI, r3
 800b38a:	f3bf 8f6f 	isb	sy
 800b38e:	f3bf 8f4f 	dsb	sy
 800b392:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b394:	bf00      	nop
 800b396:	e7fe      	b.n	800b396 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	2b02      	cmp	r3, #2
 800b39c:	d103      	bne.n	800b3a6 <xQueueGenericSend+0x6e>
 800b39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d101      	bne.n	800b3aa <xQueueGenericSend+0x72>
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	e000      	b.n	800b3ac <xQueueGenericSend+0x74>
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d10a      	bne.n	800b3c6 <xQueueGenericSend+0x8e>
	__asm volatile
 800b3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b4:	f383 8811 	msr	BASEPRI, r3
 800b3b8:	f3bf 8f6f 	isb	sy
 800b3bc:	f3bf 8f4f 	dsb	sy
 800b3c0:	623b      	str	r3, [r7, #32]
}
 800b3c2:	bf00      	nop
 800b3c4:	e7fe      	b.n	800b3c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b3c6:	f001 f9e7 	bl	800c798 <xTaskGetSchedulerState>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d102      	bne.n	800b3d6 <xQueueGenericSend+0x9e>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d101      	bne.n	800b3da <xQueueGenericSend+0xa2>
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	e000      	b.n	800b3dc <xQueueGenericSend+0xa4>
 800b3da:	2300      	movs	r3, #0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d10a      	bne.n	800b3f6 <xQueueGenericSend+0xbe>
	__asm volatile
 800b3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e4:	f383 8811 	msr	BASEPRI, r3
 800b3e8:	f3bf 8f6f 	isb	sy
 800b3ec:	f3bf 8f4f 	dsb	sy
 800b3f0:	61fb      	str	r3, [r7, #28]
}
 800b3f2:	bf00      	nop
 800b3f4:	e7fe      	b.n	800b3f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b3f6:	f001 ff2d 	bl	800d254 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b402:	429a      	cmp	r2, r3
 800b404:	d302      	bcc.n	800b40c <xQueueGenericSend+0xd4>
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	2b02      	cmp	r3, #2
 800b40a:	d129      	bne.n	800b460 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b40c:	683a      	ldr	r2, [r7, #0]
 800b40e:	68b9      	ldr	r1, [r7, #8]
 800b410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b412:	f000 fa0b 	bl	800b82c <prvCopyDataToQueue>
 800b416:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d010      	beq.n	800b442 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b422:	3324      	adds	r3, #36	; 0x24
 800b424:	4618      	mov	r0, r3
 800b426:	f000 fff5 	bl	800c414 <xTaskRemoveFromEventList>
 800b42a:	4603      	mov	r3, r0
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d013      	beq.n	800b458 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b430:	4b3f      	ldr	r3, [pc, #252]	; (800b530 <xQueueGenericSend+0x1f8>)
 800b432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b436:	601a      	str	r2, [r3, #0]
 800b438:	f3bf 8f4f 	dsb	sy
 800b43c:	f3bf 8f6f 	isb	sy
 800b440:	e00a      	b.n	800b458 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b444:	2b00      	cmp	r3, #0
 800b446:	d007      	beq.n	800b458 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b448:	4b39      	ldr	r3, [pc, #228]	; (800b530 <xQueueGenericSend+0x1f8>)
 800b44a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b44e:	601a      	str	r2, [r3, #0]
 800b450:	f3bf 8f4f 	dsb	sy
 800b454:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b458:	f001 ff2c 	bl	800d2b4 <vPortExitCritical>
				return pdPASS;
 800b45c:	2301      	movs	r3, #1
 800b45e:	e063      	b.n	800b528 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d103      	bne.n	800b46e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b466:	f001 ff25 	bl	800d2b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b46a:	2300      	movs	r3, #0
 800b46c:	e05c      	b.n	800b528 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b46e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b470:	2b00      	cmp	r3, #0
 800b472:	d106      	bne.n	800b482 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b474:	f107 0314 	add.w	r3, r7, #20
 800b478:	4618      	mov	r0, r3
 800b47a:	f001 f82f 	bl	800c4dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b47e:	2301      	movs	r3, #1
 800b480:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b482:	f001 ff17 	bl	800d2b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b486:	f000 fd9b 	bl	800bfc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b48a:	f001 fee3 	bl	800d254 <vPortEnterCritical>
 800b48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b490:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b494:	b25b      	sxtb	r3, r3
 800b496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b49a:	d103      	bne.n	800b4a4 <xQueueGenericSend+0x16c>
 800b49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b4aa:	b25b      	sxtb	r3, r3
 800b4ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4b0:	d103      	bne.n	800b4ba <xQueueGenericSend+0x182>
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b4ba:	f001 fefb 	bl	800d2b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b4be:	1d3a      	adds	r2, r7, #4
 800b4c0:	f107 0314 	add.w	r3, r7, #20
 800b4c4:	4611      	mov	r1, r2
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f001 f81e 	bl	800c508 <xTaskCheckForTimeOut>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d124      	bne.n	800b51c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b4d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b4d4:	f000 faa2 	bl	800ba1c <prvIsQueueFull>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d018      	beq.n	800b510 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e0:	3310      	adds	r3, #16
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	4611      	mov	r1, r2
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f000 ff44 	bl	800c374 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b4ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b4ee:	f000 fa2d 	bl	800b94c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b4f2:	f000 fd73 	bl	800bfdc <xTaskResumeAll>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	f47f af7c 	bne.w	800b3f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b4fe:	4b0c      	ldr	r3, [pc, #48]	; (800b530 <xQueueGenericSend+0x1f8>)
 800b500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b504:	601a      	str	r2, [r3, #0]
 800b506:	f3bf 8f4f 	dsb	sy
 800b50a:	f3bf 8f6f 	isb	sy
 800b50e:	e772      	b.n	800b3f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b512:	f000 fa1b 	bl	800b94c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b516:	f000 fd61 	bl	800bfdc <xTaskResumeAll>
 800b51a:	e76c      	b.n	800b3f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b51c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b51e:	f000 fa15 	bl	800b94c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b522:	f000 fd5b 	bl	800bfdc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b526:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3738      	adds	r7, #56	; 0x38
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	e000ed04 	.word	0xe000ed04

0800b534 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b090      	sub	sp, #64	; 0x40
 800b538:	af00      	add	r7, sp, #0
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	607a      	str	r2, [r7, #4]
 800b540:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d10a      	bne.n	800b562 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b550:	f383 8811 	msr	BASEPRI, r3
 800b554:	f3bf 8f6f 	isb	sy
 800b558:	f3bf 8f4f 	dsb	sy
 800b55c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b55e:	bf00      	nop
 800b560:	e7fe      	b.n	800b560 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d103      	bne.n	800b570 <xQueueGenericSendFromISR+0x3c>
 800b568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b56a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d101      	bne.n	800b574 <xQueueGenericSendFromISR+0x40>
 800b570:	2301      	movs	r3, #1
 800b572:	e000      	b.n	800b576 <xQueueGenericSendFromISR+0x42>
 800b574:	2300      	movs	r3, #0
 800b576:	2b00      	cmp	r3, #0
 800b578:	d10a      	bne.n	800b590 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57e:	f383 8811 	msr	BASEPRI, r3
 800b582:	f3bf 8f6f 	isb	sy
 800b586:	f3bf 8f4f 	dsb	sy
 800b58a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b58c:	bf00      	nop
 800b58e:	e7fe      	b.n	800b58e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	2b02      	cmp	r3, #2
 800b594:	d103      	bne.n	800b59e <xQueueGenericSendFromISR+0x6a>
 800b596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d101      	bne.n	800b5a2 <xQueueGenericSendFromISR+0x6e>
 800b59e:	2301      	movs	r3, #1
 800b5a0:	e000      	b.n	800b5a4 <xQueueGenericSendFromISR+0x70>
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d10a      	bne.n	800b5be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ac:	f383 8811 	msr	BASEPRI, r3
 800b5b0:	f3bf 8f6f 	isb	sy
 800b5b4:	f3bf 8f4f 	dsb	sy
 800b5b8:	623b      	str	r3, [r7, #32]
}
 800b5ba:	bf00      	nop
 800b5bc:	e7fe      	b.n	800b5bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b5be:	f001 ff2b 	bl	800d418 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b5c2:	f3ef 8211 	mrs	r2, BASEPRI
 800b5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ca:	f383 8811 	msr	BASEPRI, r3
 800b5ce:	f3bf 8f6f 	isb	sy
 800b5d2:	f3bf 8f4f 	dsb	sy
 800b5d6:	61fa      	str	r2, [r7, #28]
 800b5d8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b5da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b5dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d302      	bcc.n	800b5f0 <xQueueGenericSendFromISR+0xbc>
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	2b02      	cmp	r3, #2
 800b5ee:	d12f      	bne.n	800b650 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b600:	683a      	ldr	r2, [r7, #0]
 800b602:	68b9      	ldr	r1, [r7, #8]
 800b604:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b606:	f000 f911 	bl	800b82c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b60a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b60e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b612:	d112      	bne.n	800b63a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d016      	beq.n	800b64a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b61e:	3324      	adds	r3, #36	; 0x24
 800b620:	4618      	mov	r0, r3
 800b622:	f000 fef7 	bl	800c414 <xTaskRemoveFromEventList>
 800b626:	4603      	mov	r3, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d00e      	beq.n	800b64a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d00b      	beq.n	800b64a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2201      	movs	r2, #1
 800b636:	601a      	str	r2, [r3, #0]
 800b638:	e007      	b.n	800b64a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b63a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b63e:	3301      	adds	r3, #1
 800b640:	b2db      	uxtb	r3, r3
 800b642:	b25a      	sxtb	r2, r3
 800b644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b64a:	2301      	movs	r3, #1
 800b64c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b64e:	e001      	b.n	800b654 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b650:	2300      	movs	r3, #0
 800b652:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b656:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b65e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b662:	4618      	mov	r0, r3
 800b664:	3740      	adds	r7, #64	; 0x40
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
	...

0800b66c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b08c      	sub	sp, #48	; 0x30
 800b670:	af00      	add	r7, sp, #0
 800b672:	60f8      	str	r0, [r7, #12]
 800b674:	60b9      	str	r1, [r7, #8]
 800b676:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b678:	2300      	movs	r3, #0
 800b67a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10a      	bne.n	800b69c <xQueueReceive+0x30>
	__asm volatile
 800b686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68a:	f383 8811 	msr	BASEPRI, r3
 800b68e:	f3bf 8f6f 	isb	sy
 800b692:	f3bf 8f4f 	dsb	sy
 800b696:	623b      	str	r3, [r7, #32]
}
 800b698:	bf00      	nop
 800b69a:	e7fe      	b.n	800b69a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d103      	bne.n	800b6aa <xQueueReceive+0x3e>
 800b6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d101      	bne.n	800b6ae <xQueueReceive+0x42>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e000      	b.n	800b6b0 <xQueueReceive+0x44>
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d10a      	bne.n	800b6ca <xQueueReceive+0x5e>
	__asm volatile
 800b6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b8:	f383 8811 	msr	BASEPRI, r3
 800b6bc:	f3bf 8f6f 	isb	sy
 800b6c0:	f3bf 8f4f 	dsb	sy
 800b6c4:	61fb      	str	r3, [r7, #28]
}
 800b6c6:	bf00      	nop
 800b6c8:	e7fe      	b.n	800b6c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b6ca:	f001 f865 	bl	800c798 <xTaskGetSchedulerState>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d102      	bne.n	800b6da <xQueueReceive+0x6e>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d101      	bne.n	800b6de <xQueueReceive+0x72>
 800b6da:	2301      	movs	r3, #1
 800b6dc:	e000      	b.n	800b6e0 <xQueueReceive+0x74>
 800b6de:	2300      	movs	r3, #0
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d10a      	bne.n	800b6fa <xQueueReceive+0x8e>
	__asm volatile
 800b6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e8:	f383 8811 	msr	BASEPRI, r3
 800b6ec:	f3bf 8f6f 	isb	sy
 800b6f0:	f3bf 8f4f 	dsb	sy
 800b6f4:	61bb      	str	r3, [r7, #24]
}
 800b6f6:	bf00      	nop
 800b6f8:	e7fe      	b.n	800b6f8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b6fa:	f001 fdab 	bl	800d254 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b702:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b706:	2b00      	cmp	r3, #0
 800b708:	d01f      	beq.n	800b74a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b70a:	68b9      	ldr	r1, [r7, #8]
 800b70c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b70e:	f000 f8f7 	bl	800b900 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b714:	1e5a      	subs	r2, r3, #1
 800b716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b718:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b71c:	691b      	ldr	r3, [r3, #16]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d00f      	beq.n	800b742 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b724:	3310      	adds	r3, #16
 800b726:	4618      	mov	r0, r3
 800b728:	f000 fe74 	bl	800c414 <xTaskRemoveFromEventList>
 800b72c:	4603      	mov	r3, r0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d007      	beq.n	800b742 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b732:	4b3d      	ldr	r3, [pc, #244]	; (800b828 <xQueueReceive+0x1bc>)
 800b734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b738:	601a      	str	r2, [r3, #0]
 800b73a:	f3bf 8f4f 	dsb	sy
 800b73e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b742:	f001 fdb7 	bl	800d2b4 <vPortExitCritical>
				return pdPASS;
 800b746:	2301      	movs	r3, #1
 800b748:	e069      	b.n	800b81e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d103      	bne.n	800b758 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b750:	f001 fdb0 	bl	800d2b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b754:	2300      	movs	r3, #0
 800b756:	e062      	b.n	800b81e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d106      	bne.n	800b76c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b75e:	f107 0310 	add.w	r3, r7, #16
 800b762:	4618      	mov	r0, r3
 800b764:	f000 feba 	bl	800c4dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b768:	2301      	movs	r3, #1
 800b76a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b76c:	f001 fda2 	bl	800d2b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b770:	f000 fc26 	bl	800bfc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b774:	f001 fd6e 	bl	800d254 <vPortEnterCritical>
 800b778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b77a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b77e:	b25b      	sxtb	r3, r3
 800b780:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b784:	d103      	bne.n	800b78e <xQueueReceive+0x122>
 800b786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b788:	2200      	movs	r2, #0
 800b78a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b790:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b794:	b25b      	sxtb	r3, r3
 800b796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b79a:	d103      	bne.n	800b7a4 <xQueueReceive+0x138>
 800b79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79e:	2200      	movs	r2, #0
 800b7a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7a4:	f001 fd86 	bl	800d2b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b7a8:	1d3a      	adds	r2, r7, #4
 800b7aa:	f107 0310 	add.w	r3, r7, #16
 800b7ae:	4611      	mov	r1, r2
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f000 fea9 	bl	800c508 <xTaskCheckForTimeOut>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d123      	bne.n	800b804 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b7bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7be:	f000 f917 	bl	800b9f0 <prvIsQueueEmpty>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d017      	beq.n	800b7f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ca:	3324      	adds	r3, #36	; 0x24
 800b7cc:	687a      	ldr	r2, [r7, #4]
 800b7ce:	4611      	mov	r1, r2
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f000 fdcf 	bl	800c374 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b7d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7d8:	f000 f8b8 	bl	800b94c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b7dc:	f000 fbfe 	bl	800bfdc <xTaskResumeAll>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d189      	bne.n	800b6fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b7e6:	4b10      	ldr	r3, [pc, #64]	; (800b828 <xQueueReceive+0x1bc>)
 800b7e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7ec:	601a      	str	r2, [r3, #0]
 800b7ee:	f3bf 8f4f 	dsb	sy
 800b7f2:	f3bf 8f6f 	isb	sy
 800b7f6:	e780      	b.n	800b6fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b7f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7fa:	f000 f8a7 	bl	800b94c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b7fe:	f000 fbed 	bl	800bfdc <xTaskResumeAll>
 800b802:	e77a      	b.n	800b6fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b806:	f000 f8a1 	bl	800b94c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b80a:	f000 fbe7 	bl	800bfdc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b80e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b810:	f000 f8ee 	bl	800b9f0 <prvIsQueueEmpty>
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	f43f af6f 	beq.w	800b6fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b81c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3730      	adds	r7, #48	; 0x30
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	e000ed04 	.word	0xe000ed04

0800b82c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b086      	sub	sp, #24
 800b830:	af00      	add	r7, sp, #0
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	60b9      	str	r1, [r7, #8]
 800b836:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b838:	2300      	movs	r3, #0
 800b83a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b840:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b846:	2b00      	cmp	r3, #0
 800b848:	d10d      	bne.n	800b866 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d14d      	bne.n	800b8ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	689b      	ldr	r3, [r3, #8]
 800b856:	4618      	mov	r0, r3
 800b858:	f000 ffbc 	bl	800c7d4 <xTaskPriorityDisinherit>
 800b85c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2200      	movs	r2, #0
 800b862:	609a      	str	r2, [r3, #8]
 800b864:	e043      	b.n	800b8ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d119      	bne.n	800b8a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	6858      	ldr	r0, [r3, #4]
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b874:	461a      	mov	r2, r3
 800b876:	68b9      	ldr	r1, [r7, #8]
 800b878:	f002 f94b 	bl	800db12 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	685a      	ldr	r2, [r3, #4]
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b884:	441a      	add	r2, r3
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	685a      	ldr	r2, [r3, #4]
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	689b      	ldr	r3, [r3, #8]
 800b892:	429a      	cmp	r2, r3
 800b894:	d32b      	bcc.n	800b8ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681a      	ldr	r2, [r3, #0]
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	605a      	str	r2, [r3, #4]
 800b89e:	e026      	b.n	800b8ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	68d8      	ldr	r0, [r3, #12]
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	68b9      	ldr	r1, [r7, #8]
 800b8ac:	f002 f931 	bl	800db12 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	68da      	ldr	r2, [r3, #12]
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8b8:	425b      	negs	r3, r3
 800b8ba:	441a      	add	r2, r3
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	68da      	ldr	r2, [r3, #12]
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d207      	bcs.n	800b8dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	689a      	ldr	r2, [r3, #8]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8d4:	425b      	negs	r3, r3
 800b8d6:	441a      	add	r2, r3
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2b02      	cmp	r3, #2
 800b8e0:	d105      	bne.n	800b8ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d002      	beq.n	800b8ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	3b01      	subs	r3, #1
 800b8ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	1c5a      	adds	r2, r3, #1
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b8f6:	697b      	ldr	r3, [r7, #20]
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3718      	adds	r7, #24
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d018      	beq.n	800b944 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	68da      	ldr	r2, [r3, #12]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b91a:	441a      	add	r2, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	68da      	ldr	r2, [r3, #12]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	689b      	ldr	r3, [r3, #8]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d303      	bcc.n	800b934 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681a      	ldr	r2, [r3, #0]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	68d9      	ldr	r1, [r3, #12]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b93c:	461a      	mov	r2, r3
 800b93e:	6838      	ldr	r0, [r7, #0]
 800b940:	f002 f8e7 	bl	800db12 <memcpy>
	}
}
 800b944:	bf00      	nop
 800b946:	3708      	adds	r7, #8
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b954:	f001 fc7e 	bl	800d254 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b95e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b960:	e011      	b.n	800b986 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b966:	2b00      	cmp	r3, #0
 800b968:	d012      	beq.n	800b990 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	3324      	adds	r3, #36	; 0x24
 800b96e:	4618      	mov	r0, r3
 800b970:	f000 fd50 	bl	800c414 <xTaskRemoveFromEventList>
 800b974:	4603      	mov	r3, r0
 800b976:	2b00      	cmp	r3, #0
 800b978:	d001      	beq.n	800b97e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b97a:	f000 fe27 	bl	800c5cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b97e:	7bfb      	ldrb	r3, [r7, #15]
 800b980:	3b01      	subs	r3, #1
 800b982:	b2db      	uxtb	r3, r3
 800b984:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	dce9      	bgt.n	800b962 <prvUnlockQueue+0x16>
 800b98e:	e000      	b.n	800b992 <prvUnlockQueue+0x46>
					break;
 800b990:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	22ff      	movs	r2, #255	; 0xff
 800b996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b99a:	f001 fc8b 	bl	800d2b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b99e:	f001 fc59 	bl	800d254 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b9aa:	e011      	b.n	800b9d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	691b      	ldr	r3, [r3, #16]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d012      	beq.n	800b9da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	3310      	adds	r3, #16
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f000 fd2b 	bl	800c414 <xTaskRemoveFromEventList>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d001      	beq.n	800b9c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b9c4:	f000 fe02 	bl	800c5cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b9c8:	7bbb      	ldrb	r3, [r7, #14]
 800b9ca:	3b01      	subs	r3, #1
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b9d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	dce9      	bgt.n	800b9ac <prvUnlockQueue+0x60>
 800b9d8:	e000      	b.n	800b9dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b9da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	22ff      	movs	r2, #255	; 0xff
 800b9e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b9e4:	f001 fc66 	bl	800d2b4 <vPortExitCritical>
}
 800b9e8:	bf00      	nop
 800b9ea:	3710      	adds	r7, #16
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b9f8:	f001 fc2c 	bl	800d254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d102      	bne.n	800ba0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ba04:	2301      	movs	r3, #1
 800ba06:	60fb      	str	r3, [r7, #12]
 800ba08:	e001      	b.n	800ba0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ba0e:	f001 fc51 	bl	800d2b4 <vPortExitCritical>

	return xReturn;
 800ba12:	68fb      	ldr	r3, [r7, #12]
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3710      	adds	r7, #16
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba24:	f001 fc16 	bl	800d254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d102      	bne.n	800ba3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ba34:	2301      	movs	r3, #1
 800ba36:	60fb      	str	r3, [r7, #12]
 800ba38:	e001      	b.n	800ba3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ba3e:	f001 fc39 	bl	800d2b4 <vPortExitCritical>

	return xReturn;
 800ba42:	68fb      	ldr	r3, [r7, #12]
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3710      	adds	r7, #16
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b085      	sub	sp, #20
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba56:	2300      	movs	r3, #0
 800ba58:	60fb      	str	r3, [r7, #12]
 800ba5a:	e014      	b.n	800ba86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ba5c:	4a0f      	ldr	r2, [pc, #60]	; (800ba9c <vQueueAddToRegistry+0x50>)
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d10b      	bne.n	800ba80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ba68:	490c      	ldr	r1, [pc, #48]	; (800ba9c <vQueueAddToRegistry+0x50>)
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	683a      	ldr	r2, [r7, #0]
 800ba6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ba72:	4a0a      	ldr	r2, [pc, #40]	; (800ba9c <vQueueAddToRegistry+0x50>)
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	00db      	lsls	r3, r3, #3
 800ba78:	4413      	add	r3, r2
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ba7e:	e006      	b.n	800ba8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	3301      	adds	r3, #1
 800ba84:	60fb      	str	r3, [r7, #12]
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2b07      	cmp	r3, #7
 800ba8a:	d9e7      	bls.n	800ba5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ba8c:	bf00      	nop
 800ba8e:	bf00      	nop
 800ba90:	3714      	adds	r7, #20
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr
 800ba9a:	bf00      	nop
 800ba9c:	2000142c 	.word	0x2000142c

0800baa0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b086      	sub	sp, #24
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	60f8      	str	r0, [r7, #12]
 800baa8:	60b9      	str	r1, [r7, #8]
 800baaa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bab0:	f001 fbd0 	bl	800d254 <vPortEnterCritical>
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800baba:	b25b      	sxtb	r3, r3
 800babc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bac0:	d103      	bne.n	800baca <vQueueWaitForMessageRestricted+0x2a>
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	2200      	movs	r2, #0
 800bac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bad0:	b25b      	sxtb	r3, r3
 800bad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bad6:	d103      	bne.n	800bae0 <vQueueWaitForMessageRestricted+0x40>
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	2200      	movs	r2, #0
 800badc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bae0:	f001 fbe8 	bl	800d2b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d106      	bne.n	800bafa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	3324      	adds	r3, #36	; 0x24
 800baf0:	687a      	ldr	r2, [r7, #4]
 800baf2:	68b9      	ldr	r1, [r7, #8]
 800baf4:	4618      	mov	r0, r3
 800baf6:	f000 fc61 	bl	800c3bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bafa:	6978      	ldr	r0, [r7, #20]
 800bafc:	f7ff ff26 	bl	800b94c <prvUnlockQueue>
	}
 800bb00:	bf00      	nop
 800bb02:	3718      	adds	r7, #24
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b08e      	sub	sp, #56	; 0x38
 800bb0c:	af04      	add	r7, sp, #16
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	60b9      	str	r1, [r7, #8]
 800bb12:	607a      	str	r2, [r7, #4]
 800bb14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bb16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d10a      	bne.n	800bb32 <xTaskCreateStatic+0x2a>
	__asm volatile
 800bb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb20:	f383 8811 	msr	BASEPRI, r3
 800bb24:	f3bf 8f6f 	isb	sy
 800bb28:	f3bf 8f4f 	dsb	sy
 800bb2c:	623b      	str	r3, [r7, #32]
}
 800bb2e:	bf00      	nop
 800bb30:	e7fe      	b.n	800bb30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d10a      	bne.n	800bb4e <xTaskCreateStatic+0x46>
	__asm volatile
 800bb38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb3c:	f383 8811 	msr	BASEPRI, r3
 800bb40:	f3bf 8f6f 	isb	sy
 800bb44:	f3bf 8f4f 	dsb	sy
 800bb48:	61fb      	str	r3, [r7, #28]
}
 800bb4a:	bf00      	nop
 800bb4c:	e7fe      	b.n	800bb4c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bb4e:	23bc      	movs	r3, #188	; 0xbc
 800bb50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	2bbc      	cmp	r3, #188	; 0xbc
 800bb56:	d00a      	beq.n	800bb6e <xTaskCreateStatic+0x66>
	__asm volatile
 800bb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5c:	f383 8811 	msr	BASEPRI, r3
 800bb60:	f3bf 8f6f 	isb	sy
 800bb64:	f3bf 8f4f 	dsb	sy
 800bb68:	61bb      	str	r3, [r7, #24]
}
 800bb6a:	bf00      	nop
 800bb6c:	e7fe      	b.n	800bb6c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bb6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d01e      	beq.n	800bbb4 <xTaskCreateStatic+0xac>
 800bb76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d01b      	beq.n	800bbb4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb88:	2202      	movs	r2, #2
 800bb8a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bb8e:	2300      	movs	r3, #0
 800bb90:	9303      	str	r3, [sp, #12]
 800bb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb94:	9302      	str	r3, [sp, #8]
 800bb96:	f107 0314 	add.w	r3, r7, #20
 800bb9a:	9301      	str	r3, [sp, #4]
 800bb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb9e:	9300      	str	r3, [sp, #0]
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	68b9      	ldr	r1, [r7, #8]
 800bba6:	68f8      	ldr	r0, [r7, #12]
 800bba8:	f000 f850 	bl	800bc4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bbac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbae:	f000 f8f3 	bl	800bd98 <prvAddNewTaskToReadyList>
 800bbb2:	e001      	b.n	800bbb8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bbb8:	697b      	ldr	r3, [r7, #20]
	}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3728      	adds	r7, #40	; 0x28
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}

0800bbc2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bbc2:	b580      	push	{r7, lr}
 800bbc4:	b08c      	sub	sp, #48	; 0x30
 800bbc6:	af04      	add	r7, sp, #16
 800bbc8:	60f8      	str	r0, [r7, #12]
 800bbca:	60b9      	str	r1, [r7, #8]
 800bbcc:	603b      	str	r3, [r7, #0]
 800bbce:	4613      	mov	r3, r2
 800bbd0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bbd2:	88fb      	ldrh	r3, [r7, #6]
 800bbd4:	009b      	lsls	r3, r3, #2
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f001 fc5e 	bl	800d498 <pvPortMalloc>
 800bbdc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d00e      	beq.n	800bc02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bbe4:	20bc      	movs	r0, #188	; 0xbc
 800bbe6:	f001 fc57 	bl	800d498 <pvPortMalloc>
 800bbea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bbec:	69fb      	ldr	r3, [r7, #28]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d003      	beq.n	800bbfa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bbf2:	69fb      	ldr	r3, [r7, #28]
 800bbf4:	697a      	ldr	r2, [r7, #20]
 800bbf6:	631a      	str	r2, [r3, #48]	; 0x30
 800bbf8:	e005      	b.n	800bc06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bbfa:	6978      	ldr	r0, [r7, #20]
 800bbfc:	f001 fd18 	bl	800d630 <vPortFree>
 800bc00:	e001      	b.n	800bc06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bc02:	2300      	movs	r3, #0
 800bc04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bc06:	69fb      	ldr	r3, [r7, #28]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d017      	beq.n	800bc3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bc14:	88fa      	ldrh	r2, [r7, #6]
 800bc16:	2300      	movs	r3, #0
 800bc18:	9303      	str	r3, [sp, #12]
 800bc1a:	69fb      	ldr	r3, [r7, #28]
 800bc1c:	9302      	str	r3, [sp, #8]
 800bc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc20:	9301      	str	r3, [sp, #4]
 800bc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc24:	9300      	str	r3, [sp, #0]
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	68b9      	ldr	r1, [r7, #8]
 800bc2a:	68f8      	ldr	r0, [r7, #12]
 800bc2c:	f000 f80e 	bl	800bc4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc30:	69f8      	ldr	r0, [r7, #28]
 800bc32:	f000 f8b1 	bl	800bd98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bc36:	2301      	movs	r3, #1
 800bc38:	61bb      	str	r3, [r7, #24]
 800bc3a:	e002      	b.n	800bc42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bc3c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bc42:	69bb      	ldr	r3, [r7, #24]
	}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3720      	adds	r7, #32
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}

0800bc4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b088      	sub	sp, #32
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	60b9      	str	r1, [r7, #8]
 800bc56:	607a      	str	r2, [r7, #4]
 800bc58:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	009b      	lsls	r3, r3, #2
 800bc62:	461a      	mov	r2, r3
 800bc64:	21a5      	movs	r1, #165	; 0xa5
 800bc66:	f001 ff62 	bl	800db2e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bc74:	3b01      	subs	r3, #1
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	4413      	add	r3, r2
 800bc7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bc7c:	69bb      	ldr	r3, [r7, #24]
 800bc7e:	f023 0307 	bic.w	r3, r3, #7
 800bc82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bc84:	69bb      	ldr	r3, [r7, #24]
 800bc86:	f003 0307 	and.w	r3, r3, #7
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d00a      	beq.n	800bca4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800bc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc92:	f383 8811 	msr	BASEPRI, r3
 800bc96:	f3bf 8f6f 	isb	sy
 800bc9a:	f3bf 8f4f 	dsb	sy
 800bc9e:	617b      	str	r3, [r7, #20]
}
 800bca0:	bf00      	nop
 800bca2:	e7fe      	b.n	800bca2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d01f      	beq.n	800bcea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bcaa:	2300      	movs	r3, #0
 800bcac:	61fb      	str	r3, [r7, #28]
 800bcae:	e012      	b.n	800bcd6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bcb0:	68ba      	ldr	r2, [r7, #8]
 800bcb2:	69fb      	ldr	r3, [r7, #28]
 800bcb4:	4413      	add	r3, r2
 800bcb6:	7819      	ldrb	r1, [r3, #0]
 800bcb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcba:	69fb      	ldr	r3, [r7, #28]
 800bcbc:	4413      	add	r3, r2
 800bcbe:	3334      	adds	r3, #52	; 0x34
 800bcc0:	460a      	mov	r2, r1
 800bcc2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bcc4:	68ba      	ldr	r2, [r7, #8]
 800bcc6:	69fb      	ldr	r3, [r7, #28]
 800bcc8:	4413      	add	r3, r2
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d006      	beq.n	800bcde <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bcd0:	69fb      	ldr	r3, [r7, #28]
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	61fb      	str	r3, [r7, #28]
 800bcd6:	69fb      	ldr	r3, [r7, #28]
 800bcd8:	2b0f      	cmp	r3, #15
 800bcda:	d9e9      	bls.n	800bcb0 <prvInitialiseNewTask+0x64>
 800bcdc:	e000      	b.n	800bce0 <prvInitialiseNewTask+0x94>
			{
				break;
 800bcde:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce2:	2200      	movs	r2, #0
 800bce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bce8:	e003      	b.n	800bcf2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bcea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcec:	2200      	movs	r2, #0
 800bcee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bcf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf4:	2b37      	cmp	r3, #55	; 0x37
 800bcf6:	d901      	bls.n	800bcfc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bcf8:	2337      	movs	r3, #55	; 0x37
 800bcfa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd00:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bd02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd06:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd10:	3304      	adds	r3, #4
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7ff f978 	bl	800b008 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1a:	3318      	adds	r3, #24
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f7ff f973 	bl	800b008 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd36:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bd40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd42:	2200      	movs	r2, #0
 800bd44:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4a:	3354      	adds	r3, #84	; 0x54
 800bd4c:	2260      	movs	r2, #96	; 0x60
 800bd4e:	2100      	movs	r1, #0
 800bd50:	4618      	mov	r0, r3
 800bd52:	f001 feec 	bl	800db2e <memset>
 800bd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd58:	4a0c      	ldr	r2, [pc, #48]	; (800bd8c <prvInitialiseNewTask+0x140>)
 800bd5a:	659a      	str	r2, [r3, #88]	; 0x58
 800bd5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5e:	4a0c      	ldr	r2, [pc, #48]	; (800bd90 <prvInitialiseNewTask+0x144>)
 800bd60:	65da      	str	r2, [r3, #92]	; 0x5c
 800bd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd64:	4a0b      	ldr	r2, [pc, #44]	; (800bd94 <prvInitialiseNewTask+0x148>)
 800bd66:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bd68:	683a      	ldr	r2, [r7, #0]
 800bd6a:	68f9      	ldr	r1, [r7, #12]
 800bd6c:	69b8      	ldr	r0, [r7, #24]
 800bd6e:	f001 f941 	bl	800cff4 <pxPortInitialiseStack>
 800bd72:	4602      	mov	r2, r0
 800bd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd76:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d002      	beq.n	800bd84 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd82:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd84:	bf00      	nop
 800bd86:	3720      	adds	r7, #32
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}
 800bd8c:	0801094c 	.word	0x0801094c
 800bd90:	0801096c 	.word	0x0801096c
 800bd94:	0801092c 	.word	0x0801092c

0800bd98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bda0:	f001 fa58 	bl	800d254 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bda4:	4b2d      	ldr	r3, [pc, #180]	; (800be5c <prvAddNewTaskToReadyList+0xc4>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	3301      	adds	r3, #1
 800bdaa:	4a2c      	ldr	r2, [pc, #176]	; (800be5c <prvAddNewTaskToReadyList+0xc4>)
 800bdac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bdae:	4b2c      	ldr	r3, [pc, #176]	; (800be60 <prvAddNewTaskToReadyList+0xc8>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d109      	bne.n	800bdca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bdb6:	4a2a      	ldr	r2, [pc, #168]	; (800be60 <prvAddNewTaskToReadyList+0xc8>)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bdbc:	4b27      	ldr	r3, [pc, #156]	; (800be5c <prvAddNewTaskToReadyList+0xc4>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	2b01      	cmp	r3, #1
 800bdc2:	d110      	bne.n	800bde6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bdc4:	f000 fc26 	bl	800c614 <prvInitialiseTaskLists>
 800bdc8:	e00d      	b.n	800bde6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bdca:	4b26      	ldr	r3, [pc, #152]	; (800be64 <prvAddNewTaskToReadyList+0xcc>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d109      	bne.n	800bde6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bdd2:	4b23      	ldr	r3, [pc, #140]	; (800be60 <prvAddNewTaskToReadyList+0xc8>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d802      	bhi.n	800bde6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bde0:	4a1f      	ldr	r2, [pc, #124]	; (800be60 <prvAddNewTaskToReadyList+0xc8>)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bde6:	4b20      	ldr	r3, [pc, #128]	; (800be68 <prvAddNewTaskToReadyList+0xd0>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	3301      	adds	r3, #1
 800bdec:	4a1e      	ldr	r2, [pc, #120]	; (800be68 <prvAddNewTaskToReadyList+0xd0>)
 800bdee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bdf0:	4b1d      	ldr	r3, [pc, #116]	; (800be68 <prvAddNewTaskToReadyList+0xd0>)
 800bdf2:	681a      	ldr	r2, [r3, #0]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdfc:	4b1b      	ldr	r3, [pc, #108]	; (800be6c <prvAddNewTaskToReadyList+0xd4>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	429a      	cmp	r2, r3
 800be02:	d903      	bls.n	800be0c <prvAddNewTaskToReadyList+0x74>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be08:	4a18      	ldr	r2, [pc, #96]	; (800be6c <prvAddNewTaskToReadyList+0xd4>)
 800be0a:	6013      	str	r3, [r2, #0]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be10:	4613      	mov	r3, r2
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	4413      	add	r3, r2
 800be16:	009b      	lsls	r3, r3, #2
 800be18:	4a15      	ldr	r2, [pc, #84]	; (800be70 <prvAddNewTaskToReadyList+0xd8>)
 800be1a:	441a      	add	r2, r3
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	3304      	adds	r3, #4
 800be20:	4619      	mov	r1, r3
 800be22:	4610      	mov	r0, r2
 800be24:	f7ff f8fd 	bl	800b022 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800be28:	f001 fa44 	bl	800d2b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800be2c:	4b0d      	ldr	r3, [pc, #52]	; (800be64 <prvAddNewTaskToReadyList+0xcc>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d00e      	beq.n	800be52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800be34:	4b0a      	ldr	r3, [pc, #40]	; (800be60 <prvAddNewTaskToReadyList+0xc8>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be3e:	429a      	cmp	r2, r3
 800be40:	d207      	bcs.n	800be52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800be42:	4b0c      	ldr	r3, [pc, #48]	; (800be74 <prvAddNewTaskToReadyList+0xdc>)
 800be44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be48:	601a      	str	r2, [r3, #0]
 800be4a:	f3bf 8f4f 	dsb	sy
 800be4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be52:	bf00      	nop
 800be54:	3708      	adds	r7, #8
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
 800be5a:	bf00      	nop
 800be5c:	20001940 	.word	0x20001940
 800be60:	2000146c 	.word	0x2000146c
 800be64:	2000194c 	.word	0x2000194c
 800be68:	2000195c 	.word	0x2000195c
 800be6c:	20001948 	.word	0x20001948
 800be70:	20001470 	.word	0x20001470
 800be74:	e000ed04 	.word	0xe000ed04

0800be78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b084      	sub	sp, #16
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800be80:	2300      	movs	r3, #0
 800be82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d017      	beq.n	800beba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800be8a:	4b13      	ldr	r3, [pc, #76]	; (800bed8 <vTaskDelay+0x60>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d00a      	beq.n	800bea8 <vTaskDelay+0x30>
	__asm volatile
 800be92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be96:	f383 8811 	msr	BASEPRI, r3
 800be9a:	f3bf 8f6f 	isb	sy
 800be9e:	f3bf 8f4f 	dsb	sy
 800bea2:	60bb      	str	r3, [r7, #8]
}
 800bea4:	bf00      	nop
 800bea6:	e7fe      	b.n	800bea6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bea8:	f000 f88a 	bl	800bfc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800beac:	2100      	movs	r1, #0
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f000 fcfe 	bl	800c8b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800beb4:	f000 f892 	bl	800bfdc <xTaskResumeAll>
 800beb8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d107      	bne.n	800bed0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bec0:	4b06      	ldr	r3, [pc, #24]	; (800bedc <vTaskDelay+0x64>)
 800bec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bec6:	601a      	str	r2, [r3, #0]
 800bec8:	f3bf 8f4f 	dsb	sy
 800becc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bed0:	bf00      	nop
 800bed2:	3710      	adds	r7, #16
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	20001968 	.word	0x20001968
 800bedc:	e000ed04 	.word	0xe000ed04

0800bee0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b08a      	sub	sp, #40	; 0x28
 800bee4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bee6:	2300      	movs	r3, #0
 800bee8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800beea:	2300      	movs	r3, #0
 800beec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800beee:	463a      	mov	r2, r7
 800bef0:	1d39      	adds	r1, r7, #4
 800bef2:	f107 0308 	add.w	r3, r7, #8
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7ff f832 	bl	800af60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800befc:	6839      	ldr	r1, [r7, #0]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	68ba      	ldr	r2, [r7, #8]
 800bf02:	9202      	str	r2, [sp, #8]
 800bf04:	9301      	str	r3, [sp, #4]
 800bf06:	2300      	movs	r3, #0
 800bf08:	9300      	str	r3, [sp, #0]
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	460a      	mov	r2, r1
 800bf0e:	4924      	ldr	r1, [pc, #144]	; (800bfa0 <vTaskStartScheduler+0xc0>)
 800bf10:	4824      	ldr	r0, [pc, #144]	; (800bfa4 <vTaskStartScheduler+0xc4>)
 800bf12:	f7ff fdf9 	bl	800bb08 <xTaskCreateStatic>
 800bf16:	4603      	mov	r3, r0
 800bf18:	4a23      	ldr	r2, [pc, #140]	; (800bfa8 <vTaskStartScheduler+0xc8>)
 800bf1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bf1c:	4b22      	ldr	r3, [pc, #136]	; (800bfa8 <vTaskStartScheduler+0xc8>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d002      	beq.n	800bf2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bf24:	2301      	movs	r3, #1
 800bf26:	617b      	str	r3, [r7, #20]
 800bf28:	e001      	b.n	800bf2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d102      	bne.n	800bf3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bf34:	f000 fd10 	bl	800c958 <xTimerCreateTimerTask>
 800bf38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d11b      	bne.n	800bf78 <vTaskStartScheduler+0x98>
	__asm volatile
 800bf40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf44:	f383 8811 	msr	BASEPRI, r3
 800bf48:	f3bf 8f6f 	isb	sy
 800bf4c:	f3bf 8f4f 	dsb	sy
 800bf50:	613b      	str	r3, [r7, #16]
}
 800bf52:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bf54:	4b15      	ldr	r3, [pc, #84]	; (800bfac <vTaskStartScheduler+0xcc>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	3354      	adds	r3, #84	; 0x54
 800bf5a:	4a15      	ldr	r2, [pc, #84]	; (800bfb0 <vTaskStartScheduler+0xd0>)
 800bf5c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bf5e:	4b15      	ldr	r3, [pc, #84]	; (800bfb4 <vTaskStartScheduler+0xd4>)
 800bf60:	f04f 32ff 	mov.w	r2, #4294967295
 800bf64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bf66:	4b14      	ldr	r3, [pc, #80]	; (800bfb8 <vTaskStartScheduler+0xd8>)
 800bf68:	2201      	movs	r2, #1
 800bf6a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bf6c:	4b13      	ldr	r3, [pc, #76]	; (800bfbc <vTaskStartScheduler+0xdc>)
 800bf6e:	2200      	movs	r2, #0
 800bf70:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bf72:	f001 f8cd 	bl	800d110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bf76:	e00e      	b.n	800bf96 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf7e:	d10a      	bne.n	800bf96 <vTaskStartScheduler+0xb6>
	__asm volatile
 800bf80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf84:	f383 8811 	msr	BASEPRI, r3
 800bf88:	f3bf 8f6f 	isb	sy
 800bf8c:	f3bf 8f4f 	dsb	sy
 800bf90:	60fb      	str	r3, [r7, #12]
}
 800bf92:	bf00      	nop
 800bf94:	e7fe      	b.n	800bf94 <vTaskStartScheduler+0xb4>
}
 800bf96:	bf00      	nop
 800bf98:	3718      	adds	r7, #24
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	bf00      	nop
 800bfa0:	08010818 	.word	0x08010818
 800bfa4:	0800c5e5 	.word	0x0800c5e5
 800bfa8:	20001964 	.word	0x20001964
 800bfac:	2000146c 	.word	0x2000146c
 800bfb0:	20000018 	.word	0x20000018
 800bfb4:	20001960 	.word	0x20001960
 800bfb8:	2000194c 	.word	0x2000194c
 800bfbc:	20001944 	.word	0x20001944

0800bfc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bfc4:	4b04      	ldr	r3, [pc, #16]	; (800bfd8 <vTaskSuspendAll+0x18>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	3301      	adds	r3, #1
 800bfca:	4a03      	ldr	r2, [pc, #12]	; (800bfd8 <vTaskSuspendAll+0x18>)
 800bfcc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bfce:	bf00      	nop
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr
 800bfd8:	20001968 	.word	0x20001968

0800bfdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bfea:	4b42      	ldr	r3, [pc, #264]	; (800c0f4 <xTaskResumeAll+0x118>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d10a      	bne.n	800c008 <xTaskResumeAll+0x2c>
	__asm volatile
 800bff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff6:	f383 8811 	msr	BASEPRI, r3
 800bffa:	f3bf 8f6f 	isb	sy
 800bffe:	f3bf 8f4f 	dsb	sy
 800c002:	603b      	str	r3, [r7, #0]
}
 800c004:	bf00      	nop
 800c006:	e7fe      	b.n	800c006 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c008:	f001 f924 	bl	800d254 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c00c:	4b39      	ldr	r3, [pc, #228]	; (800c0f4 <xTaskResumeAll+0x118>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	3b01      	subs	r3, #1
 800c012:	4a38      	ldr	r2, [pc, #224]	; (800c0f4 <xTaskResumeAll+0x118>)
 800c014:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c016:	4b37      	ldr	r3, [pc, #220]	; (800c0f4 <xTaskResumeAll+0x118>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d162      	bne.n	800c0e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c01e:	4b36      	ldr	r3, [pc, #216]	; (800c0f8 <xTaskResumeAll+0x11c>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d05e      	beq.n	800c0e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c026:	e02f      	b.n	800c088 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c028:	4b34      	ldr	r3, [pc, #208]	; (800c0fc <xTaskResumeAll+0x120>)
 800c02a:	68db      	ldr	r3, [r3, #12]
 800c02c:	68db      	ldr	r3, [r3, #12]
 800c02e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	3318      	adds	r3, #24
 800c034:	4618      	mov	r0, r3
 800c036:	f7ff f851 	bl	800b0dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	3304      	adds	r3, #4
 800c03e:	4618      	mov	r0, r3
 800c040:	f7ff f84c 	bl	800b0dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c048:	4b2d      	ldr	r3, [pc, #180]	; (800c100 <xTaskResumeAll+0x124>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d903      	bls.n	800c058 <xTaskResumeAll+0x7c>
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c054:	4a2a      	ldr	r2, [pc, #168]	; (800c100 <xTaskResumeAll+0x124>)
 800c056:	6013      	str	r3, [r2, #0]
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c05c:	4613      	mov	r3, r2
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	4413      	add	r3, r2
 800c062:	009b      	lsls	r3, r3, #2
 800c064:	4a27      	ldr	r2, [pc, #156]	; (800c104 <xTaskResumeAll+0x128>)
 800c066:	441a      	add	r2, r3
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	3304      	adds	r3, #4
 800c06c:	4619      	mov	r1, r3
 800c06e:	4610      	mov	r0, r2
 800c070:	f7fe ffd7 	bl	800b022 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c078:	4b23      	ldr	r3, [pc, #140]	; (800c108 <xTaskResumeAll+0x12c>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c07e:	429a      	cmp	r2, r3
 800c080:	d302      	bcc.n	800c088 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c082:	4b22      	ldr	r3, [pc, #136]	; (800c10c <xTaskResumeAll+0x130>)
 800c084:	2201      	movs	r2, #1
 800c086:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c088:	4b1c      	ldr	r3, [pc, #112]	; (800c0fc <xTaskResumeAll+0x120>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d1cb      	bne.n	800c028 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d001      	beq.n	800c09a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c096:	f000 fb5f 	bl	800c758 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c09a:	4b1d      	ldr	r3, [pc, #116]	; (800c110 <xTaskResumeAll+0x134>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d010      	beq.n	800c0c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c0a6:	f000 f847 	bl	800c138 <xTaskIncrementTick>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d002      	beq.n	800c0b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c0b0:	4b16      	ldr	r3, [pc, #88]	; (800c10c <xTaskResumeAll+0x130>)
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	3b01      	subs	r3, #1
 800c0ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d1f1      	bne.n	800c0a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c0c2:	4b13      	ldr	r3, [pc, #76]	; (800c110 <xTaskResumeAll+0x134>)
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c0c8:	4b10      	ldr	r3, [pc, #64]	; (800c10c <xTaskResumeAll+0x130>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d009      	beq.n	800c0e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c0d4:	4b0f      	ldr	r3, [pc, #60]	; (800c114 <xTaskResumeAll+0x138>)
 800c0d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0da:	601a      	str	r2, [r3, #0]
 800c0dc:	f3bf 8f4f 	dsb	sy
 800c0e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c0e4:	f001 f8e6 	bl	800d2b4 <vPortExitCritical>

	return xAlreadyYielded;
 800c0e8:	68bb      	ldr	r3, [r7, #8]
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3710      	adds	r7, #16
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	20001968 	.word	0x20001968
 800c0f8:	20001940 	.word	0x20001940
 800c0fc:	20001900 	.word	0x20001900
 800c100:	20001948 	.word	0x20001948
 800c104:	20001470 	.word	0x20001470
 800c108:	2000146c 	.word	0x2000146c
 800c10c:	20001954 	.word	0x20001954
 800c110:	20001950 	.word	0x20001950
 800c114:	e000ed04 	.word	0xe000ed04

0800c118 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c118:	b480      	push	{r7}
 800c11a:	b083      	sub	sp, #12
 800c11c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c11e:	4b05      	ldr	r3, [pc, #20]	; (800c134 <xTaskGetTickCount+0x1c>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c124:	687b      	ldr	r3, [r7, #4]
}
 800c126:	4618      	mov	r0, r3
 800c128:	370c      	adds	r7, #12
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr
 800c132:	bf00      	nop
 800c134:	20001944 	.word	0x20001944

0800c138 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b086      	sub	sp, #24
 800c13c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c13e:	2300      	movs	r3, #0
 800c140:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c142:	4b4f      	ldr	r3, [pc, #316]	; (800c280 <xTaskIncrementTick+0x148>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	f040 808f 	bne.w	800c26a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c14c:	4b4d      	ldr	r3, [pc, #308]	; (800c284 <xTaskIncrementTick+0x14c>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	3301      	adds	r3, #1
 800c152:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c154:	4a4b      	ldr	r2, [pc, #300]	; (800c284 <xTaskIncrementTick+0x14c>)
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d120      	bne.n	800c1a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c160:	4b49      	ldr	r3, [pc, #292]	; (800c288 <xTaskIncrementTick+0x150>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d00a      	beq.n	800c180 <xTaskIncrementTick+0x48>
	__asm volatile
 800c16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c16e:	f383 8811 	msr	BASEPRI, r3
 800c172:	f3bf 8f6f 	isb	sy
 800c176:	f3bf 8f4f 	dsb	sy
 800c17a:	603b      	str	r3, [r7, #0]
}
 800c17c:	bf00      	nop
 800c17e:	e7fe      	b.n	800c17e <xTaskIncrementTick+0x46>
 800c180:	4b41      	ldr	r3, [pc, #260]	; (800c288 <xTaskIncrementTick+0x150>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	60fb      	str	r3, [r7, #12]
 800c186:	4b41      	ldr	r3, [pc, #260]	; (800c28c <xTaskIncrementTick+0x154>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	4a3f      	ldr	r2, [pc, #252]	; (800c288 <xTaskIncrementTick+0x150>)
 800c18c:	6013      	str	r3, [r2, #0]
 800c18e:	4a3f      	ldr	r2, [pc, #252]	; (800c28c <xTaskIncrementTick+0x154>)
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	6013      	str	r3, [r2, #0]
 800c194:	4b3e      	ldr	r3, [pc, #248]	; (800c290 <xTaskIncrementTick+0x158>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	3301      	adds	r3, #1
 800c19a:	4a3d      	ldr	r2, [pc, #244]	; (800c290 <xTaskIncrementTick+0x158>)
 800c19c:	6013      	str	r3, [r2, #0]
 800c19e:	f000 fadb 	bl	800c758 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c1a2:	4b3c      	ldr	r3, [pc, #240]	; (800c294 <xTaskIncrementTick+0x15c>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	693a      	ldr	r2, [r7, #16]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d349      	bcc.n	800c240 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1ac:	4b36      	ldr	r3, [pc, #216]	; (800c288 <xTaskIncrementTick+0x150>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d104      	bne.n	800c1c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1b6:	4b37      	ldr	r3, [pc, #220]	; (800c294 <xTaskIncrementTick+0x15c>)
 800c1b8:	f04f 32ff 	mov.w	r2, #4294967295
 800c1bc:	601a      	str	r2, [r3, #0]
					break;
 800c1be:	e03f      	b.n	800c240 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1c0:	4b31      	ldr	r3, [pc, #196]	; (800c288 <xTaskIncrementTick+0x150>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	68db      	ldr	r3, [r3, #12]
 800c1c6:	68db      	ldr	r3, [r3, #12]
 800c1c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c1d0:	693a      	ldr	r2, [r7, #16]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	d203      	bcs.n	800c1e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c1d8:	4a2e      	ldr	r2, [pc, #184]	; (800c294 <xTaskIncrementTick+0x15c>)
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c1de:	e02f      	b.n	800c240 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	3304      	adds	r3, #4
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f7fe ff79 	bl	800b0dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d004      	beq.n	800c1fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	3318      	adds	r3, #24
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7fe ff70 	bl	800b0dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c200:	4b25      	ldr	r3, [pc, #148]	; (800c298 <xTaskIncrementTick+0x160>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	429a      	cmp	r2, r3
 800c206:	d903      	bls.n	800c210 <xTaskIncrementTick+0xd8>
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c20c:	4a22      	ldr	r2, [pc, #136]	; (800c298 <xTaskIncrementTick+0x160>)
 800c20e:	6013      	str	r3, [r2, #0]
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c214:	4613      	mov	r3, r2
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	4413      	add	r3, r2
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	4a1f      	ldr	r2, [pc, #124]	; (800c29c <xTaskIncrementTick+0x164>)
 800c21e:	441a      	add	r2, r3
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	3304      	adds	r3, #4
 800c224:	4619      	mov	r1, r3
 800c226:	4610      	mov	r0, r2
 800c228:	f7fe fefb 	bl	800b022 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c230:	4b1b      	ldr	r3, [pc, #108]	; (800c2a0 <xTaskIncrementTick+0x168>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c236:	429a      	cmp	r2, r3
 800c238:	d3b8      	bcc.n	800c1ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c23a:	2301      	movs	r3, #1
 800c23c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c23e:	e7b5      	b.n	800c1ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c240:	4b17      	ldr	r3, [pc, #92]	; (800c2a0 <xTaskIncrementTick+0x168>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c246:	4915      	ldr	r1, [pc, #84]	; (800c29c <xTaskIncrementTick+0x164>)
 800c248:	4613      	mov	r3, r2
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	4413      	add	r3, r2
 800c24e:	009b      	lsls	r3, r3, #2
 800c250:	440b      	add	r3, r1
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	2b01      	cmp	r3, #1
 800c256:	d901      	bls.n	800c25c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c258:	2301      	movs	r3, #1
 800c25a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c25c:	4b11      	ldr	r3, [pc, #68]	; (800c2a4 <xTaskIncrementTick+0x16c>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d007      	beq.n	800c274 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c264:	2301      	movs	r3, #1
 800c266:	617b      	str	r3, [r7, #20]
 800c268:	e004      	b.n	800c274 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c26a:	4b0f      	ldr	r3, [pc, #60]	; (800c2a8 <xTaskIncrementTick+0x170>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	3301      	adds	r3, #1
 800c270:	4a0d      	ldr	r2, [pc, #52]	; (800c2a8 <xTaskIncrementTick+0x170>)
 800c272:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c274:	697b      	ldr	r3, [r7, #20]
}
 800c276:	4618      	mov	r0, r3
 800c278:	3718      	adds	r7, #24
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	20001968 	.word	0x20001968
 800c284:	20001944 	.word	0x20001944
 800c288:	200018f8 	.word	0x200018f8
 800c28c:	200018fc 	.word	0x200018fc
 800c290:	20001958 	.word	0x20001958
 800c294:	20001960 	.word	0x20001960
 800c298:	20001948 	.word	0x20001948
 800c29c:	20001470 	.word	0x20001470
 800c2a0:	2000146c 	.word	0x2000146c
 800c2a4:	20001954 	.word	0x20001954
 800c2a8:	20001950 	.word	0x20001950

0800c2ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b085      	sub	sp, #20
 800c2b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c2b2:	4b2a      	ldr	r3, [pc, #168]	; (800c35c <vTaskSwitchContext+0xb0>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d003      	beq.n	800c2c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c2ba:	4b29      	ldr	r3, [pc, #164]	; (800c360 <vTaskSwitchContext+0xb4>)
 800c2bc:	2201      	movs	r2, #1
 800c2be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c2c0:	e046      	b.n	800c350 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800c2c2:	4b27      	ldr	r3, [pc, #156]	; (800c360 <vTaskSwitchContext+0xb4>)
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2c8:	4b26      	ldr	r3, [pc, #152]	; (800c364 <vTaskSwitchContext+0xb8>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	60fb      	str	r3, [r7, #12]
 800c2ce:	e010      	b.n	800c2f2 <vTaskSwitchContext+0x46>
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d10a      	bne.n	800c2ec <vTaskSwitchContext+0x40>
	__asm volatile
 800c2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2da:	f383 8811 	msr	BASEPRI, r3
 800c2de:	f3bf 8f6f 	isb	sy
 800c2e2:	f3bf 8f4f 	dsb	sy
 800c2e6:	607b      	str	r3, [r7, #4]
}
 800c2e8:	bf00      	nop
 800c2ea:	e7fe      	b.n	800c2ea <vTaskSwitchContext+0x3e>
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	3b01      	subs	r3, #1
 800c2f0:	60fb      	str	r3, [r7, #12]
 800c2f2:	491d      	ldr	r1, [pc, #116]	; (800c368 <vTaskSwitchContext+0xbc>)
 800c2f4:	68fa      	ldr	r2, [r7, #12]
 800c2f6:	4613      	mov	r3, r2
 800c2f8:	009b      	lsls	r3, r3, #2
 800c2fa:	4413      	add	r3, r2
 800c2fc:	009b      	lsls	r3, r3, #2
 800c2fe:	440b      	add	r3, r1
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d0e4      	beq.n	800c2d0 <vTaskSwitchContext+0x24>
 800c306:	68fa      	ldr	r2, [r7, #12]
 800c308:	4613      	mov	r3, r2
 800c30a:	009b      	lsls	r3, r3, #2
 800c30c:	4413      	add	r3, r2
 800c30e:	009b      	lsls	r3, r3, #2
 800c310:	4a15      	ldr	r2, [pc, #84]	; (800c368 <vTaskSwitchContext+0xbc>)
 800c312:	4413      	add	r3, r2
 800c314:	60bb      	str	r3, [r7, #8]
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	685b      	ldr	r3, [r3, #4]
 800c31a:	685a      	ldr	r2, [r3, #4]
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	605a      	str	r2, [r3, #4]
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	685a      	ldr	r2, [r3, #4]
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	3308      	adds	r3, #8
 800c328:	429a      	cmp	r2, r3
 800c32a:	d104      	bne.n	800c336 <vTaskSwitchContext+0x8a>
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	685a      	ldr	r2, [r3, #4]
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	605a      	str	r2, [r3, #4]
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	68db      	ldr	r3, [r3, #12]
 800c33c:	4a0b      	ldr	r2, [pc, #44]	; (800c36c <vTaskSwitchContext+0xc0>)
 800c33e:	6013      	str	r3, [r2, #0]
 800c340:	4a08      	ldr	r2, [pc, #32]	; (800c364 <vTaskSwitchContext+0xb8>)
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c346:	4b09      	ldr	r3, [pc, #36]	; (800c36c <vTaskSwitchContext+0xc0>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	3354      	adds	r3, #84	; 0x54
 800c34c:	4a08      	ldr	r2, [pc, #32]	; (800c370 <vTaskSwitchContext+0xc4>)
 800c34e:	6013      	str	r3, [r2, #0]
}
 800c350:	bf00      	nop
 800c352:	3714      	adds	r7, #20
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr
 800c35c:	20001968 	.word	0x20001968
 800c360:	20001954 	.word	0x20001954
 800c364:	20001948 	.word	0x20001948
 800c368:	20001470 	.word	0x20001470
 800c36c:	2000146c 	.word	0x2000146c
 800c370:	20000018 	.word	0x20000018

0800c374 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d10a      	bne.n	800c39a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c388:	f383 8811 	msr	BASEPRI, r3
 800c38c:	f3bf 8f6f 	isb	sy
 800c390:	f3bf 8f4f 	dsb	sy
 800c394:	60fb      	str	r3, [r7, #12]
}
 800c396:	bf00      	nop
 800c398:	e7fe      	b.n	800c398 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c39a:	4b07      	ldr	r3, [pc, #28]	; (800c3b8 <vTaskPlaceOnEventList+0x44>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	3318      	adds	r3, #24
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f7fe fe61 	bl	800b06a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c3a8:	2101      	movs	r1, #1
 800c3aa:	6838      	ldr	r0, [r7, #0]
 800c3ac:	f000 fa80 	bl	800c8b0 <prvAddCurrentTaskToDelayedList>
}
 800c3b0:	bf00      	nop
 800c3b2:	3710      	adds	r7, #16
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}
 800c3b8:	2000146c 	.word	0x2000146c

0800c3bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b086      	sub	sp, #24
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	60f8      	str	r0, [r7, #12]
 800c3c4:	60b9      	str	r1, [r7, #8]
 800c3c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d10a      	bne.n	800c3e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d2:	f383 8811 	msr	BASEPRI, r3
 800c3d6:	f3bf 8f6f 	isb	sy
 800c3da:	f3bf 8f4f 	dsb	sy
 800c3de:	617b      	str	r3, [r7, #20]
}
 800c3e0:	bf00      	nop
 800c3e2:	e7fe      	b.n	800c3e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c3e4:	4b0a      	ldr	r3, [pc, #40]	; (800c410 <vTaskPlaceOnEventListRestricted+0x54>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	3318      	adds	r3, #24
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	68f8      	ldr	r0, [r7, #12]
 800c3ee:	f7fe fe18 	bl	800b022 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d002      	beq.n	800c3fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c3f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c3fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c3fe:	6879      	ldr	r1, [r7, #4]
 800c400:	68b8      	ldr	r0, [r7, #8]
 800c402:	f000 fa55 	bl	800c8b0 <prvAddCurrentTaskToDelayedList>
	}
 800c406:	bf00      	nop
 800c408:	3718      	adds	r7, #24
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	bf00      	nop
 800c410:	2000146c 	.word	0x2000146c

0800c414 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b086      	sub	sp, #24
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d10a      	bne.n	800c440 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c42e:	f383 8811 	msr	BASEPRI, r3
 800c432:	f3bf 8f6f 	isb	sy
 800c436:	f3bf 8f4f 	dsb	sy
 800c43a:	60fb      	str	r3, [r7, #12]
}
 800c43c:	bf00      	nop
 800c43e:	e7fe      	b.n	800c43e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	3318      	adds	r3, #24
 800c444:	4618      	mov	r0, r3
 800c446:	f7fe fe49 	bl	800b0dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c44a:	4b1e      	ldr	r3, [pc, #120]	; (800c4c4 <xTaskRemoveFromEventList+0xb0>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d11d      	bne.n	800c48e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	3304      	adds	r3, #4
 800c456:	4618      	mov	r0, r3
 800c458:	f7fe fe40 	bl	800b0dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c460:	4b19      	ldr	r3, [pc, #100]	; (800c4c8 <xTaskRemoveFromEventList+0xb4>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	429a      	cmp	r2, r3
 800c466:	d903      	bls.n	800c470 <xTaskRemoveFromEventList+0x5c>
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c46c:	4a16      	ldr	r2, [pc, #88]	; (800c4c8 <xTaskRemoveFromEventList+0xb4>)
 800c46e:	6013      	str	r3, [r2, #0]
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c474:	4613      	mov	r3, r2
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	4413      	add	r3, r2
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	4a13      	ldr	r2, [pc, #76]	; (800c4cc <xTaskRemoveFromEventList+0xb8>)
 800c47e:	441a      	add	r2, r3
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	3304      	adds	r3, #4
 800c484:	4619      	mov	r1, r3
 800c486:	4610      	mov	r0, r2
 800c488:	f7fe fdcb 	bl	800b022 <vListInsertEnd>
 800c48c:	e005      	b.n	800c49a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	3318      	adds	r3, #24
 800c492:	4619      	mov	r1, r3
 800c494:	480e      	ldr	r0, [pc, #56]	; (800c4d0 <xTaskRemoveFromEventList+0xbc>)
 800c496:	f7fe fdc4 	bl	800b022 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c49e:	4b0d      	ldr	r3, [pc, #52]	; (800c4d4 <xTaskRemoveFromEventList+0xc0>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	d905      	bls.n	800c4b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c4ac:	4b0a      	ldr	r3, [pc, #40]	; (800c4d8 <xTaskRemoveFromEventList+0xc4>)
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	601a      	str	r2, [r3, #0]
 800c4b2:	e001      	b.n	800c4b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c4b8:	697b      	ldr	r3, [r7, #20]
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3718      	adds	r7, #24
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop
 800c4c4:	20001968 	.word	0x20001968
 800c4c8:	20001948 	.word	0x20001948
 800c4cc:	20001470 	.word	0x20001470
 800c4d0:	20001900 	.word	0x20001900
 800c4d4:	2000146c 	.word	0x2000146c
 800c4d8:	20001954 	.word	0x20001954

0800c4dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b083      	sub	sp, #12
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c4e4:	4b06      	ldr	r3, [pc, #24]	; (800c500 <vTaskInternalSetTimeOutState+0x24>)
 800c4e6:	681a      	ldr	r2, [r3, #0]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c4ec:	4b05      	ldr	r3, [pc, #20]	; (800c504 <vTaskInternalSetTimeOutState+0x28>)
 800c4ee:	681a      	ldr	r2, [r3, #0]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	605a      	str	r2, [r3, #4]
}
 800c4f4:	bf00      	nop
 800c4f6:	370c      	adds	r7, #12
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr
 800c500:	20001958 	.word	0x20001958
 800c504:	20001944 	.word	0x20001944

0800c508 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b088      	sub	sp, #32
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d10a      	bne.n	800c52e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c51c:	f383 8811 	msr	BASEPRI, r3
 800c520:	f3bf 8f6f 	isb	sy
 800c524:	f3bf 8f4f 	dsb	sy
 800c528:	613b      	str	r3, [r7, #16]
}
 800c52a:	bf00      	nop
 800c52c:	e7fe      	b.n	800c52c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d10a      	bne.n	800c54a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c538:	f383 8811 	msr	BASEPRI, r3
 800c53c:	f3bf 8f6f 	isb	sy
 800c540:	f3bf 8f4f 	dsb	sy
 800c544:	60fb      	str	r3, [r7, #12]
}
 800c546:	bf00      	nop
 800c548:	e7fe      	b.n	800c548 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c54a:	f000 fe83 	bl	800d254 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c54e:	4b1d      	ldr	r3, [pc, #116]	; (800c5c4 <xTaskCheckForTimeOut+0xbc>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	69ba      	ldr	r2, [r7, #24]
 800c55a:	1ad3      	subs	r3, r2, r3
 800c55c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c566:	d102      	bne.n	800c56e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c568:	2300      	movs	r3, #0
 800c56a:	61fb      	str	r3, [r7, #28]
 800c56c:	e023      	b.n	800c5b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681a      	ldr	r2, [r3, #0]
 800c572:	4b15      	ldr	r3, [pc, #84]	; (800c5c8 <xTaskCheckForTimeOut+0xc0>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	429a      	cmp	r2, r3
 800c578:	d007      	beq.n	800c58a <xTaskCheckForTimeOut+0x82>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	69ba      	ldr	r2, [r7, #24]
 800c580:	429a      	cmp	r2, r3
 800c582:	d302      	bcc.n	800c58a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c584:	2301      	movs	r3, #1
 800c586:	61fb      	str	r3, [r7, #28]
 800c588:	e015      	b.n	800c5b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	697a      	ldr	r2, [r7, #20]
 800c590:	429a      	cmp	r2, r3
 800c592:	d20b      	bcs.n	800c5ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	681a      	ldr	r2, [r3, #0]
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	1ad2      	subs	r2, r2, r3
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f7ff ff9b 	bl	800c4dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	61fb      	str	r3, [r7, #28]
 800c5aa:	e004      	b.n	800c5b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c5b6:	f000 fe7d 	bl	800d2b4 <vPortExitCritical>

	return xReturn;
 800c5ba:	69fb      	ldr	r3, [r7, #28]
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3720      	adds	r7, #32
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}
 800c5c4:	20001944 	.word	0x20001944
 800c5c8:	20001958 	.word	0x20001958

0800c5cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c5d0:	4b03      	ldr	r3, [pc, #12]	; (800c5e0 <vTaskMissedYield+0x14>)
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	601a      	str	r2, [r3, #0]
}
 800c5d6:	bf00      	nop
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr
 800c5e0:	20001954 	.word	0x20001954

0800c5e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c5ec:	f000 f852 	bl	800c694 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c5f0:	4b06      	ldr	r3, [pc, #24]	; (800c60c <prvIdleTask+0x28>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	d9f9      	bls.n	800c5ec <prvIdleTask+0x8>
			{
				taskYIELD();
 800c5f8:	4b05      	ldr	r3, [pc, #20]	; (800c610 <prvIdleTask+0x2c>)
 800c5fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5fe:	601a      	str	r2, [r3, #0]
 800c600:	f3bf 8f4f 	dsb	sy
 800c604:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c608:	e7f0      	b.n	800c5ec <prvIdleTask+0x8>
 800c60a:	bf00      	nop
 800c60c:	20001470 	.word	0x20001470
 800c610:	e000ed04 	.word	0xe000ed04

0800c614 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c61a:	2300      	movs	r3, #0
 800c61c:	607b      	str	r3, [r7, #4]
 800c61e:	e00c      	b.n	800c63a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c620:	687a      	ldr	r2, [r7, #4]
 800c622:	4613      	mov	r3, r2
 800c624:	009b      	lsls	r3, r3, #2
 800c626:	4413      	add	r3, r2
 800c628:	009b      	lsls	r3, r3, #2
 800c62a:	4a12      	ldr	r2, [pc, #72]	; (800c674 <prvInitialiseTaskLists+0x60>)
 800c62c:	4413      	add	r3, r2
 800c62e:	4618      	mov	r0, r3
 800c630:	f7fe fcca 	bl	800afc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	3301      	adds	r3, #1
 800c638:	607b      	str	r3, [r7, #4]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2b37      	cmp	r3, #55	; 0x37
 800c63e:	d9ef      	bls.n	800c620 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c640:	480d      	ldr	r0, [pc, #52]	; (800c678 <prvInitialiseTaskLists+0x64>)
 800c642:	f7fe fcc1 	bl	800afc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c646:	480d      	ldr	r0, [pc, #52]	; (800c67c <prvInitialiseTaskLists+0x68>)
 800c648:	f7fe fcbe 	bl	800afc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c64c:	480c      	ldr	r0, [pc, #48]	; (800c680 <prvInitialiseTaskLists+0x6c>)
 800c64e:	f7fe fcbb 	bl	800afc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c652:	480c      	ldr	r0, [pc, #48]	; (800c684 <prvInitialiseTaskLists+0x70>)
 800c654:	f7fe fcb8 	bl	800afc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c658:	480b      	ldr	r0, [pc, #44]	; (800c688 <prvInitialiseTaskLists+0x74>)
 800c65a:	f7fe fcb5 	bl	800afc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c65e:	4b0b      	ldr	r3, [pc, #44]	; (800c68c <prvInitialiseTaskLists+0x78>)
 800c660:	4a05      	ldr	r2, [pc, #20]	; (800c678 <prvInitialiseTaskLists+0x64>)
 800c662:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c664:	4b0a      	ldr	r3, [pc, #40]	; (800c690 <prvInitialiseTaskLists+0x7c>)
 800c666:	4a05      	ldr	r2, [pc, #20]	; (800c67c <prvInitialiseTaskLists+0x68>)
 800c668:	601a      	str	r2, [r3, #0]
}
 800c66a:	bf00      	nop
 800c66c:	3708      	adds	r7, #8
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
 800c672:	bf00      	nop
 800c674:	20001470 	.word	0x20001470
 800c678:	200018d0 	.word	0x200018d0
 800c67c:	200018e4 	.word	0x200018e4
 800c680:	20001900 	.word	0x20001900
 800c684:	20001914 	.word	0x20001914
 800c688:	2000192c 	.word	0x2000192c
 800c68c:	200018f8 	.word	0x200018f8
 800c690:	200018fc 	.word	0x200018fc

0800c694 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b082      	sub	sp, #8
 800c698:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c69a:	e019      	b.n	800c6d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c69c:	f000 fdda 	bl	800d254 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6a0:	4b10      	ldr	r3, [pc, #64]	; (800c6e4 <prvCheckTasksWaitingTermination+0x50>)
 800c6a2:	68db      	ldr	r3, [r3, #12]
 800c6a4:	68db      	ldr	r3, [r3, #12]
 800c6a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	3304      	adds	r3, #4
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f7fe fd15 	bl	800b0dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c6b2:	4b0d      	ldr	r3, [pc, #52]	; (800c6e8 <prvCheckTasksWaitingTermination+0x54>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	3b01      	subs	r3, #1
 800c6b8:	4a0b      	ldr	r2, [pc, #44]	; (800c6e8 <prvCheckTasksWaitingTermination+0x54>)
 800c6ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c6bc:	4b0b      	ldr	r3, [pc, #44]	; (800c6ec <prvCheckTasksWaitingTermination+0x58>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	3b01      	subs	r3, #1
 800c6c2:	4a0a      	ldr	r2, [pc, #40]	; (800c6ec <prvCheckTasksWaitingTermination+0x58>)
 800c6c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c6c6:	f000 fdf5 	bl	800d2b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f000 f810 	bl	800c6f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c6d0:	4b06      	ldr	r3, [pc, #24]	; (800c6ec <prvCheckTasksWaitingTermination+0x58>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d1e1      	bne.n	800c69c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c6d8:	bf00      	nop
 800c6da:	bf00      	nop
 800c6dc:	3708      	adds	r7, #8
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
 800c6e2:	bf00      	nop
 800c6e4:	20001914 	.word	0x20001914
 800c6e8:	20001940 	.word	0x20001940
 800c6ec:	20001928 	.word	0x20001928

0800c6f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	3354      	adds	r3, #84	; 0x54
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f002 f913 	bl	800e928 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d108      	bne.n	800c71e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c710:	4618      	mov	r0, r3
 800c712:	f000 ff8d 	bl	800d630 <vPortFree>
				vPortFree( pxTCB );
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 ff8a 	bl	800d630 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c71c:	e018      	b.n	800c750 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c724:	2b01      	cmp	r3, #1
 800c726:	d103      	bne.n	800c730 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f000 ff81 	bl	800d630 <vPortFree>
	}
 800c72e:	e00f      	b.n	800c750 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c736:	2b02      	cmp	r3, #2
 800c738:	d00a      	beq.n	800c750 <prvDeleteTCB+0x60>
	__asm volatile
 800c73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c73e:	f383 8811 	msr	BASEPRI, r3
 800c742:	f3bf 8f6f 	isb	sy
 800c746:	f3bf 8f4f 	dsb	sy
 800c74a:	60fb      	str	r3, [r7, #12]
}
 800c74c:	bf00      	nop
 800c74e:	e7fe      	b.n	800c74e <prvDeleteTCB+0x5e>
	}
 800c750:	bf00      	nop
 800c752:	3710      	adds	r7, #16
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}

0800c758 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c75e:	4b0c      	ldr	r3, [pc, #48]	; (800c790 <prvResetNextTaskUnblockTime+0x38>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d104      	bne.n	800c772 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c768:	4b0a      	ldr	r3, [pc, #40]	; (800c794 <prvResetNextTaskUnblockTime+0x3c>)
 800c76a:	f04f 32ff 	mov.w	r2, #4294967295
 800c76e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c770:	e008      	b.n	800c784 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c772:	4b07      	ldr	r3, [pc, #28]	; (800c790 <prvResetNextTaskUnblockTime+0x38>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	68db      	ldr	r3, [r3, #12]
 800c778:	68db      	ldr	r3, [r3, #12]
 800c77a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	4a04      	ldr	r2, [pc, #16]	; (800c794 <prvResetNextTaskUnblockTime+0x3c>)
 800c782:	6013      	str	r3, [r2, #0]
}
 800c784:	bf00      	nop
 800c786:	370c      	adds	r7, #12
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr
 800c790:	200018f8 	.word	0x200018f8
 800c794:	20001960 	.word	0x20001960

0800c798 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c798:	b480      	push	{r7}
 800c79a:	b083      	sub	sp, #12
 800c79c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c79e:	4b0b      	ldr	r3, [pc, #44]	; (800c7cc <xTaskGetSchedulerState+0x34>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d102      	bne.n	800c7ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	607b      	str	r3, [r7, #4]
 800c7aa:	e008      	b.n	800c7be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7ac:	4b08      	ldr	r3, [pc, #32]	; (800c7d0 <xTaskGetSchedulerState+0x38>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d102      	bne.n	800c7ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c7b4:	2302      	movs	r3, #2
 800c7b6:	607b      	str	r3, [r7, #4]
 800c7b8:	e001      	b.n	800c7be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c7be:	687b      	ldr	r3, [r7, #4]
	}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	370c      	adds	r7, #12
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr
 800c7cc:	2000194c 	.word	0x2000194c
 800c7d0:	20001968 	.word	0x20001968

0800c7d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b086      	sub	sp, #24
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d056      	beq.n	800c898 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c7ea:	4b2e      	ldr	r3, [pc, #184]	; (800c8a4 <xTaskPriorityDisinherit+0xd0>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	693a      	ldr	r2, [r7, #16]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d00a      	beq.n	800c80a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f8:	f383 8811 	msr	BASEPRI, r3
 800c7fc:	f3bf 8f6f 	isb	sy
 800c800:	f3bf 8f4f 	dsb	sy
 800c804:	60fb      	str	r3, [r7, #12]
}
 800c806:	bf00      	nop
 800c808:	e7fe      	b.n	800c808 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d10a      	bne.n	800c828 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c816:	f383 8811 	msr	BASEPRI, r3
 800c81a:	f3bf 8f6f 	isb	sy
 800c81e:	f3bf 8f4f 	dsb	sy
 800c822:	60bb      	str	r3, [r7, #8]
}
 800c824:	bf00      	nop
 800c826:	e7fe      	b.n	800c826 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c82c:	1e5a      	subs	r2, r3, #1
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d02c      	beq.n	800c898 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c842:	2b00      	cmp	r3, #0
 800c844:	d128      	bne.n	800c898 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	3304      	adds	r3, #4
 800c84a:	4618      	mov	r0, r3
 800c84c:	f7fe fc46 	bl	800b0dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c85c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c868:	4b0f      	ldr	r3, [pc, #60]	; (800c8a8 <xTaskPriorityDisinherit+0xd4>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d903      	bls.n	800c878 <xTaskPriorityDisinherit+0xa4>
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c874:	4a0c      	ldr	r2, [pc, #48]	; (800c8a8 <xTaskPriorityDisinherit+0xd4>)
 800c876:	6013      	str	r3, [r2, #0]
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c87c:	4613      	mov	r3, r2
 800c87e:	009b      	lsls	r3, r3, #2
 800c880:	4413      	add	r3, r2
 800c882:	009b      	lsls	r3, r3, #2
 800c884:	4a09      	ldr	r2, [pc, #36]	; (800c8ac <xTaskPriorityDisinherit+0xd8>)
 800c886:	441a      	add	r2, r3
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	3304      	adds	r3, #4
 800c88c:	4619      	mov	r1, r3
 800c88e:	4610      	mov	r0, r2
 800c890:	f7fe fbc7 	bl	800b022 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c894:	2301      	movs	r3, #1
 800c896:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c898:	697b      	ldr	r3, [r7, #20]
	}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3718      	adds	r7, #24
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
 800c8a2:	bf00      	nop
 800c8a4:	2000146c 	.word	0x2000146c
 800c8a8:	20001948 	.word	0x20001948
 800c8ac:	20001470 	.word	0x20001470

0800c8b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b084      	sub	sp, #16
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c8ba:	4b21      	ldr	r3, [pc, #132]	; (800c940 <prvAddCurrentTaskToDelayedList+0x90>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c8c0:	4b20      	ldr	r3, [pc, #128]	; (800c944 <prvAddCurrentTaskToDelayedList+0x94>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	3304      	adds	r3, #4
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f7fe fc08 	bl	800b0dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8d2:	d10a      	bne.n	800c8ea <prvAddCurrentTaskToDelayedList+0x3a>
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d007      	beq.n	800c8ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c8da:	4b1a      	ldr	r3, [pc, #104]	; (800c944 <prvAddCurrentTaskToDelayedList+0x94>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	3304      	adds	r3, #4
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	4819      	ldr	r0, [pc, #100]	; (800c948 <prvAddCurrentTaskToDelayedList+0x98>)
 800c8e4:	f7fe fb9d 	bl	800b022 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c8e8:	e026      	b.n	800c938 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c8ea:	68fa      	ldr	r2, [r7, #12]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	4413      	add	r3, r2
 800c8f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c8f2:	4b14      	ldr	r3, [pc, #80]	; (800c944 <prvAddCurrentTaskToDelayedList+0x94>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	68ba      	ldr	r2, [r7, #8]
 800c8f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c8fa:	68ba      	ldr	r2, [r7, #8]
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d209      	bcs.n	800c916 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c902:	4b12      	ldr	r3, [pc, #72]	; (800c94c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c904:	681a      	ldr	r2, [r3, #0]
 800c906:	4b0f      	ldr	r3, [pc, #60]	; (800c944 <prvAddCurrentTaskToDelayedList+0x94>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	3304      	adds	r3, #4
 800c90c:	4619      	mov	r1, r3
 800c90e:	4610      	mov	r0, r2
 800c910:	f7fe fbab 	bl	800b06a <vListInsert>
}
 800c914:	e010      	b.n	800c938 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c916:	4b0e      	ldr	r3, [pc, #56]	; (800c950 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c918:	681a      	ldr	r2, [r3, #0]
 800c91a:	4b0a      	ldr	r3, [pc, #40]	; (800c944 <prvAddCurrentTaskToDelayedList+0x94>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	3304      	adds	r3, #4
 800c920:	4619      	mov	r1, r3
 800c922:	4610      	mov	r0, r2
 800c924:	f7fe fba1 	bl	800b06a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c928:	4b0a      	ldr	r3, [pc, #40]	; (800c954 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	68ba      	ldr	r2, [r7, #8]
 800c92e:	429a      	cmp	r2, r3
 800c930:	d202      	bcs.n	800c938 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c932:	4a08      	ldr	r2, [pc, #32]	; (800c954 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	6013      	str	r3, [r2, #0]
}
 800c938:	bf00      	nop
 800c93a:	3710      	adds	r7, #16
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}
 800c940:	20001944 	.word	0x20001944
 800c944:	2000146c 	.word	0x2000146c
 800c948:	2000192c 	.word	0x2000192c
 800c94c:	200018fc 	.word	0x200018fc
 800c950:	200018f8 	.word	0x200018f8
 800c954:	20001960 	.word	0x20001960

0800c958 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b08a      	sub	sp, #40	; 0x28
 800c95c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c95e:	2300      	movs	r3, #0
 800c960:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c962:	f000 fb07 	bl	800cf74 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c966:	4b1c      	ldr	r3, [pc, #112]	; (800c9d8 <xTimerCreateTimerTask+0x80>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d021      	beq.n	800c9b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c96e:	2300      	movs	r3, #0
 800c970:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c972:	2300      	movs	r3, #0
 800c974:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c976:	1d3a      	adds	r2, r7, #4
 800c978:	f107 0108 	add.w	r1, r7, #8
 800c97c:	f107 030c 	add.w	r3, r7, #12
 800c980:	4618      	mov	r0, r3
 800c982:	f7fe fb07 	bl	800af94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c986:	6879      	ldr	r1, [r7, #4]
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	68fa      	ldr	r2, [r7, #12]
 800c98c:	9202      	str	r2, [sp, #8]
 800c98e:	9301      	str	r3, [sp, #4]
 800c990:	2302      	movs	r3, #2
 800c992:	9300      	str	r3, [sp, #0]
 800c994:	2300      	movs	r3, #0
 800c996:	460a      	mov	r2, r1
 800c998:	4910      	ldr	r1, [pc, #64]	; (800c9dc <xTimerCreateTimerTask+0x84>)
 800c99a:	4811      	ldr	r0, [pc, #68]	; (800c9e0 <xTimerCreateTimerTask+0x88>)
 800c99c:	f7ff f8b4 	bl	800bb08 <xTaskCreateStatic>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	4a10      	ldr	r2, [pc, #64]	; (800c9e4 <xTimerCreateTimerTask+0x8c>)
 800c9a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c9a6:	4b0f      	ldr	r3, [pc, #60]	; (800c9e4 <xTimerCreateTimerTask+0x8c>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d001      	beq.n	800c9b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d10a      	bne.n	800c9ce <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9bc:	f383 8811 	msr	BASEPRI, r3
 800c9c0:	f3bf 8f6f 	isb	sy
 800c9c4:	f3bf 8f4f 	dsb	sy
 800c9c8:	613b      	str	r3, [r7, #16]
}
 800c9ca:	bf00      	nop
 800c9cc:	e7fe      	b.n	800c9cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c9ce:	697b      	ldr	r3, [r7, #20]
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3718      	adds	r7, #24
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	2000199c 	.word	0x2000199c
 800c9dc:	08010820 	.word	0x08010820
 800c9e0:	0800cb1d 	.word	0x0800cb1d
 800c9e4:	200019a0 	.word	0x200019a0

0800c9e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b08a      	sub	sp, #40	; 0x28
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	60f8      	str	r0, [r7, #12]
 800c9f0:	60b9      	str	r1, [r7, #8]
 800c9f2:	607a      	str	r2, [r7, #4]
 800c9f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d10a      	bne.n	800ca16 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ca00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca04:	f383 8811 	msr	BASEPRI, r3
 800ca08:	f3bf 8f6f 	isb	sy
 800ca0c:	f3bf 8f4f 	dsb	sy
 800ca10:	623b      	str	r3, [r7, #32]
}
 800ca12:	bf00      	nop
 800ca14:	e7fe      	b.n	800ca14 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ca16:	4b1a      	ldr	r3, [pc, #104]	; (800ca80 <xTimerGenericCommand+0x98>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d02a      	beq.n	800ca74 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	2b05      	cmp	r3, #5
 800ca2e:	dc18      	bgt.n	800ca62 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ca30:	f7ff feb2 	bl	800c798 <xTaskGetSchedulerState>
 800ca34:	4603      	mov	r3, r0
 800ca36:	2b02      	cmp	r3, #2
 800ca38:	d109      	bne.n	800ca4e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ca3a:	4b11      	ldr	r3, [pc, #68]	; (800ca80 <xTimerGenericCommand+0x98>)
 800ca3c:	6818      	ldr	r0, [r3, #0]
 800ca3e:	f107 0110 	add.w	r1, r7, #16
 800ca42:	2300      	movs	r3, #0
 800ca44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca46:	f7fe fc77 	bl	800b338 <xQueueGenericSend>
 800ca4a:	6278      	str	r0, [r7, #36]	; 0x24
 800ca4c:	e012      	b.n	800ca74 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ca4e:	4b0c      	ldr	r3, [pc, #48]	; (800ca80 <xTimerGenericCommand+0x98>)
 800ca50:	6818      	ldr	r0, [r3, #0]
 800ca52:	f107 0110 	add.w	r1, r7, #16
 800ca56:	2300      	movs	r3, #0
 800ca58:	2200      	movs	r2, #0
 800ca5a:	f7fe fc6d 	bl	800b338 <xQueueGenericSend>
 800ca5e:	6278      	str	r0, [r7, #36]	; 0x24
 800ca60:	e008      	b.n	800ca74 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ca62:	4b07      	ldr	r3, [pc, #28]	; (800ca80 <xTimerGenericCommand+0x98>)
 800ca64:	6818      	ldr	r0, [r3, #0]
 800ca66:	f107 0110 	add.w	r1, r7, #16
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	683a      	ldr	r2, [r7, #0]
 800ca6e:	f7fe fd61 	bl	800b534 <xQueueGenericSendFromISR>
 800ca72:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ca74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3728      	adds	r7, #40	; 0x28
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}
 800ca7e:	bf00      	nop
 800ca80:	2000199c 	.word	0x2000199c

0800ca84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b088      	sub	sp, #32
 800ca88:	af02      	add	r7, sp, #8
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca8e:	4b22      	ldr	r3, [pc, #136]	; (800cb18 <prvProcessExpiredTimer+0x94>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	68db      	ldr	r3, [r3, #12]
 800ca94:	68db      	ldr	r3, [r3, #12]
 800ca96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	3304      	adds	r3, #4
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7fe fb1d 	bl	800b0dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800caa8:	f003 0304 	and.w	r3, r3, #4
 800caac:	2b00      	cmp	r3, #0
 800caae:	d022      	beq.n	800caf6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	699a      	ldr	r2, [r3, #24]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	18d1      	adds	r1, r2, r3
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	683a      	ldr	r2, [r7, #0]
 800cabc:	6978      	ldr	r0, [r7, #20]
 800cabe:	f000 f8d1 	bl	800cc64 <prvInsertTimerInActiveList>
 800cac2:	4603      	mov	r3, r0
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d01f      	beq.n	800cb08 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cac8:	2300      	movs	r3, #0
 800caca:	9300      	str	r3, [sp, #0]
 800cacc:	2300      	movs	r3, #0
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	2100      	movs	r1, #0
 800cad2:	6978      	ldr	r0, [r7, #20]
 800cad4:	f7ff ff88 	bl	800c9e8 <xTimerGenericCommand>
 800cad8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d113      	bne.n	800cb08 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae4:	f383 8811 	msr	BASEPRI, r3
 800cae8:	f3bf 8f6f 	isb	sy
 800caec:	f3bf 8f4f 	dsb	sy
 800caf0:	60fb      	str	r3, [r7, #12]
}
 800caf2:	bf00      	nop
 800caf4:	e7fe      	b.n	800caf4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cafc:	f023 0301 	bic.w	r3, r3, #1
 800cb00:	b2da      	uxtb	r2, r3
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	6a1b      	ldr	r3, [r3, #32]
 800cb0c:	6978      	ldr	r0, [r7, #20]
 800cb0e:	4798      	blx	r3
}
 800cb10:	bf00      	nop
 800cb12:	3718      	adds	r7, #24
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}
 800cb18:	20001994 	.word	0x20001994

0800cb1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b084      	sub	sp, #16
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb24:	f107 0308 	add.w	r3, r7, #8
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f000 f857 	bl	800cbdc <prvGetNextExpireTime>
 800cb2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	4619      	mov	r1, r3
 800cb34:	68f8      	ldr	r0, [r7, #12]
 800cb36:	f000 f803 	bl	800cb40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cb3a:	f000 f8d5 	bl	800cce8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb3e:	e7f1      	b.n	800cb24 <prvTimerTask+0x8>

0800cb40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b084      	sub	sp, #16
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
 800cb48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cb4a:	f7ff fa39 	bl	800bfc0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cb4e:	f107 0308 	add.w	r3, r7, #8
 800cb52:	4618      	mov	r0, r3
 800cb54:	f000 f866 	bl	800cc24 <prvSampleTimeNow>
 800cb58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d130      	bne.n	800cbc2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d10a      	bne.n	800cb7c <prvProcessTimerOrBlockTask+0x3c>
 800cb66:	687a      	ldr	r2, [r7, #4]
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	d806      	bhi.n	800cb7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cb6e:	f7ff fa35 	bl	800bfdc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cb72:	68f9      	ldr	r1, [r7, #12]
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f7ff ff85 	bl	800ca84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cb7a:	e024      	b.n	800cbc6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d008      	beq.n	800cb94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cb82:	4b13      	ldr	r3, [pc, #76]	; (800cbd0 <prvProcessTimerOrBlockTask+0x90>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d101      	bne.n	800cb90 <prvProcessTimerOrBlockTask+0x50>
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	e000      	b.n	800cb92 <prvProcessTimerOrBlockTask+0x52>
 800cb90:	2300      	movs	r3, #0
 800cb92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cb94:	4b0f      	ldr	r3, [pc, #60]	; (800cbd4 <prvProcessTimerOrBlockTask+0x94>)
 800cb96:	6818      	ldr	r0, [r3, #0]
 800cb98:	687a      	ldr	r2, [r7, #4]
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	1ad3      	subs	r3, r2, r3
 800cb9e:	683a      	ldr	r2, [r7, #0]
 800cba0:	4619      	mov	r1, r3
 800cba2:	f7fe ff7d 	bl	800baa0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cba6:	f7ff fa19 	bl	800bfdc <xTaskResumeAll>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d10a      	bne.n	800cbc6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cbb0:	4b09      	ldr	r3, [pc, #36]	; (800cbd8 <prvProcessTimerOrBlockTask+0x98>)
 800cbb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbb6:	601a      	str	r2, [r3, #0]
 800cbb8:	f3bf 8f4f 	dsb	sy
 800cbbc:	f3bf 8f6f 	isb	sy
}
 800cbc0:	e001      	b.n	800cbc6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cbc2:	f7ff fa0b 	bl	800bfdc <xTaskResumeAll>
}
 800cbc6:	bf00      	nop
 800cbc8:	3710      	adds	r7, #16
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	20001998 	.word	0x20001998
 800cbd4:	2000199c 	.word	0x2000199c
 800cbd8:	e000ed04 	.word	0xe000ed04

0800cbdc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b085      	sub	sp, #20
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cbe4:	4b0e      	ldr	r3, [pc, #56]	; (800cc20 <prvGetNextExpireTime+0x44>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d101      	bne.n	800cbf2 <prvGetNextExpireTime+0x16>
 800cbee:	2201      	movs	r2, #1
 800cbf0:	e000      	b.n	800cbf4 <prvGetNextExpireTime+0x18>
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d105      	bne.n	800cc0c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc00:	4b07      	ldr	r3, [pc, #28]	; (800cc20 <prvGetNextExpireTime+0x44>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	68db      	ldr	r3, [r3, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	60fb      	str	r3, [r7, #12]
 800cc0a:	e001      	b.n	800cc10 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cc10:	68fb      	ldr	r3, [r7, #12]
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3714      	adds	r7, #20
 800cc16:	46bd      	mov	sp, r7
 800cc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1c:	4770      	bx	lr
 800cc1e:	bf00      	nop
 800cc20:	20001994 	.word	0x20001994

0800cc24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b084      	sub	sp, #16
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cc2c:	f7ff fa74 	bl	800c118 <xTaskGetTickCount>
 800cc30:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cc32:	4b0b      	ldr	r3, [pc, #44]	; (800cc60 <prvSampleTimeNow+0x3c>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	68fa      	ldr	r2, [r7, #12]
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d205      	bcs.n	800cc48 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cc3c:	f000 f936 	bl	800ceac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2201      	movs	r2, #1
 800cc44:	601a      	str	r2, [r3, #0]
 800cc46:	e002      	b.n	800cc4e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cc4e:	4a04      	ldr	r2, [pc, #16]	; (800cc60 <prvSampleTimeNow+0x3c>)
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cc54:	68fb      	ldr	r3, [r7, #12]
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3710      	adds	r7, #16
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
 800cc5e:	bf00      	nop
 800cc60:	200019a4 	.word	0x200019a4

0800cc64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b086      	sub	sp, #24
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	60f8      	str	r0, [r7, #12]
 800cc6c:	60b9      	str	r1, [r7, #8]
 800cc6e:	607a      	str	r2, [r7, #4]
 800cc70:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cc72:	2300      	movs	r3, #0
 800cc74:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	68ba      	ldr	r2, [r7, #8]
 800cc7a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	68fa      	ldr	r2, [r7, #12]
 800cc80:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cc82:	68ba      	ldr	r2, [r7, #8]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d812      	bhi.n	800ccb0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc8a:	687a      	ldr	r2, [r7, #4]
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	1ad2      	subs	r2, r2, r3
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	699b      	ldr	r3, [r3, #24]
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d302      	bcc.n	800cc9e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cc98:	2301      	movs	r3, #1
 800cc9a:	617b      	str	r3, [r7, #20]
 800cc9c:	e01b      	b.n	800ccd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cc9e:	4b10      	ldr	r3, [pc, #64]	; (800cce0 <prvInsertTimerInActiveList+0x7c>)
 800cca0:	681a      	ldr	r2, [r3, #0]
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	3304      	adds	r3, #4
 800cca6:	4619      	mov	r1, r3
 800cca8:	4610      	mov	r0, r2
 800ccaa:	f7fe f9de 	bl	800b06a <vListInsert>
 800ccae:	e012      	b.n	800ccd6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ccb0:	687a      	ldr	r2, [r7, #4]
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d206      	bcs.n	800ccc6 <prvInsertTimerInActiveList+0x62>
 800ccb8:	68ba      	ldr	r2, [r7, #8]
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d302      	bcc.n	800ccc6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	617b      	str	r3, [r7, #20]
 800ccc4:	e007      	b.n	800ccd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ccc6:	4b07      	ldr	r3, [pc, #28]	; (800cce4 <prvInsertTimerInActiveList+0x80>)
 800ccc8:	681a      	ldr	r2, [r3, #0]
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	3304      	adds	r3, #4
 800ccce:	4619      	mov	r1, r3
 800ccd0:	4610      	mov	r0, r2
 800ccd2:	f7fe f9ca 	bl	800b06a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ccd6:	697b      	ldr	r3, [r7, #20]
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3718      	adds	r7, #24
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}
 800cce0:	20001998 	.word	0x20001998
 800cce4:	20001994 	.word	0x20001994

0800cce8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b08e      	sub	sp, #56	; 0x38
 800ccec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ccee:	e0ca      	b.n	800ce86 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	da18      	bge.n	800cd28 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ccf6:	1d3b      	adds	r3, r7, #4
 800ccf8:	3304      	adds	r3, #4
 800ccfa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ccfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d10a      	bne.n	800cd18 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cd02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd06:	f383 8811 	msr	BASEPRI, r3
 800cd0a:	f3bf 8f6f 	isb	sy
 800cd0e:	f3bf 8f4f 	dsb	sy
 800cd12:	61fb      	str	r3, [r7, #28]
}
 800cd14:	bf00      	nop
 800cd16:	e7fe      	b.n	800cd16 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd1e:	6850      	ldr	r0, [r2, #4]
 800cd20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd22:	6892      	ldr	r2, [r2, #8]
 800cd24:	4611      	mov	r1, r2
 800cd26:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	f2c0 80aa 	blt.w	800ce84 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd36:	695b      	ldr	r3, [r3, #20]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d004      	beq.n	800cd46 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd3e:	3304      	adds	r3, #4
 800cd40:	4618      	mov	r0, r3
 800cd42:	f7fe f9cb 	bl	800b0dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cd46:	463b      	mov	r3, r7
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f7ff ff6b 	bl	800cc24 <prvSampleTimeNow>
 800cd4e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2b09      	cmp	r3, #9
 800cd54:	f200 8097 	bhi.w	800ce86 <prvProcessReceivedCommands+0x19e>
 800cd58:	a201      	add	r2, pc, #4	; (adr r2, 800cd60 <prvProcessReceivedCommands+0x78>)
 800cd5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd5e:	bf00      	nop
 800cd60:	0800cd89 	.word	0x0800cd89
 800cd64:	0800cd89 	.word	0x0800cd89
 800cd68:	0800cd89 	.word	0x0800cd89
 800cd6c:	0800cdfd 	.word	0x0800cdfd
 800cd70:	0800ce11 	.word	0x0800ce11
 800cd74:	0800ce5b 	.word	0x0800ce5b
 800cd78:	0800cd89 	.word	0x0800cd89
 800cd7c:	0800cd89 	.word	0x0800cd89
 800cd80:	0800cdfd 	.word	0x0800cdfd
 800cd84:	0800ce11 	.word	0x0800ce11
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd8e:	f043 0301 	orr.w	r3, r3, #1
 800cd92:	b2da      	uxtb	r2, r3
 800cd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cd9a:	68ba      	ldr	r2, [r7, #8]
 800cd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9e:	699b      	ldr	r3, [r3, #24]
 800cda0:	18d1      	adds	r1, r2, r3
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cda6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cda8:	f7ff ff5c 	bl	800cc64 <prvInsertTimerInActiveList>
 800cdac:	4603      	mov	r3, r0
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d069      	beq.n	800ce86 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cdb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb4:	6a1b      	ldr	r3, [r3, #32]
 800cdb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cdb8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cdc0:	f003 0304 	and.w	r3, r3, #4
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d05e      	beq.n	800ce86 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cdc8:	68ba      	ldr	r2, [r7, #8]
 800cdca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdcc:	699b      	ldr	r3, [r3, #24]
 800cdce:	441a      	add	r2, r3
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	9300      	str	r3, [sp, #0]
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	2100      	movs	r1, #0
 800cdd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cdda:	f7ff fe05 	bl	800c9e8 <xTimerGenericCommand>
 800cdde:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cde0:	6a3b      	ldr	r3, [r7, #32]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d14f      	bne.n	800ce86 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdea:	f383 8811 	msr	BASEPRI, r3
 800cdee:	f3bf 8f6f 	isb	sy
 800cdf2:	f3bf 8f4f 	dsb	sy
 800cdf6:	61bb      	str	r3, [r7, #24]
}
 800cdf8:	bf00      	nop
 800cdfa:	e7fe      	b.n	800cdfa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce02:	f023 0301 	bic.w	r3, r3, #1
 800ce06:	b2da      	uxtb	r2, r3
 800ce08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ce0e:	e03a      	b.n	800ce86 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ce10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce16:	f043 0301 	orr.w	r3, r3, #1
 800ce1a:	b2da      	uxtb	r2, r3
 800ce1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ce22:	68ba      	ldr	r2, [r7, #8]
 800ce24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce26:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ce28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce2a:	699b      	ldr	r3, [r3, #24]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d10a      	bne.n	800ce46 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ce30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce34:	f383 8811 	msr	BASEPRI, r3
 800ce38:	f3bf 8f6f 	isb	sy
 800ce3c:	f3bf 8f4f 	dsb	sy
 800ce40:	617b      	str	r3, [r7, #20]
}
 800ce42:	bf00      	nop
 800ce44:	e7fe      	b.n	800ce44 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ce46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce48:	699a      	ldr	r2, [r3, #24]
 800ce4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce4c:	18d1      	adds	r1, r2, r3
 800ce4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce54:	f7ff ff06 	bl	800cc64 <prvInsertTimerInActiveList>
					break;
 800ce58:	e015      	b.n	800ce86 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ce5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce60:	f003 0302 	and.w	r3, r3, #2
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d103      	bne.n	800ce70 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ce68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce6a:	f000 fbe1 	bl	800d630 <vPortFree>
 800ce6e:	e00a      	b.n	800ce86 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce76:	f023 0301 	bic.w	r3, r3, #1
 800ce7a:	b2da      	uxtb	r2, r3
 800ce7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ce82:	e000      	b.n	800ce86 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ce84:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ce86:	4b08      	ldr	r3, [pc, #32]	; (800cea8 <prvProcessReceivedCommands+0x1c0>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	1d39      	adds	r1, r7, #4
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7fe fbec 	bl	800b66c <xQueueReceive>
 800ce94:	4603      	mov	r3, r0
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	f47f af2a 	bne.w	800ccf0 <prvProcessReceivedCommands+0x8>
	}
}
 800ce9c:	bf00      	nop
 800ce9e:	bf00      	nop
 800cea0:	3730      	adds	r7, #48	; 0x30
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
 800cea6:	bf00      	nop
 800cea8:	2000199c 	.word	0x2000199c

0800ceac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b088      	sub	sp, #32
 800ceb0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ceb2:	e048      	b.n	800cf46 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ceb4:	4b2d      	ldr	r3, [pc, #180]	; (800cf6c <prvSwitchTimerLists+0xc0>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	68db      	ldr	r3, [r3, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cebe:	4b2b      	ldr	r3, [pc, #172]	; (800cf6c <prvSwitchTimerLists+0xc0>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	68db      	ldr	r3, [r3, #12]
 800cec4:	68db      	ldr	r3, [r3, #12]
 800cec6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	3304      	adds	r3, #4
 800cecc:	4618      	mov	r0, r3
 800cece:	f7fe f905 	bl	800b0dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	6a1b      	ldr	r3, [r3, #32]
 800ced6:	68f8      	ldr	r0, [r7, #12]
 800ced8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cee0:	f003 0304 	and.w	r3, r3, #4
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d02e      	beq.n	800cf46 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	699b      	ldr	r3, [r3, #24]
 800ceec:	693a      	ldr	r2, [r7, #16]
 800ceee:	4413      	add	r3, r2
 800cef0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cef2:	68ba      	ldr	r2, [r7, #8]
 800cef4:	693b      	ldr	r3, [r7, #16]
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d90e      	bls.n	800cf18 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	68ba      	ldr	r2, [r7, #8]
 800cefe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	68fa      	ldr	r2, [r7, #12]
 800cf04:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf06:	4b19      	ldr	r3, [pc, #100]	; (800cf6c <prvSwitchTimerLists+0xc0>)
 800cf08:	681a      	ldr	r2, [r3, #0]
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	3304      	adds	r3, #4
 800cf0e:	4619      	mov	r1, r3
 800cf10:	4610      	mov	r0, r2
 800cf12:	f7fe f8aa 	bl	800b06a <vListInsert>
 800cf16:	e016      	b.n	800cf46 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf18:	2300      	movs	r3, #0
 800cf1a:	9300      	str	r3, [sp, #0]
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	693a      	ldr	r2, [r7, #16]
 800cf20:	2100      	movs	r1, #0
 800cf22:	68f8      	ldr	r0, [r7, #12]
 800cf24:	f7ff fd60 	bl	800c9e8 <xTimerGenericCommand>
 800cf28:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d10a      	bne.n	800cf46 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cf30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf34:	f383 8811 	msr	BASEPRI, r3
 800cf38:	f3bf 8f6f 	isb	sy
 800cf3c:	f3bf 8f4f 	dsb	sy
 800cf40:	603b      	str	r3, [r7, #0]
}
 800cf42:	bf00      	nop
 800cf44:	e7fe      	b.n	800cf44 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf46:	4b09      	ldr	r3, [pc, #36]	; (800cf6c <prvSwitchTimerLists+0xc0>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d1b1      	bne.n	800ceb4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cf50:	4b06      	ldr	r3, [pc, #24]	; (800cf6c <prvSwitchTimerLists+0xc0>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cf56:	4b06      	ldr	r3, [pc, #24]	; (800cf70 <prvSwitchTimerLists+0xc4>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	4a04      	ldr	r2, [pc, #16]	; (800cf6c <prvSwitchTimerLists+0xc0>)
 800cf5c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cf5e:	4a04      	ldr	r2, [pc, #16]	; (800cf70 <prvSwitchTimerLists+0xc4>)
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	6013      	str	r3, [r2, #0]
}
 800cf64:	bf00      	nop
 800cf66:	3718      	adds	r7, #24
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}
 800cf6c:	20001994 	.word	0x20001994
 800cf70:	20001998 	.word	0x20001998

0800cf74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b082      	sub	sp, #8
 800cf78:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cf7a:	f000 f96b 	bl	800d254 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cf7e:	4b15      	ldr	r3, [pc, #84]	; (800cfd4 <prvCheckForValidListAndQueue+0x60>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d120      	bne.n	800cfc8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cf86:	4814      	ldr	r0, [pc, #80]	; (800cfd8 <prvCheckForValidListAndQueue+0x64>)
 800cf88:	f7fe f81e 	bl	800afc8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cf8c:	4813      	ldr	r0, [pc, #76]	; (800cfdc <prvCheckForValidListAndQueue+0x68>)
 800cf8e:	f7fe f81b 	bl	800afc8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cf92:	4b13      	ldr	r3, [pc, #76]	; (800cfe0 <prvCheckForValidListAndQueue+0x6c>)
 800cf94:	4a10      	ldr	r2, [pc, #64]	; (800cfd8 <prvCheckForValidListAndQueue+0x64>)
 800cf96:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cf98:	4b12      	ldr	r3, [pc, #72]	; (800cfe4 <prvCheckForValidListAndQueue+0x70>)
 800cf9a:	4a10      	ldr	r2, [pc, #64]	; (800cfdc <prvCheckForValidListAndQueue+0x68>)
 800cf9c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	9300      	str	r3, [sp, #0]
 800cfa2:	4b11      	ldr	r3, [pc, #68]	; (800cfe8 <prvCheckForValidListAndQueue+0x74>)
 800cfa4:	4a11      	ldr	r2, [pc, #68]	; (800cfec <prvCheckForValidListAndQueue+0x78>)
 800cfa6:	2110      	movs	r1, #16
 800cfa8:	200a      	movs	r0, #10
 800cfaa:	f7fe f929 	bl	800b200 <xQueueGenericCreateStatic>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	4a08      	ldr	r2, [pc, #32]	; (800cfd4 <prvCheckForValidListAndQueue+0x60>)
 800cfb2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cfb4:	4b07      	ldr	r3, [pc, #28]	; (800cfd4 <prvCheckForValidListAndQueue+0x60>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d005      	beq.n	800cfc8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cfbc:	4b05      	ldr	r3, [pc, #20]	; (800cfd4 <prvCheckForValidListAndQueue+0x60>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	490b      	ldr	r1, [pc, #44]	; (800cff0 <prvCheckForValidListAndQueue+0x7c>)
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7fe fd42 	bl	800ba4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cfc8:	f000 f974 	bl	800d2b4 <vPortExitCritical>
}
 800cfcc:	bf00      	nop
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	bf00      	nop
 800cfd4:	2000199c 	.word	0x2000199c
 800cfd8:	2000196c 	.word	0x2000196c
 800cfdc:	20001980 	.word	0x20001980
 800cfe0:	20001994 	.word	0x20001994
 800cfe4:	20001998 	.word	0x20001998
 800cfe8:	20001a48 	.word	0x20001a48
 800cfec:	200019a8 	.word	0x200019a8
 800cff0:	08010828 	.word	0x08010828

0800cff4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cff4:	b480      	push	{r7}
 800cff6:	b085      	sub	sp, #20
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	60f8      	str	r0, [r7, #12]
 800cffc:	60b9      	str	r1, [r7, #8]
 800cffe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	3b04      	subs	r3, #4
 800d004:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d00c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	3b04      	subs	r3, #4
 800d012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	f023 0201 	bic.w	r2, r3, #1
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	3b04      	subs	r3, #4
 800d022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d024:	4a0c      	ldr	r2, [pc, #48]	; (800d058 <pxPortInitialiseStack+0x64>)
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	3b14      	subs	r3, #20
 800d02e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d030:	687a      	ldr	r2, [r7, #4]
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	3b04      	subs	r3, #4
 800d03a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	f06f 0202 	mvn.w	r2, #2
 800d042:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	3b20      	subs	r3, #32
 800d048:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d04a:	68fb      	ldr	r3, [r7, #12]
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	3714      	adds	r7, #20
 800d050:	46bd      	mov	sp, r7
 800d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d056:	4770      	bx	lr
 800d058:	0800d05d 	.word	0x0800d05d

0800d05c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d05c:	b480      	push	{r7}
 800d05e:	b085      	sub	sp, #20
 800d060:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d062:	2300      	movs	r3, #0
 800d064:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d066:	4b12      	ldr	r3, [pc, #72]	; (800d0b0 <prvTaskExitError+0x54>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d06e:	d00a      	beq.n	800d086 <prvTaskExitError+0x2a>
	__asm volatile
 800d070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d074:	f383 8811 	msr	BASEPRI, r3
 800d078:	f3bf 8f6f 	isb	sy
 800d07c:	f3bf 8f4f 	dsb	sy
 800d080:	60fb      	str	r3, [r7, #12]
}
 800d082:	bf00      	nop
 800d084:	e7fe      	b.n	800d084 <prvTaskExitError+0x28>
	__asm volatile
 800d086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d08a:	f383 8811 	msr	BASEPRI, r3
 800d08e:	f3bf 8f6f 	isb	sy
 800d092:	f3bf 8f4f 	dsb	sy
 800d096:	60bb      	str	r3, [r7, #8]
}
 800d098:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d09a:	bf00      	nop
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d0fc      	beq.n	800d09c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d0a2:	bf00      	nop
 800d0a4:	bf00      	nop
 800d0a6:	3714      	adds	r7, #20
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ae:	4770      	bx	lr
 800d0b0:	20000014 	.word	0x20000014
	...

0800d0c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d0c0:	4b07      	ldr	r3, [pc, #28]	; (800d0e0 <pxCurrentTCBConst2>)
 800d0c2:	6819      	ldr	r1, [r3, #0]
 800d0c4:	6808      	ldr	r0, [r1, #0]
 800d0c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0ca:	f380 8809 	msr	PSP, r0
 800d0ce:	f3bf 8f6f 	isb	sy
 800d0d2:	f04f 0000 	mov.w	r0, #0
 800d0d6:	f380 8811 	msr	BASEPRI, r0
 800d0da:	4770      	bx	lr
 800d0dc:	f3af 8000 	nop.w

0800d0e0 <pxCurrentTCBConst2>:
 800d0e0:	2000146c 	.word	0x2000146c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d0e4:	bf00      	nop
 800d0e6:	bf00      	nop

0800d0e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d0e8:	4808      	ldr	r0, [pc, #32]	; (800d10c <prvPortStartFirstTask+0x24>)
 800d0ea:	6800      	ldr	r0, [r0, #0]
 800d0ec:	6800      	ldr	r0, [r0, #0]
 800d0ee:	f380 8808 	msr	MSP, r0
 800d0f2:	f04f 0000 	mov.w	r0, #0
 800d0f6:	f380 8814 	msr	CONTROL, r0
 800d0fa:	b662      	cpsie	i
 800d0fc:	b661      	cpsie	f
 800d0fe:	f3bf 8f4f 	dsb	sy
 800d102:	f3bf 8f6f 	isb	sy
 800d106:	df00      	svc	0
 800d108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d10a:	bf00      	nop
 800d10c:	e000ed08 	.word	0xe000ed08

0800d110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b086      	sub	sp, #24
 800d114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d116:	4b46      	ldr	r3, [pc, #280]	; (800d230 <xPortStartScheduler+0x120>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	4a46      	ldr	r2, [pc, #280]	; (800d234 <xPortStartScheduler+0x124>)
 800d11c:	4293      	cmp	r3, r2
 800d11e:	d10a      	bne.n	800d136 <xPortStartScheduler+0x26>
	__asm volatile
 800d120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d124:	f383 8811 	msr	BASEPRI, r3
 800d128:	f3bf 8f6f 	isb	sy
 800d12c:	f3bf 8f4f 	dsb	sy
 800d130:	613b      	str	r3, [r7, #16]
}
 800d132:	bf00      	nop
 800d134:	e7fe      	b.n	800d134 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d136:	4b3e      	ldr	r3, [pc, #248]	; (800d230 <xPortStartScheduler+0x120>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	4a3f      	ldr	r2, [pc, #252]	; (800d238 <xPortStartScheduler+0x128>)
 800d13c:	4293      	cmp	r3, r2
 800d13e:	d10a      	bne.n	800d156 <xPortStartScheduler+0x46>
	__asm volatile
 800d140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d144:	f383 8811 	msr	BASEPRI, r3
 800d148:	f3bf 8f6f 	isb	sy
 800d14c:	f3bf 8f4f 	dsb	sy
 800d150:	60fb      	str	r3, [r7, #12]
}
 800d152:	bf00      	nop
 800d154:	e7fe      	b.n	800d154 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d156:	4b39      	ldr	r3, [pc, #228]	; (800d23c <xPortStartScheduler+0x12c>)
 800d158:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	781b      	ldrb	r3, [r3, #0]
 800d15e:	b2db      	uxtb	r3, r3
 800d160:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	22ff      	movs	r2, #255	; 0xff
 800d166:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	781b      	ldrb	r3, [r3, #0]
 800d16c:	b2db      	uxtb	r3, r3
 800d16e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d170:	78fb      	ldrb	r3, [r7, #3]
 800d172:	b2db      	uxtb	r3, r3
 800d174:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d178:	b2da      	uxtb	r2, r3
 800d17a:	4b31      	ldr	r3, [pc, #196]	; (800d240 <xPortStartScheduler+0x130>)
 800d17c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d17e:	4b31      	ldr	r3, [pc, #196]	; (800d244 <xPortStartScheduler+0x134>)
 800d180:	2207      	movs	r2, #7
 800d182:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d184:	e009      	b.n	800d19a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d186:	4b2f      	ldr	r3, [pc, #188]	; (800d244 <xPortStartScheduler+0x134>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	3b01      	subs	r3, #1
 800d18c:	4a2d      	ldr	r2, [pc, #180]	; (800d244 <xPortStartScheduler+0x134>)
 800d18e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d190:	78fb      	ldrb	r3, [r7, #3]
 800d192:	b2db      	uxtb	r3, r3
 800d194:	005b      	lsls	r3, r3, #1
 800d196:	b2db      	uxtb	r3, r3
 800d198:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d19a:	78fb      	ldrb	r3, [r7, #3]
 800d19c:	b2db      	uxtb	r3, r3
 800d19e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1a2:	2b80      	cmp	r3, #128	; 0x80
 800d1a4:	d0ef      	beq.n	800d186 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d1a6:	4b27      	ldr	r3, [pc, #156]	; (800d244 <xPortStartScheduler+0x134>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f1c3 0307 	rsb	r3, r3, #7
 800d1ae:	2b04      	cmp	r3, #4
 800d1b0:	d00a      	beq.n	800d1c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b6:	f383 8811 	msr	BASEPRI, r3
 800d1ba:	f3bf 8f6f 	isb	sy
 800d1be:	f3bf 8f4f 	dsb	sy
 800d1c2:	60bb      	str	r3, [r7, #8]
}
 800d1c4:	bf00      	nop
 800d1c6:	e7fe      	b.n	800d1c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d1c8:	4b1e      	ldr	r3, [pc, #120]	; (800d244 <xPortStartScheduler+0x134>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	021b      	lsls	r3, r3, #8
 800d1ce:	4a1d      	ldr	r2, [pc, #116]	; (800d244 <xPortStartScheduler+0x134>)
 800d1d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d1d2:	4b1c      	ldr	r3, [pc, #112]	; (800d244 <xPortStartScheduler+0x134>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d1da:	4a1a      	ldr	r2, [pc, #104]	; (800d244 <xPortStartScheduler+0x134>)
 800d1dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	b2da      	uxtb	r2, r3
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d1e6:	4b18      	ldr	r3, [pc, #96]	; (800d248 <xPortStartScheduler+0x138>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	4a17      	ldr	r2, [pc, #92]	; (800d248 <xPortStartScheduler+0x138>)
 800d1ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d1f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d1f2:	4b15      	ldr	r3, [pc, #84]	; (800d248 <xPortStartScheduler+0x138>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	4a14      	ldr	r2, [pc, #80]	; (800d248 <xPortStartScheduler+0x138>)
 800d1f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d1fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d1fe:	f000 f8dd 	bl	800d3bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d202:	4b12      	ldr	r3, [pc, #72]	; (800d24c <xPortStartScheduler+0x13c>)
 800d204:	2200      	movs	r2, #0
 800d206:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d208:	f000 f8fc 	bl	800d404 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d20c:	4b10      	ldr	r3, [pc, #64]	; (800d250 <xPortStartScheduler+0x140>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4a0f      	ldr	r2, [pc, #60]	; (800d250 <xPortStartScheduler+0x140>)
 800d212:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d216:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d218:	f7ff ff66 	bl	800d0e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d21c:	f7ff f846 	bl	800c2ac <vTaskSwitchContext>
	prvTaskExitError();
 800d220:	f7ff ff1c 	bl	800d05c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d224:	2300      	movs	r3, #0
}
 800d226:	4618      	mov	r0, r3
 800d228:	3718      	adds	r7, #24
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}
 800d22e:	bf00      	nop
 800d230:	e000ed00 	.word	0xe000ed00
 800d234:	410fc271 	.word	0x410fc271
 800d238:	410fc270 	.word	0x410fc270
 800d23c:	e000e400 	.word	0xe000e400
 800d240:	20001a98 	.word	0x20001a98
 800d244:	20001a9c 	.word	0x20001a9c
 800d248:	e000ed20 	.word	0xe000ed20
 800d24c:	20000014 	.word	0x20000014
 800d250:	e000ef34 	.word	0xe000ef34

0800d254 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d254:	b480      	push	{r7}
 800d256:	b083      	sub	sp, #12
 800d258:	af00      	add	r7, sp, #0
	__asm volatile
 800d25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d25e:	f383 8811 	msr	BASEPRI, r3
 800d262:	f3bf 8f6f 	isb	sy
 800d266:	f3bf 8f4f 	dsb	sy
 800d26a:	607b      	str	r3, [r7, #4]
}
 800d26c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d26e:	4b0f      	ldr	r3, [pc, #60]	; (800d2ac <vPortEnterCritical+0x58>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	3301      	adds	r3, #1
 800d274:	4a0d      	ldr	r2, [pc, #52]	; (800d2ac <vPortEnterCritical+0x58>)
 800d276:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d278:	4b0c      	ldr	r3, [pc, #48]	; (800d2ac <vPortEnterCritical+0x58>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	2b01      	cmp	r3, #1
 800d27e:	d10f      	bne.n	800d2a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d280:	4b0b      	ldr	r3, [pc, #44]	; (800d2b0 <vPortEnterCritical+0x5c>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	b2db      	uxtb	r3, r3
 800d286:	2b00      	cmp	r3, #0
 800d288:	d00a      	beq.n	800d2a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d28e:	f383 8811 	msr	BASEPRI, r3
 800d292:	f3bf 8f6f 	isb	sy
 800d296:	f3bf 8f4f 	dsb	sy
 800d29a:	603b      	str	r3, [r7, #0]
}
 800d29c:	bf00      	nop
 800d29e:	e7fe      	b.n	800d29e <vPortEnterCritical+0x4a>
	}
}
 800d2a0:	bf00      	nop
 800d2a2:	370c      	adds	r7, #12
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr
 800d2ac:	20000014 	.word	0x20000014
 800d2b0:	e000ed04 	.word	0xe000ed04

0800d2b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b083      	sub	sp, #12
 800d2b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d2ba:	4b12      	ldr	r3, [pc, #72]	; (800d304 <vPortExitCritical+0x50>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d10a      	bne.n	800d2d8 <vPortExitCritical+0x24>
	__asm volatile
 800d2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c6:	f383 8811 	msr	BASEPRI, r3
 800d2ca:	f3bf 8f6f 	isb	sy
 800d2ce:	f3bf 8f4f 	dsb	sy
 800d2d2:	607b      	str	r3, [r7, #4]
}
 800d2d4:	bf00      	nop
 800d2d6:	e7fe      	b.n	800d2d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d2d8:	4b0a      	ldr	r3, [pc, #40]	; (800d304 <vPortExitCritical+0x50>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	3b01      	subs	r3, #1
 800d2de:	4a09      	ldr	r2, [pc, #36]	; (800d304 <vPortExitCritical+0x50>)
 800d2e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d2e2:	4b08      	ldr	r3, [pc, #32]	; (800d304 <vPortExitCritical+0x50>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d105      	bne.n	800d2f6 <vPortExitCritical+0x42>
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	f383 8811 	msr	BASEPRI, r3
}
 800d2f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d2f6:	bf00      	nop
 800d2f8:	370c      	adds	r7, #12
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d300:	4770      	bx	lr
 800d302:	bf00      	nop
 800d304:	20000014 	.word	0x20000014
	...

0800d310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d310:	f3ef 8009 	mrs	r0, PSP
 800d314:	f3bf 8f6f 	isb	sy
 800d318:	4b15      	ldr	r3, [pc, #84]	; (800d370 <pxCurrentTCBConst>)
 800d31a:	681a      	ldr	r2, [r3, #0]
 800d31c:	f01e 0f10 	tst.w	lr, #16
 800d320:	bf08      	it	eq
 800d322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d32a:	6010      	str	r0, [r2, #0]
 800d32c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d330:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d334:	f380 8811 	msr	BASEPRI, r0
 800d338:	f3bf 8f4f 	dsb	sy
 800d33c:	f3bf 8f6f 	isb	sy
 800d340:	f7fe ffb4 	bl	800c2ac <vTaskSwitchContext>
 800d344:	f04f 0000 	mov.w	r0, #0
 800d348:	f380 8811 	msr	BASEPRI, r0
 800d34c:	bc09      	pop	{r0, r3}
 800d34e:	6819      	ldr	r1, [r3, #0]
 800d350:	6808      	ldr	r0, [r1, #0]
 800d352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d356:	f01e 0f10 	tst.w	lr, #16
 800d35a:	bf08      	it	eq
 800d35c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d360:	f380 8809 	msr	PSP, r0
 800d364:	f3bf 8f6f 	isb	sy
 800d368:	4770      	bx	lr
 800d36a:	bf00      	nop
 800d36c:	f3af 8000 	nop.w

0800d370 <pxCurrentTCBConst>:
 800d370:	2000146c 	.word	0x2000146c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d374:	bf00      	nop
 800d376:	bf00      	nop

0800d378 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b082      	sub	sp, #8
 800d37c:	af00      	add	r7, sp, #0
	__asm volatile
 800d37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d382:	f383 8811 	msr	BASEPRI, r3
 800d386:	f3bf 8f6f 	isb	sy
 800d38a:	f3bf 8f4f 	dsb	sy
 800d38e:	607b      	str	r3, [r7, #4]
}
 800d390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d392:	f7fe fed1 	bl	800c138 <xTaskIncrementTick>
 800d396:	4603      	mov	r3, r0
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d003      	beq.n	800d3a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d39c:	4b06      	ldr	r3, [pc, #24]	; (800d3b8 <xPortSysTickHandler+0x40>)
 800d39e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3a2:	601a      	str	r2, [r3, #0]
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	f383 8811 	msr	BASEPRI, r3
}
 800d3ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d3b0:	bf00      	nop
 800d3b2:	3708      	adds	r7, #8
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}
 800d3b8:	e000ed04 	.word	0xe000ed04

0800d3bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d3bc:	b480      	push	{r7}
 800d3be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d3c0:	4b0b      	ldr	r3, [pc, #44]	; (800d3f0 <vPortSetupTimerInterrupt+0x34>)
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d3c6:	4b0b      	ldr	r3, [pc, #44]	; (800d3f4 <vPortSetupTimerInterrupt+0x38>)
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d3cc:	4b0a      	ldr	r3, [pc, #40]	; (800d3f8 <vPortSetupTimerInterrupt+0x3c>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	4a0a      	ldr	r2, [pc, #40]	; (800d3fc <vPortSetupTimerInterrupt+0x40>)
 800d3d2:	fba2 2303 	umull	r2, r3, r2, r3
 800d3d6:	099b      	lsrs	r3, r3, #6
 800d3d8:	4a09      	ldr	r2, [pc, #36]	; (800d400 <vPortSetupTimerInterrupt+0x44>)
 800d3da:	3b01      	subs	r3, #1
 800d3dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d3de:	4b04      	ldr	r3, [pc, #16]	; (800d3f0 <vPortSetupTimerInterrupt+0x34>)
 800d3e0:	2207      	movs	r2, #7
 800d3e2:	601a      	str	r2, [r3, #0]
}
 800d3e4:	bf00      	nop
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ec:	4770      	bx	lr
 800d3ee:	bf00      	nop
 800d3f0:	e000e010 	.word	0xe000e010
 800d3f4:	e000e018 	.word	0xe000e018
 800d3f8:	20000008 	.word	0x20000008
 800d3fc:	10624dd3 	.word	0x10624dd3
 800d400:	e000e014 	.word	0xe000e014

0800d404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d404:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d414 <vPortEnableVFP+0x10>
 800d408:	6801      	ldr	r1, [r0, #0]
 800d40a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d40e:	6001      	str	r1, [r0, #0]
 800d410:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d412:	bf00      	nop
 800d414:	e000ed88 	.word	0xe000ed88

0800d418 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d418:	b480      	push	{r7}
 800d41a:	b085      	sub	sp, #20
 800d41c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d41e:	f3ef 8305 	mrs	r3, IPSR
 800d422:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2b0f      	cmp	r3, #15
 800d428:	d914      	bls.n	800d454 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d42a:	4a17      	ldr	r2, [pc, #92]	; (800d488 <vPortValidateInterruptPriority+0x70>)
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	4413      	add	r3, r2
 800d430:	781b      	ldrb	r3, [r3, #0]
 800d432:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d434:	4b15      	ldr	r3, [pc, #84]	; (800d48c <vPortValidateInterruptPriority+0x74>)
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	7afa      	ldrb	r2, [r7, #11]
 800d43a:	429a      	cmp	r2, r3
 800d43c:	d20a      	bcs.n	800d454 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d442:	f383 8811 	msr	BASEPRI, r3
 800d446:	f3bf 8f6f 	isb	sy
 800d44a:	f3bf 8f4f 	dsb	sy
 800d44e:	607b      	str	r3, [r7, #4]
}
 800d450:	bf00      	nop
 800d452:	e7fe      	b.n	800d452 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d454:	4b0e      	ldr	r3, [pc, #56]	; (800d490 <vPortValidateInterruptPriority+0x78>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d45c:	4b0d      	ldr	r3, [pc, #52]	; (800d494 <vPortValidateInterruptPriority+0x7c>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	429a      	cmp	r2, r3
 800d462:	d90a      	bls.n	800d47a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d468:	f383 8811 	msr	BASEPRI, r3
 800d46c:	f3bf 8f6f 	isb	sy
 800d470:	f3bf 8f4f 	dsb	sy
 800d474:	603b      	str	r3, [r7, #0]
}
 800d476:	bf00      	nop
 800d478:	e7fe      	b.n	800d478 <vPortValidateInterruptPriority+0x60>
	}
 800d47a:	bf00      	nop
 800d47c:	3714      	adds	r7, #20
 800d47e:	46bd      	mov	sp, r7
 800d480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d484:	4770      	bx	lr
 800d486:	bf00      	nop
 800d488:	e000e3f0 	.word	0xe000e3f0
 800d48c:	20001a98 	.word	0x20001a98
 800d490:	e000ed0c 	.word	0xe000ed0c
 800d494:	20001a9c 	.word	0x20001a9c

0800d498 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b08a      	sub	sp, #40	; 0x28
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d4a4:	f7fe fd8c 	bl	800bfc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d4a8:	4b5b      	ldr	r3, [pc, #364]	; (800d618 <pvPortMalloc+0x180>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d101      	bne.n	800d4b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d4b0:	f000 f920 	bl	800d6f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d4b4:	4b59      	ldr	r3, [pc, #356]	; (800d61c <pvPortMalloc+0x184>)
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	4013      	ands	r3, r2
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	f040 8093 	bne.w	800d5e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d01d      	beq.n	800d504 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d4c8:	2208      	movs	r2, #8
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	4413      	add	r3, r2
 800d4ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f003 0307 	and.w	r3, r3, #7
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d014      	beq.n	800d504 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f023 0307 	bic.w	r3, r3, #7
 800d4e0:	3308      	adds	r3, #8
 800d4e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f003 0307 	and.w	r3, r3, #7
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d00a      	beq.n	800d504 <pvPortMalloc+0x6c>
	__asm volatile
 800d4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f2:	f383 8811 	msr	BASEPRI, r3
 800d4f6:	f3bf 8f6f 	isb	sy
 800d4fa:	f3bf 8f4f 	dsb	sy
 800d4fe:	617b      	str	r3, [r7, #20]
}
 800d500:	bf00      	nop
 800d502:	e7fe      	b.n	800d502 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d06e      	beq.n	800d5e8 <pvPortMalloc+0x150>
 800d50a:	4b45      	ldr	r3, [pc, #276]	; (800d620 <pvPortMalloc+0x188>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	687a      	ldr	r2, [r7, #4]
 800d510:	429a      	cmp	r2, r3
 800d512:	d869      	bhi.n	800d5e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d514:	4b43      	ldr	r3, [pc, #268]	; (800d624 <pvPortMalloc+0x18c>)
 800d516:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d518:	4b42      	ldr	r3, [pc, #264]	; (800d624 <pvPortMalloc+0x18c>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d51e:	e004      	b.n	800d52a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d522:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d52c:	685b      	ldr	r3, [r3, #4]
 800d52e:	687a      	ldr	r2, [r7, #4]
 800d530:	429a      	cmp	r2, r3
 800d532:	d903      	bls.n	800d53c <pvPortMalloc+0xa4>
 800d534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d1f1      	bne.n	800d520 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d53c:	4b36      	ldr	r3, [pc, #216]	; (800d618 <pvPortMalloc+0x180>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d542:	429a      	cmp	r2, r3
 800d544:	d050      	beq.n	800d5e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d546:	6a3b      	ldr	r3, [r7, #32]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	2208      	movs	r2, #8
 800d54c:	4413      	add	r3, r2
 800d54e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d552:	681a      	ldr	r2, [r3, #0]
 800d554:	6a3b      	ldr	r3, [r7, #32]
 800d556:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d55a:	685a      	ldr	r2, [r3, #4]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	1ad2      	subs	r2, r2, r3
 800d560:	2308      	movs	r3, #8
 800d562:	005b      	lsls	r3, r3, #1
 800d564:	429a      	cmp	r2, r3
 800d566:	d91f      	bls.n	800d5a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	4413      	add	r3, r2
 800d56e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d570:	69bb      	ldr	r3, [r7, #24]
 800d572:	f003 0307 	and.w	r3, r3, #7
 800d576:	2b00      	cmp	r3, #0
 800d578:	d00a      	beq.n	800d590 <pvPortMalloc+0xf8>
	__asm volatile
 800d57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d57e:	f383 8811 	msr	BASEPRI, r3
 800d582:	f3bf 8f6f 	isb	sy
 800d586:	f3bf 8f4f 	dsb	sy
 800d58a:	613b      	str	r3, [r7, #16]
}
 800d58c:	bf00      	nop
 800d58e:	e7fe      	b.n	800d58e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d592:	685a      	ldr	r2, [r3, #4]
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	1ad2      	subs	r2, r2, r3
 800d598:	69bb      	ldr	r3, [r7, #24]
 800d59a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59e:	687a      	ldr	r2, [r7, #4]
 800d5a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d5a2:	69b8      	ldr	r0, [r7, #24]
 800d5a4:	f000 f908 	bl	800d7b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d5a8:	4b1d      	ldr	r3, [pc, #116]	; (800d620 <pvPortMalloc+0x188>)
 800d5aa:	681a      	ldr	r2, [r3, #0]
 800d5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ae:	685b      	ldr	r3, [r3, #4]
 800d5b0:	1ad3      	subs	r3, r2, r3
 800d5b2:	4a1b      	ldr	r2, [pc, #108]	; (800d620 <pvPortMalloc+0x188>)
 800d5b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d5b6:	4b1a      	ldr	r3, [pc, #104]	; (800d620 <pvPortMalloc+0x188>)
 800d5b8:	681a      	ldr	r2, [r3, #0]
 800d5ba:	4b1b      	ldr	r3, [pc, #108]	; (800d628 <pvPortMalloc+0x190>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	d203      	bcs.n	800d5ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d5c2:	4b17      	ldr	r3, [pc, #92]	; (800d620 <pvPortMalloc+0x188>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	4a18      	ldr	r2, [pc, #96]	; (800d628 <pvPortMalloc+0x190>)
 800d5c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5cc:	685a      	ldr	r2, [r3, #4]
 800d5ce:	4b13      	ldr	r3, [pc, #76]	; (800d61c <pvPortMalloc+0x184>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	431a      	orrs	r2, r3
 800d5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5da:	2200      	movs	r2, #0
 800d5dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d5de:	4b13      	ldr	r3, [pc, #76]	; (800d62c <pvPortMalloc+0x194>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	3301      	adds	r3, #1
 800d5e4:	4a11      	ldr	r2, [pc, #68]	; (800d62c <pvPortMalloc+0x194>)
 800d5e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d5e8:	f7fe fcf8 	bl	800bfdc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5ec:	69fb      	ldr	r3, [r7, #28]
 800d5ee:	f003 0307 	and.w	r3, r3, #7
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d00a      	beq.n	800d60c <pvPortMalloc+0x174>
	__asm volatile
 800d5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5fa:	f383 8811 	msr	BASEPRI, r3
 800d5fe:	f3bf 8f6f 	isb	sy
 800d602:	f3bf 8f4f 	dsb	sy
 800d606:	60fb      	str	r3, [r7, #12]
}
 800d608:	bf00      	nop
 800d60a:	e7fe      	b.n	800d60a <pvPortMalloc+0x172>
	return pvReturn;
 800d60c:	69fb      	ldr	r3, [r7, #28]
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3728      	adds	r7, #40	; 0x28
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	200056a8 	.word	0x200056a8
 800d61c:	200056bc 	.word	0x200056bc
 800d620:	200056ac 	.word	0x200056ac
 800d624:	200056a0 	.word	0x200056a0
 800d628:	200056b0 	.word	0x200056b0
 800d62c:	200056b4 	.word	0x200056b4

0800d630 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b086      	sub	sp, #24
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d04d      	beq.n	800d6de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d642:	2308      	movs	r3, #8
 800d644:	425b      	negs	r3, r3
 800d646:	697a      	ldr	r2, [r7, #20]
 800d648:	4413      	add	r3, r2
 800d64a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	685a      	ldr	r2, [r3, #4]
 800d654:	4b24      	ldr	r3, [pc, #144]	; (800d6e8 <vPortFree+0xb8>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	4013      	ands	r3, r2
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d10a      	bne.n	800d674 <vPortFree+0x44>
	__asm volatile
 800d65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d662:	f383 8811 	msr	BASEPRI, r3
 800d666:	f3bf 8f6f 	isb	sy
 800d66a:	f3bf 8f4f 	dsb	sy
 800d66e:	60fb      	str	r3, [r7, #12]
}
 800d670:	bf00      	nop
 800d672:	e7fe      	b.n	800d672 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d674:	693b      	ldr	r3, [r7, #16]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d00a      	beq.n	800d692 <vPortFree+0x62>
	__asm volatile
 800d67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d680:	f383 8811 	msr	BASEPRI, r3
 800d684:	f3bf 8f6f 	isb	sy
 800d688:	f3bf 8f4f 	dsb	sy
 800d68c:	60bb      	str	r3, [r7, #8]
}
 800d68e:	bf00      	nop
 800d690:	e7fe      	b.n	800d690 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	685a      	ldr	r2, [r3, #4]
 800d696:	4b14      	ldr	r3, [pc, #80]	; (800d6e8 <vPortFree+0xb8>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	4013      	ands	r3, r2
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d01e      	beq.n	800d6de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d11a      	bne.n	800d6de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d6a8:	693b      	ldr	r3, [r7, #16]
 800d6aa:	685a      	ldr	r2, [r3, #4]
 800d6ac:	4b0e      	ldr	r3, [pc, #56]	; (800d6e8 <vPortFree+0xb8>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	43db      	mvns	r3, r3
 800d6b2:	401a      	ands	r2, r3
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d6b8:	f7fe fc82 	bl	800bfc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d6bc:	693b      	ldr	r3, [r7, #16]
 800d6be:	685a      	ldr	r2, [r3, #4]
 800d6c0:	4b0a      	ldr	r3, [pc, #40]	; (800d6ec <vPortFree+0xbc>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4413      	add	r3, r2
 800d6c6:	4a09      	ldr	r2, [pc, #36]	; (800d6ec <vPortFree+0xbc>)
 800d6c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d6ca:	6938      	ldr	r0, [r7, #16]
 800d6cc:	f000 f874 	bl	800d7b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d6d0:	4b07      	ldr	r3, [pc, #28]	; (800d6f0 <vPortFree+0xc0>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	4a06      	ldr	r2, [pc, #24]	; (800d6f0 <vPortFree+0xc0>)
 800d6d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d6da:	f7fe fc7f 	bl	800bfdc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d6de:	bf00      	nop
 800d6e0:	3718      	adds	r7, #24
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}
 800d6e6:	bf00      	nop
 800d6e8:	200056bc 	.word	0x200056bc
 800d6ec:	200056ac 	.word	0x200056ac
 800d6f0:	200056b8 	.word	0x200056b8

0800d6f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b085      	sub	sp, #20
 800d6f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d6fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d6fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d700:	4b27      	ldr	r3, [pc, #156]	; (800d7a0 <prvHeapInit+0xac>)
 800d702:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f003 0307 	and.w	r3, r3, #7
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d00c      	beq.n	800d728 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	3307      	adds	r3, #7
 800d712:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f023 0307 	bic.w	r3, r3, #7
 800d71a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d71c:	68ba      	ldr	r2, [r7, #8]
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	1ad3      	subs	r3, r2, r3
 800d722:	4a1f      	ldr	r2, [pc, #124]	; (800d7a0 <prvHeapInit+0xac>)
 800d724:	4413      	add	r3, r2
 800d726:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d72c:	4a1d      	ldr	r2, [pc, #116]	; (800d7a4 <prvHeapInit+0xb0>)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d732:	4b1c      	ldr	r3, [pc, #112]	; (800d7a4 <prvHeapInit+0xb0>)
 800d734:	2200      	movs	r2, #0
 800d736:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	68ba      	ldr	r2, [r7, #8]
 800d73c:	4413      	add	r3, r2
 800d73e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d740:	2208      	movs	r2, #8
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	1a9b      	subs	r3, r3, r2
 800d746:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	f023 0307 	bic.w	r3, r3, #7
 800d74e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	4a15      	ldr	r2, [pc, #84]	; (800d7a8 <prvHeapInit+0xb4>)
 800d754:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d756:	4b14      	ldr	r3, [pc, #80]	; (800d7a8 <prvHeapInit+0xb4>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	2200      	movs	r2, #0
 800d75c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d75e:	4b12      	ldr	r3, [pc, #72]	; (800d7a8 <prvHeapInit+0xb4>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	2200      	movs	r2, #0
 800d764:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	68fa      	ldr	r2, [r7, #12]
 800d76e:	1ad2      	subs	r2, r2, r3
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d774:	4b0c      	ldr	r3, [pc, #48]	; (800d7a8 <prvHeapInit+0xb4>)
 800d776:	681a      	ldr	r2, [r3, #0]
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	685b      	ldr	r3, [r3, #4]
 800d780:	4a0a      	ldr	r2, [pc, #40]	; (800d7ac <prvHeapInit+0xb8>)
 800d782:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	4a09      	ldr	r2, [pc, #36]	; (800d7b0 <prvHeapInit+0xbc>)
 800d78a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d78c:	4b09      	ldr	r3, [pc, #36]	; (800d7b4 <prvHeapInit+0xc0>)
 800d78e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d792:	601a      	str	r2, [r3, #0]
}
 800d794:	bf00      	nop
 800d796:	3714      	adds	r7, #20
 800d798:	46bd      	mov	sp, r7
 800d79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79e:	4770      	bx	lr
 800d7a0:	20001aa0 	.word	0x20001aa0
 800d7a4:	200056a0 	.word	0x200056a0
 800d7a8:	200056a8 	.word	0x200056a8
 800d7ac:	200056b0 	.word	0x200056b0
 800d7b0:	200056ac 	.word	0x200056ac
 800d7b4:	200056bc 	.word	0x200056bc

0800d7b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b085      	sub	sp, #20
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d7c0:	4b28      	ldr	r3, [pc, #160]	; (800d864 <prvInsertBlockIntoFreeList+0xac>)
 800d7c2:	60fb      	str	r3, [r7, #12]
 800d7c4:	e002      	b.n	800d7cc <prvInsertBlockIntoFreeList+0x14>
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	60fb      	str	r3, [r7, #12]
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	687a      	ldr	r2, [r7, #4]
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	d8f7      	bhi.n	800d7c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	685b      	ldr	r3, [r3, #4]
 800d7de:	68ba      	ldr	r2, [r7, #8]
 800d7e0:	4413      	add	r3, r2
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d108      	bne.n	800d7fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	685a      	ldr	r2, [r3, #4]
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	685b      	ldr	r3, [r3, #4]
 800d7f0:	441a      	add	r2, r3
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	685b      	ldr	r3, [r3, #4]
 800d802:	68ba      	ldr	r2, [r7, #8]
 800d804:	441a      	add	r2, r3
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d118      	bne.n	800d840 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	681a      	ldr	r2, [r3, #0]
 800d812:	4b15      	ldr	r3, [pc, #84]	; (800d868 <prvInsertBlockIntoFreeList+0xb0>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	429a      	cmp	r2, r3
 800d818:	d00d      	beq.n	800d836 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	685a      	ldr	r2, [r3, #4]
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	685b      	ldr	r3, [r3, #4]
 800d824:	441a      	add	r2, r3
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	681a      	ldr	r2, [r3, #0]
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	601a      	str	r2, [r3, #0]
 800d834:	e008      	b.n	800d848 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d836:	4b0c      	ldr	r3, [pc, #48]	; (800d868 <prvInsertBlockIntoFreeList+0xb0>)
 800d838:	681a      	ldr	r2, [r3, #0]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	601a      	str	r2, [r3, #0]
 800d83e:	e003      	b.n	800d848 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	681a      	ldr	r2, [r3, #0]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d848:	68fa      	ldr	r2, [r7, #12]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d002      	beq.n	800d856 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	687a      	ldr	r2, [r7, #4]
 800d854:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d856:	bf00      	nop
 800d858:	3714      	adds	r7, #20
 800d85a:	46bd      	mov	sp, r7
 800d85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d860:	4770      	bx	lr
 800d862:	bf00      	nop
 800d864:	200056a0 	.word	0x200056a0
 800d868:	200056a8 	.word	0x200056a8

0800d86c <__assert_func>:
 800d86c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d86e:	4614      	mov	r4, r2
 800d870:	461a      	mov	r2, r3
 800d872:	4b09      	ldr	r3, [pc, #36]	; (800d898 <__assert_func+0x2c>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	4605      	mov	r5, r0
 800d878:	68d8      	ldr	r0, [r3, #12]
 800d87a:	b14c      	cbz	r4, 800d890 <__assert_func+0x24>
 800d87c:	4b07      	ldr	r3, [pc, #28]	; (800d89c <__assert_func+0x30>)
 800d87e:	9100      	str	r1, [sp, #0]
 800d880:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d884:	4906      	ldr	r1, [pc, #24]	; (800d8a0 <__assert_func+0x34>)
 800d886:	462b      	mov	r3, r5
 800d888:	f000 f8ea 	bl	800da60 <fiprintf>
 800d88c:	f001 f9ce 	bl	800ec2c <abort>
 800d890:	4b04      	ldr	r3, [pc, #16]	; (800d8a4 <__assert_func+0x38>)
 800d892:	461c      	mov	r4, r3
 800d894:	e7f3      	b.n	800d87e <__assert_func+0x12>
 800d896:	bf00      	nop
 800d898:	20000018 	.word	0x20000018
 800d89c:	080108f0 	.word	0x080108f0
 800d8a0:	080108fd 	.word	0x080108fd
 800d8a4:	0801092b 	.word	0x0801092b

0800d8a8 <__errno>:
 800d8a8:	4b01      	ldr	r3, [pc, #4]	; (800d8b0 <__errno+0x8>)
 800d8aa:	6818      	ldr	r0, [r3, #0]
 800d8ac:	4770      	bx	lr
 800d8ae:	bf00      	nop
 800d8b0:	20000018 	.word	0x20000018

0800d8b4 <std>:
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	b510      	push	{r4, lr}
 800d8b8:	4604      	mov	r4, r0
 800d8ba:	e9c0 3300 	strd	r3, r3, [r0]
 800d8be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d8c2:	6083      	str	r3, [r0, #8]
 800d8c4:	8181      	strh	r1, [r0, #12]
 800d8c6:	6643      	str	r3, [r0, #100]	; 0x64
 800d8c8:	81c2      	strh	r2, [r0, #14]
 800d8ca:	6183      	str	r3, [r0, #24]
 800d8cc:	4619      	mov	r1, r3
 800d8ce:	2208      	movs	r2, #8
 800d8d0:	305c      	adds	r0, #92	; 0x5c
 800d8d2:	f000 f92c 	bl	800db2e <memset>
 800d8d6:	4b05      	ldr	r3, [pc, #20]	; (800d8ec <std+0x38>)
 800d8d8:	6263      	str	r3, [r4, #36]	; 0x24
 800d8da:	4b05      	ldr	r3, [pc, #20]	; (800d8f0 <std+0x3c>)
 800d8dc:	62a3      	str	r3, [r4, #40]	; 0x28
 800d8de:	4b05      	ldr	r3, [pc, #20]	; (800d8f4 <std+0x40>)
 800d8e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d8e2:	4b05      	ldr	r3, [pc, #20]	; (800d8f8 <std+0x44>)
 800d8e4:	6224      	str	r4, [r4, #32]
 800d8e6:	6323      	str	r3, [r4, #48]	; 0x30
 800d8e8:	bd10      	pop	{r4, pc}
 800d8ea:	bf00      	nop
 800d8ec:	0800ea01 	.word	0x0800ea01
 800d8f0:	0800ea23 	.word	0x0800ea23
 800d8f4:	0800ea5b 	.word	0x0800ea5b
 800d8f8:	0800ea7f 	.word	0x0800ea7f

0800d8fc <_cleanup_r>:
 800d8fc:	4901      	ldr	r1, [pc, #4]	; (800d904 <_cleanup_r+0x8>)
 800d8fe:	f000 b8c1 	b.w	800da84 <_fwalk_reent>
 800d902:	bf00      	nop
 800d904:	0800fa61 	.word	0x0800fa61

0800d908 <__sfmoreglue>:
 800d908:	b570      	push	{r4, r5, r6, lr}
 800d90a:	2268      	movs	r2, #104	; 0x68
 800d90c:	1e4d      	subs	r5, r1, #1
 800d90e:	4355      	muls	r5, r2
 800d910:	460e      	mov	r6, r1
 800d912:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d916:	f000 f933 	bl	800db80 <_malloc_r>
 800d91a:	4604      	mov	r4, r0
 800d91c:	b140      	cbz	r0, 800d930 <__sfmoreglue+0x28>
 800d91e:	2100      	movs	r1, #0
 800d920:	e9c0 1600 	strd	r1, r6, [r0]
 800d924:	300c      	adds	r0, #12
 800d926:	60a0      	str	r0, [r4, #8]
 800d928:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d92c:	f000 f8ff 	bl	800db2e <memset>
 800d930:	4620      	mov	r0, r4
 800d932:	bd70      	pop	{r4, r5, r6, pc}

0800d934 <__sfp_lock_acquire>:
 800d934:	4801      	ldr	r0, [pc, #4]	; (800d93c <__sfp_lock_acquire+0x8>)
 800d936:	f000 b8ea 	b.w	800db0e <__retarget_lock_acquire_recursive>
 800d93a:	bf00      	nop
 800d93c:	200056c1 	.word	0x200056c1

0800d940 <__sfp_lock_release>:
 800d940:	4801      	ldr	r0, [pc, #4]	; (800d948 <__sfp_lock_release+0x8>)
 800d942:	f000 b8e5 	b.w	800db10 <__retarget_lock_release_recursive>
 800d946:	bf00      	nop
 800d948:	200056c1 	.word	0x200056c1

0800d94c <__sinit_lock_acquire>:
 800d94c:	4801      	ldr	r0, [pc, #4]	; (800d954 <__sinit_lock_acquire+0x8>)
 800d94e:	f000 b8de 	b.w	800db0e <__retarget_lock_acquire_recursive>
 800d952:	bf00      	nop
 800d954:	200056c2 	.word	0x200056c2

0800d958 <__sinit_lock_release>:
 800d958:	4801      	ldr	r0, [pc, #4]	; (800d960 <__sinit_lock_release+0x8>)
 800d95a:	f000 b8d9 	b.w	800db10 <__retarget_lock_release_recursive>
 800d95e:	bf00      	nop
 800d960:	200056c2 	.word	0x200056c2

0800d964 <__sinit>:
 800d964:	b510      	push	{r4, lr}
 800d966:	4604      	mov	r4, r0
 800d968:	f7ff fff0 	bl	800d94c <__sinit_lock_acquire>
 800d96c:	69a3      	ldr	r3, [r4, #24]
 800d96e:	b11b      	cbz	r3, 800d978 <__sinit+0x14>
 800d970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d974:	f7ff bff0 	b.w	800d958 <__sinit_lock_release>
 800d978:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d97c:	6523      	str	r3, [r4, #80]	; 0x50
 800d97e:	4b13      	ldr	r3, [pc, #76]	; (800d9cc <__sinit+0x68>)
 800d980:	4a13      	ldr	r2, [pc, #76]	; (800d9d0 <__sinit+0x6c>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	62a2      	str	r2, [r4, #40]	; 0x28
 800d986:	42a3      	cmp	r3, r4
 800d988:	bf04      	itt	eq
 800d98a:	2301      	moveq	r3, #1
 800d98c:	61a3      	streq	r3, [r4, #24]
 800d98e:	4620      	mov	r0, r4
 800d990:	f000 f820 	bl	800d9d4 <__sfp>
 800d994:	6060      	str	r0, [r4, #4]
 800d996:	4620      	mov	r0, r4
 800d998:	f000 f81c 	bl	800d9d4 <__sfp>
 800d99c:	60a0      	str	r0, [r4, #8]
 800d99e:	4620      	mov	r0, r4
 800d9a0:	f000 f818 	bl	800d9d4 <__sfp>
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	60e0      	str	r0, [r4, #12]
 800d9a8:	2104      	movs	r1, #4
 800d9aa:	6860      	ldr	r0, [r4, #4]
 800d9ac:	f7ff ff82 	bl	800d8b4 <std>
 800d9b0:	68a0      	ldr	r0, [r4, #8]
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	2109      	movs	r1, #9
 800d9b6:	f7ff ff7d 	bl	800d8b4 <std>
 800d9ba:	68e0      	ldr	r0, [r4, #12]
 800d9bc:	2202      	movs	r2, #2
 800d9be:	2112      	movs	r1, #18
 800d9c0:	f7ff ff78 	bl	800d8b4 <std>
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	61a3      	str	r3, [r4, #24]
 800d9c8:	e7d2      	b.n	800d970 <__sinit+0xc>
 800d9ca:	bf00      	nop
 800d9cc:	0801098c 	.word	0x0801098c
 800d9d0:	0800d8fd 	.word	0x0800d8fd

0800d9d4 <__sfp>:
 800d9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9d6:	4607      	mov	r7, r0
 800d9d8:	f7ff ffac 	bl	800d934 <__sfp_lock_acquire>
 800d9dc:	4b1e      	ldr	r3, [pc, #120]	; (800da58 <__sfp+0x84>)
 800d9de:	681e      	ldr	r6, [r3, #0]
 800d9e0:	69b3      	ldr	r3, [r6, #24]
 800d9e2:	b913      	cbnz	r3, 800d9ea <__sfp+0x16>
 800d9e4:	4630      	mov	r0, r6
 800d9e6:	f7ff ffbd 	bl	800d964 <__sinit>
 800d9ea:	3648      	adds	r6, #72	; 0x48
 800d9ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d9f0:	3b01      	subs	r3, #1
 800d9f2:	d503      	bpl.n	800d9fc <__sfp+0x28>
 800d9f4:	6833      	ldr	r3, [r6, #0]
 800d9f6:	b30b      	cbz	r3, 800da3c <__sfp+0x68>
 800d9f8:	6836      	ldr	r6, [r6, #0]
 800d9fa:	e7f7      	b.n	800d9ec <__sfp+0x18>
 800d9fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800da00:	b9d5      	cbnz	r5, 800da38 <__sfp+0x64>
 800da02:	4b16      	ldr	r3, [pc, #88]	; (800da5c <__sfp+0x88>)
 800da04:	60e3      	str	r3, [r4, #12]
 800da06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800da0a:	6665      	str	r5, [r4, #100]	; 0x64
 800da0c:	f000 f87e 	bl	800db0c <__retarget_lock_init_recursive>
 800da10:	f7ff ff96 	bl	800d940 <__sfp_lock_release>
 800da14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800da18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800da1c:	6025      	str	r5, [r4, #0]
 800da1e:	61a5      	str	r5, [r4, #24]
 800da20:	2208      	movs	r2, #8
 800da22:	4629      	mov	r1, r5
 800da24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800da28:	f000 f881 	bl	800db2e <memset>
 800da2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800da30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800da34:	4620      	mov	r0, r4
 800da36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da38:	3468      	adds	r4, #104	; 0x68
 800da3a:	e7d9      	b.n	800d9f0 <__sfp+0x1c>
 800da3c:	2104      	movs	r1, #4
 800da3e:	4638      	mov	r0, r7
 800da40:	f7ff ff62 	bl	800d908 <__sfmoreglue>
 800da44:	4604      	mov	r4, r0
 800da46:	6030      	str	r0, [r6, #0]
 800da48:	2800      	cmp	r0, #0
 800da4a:	d1d5      	bne.n	800d9f8 <__sfp+0x24>
 800da4c:	f7ff ff78 	bl	800d940 <__sfp_lock_release>
 800da50:	230c      	movs	r3, #12
 800da52:	603b      	str	r3, [r7, #0]
 800da54:	e7ee      	b.n	800da34 <__sfp+0x60>
 800da56:	bf00      	nop
 800da58:	0801098c 	.word	0x0801098c
 800da5c:	ffff0001 	.word	0xffff0001

0800da60 <fiprintf>:
 800da60:	b40e      	push	{r1, r2, r3}
 800da62:	b503      	push	{r0, r1, lr}
 800da64:	4601      	mov	r1, r0
 800da66:	ab03      	add	r3, sp, #12
 800da68:	4805      	ldr	r0, [pc, #20]	; (800da80 <fiprintf+0x20>)
 800da6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800da6e:	6800      	ldr	r0, [r0, #0]
 800da70:	9301      	str	r3, [sp, #4]
 800da72:	f000 f923 	bl	800dcbc <_vfiprintf_r>
 800da76:	b002      	add	sp, #8
 800da78:	f85d eb04 	ldr.w	lr, [sp], #4
 800da7c:	b003      	add	sp, #12
 800da7e:	4770      	bx	lr
 800da80:	20000018 	.word	0x20000018

0800da84 <_fwalk_reent>:
 800da84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da88:	4606      	mov	r6, r0
 800da8a:	4688      	mov	r8, r1
 800da8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800da90:	2700      	movs	r7, #0
 800da92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800da96:	f1b9 0901 	subs.w	r9, r9, #1
 800da9a:	d505      	bpl.n	800daa8 <_fwalk_reent+0x24>
 800da9c:	6824      	ldr	r4, [r4, #0]
 800da9e:	2c00      	cmp	r4, #0
 800daa0:	d1f7      	bne.n	800da92 <_fwalk_reent+0xe>
 800daa2:	4638      	mov	r0, r7
 800daa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daa8:	89ab      	ldrh	r3, [r5, #12]
 800daaa:	2b01      	cmp	r3, #1
 800daac:	d907      	bls.n	800dabe <_fwalk_reent+0x3a>
 800daae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dab2:	3301      	adds	r3, #1
 800dab4:	d003      	beq.n	800dabe <_fwalk_reent+0x3a>
 800dab6:	4629      	mov	r1, r5
 800dab8:	4630      	mov	r0, r6
 800daba:	47c0      	blx	r8
 800dabc:	4307      	orrs	r7, r0
 800dabe:	3568      	adds	r5, #104	; 0x68
 800dac0:	e7e9      	b.n	800da96 <_fwalk_reent+0x12>
	...

0800dac4 <__libc_init_array>:
 800dac4:	b570      	push	{r4, r5, r6, lr}
 800dac6:	4d0d      	ldr	r5, [pc, #52]	; (800dafc <__libc_init_array+0x38>)
 800dac8:	4c0d      	ldr	r4, [pc, #52]	; (800db00 <__libc_init_array+0x3c>)
 800daca:	1b64      	subs	r4, r4, r5
 800dacc:	10a4      	asrs	r4, r4, #2
 800dace:	2600      	movs	r6, #0
 800dad0:	42a6      	cmp	r6, r4
 800dad2:	d109      	bne.n	800dae8 <__libc_init_array+0x24>
 800dad4:	4d0b      	ldr	r5, [pc, #44]	; (800db04 <__libc_init_array+0x40>)
 800dad6:	4c0c      	ldr	r4, [pc, #48]	; (800db08 <__libc_init_array+0x44>)
 800dad8:	f002 fd0c 	bl	80104f4 <_init>
 800dadc:	1b64      	subs	r4, r4, r5
 800dade:	10a4      	asrs	r4, r4, #2
 800dae0:	2600      	movs	r6, #0
 800dae2:	42a6      	cmp	r6, r4
 800dae4:	d105      	bne.n	800daf2 <__libc_init_array+0x2e>
 800dae6:	bd70      	pop	{r4, r5, r6, pc}
 800dae8:	f855 3b04 	ldr.w	r3, [r5], #4
 800daec:	4798      	blx	r3
 800daee:	3601      	adds	r6, #1
 800daf0:	e7ee      	b.n	800dad0 <__libc_init_array+0xc>
 800daf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800daf6:	4798      	blx	r3
 800daf8:	3601      	adds	r6, #1
 800dafa:	e7f2      	b.n	800dae2 <__libc_init_array+0x1e>
 800dafc:	08010cd8 	.word	0x08010cd8
 800db00:	08010cd8 	.word	0x08010cd8
 800db04:	08010cd8 	.word	0x08010cd8
 800db08:	08010cdc 	.word	0x08010cdc

0800db0c <__retarget_lock_init_recursive>:
 800db0c:	4770      	bx	lr

0800db0e <__retarget_lock_acquire_recursive>:
 800db0e:	4770      	bx	lr

0800db10 <__retarget_lock_release_recursive>:
 800db10:	4770      	bx	lr

0800db12 <memcpy>:
 800db12:	440a      	add	r2, r1
 800db14:	4291      	cmp	r1, r2
 800db16:	f100 33ff 	add.w	r3, r0, #4294967295
 800db1a:	d100      	bne.n	800db1e <memcpy+0xc>
 800db1c:	4770      	bx	lr
 800db1e:	b510      	push	{r4, lr}
 800db20:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db24:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db28:	4291      	cmp	r1, r2
 800db2a:	d1f9      	bne.n	800db20 <memcpy+0xe>
 800db2c:	bd10      	pop	{r4, pc}

0800db2e <memset>:
 800db2e:	4402      	add	r2, r0
 800db30:	4603      	mov	r3, r0
 800db32:	4293      	cmp	r3, r2
 800db34:	d100      	bne.n	800db38 <memset+0xa>
 800db36:	4770      	bx	lr
 800db38:	f803 1b01 	strb.w	r1, [r3], #1
 800db3c:	e7f9      	b.n	800db32 <memset+0x4>
	...

0800db40 <sbrk_aligned>:
 800db40:	b570      	push	{r4, r5, r6, lr}
 800db42:	4e0e      	ldr	r6, [pc, #56]	; (800db7c <sbrk_aligned+0x3c>)
 800db44:	460c      	mov	r4, r1
 800db46:	6831      	ldr	r1, [r6, #0]
 800db48:	4605      	mov	r5, r0
 800db4a:	b911      	cbnz	r1, 800db52 <sbrk_aligned+0x12>
 800db4c:	f000 ff48 	bl	800e9e0 <_sbrk_r>
 800db50:	6030      	str	r0, [r6, #0]
 800db52:	4621      	mov	r1, r4
 800db54:	4628      	mov	r0, r5
 800db56:	f000 ff43 	bl	800e9e0 <_sbrk_r>
 800db5a:	1c43      	adds	r3, r0, #1
 800db5c:	d00a      	beq.n	800db74 <sbrk_aligned+0x34>
 800db5e:	1cc4      	adds	r4, r0, #3
 800db60:	f024 0403 	bic.w	r4, r4, #3
 800db64:	42a0      	cmp	r0, r4
 800db66:	d007      	beq.n	800db78 <sbrk_aligned+0x38>
 800db68:	1a21      	subs	r1, r4, r0
 800db6a:	4628      	mov	r0, r5
 800db6c:	f000 ff38 	bl	800e9e0 <_sbrk_r>
 800db70:	3001      	adds	r0, #1
 800db72:	d101      	bne.n	800db78 <sbrk_aligned+0x38>
 800db74:	f04f 34ff 	mov.w	r4, #4294967295
 800db78:	4620      	mov	r0, r4
 800db7a:	bd70      	pop	{r4, r5, r6, pc}
 800db7c:	200056c8 	.word	0x200056c8

0800db80 <_malloc_r>:
 800db80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db84:	1ccd      	adds	r5, r1, #3
 800db86:	f025 0503 	bic.w	r5, r5, #3
 800db8a:	3508      	adds	r5, #8
 800db8c:	2d0c      	cmp	r5, #12
 800db8e:	bf38      	it	cc
 800db90:	250c      	movcc	r5, #12
 800db92:	2d00      	cmp	r5, #0
 800db94:	4607      	mov	r7, r0
 800db96:	db01      	blt.n	800db9c <_malloc_r+0x1c>
 800db98:	42a9      	cmp	r1, r5
 800db9a:	d905      	bls.n	800dba8 <_malloc_r+0x28>
 800db9c:	230c      	movs	r3, #12
 800db9e:	603b      	str	r3, [r7, #0]
 800dba0:	2600      	movs	r6, #0
 800dba2:	4630      	mov	r0, r6
 800dba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dba8:	4e2e      	ldr	r6, [pc, #184]	; (800dc64 <_malloc_r+0xe4>)
 800dbaa:	f002 f819 	bl	800fbe0 <__malloc_lock>
 800dbae:	6833      	ldr	r3, [r6, #0]
 800dbb0:	461c      	mov	r4, r3
 800dbb2:	bb34      	cbnz	r4, 800dc02 <_malloc_r+0x82>
 800dbb4:	4629      	mov	r1, r5
 800dbb6:	4638      	mov	r0, r7
 800dbb8:	f7ff ffc2 	bl	800db40 <sbrk_aligned>
 800dbbc:	1c43      	adds	r3, r0, #1
 800dbbe:	4604      	mov	r4, r0
 800dbc0:	d14d      	bne.n	800dc5e <_malloc_r+0xde>
 800dbc2:	6834      	ldr	r4, [r6, #0]
 800dbc4:	4626      	mov	r6, r4
 800dbc6:	2e00      	cmp	r6, #0
 800dbc8:	d140      	bne.n	800dc4c <_malloc_r+0xcc>
 800dbca:	6823      	ldr	r3, [r4, #0]
 800dbcc:	4631      	mov	r1, r6
 800dbce:	4638      	mov	r0, r7
 800dbd0:	eb04 0803 	add.w	r8, r4, r3
 800dbd4:	f000 ff04 	bl	800e9e0 <_sbrk_r>
 800dbd8:	4580      	cmp	r8, r0
 800dbda:	d13a      	bne.n	800dc52 <_malloc_r+0xd2>
 800dbdc:	6821      	ldr	r1, [r4, #0]
 800dbde:	3503      	adds	r5, #3
 800dbe0:	1a6d      	subs	r5, r5, r1
 800dbe2:	f025 0503 	bic.w	r5, r5, #3
 800dbe6:	3508      	adds	r5, #8
 800dbe8:	2d0c      	cmp	r5, #12
 800dbea:	bf38      	it	cc
 800dbec:	250c      	movcc	r5, #12
 800dbee:	4629      	mov	r1, r5
 800dbf0:	4638      	mov	r0, r7
 800dbf2:	f7ff ffa5 	bl	800db40 <sbrk_aligned>
 800dbf6:	3001      	adds	r0, #1
 800dbf8:	d02b      	beq.n	800dc52 <_malloc_r+0xd2>
 800dbfa:	6823      	ldr	r3, [r4, #0]
 800dbfc:	442b      	add	r3, r5
 800dbfe:	6023      	str	r3, [r4, #0]
 800dc00:	e00e      	b.n	800dc20 <_malloc_r+0xa0>
 800dc02:	6822      	ldr	r2, [r4, #0]
 800dc04:	1b52      	subs	r2, r2, r5
 800dc06:	d41e      	bmi.n	800dc46 <_malloc_r+0xc6>
 800dc08:	2a0b      	cmp	r2, #11
 800dc0a:	d916      	bls.n	800dc3a <_malloc_r+0xba>
 800dc0c:	1961      	adds	r1, r4, r5
 800dc0e:	42a3      	cmp	r3, r4
 800dc10:	6025      	str	r5, [r4, #0]
 800dc12:	bf18      	it	ne
 800dc14:	6059      	strne	r1, [r3, #4]
 800dc16:	6863      	ldr	r3, [r4, #4]
 800dc18:	bf08      	it	eq
 800dc1a:	6031      	streq	r1, [r6, #0]
 800dc1c:	5162      	str	r2, [r4, r5]
 800dc1e:	604b      	str	r3, [r1, #4]
 800dc20:	4638      	mov	r0, r7
 800dc22:	f104 060b 	add.w	r6, r4, #11
 800dc26:	f001 ffe1 	bl	800fbec <__malloc_unlock>
 800dc2a:	f026 0607 	bic.w	r6, r6, #7
 800dc2e:	1d23      	adds	r3, r4, #4
 800dc30:	1af2      	subs	r2, r6, r3
 800dc32:	d0b6      	beq.n	800dba2 <_malloc_r+0x22>
 800dc34:	1b9b      	subs	r3, r3, r6
 800dc36:	50a3      	str	r3, [r4, r2]
 800dc38:	e7b3      	b.n	800dba2 <_malloc_r+0x22>
 800dc3a:	6862      	ldr	r2, [r4, #4]
 800dc3c:	42a3      	cmp	r3, r4
 800dc3e:	bf0c      	ite	eq
 800dc40:	6032      	streq	r2, [r6, #0]
 800dc42:	605a      	strne	r2, [r3, #4]
 800dc44:	e7ec      	b.n	800dc20 <_malloc_r+0xa0>
 800dc46:	4623      	mov	r3, r4
 800dc48:	6864      	ldr	r4, [r4, #4]
 800dc4a:	e7b2      	b.n	800dbb2 <_malloc_r+0x32>
 800dc4c:	4634      	mov	r4, r6
 800dc4e:	6876      	ldr	r6, [r6, #4]
 800dc50:	e7b9      	b.n	800dbc6 <_malloc_r+0x46>
 800dc52:	230c      	movs	r3, #12
 800dc54:	603b      	str	r3, [r7, #0]
 800dc56:	4638      	mov	r0, r7
 800dc58:	f001 ffc8 	bl	800fbec <__malloc_unlock>
 800dc5c:	e7a1      	b.n	800dba2 <_malloc_r+0x22>
 800dc5e:	6025      	str	r5, [r4, #0]
 800dc60:	e7de      	b.n	800dc20 <_malloc_r+0xa0>
 800dc62:	bf00      	nop
 800dc64:	200056c4 	.word	0x200056c4

0800dc68 <__sfputc_r>:
 800dc68:	6893      	ldr	r3, [r2, #8]
 800dc6a:	3b01      	subs	r3, #1
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	b410      	push	{r4}
 800dc70:	6093      	str	r3, [r2, #8]
 800dc72:	da08      	bge.n	800dc86 <__sfputc_r+0x1e>
 800dc74:	6994      	ldr	r4, [r2, #24]
 800dc76:	42a3      	cmp	r3, r4
 800dc78:	db01      	blt.n	800dc7e <__sfputc_r+0x16>
 800dc7a:	290a      	cmp	r1, #10
 800dc7c:	d103      	bne.n	800dc86 <__sfputc_r+0x1e>
 800dc7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc82:	f000 bf01 	b.w	800ea88 <__swbuf_r>
 800dc86:	6813      	ldr	r3, [r2, #0]
 800dc88:	1c58      	adds	r0, r3, #1
 800dc8a:	6010      	str	r0, [r2, #0]
 800dc8c:	7019      	strb	r1, [r3, #0]
 800dc8e:	4608      	mov	r0, r1
 800dc90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc94:	4770      	bx	lr

0800dc96 <__sfputs_r>:
 800dc96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc98:	4606      	mov	r6, r0
 800dc9a:	460f      	mov	r7, r1
 800dc9c:	4614      	mov	r4, r2
 800dc9e:	18d5      	adds	r5, r2, r3
 800dca0:	42ac      	cmp	r4, r5
 800dca2:	d101      	bne.n	800dca8 <__sfputs_r+0x12>
 800dca4:	2000      	movs	r0, #0
 800dca6:	e007      	b.n	800dcb8 <__sfputs_r+0x22>
 800dca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcac:	463a      	mov	r2, r7
 800dcae:	4630      	mov	r0, r6
 800dcb0:	f7ff ffda 	bl	800dc68 <__sfputc_r>
 800dcb4:	1c43      	adds	r3, r0, #1
 800dcb6:	d1f3      	bne.n	800dca0 <__sfputs_r+0xa>
 800dcb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dcbc <_vfiprintf_r>:
 800dcbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc0:	460d      	mov	r5, r1
 800dcc2:	b09d      	sub	sp, #116	; 0x74
 800dcc4:	4614      	mov	r4, r2
 800dcc6:	4698      	mov	r8, r3
 800dcc8:	4606      	mov	r6, r0
 800dcca:	b118      	cbz	r0, 800dcd4 <_vfiprintf_r+0x18>
 800dccc:	6983      	ldr	r3, [r0, #24]
 800dcce:	b90b      	cbnz	r3, 800dcd4 <_vfiprintf_r+0x18>
 800dcd0:	f7ff fe48 	bl	800d964 <__sinit>
 800dcd4:	4b89      	ldr	r3, [pc, #548]	; (800defc <_vfiprintf_r+0x240>)
 800dcd6:	429d      	cmp	r5, r3
 800dcd8:	d11b      	bne.n	800dd12 <_vfiprintf_r+0x56>
 800dcda:	6875      	ldr	r5, [r6, #4]
 800dcdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcde:	07d9      	lsls	r1, r3, #31
 800dce0:	d405      	bmi.n	800dcee <_vfiprintf_r+0x32>
 800dce2:	89ab      	ldrh	r3, [r5, #12]
 800dce4:	059a      	lsls	r2, r3, #22
 800dce6:	d402      	bmi.n	800dcee <_vfiprintf_r+0x32>
 800dce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcea:	f7ff ff10 	bl	800db0e <__retarget_lock_acquire_recursive>
 800dcee:	89ab      	ldrh	r3, [r5, #12]
 800dcf0:	071b      	lsls	r3, r3, #28
 800dcf2:	d501      	bpl.n	800dcf8 <_vfiprintf_r+0x3c>
 800dcf4:	692b      	ldr	r3, [r5, #16]
 800dcf6:	b9eb      	cbnz	r3, 800dd34 <_vfiprintf_r+0x78>
 800dcf8:	4629      	mov	r1, r5
 800dcfa:	4630      	mov	r0, r6
 800dcfc:	f000 ff28 	bl	800eb50 <__swsetup_r>
 800dd00:	b1c0      	cbz	r0, 800dd34 <_vfiprintf_r+0x78>
 800dd02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd04:	07dc      	lsls	r4, r3, #31
 800dd06:	d50e      	bpl.n	800dd26 <_vfiprintf_r+0x6a>
 800dd08:	f04f 30ff 	mov.w	r0, #4294967295
 800dd0c:	b01d      	add	sp, #116	; 0x74
 800dd0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd12:	4b7b      	ldr	r3, [pc, #492]	; (800df00 <_vfiprintf_r+0x244>)
 800dd14:	429d      	cmp	r5, r3
 800dd16:	d101      	bne.n	800dd1c <_vfiprintf_r+0x60>
 800dd18:	68b5      	ldr	r5, [r6, #8]
 800dd1a:	e7df      	b.n	800dcdc <_vfiprintf_r+0x20>
 800dd1c:	4b79      	ldr	r3, [pc, #484]	; (800df04 <_vfiprintf_r+0x248>)
 800dd1e:	429d      	cmp	r5, r3
 800dd20:	bf08      	it	eq
 800dd22:	68f5      	ldreq	r5, [r6, #12]
 800dd24:	e7da      	b.n	800dcdc <_vfiprintf_r+0x20>
 800dd26:	89ab      	ldrh	r3, [r5, #12]
 800dd28:	0598      	lsls	r0, r3, #22
 800dd2a:	d4ed      	bmi.n	800dd08 <_vfiprintf_r+0x4c>
 800dd2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd2e:	f7ff feef 	bl	800db10 <__retarget_lock_release_recursive>
 800dd32:	e7e9      	b.n	800dd08 <_vfiprintf_r+0x4c>
 800dd34:	2300      	movs	r3, #0
 800dd36:	9309      	str	r3, [sp, #36]	; 0x24
 800dd38:	2320      	movs	r3, #32
 800dd3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd42:	2330      	movs	r3, #48	; 0x30
 800dd44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800df08 <_vfiprintf_r+0x24c>
 800dd48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd4c:	f04f 0901 	mov.w	r9, #1
 800dd50:	4623      	mov	r3, r4
 800dd52:	469a      	mov	sl, r3
 800dd54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd58:	b10a      	cbz	r2, 800dd5e <_vfiprintf_r+0xa2>
 800dd5a:	2a25      	cmp	r2, #37	; 0x25
 800dd5c:	d1f9      	bne.n	800dd52 <_vfiprintf_r+0x96>
 800dd5e:	ebba 0b04 	subs.w	fp, sl, r4
 800dd62:	d00b      	beq.n	800dd7c <_vfiprintf_r+0xc0>
 800dd64:	465b      	mov	r3, fp
 800dd66:	4622      	mov	r2, r4
 800dd68:	4629      	mov	r1, r5
 800dd6a:	4630      	mov	r0, r6
 800dd6c:	f7ff ff93 	bl	800dc96 <__sfputs_r>
 800dd70:	3001      	adds	r0, #1
 800dd72:	f000 80aa 	beq.w	800deca <_vfiprintf_r+0x20e>
 800dd76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd78:	445a      	add	r2, fp
 800dd7a:	9209      	str	r2, [sp, #36]	; 0x24
 800dd7c:	f89a 3000 	ldrb.w	r3, [sl]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	f000 80a2 	beq.w	800deca <_vfiprintf_r+0x20e>
 800dd86:	2300      	movs	r3, #0
 800dd88:	f04f 32ff 	mov.w	r2, #4294967295
 800dd8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd90:	f10a 0a01 	add.w	sl, sl, #1
 800dd94:	9304      	str	r3, [sp, #16]
 800dd96:	9307      	str	r3, [sp, #28]
 800dd98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd9c:	931a      	str	r3, [sp, #104]	; 0x68
 800dd9e:	4654      	mov	r4, sl
 800dda0:	2205      	movs	r2, #5
 800dda2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dda6:	4858      	ldr	r0, [pc, #352]	; (800df08 <_vfiprintf_r+0x24c>)
 800dda8:	f7f2 fa1a 	bl	80001e0 <memchr>
 800ddac:	9a04      	ldr	r2, [sp, #16]
 800ddae:	b9d8      	cbnz	r0, 800dde8 <_vfiprintf_r+0x12c>
 800ddb0:	06d1      	lsls	r1, r2, #27
 800ddb2:	bf44      	itt	mi
 800ddb4:	2320      	movmi	r3, #32
 800ddb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddba:	0713      	lsls	r3, r2, #28
 800ddbc:	bf44      	itt	mi
 800ddbe:	232b      	movmi	r3, #43	; 0x2b
 800ddc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddc4:	f89a 3000 	ldrb.w	r3, [sl]
 800ddc8:	2b2a      	cmp	r3, #42	; 0x2a
 800ddca:	d015      	beq.n	800ddf8 <_vfiprintf_r+0x13c>
 800ddcc:	9a07      	ldr	r2, [sp, #28]
 800ddce:	4654      	mov	r4, sl
 800ddd0:	2000      	movs	r0, #0
 800ddd2:	f04f 0c0a 	mov.w	ip, #10
 800ddd6:	4621      	mov	r1, r4
 800ddd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dddc:	3b30      	subs	r3, #48	; 0x30
 800ddde:	2b09      	cmp	r3, #9
 800dde0:	d94e      	bls.n	800de80 <_vfiprintf_r+0x1c4>
 800dde2:	b1b0      	cbz	r0, 800de12 <_vfiprintf_r+0x156>
 800dde4:	9207      	str	r2, [sp, #28]
 800dde6:	e014      	b.n	800de12 <_vfiprintf_r+0x156>
 800dde8:	eba0 0308 	sub.w	r3, r0, r8
 800ddec:	fa09 f303 	lsl.w	r3, r9, r3
 800ddf0:	4313      	orrs	r3, r2
 800ddf2:	9304      	str	r3, [sp, #16]
 800ddf4:	46a2      	mov	sl, r4
 800ddf6:	e7d2      	b.n	800dd9e <_vfiprintf_r+0xe2>
 800ddf8:	9b03      	ldr	r3, [sp, #12]
 800ddfa:	1d19      	adds	r1, r3, #4
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	9103      	str	r1, [sp, #12]
 800de00:	2b00      	cmp	r3, #0
 800de02:	bfbb      	ittet	lt
 800de04:	425b      	neglt	r3, r3
 800de06:	f042 0202 	orrlt.w	r2, r2, #2
 800de0a:	9307      	strge	r3, [sp, #28]
 800de0c:	9307      	strlt	r3, [sp, #28]
 800de0e:	bfb8      	it	lt
 800de10:	9204      	strlt	r2, [sp, #16]
 800de12:	7823      	ldrb	r3, [r4, #0]
 800de14:	2b2e      	cmp	r3, #46	; 0x2e
 800de16:	d10c      	bne.n	800de32 <_vfiprintf_r+0x176>
 800de18:	7863      	ldrb	r3, [r4, #1]
 800de1a:	2b2a      	cmp	r3, #42	; 0x2a
 800de1c:	d135      	bne.n	800de8a <_vfiprintf_r+0x1ce>
 800de1e:	9b03      	ldr	r3, [sp, #12]
 800de20:	1d1a      	adds	r2, r3, #4
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	9203      	str	r2, [sp, #12]
 800de26:	2b00      	cmp	r3, #0
 800de28:	bfb8      	it	lt
 800de2a:	f04f 33ff 	movlt.w	r3, #4294967295
 800de2e:	3402      	adds	r4, #2
 800de30:	9305      	str	r3, [sp, #20]
 800de32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800df18 <_vfiprintf_r+0x25c>
 800de36:	7821      	ldrb	r1, [r4, #0]
 800de38:	2203      	movs	r2, #3
 800de3a:	4650      	mov	r0, sl
 800de3c:	f7f2 f9d0 	bl	80001e0 <memchr>
 800de40:	b140      	cbz	r0, 800de54 <_vfiprintf_r+0x198>
 800de42:	2340      	movs	r3, #64	; 0x40
 800de44:	eba0 000a 	sub.w	r0, r0, sl
 800de48:	fa03 f000 	lsl.w	r0, r3, r0
 800de4c:	9b04      	ldr	r3, [sp, #16]
 800de4e:	4303      	orrs	r3, r0
 800de50:	3401      	adds	r4, #1
 800de52:	9304      	str	r3, [sp, #16]
 800de54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de58:	482c      	ldr	r0, [pc, #176]	; (800df0c <_vfiprintf_r+0x250>)
 800de5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de5e:	2206      	movs	r2, #6
 800de60:	f7f2 f9be 	bl	80001e0 <memchr>
 800de64:	2800      	cmp	r0, #0
 800de66:	d03f      	beq.n	800dee8 <_vfiprintf_r+0x22c>
 800de68:	4b29      	ldr	r3, [pc, #164]	; (800df10 <_vfiprintf_r+0x254>)
 800de6a:	bb1b      	cbnz	r3, 800deb4 <_vfiprintf_r+0x1f8>
 800de6c:	9b03      	ldr	r3, [sp, #12]
 800de6e:	3307      	adds	r3, #7
 800de70:	f023 0307 	bic.w	r3, r3, #7
 800de74:	3308      	adds	r3, #8
 800de76:	9303      	str	r3, [sp, #12]
 800de78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de7a:	443b      	add	r3, r7
 800de7c:	9309      	str	r3, [sp, #36]	; 0x24
 800de7e:	e767      	b.n	800dd50 <_vfiprintf_r+0x94>
 800de80:	fb0c 3202 	mla	r2, ip, r2, r3
 800de84:	460c      	mov	r4, r1
 800de86:	2001      	movs	r0, #1
 800de88:	e7a5      	b.n	800ddd6 <_vfiprintf_r+0x11a>
 800de8a:	2300      	movs	r3, #0
 800de8c:	3401      	adds	r4, #1
 800de8e:	9305      	str	r3, [sp, #20]
 800de90:	4619      	mov	r1, r3
 800de92:	f04f 0c0a 	mov.w	ip, #10
 800de96:	4620      	mov	r0, r4
 800de98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de9c:	3a30      	subs	r2, #48	; 0x30
 800de9e:	2a09      	cmp	r2, #9
 800dea0:	d903      	bls.n	800deaa <_vfiprintf_r+0x1ee>
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d0c5      	beq.n	800de32 <_vfiprintf_r+0x176>
 800dea6:	9105      	str	r1, [sp, #20]
 800dea8:	e7c3      	b.n	800de32 <_vfiprintf_r+0x176>
 800deaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800deae:	4604      	mov	r4, r0
 800deb0:	2301      	movs	r3, #1
 800deb2:	e7f0      	b.n	800de96 <_vfiprintf_r+0x1da>
 800deb4:	ab03      	add	r3, sp, #12
 800deb6:	9300      	str	r3, [sp, #0]
 800deb8:	462a      	mov	r2, r5
 800deba:	4b16      	ldr	r3, [pc, #88]	; (800df14 <_vfiprintf_r+0x258>)
 800debc:	a904      	add	r1, sp, #16
 800debe:	4630      	mov	r0, r6
 800dec0:	f000 f8cc 	bl	800e05c <_printf_float>
 800dec4:	4607      	mov	r7, r0
 800dec6:	1c78      	adds	r0, r7, #1
 800dec8:	d1d6      	bne.n	800de78 <_vfiprintf_r+0x1bc>
 800deca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800decc:	07d9      	lsls	r1, r3, #31
 800dece:	d405      	bmi.n	800dedc <_vfiprintf_r+0x220>
 800ded0:	89ab      	ldrh	r3, [r5, #12]
 800ded2:	059a      	lsls	r2, r3, #22
 800ded4:	d402      	bmi.n	800dedc <_vfiprintf_r+0x220>
 800ded6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ded8:	f7ff fe1a 	bl	800db10 <__retarget_lock_release_recursive>
 800dedc:	89ab      	ldrh	r3, [r5, #12]
 800dede:	065b      	lsls	r3, r3, #25
 800dee0:	f53f af12 	bmi.w	800dd08 <_vfiprintf_r+0x4c>
 800dee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dee6:	e711      	b.n	800dd0c <_vfiprintf_r+0x50>
 800dee8:	ab03      	add	r3, sp, #12
 800deea:	9300      	str	r3, [sp, #0]
 800deec:	462a      	mov	r2, r5
 800deee:	4b09      	ldr	r3, [pc, #36]	; (800df14 <_vfiprintf_r+0x258>)
 800def0:	a904      	add	r1, sp, #16
 800def2:	4630      	mov	r0, r6
 800def4:	f000 fb56 	bl	800e5a4 <_printf_i>
 800def8:	e7e4      	b.n	800dec4 <_vfiprintf_r+0x208>
 800defa:	bf00      	nop
 800defc:	0801094c 	.word	0x0801094c
 800df00:	0801096c 	.word	0x0801096c
 800df04:	0801092c 	.word	0x0801092c
 800df08:	08010990 	.word	0x08010990
 800df0c:	0801099a 	.word	0x0801099a
 800df10:	0800e05d 	.word	0x0800e05d
 800df14:	0800dc97 	.word	0x0800dc97
 800df18:	08010996 	.word	0x08010996

0800df1c <__cvt>:
 800df1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df20:	ec55 4b10 	vmov	r4, r5, d0
 800df24:	2d00      	cmp	r5, #0
 800df26:	460e      	mov	r6, r1
 800df28:	4619      	mov	r1, r3
 800df2a:	462b      	mov	r3, r5
 800df2c:	bfbb      	ittet	lt
 800df2e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800df32:	461d      	movlt	r5, r3
 800df34:	2300      	movge	r3, #0
 800df36:	232d      	movlt	r3, #45	; 0x2d
 800df38:	700b      	strb	r3, [r1, #0]
 800df3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df3c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800df40:	4691      	mov	r9, r2
 800df42:	f023 0820 	bic.w	r8, r3, #32
 800df46:	bfbc      	itt	lt
 800df48:	4622      	movlt	r2, r4
 800df4a:	4614      	movlt	r4, r2
 800df4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800df50:	d005      	beq.n	800df5e <__cvt+0x42>
 800df52:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800df56:	d100      	bne.n	800df5a <__cvt+0x3e>
 800df58:	3601      	adds	r6, #1
 800df5a:	2102      	movs	r1, #2
 800df5c:	e000      	b.n	800df60 <__cvt+0x44>
 800df5e:	2103      	movs	r1, #3
 800df60:	ab03      	add	r3, sp, #12
 800df62:	9301      	str	r3, [sp, #4]
 800df64:	ab02      	add	r3, sp, #8
 800df66:	9300      	str	r3, [sp, #0]
 800df68:	ec45 4b10 	vmov	d0, r4, r5
 800df6c:	4653      	mov	r3, sl
 800df6e:	4632      	mov	r2, r6
 800df70:	f000 ff02 	bl	800ed78 <_dtoa_r>
 800df74:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800df78:	4607      	mov	r7, r0
 800df7a:	d102      	bne.n	800df82 <__cvt+0x66>
 800df7c:	f019 0f01 	tst.w	r9, #1
 800df80:	d022      	beq.n	800dfc8 <__cvt+0xac>
 800df82:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800df86:	eb07 0906 	add.w	r9, r7, r6
 800df8a:	d110      	bne.n	800dfae <__cvt+0x92>
 800df8c:	783b      	ldrb	r3, [r7, #0]
 800df8e:	2b30      	cmp	r3, #48	; 0x30
 800df90:	d10a      	bne.n	800dfa8 <__cvt+0x8c>
 800df92:	2200      	movs	r2, #0
 800df94:	2300      	movs	r3, #0
 800df96:	4620      	mov	r0, r4
 800df98:	4629      	mov	r1, r5
 800df9a:	f7f2 fd95 	bl	8000ac8 <__aeabi_dcmpeq>
 800df9e:	b918      	cbnz	r0, 800dfa8 <__cvt+0x8c>
 800dfa0:	f1c6 0601 	rsb	r6, r6, #1
 800dfa4:	f8ca 6000 	str.w	r6, [sl]
 800dfa8:	f8da 3000 	ldr.w	r3, [sl]
 800dfac:	4499      	add	r9, r3
 800dfae:	2200      	movs	r2, #0
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	4620      	mov	r0, r4
 800dfb4:	4629      	mov	r1, r5
 800dfb6:	f7f2 fd87 	bl	8000ac8 <__aeabi_dcmpeq>
 800dfba:	b108      	cbz	r0, 800dfc0 <__cvt+0xa4>
 800dfbc:	f8cd 900c 	str.w	r9, [sp, #12]
 800dfc0:	2230      	movs	r2, #48	; 0x30
 800dfc2:	9b03      	ldr	r3, [sp, #12]
 800dfc4:	454b      	cmp	r3, r9
 800dfc6:	d307      	bcc.n	800dfd8 <__cvt+0xbc>
 800dfc8:	9b03      	ldr	r3, [sp, #12]
 800dfca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dfcc:	1bdb      	subs	r3, r3, r7
 800dfce:	4638      	mov	r0, r7
 800dfd0:	6013      	str	r3, [r2, #0]
 800dfd2:	b004      	add	sp, #16
 800dfd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfd8:	1c59      	adds	r1, r3, #1
 800dfda:	9103      	str	r1, [sp, #12]
 800dfdc:	701a      	strb	r2, [r3, #0]
 800dfde:	e7f0      	b.n	800dfc2 <__cvt+0xa6>

0800dfe0 <__exponent>:
 800dfe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	2900      	cmp	r1, #0
 800dfe6:	bfb8      	it	lt
 800dfe8:	4249      	neglt	r1, r1
 800dfea:	f803 2b02 	strb.w	r2, [r3], #2
 800dfee:	bfb4      	ite	lt
 800dff0:	222d      	movlt	r2, #45	; 0x2d
 800dff2:	222b      	movge	r2, #43	; 0x2b
 800dff4:	2909      	cmp	r1, #9
 800dff6:	7042      	strb	r2, [r0, #1]
 800dff8:	dd2a      	ble.n	800e050 <__exponent+0x70>
 800dffa:	f10d 0407 	add.w	r4, sp, #7
 800dffe:	46a4      	mov	ip, r4
 800e000:	270a      	movs	r7, #10
 800e002:	46a6      	mov	lr, r4
 800e004:	460a      	mov	r2, r1
 800e006:	fb91 f6f7 	sdiv	r6, r1, r7
 800e00a:	fb07 1516 	mls	r5, r7, r6, r1
 800e00e:	3530      	adds	r5, #48	; 0x30
 800e010:	2a63      	cmp	r2, #99	; 0x63
 800e012:	f104 34ff 	add.w	r4, r4, #4294967295
 800e016:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e01a:	4631      	mov	r1, r6
 800e01c:	dcf1      	bgt.n	800e002 <__exponent+0x22>
 800e01e:	3130      	adds	r1, #48	; 0x30
 800e020:	f1ae 0502 	sub.w	r5, lr, #2
 800e024:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e028:	1c44      	adds	r4, r0, #1
 800e02a:	4629      	mov	r1, r5
 800e02c:	4561      	cmp	r1, ip
 800e02e:	d30a      	bcc.n	800e046 <__exponent+0x66>
 800e030:	f10d 0209 	add.w	r2, sp, #9
 800e034:	eba2 020e 	sub.w	r2, r2, lr
 800e038:	4565      	cmp	r5, ip
 800e03a:	bf88      	it	hi
 800e03c:	2200      	movhi	r2, #0
 800e03e:	4413      	add	r3, r2
 800e040:	1a18      	subs	r0, r3, r0
 800e042:	b003      	add	sp, #12
 800e044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e046:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e04a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e04e:	e7ed      	b.n	800e02c <__exponent+0x4c>
 800e050:	2330      	movs	r3, #48	; 0x30
 800e052:	3130      	adds	r1, #48	; 0x30
 800e054:	7083      	strb	r3, [r0, #2]
 800e056:	70c1      	strb	r1, [r0, #3]
 800e058:	1d03      	adds	r3, r0, #4
 800e05a:	e7f1      	b.n	800e040 <__exponent+0x60>

0800e05c <_printf_float>:
 800e05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e060:	ed2d 8b02 	vpush	{d8}
 800e064:	b08d      	sub	sp, #52	; 0x34
 800e066:	460c      	mov	r4, r1
 800e068:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e06c:	4616      	mov	r6, r2
 800e06e:	461f      	mov	r7, r3
 800e070:	4605      	mov	r5, r0
 800e072:	f001 fd31 	bl	800fad8 <_localeconv_r>
 800e076:	f8d0 a000 	ldr.w	sl, [r0]
 800e07a:	4650      	mov	r0, sl
 800e07c:	f7f2 f8a8 	bl	80001d0 <strlen>
 800e080:	2300      	movs	r3, #0
 800e082:	930a      	str	r3, [sp, #40]	; 0x28
 800e084:	6823      	ldr	r3, [r4, #0]
 800e086:	9305      	str	r3, [sp, #20]
 800e088:	f8d8 3000 	ldr.w	r3, [r8]
 800e08c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e090:	3307      	adds	r3, #7
 800e092:	f023 0307 	bic.w	r3, r3, #7
 800e096:	f103 0208 	add.w	r2, r3, #8
 800e09a:	f8c8 2000 	str.w	r2, [r8]
 800e09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e0a6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e0aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e0ae:	9307      	str	r3, [sp, #28]
 800e0b0:	f8cd 8018 	str.w	r8, [sp, #24]
 800e0b4:	ee08 0a10 	vmov	s16, r0
 800e0b8:	4b9f      	ldr	r3, [pc, #636]	; (800e338 <_printf_float+0x2dc>)
 800e0ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e0be:	f04f 32ff 	mov.w	r2, #4294967295
 800e0c2:	f7f2 fd33 	bl	8000b2c <__aeabi_dcmpun>
 800e0c6:	bb88      	cbnz	r0, 800e12c <_printf_float+0xd0>
 800e0c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e0cc:	4b9a      	ldr	r3, [pc, #616]	; (800e338 <_printf_float+0x2dc>)
 800e0ce:	f04f 32ff 	mov.w	r2, #4294967295
 800e0d2:	f7f2 fd0d 	bl	8000af0 <__aeabi_dcmple>
 800e0d6:	bb48      	cbnz	r0, 800e12c <_printf_float+0xd0>
 800e0d8:	2200      	movs	r2, #0
 800e0da:	2300      	movs	r3, #0
 800e0dc:	4640      	mov	r0, r8
 800e0de:	4649      	mov	r1, r9
 800e0e0:	f7f2 fcfc 	bl	8000adc <__aeabi_dcmplt>
 800e0e4:	b110      	cbz	r0, 800e0ec <_printf_float+0x90>
 800e0e6:	232d      	movs	r3, #45	; 0x2d
 800e0e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0ec:	4b93      	ldr	r3, [pc, #588]	; (800e33c <_printf_float+0x2e0>)
 800e0ee:	4894      	ldr	r0, [pc, #592]	; (800e340 <_printf_float+0x2e4>)
 800e0f0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e0f4:	bf94      	ite	ls
 800e0f6:	4698      	movls	r8, r3
 800e0f8:	4680      	movhi	r8, r0
 800e0fa:	2303      	movs	r3, #3
 800e0fc:	6123      	str	r3, [r4, #16]
 800e0fe:	9b05      	ldr	r3, [sp, #20]
 800e100:	f023 0204 	bic.w	r2, r3, #4
 800e104:	6022      	str	r2, [r4, #0]
 800e106:	f04f 0900 	mov.w	r9, #0
 800e10a:	9700      	str	r7, [sp, #0]
 800e10c:	4633      	mov	r3, r6
 800e10e:	aa0b      	add	r2, sp, #44	; 0x2c
 800e110:	4621      	mov	r1, r4
 800e112:	4628      	mov	r0, r5
 800e114:	f000 f9d8 	bl	800e4c8 <_printf_common>
 800e118:	3001      	adds	r0, #1
 800e11a:	f040 8090 	bne.w	800e23e <_printf_float+0x1e2>
 800e11e:	f04f 30ff 	mov.w	r0, #4294967295
 800e122:	b00d      	add	sp, #52	; 0x34
 800e124:	ecbd 8b02 	vpop	{d8}
 800e128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e12c:	4642      	mov	r2, r8
 800e12e:	464b      	mov	r3, r9
 800e130:	4640      	mov	r0, r8
 800e132:	4649      	mov	r1, r9
 800e134:	f7f2 fcfa 	bl	8000b2c <__aeabi_dcmpun>
 800e138:	b140      	cbz	r0, 800e14c <_printf_float+0xf0>
 800e13a:	464b      	mov	r3, r9
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	bfbc      	itt	lt
 800e140:	232d      	movlt	r3, #45	; 0x2d
 800e142:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e146:	487f      	ldr	r0, [pc, #508]	; (800e344 <_printf_float+0x2e8>)
 800e148:	4b7f      	ldr	r3, [pc, #508]	; (800e348 <_printf_float+0x2ec>)
 800e14a:	e7d1      	b.n	800e0f0 <_printf_float+0x94>
 800e14c:	6863      	ldr	r3, [r4, #4]
 800e14e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e152:	9206      	str	r2, [sp, #24]
 800e154:	1c5a      	adds	r2, r3, #1
 800e156:	d13f      	bne.n	800e1d8 <_printf_float+0x17c>
 800e158:	2306      	movs	r3, #6
 800e15a:	6063      	str	r3, [r4, #4]
 800e15c:	9b05      	ldr	r3, [sp, #20]
 800e15e:	6861      	ldr	r1, [r4, #4]
 800e160:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e164:	2300      	movs	r3, #0
 800e166:	9303      	str	r3, [sp, #12]
 800e168:	ab0a      	add	r3, sp, #40	; 0x28
 800e16a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e16e:	ab09      	add	r3, sp, #36	; 0x24
 800e170:	ec49 8b10 	vmov	d0, r8, r9
 800e174:	9300      	str	r3, [sp, #0]
 800e176:	6022      	str	r2, [r4, #0]
 800e178:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e17c:	4628      	mov	r0, r5
 800e17e:	f7ff fecd 	bl	800df1c <__cvt>
 800e182:	9b06      	ldr	r3, [sp, #24]
 800e184:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e186:	2b47      	cmp	r3, #71	; 0x47
 800e188:	4680      	mov	r8, r0
 800e18a:	d108      	bne.n	800e19e <_printf_float+0x142>
 800e18c:	1cc8      	adds	r0, r1, #3
 800e18e:	db02      	blt.n	800e196 <_printf_float+0x13a>
 800e190:	6863      	ldr	r3, [r4, #4]
 800e192:	4299      	cmp	r1, r3
 800e194:	dd41      	ble.n	800e21a <_printf_float+0x1be>
 800e196:	f1ab 0b02 	sub.w	fp, fp, #2
 800e19a:	fa5f fb8b 	uxtb.w	fp, fp
 800e19e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e1a2:	d820      	bhi.n	800e1e6 <_printf_float+0x18a>
 800e1a4:	3901      	subs	r1, #1
 800e1a6:	465a      	mov	r2, fp
 800e1a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e1ac:	9109      	str	r1, [sp, #36]	; 0x24
 800e1ae:	f7ff ff17 	bl	800dfe0 <__exponent>
 800e1b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e1b4:	1813      	adds	r3, r2, r0
 800e1b6:	2a01      	cmp	r2, #1
 800e1b8:	4681      	mov	r9, r0
 800e1ba:	6123      	str	r3, [r4, #16]
 800e1bc:	dc02      	bgt.n	800e1c4 <_printf_float+0x168>
 800e1be:	6822      	ldr	r2, [r4, #0]
 800e1c0:	07d2      	lsls	r2, r2, #31
 800e1c2:	d501      	bpl.n	800e1c8 <_printf_float+0x16c>
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	6123      	str	r3, [r4, #16]
 800e1c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d09c      	beq.n	800e10a <_printf_float+0xae>
 800e1d0:	232d      	movs	r3, #45	; 0x2d
 800e1d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1d6:	e798      	b.n	800e10a <_printf_float+0xae>
 800e1d8:	9a06      	ldr	r2, [sp, #24]
 800e1da:	2a47      	cmp	r2, #71	; 0x47
 800e1dc:	d1be      	bne.n	800e15c <_printf_float+0x100>
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d1bc      	bne.n	800e15c <_printf_float+0x100>
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	e7b9      	b.n	800e15a <_printf_float+0xfe>
 800e1e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e1ea:	d118      	bne.n	800e21e <_printf_float+0x1c2>
 800e1ec:	2900      	cmp	r1, #0
 800e1ee:	6863      	ldr	r3, [r4, #4]
 800e1f0:	dd0b      	ble.n	800e20a <_printf_float+0x1ae>
 800e1f2:	6121      	str	r1, [r4, #16]
 800e1f4:	b913      	cbnz	r3, 800e1fc <_printf_float+0x1a0>
 800e1f6:	6822      	ldr	r2, [r4, #0]
 800e1f8:	07d0      	lsls	r0, r2, #31
 800e1fa:	d502      	bpl.n	800e202 <_printf_float+0x1a6>
 800e1fc:	3301      	adds	r3, #1
 800e1fe:	440b      	add	r3, r1
 800e200:	6123      	str	r3, [r4, #16]
 800e202:	65a1      	str	r1, [r4, #88]	; 0x58
 800e204:	f04f 0900 	mov.w	r9, #0
 800e208:	e7de      	b.n	800e1c8 <_printf_float+0x16c>
 800e20a:	b913      	cbnz	r3, 800e212 <_printf_float+0x1b6>
 800e20c:	6822      	ldr	r2, [r4, #0]
 800e20e:	07d2      	lsls	r2, r2, #31
 800e210:	d501      	bpl.n	800e216 <_printf_float+0x1ba>
 800e212:	3302      	adds	r3, #2
 800e214:	e7f4      	b.n	800e200 <_printf_float+0x1a4>
 800e216:	2301      	movs	r3, #1
 800e218:	e7f2      	b.n	800e200 <_printf_float+0x1a4>
 800e21a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e21e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e220:	4299      	cmp	r1, r3
 800e222:	db05      	blt.n	800e230 <_printf_float+0x1d4>
 800e224:	6823      	ldr	r3, [r4, #0]
 800e226:	6121      	str	r1, [r4, #16]
 800e228:	07d8      	lsls	r0, r3, #31
 800e22a:	d5ea      	bpl.n	800e202 <_printf_float+0x1a6>
 800e22c:	1c4b      	adds	r3, r1, #1
 800e22e:	e7e7      	b.n	800e200 <_printf_float+0x1a4>
 800e230:	2900      	cmp	r1, #0
 800e232:	bfd4      	ite	le
 800e234:	f1c1 0202 	rsble	r2, r1, #2
 800e238:	2201      	movgt	r2, #1
 800e23a:	4413      	add	r3, r2
 800e23c:	e7e0      	b.n	800e200 <_printf_float+0x1a4>
 800e23e:	6823      	ldr	r3, [r4, #0]
 800e240:	055a      	lsls	r2, r3, #21
 800e242:	d407      	bmi.n	800e254 <_printf_float+0x1f8>
 800e244:	6923      	ldr	r3, [r4, #16]
 800e246:	4642      	mov	r2, r8
 800e248:	4631      	mov	r1, r6
 800e24a:	4628      	mov	r0, r5
 800e24c:	47b8      	blx	r7
 800e24e:	3001      	adds	r0, #1
 800e250:	d12c      	bne.n	800e2ac <_printf_float+0x250>
 800e252:	e764      	b.n	800e11e <_printf_float+0xc2>
 800e254:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e258:	f240 80e0 	bls.w	800e41c <_printf_float+0x3c0>
 800e25c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e260:	2200      	movs	r2, #0
 800e262:	2300      	movs	r3, #0
 800e264:	f7f2 fc30 	bl	8000ac8 <__aeabi_dcmpeq>
 800e268:	2800      	cmp	r0, #0
 800e26a:	d034      	beq.n	800e2d6 <_printf_float+0x27a>
 800e26c:	4a37      	ldr	r2, [pc, #220]	; (800e34c <_printf_float+0x2f0>)
 800e26e:	2301      	movs	r3, #1
 800e270:	4631      	mov	r1, r6
 800e272:	4628      	mov	r0, r5
 800e274:	47b8      	blx	r7
 800e276:	3001      	adds	r0, #1
 800e278:	f43f af51 	beq.w	800e11e <_printf_float+0xc2>
 800e27c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e280:	429a      	cmp	r2, r3
 800e282:	db02      	blt.n	800e28a <_printf_float+0x22e>
 800e284:	6823      	ldr	r3, [r4, #0]
 800e286:	07d8      	lsls	r0, r3, #31
 800e288:	d510      	bpl.n	800e2ac <_printf_float+0x250>
 800e28a:	ee18 3a10 	vmov	r3, s16
 800e28e:	4652      	mov	r2, sl
 800e290:	4631      	mov	r1, r6
 800e292:	4628      	mov	r0, r5
 800e294:	47b8      	blx	r7
 800e296:	3001      	adds	r0, #1
 800e298:	f43f af41 	beq.w	800e11e <_printf_float+0xc2>
 800e29c:	f04f 0800 	mov.w	r8, #0
 800e2a0:	f104 091a 	add.w	r9, r4, #26
 800e2a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2a6:	3b01      	subs	r3, #1
 800e2a8:	4543      	cmp	r3, r8
 800e2aa:	dc09      	bgt.n	800e2c0 <_printf_float+0x264>
 800e2ac:	6823      	ldr	r3, [r4, #0]
 800e2ae:	079b      	lsls	r3, r3, #30
 800e2b0:	f100 8105 	bmi.w	800e4be <_printf_float+0x462>
 800e2b4:	68e0      	ldr	r0, [r4, #12]
 800e2b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2b8:	4298      	cmp	r0, r3
 800e2ba:	bfb8      	it	lt
 800e2bc:	4618      	movlt	r0, r3
 800e2be:	e730      	b.n	800e122 <_printf_float+0xc6>
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	464a      	mov	r2, r9
 800e2c4:	4631      	mov	r1, r6
 800e2c6:	4628      	mov	r0, r5
 800e2c8:	47b8      	blx	r7
 800e2ca:	3001      	adds	r0, #1
 800e2cc:	f43f af27 	beq.w	800e11e <_printf_float+0xc2>
 800e2d0:	f108 0801 	add.w	r8, r8, #1
 800e2d4:	e7e6      	b.n	800e2a4 <_printf_float+0x248>
 800e2d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	dc39      	bgt.n	800e350 <_printf_float+0x2f4>
 800e2dc:	4a1b      	ldr	r2, [pc, #108]	; (800e34c <_printf_float+0x2f0>)
 800e2de:	2301      	movs	r3, #1
 800e2e0:	4631      	mov	r1, r6
 800e2e2:	4628      	mov	r0, r5
 800e2e4:	47b8      	blx	r7
 800e2e6:	3001      	adds	r0, #1
 800e2e8:	f43f af19 	beq.w	800e11e <_printf_float+0xc2>
 800e2ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e2f0:	4313      	orrs	r3, r2
 800e2f2:	d102      	bne.n	800e2fa <_printf_float+0x29e>
 800e2f4:	6823      	ldr	r3, [r4, #0]
 800e2f6:	07d9      	lsls	r1, r3, #31
 800e2f8:	d5d8      	bpl.n	800e2ac <_printf_float+0x250>
 800e2fa:	ee18 3a10 	vmov	r3, s16
 800e2fe:	4652      	mov	r2, sl
 800e300:	4631      	mov	r1, r6
 800e302:	4628      	mov	r0, r5
 800e304:	47b8      	blx	r7
 800e306:	3001      	adds	r0, #1
 800e308:	f43f af09 	beq.w	800e11e <_printf_float+0xc2>
 800e30c:	f04f 0900 	mov.w	r9, #0
 800e310:	f104 0a1a 	add.w	sl, r4, #26
 800e314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e316:	425b      	negs	r3, r3
 800e318:	454b      	cmp	r3, r9
 800e31a:	dc01      	bgt.n	800e320 <_printf_float+0x2c4>
 800e31c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e31e:	e792      	b.n	800e246 <_printf_float+0x1ea>
 800e320:	2301      	movs	r3, #1
 800e322:	4652      	mov	r2, sl
 800e324:	4631      	mov	r1, r6
 800e326:	4628      	mov	r0, r5
 800e328:	47b8      	blx	r7
 800e32a:	3001      	adds	r0, #1
 800e32c:	f43f aef7 	beq.w	800e11e <_printf_float+0xc2>
 800e330:	f109 0901 	add.w	r9, r9, #1
 800e334:	e7ee      	b.n	800e314 <_printf_float+0x2b8>
 800e336:	bf00      	nop
 800e338:	7fefffff 	.word	0x7fefffff
 800e33c:	080109a1 	.word	0x080109a1
 800e340:	080109a5 	.word	0x080109a5
 800e344:	080109ad 	.word	0x080109ad
 800e348:	080109a9 	.word	0x080109a9
 800e34c:	080109b1 	.word	0x080109b1
 800e350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e352:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e354:	429a      	cmp	r2, r3
 800e356:	bfa8      	it	ge
 800e358:	461a      	movge	r2, r3
 800e35a:	2a00      	cmp	r2, #0
 800e35c:	4691      	mov	r9, r2
 800e35e:	dc37      	bgt.n	800e3d0 <_printf_float+0x374>
 800e360:	f04f 0b00 	mov.w	fp, #0
 800e364:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e368:	f104 021a 	add.w	r2, r4, #26
 800e36c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e36e:	9305      	str	r3, [sp, #20]
 800e370:	eba3 0309 	sub.w	r3, r3, r9
 800e374:	455b      	cmp	r3, fp
 800e376:	dc33      	bgt.n	800e3e0 <_printf_float+0x384>
 800e378:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e37c:	429a      	cmp	r2, r3
 800e37e:	db3b      	blt.n	800e3f8 <_printf_float+0x39c>
 800e380:	6823      	ldr	r3, [r4, #0]
 800e382:	07da      	lsls	r2, r3, #31
 800e384:	d438      	bmi.n	800e3f8 <_printf_float+0x39c>
 800e386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e388:	9a05      	ldr	r2, [sp, #20]
 800e38a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e38c:	1a9a      	subs	r2, r3, r2
 800e38e:	eba3 0901 	sub.w	r9, r3, r1
 800e392:	4591      	cmp	r9, r2
 800e394:	bfa8      	it	ge
 800e396:	4691      	movge	r9, r2
 800e398:	f1b9 0f00 	cmp.w	r9, #0
 800e39c:	dc35      	bgt.n	800e40a <_printf_float+0x3ae>
 800e39e:	f04f 0800 	mov.w	r8, #0
 800e3a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e3a6:	f104 0a1a 	add.w	sl, r4, #26
 800e3aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e3ae:	1a9b      	subs	r3, r3, r2
 800e3b0:	eba3 0309 	sub.w	r3, r3, r9
 800e3b4:	4543      	cmp	r3, r8
 800e3b6:	f77f af79 	ble.w	800e2ac <_printf_float+0x250>
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	4652      	mov	r2, sl
 800e3be:	4631      	mov	r1, r6
 800e3c0:	4628      	mov	r0, r5
 800e3c2:	47b8      	blx	r7
 800e3c4:	3001      	adds	r0, #1
 800e3c6:	f43f aeaa 	beq.w	800e11e <_printf_float+0xc2>
 800e3ca:	f108 0801 	add.w	r8, r8, #1
 800e3ce:	e7ec      	b.n	800e3aa <_printf_float+0x34e>
 800e3d0:	4613      	mov	r3, r2
 800e3d2:	4631      	mov	r1, r6
 800e3d4:	4642      	mov	r2, r8
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	47b8      	blx	r7
 800e3da:	3001      	adds	r0, #1
 800e3dc:	d1c0      	bne.n	800e360 <_printf_float+0x304>
 800e3de:	e69e      	b.n	800e11e <_printf_float+0xc2>
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	4631      	mov	r1, r6
 800e3e4:	4628      	mov	r0, r5
 800e3e6:	9205      	str	r2, [sp, #20]
 800e3e8:	47b8      	blx	r7
 800e3ea:	3001      	adds	r0, #1
 800e3ec:	f43f ae97 	beq.w	800e11e <_printf_float+0xc2>
 800e3f0:	9a05      	ldr	r2, [sp, #20]
 800e3f2:	f10b 0b01 	add.w	fp, fp, #1
 800e3f6:	e7b9      	b.n	800e36c <_printf_float+0x310>
 800e3f8:	ee18 3a10 	vmov	r3, s16
 800e3fc:	4652      	mov	r2, sl
 800e3fe:	4631      	mov	r1, r6
 800e400:	4628      	mov	r0, r5
 800e402:	47b8      	blx	r7
 800e404:	3001      	adds	r0, #1
 800e406:	d1be      	bne.n	800e386 <_printf_float+0x32a>
 800e408:	e689      	b.n	800e11e <_printf_float+0xc2>
 800e40a:	9a05      	ldr	r2, [sp, #20]
 800e40c:	464b      	mov	r3, r9
 800e40e:	4442      	add	r2, r8
 800e410:	4631      	mov	r1, r6
 800e412:	4628      	mov	r0, r5
 800e414:	47b8      	blx	r7
 800e416:	3001      	adds	r0, #1
 800e418:	d1c1      	bne.n	800e39e <_printf_float+0x342>
 800e41a:	e680      	b.n	800e11e <_printf_float+0xc2>
 800e41c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e41e:	2a01      	cmp	r2, #1
 800e420:	dc01      	bgt.n	800e426 <_printf_float+0x3ca>
 800e422:	07db      	lsls	r3, r3, #31
 800e424:	d538      	bpl.n	800e498 <_printf_float+0x43c>
 800e426:	2301      	movs	r3, #1
 800e428:	4642      	mov	r2, r8
 800e42a:	4631      	mov	r1, r6
 800e42c:	4628      	mov	r0, r5
 800e42e:	47b8      	blx	r7
 800e430:	3001      	adds	r0, #1
 800e432:	f43f ae74 	beq.w	800e11e <_printf_float+0xc2>
 800e436:	ee18 3a10 	vmov	r3, s16
 800e43a:	4652      	mov	r2, sl
 800e43c:	4631      	mov	r1, r6
 800e43e:	4628      	mov	r0, r5
 800e440:	47b8      	blx	r7
 800e442:	3001      	adds	r0, #1
 800e444:	f43f ae6b 	beq.w	800e11e <_printf_float+0xc2>
 800e448:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e44c:	2200      	movs	r2, #0
 800e44e:	2300      	movs	r3, #0
 800e450:	f7f2 fb3a 	bl	8000ac8 <__aeabi_dcmpeq>
 800e454:	b9d8      	cbnz	r0, 800e48e <_printf_float+0x432>
 800e456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e458:	f108 0201 	add.w	r2, r8, #1
 800e45c:	3b01      	subs	r3, #1
 800e45e:	4631      	mov	r1, r6
 800e460:	4628      	mov	r0, r5
 800e462:	47b8      	blx	r7
 800e464:	3001      	adds	r0, #1
 800e466:	d10e      	bne.n	800e486 <_printf_float+0x42a>
 800e468:	e659      	b.n	800e11e <_printf_float+0xc2>
 800e46a:	2301      	movs	r3, #1
 800e46c:	4652      	mov	r2, sl
 800e46e:	4631      	mov	r1, r6
 800e470:	4628      	mov	r0, r5
 800e472:	47b8      	blx	r7
 800e474:	3001      	adds	r0, #1
 800e476:	f43f ae52 	beq.w	800e11e <_printf_float+0xc2>
 800e47a:	f108 0801 	add.w	r8, r8, #1
 800e47e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e480:	3b01      	subs	r3, #1
 800e482:	4543      	cmp	r3, r8
 800e484:	dcf1      	bgt.n	800e46a <_printf_float+0x40e>
 800e486:	464b      	mov	r3, r9
 800e488:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e48c:	e6dc      	b.n	800e248 <_printf_float+0x1ec>
 800e48e:	f04f 0800 	mov.w	r8, #0
 800e492:	f104 0a1a 	add.w	sl, r4, #26
 800e496:	e7f2      	b.n	800e47e <_printf_float+0x422>
 800e498:	2301      	movs	r3, #1
 800e49a:	4642      	mov	r2, r8
 800e49c:	e7df      	b.n	800e45e <_printf_float+0x402>
 800e49e:	2301      	movs	r3, #1
 800e4a0:	464a      	mov	r2, r9
 800e4a2:	4631      	mov	r1, r6
 800e4a4:	4628      	mov	r0, r5
 800e4a6:	47b8      	blx	r7
 800e4a8:	3001      	adds	r0, #1
 800e4aa:	f43f ae38 	beq.w	800e11e <_printf_float+0xc2>
 800e4ae:	f108 0801 	add.w	r8, r8, #1
 800e4b2:	68e3      	ldr	r3, [r4, #12]
 800e4b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e4b6:	1a5b      	subs	r3, r3, r1
 800e4b8:	4543      	cmp	r3, r8
 800e4ba:	dcf0      	bgt.n	800e49e <_printf_float+0x442>
 800e4bc:	e6fa      	b.n	800e2b4 <_printf_float+0x258>
 800e4be:	f04f 0800 	mov.w	r8, #0
 800e4c2:	f104 0919 	add.w	r9, r4, #25
 800e4c6:	e7f4      	b.n	800e4b2 <_printf_float+0x456>

0800e4c8 <_printf_common>:
 800e4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4cc:	4616      	mov	r6, r2
 800e4ce:	4699      	mov	r9, r3
 800e4d0:	688a      	ldr	r2, [r1, #8]
 800e4d2:	690b      	ldr	r3, [r1, #16]
 800e4d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e4d8:	4293      	cmp	r3, r2
 800e4da:	bfb8      	it	lt
 800e4dc:	4613      	movlt	r3, r2
 800e4de:	6033      	str	r3, [r6, #0]
 800e4e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e4e4:	4607      	mov	r7, r0
 800e4e6:	460c      	mov	r4, r1
 800e4e8:	b10a      	cbz	r2, 800e4ee <_printf_common+0x26>
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	6033      	str	r3, [r6, #0]
 800e4ee:	6823      	ldr	r3, [r4, #0]
 800e4f0:	0699      	lsls	r1, r3, #26
 800e4f2:	bf42      	ittt	mi
 800e4f4:	6833      	ldrmi	r3, [r6, #0]
 800e4f6:	3302      	addmi	r3, #2
 800e4f8:	6033      	strmi	r3, [r6, #0]
 800e4fa:	6825      	ldr	r5, [r4, #0]
 800e4fc:	f015 0506 	ands.w	r5, r5, #6
 800e500:	d106      	bne.n	800e510 <_printf_common+0x48>
 800e502:	f104 0a19 	add.w	sl, r4, #25
 800e506:	68e3      	ldr	r3, [r4, #12]
 800e508:	6832      	ldr	r2, [r6, #0]
 800e50a:	1a9b      	subs	r3, r3, r2
 800e50c:	42ab      	cmp	r3, r5
 800e50e:	dc26      	bgt.n	800e55e <_printf_common+0x96>
 800e510:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e514:	1e13      	subs	r3, r2, #0
 800e516:	6822      	ldr	r2, [r4, #0]
 800e518:	bf18      	it	ne
 800e51a:	2301      	movne	r3, #1
 800e51c:	0692      	lsls	r2, r2, #26
 800e51e:	d42b      	bmi.n	800e578 <_printf_common+0xb0>
 800e520:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e524:	4649      	mov	r1, r9
 800e526:	4638      	mov	r0, r7
 800e528:	47c0      	blx	r8
 800e52a:	3001      	adds	r0, #1
 800e52c:	d01e      	beq.n	800e56c <_printf_common+0xa4>
 800e52e:	6823      	ldr	r3, [r4, #0]
 800e530:	68e5      	ldr	r5, [r4, #12]
 800e532:	6832      	ldr	r2, [r6, #0]
 800e534:	f003 0306 	and.w	r3, r3, #6
 800e538:	2b04      	cmp	r3, #4
 800e53a:	bf08      	it	eq
 800e53c:	1aad      	subeq	r5, r5, r2
 800e53e:	68a3      	ldr	r3, [r4, #8]
 800e540:	6922      	ldr	r2, [r4, #16]
 800e542:	bf0c      	ite	eq
 800e544:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e548:	2500      	movne	r5, #0
 800e54a:	4293      	cmp	r3, r2
 800e54c:	bfc4      	itt	gt
 800e54e:	1a9b      	subgt	r3, r3, r2
 800e550:	18ed      	addgt	r5, r5, r3
 800e552:	2600      	movs	r6, #0
 800e554:	341a      	adds	r4, #26
 800e556:	42b5      	cmp	r5, r6
 800e558:	d11a      	bne.n	800e590 <_printf_common+0xc8>
 800e55a:	2000      	movs	r0, #0
 800e55c:	e008      	b.n	800e570 <_printf_common+0xa8>
 800e55e:	2301      	movs	r3, #1
 800e560:	4652      	mov	r2, sl
 800e562:	4649      	mov	r1, r9
 800e564:	4638      	mov	r0, r7
 800e566:	47c0      	blx	r8
 800e568:	3001      	adds	r0, #1
 800e56a:	d103      	bne.n	800e574 <_printf_common+0xac>
 800e56c:	f04f 30ff 	mov.w	r0, #4294967295
 800e570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e574:	3501      	adds	r5, #1
 800e576:	e7c6      	b.n	800e506 <_printf_common+0x3e>
 800e578:	18e1      	adds	r1, r4, r3
 800e57a:	1c5a      	adds	r2, r3, #1
 800e57c:	2030      	movs	r0, #48	; 0x30
 800e57e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e582:	4422      	add	r2, r4
 800e584:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e588:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e58c:	3302      	adds	r3, #2
 800e58e:	e7c7      	b.n	800e520 <_printf_common+0x58>
 800e590:	2301      	movs	r3, #1
 800e592:	4622      	mov	r2, r4
 800e594:	4649      	mov	r1, r9
 800e596:	4638      	mov	r0, r7
 800e598:	47c0      	blx	r8
 800e59a:	3001      	adds	r0, #1
 800e59c:	d0e6      	beq.n	800e56c <_printf_common+0xa4>
 800e59e:	3601      	adds	r6, #1
 800e5a0:	e7d9      	b.n	800e556 <_printf_common+0x8e>
	...

0800e5a4 <_printf_i>:
 800e5a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e5a8:	7e0f      	ldrb	r7, [r1, #24]
 800e5aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e5ac:	2f78      	cmp	r7, #120	; 0x78
 800e5ae:	4691      	mov	r9, r2
 800e5b0:	4680      	mov	r8, r0
 800e5b2:	460c      	mov	r4, r1
 800e5b4:	469a      	mov	sl, r3
 800e5b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e5ba:	d807      	bhi.n	800e5cc <_printf_i+0x28>
 800e5bc:	2f62      	cmp	r7, #98	; 0x62
 800e5be:	d80a      	bhi.n	800e5d6 <_printf_i+0x32>
 800e5c0:	2f00      	cmp	r7, #0
 800e5c2:	f000 80d8 	beq.w	800e776 <_printf_i+0x1d2>
 800e5c6:	2f58      	cmp	r7, #88	; 0x58
 800e5c8:	f000 80a3 	beq.w	800e712 <_printf_i+0x16e>
 800e5cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e5d4:	e03a      	b.n	800e64c <_printf_i+0xa8>
 800e5d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e5da:	2b15      	cmp	r3, #21
 800e5dc:	d8f6      	bhi.n	800e5cc <_printf_i+0x28>
 800e5de:	a101      	add	r1, pc, #4	; (adr r1, 800e5e4 <_printf_i+0x40>)
 800e5e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e5e4:	0800e63d 	.word	0x0800e63d
 800e5e8:	0800e651 	.word	0x0800e651
 800e5ec:	0800e5cd 	.word	0x0800e5cd
 800e5f0:	0800e5cd 	.word	0x0800e5cd
 800e5f4:	0800e5cd 	.word	0x0800e5cd
 800e5f8:	0800e5cd 	.word	0x0800e5cd
 800e5fc:	0800e651 	.word	0x0800e651
 800e600:	0800e5cd 	.word	0x0800e5cd
 800e604:	0800e5cd 	.word	0x0800e5cd
 800e608:	0800e5cd 	.word	0x0800e5cd
 800e60c:	0800e5cd 	.word	0x0800e5cd
 800e610:	0800e75d 	.word	0x0800e75d
 800e614:	0800e681 	.word	0x0800e681
 800e618:	0800e73f 	.word	0x0800e73f
 800e61c:	0800e5cd 	.word	0x0800e5cd
 800e620:	0800e5cd 	.word	0x0800e5cd
 800e624:	0800e77f 	.word	0x0800e77f
 800e628:	0800e5cd 	.word	0x0800e5cd
 800e62c:	0800e681 	.word	0x0800e681
 800e630:	0800e5cd 	.word	0x0800e5cd
 800e634:	0800e5cd 	.word	0x0800e5cd
 800e638:	0800e747 	.word	0x0800e747
 800e63c:	682b      	ldr	r3, [r5, #0]
 800e63e:	1d1a      	adds	r2, r3, #4
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	602a      	str	r2, [r5, #0]
 800e644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e648:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e64c:	2301      	movs	r3, #1
 800e64e:	e0a3      	b.n	800e798 <_printf_i+0x1f4>
 800e650:	6820      	ldr	r0, [r4, #0]
 800e652:	6829      	ldr	r1, [r5, #0]
 800e654:	0606      	lsls	r6, r0, #24
 800e656:	f101 0304 	add.w	r3, r1, #4
 800e65a:	d50a      	bpl.n	800e672 <_printf_i+0xce>
 800e65c:	680e      	ldr	r6, [r1, #0]
 800e65e:	602b      	str	r3, [r5, #0]
 800e660:	2e00      	cmp	r6, #0
 800e662:	da03      	bge.n	800e66c <_printf_i+0xc8>
 800e664:	232d      	movs	r3, #45	; 0x2d
 800e666:	4276      	negs	r6, r6
 800e668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e66c:	485e      	ldr	r0, [pc, #376]	; (800e7e8 <_printf_i+0x244>)
 800e66e:	230a      	movs	r3, #10
 800e670:	e019      	b.n	800e6a6 <_printf_i+0x102>
 800e672:	680e      	ldr	r6, [r1, #0]
 800e674:	602b      	str	r3, [r5, #0]
 800e676:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e67a:	bf18      	it	ne
 800e67c:	b236      	sxthne	r6, r6
 800e67e:	e7ef      	b.n	800e660 <_printf_i+0xbc>
 800e680:	682b      	ldr	r3, [r5, #0]
 800e682:	6820      	ldr	r0, [r4, #0]
 800e684:	1d19      	adds	r1, r3, #4
 800e686:	6029      	str	r1, [r5, #0]
 800e688:	0601      	lsls	r1, r0, #24
 800e68a:	d501      	bpl.n	800e690 <_printf_i+0xec>
 800e68c:	681e      	ldr	r6, [r3, #0]
 800e68e:	e002      	b.n	800e696 <_printf_i+0xf2>
 800e690:	0646      	lsls	r6, r0, #25
 800e692:	d5fb      	bpl.n	800e68c <_printf_i+0xe8>
 800e694:	881e      	ldrh	r6, [r3, #0]
 800e696:	4854      	ldr	r0, [pc, #336]	; (800e7e8 <_printf_i+0x244>)
 800e698:	2f6f      	cmp	r7, #111	; 0x6f
 800e69a:	bf0c      	ite	eq
 800e69c:	2308      	moveq	r3, #8
 800e69e:	230a      	movne	r3, #10
 800e6a0:	2100      	movs	r1, #0
 800e6a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e6a6:	6865      	ldr	r5, [r4, #4]
 800e6a8:	60a5      	str	r5, [r4, #8]
 800e6aa:	2d00      	cmp	r5, #0
 800e6ac:	bfa2      	ittt	ge
 800e6ae:	6821      	ldrge	r1, [r4, #0]
 800e6b0:	f021 0104 	bicge.w	r1, r1, #4
 800e6b4:	6021      	strge	r1, [r4, #0]
 800e6b6:	b90e      	cbnz	r6, 800e6bc <_printf_i+0x118>
 800e6b8:	2d00      	cmp	r5, #0
 800e6ba:	d04d      	beq.n	800e758 <_printf_i+0x1b4>
 800e6bc:	4615      	mov	r5, r2
 800e6be:	fbb6 f1f3 	udiv	r1, r6, r3
 800e6c2:	fb03 6711 	mls	r7, r3, r1, r6
 800e6c6:	5dc7      	ldrb	r7, [r0, r7]
 800e6c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e6cc:	4637      	mov	r7, r6
 800e6ce:	42bb      	cmp	r3, r7
 800e6d0:	460e      	mov	r6, r1
 800e6d2:	d9f4      	bls.n	800e6be <_printf_i+0x11a>
 800e6d4:	2b08      	cmp	r3, #8
 800e6d6:	d10b      	bne.n	800e6f0 <_printf_i+0x14c>
 800e6d8:	6823      	ldr	r3, [r4, #0]
 800e6da:	07de      	lsls	r6, r3, #31
 800e6dc:	d508      	bpl.n	800e6f0 <_printf_i+0x14c>
 800e6de:	6923      	ldr	r3, [r4, #16]
 800e6e0:	6861      	ldr	r1, [r4, #4]
 800e6e2:	4299      	cmp	r1, r3
 800e6e4:	bfde      	ittt	le
 800e6e6:	2330      	movle	r3, #48	; 0x30
 800e6e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e6ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e6f0:	1b52      	subs	r2, r2, r5
 800e6f2:	6122      	str	r2, [r4, #16]
 800e6f4:	f8cd a000 	str.w	sl, [sp]
 800e6f8:	464b      	mov	r3, r9
 800e6fa:	aa03      	add	r2, sp, #12
 800e6fc:	4621      	mov	r1, r4
 800e6fe:	4640      	mov	r0, r8
 800e700:	f7ff fee2 	bl	800e4c8 <_printf_common>
 800e704:	3001      	adds	r0, #1
 800e706:	d14c      	bne.n	800e7a2 <_printf_i+0x1fe>
 800e708:	f04f 30ff 	mov.w	r0, #4294967295
 800e70c:	b004      	add	sp, #16
 800e70e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e712:	4835      	ldr	r0, [pc, #212]	; (800e7e8 <_printf_i+0x244>)
 800e714:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e718:	6829      	ldr	r1, [r5, #0]
 800e71a:	6823      	ldr	r3, [r4, #0]
 800e71c:	f851 6b04 	ldr.w	r6, [r1], #4
 800e720:	6029      	str	r1, [r5, #0]
 800e722:	061d      	lsls	r5, r3, #24
 800e724:	d514      	bpl.n	800e750 <_printf_i+0x1ac>
 800e726:	07df      	lsls	r7, r3, #31
 800e728:	bf44      	itt	mi
 800e72a:	f043 0320 	orrmi.w	r3, r3, #32
 800e72e:	6023      	strmi	r3, [r4, #0]
 800e730:	b91e      	cbnz	r6, 800e73a <_printf_i+0x196>
 800e732:	6823      	ldr	r3, [r4, #0]
 800e734:	f023 0320 	bic.w	r3, r3, #32
 800e738:	6023      	str	r3, [r4, #0]
 800e73a:	2310      	movs	r3, #16
 800e73c:	e7b0      	b.n	800e6a0 <_printf_i+0xfc>
 800e73e:	6823      	ldr	r3, [r4, #0]
 800e740:	f043 0320 	orr.w	r3, r3, #32
 800e744:	6023      	str	r3, [r4, #0]
 800e746:	2378      	movs	r3, #120	; 0x78
 800e748:	4828      	ldr	r0, [pc, #160]	; (800e7ec <_printf_i+0x248>)
 800e74a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e74e:	e7e3      	b.n	800e718 <_printf_i+0x174>
 800e750:	0659      	lsls	r1, r3, #25
 800e752:	bf48      	it	mi
 800e754:	b2b6      	uxthmi	r6, r6
 800e756:	e7e6      	b.n	800e726 <_printf_i+0x182>
 800e758:	4615      	mov	r5, r2
 800e75a:	e7bb      	b.n	800e6d4 <_printf_i+0x130>
 800e75c:	682b      	ldr	r3, [r5, #0]
 800e75e:	6826      	ldr	r6, [r4, #0]
 800e760:	6961      	ldr	r1, [r4, #20]
 800e762:	1d18      	adds	r0, r3, #4
 800e764:	6028      	str	r0, [r5, #0]
 800e766:	0635      	lsls	r5, r6, #24
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	d501      	bpl.n	800e770 <_printf_i+0x1cc>
 800e76c:	6019      	str	r1, [r3, #0]
 800e76e:	e002      	b.n	800e776 <_printf_i+0x1d2>
 800e770:	0670      	lsls	r0, r6, #25
 800e772:	d5fb      	bpl.n	800e76c <_printf_i+0x1c8>
 800e774:	8019      	strh	r1, [r3, #0]
 800e776:	2300      	movs	r3, #0
 800e778:	6123      	str	r3, [r4, #16]
 800e77a:	4615      	mov	r5, r2
 800e77c:	e7ba      	b.n	800e6f4 <_printf_i+0x150>
 800e77e:	682b      	ldr	r3, [r5, #0]
 800e780:	1d1a      	adds	r2, r3, #4
 800e782:	602a      	str	r2, [r5, #0]
 800e784:	681d      	ldr	r5, [r3, #0]
 800e786:	6862      	ldr	r2, [r4, #4]
 800e788:	2100      	movs	r1, #0
 800e78a:	4628      	mov	r0, r5
 800e78c:	f7f1 fd28 	bl	80001e0 <memchr>
 800e790:	b108      	cbz	r0, 800e796 <_printf_i+0x1f2>
 800e792:	1b40      	subs	r0, r0, r5
 800e794:	6060      	str	r0, [r4, #4]
 800e796:	6863      	ldr	r3, [r4, #4]
 800e798:	6123      	str	r3, [r4, #16]
 800e79a:	2300      	movs	r3, #0
 800e79c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7a0:	e7a8      	b.n	800e6f4 <_printf_i+0x150>
 800e7a2:	6923      	ldr	r3, [r4, #16]
 800e7a4:	462a      	mov	r2, r5
 800e7a6:	4649      	mov	r1, r9
 800e7a8:	4640      	mov	r0, r8
 800e7aa:	47d0      	blx	sl
 800e7ac:	3001      	adds	r0, #1
 800e7ae:	d0ab      	beq.n	800e708 <_printf_i+0x164>
 800e7b0:	6823      	ldr	r3, [r4, #0]
 800e7b2:	079b      	lsls	r3, r3, #30
 800e7b4:	d413      	bmi.n	800e7de <_printf_i+0x23a>
 800e7b6:	68e0      	ldr	r0, [r4, #12]
 800e7b8:	9b03      	ldr	r3, [sp, #12]
 800e7ba:	4298      	cmp	r0, r3
 800e7bc:	bfb8      	it	lt
 800e7be:	4618      	movlt	r0, r3
 800e7c0:	e7a4      	b.n	800e70c <_printf_i+0x168>
 800e7c2:	2301      	movs	r3, #1
 800e7c4:	4632      	mov	r2, r6
 800e7c6:	4649      	mov	r1, r9
 800e7c8:	4640      	mov	r0, r8
 800e7ca:	47d0      	blx	sl
 800e7cc:	3001      	adds	r0, #1
 800e7ce:	d09b      	beq.n	800e708 <_printf_i+0x164>
 800e7d0:	3501      	adds	r5, #1
 800e7d2:	68e3      	ldr	r3, [r4, #12]
 800e7d4:	9903      	ldr	r1, [sp, #12]
 800e7d6:	1a5b      	subs	r3, r3, r1
 800e7d8:	42ab      	cmp	r3, r5
 800e7da:	dcf2      	bgt.n	800e7c2 <_printf_i+0x21e>
 800e7dc:	e7eb      	b.n	800e7b6 <_printf_i+0x212>
 800e7de:	2500      	movs	r5, #0
 800e7e0:	f104 0619 	add.w	r6, r4, #25
 800e7e4:	e7f5      	b.n	800e7d2 <_printf_i+0x22e>
 800e7e6:	bf00      	nop
 800e7e8:	080109b3 	.word	0x080109b3
 800e7ec:	080109c4 	.word	0x080109c4

0800e7f0 <iprintf>:
 800e7f0:	b40f      	push	{r0, r1, r2, r3}
 800e7f2:	4b0a      	ldr	r3, [pc, #40]	; (800e81c <iprintf+0x2c>)
 800e7f4:	b513      	push	{r0, r1, r4, lr}
 800e7f6:	681c      	ldr	r4, [r3, #0]
 800e7f8:	b124      	cbz	r4, 800e804 <iprintf+0x14>
 800e7fa:	69a3      	ldr	r3, [r4, #24]
 800e7fc:	b913      	cbnz	r3, 800e804 <iprintf+0x14>
 800e7fe:	4620      	mov	r0, r4
 800e800:	f7ff f8b0 	bl	800d964 <__sinit>
 800e804:	ab05      	add	r3, sp, #20
 800e806:	9a04      	ldr	r2, [sp, #16]
 800e808:	68a1      	ldr	r1, [r4, #8]
 800e80a:	9301      	str	r3, [sp, #4]
 800e80c:	4620      	mov	r0, r4
 800e80e:	f7ff fa55 	bl	800dcbc <_vfiprintf_r>
 800e812:	b002      	add	sp, #8
 800e814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e818:	b004      	add	sp, #16
 800e81a:	4770      	bx	lr
 800e81c:	20000018 	.word	0x20000018

0800e820 <_puts_r>:
 800e820:	b570      	push	{r4, r5, r6, lr}
 800e822:	460e      	mov	r6, r1
 800e824:	4605      	mov	r5, r0
 800e826:	b118      	cbz	r0, 800e830 <_puts_r+0x10>
 800e828:	6983      	ldr	r3, [r0, #24]
 800e82a:	b90b      	cbnz	r3, 800e830 <_puts_r+0x10>
 800e82c:	f7ff f89a 	bl	800d964 <__sinit>
 800e830:	69ab      	ldr	r3, [r5, #24]
 800e832:	68ac      	ldr	r4, [r5, #8]
 800e834:	b913      	cbnz	r3, 800e83c <_puts_r+0x1c>
 800e836:	4628      	mov	r0, r5
 800e838:	f7ff f894 	bl	800d964 <__sinit>
 800e83c:	4b2c      	ldr	r3, [pc, #176]	; (800e8f0 <_puts_r+0xd0>)
 800e83e:	429c      	cmp	r4, r3
 800e840:	d120      	bne.n	800e884 <_puts_r+0x64>
 800e842:	686c      	ldr	r4, [r5, #4]
 800e844:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e846:	07db      	lsls	r3, r3, #31
 800e848:	d405      	bmi.n	800e856 <_puts_r+0x36>
 800e84a:	89a3      	ldrh	r3, [r4, #12]
 800e84c:	0598      	lsls	r0, r3, #22
 800e84e:	d402      	bmi.n	800e856 <_puts_r+0x36>
 800e850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e852:	f7ff f95c 	bl	800db0e <__retarget_lock_acquire_recursive>
 800e856:	89a3      	ldrh	r3, [r4, #12]
 800e858:	0719      	lsls	r1, r3, #28
 800e85a:	d51d      	bpl.n	800e898 <_puts_r+0x78>
 800e85c:	6923      	ldr	r3, [r4, #16]
 800e85e:	b1db      	cbz	r3, 800e898 <_puts_r+0x78>
 800e860:	3e01      	subs	r6, #1
 800e862:	68a3      	ldr	r3, [r4, #8]
 800e864:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e868:	3b01      	subs	r3, #1
 800e86a:	60a3      	str	r3, [r4, #8]
 800e86c:	bb39      	cbnz	r1, 800e8be <_puts_r+0x9e>
 800e86e:	2b00      	cmp	r3, #0
 800e870:	da38      	bge.n	800e8e4 <_puts_r+0xc4>
 800e872:	4622      	mov	r2, r4
 800e874:	210a      	movs	r1, #10
 800e876:	4628      	mov	r0, r5
 800e878:	f000 f906 	bl	800ea88 <__swbuf_r>
 800e87c:	3001      	adds	r0, #1
 800e87e:	d011      	beq.n	800e8a4 <_puts_r+0x84>
 800e880:	250a      	movs	r5, #10
 800e882:	e011      	b.n	800e8a8 <_puts_r+0x88>
 800e884:	4b1b      	ldr	r3, [pc, #108]	; (800e8f4 <_puts_r+0xd4>)
 800e886:	429c      	cmp	r4, r3
 800e888:	d101      	bne.n	800e88e <_puts_r+0x6e>
 800e88a:	68ac      	ldr	r4, [r5, #8]
 800e88c:	e7da      	b.n	800e844 <_puts_r+0x24>
 800e88e:	4b1a      	ldr	r3, [pc, #104]	; (800e8f8 <_puts_r+0xd8>)
 800e890:	429c      	cmp	r4, r3
 800e892:	bf08      	it	eq
 800e894:	68ec      	ldreq	r4, [r5, #12]
 800e896:	e7d5      	b.n	800e844 <_puts_r+0x24>
 800e898:	4621      	mov	r1, r4
 800e89a:	4628      	mov	r0, r5
 800e89c:	f000 f958 	bl	800eb50 <__swsetup_r>
 800e8a0:	2800      	cmp	r0, #0
 800e8a2:	d0dd      	beq.n	800e860 <_puts_r+0x40>
 800e8a4:	f04f 35ff 	mov.w	r5, #4294967295
 800e8a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e8aa:	07da      	lsls	r2, r3, #31
 800e8ac:	d405      	bmi.n	800e8ba <_puts_r+0x9a>
 800e8ae:	89a3      	ldrh	r3, [r4, #12]
 800e8b0:	059b      	lsls	r3, r3, #22
 800e8b2:	d402      	bmi.n	800e8ba <_puts_r+0x9a>
 800e8b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8b6:	f7ff f92b 	bl	800db10 <__retarget_lock_release_recursive>
 800e8ba:	4628      	mov	r0, r5
 800e8bc:	bd70      	pop	{r4, r5, r6, pc}
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	da04      	bge.n	800e8cc <_puts_r+0xac>
 800e8c2:	69a2      	ldr	r2, [r4, #24]
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	dc06      	bgt.n	800e8d6 <_puts_r+0xb6>
 800e8c8:	290a      	cmp	r1, #10
 800e8ca:	d004      	beq.n	800e8d6 <_puts_r+0xb6>
 800e8cc:	6823      	ldr	r3, [r4, #0]
 800e8ce:	1c5a      	adds	r2, r3, #1
 800e8d0:	6022      	str	r2, [r4, #0]
 800e8d2:	7019      	strb	r1, [r3, #0]
 800e8d4:	e7c5      	b.n	800e862 <_puts_r+0x42>
 800e8d6:	4622      	mov	r2, r4
 800e8d8:	4628      	mov	r0, r5
 800e8da:	f000 f8d5 	bl	800ea88 <__swbuf_r>
 800e8de:	3001      	adds	r0, #1
 800e8e0:	d1bf      	bne.n	800e862 <_puts_r+0x42>
 800e8e2:	e7df      	b.n	800e8a4 <_puts_r+0x84>
 800e8e4:	6823      	ldr	r3, [r4, #0]
 800e8e6:	250a      	movs	r5, #10
 800e8e8:	1c5a      	adds	r2, r3, #1
 800e8ea:	6022      	str	r2, [r4, #0]
 800e8ec:	701d      	strb	r5, [r3, #0]
 800e8ee:	e7db      	b.n	800e8a8 <_puts_r+0x88>
 800e8f0:	0801094c 	.word	0x0801094c
 800e8f4:	0801096c 	.word	0x0801096c
 800e8f8:	0801092c 	.word	0x0801092c

0800e8fc <puts>:
 800e8fc:	4b02      	ldr	r3, [pc, #8]	; (800e908 <puts+0xc>)
 800e8fe:	4601      	mov	r1, r0
 800e900:	6818      	ldr	r0, [r3, #0]
 800e902:	f7ff bf8d 	b.w	800e820 <_puts_r>
 800e906:	bf00      	nop
 800e908:	20000018 	.word	0x20000018

0800e90c <cleanup_glue>:
 800e90c:	b538      	push	{r3, r4, r5, lr}
 800e90e:	460c      	mov	r4, r1
 800e910:	6809      	ldr	r1, [r1, #0]
 800e912:	4605      	mov	r5, r0
 800e914:	b109      	cbz	r1, 800e91a <cleanup_glue+0xe>
 800e916:	f7ff fff9 	bl	800e90c <cleanup_glue>
 800e91a:	4621      	mov	r1, r4
 800e91c:	4628      	mov	r0, r5
 800e91e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e922:	f001 bd03 	b.w	801032c <_free_r>
	...

0800e928 <_reclaim_reent>:
 800e928:	4b2c      	ldr	r3, [pc, #176]	; (800e9dc <_reclaim_reent+0xb4>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	4283      	cmp	r3, r0
 800e92e:	b570      	push	{r4, r5, r6, lr}
 800e930:	4604      	mov	r4, r0
 800e932:	d051      	beq.n	800e9d8 <_reclaim_reent+0xb0>
 800e934:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e936:	b143      	cbz	r3, 800e94a <_reclaim_reent+0x22>
 800e938:	68db      	ldr	r3, [r3, #12]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d14a      	bne.n	800e9d4 <_reclaim_reent+0xac>
 800e93e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e940:	6819      	ldr	r1, [r3, #0]
 800e942:	b111      	cbz	r1, 800e94a <_reclaim_reent+0x22>
 800e944:	4620      	mov	r0, r4
 800e946:	f001 fcf1 	bl	801032c <_free_r>
 800e94a:	6961      	ldr	r1, [r4, #20]
 800e94c:	b111      	cbz	r1, 800e954 <_reclaim_reent+0x2c>
 800e94e:	4620      	mov	r0, r4
 800e950:	f001 fcec 	bl	801032c <_free_r>
 800e954:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e956:	b111      	cbz	r1, 800e95e <_reclaim_reent+0x36>
 800e958:	4620      	mov	r0, r4
 800e95a:	f001 fce7 	bl	801032c <_free_r>
 800e95e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e960:	b111      	cbz	r1, 800e968 <_reclaim_reent+0x40>
 800e962:	4620      	mov	r0, r4
 800e964:	f001 fce2 	bl	801032c <_free_r>
 800e968:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e96a:	b111      	cbz	r1, 800e972 <_reclaim_reent+0x4a>
 800e96c:	4620      	mov	r0, r4
 800e96e:	f001 fcdd 	bl	801032c <_free_r>
 800e972:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e974:	b111      	cbz	r1, 800e97c <_reclaim_reent+0x54>
 800e976:	4620      	mov	r0, r4
 800e978:	f001 fcd8 	bl	801032c <_free_r>
 800e97c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e97e:	b111      	cbz	r1, 800e986 <_reclaim_reent+0x5e>
 800e980:	4620      	mov	r0, r4
 800e982:	f001 fcd3 	bl	801032c <_free_r>
 800e986:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e988:	b111      	cbz	r1, 800e990 <_reclaim_reent+0x68>
 800e98a:	4620      	mov	r0, r4
 800e98c:	f001 fcce 	bl	801032c <_free_r>
 800e990:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e992:	b111      	cbz	r1, 800e99a <_reclaim_reent+0x72>
 800e994:	4620      	mov	r0, r4
 800e996:	f001 fcc9 	bl	801032c <_free_r>
 800e99a:	69a3      	ldr	r3, [r4, #24]
 800e99c:	b1e3      	cbz	r3, 800e9d8 <_reclaim_reent+0xb0>
 800e99e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e9a0:	4620      	mov	r0, r4
 800e9a2:	4798      	blx	r3
 800e9a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e9a6:	b1b9      	cbz	r1, 800e9d8 <_reclaim_reent+0xb0>
 800e9a8:	4620      	mov	r0, r4
 800e9aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e9ae:	f7ff bfad 	b.w	800e90c <cleanup_glue>
 800e9b2:	5949      	ldr	r1, [r1, r5]
 800e9b4:	b941      	cbnz	r1, 800e9c8 <_reclaim_reent+0xa0>
 800e9b6:	3504      	adds	r5, #4
 800e9b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e9ba:	2d80      	cmp	r5, #128	; 0x80
 800e9bc:	68d9      	ldr	r1, [r3, #12]
 800e9be:	d1f8      	bne.n	800e9b2 <_reclaim_reent+0x8a>
 800e9c0:	4620      	mov	r0, r4
 800e9c2:	f001 fcb3 	bl	801032c <_free_r>
 800e9c6:	e7ba      	b.n	800e93e <_reclaim_reent+0x16>
 800e9c8:	680e      	ldr	r6, [r1, #0]
 800e9ca:	4620      	mov	r0, r4
 800e9cc:	f001 fcae 	bl	801032c <_free_r>
 800e9d0:	4631      	mov	r1, r6
 800e9d2:	e7ef      	b.n	800e9b4 <_reclaim_reent+0x8c>
 800e9d4:	2500      	movs	r5, #0
 800e9d6:	e7ef      	b.n	800e9b8 <_reclaim_reent+0x90>
 800e9d8:	bd70      	pop	{r4, r5, r6, pc}
 800e9da:	bf00      	nop
 800e9dc:	20000018 	.word	0x20000018

0800e9e0 <_sbrk_r>:
 800e9e0:	b538      	push	{r3, r4, r5, lr}
 800e9e2:	4d06      	ldr	r5, [pc, #24]	; (800e9fc <_sbrk_r+0x1c>)
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	4604      	mov	r4, r0
 800e9e8:	4608      	mov	r0, r1
 800e9ea:	602b      	str	r3, [r5, #0]
 800e9ec:	f7f4 f948 	bl	8002c80 <_sbrk>
 800e9f0:	1c43      	adds	r3, r0, #1
 800e9f2:	d102      	bne.n	800e9fa <_sbrk_r+0x1a>
 800e9f4:	682b      	ldr	r3, [r5, #0]
 800e9f6:	b103      	cbz	r3, 800e9fa <_sbrk_r+0x1a>
 800e9f8:	6023      	str	r3, [r4, #0]
 800e9fa:	bd38      	pop	{r3, r4, r5, pc}
 800e9fc:	200056cc 	.word	0x200056cc

0800ea00 <__sread>:
 800ea00:	b510      	push	{r4, lr}
 800ea02:	460c      	mov	r4, r1
 800ea04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea08:	f001 fcdc 	bl	80103c4 <_read_r>
 800ea0c:	2800      	cmp	r0, #0
 800ea0e:	bfab      	itete	ge
 800ea10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ea12:	89a3      	ldrhlt	r3, [r4, #12]
 800ea14:	181b      	addge	r3, r3, r0
 800ea16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ea1a:	bfac      	ite	ge
 800ea1c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ea1e:	81a3      	strhlt	r3, [r4, #12]
 800ea20:	bd10      	pop	{r4, pc}

0800ea22 <__swrite>:
 800ea22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea26:	461f      	mov	r7, r3
 800ea28:	898b      	ldrh	r3, [r1, #12]
 800ea2a:	05db      	lsls	r3, r3, #23
 800ea2c:	4605      	mov	r5, r0
 800ea2e:	460c      	mov	r4, r1
 800ea30:	4616      	mov	r6, r2
 800ea32:	d505      	bpl.n	800ea40 <__swrite+0x1e>
 800ea34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea38:	2302      	movs	r3, #2
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	f001 f850 	bl	800fae0 <_lseek_r>
 800ea40:	89a3      	ldrh	r3, [r4, #12]
 800ea42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ea4a:	81a3      	strh	r3, [r4, #12]
 800ea4c:	4632      	mov	r2, r6
 800ea4e:	463b      	mov	r3, r7
 800ea50:	4628      	mov	r0, r5
 800ea52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea56:	f000 b869 	b.w	800eb2c <_write_r>

0800ea5a <__sseek>:
 800ea5a:	b510      	push	{r4, lr}
 800ea5c:	460c      	mov	r4, r1
 800ea5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea62:	f001 f83d 	bl	800fae0 <_lseek_r>
 800ea66:	1c43      	adds	r3, r0, #1
 800ea68:	89a3      	ldrh	r3, [r4, #12]
 800ea6a:	bf15      	itete	ne
 800ea6c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ea6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ea72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ea76:	81a3      	strheq	r3, [r4, #12]
 800ea78:	bf18      	it	ne
 800ea7a:	81a3      	strhne	r3, [r4, #12]
 800ea7c:	bd10      	pop	{r4, pc}

0800ea7e <__sclose>:
 800ea7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea82:	f000 b8db 	b.w	800ec3c <_close_r>
	...

0800ea88 <__swbuf_r>:
 800ea88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea8a:	460e      	mov	r6, r1
 800ea8c:	4614      	mov	r4, r2
 800ea8e:	4605      	mov	r5, r0
 800ea90:	b118      	cbz	r0, 800ea9a <__swbuf_r+0x12>
 800ea92:	6983      	ldr	r3, [r0, #24]
 800ea94:	b90b      	cbnz	r3, 800ea9a <__swbuf_r+0x12>
 800ea96:	f7fe ff65 	bl	800d964 <__sinit>
 800ea9a:	4b21      	ldr	r3, [pc, #132]	; (800eb20 <__swbuf_r+0x98>)
 800ea9c:	429c      	cmp	r4, r3
 800ea9e:	d12b      	bne.n	800eaf8 <__swbuf_r+0x70>
 800eaa0:	686c      	ldr	r4, [r5, #4]
 800eaa2:	69a3      	ldr	r3, [r4, #24]
 800eaa4:	60a3      	str	r3, [r4, #8]
 800eaa6:	89a3      	ldrh	r3, [r4, #12]
 800eaa8:	071a      	lsls	r2, r3, #28
 800eaaa:	d52f      	bpl.n	800eb0c <__swbuf_r+0x84>
 800eaac:	6923      	ldr	r3, [r4, #16]
 800eaae:	b36b      	cbz	r3, 800eb0c <__swbuf_r+0x84>
 800eab0:	6923      	ldr	r3, [r4, #16]
 800eab2:	6820      	ldr	r0, [r4, #0]
 800eab4:	1ac0      	subs	r0, r0, r3
 800eab6:	6963      	ldr	r3, [r4, #20]
 800eab8:	b2f6      	uxtb	r6, r6
 800eaba:	4283      	cmp	r3, r0
 800eabc:	4637      	mov	r7, r6
 800eabe:	dc04      	bgt.n	800eaca <__swbuf_r+0x42>
 800eac0:	4621      	mov	r1, r4
 800eac2:	4628      	mov	r0, r5
 800eac4:	f000 ffcc 	bl	800fa60 <_fflush_r>
 800eac8:	bb30      	cbnz	r0, 800eb18 <__swbuf_r+0x90>
 800eaca:	68a3      	ldr	r3, [r4, #8]
 800eacc:	3b01      	subs	r3, #1
 800eace:	60a3      	str	r3, [r4, #8]
 800ead0:	6823      	ldr	r3, [r4, #0]
 800ead2:	1c5a      	adds	r2, r3, #1
 800ead4:	6022      	str	r2, [r4, #0]
 800ead6:	701e      	strb	r6, [r3, #0]
 800ead8:	6963      	ldr	r3, [r4, #20]
 800eada:	3001      	adds	r0, #1
 800eadc:	4283      	cmp	r3, r0
 800eade:	d004      	beq.n	800eaea <__swbuf_r+0x62>
 800eae0:	89a3      	ldrh	r3, [r4, #12]
 800eae2:	07db      	lsls	r3, r3, #31
 800eae4:	d506      	bpl.n	800eaf4 <__swbuf_r+0x6c>
 800eae6:	2e0a      	cmp	r6, #10
 800eae8:	d104      	bne.n	800eaf4 <__swbuf_r+0x6c>
 800eaea:	4621      	mov	r1, r4
 800eaec:	4628      	mov	r0, r5
 800eaee:	f000 ffb7 	bl	800fa60 <_fflush_r>
 800eaf2:	b988      	cbnz	r0, 800eb18 <__swbuf_r+0x90>
 800eaf4:	4638      	mov	r0, r7
 800eaf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eaf8:	4b0a      	ldr	r3, [pc, #40]	; (800eb24 <__swbuf_r+0x9c>)
 800eafa:	429c      	cmp	r4, r3
 800eafc:	d101      	bne.n	800eb02 <__swbuf_r+0x7a>
 800eafe:	68ac      	ldr	r4, [r5, #8]
 800eb00:	e7cf      	b.n	800eaa2 <__swbuf_r+0x1a>
 800eb02:	4b09      	ldr	r3, [pc, #36]	; (800eb28 <__swbuf_r+0xa0>)
 800eb04:	429c      	cmp	r4, r3
 800eb06:	bf08      	it	eq
 800eb08:	68ec      	ldreq	r4, [r5, #12]
 800eb0a:	e7ca      	b.n	800eaa2 <__swbuf_r+0x1a>
 800eb0c:	4621      	mov	r1, r4
 800eb0e:	4628      	mov	r0, r5
 800eb10:	f000 f81e 	bl	800eb50 <__swsetup_r>
 800eb14:	2800      	cmp	r0, #0
 800eb16:	d0cb      	beq.n	800eab0 <__swbuf_r+0x28>
 800eb18:	f04f 37ff 	mov.w	r7, #4294967295
 800eb1c:	e7ea      	b.n	800eaf4 <__swbuf_r+0x6c>
 800eb1e:	bf00      	nop
 800eb20:	0801094c 	.word	0x0801094c
 800eb24:	0801096c 	.word	0x0801096c
 800eb28:	0801092c 	.word	0x0801092c

0800eb2c <_write_r>:
 800eb2c:	b538      	push	{r3, r4, r5, lr}
 800eb2e:	4d07      	ldr	r5, [pc, #28]	; (800eb4c <_write_r+0x20>)
 800eb30:	4604      	mov	r4, r0
 800eb32:	4608      	mov	r0, r1
 800eb34:	4611      	mov	r1, r2
 800eb36:	2200      	movs	r2, #0
 800eb38:	602a      	str	r2, [r5, #0]
 800eb3a:	461a      	mov	r2, r3
 800eb3c:	f7f4 f84f 	bl	8002bde <_write>
 800eb40:	1c43      	adds	r3, r0, #1
 800eb42:	d102      	bne.n	800eb4a <_write_r+0x1e>
 800eb44:	682b      	ldr	r3, [r5, #0]
 800eb46:	b103      	cbz	r3, 800eb4a <_write_r+0x1e>
 800eb48:	6023      	str	r3, [r4, #0]
 800eb4a:	bd38      	pop	{r3, r4, r5, pc}
 800eb4c:	200056cc 	.word	0x200056cc

0800eb50 <__swsetup_r>:
 800eb50:	4b32      	ldr	r3, [pc, #200]	; (800ec1c <__swsetup_r+0xcc>)
 800eb52:	b570      	push	{r4, r5, r6, lr}
 800eb54:	681d      	ldr	r5, [r3, #0]
 800eb56:	4606      	mov	r6, r0
 800eb58:	460c      	mov	r4, r1
 800eb5a:	b125      	cbz	r5, 800eb66 <__swsetup_r+0x16>
 800eb5c:	69ab      	ldr	r3, [r5, #24]
 800eb5e:	b913      	cbnz	r3, 800eb66 <__swsetup_r+0x16>
 800eb60:	4628      	mov	r0, r5
 800eb62:	f7fe feff 	bl	800d964 <__sinit>
 800eb66:	4b2e      	ldr	r3, [pc, #184]	; (800ec20 <__swsetup_r+0xd0>)
 800eb68:	429c      	cmp	r4, r3
 800eb6a:	d10f      	bne.n	800eb8c <__swsetup_r+0x3c>
 800eb6c:	686c      	ldr	r4, [r5, #4]
 800eb6e:	89a3      	ldrh	r3, [r4, #12]
 800eb70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eb74:	0719      	lsls	r1, r3, #28
 800eb76:	d42c      	bmi.n	800ebd2 <__swsetup_r+0x82>
 800eb78:	06dd      	lsls	r5, r3, #27
 800eb7a:	d411      	bmi.n	800eba0 <__swsetup_r+0x50>
 800eb7c:	2309      	movs	r3, #9
 800eb7e:	6033      	str	r3, [r6, #0]
 800eb80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eb84:	81a3      	strh	r3, [r4, #12]
 800eb86:	f04f 30ff 	mov.w	r0, #4294967295
 800eb8a:	e03e      	b.n	800ec0a <__swsetup_r+0xba>
 800eb8c:	4b25      	ldr	r3, [pc, #148]	; (800ec24 <__swsetup_r+0xd4>)
 800eb8e:	429c      	cmp	r4, r3
 800eb90:	d101      	bne.n	800eb96 <__swsetup_r+0x46>
 800eb92:	68ac      	ldr	r4, [r5, #8]
 800eb94:	e7eb      	b.n	800eb6e <__swsetup_r+0x1e>
 800eb96:	4b24      	ldr	r3, [pc, #144]	; (800ec28 <__swsetup_r+0xd8>)
 800eb98:	429c      	cmp	r4, r3
 800eb9a:	bf08      	it	eq
 800eb9c:	68ec      	ldreq	r4, [r5, #12]
 800eb9e:	e7e6      	b.n	800eb6e <__swsetup_r+0x1e>
 800eba0:	0758      	lsls	r0, r3, #29
 800eba2:	d512      	bpl.n	800ebca <__swsetup_r+0x7a>
 800eba4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eba6:	b141      	cbz	r1, 800ebba <__swsetup_r+0x6a>
 800eba8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ebac:	4299      	cmp	r1, r3
 800ebae:	d002      	beq.n	800ebb6 <__swsetup_r+0x66>
 800ebb0:	4630      	mov	r0, r6
 800ebb2:	f001 fbbb 	bl	801032c <_free_r>
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	6363      	str	r3, [r4, #52]	; 0x34
 800ebba:	89a3      	ldrh	r3, [r4, #12]
 800ebbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ebc0:	81a3      	strh	r3, [r4, #12]
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	6063      	str	r3, [r4, #4]
 800ebc6:	6923      	ldr	r3, [r4, #16]
 800ebc8:	6023      	str	r3, [r4, #0]
 800ebca:	89a3      	ldrh	r3, [r4, #12]
 800ebcc:	f043 0308 	orr.w	r3, r3, #8
 800ebd0:	81a3      	strh	r3, [r4, #12]
 800ebd2:	6923      	ldr	r3, [r4, #16]
 800ebd4:	b94b      	cbnz	r3, 800ebea <__swsetup_r+0x9a>
 800ebd6:	89a3      	ldrh	r3, [r4, #12]
 800ebd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ebdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ebe0:	d003      	beq.n	800ebea <__swsetup_r+0x9a>
 800ebe2:	4621      	mov	r1, r4
 800ebe4:	4630      	mov	r0, r6
 800ebe6:	f000 ffb3 	bl	800fb50 <__smakebuf_r>
 800ebea:	89a0      	ldrh	r0, [r4, #12]
 800ebec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ebf0:	f010 0301 	ands.w	r3, r0, #1
 800ebf4:	d00a      	beq.n	800ec0c <__swsetup_r+0xbc>
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	60a3      	str	r3, [r4, #8]
 800ebfa:	6963      	ldr	r3, [r4, #20]
 800ebfc:	425b      	negs	r3, r3
 800ebfe:	61a3      	str	r3, [r4, #24]
 800ec00:	6923      	ldr	r3, [r4, #16]
 800ec02:	b943      	cbnz	r3, 800ec16 <__swsetup_r+0xc6>
 800ec04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ec08:	d1ba      	bne.n	800eb80 <__swsetup_r+0x30>
 800ec0a:	bd70      	pop	{r4, r5, r6, pc}
 800ec0c:	0781      	lsls	r1, r0, #30
 800ec0e:	bf58      	it	pl
 800ec10:	6963      	ldrpl	r3, [r4, #20]
 800ec12:	60a3      	str	r3, [r4, #8]
 800ec14:	e7f4      	b.n	800ec00 <__swsetup_r+0xb0>
 800ec16:	2000      	movs	r0, #0
 800ec18:	e7f7      	b.n	800ec0a <__swsetup_r+0xba>
 800ec1a:	bf00      	nop
 800ec1c:	20000018 	.word	0x20000018
 800ec20:	0801094c 	.word	0x0801094c
 800ec24:	0801096c 	.word	0x0801096c
 800ec28:	0801092c 	.word	0x0801092c

0800ec2c <abort>:
 800ec2c:	b508      	push	{r3, lr}
 800ec2e:	2006      	movs	r0, #6
 800ec30:	f001 fc02 	bl	8010438 <raise>
 800ec34:	2001      	movs	r0, #1
 800ec36:	f7f3 ffab 	bl	8002b90 <_exit>
	...

0800ec3c <_close_r>:
 800ec3c:	b538      	push	{r3, r4, r5, lr}
 800ec3e:	4d06      	ldr	r5, [pc, #24]	; (800ec58 <_close_r+0x1c>)
 800ec40:	2300      	movs	r3, #0
 800ec42:	4604      	mov	r4, r0
 800ec44:	4608      	mov	r0, r1
 800ec46:	602b      	str	r3, [r5, #0]
 800ec48:	f7f3 ffe5 	bl	8002c16 <_close>
 800ec4c:	1c43      	adds	r3, r0, #1
 800ec4e:	d102      	bne.n	800ec56 <_close_r+0x1a>
 800ec50:	682b      	ldr	r3, [r5, #0]
 800ec52:	b103      	cbz	r3, 800ec56 <_close_r+0x1a>
 800ec54:	6023      	str	r3, [r4, #0]
 800ec56:	bd38      	pop	{r3, r4, r5, pc}
 800ec58:	200056cc 	.word	0x200056cc

0800ec5c <quorem>:
 800ec5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec60:	6903      	ldr	r3, [r0, #16]
 800ec62:	690c      	ldr	r4, [r1, #16]
 800ec64:	42a3      	cmp	r3, r4
 800ec66:	4607      	mov	r7, r0
 800ec68:	f2c0 8081 	blt.w	800ed6e <quorem+0x112>
 800ec6c:	3c01      	subs	r4, #1
 800ec6e:	f101 0814 	add.w	r8, r1, #20
 800ec72:	f100 0514 	add.w	r5, r0, #20
 800ec76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ec7a:	9301      	str	r3, [sp, #4]
 800ec7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ec80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ec84:	3301      	adds	r3, #1
 800ec86:	429a      	cmp	r2, r3
 800ec88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ec8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ec90:	fbb2 f6f3 	udiv	r6, r2, r3
 800ec94:	d331      	bcc.n	800ecfa <quorem+0x9e>
 800ec96:	f04f 0e00 	mov.w	lr, #0
 800ec9a:	4640      	mov	r0, r8
 800ec9c:	46ac      	mov	ip, r5
 800ec9e:	46f2      	mov	sl, lr
 800eca0:	f850 2b04 	ldr.w	r2, [r0], #4
 800eca4:	b293      	uxth	r3, r2
 800eca6:	fb06 e303 	mla	r3, r6, r3, lr
 800ecaa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ecae:	b29b      	uxth	r3, r3
 800ecb0:	ebaa 0303 	sub.w	r3, sl, r3
 800ecb4:	f8dc a000 	ldr.w	sl, [ip]
 800ecb8:	0c12      	lsrs	r2, r2, #16
 800ecba:	fa13 f38a 	uxtah	r3, r3, sl
 800ecbe:	fb06 e202 	mla	r2, r6, r2, lr
 800ecc2:	9300      	str	r3, [sp, #0]
 800ecc4:	9b00      	ldr	r3, [sp, #0]
 800ecc6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ecca:	b292      	uxth	r2, r2
 800eccc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ecd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ecd4:	f8bd 3000 	ldrh.w	r3, [sp]
 800ecd8:	4581      	cmp	r9, r0
 800ecda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ecde:	f84c 3b04 	str.w	r3, [ip], #4
 800ece2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ece6:	d2db      	bcs.n	800eca0 <quorem+0x44>
 800ece8:	f855 300b 	ldr.w	r3, [r5, fp]
 800ecec:	b92b      	cbnz	r3, 800ecfa <quorem+0x9e>
 800ecee:	9b01      	ldr	r3, [sp, #4]
 800ecf0:	3b04      	subs	r3, #4
 800ecf2:	429d      	cmp	r5, r3
 800ecf4:	461a      	mov	r2, r3
 800ecf6:	d32e      	bcc.n	800ed56 <quorem+0xfa>
 800ecf8:	613c      	str	r4, [r7, #16]
 800ecfa:	4638      	mov	r0, r7
 800ecfc:	f001 f9fe 	bl	80100fc <__mcmp>
 800ed00:	2800      	cmp	r0, #0
 800ed02:	db24      	blt.n	800ed4e <quorem+0xf2>
 800ed04:	3601      	adds	r6, #1
 800ed06:	4628      	mov	r0, r5
 800ed08:	f04f 0c00 	mov.w	ip, #0
 800ed0c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ed10:	f8d0 e000 	ldr.w	lr, [r0]
 800ed14:	b293      	uxth	r3, r2
 800ed16:	ebac 0303 	sub.w	r3, ip, r3
 800ed1a:	0c12      	lsrs	r2, r2, #16
 800ed1c:	fa13 f38e 	uxtah	r3, r3, lr
 800ed20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ed24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ed28:	b29b      	uxth	r3, r3
 800ed2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ed2e:	45c1      	cmp	r9, r8
 800ed30:	f840 3b04 	str.w	r3, [r0], #4
 800ed34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ed38:	d2e8      	bcs.n	800ed0c <quorem+0xb0>
 800ed3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ed3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ed42:	b922      	cbnz	r2, 800ed4e <quorem+0xf2>
 800ed44:	3b04      	subs	r3, #4
 800ed46:	429d      	cmp	r5, r3
 800ed48:	461a      	mov	r2, r3
 800ed4a:	d30a      	bcc.n	800ed62 <quorem+0x106>
 800ed4c:	613c      	str	r4, [r7, #16]
 800ed4e:	4630      	mov	r0, r6
 800ed50:	b003      	add	sp, #12
 800ed52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed56:	6812      	ldr	r2, [r2, #0]
 800ed58:	3b04      	subs	r3, #4
 800ed5a:	2a00      	cmp	r2, #0
 800ed5c:	d1cc      	bne.n	800ecf8 <quorem+0x9c>
 800ed5e:	3c01      	subs	r4, #1
 800ed60:	e7c7      	b.n	800ecf2 <quorem+0x96>
 800ed62:	6812      	ldr	r2, [r2, #0]
 800ed64:	3b04      	subs	r3, #4
 800ed66:	2a00      	cmp	r2, #0
 800ed68:	d1f0      	bne.n	800ed4c <quorem+0xf0>
 800ed6a:	3c01      	subs	r4, #1
 800ed6c:	e7eb      	b.n	800ed46 <quorem+0xea>
 800ed6e:	2000      	movs	r0, #0
 800ed70:	e7ee      	b.n	800ed50 <quorem+0xf4>
 800ed72:	0000      	movs	r0, r0
 800ed74:	0000      	movs	r0, r0
	...

0800ed78 <_dtoa_r>:
 800ed78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed7c:	ed2d 8b04 	vpush	{d8-d9}
 800ed80:	ec57 6b10 	vmov	r6, r7, d0
 800ed84:	b093      	sub	sp, #76	; 0x4c
 800ed86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ed88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ed8c:	9106      	str	r1, [sp, #24]
 800ed8e:	ee10 aa10 	vmov	sl, s0
 800ed92:	4604      	mov	r4, r0
 800ed94:	9209      	str	r2, [sp, #36]	; 0x24
 800ed96:	930c      	str	r3, [sp, #48]	; 0x30
 800ed98:	46bb      	mov	fp, r7
 800ed9a:	b975      	cbnz	r5, 800edba <_dtoa_r+0x42>
 800ed9c:	2010      	movs	r0, #16
 800ed9e:	f000 ff17 	bl	800fbd0 <malloc>
 800eda2:	4602      	mov	r2, r0
 800eda4:	6260      	str	r0, [r4, #36]	; 0x24
 800eda6:	b920      	cbnz	r0, 800edb2 <_dtoa_r+0x3a>
 800eda8:	4ba7      	ldr	r3, [pc, #668]	; (800f048 <_dtoa_r+0x2d0>)
 800edaa:	21ea      	movs	r1, #234	; 0xea
 800edac:	48a7      	ldr	r0, [pc, #668]	; (800f04c <_dtoa_r+0x2d4>)
 800edae:	f7fe fd5d 	bl	800d86c <__assert_func>
 800edb2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800edb6:	6005      	str	r5, [r0, #0]
 800edb8:	60c5      	str	r5, [r0, #12]
 800edba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edbc:	6819      	ldr	r1, [r3, #0]
 800edbe:	b151      	cbz	r1, 800edd6 <_dtoa_r+0x5e>
 800edc0:	685a      	ldr	r2, [r3, #4]
 800edc2:	604a      	str	r2, [r1, #4]
 800edc4:	2301      	movs	r3, #1
 800edc6:	4093      	lsls	r3, r2
 800edc8:	608b      	str	r3, [r1, #8]
 800edca:	4620      	mov	r0, r4
 800edcc:	f000 ff54 	bl	800fc78 <_Bfree>
 800edd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edd2:	2200      	movs	r2, #0
 800edd4:	601a      	str	r2, [r3, #0]
 800edd6:	1e3b      	subs	r3, r7, #0
 800edd8:	bfaa      	itet	ge
 800edda:	2300      	movge	r3, #0
 800eddc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ede0:	f8c8 3000 	strge.w	r3, [r8]
 800ede4:	4b9a      	ldr	r3, [pc, #616]	; (800f050 <_dtoa_r+0x2d8>)
 800ede6:	bfbc      	itt	lt
 800ede8:	2201      	movlt	r2, #1
 800edea:	f8c8 2000 	strlt.w	r2, [r8]
 800edee:	ea33 030b 	bics.w	r3, r3, fp
 800edf2:	d11b      	bne.n	800ee2c <_dtoa_r+0xb4>
 800edf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800edf6:	f242 730f 	movw	r3, #9999	; 0x270f
 800edfa:	6013      	str	r3, [r2, #0]
 800edfc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ee00:	4333      	orrs	r3, r6
 800ee02:	f000 8592 	beq.w	800f92a <_dtoa_r+0xbb2>
 800ee06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee08:	b963      	cbnz	r3, 800ee24 <_dtoa_r+0xac>
 800ee0a:	4b92      	ldr	r3, [pc, #584]	; (800f054 <_dtoa_r+0x2dc>)
 800ee0c:	e022      	b.n	800ee54 <_dtoa_r+0xdc>
 800ee0e:	4b92      	ldr	r3, [pc, #584]	; (800f058 <_dtoa_r+0x2e0>)
 800ee10:	9301      	str	r3, [sp, #4]
 800ee12:	3308      	adds	r3, #8
 800ee14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ee16:	6013      	str	r3, [r2, #0]
 800ee18:	9801      	ldr	r0, [sp, #4]
 800ee1a:	b013      	add	sp, #76	; 0x4c
 800ee1c:	ecbd 8b04 	vpop	{d8-d9}
 800ee20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee24:	4b8b      	ldr	r3, [pc, #556]	; (800f054 <_dtoa_r+0x2dc>)
 800ee26:	9301      	str	r3, [sp, #4]
 800ee28:	3303      	adds	r3, #3
 800ee2a:	e7f3      	b.n	800ee14 <_dtoa_r+0x9c>
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	2300      	movs	r3, #0
 800ee30:	4650      	mov	r0, sl
 800ee32:	4659      	mov	r1, fp
 800ee34:	f7f1 fe48 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee38:	ec4b ab19 	vmov	d9, sl, fp
 800ee3c:	4680      	mov	r8, r0
 800ee3e:	b158      	cbz	r0, 800ee58 <_dtoa_r+0xe0>
 800ee40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ee42:	2301      	movs	r3, #1
 800ee44:	6013      	str	r3, [r2, #0]
 800ee46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	f000 856b 	beq.w	800f924 <_dtoa_r+0xbac>
 800ee4e:	4883      	ldr	r0, [pc, #524]	; (800f05c <_dtoa_r+0x2e4>)
 800ee50:	6018      	str	r0, [r3, #0]
 800ee52:	1e43      	subs	r3, r0, #1
 800ee54:	9301      	str	r3, [sp, #4]
 800ee56:	e7df      	b.n	800ee18 <_dtoa_r+0xa0>
 800ee58:	ec4b ab10 	vmov	d0, sl, fp
 800ee5c:	aa10      	add	r2, sp, #64	; 0x40
 800ee5e:	a911      	add	r1, sp, #68	; 0x44
 800ee60:	4620      	mov	r0, r4
 800ee62:	f001 f9f1 	bl	8010248 <__d2b>
 800ee66:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ee6a:	ee08 0a10 	vmov	s16, r0
 800ee6e:	2d00      	cmp	r5, #0
 800ee70:	f000 8084 	beq.w	800ef7c <_dtoa_r+0x204>
 800ee74:	ee19 3a90 	vmov	r3, s19
 800ee78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee7c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ee80:	4656      	mov	r6, sl
 800ee82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ee86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ee8a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ee8e:	4b74      	ldr	r3, [pc, #464]	; (800f060 <_dtoa_r+0x2e8>)
 800ee90:	2200      	movs	r2, #0
 800ee92:	4630      	mov	r0, r6
 800ee94:	4639      	mov	r1, r7
 800ee96:	f7f1 f9f7 	bl	8000288 <__aeabi_dsub>
 800ee9a:	a365      	add	r3, pc, #404	; (adr r3, 800f030 <_dtoa_r+0x2b8>)
 800ee9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eea0:	f7f1 fbaa 	bl	80005f8 <__aeabi_dmul>
 800eea4:	a364      	add	r3, pc, #400	; (adr r3, 800f038 <_dtoa_r+0x2c0>)
 800eea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeaa:	f7f1 f9ef 	bl	800028c <__adddf3>
 800eeae:	4606      	mov	r6, r0
 800eeb0:	4628      	mov	r0, r5
 800eeb2:	460f      	mov	r7, r1
 800eeb4:	f7f1 fb36 	bl	8000524 <__aeabi_i2d>
 800eeb8:	a361      	add	r3, pc, #388	; (adr r3, 800f040 <_dtoa_r+0x2c8>)
 800eeba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eebe:	f7f1 fb9b 	bl	80005f8 <__aeabi_dmul>
 800eec2:	4602      	mov	r2, r0
 800eec4:	460b      	mov	r3, r1
 800eec6:	4630      	mov	r0, r6
 800eec8:	4639      	mov	r1, r7
 800eeca:	f7f1 f9df 	bl	800028c <__adddf3>
 800eece:	4606      	mov	r6, r0
 800eed0:	460f      	mov	r7, r1
 800eed2:	f7f1 fe41 	bl	8000b58 <__aeabi_d2iz>
 800eed6:	2200      	movs	r2, #0
 800eed8:	9000      	str	r0, [sp, #0]
 800eeda:	2300      	movs	r3, #0
 800eedc:	4630      	mov	r0, r6
 800eede:	4639      	mov	r1, r7
 800eee0:	f7f1 fdfc 	bl	8000adc <__aeabi_dcmplt>
 800eee4:	b150      	cbz	r0, 800eefc <_dtoa_r+0x184>
 800eee6:	9800      	ldr	r0, [sp, #0]
 800eee8:	f7f1 fb1c 	bl	8000524 <__aeabi_i2d>
 800eeec:	4632      	mov	r2, r6
 800eeee:	463b      	mov	r3, r7
 800eef0:	f7f1 fdea 	bl	8000ac8 <__aeabi_dcmpeq>
 800eef4:	b910      	cbnz	r0, 800eefc <_dtoa_r+0x184>
 800eef6:	9b00      	ldr	r3, [sp, #0]
 800eef8:	3b01      	subs	r3, #1
 800eefa:	9300      	str	r3, [sp, #0]
 800eefc:	9b00      	ldr	r3, [sp, #0]
 800eefe:	2b16      	cmp	r3, #22
 800ef00:	d85a      	bhi.n	800efb8 <_dtoa_r+0x240>
 800ef02:	9a00      	ldr	r2, [sp, #0]
 800ef04:	4b57      	ldr	r3, [pc, #348]	; (800f064 <_dtoa_r+0x2ec>)
 800ef06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ef0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef0e:	ec51 0b19 	vmov	r0, r1, d9
 800ef12:	f7f1 fde3 	bl	8000adc <__aeabi_dcmplt>
 800ef16:	2800      	cmp	r0, #0
 800ef18:	d050      	beq.n	800efbc <_dtoa_r+0x244>
 800ef1a:	9b00      	ldr	r3, [sp, #0]
 800ef1c:	3b01      	subs	r3, #1
 800ef1e:	9300      	str	r3, [sp, #0]
 800ef20:	2300      	movs	r3, #0
 800ef22:	930b      	str	r3, [sp, #44]	; 0x2c
 800ef24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ef26:	1b5d      	subs	r5, r3, r5
 800ef28:	1e6b      	subs	r3, r5, #1
 800ef2a:	9305      	str	r3, [sp, #20]
 800ef2c:	bf45      	ittet	mi
 800ef2e:	f1c5 0301 	rsbmi	r3, r5, #1
 800ef32:	9304      	strmi	r3, [sp, #16]
 800ef34:	2300      	movpl	r3, #0
 800ef36:	2300      	movmi	r3, #0
 800ef38:	bf4c      	ite	mi
 800ef3a:	9305      	strmi	r3, [sp, #20]
 800ef3c:	9304      	strpl	r3, [sp, #16]
 800ef3e:	9b00      	ldr	r3, [sp, #0]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	db3d      	blt.n	800efc0 <_dtoa_r+0x248>
 800ef44:	9b05      	ldr	r3, [sp, #20]
 800ef46:	9a00      	ldr	r2, [sp, #0]
 800ef48:	920a      	str	r2, [sp, #40]	; 0x28
 800ef4a:	4413      	add	r3, r2
 800ef4c:	9305      	str	r3, [sp, #20]
 800ef4e:	2300      	movs	r3, #0
 800ef50:	9307      	str	r3, [sp, #28]
 800ef52:	9b06      	ldr	r3, [sp, #24]
 800ef54:	2b09      	cmp	r3, #9
 800ef56:	f200 8089 	bhi.w	800f06c <_dtoa_r+0x2f4>
 800ef5a:	2b05      	cmp	r3, #5
 800ef5c:	bfc4      	itt	gt
 800ef5e:	3b04      	subgt	r3, #4
 800ef60:	9306      	strgt	r3, [sp, #24]
 800ef62:	9b06      	ldr	r3, [sp, #24]
 800ef64:	f1a3 0302 	sub.w	r3, r3, #2
 800ef68:	bfcc      	ite	gt
 800ef6a:	2500      	movgt	r5, #0
 800ef6c:	2501      	movle	r5, #1
 800ef6e:	2b03      	cmp	r3, #3
 800ef70:	f200 8087 	bhi.w	800f082 <_dtoa_r+0x30a>
 800ef74:	e8df f003 	tbb	[pc, r3]
 800ef78:	59383a2d 	.word	0x59383a2d
 800ef7c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ef80:	441d      	add	r5, r3
 800ef82:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ef86:	2b20      	cmp	r3, #32
 800ef88:	bfc1      	itttt	gt
 800ef8a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ef8e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ef92:	fa0b f303 	lslgt.w	r3, fp, r3
 800ef96:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ef9a:	bfda      	itte	le
 800ef9c:	f1c3 0320 	rsble	r3, r3, #32
 800efa0:	fa06 f003 	lslle.w	r0, r6, r3
 800efa4:	4318      	orrgt	r0, r3
 800efa6:	f7f1 faad 	bl	8000504 <__aeabi_ui2d>
 800efaa:	2301      	movs	r3, #1
 800efac:	4606      	mov	r6, r0
 800efae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800efb2:	3d01      	subs	r5, #1
 800efb4:	930e      	str	r3, [sp, #56]	; 0x38
 800efb6:	e76a      	b.n	800ee8e <_dtoa_r+0x116>
 800efb8:	2301      	movs	r3, #1
 800efba:	e7b2      	b.n	800ef22 <_dtoa_r+0x1aa>
 800efbc:	900b      	str	r0, [sp, #44]	; 0x2c
 800efbe:	e7b1      	b.n	800ef24 <_dtoa_r+0x1ac>
 800efc0:	9b04      	ldr	r3, [sp, #16]
 800efc2:	9a00      	ldr	r2, [sp, #0]
 800efc4:	1a9b      	subs	r3, r3, r2
 800efc6:	9304      	str	r3, [sp, #16]
 800efc8:	4253      	negs	r3, r2
 800efca:	9307      	str	r3, [sp, #28]
 800efcc:	2300      	movs	r3, #0
 800efce:	930a      	str	r3, [sp, #40]	; 0x28
 800efd0:	e7bf      	b.n	800ef52 <_dtoa_r+0x1da>
 800efd2:	2300      	movs	r3, #0
 800efd4:	9308      	str	r3, [sp, #32]
 800efd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efd8:	2b00      	cmp	r3, #0
 800efda:	dc55      	bgt.n	800f088 <_dtoa_r+0x310>
 800efdc:	2301      	movs	r3, #1
 800efde:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800efe2:	461a      	mov	r2, r3
 800efe4:	9209      	str	r2, [sp, #36]	; 0x24
 800efe6:	e00c      	b.n	800f002 <_dtoa_r+0x28a>
 800efe8:	2301      	movs	r3, #1
 800efea:	e7f3      	b.n	800efd4 <_dtoa_r+0x25c>
 800efec:	2300      	movs	r3, #0
 800efee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eff0:	9308      	str	r3, [sp, #32]
 800eff2:	9b00      	ldr	r3, [sp, #0]
 800eff4:	4413      	add	r3, r2
 800eff6:	9302      	str	r3, [sp, #8]
 800eff8:	3301      	adds	r3, #1
 800effa:	2b01      	cmp	r3, #1
 800effc:	9303      	str	r3, [sp, #12]
 800effe:	bfb8      	it	lt
 800f000:	2301      	movlt	r3, #1
 800f002:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f004:	2200      	movs	r2, #0
 800f006:	6042      	str	r2, [r0, #4]
 800f008:	2204      	movs	r2, #4
 800f00a:	f102 0614 	add.w	r6, r2, #20
 800f00e:	429e      	cmp	r6, r3
 800f010:	6841      	ldr	r1, [r0, #4]
 800f012:	d93d      	bls.n	800f090 <_dtoa_r+0x318>
 800f014:	4620      	mov	r0, r4
 800f016:	f000 fdef 	bl	800fbf8 <_Balloc>
 800f01a:	9001      	str	r0, [sp, #4]
 800f01c:	2800      	cmp	r0, #0
 800f01e:	d13b      	bne.n	800f098 <_dtoa_r+0x320>
 800f020:	4b11      	ldr	r3, [pc, #68]	; (800f068 <_dtoa_r+0x2f0>)
 800f022:	4602      	mov	r2, r0
 800f024:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f028:	e6c0      	b.n	800edac <_dtoa_r+0x34>
 800f02a:	2301      	movs	r3, #1
 800f02c:	e7df      	b.n	800efee <_dtoa_r+0x276>
 800f02e:	bf00      	nop
 800f030:	636f4361 	.word	0x636f4361
 800f034:	3fd287a7 	.word	0x3fd287a7
 800f038:	8b60c8b3 	.word	0x8b60c8b3
 800f03c:	3fc68a28 	.word	0x3fc68a28
 800f040:	509f79fb 	.word	0x509f79fb
 800f044:	3fd34413 	.word	0x3fd34413
 800f048:	080109e2 	.word	0x080109e2
 800f04c:	080109f9 	.word	0x080109f9
 800f050:	7ff00000 	.word	0x7ff00000
 800f054:	080109de 	.word	0x080109de
 800f058:	080109d5 	.word	0x080109d5
 800f05c:	080109b2 	.word	0x080109b2
 800f060:	3ff80000 	.word	0x3ff80000
 800f064:	08010af0 	.word	0x08010af0
 800f068:	08010a54 	.word	0x08010a54
 800f06c:	2501      	movs	r5, #1
 800f06e:	2300      	movs	r3, #0
 800f070:	9306      	str	r3, [sp, #24]
 800f072:	9508      	str	r5, [sp, #32]
 800f074:	f04f 33ff 	mov.w	r3, #4294967295
 800f078:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f07c:	2200      	movs	r2, #0
 800f07e:	2312      	movs	r3, #18
 800f080:	e7b0      	b.n	800efe4 <_dtoa_r+0x26c>
 800f082:	2301      	movs	r3, #1
 800f084:	9308      	str	r3, [sp, #32]
 800f086:	e7f5      	b.n	800f074 <_dtoa_r+0x2fc>
 800f088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f08a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f08e:	e7b8      	b.n	800f002 <_dtoa_r+0x28a>
 800f090:	3101      	adds	r1, #1
 800f092:	6041      	str	r1, [r0, #4]
 800f094:	0052      	lsls	r2, r2, #1
 800f096:	e7b8      	b.n	800f00a <_dtoa_r+0x292>
 800f098:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f09a:	9a01      	ldr	r2, [sp, #4]
 800f09c:	601a      	str	r2, [r3, #0]
 800f09e:	9b03      	ldr	r3, [sp, #12]
 800f0a0:	2b0e      	cmp	r3, #14
 800f0a2:	f200 809d 	bhi.w	800f1e0 <_dtoa_r+0x468>
 800f0a6:	2d00      	cmp	r5, #0
 800f0a8:	f000 809a 	beq.w	800f1e0 <_dtoa_r+0x468>
 800f0ac:	9b00      	ldr	r3, [sp, #0]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	dd32      	ble.n	800f118 <_dtoa_r+0x3a0>
 800f0b2:	4ab7      	ldr	r2, [pc, #732]	; (800f390 <_dtoa_r+0x618>)
 800f0b4:	f003 030f 	and.w	r3, r3, #15
 800f0b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f0bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f0c0:	9b00      	ldr	r3, [sp, #0]
 800f0c2:	05d8      	lsls	r0, r3, #23
 800f0c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f0c8:	d516      	bpl.n	800f0f8 <_dtoa_r+0x380>
 800f0ca:	4bb2      	ldr	r3, [pc, #712]	; (800f394 <_dtoa_r+0x61c>)
 800f0cc:	ec51 0b19 	vmov	r0, r1, d9
 800f0d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f0d4:	f7f1 fbba 	bl	800084c <__aeabi_ddiv>
 800f0d8:	f007 070f 	and.w	r7, r7, #15
 800f0dc:	4682      	mov	sl, r0
 800f0de:	468b      	mov	fp, r1
 800f0e0:	2503      	movs	r5, #3
 800f0e2:	4eac      	ldr	r6, [pc, #688]	; (800f394 <_dtoa_r+0x61c>)
 800f0e4:	b957      	cbnz	r7, 800f0fc <_dtoa_r+0x384>
 800f0e6:	4642      	mov	r2, r8
 800f0e8:	464b      	mov	r3, r9
 800f0ea:	4650      	mov	r0, sl
 800f0ec:	4659      	mov	r1, fp
 800f0ee:	f7f1 fbad 	bl	800084c <__aeabi_ddiv>
 800f0f2:	4682      	mov	sl, r0
 800f0f4:	468b      	mov	fp, r1
 800f0f6:	e028      	b.n	800f14a <_dtoa_r+0x3d2>
 800f0f8:	2502      	movs	r5, #2
 800f0fa:	e7f2      	b.n	800f0e2 <_dtoa_r+0x36a>
 800f0fc:	07f9      	lsls	r1, r7, #31
 800f0fe:	d508      	bpl.n	800f112 <_dtoa_r+0x39a>
 800f100:	4640      	mov	r0, r8
 800f102:	4649      	mov	r1, r9
 800f104:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f108:	f7f1 fa76 	bl	80005f8 <__aeabi_dmul>
 800f10c:	3501      	adds	r5, #1
 800f10e:	4680      	mov	r8, r0
 800f110:	4689      	mov	r9, r1
 800f112:	107f      	asrs	r7, r7, #1
 800f114:	3608      	adds	r6, #8
 800f116:	e7e5      	b.n	800f0e4 <_dtoa_r+0x36c>
 800f118:	f000 809b 	beq.w	800f252 <_dtoa_r+0x4da>
 800f11c:	9b00      	ldr	r3, [sp, #0]
 800f11e:	4f9d      	ldr	r7, [pc, #628]	; (800f394 <_dtoa_r+0x61c>)
 800f120:	425e      	negs	r6, r3
 800f122:	4b9b      	ldr	r3, [pc, #620]	; (800f390 <_dtoa_r+0x618>)
 800f124:	f006 020f 	and.w	r2, r6, #15
 800f128:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f130:	ec51 0b19 	vmov	r0, r1, d9
 800f134:	f7f1 fa60 	bl	80005f8 <__aeabi_dmul>
 800f138:	1136      	asrs	r6, r6, #4
 800f13a:	4682      	mov	sl, r0
 800f13c:	468b      	mov	fp, r1
 800f13e:	2300      	movs	r3, #0
 800f140:	2502      	movs	r5, #2
 800f142:	2e00      	cmp	r6, #0
 800f144:	d17a      	bne.n	800f23c <_dtoa_r+0x4c4>
 800f146:	2b00      	cmp	r3, #0
 800f148:	d1d3      	bne.n	800f0f2 <_dtoa_r+0x37a>
 800f14a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	f000 8082 	beq.w	800f256 <_dtoa_r+0x4de>
 800f152:	4b91      	ldr	r3, [pc, #580]	; (800f398 <_dtoa_r+0x620>)
 800f154:	2200      	movs	r2, #0
 800f156:	4650      	mov	r0, sl
 800f158:	4659      	mov	r1, fp
 800f15a:	f7f1 fcbf 	bl	8000adc <__aeabi_dcmplt>
 800f15e:	2800      	cmp	r0, #0
 800f160:	d079      	beq.n	800f256 <_dtoa_r+0x4de>
 800f162:	9b03      	ldr	r3, [sp, #12]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d076      	beq.n	800f256 <_dtoa_r+0x4de>
 800f168:	9b02      	ldr	r3, [sp, #8]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	dd36      	ble.n	800f1dc <_dtoa_r+0x464>
 800f16e:	9b00      	ldr	r3, [sp, #0]
 800f170:	4650      	mov	r0, sl
 800f172:	4659      	mov	r1, fp
 800f174:	1e5f      	subs	r7, r3, #1
 800f176:	2200      	movs	r2, #0
 800f178:	4b88      	ldr	r3, [pc, #544]	; (800f39c <_dtoa_r+0x624>)
 800f17a:	f7f1 fa3d 	bl	80005f8 <__aeabi_dmul>
 800f17e:	9e02      	ldr	r6, [sp, #8]
 800f180:	4682      	mov	sl, r0
 800f182:	468b      	mov	fp, r1
 800f184:	3501      	adds	r5, #1
 800f186:	4628      	mov	r0, r5
 800f188:	f7f1 f9cc 	bl	8000524 <__aeabi_i2d>
 800f18c:	4652      	mov	r2, sl
 800f18e:	465b      	mov	r3, fp
 800f190:	f7f1 fa32 	bl	80005f8 <__aeabi_dmul>
 800f194:	4b82      	ldr	r3, [pc, #520]	; (800f3a0 <_dtoa_r+0x628>)
 800f196:	2200      	movs	r2, #0
 800f198:	f7f1 f878 	bl	800028c <__adddf3>
 800f19c:	46d0      	mov	r8, sl
 800f19e:	46d9      	mov	r9, fp
 800f1a0:	4682      	mov	sl, r0
 800f1a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f1a6:	2e00      	cmp	r6, #0
 800f1a8:	d158      	bne.n	800f25c <_dtoa_r+0x4e4>
 800f1aa:	4b7e      	ldr	r3, [pc, #504]	; (800f3a4 <_dtoa_r+0x62c>)
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	4640      	mov	r0, r8
 800f1b0:	4649      	mov	r1, r9
 800f1b2:	f7f1 f869 	bl	8000288 <__aeabi_dsub>
 800f1b6:	4652      	mov	r2, sl
 800f1b8:	465b      	mov	r3, fp
 800f1ba:	4680      	mov	r8, r0
 800f1bc:	4689      	mov	r9, r1
 800f1be:	f7f1 fcab 	bl	8000b18 <__aeabi_dcmpgt>
 800f1c2:	2800      	cmp	r0, #0
 800f1c4:	f040 8295 	bne.w	800f6f2 <_dtoa_r+0x97a>
 800f1c8:	4652      	mov	r2, sl
 800f1ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f1ce:	4640      	mov	r0, r8
 800f1d0:	4649      	mov	r1, r9
 800f1d2:	f7f1 fc83 	bl	8000adc <__aeabi_dcmplt>
 800f1d6:	2800      	cmp	r0, #0
 800f1d8:	f040 8289 	bne.w	800f6ee <_dtoa_r+0x976>
 800f1dc:	ec5b ab19 	vmov	sl, fp, d9
 800f1e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	f2c0 8148 	blt.w	800f478 <_dtoa_r+0x700>
 800f1e8:	9a00      	ldr	r2, [sp, #0]
 800f1ea:	2a0e      	cmp	r2, #14
 800f1ec:	f300 8144 	bgt.w	800f478 <_dtoa_r+0x700>
 800f1f0:	4b67      	ldr	r3, [pc, #412]	; (800f390 <_dtoa_r+0x618>)
 800f1f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f1f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	f280 80d5 	bge.w	800f3ac <_dtoa_r+0x634>
 800f202:	9b03      	ldr	r3, [sp, #12]
 800f204:	2b00      	cmp	r3, #0
 800f206:	f300 80d1 	bgt.w	800f3ac <_dtoa_r+0x634>
 800f20a:	f040 826f 	bne.w	800f6ec <_dtoa_r+0x974>
 800f20e:	4b65      	ldr	r3, [pc, #404]	; (800f3a4 <_dtoa_r+0x62c>)
 800f210:	2200      	movs	r2, #0
 800f212:	4640      	mov	r0, r8
 800f214:	4649      	mov	r1, r9
 800f216:	f7f1 f9ef 	bl	80005f8 <__aeabi_dmul>
 800f21a:	4652      	mov	r2, sl
 800f21c:	465b      	mov	r3, fp
 800f21e:	f7f1 fc71 	bl	8000b04 <__aeabi_dcmpge>
 800f222:	9e03      	ldr	r6, [sp, #12]
 800f224:	4637      	mov	r7, r6
 800f226:	2800      	cmp	r0, #0
 800f228:	f040 8245 	bne.w	800f6b6 <_dtoa_r+0x93e>
 800f22c:	9d01      	ldr	r5, [sp, #4]
 800f22e:	2331      	movs	r3, #49	; 0x31
 800f230:	f805 3b01 	strb.w	r3, [r5], #1
 800f234:	9b00      	ldr	r3, [sp, #0]
 800f236:	3301      	adds	r3, #1
 800f238:	9300      	str	r3, [sp, #0]
 800f23a:	e240      	b.n	800f6be <_dtoa_r+0x946>
 800f23c:	07f2      	lsls	r2, r6, #31
 800f23e:	d505      	bpl.n	800f24c <_dtoa_r+0x4d4>
 800f240:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f244:	f7f1 f9d8 	bl	80005f8 <__aeabi_dmul>
 800f248:	3501      	adds	r5, #1
 800f24a:	2301      	movs	r3, #1
 800f24c:	1076      	asrs	r6, r6, #1
 800f24e:	3708      	adds	r7, #8
 800f250:	e777      	b.n	800f142 <_dtoa_r+0x3ca>
 800f252:	2502      	movs	r5, #2
 800f254:	e779      	b.n	800f14a <_dtoa_r+0x3d2>
 800f256:	9f00      	ldr	r7, [sp, #0]
 800f258:	9e03      	ldr	r6, [sp, #12]
 800f25a:	e794      	b.n	800f186 <_dtoa_r+0x40e>
 800f25c:	9901      	ldr	r1, [sp, #4]
 800f25e:	4b4c      	ldr	r3, [pc, #304]	; (800f390 <_dtoa_r+0x618>)
 800f260:	4431      	add	r1, r6
 800f262:	910d      	str	r1, [sp, #52]	; 0x34
 800f264:	9908      	ldr	r1, [sp, #32]
 800f266:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f26a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f26e:	2900      	cmp	r1, #0
 800f270:	d043      	beq.n	800f2fa <_dtoa_r+0x582>
 800f272:	494d      	ldr	r1, [pc, #308]	; (800f3a8 <_dtoa_r+0x630>)
 800f274:	2000      	movs	r0, #0
 800f276:	f7f1 fae9 	bl	800084c <__aeabi_ddiv>
 800f27a:	4652      	mov	r2, sl
 800f27c:	465b      	mov	r3, fp
 800f27e:	f7f1 f803 	bl	8000288 <__aeabi_dsub>
 800f282:	9d01      	ldr	r5, [sp, #4]
 800f284:	4682      	mov	sl, r0
 800f286:	468b      	mov	fp, r1
 800f288:	4649      	mov	r1, r9
 800f28a:	4640      	mov	r0, r8
 800f28c:	f7f1 fc64 	bl	8000b58 <__aeabi_d2iz>
 800f290:	4606      	mov	r6, r0
 800f292:	f7f1 f947 	bl	8000524 <__aeabi_i2d>
 800f296:	4602      	mov	r2, r0
 800f298:	460b      	mov	r3, r1
 800f29a:	4640      	mov	r0, r8
 800f29c:	4649      	mov	r1, r9
 800f29e:	f7f0 fff3 	bl	8000288 <__aeabi_dsub>
 800f2a2:	3630      	adds	r6, #48	; 0x30
 800f2a4:	f805 6b01 	strb.w	r6, [r5], #1
 800f2a8:	4652      	mov	r2, sl
 800f2aa:	465b      	mov	r3, fp
 800f2ac:	4680      	mov	r8, r0
 800f2ae:	4689      	mov	r9, r1
 800f2b0:	f7f1 fc14 	bl	8000adc <__aeabi_dcmplt>
 800f2b4:	2800      	cmp	r0, #0
 800f2b6:	d163      	bne.n	800f380 <_dtoa_r+0x608>
 800f2b8:	4642      	mov	r2, r8
 800f2ba:	464b      	mov	r3, r9
 800f2bc:	4936      	ldr	r1, [pc, #216]	; (800f398 <_dtoa_r+0x620>)
 800f2be:	2000      	movs	r0, #0
 800f2c0:	f7f0 ffe2 	bl	8000288 <__aeabi_dsub>
 800f2c4:	4652      	mov	r2, sl
 800f2c6:	465b      	mov	r3, fp
 800f2c8:	f7f1 fc08 	bl	8000adc <__aeabi_dcmplt>
 800f2cc:	2800      	cmp	r0, #0
 800f2ce:	f040 80b5 	bne.w	800f43c <_dtoa_r+0x6c4>
 800f2d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f2d4:	429d      	cmp	r5, r3
 800f2d6:	d081      	beq.n	800f1dc <_dtoa_r+0x464>
 800f2d8:	4b30      	ldr	r3, [pc, #192]	; (800f39c <_dtoa_r+0x624>)
 800f2da:	2200      	movs	r2, #0
 800f2dc:	4650      	mov	r0, sl
 800f2de:	4659      	mov	r1, fp
 800f2e0:	f7f1 f98a 	bl	80005f8 <__aeabi_dmul>
 800f2e4:	4b2d      	ldr	r3, [pc, #180]	; (800f39c <_dtoa_r+0x624>)
 800f2e6:	4682      	mov	sl, r0
 800f2e8:	468b      	mov	fp, r1
 800f2ea:	4640      	mov	r0, r8
 800f2ec:	4649      	mov	r1, r9
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	f7f1 f982 	bl	80005f8 <__aeabi_dmul>
 800f2f4:	4680      	mov	r8, r0
 800f2f6:	4689      	mov	r9, r1
 800f2f8:	e7c6      	b.n	800f288 <_dtoa_r+0x510>
 800f2fa:	4650      	mov	r0, sl
 800f2fc:	4659      	mov	r1, fp
 800f2fe:	f7f1 f97b 	bl	80005f8 <__aeabi_dmul>
 800f302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f304:	9d01      	ldr	r5, [sp, #4]
 800f306:	930f      	str	r3, [sp, #60]	; 0x3c
 800f308:	4682      	mov	sl, r0
 800f30a:	468b      	mov	fp, r1
 800f30c:	4649      	mov	r1, r9
 800f30e:	4640      	mov	r0, r8
 800f310:	f7f1 fc22 	bl	8000b58 <__aeabi_d2iz>
 800f314:	4606      	mov	r6, r0
 800f316:	f7f1 f905 	bl	8000524 <__aeabi_i2d>
 800f31a:	3630      	adds	r6, #48	; 0x30
 800f31c:	4602      	mov	r2, r0
 800f31e:	460b      	mov	r3, r1
 800f320:	4640      	mov	r0, r8
 800f322:	4649      	mov	r1, r9
 800f324:	f7f0 ffb0 	bl	8000288 <__aeabi_dsub>
 800f328:	f805 6b01 	strb.w	r6, [r5], #1
 800f32c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f32e:	429d      	cmp	r5, r3
 800f330:	4680      	mov	r8, r0
 800f332:	4689      	mov	r9, r1
 800f334:	f04f 0200 	mov.w	r2, #0
 800f338:	d124      	bne.n	800f384 <_dtoa_r+0x60c>
 800f33a:	4b1b      	ldr	r3, [pc, #108]	; (800f3a8 <_dtoa_r+0x630>)
 800f33c:	4650      	mov	r0, sl
 800f33e:	4659      	mov	r1, fp
 800f340:	f7f0 ffa4 	bl	800028c <__adddf3>
 800f344:	4602      	mov	r2, r0
 800f346:	460b      	mov	r3, r1
 800f348:	4640      	mov	r0, r8
 800f34a:	4649      	mov	r1, r9
 800f34c:	f7f1 fbe4 	bl	8000b18 <__aeabi_dcmpgt>
 800f350:	2800      	cmp	r0, #0
 800f352:	d173      	bne.n	800f43c <_dtoa_r+0x6c4>
 800f354:	4652      	mov	r2, sl
 800f356:	465b      	mov	r3, fp
 800f358:	4913      	ldr	r1, [pc, #76]	; (800f3a8 <_dtoa_r+0x630>)
 800f35a:	2000      	movs	r0, #0
 800f35c:	f7f0 ff94 	bl	8000288 <__aeabi_dsub>
 800f360:	4602      	mov	r2, r0
 800f362:	460b      	mov	r3, r1
 800f364:	4640      	mov	r0, r8
 800f366:	4649      	mov	r1, r9
 800f368:	f7f1 fbb8 	bl	8000adc <__aeabi_dcmplt>
 800f36c:	2800      	cmp	r0, #0
 800f36e:	f43f af35 	beq.w	800f1dc <_dtoa_r+0x464>
 800f372:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f374:	1e6b      	subs	r3, r5, #1
 800f376:	930f      	str	r3, [sp, #60]	; 0x3c
 800f378:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f37c:	2b30      	cmp	r3, #48	; 0x30
 800f37e:	d0f8      	beq.n	800f372 <_dtoa_r+0x5fa>
 800f380:	9700      	str	r7, [sp, #0]
 800f382:	e049      	b.n	800f418 <_dtoa_r+0x6a0>
 800f384:	4b05      	ldr	r3, [pc, #20]	; (800f39c <_dtoa_r+0x624>)
 800f386:	f7f1 f937 	bl	80005f8 <__aeabi_dmul>
 800f38a:	4680      	mov	r8, r0
 800f38c:	4689      	mov	r9, r1
 800f38e:	e7bd      	b.n	800f30c <_dtoa_r+0x594>
 800f390:	08010af0 	.word	0x08010af0
 800f394:	08010ac8 	.word	0x08010ac8
 800f398:	3ff00000 	.word	0x3ff00000
 800f39c:	40240000 	.word	0x40240000
 800f3a0:	401c0000 	.word	0x401c0000
 800f3a4:	40140000 	.word	0x40140000
 800f3a8:	3fe00000 	.word	0x3fe00000
 800f3ac:	9d01      	ldr	r5, [sp, #4]
 800f3ae:	4656      	mov	r6, sl
 800f3b0:	465f      	mov	r7, fp
 800f3b2:	4642      	mov	r2, r8
 800f3b4:	464b      	mov	r3, r9
 800f3b6:	4630      	mov	r0, r6
 800f3b8:	4639      	mov	r1, r7
 800f3ba:	f7f1 fa47 	bl	800084c <__aeabi_ddiv>
 800f3be:	f7f1 fbcb 	bl	8000b58 <__aeabi_d2iz>
 800f3c2:	4682      	mov	sl, r0
 800f3c4:	f7f1 f8ae 	bl	8000524 <__aeabi_i2d>
 800f3c8:	4642      	mov	r2, r8
 800f3ca:	464b      	mov	r3, r9
 800f3cc:	f7f1 f914 	bl	80005f8 <__aeabi_dmul>
 800f3d0:	4602      	mov	r2, r0
 800f3d2:	460b      	mov	r3, r1
 800f3d4:	4630      	mov	r0, r6
 800f3d6:	4639      	mov	r1, r7
 800f3d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f3dc:	f7f0 ff54 	bl	8000288 <__aeabi_dsub>
 800f3e0:	f805 6b01 	strb.w	r6, [r5], #1
 800f3e4:	9e01      	ldr	r6, [sp, #4]
 800f3e6:	9f03      	ldr	r7, [sp, #12]
 800f3e8:	1bae      	subs	r6, r5, r6
 800f3ea:	42b7      	cmp	r7, r6
 800f3ec:	4602      	mov	r2, r0
 800f3ee:	460b      	mov	r3, r1
 800f3f0:	d135      	bne.n	800f45e <_dtoa_r+0x6e6>
 800f3f2:	f7f0 ff4b 	bl	800028c <__adddf3>
 800f3f6:	4642      	mov	r2, r8
 800f3f8:	464b      	mov	r3, r9
 800f3fa:	4606      	mov	r6, r0
 800f3fc:	460f      	mov	r7, r1
 800f3fe:	f7f1 fb8b 	bl	8000b18 <__aeabi_dcmpgt>
 800f402:	b9d0      	cbnz	r0, 800f43a <_dtoa_r+0x6c2>
 800f404:	4642      	mov	r2, r8
 800f406:	464b      	mov	r3, r9
 800f408:	4630      	mov	r0, r6
 800f40a:	4639      	mov	r1, r7
 800f40c:	f7f1 fb5c 	bl	8000ac8 <__aeabi_dcmpeq>
 800f410:	b110      	cbz	r0, 800f418 <_dtoa_r+0x6a0>
 800f412:	f01a 0f01 	tst.w	sl, #1
 800f416:	d110      	bne.n	800f43a <_dtoa_r+0x6c2>
 800f418:	4620      	mov	r0, r4
 800f41a:	ee18 1a10 	vmov	r1, s16
 800f41e:	f000 fc2b 	bl	800fc78 <_Bfree>
 800f422:	2300      	movs	r3, #0
 800f424:	9800      	ldr	r0, [sp, #0]
 800f426:	702b      	strb	r3, [r5, #0]
 800f428:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f42a:	3001      	adds	r0, #1
 800f42c:	6018      	str	r0, [r3, #0]
 800f42e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f430:	2b00      	cmp	r3, #0
 800f432:	f43f acf1 	beq.w	800ee18 <_dtoa_r+0xa0>
 800f436:	601d      	str	r5, [r3, #0]
 800f438:	e4ee      	b.n	800ee18 <_dtoa_r+0xa0>
 800f43a:	9f00      	ldr	r7, [sp, #0]
 800f43c:	462b      	mov	r3, r5
 800f43e:	461d      	mov	r5, r3
 800f440:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f444:	2a39      	cmp	r2, #57	; 0x39
 800f446:	d106      	bne.n	800f456 <_dtoa_r+0x6de>
 800f448:	9a01      	ldr	r2, [sp, #4]
 800f44a:	429a      	cmp	r2, r3
 800f44c:	d1f7      	bne.n	800f43e <_dtoa_r+0x6c6>
 800f44e:	9901      	ldr	r1, [sp, #4]
 800f450:	2230      	movs	r2, #48	; 0x30
 800f452:	3701      	adds	r7, #1
 800f454:	700a      	strb	r2, [r1, #0]
 800f456:	781a      	ldrb	r2, [r3, #0]
 800f458:	3201      	adds	r2, #1
 800f45a:	701a      	strb	r2, [r3, #0]
 800f45c:	e790      	b.n	800f380 <_dtoa_r+0x608>
 800f45e:	4ba6      	ldr	r3, [pc, #664]	; (800f6f8 <_dtoa_r+0x980>)
 800f460:	2200      	movs	r2, #0
 800f462:	f7f1 f8c9 	bl	80005f8 <__aeabi_dmul>
 800f466:	2200      	movs	r2, #0
 800f468:	2300      	movs	r3, #0
 800f46a:	4606      	mov	r6, r0
 800f46c:	460f      	mov	r7, r1
 800f46e:	f7f1 fb2b 	bl	8000ac8 <__aeabi_dcmpeq>
 800f472:	2800      	cmp	r0, #0
 800f474:	d09d      	beq.n	800f3b2 <_dtoa_r+0x63a>
 800f476:	e7cf      	b.n	800f418 <_dtoa_r+0x6a0>
 800f478:	9a08      	ldr	r2, [sp, #32]
 800f47a:	2a00      	cmp	r2, #0
 800f47c:	f000 80d7 	beq.w	800f62e <_dtoa_r+0x8b6>
 800f480:	9a06      	ldr	r2, [sp, #24]
 800f482:	2a01      	cmp	r2, #1
 800f484:	f300 80ba 	bgt.w	800f5fc <_dtoa_r+0x884>
 800f488:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f48a:	2a00      	cmp	r2, #0
 800f48c:	f000 80b2 	beq.w	800f5f4 <_dtoa_r+0x87c>
 800f490:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f494:	9e07      	ldr	r6, [sp, #28]
 800f496:	9d04      	ldr	r5, [sp, #16]
 800f498:	9a04      	ldr	r2, [sp, #16]
 800f49a:	441a      	add	r2, r3
 800f49c:	9204      	str	r2, [sp, #16]
 800f49e:	9a05      	ldr	r2, [sp, #20]
 800f4a0:	2101      	movs	r1, #1
 800f4a2:	441a      	add	r2, r3
 800f4a4:	4620      	mov	r0, r4
 800f4a6:	9205      	str	r2, [sp, #20]
 800f4a8:	f000 fc9e 	bl	800fde8 <__i2b>
 800f4ac:	4607      	mov	r7, r0
 800f4ae:	2d00      	cmp	r5, #0
 800f4b0:	dd0c      	ble.n	800f4cc <_dtoa_r+0x754>
 800f4b2:	9b05      	ldr	r3, [sp, #20]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	dd09      	ble.n	800f4cc <_dtoa_r+0x754>
 800f4b8:	42ab      	cmp	r3, r5
 800f4ba:	9a04      	ldr	r2, [sp, #16]
 800f4bc:	bfa8      	it	ge
 800f4be:	462b      	movge	r3, r5
 800f4c0:	1ad2      	subs	r2, r2, r3
 800f4c2:	9204      	str	r2, [sp, #16]
 800f4c4:	9a05      	ldr	r2, [sp, #20]
 800f4c6:	1aed      	subs	r5, r5, r3
 800f4c8:	1ad3      	subs	r3, r2, r3
 800f4ca:	9305      	str	r3, [sp, #20]
 800f4cc:	9b07      	ldr	r3, [sp, #28]
 800f4ce:	b31b      	cbz	r3, 800f518 <_dtoa_r+0x7a0>
 800f4d0:	9b08      	ldr	r3, [sp, #32]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	f000 80af 	beq.w	800f636 <_dtoa_r+0x8be>
 800f4d8:	2e00      	cmp	r6, #0
 800f4da:	dd13      	ble.n	800f504 <_dtoa_r+0x78c>
 800f4dc:	4639      	mov	r1, r7
 800f4de:	4632      	mov	r2, r6
 800f4e0:	4620      	mov	r0, r4
 800f4e2:	f000 fd41 	bl	800ff68 <__pow5mult>
 800f4e6:	ee18 2a10 	vmov	r2, s16
 800f4ea:	4601      	mov	r1, r0
 800f4ec:	4607      	mov	r7, r0
 800f4ee:	4620      	mov	r0, r4
 800f4f0:	f000 fc90 	bl	800fe14 <__multiply>
 800f4f4:	ee18 1a10 	vmov	r1, s16
 800f4f8:	4680      	mov	r8, r0
 800f4fa:	4620      	mov	r0, r4
 800f4fc:	f000 fbbc 	bl	800fc78 <_Bfree>
 800f500:	ee08 8a10 	vmov	s16, r8
 800f504:	9b07      	ldr	r3, [sp, #28]
 800f506:	1b9a      	subs	r2, r3, r6
 800f508:	d006      	beq.n	800f518 <_dtoa_r+0x7a0>
 800f50a:	ee18 1a10 	vmov	r1, s16
 800f50e:	4620      	mov	r0, r4
 800f510:	f000 fd2a 	bl	800ff68 <__pow5mult>
 800f514:	ee08 0a10 	vmov	s16, r0
 800f518:	2101      	movs	r1, #1
 800f51a:	4620      	mov	r0, r4
 800f51c:	f000 fc64 	bl	800fde8 <__i2b>
 800f520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f522:	2b00      	cmp	r3, #0
 800f524:	4606      	mov	r6, r0
 800f526:	f340 8088 	ble.w	800f63a <_dtoa_r+0x8c2>
 800f52a:	461a      	mov	r2, r3
 800f52c:	4601      	mov	r1, r0
 800f52e:	4620      	mov	r0, r4
 800f530:	f000 fd1a 	bl	800ff68 <__pow5mult>
 800f534:	9b06      	ldr	r3, [sp, #24]
 800f536:	2b01      	cmp	r3, #1
 800f538:	4606      	mov	r6, r0
 800f53a:	f340 8081 	ble.w	800f640 <_dtoa_r+0x8c8>
 800f53e:	f04f 0800 	mov.w	r8, #0
 800f542:	6933      	ldr	r3, [r6, #16]
 800f544:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f548:	6918      	ldr	r0, [r3, #16]
 800f54a:	f000 fbfd 	bl	800fd48 <__hi0bits>
 800f54e:	f1c0 0020 	rsb	r0, r0, #32
 800f552:	9b05      	ldr	r3, [sp, #20]
 800f554:	4418      	add	r0, r3
 800f556:	f010 001f 	ands.w	r0, r0, #31
 800f55a:	f000 8092 	beq.w	800f682 <_dtoa_r+0x90a>
 800f55e:	f1c0 0320 	rsb	r3, r0, #32
 800f562:	2b04      	cmp	r3, #4
 800f564:	f340 808a 	ble.w	800f67c <_dtoa_r+0x904>
 800f568:	f1c0 001c 	rsb	r0, r0, #28
 800f56c:	9b04      	ldr	r3, [sp, #16]
 800f56e:	4403      	add	r3, r0
 800f570:	9304      	str	r3, [sp, #16]
 800f572:	9b05      	ldr	r3, [sp, #20]
 800f574:	4403      	add	r3, r0
 800f576:	4405      	add	r5, r0
 800f578:	9305      	str	r3, [sp, #20]
 800f57a:	9b04      	ldr	r3, [sp, #16]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	dd07      	ble.n	800f590 <_dtoa_r+0x818>
 800f580:	ee18 1a10 	vmov	r1, s16
 800f584:	461a      	mov	r2, r3
 800f586:	4620      	mov	r0, r4
 800f588:	f000 fd48 	bl	801001c <__lshift>
 800f58c:	ee08 0a10 	vmov	s16, r0
 800f590:	9b05      	ldr	r3, [sp, #20]
 800f592:	2b00      	cmp	r3, #0
 800f594:	dd05      	ble.n	800f5a2 <_dtoa_r+0x82a>
 800f596:	4631      	mov	r1, r6
 800f598:	461a      	mov	r2, r3
 800f59a:	4620      	mov	r0, r4
 800f59c:	f000 fd3e 	bl	801001c <__lshift>
 800f5a0:	4606      	mov	r6, r0
 800f5a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d06e      	beq.n	800f686 <_dtoa_r+0x90e>
 800f5a8:	ee18 0a10 	vmov	r0, s16
 800f5ac:	4631      	mov	r1, r6
 800f5ae:	f000 fda5 	bl	80100fc <__mcmp>
 800f5b2:	2800      	cmp	r0, #0
 800f5b4:	da67      	bge.n	800f686 <_dtoa_r+0x90e>
 800f5b6:	9b00      	ldr	r3, [sp, #0]
 800f5b8:	3b01      	subs	r3, #1
 800f5ba:	ee18 1a10 	vmov	r1, s16
 800f5be:	9300      	str	r3, [sp, #0]
 800f5c0:	220a      	movs	r2, #10
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	4620      	mov	r0, r4
 800f5c6:	f000 fb79 	bl	800fcbc <__multadd>
 800f5ca:	9b08      	ldr	r3, [sp, #32]
 800f5cc:	ee08 0a10 	vmov	s16, r0
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	f000 81b1 	beq.w	800f938 <_dtoa_r+0xbc0>
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	4639      	mov	r1, r7
 800f5da:	220a      	movs	r2, #10
 800f5dc:	4620      	mov	r0, r4
 800f5de:	f000 fb6d 	bl	800fcbc <__multadd>
 800f5e2:	9b02      	ldr	r3, [sp, #8]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	4607      	mov	r7, r0
 800f5e8:	f300 808e 	bgt.w	800f708 <_dtoa_r+0x990>
 800f5ec:	9b06      	ldr	r3, [sp, #24]
 800f5ee:	2b02      	cmp	r3, #2
 800f5f0:	dc51      	bgt.n	800f696 <_dtoa_r+0x91e>
 800f5f2:	e089      	b.n	800f708 <_dtoa_r+0x990>
 800f5f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f5f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f5fa:	e74b      	b.n	800f494 <_dtoa_r+0x71c>
 800f5fc:	9b03      	ldr	r3, [sp, #12]
 800f5fe:	1e5e      	subs	r6, r3, #1
 800f600:	9b07      	ldr	r3, [sp, #28]
 800f602:	42b3      	cmp	r3, r6
 800f604:	bfbf      	itttt	lt
 800f606:	9b07      	ldrlt	r3, [sp, #28]
 800f608:	9607      	strlt	r6, [sp, #28]
 800f60a:	1af2      	sublt	r2, r6, r3
 800f60c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f60e:	bfb6      	itet	lt
 800f610:	189b      	addlt	r3, r3, r2
 800f612:	1b9e      	subge	r6, r3, r6
 800f614:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f616:	9b03      	ldr	r3, [sp, #12]
 800f618:	bfb8      	it	lt
 800f61a:	2600      	movlt	r6, #0
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	bfb7      	itett	lt
 800f620:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f624:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f628:	1a9d      	sublt	r5, r3, r2
 800f62a:	2300      	movlt	r3, #0
 800f62c:	e734      	b.n	800f498 <_dtoa_r+0x720>
 800f62e:	9e07      	ldr	r6, [sp, #28]
 800f630:	9d04      	ldr	r5, [sp, #16]
 800f632:	9f08      	ldr	r7, [sp, #32]
 800f634:	e73b      	b.n	800f4ae <_dtoa_r+0x736>
 800f636:	9a07      	ldr	r2, [sp, #28]
 800f638:	e767      	b.n	800f50a <_dtoa_r+0x792>
 800f63a:	9b06      	ldr	r3, [sp, #24]
 800f63c:	2b01      	cmp	r3, #1
 800f63e:	dc18      	bgt.n	800f672 <_dtoa_r+0x8fa>
 800f640:	f1ba 0f00 	cmp.w	sl, #0
 800f644:	d115      	bne.n	800f672 <_dtoa_r+0x8fa>
 800f646:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f64a:	b993      	cbnz	r3, 800f672 <_dtoa_r+0x8fa>
 800f64c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f650:	0d1b      	lsrs	r3, r3, #20
 800f652:	051b      	lsls	r3, r3, #20
 800f654:	b183      	cbz	r3, 800f678 <_dtoa_r+0x900>
 800f656:	9b04      	ldr	r3, [sp, #16]
 800f658:	3301      	adds	r3, #1
 800f65a:	9304      	str	r3, [sp, #16]
 800f65c:	9b05      	ldr	r3, [sp, #20]
 800f65e:	3301      	adds	r3, #1
 800f660:	9305      	str	r3, [sp, #20]
 800f662:	f04f 0801 	mov.w	r8, #1
 800f666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f668:	2b00      	cmp	r3, #0
 800f66a:	f47f af6a 	bne.w	800f542 <_dtoa_r+0x7ca>
 800f66e:	2001      	movs	r0, #1
 800f670:	e76f      	b.n	800f552 <_dtoa_r+0x7da>
 800f672:	f04f 0800 	mov.w	r8, #0
 800f676:	e7f6      	b.n	800f666 <_dtoa_r+0x8ee>
 800f678:	4698      	mov	r8, r3
 800f67a:	e7f4      	b.n	800f666 <_dtoa_r+0x8ee>
 800f67c:	f43f af7d 	beq.w	800f57a <_dtoa_r+0x802>
 800f680:	4618      	mov	r0, r3
 800f682:	301c      	adds	r0, #28
 800f684:	e772      	b.n	800f56c <_dtoa_r+0x7f4>
 800f686:	9b03      	ldr	r3, [sp, #12]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	dc37      	bgt.n	800f6fc <_dtoa_r+0x984>
 800f68c:	9b06      	ldr	r3, [sp, #24]
 800f68e:	2b02      	cmp	r3, #2
 800f690:	dd34      	ble.n	800f6fc <_dtoa_r+0x984>
 800f692:	9b03      	ldr	r3, [sp, #12]
 800f694:	9302      	str	r3, [sp, #8]
 800f696:	9b02      	ldr	r3, [sp, #8]
 800f698:	b96b      	cbnz	r3, 800f6b6 <_dtoa_r+0x93e>
 800f69a:	4631      	mov	r1, r6
 800f69c:	2205      	movs	r2, #5
 800f69e:	4620      	mov	r0, r4
 800f6a0:	f000 fb0c 	bl	800fcbc <__multadd>
 800f6a4:	4601      	mov	r1, r0
 800f6a6:	4606      	mov	r6, r0
 800f6a8:	ee18 0a10 	vmov	r0, s16
 800f6ac:	f000 fd26 	bl	80100fc <__mcmp>
 800f6b0:	2800      	cmp	r0, #0
 800f6b2:	f73f adbb 	bgt.w	800f22c <_dtoa_r+0x4b4>
 800f6b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6b8:	9d01      	ldr	r5, [sp, #4]
 800f6ba:	43db      	mvns	r3, r3
 800f6bc:	9300      	str	r3, [sp, #0]
 800f6be:	f04f 0800 	mov.w	r8, #0
 800f6c2:	4631      	mov	r1, r6
 800f6c4:	4620      	mov	r0, r4
 800f6c6:	f000 fad7 	bl	800fc78 <_Bfree>
 800f6ca:	2f00      	cmp	r7, #0
 800f6cc:	f43f aea4 	beq.w	800f418 <_dtoa_r+0x6a0>
 800f6d0:	f1b8 0f00 	cmp.w	r8, #0
 800f6d4:	d005      	beq.n	800f6e2 <_dtoa_r+0x96a>
 800f6d6:	45b8      	cmp	r8, r7
 800f6d8:	d003      	beq.n	800f6e2 <_dtoa_r+0x96a>
 800f6da:	4641      	mov	r1, r8
 800f6dc:	4620      	mov	r0, r4
 800f6de:	f000 facb 	bl	800fc78 <_Bfree>
 800f6e2:	4639      	mov	r1, r7
 800f6e4:	4620      	mov	r0, r4
 800f6e6:	f000 fac7 	bl	800fc78 <_Bfree>
 800f6ea:	e695      	b.n	800f418 <_dtoa_r+0x6a0>
 800f6ec:	2600      	movs	r6, #0
 800f6ee:	4637      	mov	r7, r6
 800f6f0:	e7e1      	b.n	800f6b6 <_dtoa_r+0x93e>
 800f6f2:	9700      	str	r7, [sp, #0]
 800f6f4:	4637      	mov	r7, r6
 800f6f6:	e599      	b.n	800f22c <_dtoa_r+0x4b4>
 800f6f8:	40240000 	.word	0x40240000
 800f6fc:	9b08      	ldr	r3, [sp, #32]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	f000 80ca 	beq.w	800f898 <_dtoa_r+0xb20>
 800f704:	9b03      	ldr	r3, [sp, #12]
 800f706:	9302      	str	r3, [sp, #8]
 800f708:	2d00      	cmp	r5, #0
 800f70a:	dd05      	ble.n	800f718 <_dtoa_r+0x9a0>
 800f70c:	4639      	mov	r1, r7
 800f70e:	462a      	mov	r2, r5
 800f710:	4620      	mov	r0, r4
 800f712:	f000 fc83 	bl	801001c <__lshift>
 800f716:	4607      	mov	r7, r0
 800f718:	f1b8 0f00 	cmp.w	r8, #0
 800f71c:	d05b      	beq.n	800f7d6 <_dtoa_r+0xa5e>
 800f71e:	6879      	ldr	r1, [r7, #4]
 800f720:	4620      	mov	r0, r4
 800f722:	f000 fa69 	bl	800fbf8 <_Balloc>
 800f726:	4605      	mov	r5, r0
 800f728:	b928      	cbnz	r0, 800f736 <_dtoa_r+0x9be>
 800f72a:	4b87      	ldr	r3, [pc, #540]	; (800f948 <_dtoa_r+0xbd0>)
 800f72c:	4602      	mov	r2, r0
 800f72e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f732:	f7ff bb3b 	b.w	800edac <_dtoa_r+0x34>
 800f736:	693a      	ldr	r2, [r7, #16]
 800f738:	3202      	adds	r2, #2
 800f73a:	0092      	lsls	r2, r2, #2
 800f73c:	f107 010c 	add.w	r1, r7, #12
 800f740:	300c      	adds	r0, #12
 800f742:	f7fe f9e6 	bl	800db12 <memcpy>
 800f746:	2201      	movs	r2, #1
 800f748:	4629      	mov	r1, r5
 800f74a:	4620      	mov	r0, r4
 800f74c:	f000 fc66 	bl	801001c <__lshift>
 800f750:	9b01      	ldr	r3, [sp, #4]
 800f752:	f103 0901 	add.w	r9, r3, #1
 800f756:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f75a:	4413      	add	r3, r2
 800f75c:	9305      	str	r3, [sp, #20]
 800f75e:	f00a 0301 	and.w	r3, sl, #1
 800f762:	46b8      	mov	r8, r7
 800f764:	9304      	str	r3, [sp, #16]
 800f766:	4607      	mov	r7, r0
 800f768:	4631      	mov	r1, r6
 800f76a:	ee18 0a10 	vmov	r0, s16
 800f76e:	f7ff fa75 	bl	800ec5c <quorem>
 800f772:	4641      	mov	r1, r8
 800f774:	9002      	str	r0, [sp, #8]
 800f776:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f77a:	ee18 0a10 	vmov	r0, s16
 800f77e:	f000 fcbd 	bl	80100fc <__mcmp>
 800f782:	463a      	mov	r2, r7
 800f784:	9003      	str	r0, [sp, #12]
 800f786:	4631      	mov	r1, r6
 800f788:	4620      	mov	r0, r4
 800f78a:	f000 fcd3 	bl	8010134 <__mdiff>
 800f78e:	68c2      	ldr	r2, [r0, #12]
 800f790:	f109 3bff 	add.w	fp, r9, #4294967295
 800f794:	4605      	mov	r5, r0
 800f796:	bb02      	cbnz	r2, 800f7da <_dtoa_r+0xa62>
 800f798:	4601      	mov	r1, r0
 800f79a:	ee18 0a10 	vmov	r0, s16
 800f79e:	f000 fcad 	bl	80100fc <__mcmp>
 800f7a2:	4602      	mov	r2, r0
 800f7a4:	4629      	mov	r1, r5
 800f7a6:	4620      	mov	r0, r4
 800f7a8:	9207      	str	r2, [sp, #28]
 800f7aa:	f000 fa65 	bl	800fc78 <_Bfree>
 800f7ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f7b2:	ea43 0102 	orr.w	r1, r3, r2
 800f7b6:	9b04      	ldr	r3, [sp, #16]
 800f7b8:	430b      	orrs	r3, r1
 800f7ba:	464d      	mov	r5, r9
 800f7bc:	d10f      	bne.n	800f7de <_dtoa_r+0xa66>
 800f7be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f7c2:	d02a      	beq.n	800f81a <_dtoa_r+0xaa2>
 800f7c4:	9b03      	ldr	r3, [sp, #12]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	dd02      	ble.n	800f7d0 <_dtoa_r+0xa58>
 800f7ca:	9b02      	ldr	r3, [sp, #8]
 800f7cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f7d0:	f88b a000 	strb.w	sl, [fp]
 800f7d4:	e775      	b.n	800f6c2 <_dtoa_r+0x94a>
 800f7d6:	4638      	mov	r0, r7
 800f7d8:	e7ba      	b.n	800f750 <_dtoa_r+0x9d8>
 800f7da:	2201      	movs	r2, #1
 800f7dc:	e7e2      	b.n	800f7a4 <_dtoa_r+0xa2c>
 800f7de:	9b03      	ldr	r3, [sp, #12]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	db04      	blt.n	800f7ee <_dtoa_r+0xa76>
 800f7e4:	9906      	ldr	r1, [sp, #24]
 800f7e6:	430b      	orrs	r3, r1
 800f7e8:	9904      	ldr	r1, [sp, #16]
 800f7ea:	430b      	orrs	r3, r1
 800f7ec:	d122      	bne.n	800f834 <_dtoa_r+0xabc>
 800f7ee:	2a00      	cmp	r2, #0
 800f7f0:	ddee      	ble.n	800f7d0 <_dtoa_r+0xa58>
 800f7f2:	ee18 1a10 	vmov	r1, s16
 800f7f6:	2201      	movs	r2, #1
 800f7f8:	4620      	mov	r0, r4
 800f7fa:	f000 fc0f 	bl	801001c <__lshift>
 800f7fe:	4631      	mov	r1, r6
 800f800:	ee08 0a10 	vmov	s16, r0
 800f804:	f000 fc7a 	bl	80100fc <__mcmp>
 800f808:	2800      	cmp	r0, #0
 800f80a:	dc03      	bgt.n	800f814 <_dtoa_r+0xa9c>
 800f80c:	d1e0      	bne.n	800f7d0 <_dtoa_r+0xa58>
 800f80e:	f01a 0f01 	tst.w	sl, #1
 800f812:	d0dd      	beq.n	800f7d0 <_dtoa_r+0xa58>
 800f814:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f818:	d1d7      	bne.n	800f7ca <_dtoa_r+0xa52>
 800f81a:	2339      	movs	r3, #57	; 0x39
 800f81c:	f88b 3000 	strb.w	r3, [fp]
 800f820:	462b      	mov	r3, r5
 800f822:	461d      	mov	r5, r3
 800f824:	3b01      	subs	r3, #1
 800f826:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f82a:	2a39      	cmp	r2, #57	; 0x39
 800f82c:	d071      	beq.n	800f912 <_dtoa_r+0xb9a>
 800f82e:	3201      	adds	r2, #1
 800f830:	701a      	strb	r2, [r3, #0]
 800f832:	e746      	b.n	800f6c2 <_dtoa_r+0x94a>
 800f834:	2a00      	cmp	r2, #0
 800f836:	dd07      	ble.n	800f848 <_dtoa_r+0xad0>
 800f838:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f83c:	d0ed      	beq.n	800f81a <_dtoa_r+0xaa2>
 800f83e:	f10a 0301 	add.w	r3, sl, #1
 800f842:	f88b 3000 	strb.w	r3, [fp]
 800f846:	e73c      	b.n	800f6c2 <_dtoa_r+0x94a>
 800f848:	9b05      	ldr	r3, [sp, #20]
 800f84a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f84e:	4599      	cmp	r9, r3
 800f850:	d047      	beq.n	800f8e2 <_dtoa_r+0xb6a>
 800f852:	ee18 1a10 	vmov	r1, s16
 800f856:	2300      	movs	r3, #0
 800f858:	220a      	movs	r2, #10
 800f85a:	4620      	mov	r0, r4
 800f85c:	f000 fa2e 	bl	800fcbc <__multadd>
 800f860:	45b8      	cmp	r8, r7
 800f862:	ee08 0a10 	vmov	s16, r0
 800f866:	f04f 0300 	mov.w	r3, #0
 800f86a:	f04f 020a 	mov.w	r2, #10
 800f86e:	4641      	mov	r1, r8
 800f870:	4620      	mov	r0, r4
 800f872:	d106      	bne.n	800f882 <_dtoa_r+0xb0a>
 800f874:	f000 fa22 	bl	800fcbc <__multadd>
 800f878:	4680      	mov	r8, r0
 800f87a:	4607      	mov	r7, r0
 800f87c:	f109 0901 	add.w	r9, r9, #1
 800f880:	e772      	b.n	800f768 <_dtoa_r+0x9f0>
 800f882:	f000 fa1b 	bl	800fcbc <__multadd>
 800f886:	4639      	mov	r1, r7
 800f888:	4680      	mov	r8, r0
 800f88a:	2300      	movs	r3, #0
 800f88c:	220a      	movs	r2, #10
 800f88e:	4620      	mov	r0, r4
 800f890:	f000 fa14 	bl	800fcbc <__multadd>
 800f894:	4607      	mov	r7, r0
 800f896:	e7f1      	b.n	800f87c <_dtoa_r+0xb04>
 800f898:	9b03      	ldr	r3, [sp, #12]
 800f89a:	9302      	str	r3, [sp, #8]
 800f89c:	9d01      	ldr	r5, [sp, #4]
 800f89e:	ee18 0a10 	vmov	r0, s16
 800f8a2:	4631      	mov	r1, r6
 800f8a4:	f7ff f9da 	bl	800ec5c <quorem>
 800f8a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f8ac:	9b01      	ldr	r3, [sp, #4]
 800f8ae:	f805 ab01 	strb.w	sl, [r5], #1
 800f8b2:	1aea      	subs	r2, r5, r3
 800f8b4:	9b02      	ldr	r3, [sp, #8]
 800f8b6:	4293      	cmp	r3, r2
 800f8b8:	dd09      	ble.n	800f8ce <_dtoa_r+0xb56>
 800f8ba:	ee18 1a10 	vmov	r1, s16
 800f8be:	2300      	movs	r3, #0
 800f8c0:	220a      	movs	r2, #10
 800f8c2:	4620      	mov	r0, r4
 800f8c4:	f000 f9fa 	bl	800fcbc <__multadd>
 800f8c8:	ee08 0a10 	vmov	s16, r0
 800f8cc:	e7e7      	b.n	800f89e <_dtoa_r+0xb26>
 800f8ce:	9b02      	ldr	r3, [sp, #8]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	bfc8      	it	gt
 800f8d4:	461d      	movgt	r5, r3
 800f8d6:	9b01      	ldr	r3, [sp, #4]
 800f8d8:	bfd8      	it	le
 800f8da:	2501      	movle	r5, #1
 800f8dc:	441d      	add	r5, r3
 800f8de:	f04f 0800 	mov.w	r8, #0
 800f8e2:	ee18 1a10 	vmov	r1, s16
 800f8e6:	2201      	movs	r2, #1
 800f8e8:	4620      	mov	r0, r4
 800f8ea:	f000 fb97 	bl	801001c <__lshift>
 800f8ee:	4631      	mov	r1, r6
 800f8f0:	ee08 0a10 	vmov	s16, r0
 800f8f4:	f000 fc02 	bl	80100fc <__mcmp>
 800f8f8:	2800      	cmp	r0, #0
 800f8fa:	dc91      	bgt.n	800f820 <_dtoa_r+0xaa8>
 800f8fc:	d102      	bne.n	800f904 <_dtoa_r+0xb8c>
 800f8fe:	f01a 0f01 	tst.w	sl, #1
 800f902:	d18d      	bne.n	800f820 <_dtoa_r+0xaa8>
 800f904:	462b      	mov	r3, r5
 800f906:	461d      	mov	r5, r3
 800f908:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f90c:	2a30      	cmp	r2, #48	; 0x30
 800f90e:	d0fa      	beq.n	800f906 <_dtoa_r+0xb8e>
 800f910:	e6d7      	b.n	800f6c2 <_dtoa_r+0x94a>
 800f912:	9a01      	ldr	r2, [sp, #4]
 800f914:	429a      	cmp	r2, r3
 800f916:	d184      	bne.n	800f822 <_dtoa_r+0xaaa>
 800f918:	9b00      	ldr	r3, [sp, #0]
 800f91a:	3301      	adds	r3, #1
 800f91c:	9300      	str	r3, [sp, #0]
 800f91e:	2331      	movs	r3, #49	; 0x31
 800f920:	7013      	strb	r3, [r2, #0]
 800f922:	e6ce      	b.n	800f6c2 <_dtoa_r+0x94a>
 800f924:	4b09      	ldr	r3, [pc, #36]	; (800f94c <_dtoa_r+0xbd4>)
 800f926:	f7ff ba95 	b.w	800ee54 <_dtoa_r+0xdc>
 800f92a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	f47f aa6e 	bne.w	800ee0e <_dtoa_r+0x96>
 800f932:	4b07      	ldr	r3, [pc, #28]	; (800f950 <_dtoa_r+0xbd8>)
 800f934:	f7ff ba8e 	b.w	800ee54 <_dtoa_r+0xdc>
 800f938:	9b02      	ldr	r3, [sp, #8]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	dcae      	bgt.n	800f89c <_dtoa_r+0xb24>
 800f93e:	9b06      	ldr	r3, [sp, #24]
 800f940:	2b02      	cmp	r3, #2
 800f942:	f73f aea8 	bgt.w	800f696 <_dtoa_r+0x91e>
 800f946:	e7a9      	b.n	800f89c <_dtoa_r+0xb24>
 800f948:	08010a54 	.word	0x08010a54
 800f94c:	080109b1 	.word	0x080109b1
 800f950:	080109d5 	.word	0x080109d5

0800f954 <__sflush_r>:
 800f954:	898a      	ldrh	r2, [r1, #12]
 800f956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f95a:	4605      	mov	r5, r0
 800f95c:	0710      	lsls	r0, r2, #28
 800f95e:	460c      	mov	r4, r1
 800f960:	d458      	bmi.n	800fa14 <__sflush_r+0xc0>
 800f962:	684b      	ldr	r3, [r1, #4]
 800f964:	2b00      	cmp	r3, #0
 800f966:	dc05      	bgt.n	800f974 <__sflush_r+0x20>
 800f968:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	dc02      	bgt.n	800f974 <__sflush_r+0x20>
 800f96e:	2000      	movs	r0, #0
 800f970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f974:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f976:	2e00      	cmp	r6, #0
 800f978:	d0f9      	beq.n	800f96e <__sflush_r+0x1a>
 800f97a:	2300      	movs	r3, #0
 800f97c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f980:	682f      	ldr	r7, [r5, #0]
 800f982:	602b      	str	r3, [r5, #0]
 800f984:	d032      	beq.n	800f9ec <__sflush_r+0x98>
 800f986:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f988:	89a3      	ldrh	r3, [r4, #12]
 800f98a:	075a      	lsls	r2, r3, #29
 800f98c:	d505      	bpl.n	800f99a <__sflush_r+0x46>
 800f98e:	6863      	ldr	r3, [r4, #4]
 800f990:	1ac0      	subs	r0, r0, r3
 800f992:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f994:	b10b      	cbz	r3, 800f99a <__sflush_r+0x46>
 800f996:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f998:	1ac0      	subs	r0, r0, r3
 800f99a:	2300      	movs	r3, #0
 800f99c:	4602      	mov	r2, r0
 800f99e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f9a0:	6a21      	ldr	r1, [r4, #32]
 800f9a2:	4628      	mov	r0, r5
 800f9a4:	47b0      	blx	r6
 800f9a6:	1c43      	adds	r3, r0, #1
 800f9a8:	89a3      	ldrh	r3, [r4, #12]
 800f9aa:	d106      	bne.n	800f9ba <__sflush_r+0x66>
 800f9ac:	6829      	ldr	r1, [r5, #0]
 800f9ae:	291d      	cmp	r1, #29
 800f9b0:	d82c      	bhi.n	800fa0c <__sflush_r+0xb8>
 800f9b2:	4a2a      	ldr	r2, [pc, #168]	; (800fa5c <__sflush_r+0x108>)
 800f9b4:	40ca      	lsrs	r2, r1
 800f9b6:	07d6      	lsls	r6, r2, #31
 800f9b8:	d528      	bpl.n	800fa0c <__sflush_r+0xb8>
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	6062      	str	r2, [r4, #4]
 800f9be:	04d9      	lsls	r1, r3, #19
 800f9c0:	6922      	ldr	r2, [r4, #16]
 800f9c2:	6022      	str	r2, [r4, #0]
 800f9c4:	d504      	bpl.n	800f9d0 <__sflush_r+0x7c>
 800f9c6:	1c42      	adds	r2, r0, #1
 800f9c8:	d101      	bne.n	800f9ce <__sflush_r+0x7a>
 800f9ca:	682b      	ldr	r3, [r5, #0]
 800f9cc:	b903      	cbnz	r3, 800f9d0 <__sflush_r+0x7c>
 800f9ce:	6560      	str	r0, [r4, #84]	; 0x54
 800f9d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f9d2:	602f      	str	r7, [r5, #0]
 800f9d4:	2900      	cmp	r1, #0
 800f9d6:	d0ca      	beq.n	800f96e <__sflush_r+0x1a>
 800f9d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f9dc:	4299      	cmp	r1, r3
 800f9de:	d002      	beq.n	800f9e6 <__sflush_r+0x92>
 800f9e0:	4628      	mov	r0, r5
 800f9e2:	f000 fca3 	bl	801032c <_free_r>
 800f9e6:	2000      	movs	r0, #0
 800f9e8:	6360      	str	r0, [r4, #52]	; 0x34
 800f9ea:	e7c1      	b.n	800f970 <__sflush_r+0x1c>
 800f9ec:	6a21      	ldr	r1, [r4, #32]
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	4628      	mov	r0, r5
 800f9f2:	47b0      	blx	r6
 800f9f4:	1c41      	adds	r1, r0, #1
 800f9f6:	d1c7      	bne.n	800f988 <__sflush_r+0x34>
 800f9f8:	682b      	ldr	r3, [r5, #0]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d0c4      	beq.n	800f988 <__sflush_r+0x34>
 800f9fe:	2b1d      	cmp	r3, #29
 800fa00:	d001      	beq.n	800fa06 <__sflush_r+0xb2>
 800fa02:	2b16      	cmp	r3, #22
 800fa04:	d101      	bne.n	800fa0a <__sflush_r+0xb6>
 800fa06:	602f      	str	r7, [r5, #0]
 800fa08:	e7b1      	b.n	800f96e <__sflush_r+0x1a>
 800fa0a:	89a3      	ldrh	r3, [r4, #12]
 800fa0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa10:	81a3      	strh	r3, [r4, #12]
 800fa12:	e7ad      	b.n	800f970 <__sflush_r+0x1c>
 800fa14:	690f      	ldr	r7, [r1, #16]
 800fa16:	2f00      	cmp	r7, #0
 800fa18:	d0a9      	beq.n	800f96e <__sflush_r+0x1a>
 800fa1a:	0793      	lsls	r3, r2, #30
 800fa1c:	680e      	ldr	r6, [r1, #0]
 800fa1e:	bf08      	it	eq
 800fa20:	694b      	ldreq	r3, [r1, #20]
 800fa22:	600f      	str	r7, [r1, #0]
 800fa24:	bf18      	it	ne
 800fa26:	2300      	movne	r3, #0
 800fa28:	eba6 0807 	sub.w	r8, r6, r7
 800fa2c:	608b      	str	r3, [r1, #8]
 800fa2e:	f1b8 0f00 	cmp.w	r8, #0
 800fa32:	dd9c      	ble.n	800f96e <__sflush_r+0x1a>
 800fa34:	6a21      	ldr	r1, [r4, #32]
 800fa36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fa38:	4643      	mov	r3, r8
 800fa3a:	463a      	mov	r2, r7
 800fa3c:	4628      	mov	r0, r5
 800fa3e:	47b0      	blx	r6
 800fa40:	2800      	cmp	r0, #0
 800fa42:	dc06      	bgt.n	800fa52 <__sflush_r+0xfe>
 800fa44:	89a3      	ldrh	r3, [r4, #12]
 800fa46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa4a:	81a3      	strh	r3, [r4, #12]
 800fa4c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa50:	e78e      	b.n	800f970 <__sflush_r+0x1c>
 800fa52:	4407      	add	r7, r0
 800fa54:	eba8 0800 	sub.w	r8, r8, r0
 800fa58:	e7e9      	b.n	800fa2e <__sflush_r+0xda>
 800fa5a:	bf00      	nop
 800fa5c:	20400001 	.word	0x20400001

0800fa60 <_fflush_r>:
 800fa60:	b538      	push	{r3, r4, r5, lr}
 800fa62:	690b      	ldr	r3, [r1, #16]
 800fa64:	4605      	mov	r5, r0
 800fa66:	460c      	mov	r4, r1
 800fa68:	b913      	cbnz	r3, 800fa70 <_fflush_r+0x10>
 800fa6a:	2500      	movs	r5, #0
 800fa6c:	4628      	mov	r0, r5
 800fa6e:	bd38      	pop	{r3, r4, r5, pc}
 800fa70:	b118      	cbz	r0, 800fa7a <_fflush_r+0x1a>
 800fa72:	6983      	ldr	r3, [r0, #24]
 800fa74:	b90b      	cbnz	r3, 800fa7a <_fflush_r+0x1a>
 800fa76:	f7fd ff75 	bl	800d964 <__sinit>
 800fa7a:	4b14      	ldr	r3, [pc, #80]	; (800facc <_fflush_r+0x6c>)
 800fa7c:	429c      	cmp	r4, r3
 800fa7e:	d11b      	bne.n	800fab8 <_fflush_r+0x58>
 800fa80:	686c      	ldr	r4, [r5, #4]
 800fa82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d0ef      	beq.n	800fa6a <_fflush_r+0xa>
 800fa8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fa8c:	07d0      	lsls	r0, r2, #31
 800fa8e:	d404      	bmi.n	800fa9a <_fflush_r+0x3a>
 800fa90:	0599      	lsls	r1, r3, #22
 800fa92:	d402      	bmi.n	800fa9a <_fflush_r+0x3a>
 800fa94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa96:	f7fe f83a 	bl	800db0e <__retarget_lock_acquire_recursive>
 800fa9a:	4628      	mov	r0, r5
 800fa9c:	4621      	mov	r1, r4
 800fa9e:	f7ff ff59 	bl	800f954 <__sflush_r>
 800faa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800faa4:	07da      	lsls	r2, r3, #31
 800faa6:	4605      	mov	r5, r0
 800faa8:	d4e0      	bmi.n	800fa6c <_fflush_r+0xc>
 800faaa:	89a3      	ldrh	r3, [r4, #12]
 800faac:	059b      	lsls	r3, r3, #22
 800faae:	d4dd      	bmi.n	800fa6c <_fflush_r+0xc>
 800fab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fab2:	f7fe f82d 	bl	800db10 <__retarget_lock_release_recursive>
 800fab6:	e7d9      	b.n	800fa6c <_fflush_r+0xc>
 800fab8:	4b05      	ldr	r3, [pc, #20]	; (800fad0 <_fflush_r+0x70>)
 800faba:	429c      	cmp	r4, r3
 800fabc:	d101      	bne.n	800fac2 <_fflush_r+0x62>
 800fabe:	68ac      	ldr	r4, [r5, #8]
 800fac0:	e7df      	b.n	800fa82 <_fflush_r+0x22>
 800fac2:	4b04      	ldr	r3, [pc, #16]	; (800fad4 <_fflush_r+0x74>)
 800fac4:	429c      	cmp	r4, r3
 800fac6:	bf08      	it	eq
 800fac8:	68ec      	ldreq	r4, [r5, #12]
 800faca:	e7da      	b.n	800fa82 <_fflush_r+0x22>
 800facc:	0801094c 	.word	0x0801094c
 800fad0:	0801096c 	.word	0x0801096c
 800fad4:	0801092c 	.word	0x0801092c

0800fad8 <_localeconv_r>:
 800fad8:	4800      	ldr	r0, [pc, #0]	; (800fadc <_localeconv_r+0x4>)
 800fada:	4770      	bx	lr
 800fadc:	2000016c 	.word	0x2000016c

0800fae0 <_lseek_r>:
 800fae0:	b538      	push	{r3, r4, r5, lr}
 800fae2:	4d07      	ldr	r5, [pc, #28]	; (800fb00 <_lseek_r+0x20>)
 800fae4:	4604      	mov	r4, r0
 800fae6:	4608      	mov	r0, r1
 800fae8:	4611      	mov	r1, r2
 800faea:	2200      	movs	r2, #0
 800faec:	602a      	str	r2, [r5, #0]
 800faee:	461a      	mov	r2, r3
 800faf0:	f7f3 f8b8 	bl	8002c64 <_lseek>
 800faf4:	1c43      	adds	r3, r0, #1
 800faf6:	d102      	bne.n	800fafe <_lseek_r+0x1e>
 800faf8:	682b      	ldr	r3, [r5, #0]
 800fafa:	b103      	cbz	r3, 800fafe <_lseek_r+0x1e>
 800fafc:	6023      	str	r3, [r4, #0]
 800fafe:	bd38      	pop	{r3, r4, r5, pc}
 800fb00:	200056cc 	.word	0x200056cc

0800fb04 <__swhatbuf_r>:
 800fb04:	b570      	push	{r4, r5, r6, lr}
 800fb06:	460e      	mov	r6, r1
 800fb08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb0c:	2900      	cmp	r1, #0
 800fb0e:	b096      	sub	sp, #88	; 0x58
 800fb10:	4614      	mov	r4, r2
 800fb12:	461d      	mov	r5, r3
 800fb14:	da08      	bge.n	800fb28 <__swhatbuf_r+0x24>
 800fb16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	602a      	str	r2, [r5, #0]
 800fb1e:	061a      	lsls	r2, r3, #24
 800fb20:	d410      	bmi.n	800fb44 <__swhatbuf_r+0x40>
 800fb22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb26:	e00e      	b.n	800fb46 <__swhatbuf_r+0x42>
 800fb28:	466a      	mov	r2, sp
 800fb2a:	f000 fca1 	bl	8010470 <_fstat_r>
 800fb2e:	2800      	cmp	r0, #0
 800fb30:	dbf1      	blt.n	800fb16 <__swhatbuf_r+0x12>
 800fb32:	9a01      	ldr	r2, [sp, #4]
 800fb34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fb38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fb3c:	425a      	negs	r2, r3
 800fb3e:	415a      	adcs	r2, r3
 800fb40:	602a      	str	r2, [r5, #0]
 800fb42:	e7ee      	b.n	800fb22 <__swhatbuf_r+0x1e>
 800fb44:	2340      	movs	r3, #64	; 0x40
 800fb46:	2000      	movs	r0, #0
 800fb48:	6023      	str	r3, [r4, #0]
 800fb4a:	b016      	add	sp, #88	; 0x58
 800fb4c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fb50 <__smakebuf_r>:
 800fb50:	898b      	ldrh	r3, [r1, #12]
 800fb52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fb54:	079d      	lsls	r5, r3, #30
 800fb56:	4606      	mov	r6, r0
 800fb58:	460c      	mov	r4, r1
 800fb5a:	d507      	bpl.n	800fb6c <__smakebuf_r+0x1c>
 800fb5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fb60:	6023      	str	r3, [r4, #0]
 800fb62:	6123      	str	r3, [r4, #16]
 800fb64:	2301      	movs	r3, #1
 800fb66:	6163      	str	r3, [r4, #20]
 800fb68:	b002      	add	sp, #8
 800fb6a:	bd70      	pop	{r4, r5, r6, pc}
 800fb6c:	ab01      	add	r3, sp, #4
 800fb6e:	466a      	mov	r2, sp
 800fb70:	f7ff ffc8 	bl	800fb04 <__swhatbuf_r>
 800fb74:	9900      	ldr	r1, [sp, #0]
 800fb76:	4605      	mov	r5, r0
 800fb78:	4630      	mov	r0, r6
 800fb7a:	f7fe f801 	bl	800db80 <_malloc_r>
 800fb7e:	b948      	cbnz	r0, 800fb94 <__smakebuf_r+0x44>
 800fb80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb84:	059a      	lsls	r2, r3, #22
 800fb86:	d4ef      	bmi.n	800fb68 <__smakebuf_r+0x18>
 800fb88:	f023 0303 	bic.w	r3, r3, #3
 800fb8c:	f043 0302 	orr.w	r3, r3, #2
 800fb90:	81a3      	strh	r3, [r4, #12]
 800fb92:	e7e3      	b.n	800fb5c <__smakebuf_r+0xc>
 800fb94:	4b0d      	ldr	r3, [pc, #52]	; (800fbcc <__smakebuf_r+0x7c>)
 800fb96:	62b3      	str	r3, [r6, #40]	; 0x28
 800fb98:	89a3      	ldrh	r3, [r4, #12]
 800fb9a:	6020      	str	r0, [r4, #0]
 800fb9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fba0:	81a3      	strh	r3, [r4, #12]
 800fba2:	9b00      	ldr	r3, [sp, #0]
 800fba4:	6163      	str	r3, [r4, #20]
 800fba6:	9b01      	ldr	r3, [sp, #4]
 800fba8:	6120      	str	r0, [r4, #16]
 800fbaa:	b15b      	cbz	r3, 800fbc4 <__smakebuf_r+0x74>
 800fbac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbb0:	4630      	mov	r0, r6
 800fbb2:	f000 fc6f 	bl	8010494 <_isatty_r>
 800fbb6:	b128      	cbz	r0, 800fbc4 <__smakebuf_r+0x74>
 800fbb8:	89a3      	ldrh	r3, [r4, #12]
 800fbba:	f023 0303 	bic.w	r3, r3, #3
 800fbbe:	f043 0301 	orr.w	r3, r3, #1
 800fbc2:	81a3      	strh	r3, [r4, #12]
 800fbc4:	89a0      	ldrh	r0, [r4, #12]
 800fbc6:	4305      	orrs	r5, r0
 800fbc8:	81a5      	strh	r5, [r4, #12]
 800fbca:	e7cd      	b.n	800fb68 <__smakebuf_r+0x18>
 800fbcc:	0800d8fd 	.word	0x0800d8fd

0800fbd0 <malloc>:
 800fbd0:	4b02      	ldr	r3, [pc, #8]	; (800fbdc <malloc+0xc>)
 800fbd2:	4601      	mov	r1, r0
 800fbd4:	6818      	ldr	r0, [r3, #0]
 800fbd6:	f7fd bfd3 	b.w	800db80 <_malloc_r>
 800fbda:	bf00      	nop
 800fbdc:	20000018 	.word	0x20000018

0800fbe0 <__malloc_lock>:
 800fbe0:	4801      	ldr	r0, [pc, #4]	; (800fbe8 <__malloc_lock+0x8>)
 800fbe2:	f7fd bf94 	b.w	800db0e <__retarget_lock_acquire_recursive>
 800fbe6:	bf00      	nop
 800fbe8:	200056c0 	.word	0x200056c0

0800fbec <__malloc_unlock>:
 800fbec:	4801      	ldr	r0, [pc, #4]	; (800fbf4 <__malloc_unlock+0x8>)
 800fbee:	f7fd bf8f 	b.w	800db10 <__retarget_lock_release_recursive>
 800fbf2:	bf00      	nop
 800fbf4:	200056c0 	.word	0x200056c0

0800fbf8 <_Balloc>:
 800fbf8:	b570      	push	{r4, r5, r6, lr}
 800fbfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fbfc:	4604      	mov	r4, r0
 800fbfe:	460d      	mov	r5, r1
 800fc00:	b976      	cbnz	r6, 800fc20 <_Balloc+0x28>
 800fc02:	2010      	movs	r0, #16
 800fc04:	f7ff ffe4 	bl	800fbd0 <malloc>
 800fc08:	4602      	mov	r2, r0
 800fc0a:	6260      	str	r0, [r4, #36]	; 0x24
 800fc0c:	b920      	cbnz	r0, 800fc18 <_Balloc+0x20>
 800fc0e:	4b18      	ldr	r3, [pc, #96]	; (800fc70 <_Balloc+0x78>)
 800fc10:	4818      	ldr	r0, [pc, #96]	; (800fc74 <_Balloc+0x7c>)
 800fc12:	2166      	movs	r1, #102	; 0x66
 800fc14:	f7fd fe2a 	bl	800d86c <__assert_func>
 800fc18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc1c:	6006      	str	r6, [r0, #0]
 800fc1e:	60c6      	str	r6, [r0, #12]
 800fc20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fc22:	68f3      	ldr	r3, [r6, #12]
 800fc24:	b183      	cbz	r3, 800fc48 <_Balloc+0x50>
 800fc26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc28:	68db      	ldr	r3, [r3, #12]
 800fc2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fc2e:	b9b8      	cbnz	r0, 800fc60 <_Balloc+0x68>
 800fc30:	2101      	movs	r1, #1
 800fc32:	fa01 f605 	lsl.w	r6, r1, r5
 800fc36:	1d72      	adds	r2, r6, #5
 800fc38:	0092      	lsls	r2, r2, #2
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	f000 fb60 	bl	8010300 <_calloc_r>
 800fc40:	b160      	cbz	r0, 800fc5c <_Balloc+0x64>
 800fc42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fc46:	e00e      	b.n	800fc66 <_Balloc+0x6e>
 800fc48:	2221      	movs	r2, #33	; 0x21
 800fc4a:	2104      	movs	r1, #4
 800fc4c:	4620      	mov	r0, r4
 800fc4e:	f000 fb57 	bl	8010300 <_calloc_r>
 800fc52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc54:	60f0      	str	r0, [r6, #12]
 800fc56:	68db      	ldr	r3, [r3, #12]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d1e4      	bne.n	800fc26 <_Balloc+0x2e>
 800fc5c:	2000      	movs	r0, #0
 800fc5e:	bd70      	pop	{r4, r5, r6, pc}
 800fc60:	6802      	ldr	r2, [r0, #0]
 800fc62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fc66:	2300      	movs	r3, #0
 800fc68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fc6c:	e7f7      	b.n	800fc5e <_Balloc+0x66>
 800fc6e:	bf00      	nop
 800fc70:	080109e2 	.word	0x080109e2
 800fc74:	08010a65 	.word	0x08010a65

0800fc78 <_Bfree>:
 800fc78:	b570      	push	{r4, r5, r6, lr}
 800fc7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fc7c:	4605      	mov	r5, r0
 800fc7e:	460c      	mov	r4, r1
 800fc80:	b976      	cbnz	r6, 800fca0 <_Bfree+0x28>
 800fc82:	2010      	movs	r0, #16
 800fc84:	f7ff ffa4 	bl	800fbd0 <malloc>
 800fc88:	4602      	mov	r2, r0
 800fc8a:	6268      	str	r0, [r5, #36]	; 0x24
 800fc8c:	b920      	cbnz	r0, 800fc98 <_Bfree+0x20>
 800fc8e:	4b09      	ldr	r3, [pc, #36]	; (800fcb4 <_Bfree+0x3c>)
 800fc90:	4809      	ldr	r0, [pc, #36]	; (800fcb8 <_Bfree+0x40>)
 800fc92:	218a      	movs	r1, #138	; 0x8a
 800fc94:	f7fd fdea 	bl	800d86c <__assert_func>
 800fc98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc9c:	6006      	str	r6, [r0, #0]
 800fc9e:	60c6      	str	r6, [r0, #12]
 800fca0:	b13c      	cbz	r4, 800fcb2 <_Bfree+0x3a>
 800fca2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fca4:	6862      	ldr	r2, [r4, #4]
 800fca6:	68db      	ldr	r3, [r3, #12]
 800fca8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fcac:	6021      	str	r1, [r4, #0]
 800fcae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fcb2:	bd70      	pop	{r4, r5, r6, pc}
 800fcb4:	080109e2 	.word	0x080109e2
 800fcb8:	08010a65 	.word	0x08010a65

0800fcbc <__multadd>:
 800fcbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcc0:	690d      	ldr	r5, [r1, #16]
 800fcc2:	4607      	mov	r7, r0
 800fcc4:	460c      	mov	r4, r1
 800fcc6:	461e      	mov	r6, r3
 800fcc8:	f101 0c14 	add.w	ip, r1, #20
 800fccc:	2000      	movs	r0, #0
 800fcce:	f8dc 3000 	ldr.w	r3, [ip]
 800fcd2:	b299      	uxth	r1, r3
 800fcd4:	fb02 6101 	mla	r1, r2, r1, r6
 800fcd8:	0c1e      	lsrs	r6, r3, #16
 800fcda:	0c0b      	lsrs	r3, r1, #16
 800fcdc:	fb02 3306 	mla	r3, r2, r6, r3
 800fce0:	b289      	uxth	r1, r1
 800fce2:	3001      	adds	r0, #1
 800fce4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fce8:	4285      	cmp	r5, r0
 800fcea:	f84c 1b04 	str.w	r1, [ip], #4
 800fcee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fcf2:	dcec      	bgt.n	800fcce <__multadd+0x12>
 800fcf4:	b30e      	cbz	r6, 800fd3a <__multadd+0x7e>
 800fcf6:	68a3      	ldr	r3, [r4, #8]
 800fcf8:	42ab      	cmp	r3, r5
 800fcfa:	dc19      	bgt.n	800fd30 <__multadd+0x74>
 800fcfc:	6861      	ldr	r1, [r4, #4]
 800fcfe:	4638      	mov	r0, r7
 800fd00:	3101      	adds	r1, #1
 800fd02:	f7ff ff79 	bl	800fbf8 <_Balloc>
 800fd06:	4680      	mov	r8, r0
 800fd08:	b928      	cbnz	r0, 800fd16 <__multadd+0x5a>
 800fd0a:	4602      	mov	r2, r0
 800fd0c:	4b0c      	ldr	r3, [pc, #48]	; (800fd40 <__multadd+0x84>)
 800fd0e:	480d      	ldr	r0, [pc, #52]	; (800fd44 <__multadd+0x88>)
 800fd10:	21b5      	movs	r1, #181	; 0xb5
 800fd12:	f7fd fdab 	bl	800d86c <__assert_func>
 800fd16:	6922      	ldr	r2, [r4, #16]
 800fd18:	3202      	adds	r2, #2
 800fd1a:	f104 010c 	add.w	r1, r4, #12
 800fd1e:	0092      	lsls	r2, r2, #2
 800fd20:	300c      	adds	r0, #12
 800fd22:	f7fd fef6 	bl	800db12 <memcpy>
 800fd26:	4621      	mov	r1, r4
 800fd28:	4638      	mov	r0, r7
 800fd2a:	f7ff ffa5 	bl	800fc78 <_Bfree>
 800fd2e:	4644      	mov	r4, r8
 800fd30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fd34:	3501      	adds	r5, #1
 800fd36:	615e      	str	r6, [r3, #20]
 800fd38:	6125      	str	r5, [r4, #16]
 800fd3a:	4620      	mov	r0, r4
 800fd3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd40:	08010a54 	.word	0x08010a54
 800fd44:	08010a65 	.word	0x08010a65

0800fd48 <__hi0bits>:
 800fd48:	0c03      	lsrs	r3, r0, #16
 800fd4a:	041b      	lsls	r3, r3, #16
 800fd4c:	b9d3      	cbnz	r3, 800fd84 <__hi0bits+0x3c>
 800fd4e:	0400      	lsls	r0, r0, #16
 800fd50:	2310      	movs	r3, #16
 800fd52:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fd56:	bf04      	itt	eq
 800fd58:	0200      	lsleq	r0, r0, #8
 800fd5a:	3308      	addeq	r3, #8
 800fd5c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fd60:	bf04      	itt	eq
 800fd62:	0100      	lsleq	r0, r0, #4
 800fd64:	3304      	addeq	r3, #4
 800fd66:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fd6a:	bf04      	itt	eq
 800fd6c:	0080      	lsleq	r0, r0, #2
 800fd6e:	3302      	addeq	r3, #2
 800fd70:	2800      	cmp	r0, #0
 800fd72:	db05      	blt.n	800fd80 <__hi0bits+0x38>
 800fd74:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fd78:	f103 0301 	add.w	r3, r3, #1
 800fd7c:	bf08      	it	eq
 800fd7e:	2320      	moveq	r3, #32
 800fd80:	4618      	mov	r0, r3
 800fd82:	4770      	bx	lr
 800fd84:	2300      	movs	r3, #0
 800fd86:	e7e4      	b.n	800fd52 <__hi0bits+0xa>

0800fd88 <__lo0bits>:
 800fd88:	6803      	ldr	r3, [r0, #0]
 800fd8a:	f013 0207 	ands.w	r2, r3, #7
 800fd8e:	4601      	mov	r1, r0
 800fd90:	d00b      	beq.n	800fdaa <__lo0bits+0x22>
 800fd92:	07da      	lsls	r2, r3, #31
 800fd94:	d423      	bmi.n	800fdde <__lo0bits+0x56>
 800fd96:	0798      	lsls	r0, r3, #30
 800fd98:	bf49      	itett	mi
 800fd9a:	085b      	lsrmi	r3, r3, #1
 800fd9c:	089b      	lsrpl	r3, r3, #2
 800fd9e:	2001      	movmi	r0, #1
 800fda0:	600b      	strmi	r3, [r1, #0]
 800fda2:	bf5c      	itt	pl
 800fda4:	600b      	strpl	r3, [r1, #0]
 800fda6:	2002      	movpl	r0, #2
 800fda8:	4770      	bx	lr
 800fdaa:	b298      	uxth	r0, r3
 800fdac:	b9a8      	cbnz	r0, 800fdda <__lo0bits+0x52>
 800fdae:	0c1b      	lsrs	r3, r3, #16
 800fdb0:	2010      	movs	r0, #16
 800fdb2:	b2da      	uxtb	r2, r3
 800fdb4:	b90a      	cbnz	r2, 800fdba <__lo0bits+0x32>
 800fdb6:	3008      	adds	r0, #8
 800fdb8:	0a1b      	lsrs	r3, r3, #8
 800fdba:	071a      	lsls	r2, r3, #28
 800fdbc:	bf04      	itt	eq
 800fdbe:	091b      	lsreq	r3, r3, #4
 800fdc0:	3004      	addeq	r0, #4
 800fdc2:	079a      	lsls	r2, r3, #30
 800fdc4:	bf04      	itt	eq
 800fdc6:	089b      	lsreq	r3, r3, #2
 800fdc8:	3002      	addeq	r0, #2
 800fdca:	07da      	lsls	r2, r3, #31
 800fdcc:	d403      	bmi.n	800fdd6 <__lo0bits+0x4e>
 800fdce:	085b      	lsrs	r3, r3, #1
 800fdd0:	f100 0001 	add.w	r0, r0, #1
 800fdd4:	d005      	beq.n	800fde2 <__lo0bits+0x5a>
 800fdd6:	600b      	str	r3, [r1, #0]
 800fdd8:	4770      	bx	lr
 800fdda:	4610      	mov	r0, r2
 800fddc:	e7e9      	b.n	800fdb2 <__lo0bits+0x2a>
 800fdde:	2000      	movs	r0, #0
 800fde0:	4770      	bx	lr
 800fde2:	2020      	movs	r0, #32
 800fde4:	4770      	bx	lr
	...

0800fde8 <__i2b>:
 800fde8:	b510      	push	{r4, lr}
 800fdea:	460c      	mov	r4, r1
 800fdec:	2101      	movs	r1, #1
 800fdee:	f7ff ff03 	bl	800fbf8 <_Balloc>
 800fdf2:	4602      	mov	r2, r0
 800fdf4:	b928      	cbnz	r0, 800fe02 <__i2b+0x1a>
 800fdf6:	4b05      	ldr	r3, [pc, #20]	; (800fe0c <__i2b+0x24>)
 800fdf8:	4805      	ldr	r0, [pc, #20]	; (800fe10 <__i2b+0x28>)
 800fdfa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fdfe:	f7fd fd35 	bl	800d86c <__assert_func>
 800fe02:	2301      	movs	r3, #1
 800fe04:	6144      	str	r4, [r0, #20]
 800fe06:	6103      	str	r3, [r0, #16]
 800fe08:	bd10      	pop	{r4, pc}
 800fe0a:	bf00      	nop
 800fe0c:	08010a54 	.word	0x08010a54
 800fe10:	08010a65 	.word	0x08010a65

0800fe14 <__multiply>:
 800fe14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe18:	4691      	mov	r9, r2
 800fe1a:	690a      	ldr	r2, [r1, #16]
 800fe1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fe20:	429a      	cmp	r2, r3
 800fe22:	bfb8      	it	lt
 800fe24:	460b      	movlt	r3, r1
 800fe26:	460c      	mov	r4, r1
 800fe28:	bfbc      	itt	lt
 800fe2a:	464c      	movlt	r4, r9
 800fe2c:	4699      	movlt	r9, r3
 800fe2e:	6927      	ldr	r7, [r4, #16]
 800fe30:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fe34:	68a3      	ldr	r3, [r4, #8]
 800fe36:	6861      	ldr	r1, [r4, #4]
 800fe38:	eb07 060a 	add.w	r6, r7, sl
 800fe3c:	42b3      	cmp	r3, r6
 800fe3e:	b085      	sub	sp, #20
 800fe40:	bfb8      	it	lt
 800fe42:	3101      	addlt	r1, #1
 800fe44:	f7ff fed8 	bl	800fbf8 <_Balloc>
 800fe48:	b930      	cbnz	r0, 800fe58 <__multiply+0x44>
 800fe4a:	4602      	mov	r2, r0
 800fe4c:	4b44      	ldr	r3, [pc, #272]	; (800ff60 <__multiply+0x14c>)
 800fe4e:	4845      	ldr	r0, [pc, #276]	; (800ff64 <__multiply+0x150>)
 800fe50:	f240 115d 	movw	r1, #349	; 0x15d
 800fe54:	f7fd fd0a 	bl	800d86c <__assert_func>
 800fe58:	f100 0514 	add.w	r5, r0, #20
 800fe5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fe60:	462b      	mov	r3, r5
 800fe62:	2200      	movs	r2, #0
 800fe64:	4543      	cmp	r3, r8
 800fe66:	d321      	bcc.n	800feac <__multiply+0x98>
 800fe68:	f104 0314 	add.w	r3, r4, #20
 800fe6c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fe70:	f109 0314 	add.w	r3, r9, #20
 800fe74:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fe78:	9202      	str	r2, [sp, #8]
 800fe7a:	1b3a      	subs	r2, r7, r4
 800fe7c:	3a15      	subs	r2, #21
 800fe7e:	f022 0203 	bic.w	r2, r2, #3
 800fe82:	3204      	adds	r2, #4
 800fe84:	f104 0115 	add.w	r1, r4, #21
 800fe88:	428f      	cmp	r7, r1
 800fe8a:	bf38      	it	cc
 800fe8c:	2204      	movcc	r2, #4
 800fe8e:	9201      	str	r2, [sp, #4]
 800fe90:	9a02      	ldr	r2, [sp, #8]
 800fe92:	9303      	str	r3, [sp, #12]
 800fe94:	429a      	cmp	r2, r3
 800fe96:	d80c      	bhi.n	800feb2 <__multiply+0x9e>
 800fe98:	2e00      	cmp	r6, #0
 800fe9a:	dd03      	ble.n	800fea4 <__multiply+0x90>
 800fe9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d05a      	beq.n	800ff5a <__multiply+0x146>
 800fea4:	6106      	str	r6, [r0, #16]
 800fea6:	b005      	add	sp, #20
 800fea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feac:	f843 2b04 	str.w	r2, [r3], #4
 800feb0:	e7d8      	b.n	800fe64 <__multiply+0x50>
 800feb2:	f8b3 a000 	ldrh.w	sl, [r3]
 800feb6:	f1ba 0f00 	cmp.w	sl, #0
 800feba:	d024      	beq.n	800ff06 <__multiply+0xf2>
 800febc:	f104 0e14 	add.w	lr, r4, #20
 800fec0:	46a9      	mov	r9, r5
 800fec2:	f04f 0c00 	mov.w	ip, #0
 800fec6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800feca:	f8d9 1000 	ldr.w	r1, [r9]
 800fece:	fa1f fb82 	uxth.w	fp, r2
 800fed2:	b289      	uxth	r1, r1
 800fed4:	fb0a 110b 	mla	r1, sl, fp, r1
 800fed8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fedc:	f8d9 2000 	ldr.w	r2, [r9]
 800fee0:	4461      	add	r1, ip
 800fee2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fee6:	fb0a c20b 	mla	r2, sl, fp, ip
 800feea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800feee:	b289      	uxth	r1, r1
 800fef0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fef4:	4577      	cmp	r7, lr
 800fef6:	f849 1b04 	str.w	r1, [r9], #4
 800fefa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fefe:	d8e2      	bhi.n	800fec6 <__multiply+0xb2>
 800ff00:	9a01      	ldr	r2, [sp, #4]
 800ff02:	f845 c002 	str.w	ip, [r5, r2]
 800ff06:	9a03      	ldr	r2, [sp, #12]
 800ff08:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ff0c:	3304      	adds	r3, #4
 800ff0e:	f1b9 0f00 	cmp.w	r9, #0
 800ff12:	d020      	beq.n	800ff56 <__multiply+0x142>
 800ff14:	6829      	ldr	r1, [r5, #0]
 800ff16:	f104 0c14 	add.w	ip, r4, #20
 800ff1a:	46ae      	mov	lr, r5
 800ff1c:	f04f 0a00 	mov.w	sl, #0
 800ff20:	f8bc b000 	ldrh.w	fp, [ip]
 800ff24:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ff28:	fb09 220b 	mla	r2, r9, fp, r2
 800ff2c:	4492      	add	sl, r2
 800ff2e:	b289      	uxth	r1, r1
 800ff30:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ff34:	f84e 1b04 	str.w	r1, [lr], #4
 800ff38:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ff3c:	f8be 1000 	ldrh.w	r1, [lr]
 800ff40:	0c12      	lsrs	r2, r2, #16
 800ff42:	fb09 1102 	mla	r1, r9, r2, r1
 800ff46:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ff4a:	4567      	cmp	r7, ip
 800ff4c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ff50:	d8e6      	bhi.n	800ff20 <__multiply+0x10c>
 800ff52:	9a01      	ldr	r2, [sp, #4]
 800ff54:	50a9      	str	r1, [r5, r2]
 800ff56:	3504      	adds	r5, #4
 800ff58:	e79a      	b.n	800fe90 <__multiply+0x7c>
 800ff5a:	3e01      	subs	r6, #1
 800ff5c:	e79c      	b.n	800fe98 <__multiply+0x84>
 800ff5e:	bf00      	nop
 800ff60:	08010a54 	.word	0x08010a54
 800ff64:	08010a65 	.word	0x08010a65

0800ff68 <__pow5mult>:
 800ff68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff6c:	4615      	mov	r5, r2
 800ff6e:	f012 0203 	ands.w	r2, r2, #3
 800ff72:	4606      	mov	r6, r0
 800ff74:	460f      	mov	r7, r1
 800ff76:	d007      	beq.n	800ff88 <__pow5mult+0x20>
 800ff78:	4c25      	ldr	r4, [pc, #148]	; (8010010 <__pow5mult+0xa8>)
 800ff7a:	3a01      	subs	r2, #1
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ff82:	f7ff fe9b 	bl	800fcbc <__multadd>
 800ff86:	4607      	mov	r7, r0
 800ff88:	10ad      	asrs	r5, r5, #2
 800ff8a:	d03d      	beq.n	8010008 <__pow5mult+0xa0>
 800ff8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ff8e:	b97c      	cbnz	r4, 800ffb0 <__pow5mult+0x48>
 800ff90:	2010      	movs	r0, #16
 800ff92:	f7ff fe1d 	bl	800fbd0 <malloc>
 800ff96:	4602      	mov	r2, r0
 800ff98:	6270      	str	r0, [r6, #36]	; 0x24
 800ff9a:	b928      	cbnz	r0, 800ffa8 <__pow5mult+0x40>
 800ff9c:	4b1d      	ldr	r3, [pc, #116]	; (8010014 <__pow5mult+0xac>)
 800ff9e:	481e      	ldr	r0, [pc, #120]	; (8010018 <__pow5mult+0xb0>)
 800ffa0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ffa4:	f7fd fc62 	bl	800d86c <__assert_func>
 800ffa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ffac:	6004      	str	r4, [r0, #0]
 800ffae:	60c4      	str	r4, [r0, #12]
 800ffb0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ffb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ffb8:	b94c      	cbnz	r4, 800ffce <__pow5mult+0x66>
 800ffba:	f240 2171 	movw	r1, #625	; 0x271
 800ffbe:	4630      	mov	r0, r6
 800ffc0:	f7ff ff12 	bl	800fde8 <__i2b>
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	f8c8 0008 	str.w	r0, [r8, #8]
 800ffca:	4604      	mov	r4, r0
 800ffcc:	6003      	str	r3, [r0, #0]
 800ffce:	f04f 0900 	mov.w	r9, #0
 800ffd2:	07eb      	lsls	r3, r5, #31
 800ffd4:	d50a      	bpl.n	800ffec <__pow5mult+0x84>
 800ffd6:	4639      	mov	r1, r7
 800ffd8:	4622      	mov	r2, r4
 800ffda:	4630      	mov	r0, r6
 800ffdc:	f7ff ff1a 	bl	800fe14 <__multiply>
 800ffe0:	4639      	mov	r1, r7
 800ffe2:	4680      	mov	r8, r0
 800ffe4:	4630      	mov	r0, r6
 800ffe6:	f7ff fe47 	bl	800fc78 <_Bfree>
 800ffea:	4647      	mov	r7, r8
 800ffec:	106d      	asrs	r5, r5, #1
 800ffee:	d00b      	beq.n	8010008 <__pow5mult+0xa0>
 800fff0:	6820      	ldr	r0, [r4, #0]
 800fff2:	b938      	cbnz	r0, 8010004 <__pow5mult+0x9c>
 800fff4:	4622      	mov	r2, r4
 800fff6:	4621      	mov	r1, r4
 800fff8:	4630      	mov	r0, r6
 800fffa:	f7ff ff0b 	bl	800fe14 <__multiply>
 800fffe:	6020      	str	r0, [r4, #0]
 8010000:	f8c0 9000 	str.w	r9, [r0]
 8010004:	4604      	mov	r4, r0
 8010006:	e7e4      	b.n	800ffd2 <__pow5mult+0x6a>
 8010008:	4638      	mov	r0, r7
 801000a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801000e:	bf00      	nop
 8010010:	08010bb8 	.word	0x08010bb8
 8010014:	080109e2 	.word	0x080109e2
 8010018:	08010a65 	.word	0x08010a65

0801001c <__lshift>:
 801001c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010020:	460c      	mov	r4, r1
 8010022:	6849      	ldr	r1, [r1, #4]
 8010024:	6923      	ldr	r3, [r4, #16]
 8010026:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801002a:	68a3      	ldr	r3, [r4, #8]
 801002c:	4607      	mov	r7, r0
 801002e:	4691      	mov	r9, r2
 8010030:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010034:	f108 0601 	add.w	r6, r8, #1
 8010038:	42b3      	cmp	r3, r6
 801003a:	db0b      	blt.n	8010054 <__lshift+0x38>
 801003c:	4638      	mov	r0, r7
 801003e:	f7ff fddb 	bl	800fbf8 <_Balloc>
 8010042:	4605      	mov	r5, r0
 8010044:	b948      	cbnz	r0, 801005a <__lshift+0x3e>
 8010046:	4602      	mov	r2, r0
 8010048:	4b2a      	ldr	r3, [pc, #168]	; (80100f4 <__lshift+0xd8>)
 801004a:	482b      	ldr	r0, [pc, #172]	; (80100f8 <__lshift+0xdc>)
 801004c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010050:	f7fd fc0c 	bl	800d86c <__assert_func>
 8010054:	3101      	adds	r1, #1
 8010056:	005b      	lsls	r3, r3, #1
 8010058:	e7ee      	b.n	8010038 <__lshift+0x1c>
 801005a:	2300      	movs	r3, #0
 801005c:	f100 0114 	add.w	r1, r0, #20
 8010060:	f100 0210 	add.w	r2, r0, #16
 8010064:	4618      	mov	r0, r3
 8010066:	4553      	cmp	r3, sl
 8010068:	db37      	blt.n	80100da <__lshift+0xbe>
 801006a:	6920      	ldr	r0, [r4, #16]
 801006c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010070:	f104 0314 	add.w	r3, r4, #20
 8010074:	f019 091f 	ands.w	r9, r9, #31
 8010078:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801007c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010080:	d02f      	beq.n	80100e2 <__lshift+0xc6>
 8010082:	f1c9 0e20 	rsb	lr, r9, #32
 8010086:	468a      	mov	sl, r1
 8010088:	f04f 0c00 	mov.w	ip, #0
 801008c:	681a      	ldr	r2, [r3, #0]
 801008e:	fa02 f209 	lsl.w	r2, r2, r9
 8010092:	ea42 020c 	orr.w	r2, r2, ip
 8010096:	f84a 2b04 	str.w	r2, [sl], #4
 801009a:	f853 2b04 	ldr.w	r2, [r3], #4
 801009e:	4298      	cmp	r0, r3
 80100a0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80100a4:	d8f2      	bhi.n	801008c <__lshift+0x70>
 80100a6:	1b03      	subs	r3, r0, r4
 80100a8:	3b15      	subs	r3, #21
 80100aa:	f023 0303 	bic.w	r3, r3, #3
 80100ae:	3304      	adds	r3, #4
 80100b0:	f104 0215 	add.w	r2, r4, #21
 80100b4:	4290      	cmp	r0, r2
 80100b6:	bf38      	it	cc
 80100b8:	2304      	movcc	r3, #4
 80100ba:	f841 c003 	str.w	ip, [r1, r3]
 80100be:	f1bc 0f00 	cmp.w	ip, #0
 80100c2:	d001      	beq.n	80100c8 <__lshift+0xac>
 80100c4:	f108 0602 	add.w	r6, r8, #2
 80100c8:	3e01      	subs	r6, #1
 80100ca:	4638      	mov	r0, r7
 80100cc:	612e      	str	r6, [r5, #16]
 80100ce:	4621      	mov	r1, r4
 80100d0:	f7ff fdd2 	bl	800fc78 <_Bfree>
 80100d4:	4628      	mov	r0, r5
 80100d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100da:	f842 0f04 	str.w	r0, [r2, #4]!
 80100de:	3301      	adds	r3, #1
 80100e0:	e7c1      	b.n	8010066 <__lshift+0x4a>
 80100e2:	3904      	subs	r1, #4
 80100e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80100e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80100ec:	4298      	cmp	r0, r3
 80100ee:	d8f9      	bhi.n	80100e4 <__lshift+0xc8>
 80100f0:	e7ea      	b.n	80100c8 <__lshift+0xac>
 80100f2:	bf00      	nop
 80100f4:	08010a54 	.word	0x08010a54
 80100f8:	08010a65 	.word	0x08010a65

080100fc <__mcmp>:
 80100fc:	b530      	push	{r4, r5, lr}
 80100fe:	6902      	ldr	r2, [r0, #16]
 8010100:	690c      	ldr	r4, [r1, #16]
 8010102:	1b12      	subs	r2, r2, r4
 8010104:	d10e      	bne.n	8010124 <__mcmp+0x28>
 8010106:	f100 0314 	add.w	r3, r0, #20
 801010a:	3114      	adds	r1, #20
 801010c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010110:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010114:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010118:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801011c:	42a5      	cmp	r5, r4
 801011e:	d003      	beq.n	8010128 <__mcmp+0x2c>
 8010120:	d305      	bcc.n	801012e <__mcmp+0x32>
 8010122:	2201      	movs	r2, #1
 8010124:	4610      	mov	r0, r2
 8010126:	bd30      	pop	{r4, r5, pc}
 8010128:	4283      	cmp	r3, r0
 801012a:	d3f3      	bcc.n	8010114 <__mcmp+0x18>
 801012c:	e7fa      	b.n	8010124 <__mcmp+0x28>
 801012e:	f04f 32ff 	mov.w	r2, #4294967295
 8010132:	e7f7      	b.n	8010124 <__mcmp+0x28>

08010134 <__mdiff>:
 8010134:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010138:	460c      	mov	r4, r1
 801013a:	4606      	mov	r6, r0
 801013c:	4611      	mov	r1, r2
 801013e:	4620      	mov	r0, r4
 8010140:	4690      	mov	r8, r2
 8010142:	f7ff ffdb 	bl	80100fc <__mcmp>
 8010146:	1e05      	subs	r5, r0, #0
 8010148:	d110      	bne.n	801016c <__mdiff+0x38>
 801014a:	4629      	mov	r1, r5
 801014c:	4630      	mov	r0, r6
 801014e:	f7ff fd53 	bl	800fbf8 <_Balloc>
 8010152:	b930      	cbnz	r0, 8010162 <__mdiff+0x2e>
 8010154:	4b3a      	ldr	r3, [pc, #232]	; (8010240 <__mdiff+0x10c>)
 8010156:	4602      	mov	r2, r0
 8010158:	f240 2132 	movw	r1, #562	; 0x232
 801015c:	4839      	ldr	r0, [pc, #228]	; (8010244 <__mdiff+0x110>)
 801015e:	f7fd fb85 	bl	800d86c <__assert_func>
 8010162:	2301      	movs	r3, #1
 8010164:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010168:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801016c:	bfa4      	itt	ge
 801016e:	4643      	movge	r3, r8
 8010170:	46a0      	movge	r8, r4
 8010172:	4630      	mov	r0, r6
 8010174:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010178:	bfa6      	itte	ge
 801017a:	461c      	movge	r4, r3
 801017c:	2500      	movge	r5, #0
 801017e:	2501      	movlt	r5, #1
 8010180:	f7ff fd3a 	bl	800fbf8 <_Balloc>
 8010184:	b920      	cbnz	r0, 8010190 <__mdiff+0x5c>
 8010186:	4b2e      	ldr	r3, [pc, #184]	; (8010240 <__mdiff+0x10c>)
 8010188:	4602      	mov	r2, r0
 801018a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801018e:	e7e5      	b.n	801015c <__mdiff+0x28>
 8010190:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010194:	6926      	ldr	r6, [r4, #16]
 8010196:	60c5      	str	r5, [r0, #12]
 8010198:	f104 0914 	add.w	r9, r4, #20
 801019c:	f108 0514 	add.w	r5, r8, #20
 80101a0:	f100 0e14 	add.w	lr, r0, #20
 80101a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80101a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80101ac:	f108 0210 	add.w	r2, r8, #16
 80101b0:	46f2      	mov	sl, lr
 80101b2:	2100      	movs	r1, #0
 80101b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80101b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80101bc:	fa1f f883 	uxth.w	r8, r3
 80101c0:	fa11 f18b 	uxtah	r1, r1, fp
 80101c4:	0c1b      	lsrs	r3, r3, #16
 80101c6:	eba1 0808 	sub.w	r8, r1, r8
 80101ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80101ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80101d2:	fa1f f888 	uxth.w	r8, r8
 80101d6:	1419      	asrs	r1, r3, #16
 80101d8:	454e      	cmp	r6, r9
 80101da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80101de:	f84a 3b04 	str.w	r3, [sl], #4
 80101e2:	d8e7      	bhi.n	80101b4 <__mdiff+0x80>
 80101e4:	1b33      	subs	r3, r6, r4
 80101e6:	3b15      	subs	r3, #21
 80101e8:	f023 0303 	bic.w	r3, r3, #3
 80101ec:	3304      	adds	r3, #4
 80101ee:	3415      	adds	r4, #21
 80101f0:	42a6      	cmp	r6, r4
 80101f2:	bf38      	it	cc
 80101f4:	2304      	movcc	r3, #4
 80101f6:	441d      	add	r5, r3
 80101f8:	4473      	add	r3, lr
 80101fa:	469e      	mov	lr, r3
 80101fc:	462e      	mov	r6, r5
 80101fe:	4566      	cmp	r6, ip
 8010200:	d30e      	bcc.n	8010220 <__mdiff+0xec>
 8010202:	f10c 0203 	add.w	r2, ip, #3
 8010206:	1b52      	subs	r2, r2, r5
 8010208:	f022 0203 	bic.w	r2, r2, #3
 801020c:	3d03      	subs	r5, #3
 801020e:	45ac      	cmp	ip, r5
 8010210:	bf38      	it	cc
 8010212:	2200      	movcc	r2, #0
 8010214:	441a      	add	r2, r3
 8010216:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801021a:	b17b      	cbz	r3, 801023c <__mdiff+0x108>
 801021c:	6107      	str	r7, [r0, #16]
 801021e:	e7a3      	b.n	8010168 <__mdiff+0x34>
 8010220:	f856 8b04 	ldr.w	r8, [r6], #4
 8010224:	fa11 f288 	uxtah	r2, r1, r8
 8010228:	1414      	asrs	r4, r2, #16
 801022a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801022e:	b292      	uxth	r2, r2
 8010230:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010234:	f84e 2b04 	str.w	r2, [lr], #4
 8010238:	1421      	asrs	r1, r4, #16
 801023a:	e7e0      	b.n	80101fe <__mdiff+0xca>
 801023c:	3f01      	subs	r7, #1
 801023e:	e7ea      	b.n	8010216 <__mdiff+0xe2>
 8010240:	08010a54 	.word	0x08010a54
 8010244:	08010a65 	.word	0x08010a65

08010248 <__d2b>:
 8010248:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801024c:	4689      	mov	r9, r1
 801024e:	2101      	movs	r1, #1
 8010250:	ec57 6b10 	vmov	r6, r7, d0
 8010254:	4690      	mov	r8, r2
 8010256:	f7ff fccf 	bl	800fbf8 <_Balloc>
 801025a:	4604      	mov	r4, r0
 801025c:	b930      	cbnz	r0, 801026c <__d2b+0x24>
 801025e:	4602      	mov	r2, r0
 8010260:	4b25      	ldr	r3, [pc, #148]	; (80102f8 <__d2b+0xb0>)
 8010262:	4826      	ldr	r0, [pc, #152]	; (80102fc <__d2b+0xb4>)
 8010264:	f240 310a 	movw	r1, #778	; 0x30a
 8010268:	f7fd fb00 	bl	800d86c <__assert_func>
 801026c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010270:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010274:	bb35      	cbnz	r5, 80102c4 <__d2b+0x7c>
 8010276:	2e00      	cmp	r6, #0
 8010278:	9301      	str	r3, [sp, #4]
 801027a:	d028      	beq.n	80102ce <__d2b+0x86>
 801027c:	4668      	mov	r0, sp
 801027e:	9600      	str	r6, [sp, #0]
 8010280:	f7ff fd82 	bl	800fd88 <__lo0bits>
 8010284:	9900      	ldr	r1, [sp, #0]
 8010286:	b300      	cbz	r0, 80102ca <__d2b+0x82>
 8010288:	9a01      	ldr	r2, [sp, #4]
 801028a:	f1c0 0320 	rsb	r3, r0, #32
 801028e:	fa02 f303 	lsl.w	r3, r2, r3
 8010292:	430b      	orrs	r3, r1
 8010294:	40c2      	lsrs	r2, r0
 8010296:	6163      	str	r3, [r4, #20]
 8010298:	9201      	str	r2, [sp, #4]
 801029a:	9b01      	ldr	r3, [sp, #4]
 801029c:	61a3      	str	r3, [r4, #24]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	bf14      	ite	ne
 80102a2:	2202      	movne	r2, #2
 80102a4:	2201      	moveq	r2, #1
 80102a6:	6122      	str	r2, [r4, #16]
 80102a8:	b1d5      	cbz	r5, 80102e0 <__d2b+0x98>
 80102aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80102ae:	4405      	add	r5, r0
 80102b0:	f8c9 5000 	str.w	r5, [r9]
 80102b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80102b8:	f8c8 0000 	str.w	r0, [r8]
 80102bc:	4620      	mov	r0, r4
 80102be:	b003      	add	sp, #12
 80102c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80102c8:	e7d5      	b.n	8010276 <__d2b+0x2e>
 80102ca:	6161      	str	r1, [r4, #20]
 80102cc:	e7e5      	b.n	801029a <__d2b+0x52>
 80102ce:	a801      	add	r0, sp, #4
 80102d0:	f7ff fd5a 	bl	800fd88 <__lo0bits>
 80102d4:	9b01      	ldr	r3, [sp, #4]
 80102d6:	6163      	str	r3, [r4, #20]
 80102d8:	2201      	movs	r2, #1
 80102da:	6122      	str	r2, [r4, #16]
 80102dc:	3020      	adds	r0, #32
 80102de:	e7e3      	b.n	80102a8 <__d2b+0x60>
 80102e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80102e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80102e8:	f8c9 0000 	str.w	r0, [r9]
 80102ec:	6918      	ldr	r0, [r3, #16]
 80102ee:	f7ff fd2b 	bl	800fd48 <__hi0bits>
 80102f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80102f6:	e7df      	b.n	80102b8 <__d2b+0x70>
 80102f8:	08010a54 	.word	0x08010a54
 80102fc:	08010a65 	.word	0x08010a65

08010300 <_calloc_r>:
 8010300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010302:	fba1 2402 	umull	r2, r4, r1, r2
 8010306:	b94c      	cbnz	r4, 801031c <_calloc_r+0x1c>
 8010308:	4611      	mov	r1, r2
 801030a:	9201      	str	r2, [sp, #4]
 801030c:	f7fd fc38 	bl	800db80 <_malloc_r>
 8010310:	9a01      	ldr	r2, [sp, #4]
 8010312:	4605      	mov	r5, r0
 8010314:	b930      	cbnz	r0, 8010324 <_calloc_r+0x24>
 8010316:	4628      	mov	r0, r5
 8010318:	b003      	add	sp, #12
 801031a:	bd30      	pop	{r4, r5, pc}
 801031c:	220c      	movs	r2, #12
 801031e:	6002      	str	r2, [r0, #0]
 8010320:	2500      	movs	r5, #0
 8010322:	e7f8      	b.n	8010316 <_calloc_r+0x16>
 8010324:	4621      	mov	r1, r4
 8010326:	f7fd fc02 	bl	800db2e <memset>
 801032a:	e7f4      	b.n	8010316 <_calloc_r+0x16>

0801032c <_free_r>:
 801032c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801032e:	2900      	cmp	r1, #0
 8010330:	d044      	beq.n	80103bc <_free_r+0x90>
 8010332:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010336:	9001      	str	r0, [sp, #4]
 8010338:	2b00      	cmp	r3, #0
 801033a:	f1a1 0404 	sub.w	r4, r1, #4
 801033e:	bfb8      	it	lt
 8010340:	18e4      	addlt	r4, r4, r3
 8010342:	f7ff fc4d 	bl	800fbe0 <__malloc_lock>
 8010346:	4a1e      	ldr	r2, [pc, #120]	; (80103c0 <_free_r+0x94>)
 8010348:	9801      	ldr	r0, [sp, #4]
 801034a:	6813      	ldr	r3, [r2, #0]
 801034c:	b933      	cbnz	r3, 801035c <_free_r+0x30>
 801034e:	6063      	str	r3, [r4, #4]
 8010350:	6014      	str	r4, [r2, #0]
 8010352:	b003      	add	sp, #12
 8010354:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010358:	f7ff bc48 	b.w	800fbec <__malloc_unlock>
 801035c:	42a3      	cmp	r3, r4
 801035e:	d908      	bls.n	8010372 <_free_r+0x46>
 8010360:	6825      	ldr	r5, [r4, #0]
 8010362:	1961      	adds	r1, r4, r5
 8010364:	428b      	cmp	r3, r1
 8010366:	bf01      	itttt	eq
 8010368:	6819      	ldreq	r1, [r3, #0]
 801036a:	685b      	ldreq	r3, [r3, #4]
 801036c:	1949      	addeq	r1, r1, r5
 801036e:	6021      	streq	r1, [r4, #0]
 8010370:	e7ed      	b.n	801034e <_free_r+0x22>
 8010372:	461a      	mov	r2, r3
 8010374:	685b      	ldr	r3, [r3, #4]
 8010376:	b10b      	cbz	r3, 801037c <_free_r+0x50>
 8010378:	42a3      	cmp	r3, r4
 801037a:	d9fa      	bls.n	8010372 <_free_r+0x46>
 801037c:	6811      	ldr	r1, [r2, #0]
 801037e:	1855      	adds	r5, r2, r1
 8010380:	42a5      	cmp	r5, r4
 8010382:	d10b      	bne.n	801039c <_free_r+0x70>
 8010384:	6824      	ldr	r4, [r4, #0]
 8010386:	4421      	add	r1, r4
 8010388:	1854      	adds	r4, r2, r1
 801038a:	42a3      	cmp	r3, r4
 801038c:	6011      	str	r1, [r2, #0]
 801038e:	d1e0      	bne.n	8010352 <_free_r+0x26>
 8010390:	681c      	ldr	r4, [r3, #0]
 8010392:	685b      	ldr	r3, [r3, #4]
 8010394:	6053      	str	r3, [r2, #4]
 8010396:	4421      	add	r1, r4
 8010398:	6011      	str	r1, [r2, #0]
 801039a:	e7da      	b.n	8010352 <_free_r+0x26>
 801039c:	d902      	bls.n	80103a4 <_free_r+0x78>
 801039e:	230c      	movs	r3, #12
 80103a0:	6003      	str	r3, [r0, #0]
 80103a2:	e7d6      	b.n	8010352 <_free_r+0x26>
 80103a4:	6825      	ldr	r5, [r4, #0]
 80103a6:	1961      	adds	r1, r4, r5
 80103a8:	428b      	cmp	r3, r1
 80103aa:	bf04      	itt	eq
 80103ac:	6819      	ldreq	r1, [r3, #0]
 80103ae:	685b      	ldreq	r3, [r3, #4]
 80103b0:	6063      	str	r3, [r4, #4]
 80103b2:	bf04      	itt	eq
 80103b4:	1949      	addeq	r1, r1, r5
 80103b6:	6021      	streq	r1, [r4, #0]
 80103b8:	6054      	str	r4, [r2, #4]
 80103ba:	e7ca      	b.n	8010352 <_free_r+0x26>
 80103bc:	b003      	add	sp, #12
 80103be:	bd30      	pop	{r4, r5, pc}
 80103c0:	200056c4 	.word	0x200056c4

080103c4 <_read_r>:
 80103c4:	b538      	push	{r3, r4, r5, lr}
 80103c6:	4d07      	ldr	r5, [pc, #28]	; (80103e4 <_read_r+0x20>)
 80103c8:	4604      	mov	r4, r0
 80103ca:	4608      	mov	r0, r1
 80103cc:	4611      	mov	r1, r2
 80103ce:	2200      	movs	r2, #0
 80103d0:	602a      	str	r2, [r5, #0]
 80103d2:	461a      	mov	r2, r3
 80103d4:	f7f2 fbe6 	bl	8002ba4 <_read>
 80103d8:	1c43      	adds	r3, r0, #1
 80103da:	d102      	bne.n	80103e2 <_read_r+0x1e>
 80103dc:	682b      	ldr	r3, [r5, #0]
 80103de:	b103      	cbz	r3, 80103e2 <_read_r+0x1e>
 80103e0:	6023      	str	r3, [r4, #0]
 80103e2:	bd38      	pop	{r3, r4, r5, pc}
 80103e4:	200056cc 	.word	0x200056cc

080103e8 <_raise_r>:
 80103e8:	291f      	cmp	r1, #31
 80103ea:	b538      	push	{r3, r4, r5, lr}
 80103ec:	4604      	mov	r4, r0
 80103ee:	460d      	mov	r5, r1
 80103f0:	d904      	bls.n	80103fc <_raise_r+0x14>
 80103f2:	2316      	movs	r3, #22
 80103f4:	6003      	str	r3, [r0, #0]
 80103f6:	f04f 30ff 	mov.w	r0, #4294967295
 80103fa:	bd38      	pop	{r3, r4, r5, pc}
 80103fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80103fe:	b112      	cbz	r2, 8010406 <_raise_r+0x1e>
 8010400:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010404:	b94b      	cbnz	r3, 801041a <_raise_r+0x32>
 8010406:	4620      	mov	r0, r4
 8010408:	f000 f830 	bl	801046c <_getpid_r>
 801040c:	462a      	mov	r2, r5
 801040e:	4601      	mov	r1, r0
 8010410:	4620      	mov	r0, r4
 8010412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010416:	f000 b817 	b.w	8010448 <_kill_r>
 801041a:	2b01      	cmp	r3, #1
 801041c:	d00a      	beq.n	8010434 <_raise_r+0x4c>
 801041e:	1c59      	adds	r1, r3, #1
 8010420:	d103      	bne.n	801042a <_raise_r+0x42>
 8010422:	2316      	movs	r3, #22
 8010424:	6003      	str	r3, [r0, #0]
 8010426:	2001      	movs	r0, #1
 8010428:	e7e7      	b.n	80103fa <_raise_r+0x12>
 801042a:	2400      	movs	r4, #0
 801042c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010430:	4628      	mov	r0, r5
 8010432:	4798      	blx	r3
 8010434:	2000      	movs	r0, #0
 8010436:	e7e0      	b.n	80103fa <_raise_r+0x12>

08010438 <raise>:
 8010438:	4b02      	ldr	r3, [pc, #8]	; (8010444 <raise+0xc>)
 801043a:	4601      	mov	r1, r0
 801043c:	6818      	ldr	r0, [r3, #0]
 801043e:	f7ff bfd3 	b.w	80103e8 <_raise_r>
 8010442:	bf00      	nop
 8010444:	20000018 	.word	0x20000018

08010448 <_kill_r>:
 8010448:	b538      	push	{r3, r4, r5, lr}
 801044a:	4d07      	ldr	r5, [pc, #28]	; (8010468 <_kill_r+0x20>)
 801044c:	2300      	movs	r3, #0
 801044e:	4604      	mov	r4, r0
 8010450:	4608      	mov	r0, r1
 8010452:	4611      	mov	r1, r2
 8010454:	602b      	str	r3, [r5, #0]
 8010456:	f7f2 fb8b 	bl	8002b70 <_kill>
 801045a:	1c43      	adds	r3, r0, #1
 801045c:	d102      	bne.n	8010464 <_kill_r+0x1c>
 801045e:	682b      	ldr	r3, [r5, #0]
 8010460:	b103      	cbz	r3, 8010464 <_kill_r+0x1c>
 8010462:	6023      	str	r3, [r4, #0]
 8010464:	bd38      	pop	{r3, r4, r5, pc}
 8010466:	bf00      	nop
 8010468:	200056cc 	.word	0x200056cc

0801046c <_getpid_r>:
 801046c:	f7f2 bb78 	b.w	8002b60 <_getpid>

08010470 <_fstat_r>:
 8010470:	b538      	push	{r3, r4, r5, lr}
 8010472:	4d07      	ldr	r5, [pc, #28]	; (8010490 <_fstat_r+0x20>)
 8010474:	2300      	movs	r3, #0
 8010476:	4604      	mov	r4, r0
 8010478:	4608      	mov	r0, r1
 801047a:	4611      	mov	r1, r2
 801047c:	602b      	str	r3, [r5, #0]
 801047e:	f7f2 fbd6 	bl	8002c2e <_fstat>
 8010482:	1c43      	adds	r3, r0, #1
 8010484:	d102      	bne.n	801048c <_fstat_r+0x1c>
 8010486:	682b      	ldr	r3, [r5, #0]
 8010488:	b103      	cbz	r3, 801048c <_fstat_r+0x1c>
 801048a:	6023      	str	r3, [r4, #0]
 801048c:	bd38      	pop	{r3, r4, r5, pc}
 801048e:	bf00      	nop
 8010490:	200056cc 	.word	0x200056cc

08010494 <_isatty_r>:
 8010494:	b538      	push	{r3, r4, r5, lr}
 8010496:	4d06      	ldr	r5, [pc, #24]	; (80104b0 <_isatty_r+0x1c>)
 8010498:	2300      	movs	r3, #0
 801049a:	4604      	mov	r4, r0
 801049c:	4608      	mov	r0, r1
 801049e:	602b      	str	r3, [r5, #0]
 80104a0:	f7f2 fbd5 	bl	8002c4e <_isatty>
 80104a4:	1c43      	adds	r3, r0, #1
 80104a6:	d102      	bne.n	80104ae <_isatty_r+0x1a>
 80104a8:	682b      	ldr	r3, [r5, #0]
 80104aa:	b103      	cbz	r3, 80104ae <_isatty_r+0x1a>
 80104ac:	6023      	str	r3, [r4, #0]
 80104ae:	bd38      	pop	{r3, r4, r5, pc}
 80104b0:	200056cc 	.word	0x200056cc

080104b4 <__ascii_mbtowc>:
 80104b4:	b082      	sub	sp, #8
 80104b6:	b901      	cbnz	r1, 80104ba <__ascii_mbtowc+0x6>
 80104b8:	a901      	add	r1, sp, #4
 80104ba:	b142      	cbz	r2, 80104ce <__ascii_mbtowc+0x1a>
 80104bc:	b14b      	cbz	r3, 80104d2 <__ascii_mbtowc+0x1e>
 80104be:	7813      	ldrb	r3, [r2, #0]
 80104c0:	600b      	str	r3, [r1, #0]
 80104c2:	7812      	ldrb	r2, [r2, #0]
 80104c4:	1e10      	subs	r0, r2, #0
 80104c6:	bf18      	it	ne
 80104c8:	2001      	movne	r0, #1
 80104ca:	b002      	add	sp, #8
 80104cc:	4770      	bx	lr
 80104ce:	4610      	mov	r0, r2
 80104d0:	e7fb      	b.n	80104ca <__ascii_mbtowc+0x16>
 80104d2:	f06f 0001 	mvn.w	r0, #1
 80104d6:	e7f8      	b.n	80104ca <__ascii_mbtowc+0x16>

080104d8 <__ascii_wctomb>:
 80104d8:	b149      	cbz	r1, 80104ee <__ascii_wctomb+0x16>
 80104da:	2aff      	cmp	r2, #255	; 0xff
 80104dc:	bf85      	ittet	hi
 80104de:	238a      	movhi	r3, #138	; 0x8a
 80104e0:	6003      	strhi	r3, [r0, #0]
 80104e2:	700a      	strbls	r2, [r1, #0]
 80104e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80104e8:	bf98      	it	ls
 80104ea:	2001      	movls	r0, #1
 80104ec:	4770      	bx	lr
 80104ee:	4608      	mov	r0, r1
 80104f0:	4770      	bx	lr
	...

080104f4 <_init>:
 80104f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104f6:	bf00      	nop
 80104f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104fa:	bc08      	pop	{r3}
 80104fc:	469e      	mov	lr, r3
 80104fe:	4770      	bx	lr

08010500 <_fini>:
 8010500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010502:	bf00      	nop
 8010504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010506:	bc08      	pop	{r3}
 8010508:	469e      	mov	lr, r3
 801050a:	4770      	bx	lr
