
MotorCtrlSys_STM32F407ZET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000112bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d24  08011450  08011450  00021450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012174  08012174  00030360  2**0
                  CONTENTS
  4 .ARM          00000008  08012174  08012174  00022174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801217c  0801217c  00030360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801217c  0801217c  0002217c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012180  08012180  00022180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  08012184  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030360  2**0
                  CONTENTS
 10 .bss          00005628  20000360  20000360  00030360  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005988  20005988  00030360  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030360  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030390  2**0
                  CONTENTS, READONLY
 14 .debug_info   00026ffd  00000000  00000000  000303d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005b9c  00000000  00000000  000573d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f90  00000000  00000000  0005cf70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000185a  00000000  00000000  0005ef00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b31a  00000000  00000000  0006075a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002ba21  00000000  00000000  0008ba74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ef1bd  00000000  00000000  000b7495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000923c  00000000  00000000  001a6654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  001af890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000360 	.word	0x20000360
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011434 	.word	0x08011434

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000364 	.word	0x20000364
 80001cc:	08011434 	.word	0x08011434

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eea:	463b      	mov	r3, r7
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ef6:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <MX_ADC1_Init+0x98>)
 8000ef8:	4a21      	ldr	r2, [pc, #132]	; (8000f80 <MX_ADC1_Init+0x9c>)
 8000efa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000efc:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <MX_ADC1_Init+0x98>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f02:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <MX_ADC1_Init+0x98>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f08:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <MX_ADC1_Init+0x98>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <MX_ADC1_Init+0x98>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <MX_ADC1_Init+0x98>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f1c:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <MX_ADC1_Init+0x98>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <MX_ADC1_Init+0x98>)
 8000f24:	4a17      	ldr	r2, [pc, #92]	; (8000f84 <MX_ADC1_Init+0xa0>)
 8000f26:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <MX_ADC1_Init+0x98>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f2e:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <MX_ADC1_Init+0x98>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_ADC1_Init+0x98>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <MX_ADC1_Init+0x98>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f42:	480e      	ldr	r0, [pc, #56]	; (8000f7c <MX_ADC1_Init+0x98>)
 8000f44:	f004 ffd2 	bl	8005eec <HAL_ADC_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f4e:	f001 fb71 	bl	8002634 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f52:	230a      	movs	r3, #10
 8000f54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f56:	2301      	movs	r3, #1
 8000f58:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5e:	463b      	mov	r3, r7
 8000f60:	4619      	mov	r1, r3
 8000f62:	4806      	ldr	r0, [pc, #24]	; (8000f7c <MX_ADC1_Init+0x98>)
 8000f64:	f005 fafa 	bl	800655c <HAL_ADC_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f6e:	f001 fb61 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	2000037c 	.word	0x2000037c
 8000f80:	40012000 	.word	0x40012000
 8000f84:	0f000001 	.word	0x0f000001

08000f88 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8e:	463b      	mov	r3, r7
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000f9a:	4b21      	ldr	r3, [pc, #132]	; (8001020 <MX_ADC2_Init+0x98>)
 8000f9c:	4a21      	ldr	r2, [pc, #132]	; (8001024 <MX_ADC2_Init+0x9c>)
 8000f9e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <MX_ADC2_Init+0x98>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa6:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <MX_ADC2_Init+0x98>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000fac:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <MX_ADC2_Init+0x98>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000fb2:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <MX_ADC2_Init+0x98>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fb8:	4b19      	ldr	r3, [pc, #100]	; (8001020 <MX_ADC2_Init+0x98>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc0:	4b17      	ldr	r3, [pc, #92]	; (8001020 <MX_ADC2_Init+0x98>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc6:	4b16      	ldr	r3, [pc, #88]	; (8001020 <MX_ADC2_Init+0x98>)
 8000fc8:	4a17      	ldr	r2, [pc, #92]	; (8001028 <MX_ADC2_Init+0xa0>)
 8000fca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <MX_ADC2_Init+0x98>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <MX_ADC2_Init+0x98>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <MX_ADC2_Init+0x98>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <MX_ADC2_Init+0x98>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fe6:	480e      	ldr	r0, [pc, #56]	; (8001020 <MX_ADC2_Init+0x98>)
 8000fe8:	f004 ff80 	bl	8005eec <HAL_ADC_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000ff2:	f001 fb1f 	bl	8002634 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000ff6:	230c      	movs	r3, #12
 8000ff8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001002:	463b      	mov	r3, r7
 8001004:	4619      	mov	r1, r3
 8001006:	4806      	ldr	r0, [pc, #24]	; (8001020 <MX_ADC2_Init+0x98>)
 8001008:	f005 faa8 	bl	800655c <HAL_ADC_ConfigChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001012:	f001 fb0f 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200003c4 	.word	0x200003c4
 8001024:	40012100 	.word	0x40012100
 8001028:	0f000001 	.word	0x0f000001

0800102c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08c      	sub	sp, #48	; 0x30
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a2e      	ldr	r2, [pc, #184]	; (8001104 <HAL_ADC_MspInit+0xd8>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d128      	bne.n	80010a0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
 8001052:	4b2d      	ldr	r3, [pc, #180]	; (8001108 <HAL_ADC_MspInit+0xdc>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	4a2c      	ldr	r2, [pc, #176]	; (8001108 <HAL_ADC_MspInit+0xdc>)
 8001058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105c:	6453      	str	r3, [r2, #68]	; 0x44
 800105e:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <HAL_ADC_MspInit+0xdc>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001066:	61bb      	str	r3, [r7, #24]
 8001068:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	4b26      	ldr	r3, [pc, #152]	; (8001108 <HAL_ADC_MspInit+0xdc>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a25      	ldr	r2, [pc, #148]	; (8001108 <HAL_ADC_MspInit+0xdc>)
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b23      	ldr	r3, [pc, #140]	; (8001108 <HAL_ADC_MspInit+0xdc>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0304 	and.w	r3, r3, #4
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = VM6_SensA_ADC_Pin|VM6_SensB_ADC_Pin;
 8001086:	2303      	movs	r3, #3
 8001088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800108a:	2303      	movs	r3, #3
 800108c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	4619      	mov	r1, r3
 8001098:	481c      	ldr	r0, [pc, #112]	; (800110c <HAL_ADC_MspInit+0xe0>)
 800109a:	f006 fbcd 	bl	8007838 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800109e:	e02c      	b.n	80010fa <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a1a      	ldr	r2, [pc, #104]	; (8001110 <HAL_ADC_MspInit+0xe4>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d127      	bne.n	80010fa <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	4b16      	ldr	r3, [pc, #88]	; (8001108 <HAL_ADC_MspInit+0xdc>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	4a15      	ldr	r2, [pc, #84]	; (8001108 <HAL_ADC_MspInit+0xdc>)
 80010b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ba:	4b13      	ldr	r3, [pc, #76]	; (8001108 <HAL_ADC_MspInit+0xdc>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <HAL_ADC_MspInit+0xdc>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <HAL_ADC_MspInit+0xdc>)
 80010d0:	f043 0304 	orr.w	r3, r3, #4
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <HAL_ADC_MspInit+0xdc>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VM8_SensA_ADC_Pin|VM8_SensB_ADC_Pin;
 80010e2:	230c      	movs	r3, #12
 80010e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e6:	2303      	movs	r3, #3
 80010e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	4619      	mov	r1, r3
 80010f4:	4805      	ldr	r0, [pc, #20]	; (800110c <HAL_ADC_MspInit+0xe0>)
 80010f6:	f006 fb9f 	bl	8007838 <HAL_GPIO_Init>
}
 80010fa:	bf00      	nop
 80010fc:	3730      	adds	r7, #48	; 0x30
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40012000 	.word	0x40012000
 8001108:	40023800 	.word	0x40023800
 800110c:	40020800 	.word	0x40020800
 8001110:	40012100 	.word	0x40012100

08001114 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <MX_CAN1_Init+0x60>)
 800111a:	4a17      	ldr	r2, [pc, #92]	; (8001178 <MX_CAN1_Init+0x64>)
 800111c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <MX_CAN1_Init+0x60>)
 8001120:	2210      	movs	r2, #16
 8001122:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <MX_CAN1_Init+0x60>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800112a:	4b12      	ldr	r3, [pc, #72]	; (8001174 <MX_CAN1_Init+0x60>)
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001130:	4b10      	ldr	r3, [pc, #64]	; (8001174 <MX_CAN1_Init+0x60>)
 8001132:	2200      	movs	r2, #0
 8001134:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <MX_CAN1_Init+0x60>)
 8001138:	2200      	movs	r2, #0
 800113a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800113c:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <MX_CAN1_Init+0x60>)
 800113e:	2200      	movs	r2, #0
 8001140:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <MX_CAN1_Init+0x60>)
 8001144:	2200      	movs	r2, #0
 8001146:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <MX_CAN1_Init+0x60>)
 800114a:	2200      	movs	r2, #0
 800114c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_CAN1_Init+0x60>)
 8001150:	2200      	movs	r2, #0
 8001152:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001154:	4b07      	ldr	r3, [pc, #28]	; (8001174 <MX_CAN1_Init+0x60>)
 8001156:	2200      	movs	r2, #0
 8001158:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MX_CAN1_Init+0x60>)
 800115c:	2200      	movs	r2, #0
 800115e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001160:	4804      	ldr	r0, [pc, #16]	; (8001174 <MX_CAN1_Init+0x60>)
 8001162:	f005 fc9b 	bl	8006a9c <HAL_CAN_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800116c:	f001 fa62 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	2000040c 	.word	0x2000040c
 8001178:	40006400 	.word	0x40006400

0800117c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a19      	ldr	r2, [pc, #100]	; (8001200 <HAL_CAN_MspInit+0x84>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d12c      	bne.n	80011f8 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <HAL_CAN_MspInit+0x88>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	4a17      	ldr	r2, [pc, #92]	; (8001204 <HAL_CAN_MspInit+0x88>)
 80011a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011ac:	6413      	str	r3, [r2, #64]	; 0x40
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_CAN_MspInit+0x88>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HAL_CAN_MspInit+0x88>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a10      	ldr	r2, [pc, #64]	; (8001204 <HAL_CAN_MspInit+0x88>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_CAN_MspInit+0x88>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80011e8:	2309      	movs	r3, #9
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4619      	mov	r1, r3
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <HAL_CAN_MspInit+0x8c>)
 80011f4:	f006 fb20 	bl	8007838 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80011f8:	bf00      	nop
 80011fa:	3728      	adds	r7, #40	; 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40006400 	.word	0x40006400
 8001204:	40023800 	.word	0x40023800
 8001208:	40020000 	.word	0x40020000

0800120c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001212:	463b      	mov	r3, r7
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_DAC_Init+0x4c>)
 800121c:	4a0f      	ldr	r2, [pc, #60]	; (800125c <MX_DAC_Init+0x50>)
 800121e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001220:	480d      	ldr	r0, [pc, #52]	; (8001258 <MX_DAC_Init+0x4c>)
 8001222:	f005 fe19 	bl	8006e58 <HAL_DAC_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800122c:	f001 fa02 	bl	8002634 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001230:	2300      	movs	r3, #0
 8001232:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	2200      	movs	r2, #0
 800123c:	4619      	mov	r1, r3
 800123e:	4806      	ldr	r0, [pc, #24]	; (8001258 <MX_DAC_Init+0x4c>)
 8001240:	f005 fe90 	bl	8006f64 <HAL_DAC_ConfigChannel>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800124a:	f001 f9f3 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000434 	.word	0x20000434
 800125c:	40007400 	.word	0x40007400

08001260 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a1b      	ldr	r2, [pc, #108]	; (80012ec <HAL_DAC_MspInit+0x8c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d12f      	bne.n	80012e2 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <HAL_DAC_MspInit+0x90>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	4a19      	ldr	r2, [pc, #100]	; (80012f0 <HAL_DAC_MspInit+0x90>)
 800128c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001290:	6413      	str	r3, [r2, #64]	; 0x40
 8001292:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <HAL_DAC_MspInit+0x90>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <HAL_DAC_MspInit+0x90>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <HAL_DAC_MspInit+0x90>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <HAL_DAC_MspInit+0x90>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012ba:	2310      	movs	r3, #16
 80012bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012be:	2303      	movs	r3, #3
 80012c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	4809      	ldr	r0, [pc, #36]	; (80012f4 <HAL_DAC_MspInit+0x94>)
 80012ce:	f006 fab3 	bl	8007838 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 7, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2107      	movs	r1, #7
 80012d6:	2036      	movs	r0, #54	; 0x36
 80012d8:	f005 fd94 	bl	8006e04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012dc:	2036      	movs	r0, #54	; 0x36
 80012de:	f005 fdad 	bl	8006e3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80012e2:	bf00      	nop
 80012e4:	3728      	adds	r7, #40	; 0x28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40007400 	.word	0x40007400
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40020000 	.word	0x40020000

080012f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <MX_DMA_Init+0x3c>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <MX_DMA_Init+0x3c>)
 8001308:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <MX_DMA_Init+0x3c>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 7, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2107      	movs	r1, #7
 800131e:	200d      	movs	r0, #13
 8001320:	f005 fd70 	bl	8006e04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001324:	200d      	movs	r0, #13
 8001326:	f005 fd89 	bl	8006e3c <HAL_NVIC_EnableIRQ>

}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800

08001338 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800133c:	4a10      	ldr	r2, [pc, #64]	; (8001380 <MX_FREERTOS_Init+0x48>)
 800133e:	2100      	movs	r1, #0
 8001340:	4810      	ldr	r0, [pc, #64]	; (8001384 <MX_FREERTOS_Init+0x4c>)
 8001342:	f00a fddb 	bl	800befc <osThreadNew>
 8001346:	4603      	mov	r3, r0
 8001348:	4a0f      	ldr	r2, [pc, #60]	; (8001388 <MX_FREERTOS_Init+0x50>)
 800134a:	6013      	str	r3, [r2, #0]

  /* creation of messageTask */
  messageTaskHandle = osThreadNew(StartmessageTask, NULL, &messageTask_attributes);
 800134c:	4a0f      	ldr	r2, [pc, #60]	; (800138c <MX_FREERTOS_Init+0x54>)
 800134e:	2100      	movs	r1, #0
 8001350:	480f      	ldr	r0, [pc, #60]	; (8001390 <MX_FREERTOS_Init+0x58>)
 8001352:	f00a fdd3 	bl	800befc <osThreadNew>
 8001356:	4603      	mov	r3, r0
 8001358:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <MX_FREERTOS_Init+0x5c>)
 800135a:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 800135c:	4a0e      	ldr	r2, [pc, #56]	; (8001398 <MX_FREERTOS_Init+0x60>)
 800135e:	2100      	movs	r1, #0
 8001360:	480e      	ldr	r0, [pc, #56]	; (800139c <MX_FREERTOS_Init+0x64>)
 8001362:	f00a fdcb 	bl	800befc <osThreadNew>
 8001366:	4603      	mov	r3, r0
 8001368:	4a0d      	ldr	r2, [pc, #52]	; (80013a0 <MX_FREERTOS_Init+0x68>)
 800136a:	6013      	str	r3, [r2, #0]

  /* creation of DetectionTask */
  DetectionTaskHandle = osThreadNew(StartDetectionTask, NULL, &DetectionTask_attributes);
 800136c:	4a0d      	ldr	r2, [pc, #52]	; (80013a4 <MX_FREERTOS_Init+0x6c>)
 800136e:	2100      	movs	r1, #0
 8001370:	480d      	ldr	r0, [pc, #52]	; (80013a8 <MX_FREERTOS_Init+0x70>)
 8001372:	f00a fdc3 	bl	800befc <osThreadNew>
 8001376:	4603      	mov	r3, r0
 8001378:	4a0c      	ldr	r2, [pc, #48]	; (80013ac <MX_FREERTOS_Init+0x74>)
 800137a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	08011d54 	.word	0x08011d54
 8001384:	080013b1 	.word	0x080013b1
 8001388:	20000448 	.word	0x20000448
 800138c:	08011d78 	.word	0x08011d78
 8001390:	08005ac5 	.word	0x08005ac5
 8001394:	2000044c 	.word	0x2000044c
 8001398:	08011d9c 	.word	0x08011d9c
 800139c:	08005c0d 	.word	0x08005c0d
 80013a0:	20000450 	.word	0x20000450
 80013a4:	08011dc0 	.word	0x08011dc0
 80013a8:	080013d1 	.word	0x080013d1
 80013ac:	20000454 	.word	0x20000454

080013b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  LED_Heart_Toggle();
 80013b8:	2120      	movs	r1, #32
 80013ba:	4804      	ldr	r0, [pc, #16]	; (80013cc <StartDefaultTask+0x1c>)
 80013bc:	f006 fc09 	bl	8007bd2 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 80013c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013c4:	f00a fe2c 	bl	800c020 <osDelay>
	  LED_Heart_Toggle();
 80013c8:	e7f6      	b.n	80013b8 <StartDefaultTask+0x8>
 80013ca:	bf00      	nop
 80013cc:	40021800 	.word	0x40021800

080013d0 <StartDetectionTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDetectionTask */
__weak void StartDetectionTask(void *argument)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDetectionTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 80013d8:	f242 7010 	movw	r0, #10000	; 0x2710
 80013dc:	f00a fe20 	bl	800c020 <osDelay>
 80013e0:	e7fa      	b.n	80013d8 <StartDetectionTask+0x8>
	...

080013e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08e      	sub	sp, #56	; 0x38
 80013e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
 80013f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
 80013fe:	4bb5      	ldr	r3, [pc, #724]	; (80016d4 <MX_GPIO_Init+0x2f0>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4ab4      	ldr	r2, [pc, #720]	; (80016d4 <MX_GPIO_Init+0x2f0>)
 8001404:	f043 0310 	orr.w	r3, r3, #16
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4bb2      	ldr	r3, [pc, #712]	; (80016d4 <MX_GPIO_Init+0x2f0>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0310 	and.w	r3, r3, #16
 8001412:	623b      	str	r3, [r7, #32]
 8001414:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
 800141a:	4bae      	ldr	r3, [pc, #696]	; (80016d4 <MX_GPIO_Init+0x2f0>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4aad      	ldr	r2, [pc, #692]	; (80016d4 <MX_GPIO_Init+0x2f0>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4bab      	ldr	r3, [pc, #684]	; (80016d4 <MX_GPIO_Init+0x2f0>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	61fb      	str	r3, [r7, #28]
 8001430:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	61bb      	str	r3, [r7, #24]
 8001436:	4ba7      	ldr	r3, [pc, #668]	; (80016d4 <MX_GPIO_Init+0x2f0>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4aa6      	ldr	r2, [pc, #664]	; (80016d4 <MX_GPIO_Init+0x2f0>)
 800143c:	f043 0320 	orr.w	r3, r3, #32
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4ba4      	ldr	r3, [pc, #656]	; (80016d4 <MX_GPIO_Init+0x2f0>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0320 	and.w	r3, r3, #32
 800144a:	61bb      	str	r3, [r7, #24]
 800144c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	4ba0      	ldr	r3, [pc, #640]	; (80016d4 <MX_GPIO_Init+0x2f0>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a9f      	ldr	r2, [pc, #636]	; (80016d4 <MX_GPIO_Init+0x2f0>)
 8001458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b9d      	ldr	r3, [pc, #628]	; (80016d4 <MX_GPIO_Init+0x2f0>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	4b99      	ldr	r3, [pc, #612]	; (80016d4 <MX_GPIO_Init+0x2f0>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a98      	ldr	r2, [pc, #608]	; (80016d4 <MX_GPIO_Init+0x2f0>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b96      	ldr	r3, [pc, #600]	; (80016d4 <MX_GPIO_Init+0x2f0>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	4b92      	ldr	r3, [pc, #584]	; (80016d4 <MX_GPIO_Init+0x2f0>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a91      	ldr	r2, [pc, #580]	; (80016d4 <MX_GPIO_Init+0x2f0>)
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b8f      	ldr	r3, [pc, #572]	; (80016d4 <MX_GPIO_Init+0x2f0>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	4b8b      	ldr	r3, [pc, #556]	; (80016d4 <MX_GPIO_Init+0x2f0>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a8a      	ldr	r2, [pc, #552]	; (80016d4 <MX_GPIO_Init+0x2f0>)
 80014ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b88      	ldr	r3, [pc, #544]	; (80016d4 <MX_GPIO_Init+0x2f0>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	4b84      	ldr	r3, [pc, #528]	; (80016d4 <MX_GPIO_Init+0x2f0>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a83      	ldr	r2, [pc, #524]	; (80016d4 <MX_GPIO_Init+0x2f0>)
 80014c8:	f043 0308 	orr.w	r3, r3, #8
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b81      	ldr	r3, [pc, #516]	; (80016d4 <MX_GPIO_Init+0x2f0>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VM4_Step_Pin|VM4_Dir_Pin|VM6_IN1_Pin|VM6_IN2_Pin
 80014da:	2200      	movs	r2, #0
 80014dc:	f248 31f6 	movw	r1, #33782	; 0x83f6
 80014e0:	487d      	ldr	r0, [pc, #500]	; (80016d8 <MX_GPIO_Init+0x2f4>)
 80014e2:	f006 fb5d 	bl	8007ba0 <HAL_GPIO_WritePin>
                          |VM6_EnA_Pin|VM5_EnB_Pin|VM5_EnA_Pin|BEEP_Pin
                          |VM3_Dir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VM4_En_Pin|VM3_En_Pin, GPIO_PIN_SET);
 80014e6:	2201      	movs	r2, #1
 80014e8:	2109      	movs	r1, #9
 80014ea:	487b      	ldr	r0, [pc, #492]	; (80016d8 <MX_GPIO_Init+0x2f4>)
 80014ec:	f006 fb58 	bl	8007ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, FDCshutdown_Pin|OUT6_Pin|OUT5_Pin|OUT4_Pin
 80014f0:	2200      	movs	r2, #0
 80014f2:	f24e 71e8 	movw	r1, #59368	; 0xe7e8
 80014f6:	4879      	ldr	r0, [pc, #484]	; (80016dc <MX_GPIO_Init+0x2f8>)
 80014f8:	f006 fb52 	bl	8007ba0 <HAL_GPIO_WritePin>
                          |OUT3_Pin|OUT2_Pin|OUT1_Pin|VM8_EnB_Pin
                          |VM8_EnA_Pin|VM7_EnB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VM8_IN3_Pin|VM8_IN4_Pin, GPIO_PIN_RESET);
 80014fc:	2200      	movs	r2, #0
 80014fe:	210c      	movs	r1, #12
 8001500:	4877      	ldr	r0, [pc, #476]	; (80016e0 <MX_GPIO_Init+0x2fc>)
 8001502:	f006 fb4d 	bl	8007ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VM7_IN3_Pin|VM7_IN4_Pin|VM7_IN1_Pin|VM7_IN2_Pin
 8001506:	2200      	movs	r2, #0
 8001508:	f64f 716b 	movw	r1, #65387	; 0xff6b
 800150c:	4875      	ldr	r0, [pc, #468]	; (80016e4 <MX_GPIO_Init+0x300>)
 800150e:	f006 fb47 	bl	8007ba0 <HAL_GPIO_WritePin>
                          |VM5_IN1_Pin|VM5_IN2_Pin|VM5_IN3_Pin|VM5_IN4_Pin
                          |VM1_Step_Pin|VM1_Dir_Pin|VM2_Step_Pin|VM2_Dir_Pin
                          |VM3_Step_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, VM7_EnA_Pin|VM6_EnB_Pin|LED_Heart_Pin, GPIO_PIN_RESET);
 8001512:	2200      	movs	r2, #0
 8001514:	2123      	movs	r1, #35	; 0x23
 8001516:	4874      	ldr	r0, [pc, #464]	; (80016e8 <MX_GPIO_Init+0x304>)
 8001518:	f006 fb42 	bl	8007ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, VM8_IN1_Pin|VM8_IN2_Pin, GPIO_PIN_RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001522:	4872      	ldr	r0, [pc, #456]	; (80016ec <MX_GPIO_Init+0x308>)
 8001524:	f006 fb3c 	bl	8007ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED2_Pin|LED1_Pin|LED0_Pin, GPIO_PIN_SET);
 8001528:	2201      	movs	r2, #1
 800152a:	211c      	movs	r1, #28
 800152c:	486e      	ldr	r0, [pc, #440]	; (80016e8 <MX_GPIO_Init+0x304>)
 800152e:	f006 fb37 	bl	8007ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VM6_IN3_Pin|VM6_IN4_Pin, GPIO_PIN_RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001538:	486d      	ldr	r0, [pc, #436]	; (80016f0 <MX_GPIO_Init+0x30c>)
 800153a:	f006 fb31 	bl	8007ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VM1_En_Pin|VM2_En_Pin, GPIO_PIN_SET);
 800153e:	2201      	movs	r2, #1
 8001540:	2190      	movs	r1, #144	; 0x90
 8001542:	4868      	ldr	r0, [pc, #416]	; (80016e4 <MX_GPIO_Init+0x300>)
 8001544:	f006 fb2c 	bl	8007ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VM4_Step_Pin;
 8001548:	2304      	movs	r3, #4
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154c:	2301      	movs	r3, #1
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001554:	2303      	movs	r3, #3
 8001556:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(VM4_Step_GPIO_Port, &GPIO_InitStruct);
 8001558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155c:	4619      	mov	r1, r3
 800155e:	485e      	ldr	r0, [pc, #376]	; (80016d8 <MX_GPIO_Init+0x2f4>)
 8001560:	f006 f96a 	bl	8007838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = VM4_En_Pin|VM4_Dir_Pin|BEEP_Pin|VM3_En_Pin
 8001564:	f248 031b 	movw	r3, #32795	; 0x801b
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
                          |VM3_Dir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156a:	2301      	movs	r3, #1
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157a:	4619      	mov	r1, r3
 800157c:	4856      	ldr	r0, [pc, #344]	; (80016d8 <MX_GPIO_Init+0x2f4>)
 800157e:	f006 f95b 	bl	8007838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = VM6_IN1_Pin|VM6_IN2_Pin;
 8001582:	2360      	movs	r3, #96	; 0x60
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001586:	2301      	movs	r3, #1
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800158e:	2302      	movs	r3, #2
 8001590:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001596:	4619      	mov	r1, r3
 8001598:	484f      	ldr	r0, [pc, #316]	; (80016d8 <MX_GPIO_Init+0x2f4>)
 800159a:	f006 f94d 	bl	8007838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FDCINTB_Pin;
 800159e:	2304      	movs	r3, #4
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(FDCINTB_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ae:	4619      	mov	r1, r3
 80015b0:	484a      	ldr	r0, [pc, #296]	; (80016dc <MX_GPIO_Init+0x2f8>)
 80015b2:	f006 f941 	bl	8007838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FDCshutdown_Pin;
 80015b6:	2308      	movs	r3, #8
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ba:	2301      	movs	r3, #1
 80015bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	2300      	movs	r3, #0
 80015c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FDCshutdown_GPIO_Port, &GPIO_InitStruct);
 80015c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ca:	4619      	mov	r1, r3
 80015cc:	4843      	ldr	r0, [pc, #268]	; (80016dc <MX_GPIO_Init+0x2f8>)
 80015ce:	f006 f933 	bl	8007838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = OUT6_Pin|OUT5_Pin|OUT4_Pin|OUT3_Pin
 80015d2:	f24e 73e0 	movw	r3, #59360	; 0xe7e0
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT2_Pin|OUT1_Pin|VM8_EnB_Pin|VM8_EnA_Pin
                          |VM7_EnB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d8:	2301      	movs	r3, #1
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015dc:	2302      	movs	r3, #2
 80015de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e8:	4619      	mov	r1, r3
 80015ea:	483c      	ldr	r0, [pc, #240]	; (80016dc <MX_GPIO_Init+0x2f8>)
 80015ec:	f006 f924 	bl	8007838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Liquid_Detect_Pin;
 80015f0:	2301      	movs	r3, #1
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80015f4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80015f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Liquid_Detect_GPIO_Port, &GPIO_InitStruct);
 80015fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001602:	4619      	mov	r1, r3
 8001604:	4836      	ldr	r0, [pc, #216]	; (80016e0 <MX_GPIO_Init+0x2fc>)
 8001606:	f006 f917 	bl	8007838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VM8_IN3_Pin|VM8_IN4_Pin;
 800160a:	230c      	movs	r3, #12
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160e:	2301      	movs	r3, #1
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001616:	2302      	movs	r3, #2
 8001618:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161e:	4619      	mov	r1, r3
 8001620:	482f      	ldr	r0, [pc, #188]	; (80016e0 <MX_GPIO_Init+0x2fc>)
 8001622:	f006 f909 	bl	8007838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Encoder3_Z_Pin|Encoder4_Z_Pin;
 8001626:	2330      	movs	r3, #48	; 0x30
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800162a:	2300      	movs	r3, #0
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001636:	4619      	mov	r1, r3
 8001638:	482d      	ldr	r0, [pc, #180]	; (80016f0 <MX_GPIO_Init+0x30c>)
 800163a:	f006 f8fd 	bl	8007838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = VM7_IN3_Pin|VM7_IN4_Pin|VM7_IN1_Pin|VM7_IN2_Pin
 800163e:	f64f 4303 	movw	r3, #64515	; 0xfc03
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
                          |VM5_IN1_Pin|VM5_IN2_Pin|VM5_IN3_Pin|VM5_IN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001644:	2301      	movs	r3, #1
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800164c:	2302      	movs	r3, #2
 800164e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001654:	4619      	mov	r1, r3
 8001656:	4823      	ldr	r0, [pc, #140]	; (80016e4 <MX_GPIO_Init+0x300>)
 8001658:	f006 f8ee 	bl	8007838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = VM7_EnA_Pin|VM6_EnB_Pin;
 800165c:	2303      	movs	r3, #3
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001660:	2301      	movs	r3, #1
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001664:	2302      	movs	r3, #2
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800166c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001670:	4619      	mov	r1, r3
 8001672:	481d      	ldr	r0, [pc, #116]	; (80016e8 <MX_GPIO_Init+0x304>)
 8001674:	f006 f8e0 	bl	8007838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VM6_EnA_Pin|VM5_EnB_Pin|VM5_EnA_Pin;
 8001678:	f44f 7360 	mov.w	r3, #896	; 0x380
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167e:	2301      	movs	r3, #1
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001682:	2302      	movs	r3, #2
 8001684:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	2300      	movs	r3, #0
 8001688:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800168a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168e:	4619      	mov	r1, r3
 8001690:	4811      	ldr	r0, [pc, #68]	; (80016d8 <MX_GPIO_Init+0x2f4>)
 8001692:	f006 f8d1 	bl	8007838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encoder2_Z_Pin;
 8001696:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800169c:	2300      	movs	r3, #0
 800169e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Encoder2_Z_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a8:	4619      	mov	r1, r3
 80016aa:	4810      	ldr	r0, [pc, #64]	; (80016ec <MX_GPIO_Init+0x308>)
 80016ac:	f006 f8c4 	bl	8007838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = VM8_IN1_Pin|VM8_IN2_Pin;
 80016b0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016be:	2302      	movs	r3, #2
 80016c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c6:	4619      	mov	r1, r3
 80016c8:	4808      	ldr	r0, [pc, #32]	; (80016ec <MX_GPIO_Init+0x308>)
 80016ca:	f006 f8b5 	bl	8007838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|LED0_Pin|LED_Heart_Pin;
 80016ce:	233c      	movs	r3, #60	; 0x3c
 80016d0:	e010      	b.n	80016f4 <MX_GPIO_Init+0x310>
 80016d2:	bf00      	nop
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40021400 	.word	0x40021400
 80016e0:	40020000 	.word	0x40020000
 80016e4:	40020400 	.word	0x40020400
 80016e8:	40021800 	.word	0x40021800
 80016ec:	40020c00 	.word	0x40020c00
 80016f0:	40020800 	.word	0x40020800
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f6:	2301      	movs	r3, #1
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001706:	4619      	mov	r1, r3
 8001708:	4848      	ldr	r0, [pc, #288]	; (800182c <MX_GPIO_Init+0x448>)
 800170a:	f006 f895 	bl	8007838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin|KEY2_Pin;
 800170e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001714:	2300      	movs	r3, #0
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001718:	2301      	movs	r3, #1
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800171c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001720:	4619      	mov	r1, r3
 8001722:	4842      	ldr	r0, [pc, #264]	; (800182c <MX_GPIO_Init+0x448>)
 8001724:	f006 f888 	bl	8007838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VM6_IN3_Pin|VM6_IN4_Pin;
 8001728:	f44f 7340 	mov.w	r3, #768	; 0x300
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172e:	2301      	movs	r3, #1
 8001730:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001736:	2302      	movs	r3, #2
 8001738:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173e:	4619      	mov	r1, r3
 8001740:	483b      	ldr	r0, [pc, #236]	; (8001830 <MX_GPIO_Init+0x44c>)
 8001742:	f006 f879 	bl	8007838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encoder1_Z_Pin;
 8001746:	f44f 7380 	mov.w	r3, #256	; 0x100
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800174c:	2300      	movs	r3, #0
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Encoder1_Z_GPIO_Port, &GPIO_InitStruct);
 8001754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001758:	4619      	mov	r1, r3
 800175a:	4836      	ldr	r0, [pc, #216]	; (8001834 <MX_GPIO_Init+0x450>)
 800175c:	f006 f86c 	bl	8007838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = OPT_IN1_Pin|OPT_IN2_Pin|OPT_IN3_Pin|OPT_IN4_Pin
 8001760:	23f8      	movs	r3, #248	; 0xf8
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
                          |OPT_IN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001764:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001768:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800176e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001772:	4619      	mov	r1, r3
 8001774:	4830      	ldr	r0, [pc, #192]	; (8001838 <MX_GPIO_Init+0x454>)
 8001776:	f006 f85f 	bl	8007838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OPT_IN6_Pin|OPT_IN7_Pin|OPT_IN8_Pin|OPT_IN9_Pin
 800177a:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
                          |OPT_IN10_Pin|OPT_IN11_Pin|OPT_IN12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001780:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001784:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800178a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178e:	4619      	mov	r1, r3
 8001790:	4826      	ldr	r0, [pc, #152]	; (800182c <MX_GPIO_Init+0x448>)
 8001792:	f006 f851 	bl	8007838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = VM1_Step_Pin|VM2_Step_Pin|VM3_Step_Pin;
 8001796:	f44f 7312 	mov.w	r3, #584	; 0x248
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179c:	2301      	movs	r3, #1
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a4:	2303      	movs	r3, #3
 80017a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ac:	4619      	mov	r1, r3
 80017ae:	4823      	ldr	r0, [pc, #140]	; (800183c <MX_GPIO_Init+0x458>)
 80017b0:	f006 f842 	bl	8007838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = VM1_En_Pin|VM1_Dir_Pin|VM2_En_Pin|VM2_Dir_Pin;
 80017b4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ba:	2301      	movs	r3, #1
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ca:	4619      	mov	r1, r3
 80017cc:	481b      	ldr	r0, [pc, #108]	; (800183c <MX_GPIO_Init+0x458>)
 80017ce:	f006 f833 	bl	8007838 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2105      	movs	r1, #5
 80017d6:	2006      	movs	r0, #6
 80017d8:	f005 fb14 	bl	8006e04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80017dc:	2006      	movs	r0, #6
 80017de:	f005 fb2d 	bl	8006e3c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2105      	movs	r1, #5
 80017e6:	2009      	movs	r0, #9
 80017e8:	f005 fb0c 	bl	8006e04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80017ec:	2009      	movs	r0, #9
 80017ee:	f005 fb25 	bl	8006e3c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2105      	movs	r1, #5
 80017f6:	200a      	movs	r0, #10
 80017f8:	f005 fb04 	bl	8006e04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80017fc:	200a      	movs	r0, #10
 80017fe:	f005 fb1d 	bl	8006e3c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2105      	movs	r1, #5
 8001806:	2017      	movs	r0, #23
 8001808:	f005 fafc 	bl	8006e04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800180c:	2017      	movs	r0, #23
 800180e:	f005 fb15 	bl	8006e3c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2105      	movs	r1, #5
 8001816:	2028      	movs	r0, #40	; 0x28
 8001818:	f005 faf4 	bl	8006e04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800181c:	2028      	movs	r0, #40	; 0x28
 800181e:	f005 fb0d 	bl	8006e3c <HAL_NVIC_EnableIRQ>

}
 8001822:	bf00      	nop
 8001824:	3738      	adds	r7, #56	; 0x38
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40021800 	.word	0x40021800
 8001830:	40020800 	.word	0x40020800
 8001834:	40020000 	.word	0x40020000
 8001838:	40020c00 	.word	0x40020c00
 800183c:	40020400 	.word	0x40020400

08001840 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	80fb      	strh	r3, [r7, #6]
    switch(GPIO_Pin)
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	2b40      	cmp	r3, #64	; 0x40
 800184e:	d019      	beq.n	8001884 <HAL_GPIO_EXTI_Callback+0x44>
 8001850:	2b40      	cmp	r3, #64	; 0x40
 8001852:	dc25      	bgt.n	80018a0 <HAL_GPIO_EXTI_Callback+0x60>
 8001854:	2b01      	cmp	r3, #1
 8001856:	d002      	beq.n	800185e <HAL_GPIO_EXTI_Callback+0x1e>
 8001858:	2b08      	cmp	r3, #8
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_EXTI_Callback+0x24>
        	}
            break;
#endif

    }
}
 800185c:	e020      	b.n	80018a0 <HAL_GPIO_EXTI_Callback+0x60>
        	if (Liquid_Detect_GPIO_Port->IDR & Liquid_Detect_Pin){ 	// if Rising edge trigger
 800185e:	4b13      	ldr	r3, [pc, #76]	; (80018ac <HAL_GPIO_EXTI_Callback+0x6c>)
 8001860:	691b      	ldr	r3, [r3, #16]
            break;
 8001862:	e01d      	b.n	80018a0 <HAL_GPIO_EXTI_Callback+0x60>
        	if (OPT_IN1_GPIO_Port->IDR & OPT_IN1_Pin){ 	// if Rising edge trigger
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_GPIO_EXTI_Callback+0x70>)
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	f003 0308 	and.w	r3, r3, #8
 800186c:	2b00      	cmp	r3, #0
 800186e:	d114      	bne.n	800189a <HAL_GPIO_EXTI_Callback+0x5a>
        		if(Motor[1].MotorDirection == 0){
 8001870:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x74>)
 8001872:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10f      	bne.n	800189a <HAL_GPIO_EXTI_Callback+0x5a>
        			Motor[1].StepPosition =0 ;
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x74>)
 800187c:	2200      	movs	r2, #0
 800187e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            break;
 8001882:	e00a      	b.n	800189a <HAL_GPIO_EXTI_Callback+0x5a>
        	if (OPT_IN4_GPIO_Port->IDR & OPT_IN4_Pin) { 	// if Rising edge trigger
 8001884:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <HAL_GPIO_EXTI_Callback+0x70>)
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800188c:	2b00      	cmp	r3, #0
 800188e:	d006      	beq.n	800189e <HAL_GPIO_EXTI_Callback+0x5e>
        		Motor[4].StepPosition =0 ;
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
            break;
 8001898:	e001      	b.n	800189e <HAL_GPIO_EXTI_Callback+0x5e>
            break;
 800189a:	bf00      	nop
 800189c:	e000      	b.n	80018a0 <HAL_GPIO_EXTI_Callback+0x60>
            break;
 800189e:	bf00      	nop
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	40020000 	.word	0x40020000
 80018b0:	40020c00 	.word	0x40020c00
 80018b4:	20000a24 	.word	0x20000a24

080018b8 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c2_rx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <MX_I2C2_Init+0x50>)
 80018be:	4a13      	ldr	r2, [pc, #76]	; (800190c <MX_I2C2_Init+0x54>)
 80018c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <MX_I2C2_Init+0x50>)
 80018c4:	4a12      	ldr	r2, [pc, #72]	; (8001910 <MX_I2C2_Init+0x58>)
 80018c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018c8:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <MX_I2C2_Init+0x50>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <MX_I2C2_Init+0x50>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <MX_I2C2_Init+0x50>)
 80018d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018da:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018dc:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <MX_I2C2_Init+0x50>)
 80018de:	2200      	movs	r2, #0
 80018e0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <MX_I2C2_Init+0x50>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018e8:	4b07      	ldr	r3, [pc, #28]	; (8001908 <MX_I2C2_Init+0x50>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <MX_I2C2_Init+0x50>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018f4:	4804      	ldr	r0, [pc, #16]	; (8001908 <MX_I2C2_Init+0x50>)
 80018f6:	f006 f99f 	bl	8007c38 <HAL_I2C_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001900:	f000 fe98 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000458 	.word	0x20000458
 800190c:	40005800 	.word	0x40005800
 8001910:	000186a0 	.word	0x000186a0

08001914 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	; 0x28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a39      	ldr	r2, [pc, #228]	; (8001a18 <HAL_I2C_MspInit+0x104>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d16b      	bne.n	8001a0e <HAL_I2C_MspInit+0xfa>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	4b38      	ldr	r3, [pc, #224]	; (8001a1c <HAL_I2C_MspInit+0x108>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a37      	ldr	r2, [pc, #220]	; (8001a1c <HAL_I2C_MspInit+0x108>)
 8001940:	f043 0320 	orr.w	r3, r3, #32
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b35      	ldr	r3, [pc, #212]	; (8001a1c <HAL_I2C_MspInit+0x108>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0320 	and.w	r3, r3, #32
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001952:	2303      	movs	r3, #3
 8001954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001956:	2312      	movs	r3, #18
 8001958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195e:	2303      	movs	r3, #3
 8001960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001962:	2304      	movs	r3, #4
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	4619      	mov	r1, r3
 800196c:	482c      	ldr	r0, [pc, #176]	; (8001a20 <HAL_I2C_MspInit+0x10c>)
 800196e:	f005 ff63 	bl	8007838 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <HAL_I2C_MspInit+0x108>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	4a28      	ldr	r2, [pc, #160]	; (8001a1c <HAL_I2C_MspInit+0x108>)
 800197c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001980:	6413      	str	r3, [r2, #64]	; 0x40
 8001982:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <HAL_I2C_MspInit+0x108>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 800198e:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <HAL_I2C_MspInit+0x110>)
 8001990:	4a25      	ldr	r2, [pc, #148]	; (8001a28 <HAL_I2C_MspInit+0x114>)
 8001992:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001994:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <HAL_I2C_MspInit+0x110>)
 8001996:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800199a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800199c:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <HAL_I2C_MspInit+0x110>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a2:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <HAL_I2C_MspInit+0x110>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019a8:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <HAL_I2C_MspInit+0x110>)
 80019aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019ae:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019b0:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <HAL_I2C_MspInit+0x110>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019b6:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <HAL_I2C_MspInit+0x110>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_CIRCULAR;
 80019bc:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_I2C_MspInit+0x110>)
 80019be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019c2:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80019c4:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <HAL_I2C_MspInit+0x110>)
 80019c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019ca:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_I2C_MspInit+0x110>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80019d2:	4814      	ldr	r0, [pc, #80]	; (8001a24 <HAL_I2C_MspInit+0x110>)
 80019d4:	f005 fb20 	bl	8007018 <HAL_DMA_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80019de:	f000 fe29 	bl	8002634 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a0f      	ldr	r2, [pc, #60]	; (8001a24 <HAL_I2C_MspInit+0x110>)
 80019e6:	639a      	str	r2, [r3, #56]	; 0x38
 80019e8:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <HAL_I2C_MspInit+0x110>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2105      	movs	r1, #5
 80019f2:	2021      	movs	r0, #33	; 0x21
 80019f4:	f005 fa06 	bl	8006e04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80019f8:	2021      	movs	r0, #33	; 0x21
 80019fa:	f005 fa1f 	bl	8006e3c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2105      	movs	r1, #5
 8001a02:	2022      	movs	r0, #34	; 0x22
 8001a04:	f005 f9fe 	bl	8006e04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001a08:	2022      	movs	r0, #34	; 0x22
 8001a0a:	f005 fa17 	bl	8006e3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001a0e:	bf00      	nop
 8001a10:	3728      	adds	r7, #40	; 0x28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40005800 	.word	0x40005800
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40021400 	.word	0x40021400
 8001a24:	200004ac 	.word	0x200004ac
 8001a28:	40026040 	.word	0x40026040

08001a2c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart5, (uint8_t*)&ch,1,HAL_MAX_DELAY);
 8001a34:	1d39      	adds	r1, r7, #4
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	4803      	ldr	r0, [pc, #12]	; (8001a4c <__io_putchar+0x20>)
 8001a3e:	f009 f960 	bl	800ad02 <HAL_UART_Transmit>
    return ch;
 8001a42:	687b      	ldr	r3, [r7, #4]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000958 	.word	0x20000958

08001a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a54:	f004 f9e4 	bl	8005e20 <HAL_Init>
  /* USER CODE BEGIN Init */
  //HAL_Delay(6000);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a58:	f000 f836 	bl	8001ac8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 8001a5c:	f7ff fcc2 	bl	80013e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a60:	f7ff fc4a 	bl	80012f8 <MX_DMA_Init>
  MX_CAN1_Init();
 8001a64:	f7ff fb56 	bl	8001114 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8001a68:	f001 fcc6 	bl	80033f8 <MX_USART1_UART_Init>
  MX_DAC_Init();
 8001a6c:	f7ff fbce 	bl	800120c <MX_DAC_Init>
  MX_TIM2_Init();
 8001a70:	f001 f852 	bl	8002b18 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a74:	f001 f8a4 	bl	8002bc0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001a78:	f001 f8f6 	bl	8002c68 <MX_TIM4_Init>
  MX_UART4_Init();
 8001a7c:	f001 fc62 	bl	8003344 <MX_UART4_Init>
  MX_UART5_Init();
 8001a80:	f001 fc8a 	bl	8003398 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8001a84:	f001 fce2 	bl	800344c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001a88:	f7ff fa2c 	bl	8000ee4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001a8c:	f7ff fa7c 	bl	8000f88 <MX_ADC2_Init>
  MX_I2C2_Init();
 8001a90:	f7ff ff12 	bl	80018b8 <MX_I2C2_Init>
  MX_TIM10_Init();
 8001a94:	f001 f9dc 	bl	8002e50 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001a98:	f001 f9fc 	bl	8002e94 <MX_TIM11_Init>
  MX_TIM13_Init();
 8001a9c:	f001 fa54 	bl	8002f48 <MX_TIM13_Init>
  MX_TIM14_Init();
 8001aa0:	f001 fa74 	bl	8002f8c <MX_TIM14_Init>
  MX_TIM9_Init();
 8001aa4:	f001 f99c 	bl	8002de0 <MX_TIM9_Init>
  MX_TIM7_Init();
 8001aa8:	f001 f966 	bl	8002d78 <MX_TIM7_Init>
  MX_TIM6_Init();
 8001aac:	f001 f930 	bl	8002d10 <MX_TIM6_Init>
  MX_TIM12_Init();
 8001ab0:	f001 fa12 	bl	8002ed8 <MX_TIM12_Init>
  MX_TIM7_Init();
  MX_TIM6_Init();
  MX_TIM12_Init();
  /* USER CODE BEGIN 2 */
#endif
  ALL_Motors_Disable();
 8001ab4:	f002 f838 	bl	8003b28 <ALL_Motors_Disable>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001ab8:	f00a f9d6 	bl	800be68 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001abc:	f7ff fc3c 	bl	8001338 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001ac0:	f00a f9f6 	bl	800beb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <main+0x74>
	...

08001ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b094      	sub	sp, #80	; 0x50
 8001acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ace:	f107 0320 	add.w	r3, r7, #32
 8001ad2:	2230      	movs	r2, #48	; 0x30
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f00d fd9c 	bl	800f614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aec:	2300      	movs	r3, #0
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	4b28      	ldr	r3, [pc, #160]	; (8001b94 <SystemClock_Config+0xcc>)
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	4a27      	ldr	r2, [pc, #156]	; (8001b94 <SystemClock_Config+0xcc>)
 8001af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001afa:	6413      	str	r3, [r2, #64]	; 0x40
 8001afc:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <SystemClock_Config+0xcc>)
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b08:	2300      	movs	r3, #0
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	4b22      	ldr	r3, [pc, #136]	; (8001b98 <SystemClock_Config+0xd0>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a21      	ldr	r2, [pc, #132]	; (8001b98 <SystemClock_Config+0xd0>)
 8001b12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	4b1f      	ldr	r3, [pc, #124]	; (8001b98 <SystemClock_Config+0xd0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b20:	607b      	str	r3, [r7, #4]
 8001b22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b24:	2301      	movs	r3, #1
 8001b26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b38:	2304      	movs	r3, #4
 8001b3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001b3c:	23a0      	movs	r3, #160	; 0xa0
 8001b3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b40:	2302      	movs	r3, #2
 8001b42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b44:	2304      	movs	r3, #4
 8001b46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b48:	f107 0320 	add.w	r3, r7, #32
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f007 fe6b 	bl	8009828 <HAL_RCC_OscConfig>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b58:	f000 fd6c 	bl	8002634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b5c:	230f      	movs	r3, #15
 8001b5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b60:	2302      	movs	r3, #2
 8001b62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001b6e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b74:	f107 030c 	add.w	r3, r7, #12
 8001b78:	2105      	movs	r1, #5
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f008 f8cc 	bl	8009d18 <HAL_RCC_ClockConfig>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b86:	f000 fd55 	bl	8002634 <Error_Handler>
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	3750      	adds	r7, #80	; 0x50
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40007000 	.word	0x40007000

08001b9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a9e      	ldr	r2, [pc, #632]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d101      	bne.n	8001bb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bae:	f004 f959 	bl	8005e64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

	if (htim->Instance == TIM9) {	// 计时器周期为0.1ms
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a9c      	ldr	r2, [pc, #624]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d126      	bne.n	8001c0a <HAL_TIM_PeriodElapsedCallback+0x6e>
		uart_reieve_timeoutCount++;
 8001bbc:	4b9b      	ldr	r3, [pc, #620]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	4a9a      	ldr	r2, [pc, #616]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001bc4:	6013      	str	r3, [r2, #0]
		if( (USART_RX_STA&0x8000) || (USART_RX_STA==0) ){	// 判断串口接收超时
 8001bc6:	4b9a      	ldr	r3, [pc, #616]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	b21b      	sxth	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	db03      	blt.n	8001bd8 <HAL_TIM_PeriodElapsedCallback+0x3c>
 8001bd0:	4b97      	ldr	r3, [pc, #604]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d106      	bne.n	8001be6 <HAL_TIM_PeriodElapsedCallback+0x4a>
			uart_reieve_timeoutCount = 0;
 8001bd8:	4b94      	ldr	r3, [pc, #592]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim9);
 8001bde:	4895      	ldr	r0, [pc, #596]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001be0:	f008 fbac 	bl	800a33c <HAL_TIM_Base_Stop_IT>
 8001be4:	e011      	b.n	8001c0a <HAL_TIM_PeriodElapsedCallback+0x6e>
		}
		else{
			if(uart_reieve_timeoutCount > 5000){
 8001be6:	4b91      	ldr	r3, [pc, #580]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d90b      	bls.n	8001c0a <HAL_TIM_PeriodElapsedCallback+0x6e>
				printf("[WRONG] Data Input Timeout ! \r\n");
 8001bf2:	4891      	ldr	r0, [pc, #580]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001bf4:	f00d fc2e 	bl	800f454 <puts>
				uart_reieve_timeoutCount = 0;
 8001bf8:	4b8c      	ldr	r3, [pc, #560]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
				USART_RX_STA = 0;
 8001bfe:	4b8c      	ldr	r3, [pc, #560]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	801a      	strh	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim9);
 8001c04:	488b      	ldr	r0, [pc, #556]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001c06:	f008 fb99 	bl	800a33c <HAL_TIM_Base_Stop_IT>
			}
		}
	}

	if (htim->Instance == TIM10)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a8b      	ldr	r2, [pc, #556]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	f040 80c2 	bne.w	8001d9a <HAL_TIM_PeriodElapsedCallback+0x1fe>
	{
			timecount_TIM10++;
 8001c16:	4b8a      	ldr	r3, [pc, #552]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	4a88      	ldr	r2, [pc, #544]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c1e:	6013      	str	r3, [r2, #0]
			AccelDecelcount_TIM10++;
 8001c20:	4b88      	ldr	r3, [pc, #544]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	3301      	adds	r3, #1
 8001c26:	4a87      	ldr	r2, [pc, #540]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001c28:	6013      	str	r3, [r2, #0]
			if(timecount_TIM10 <= Pluse_High)
 8001c2a:	4b85      	ldr	r3, [pc, #532]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	4b86      	ldr	r3, [pc, #536]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d805      	bhi.n	8001c42 <HAL_TIM_PeriodElapsedCallback+0xa6>
			{
				Motorpluse1_High();
 8001c36:	2201      	movs	r2, #1
 8001c38:	2108      	movs	r1, #8
 8001c3a:	4884      	ldr	r0, [pc, #528]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001c3c:	f005 ffb0 	bl	8007ba0 <HAL_GPIO_WritePin>
 8001c40:	e00a      	b.n	8001c58 <HAL_TIM_PeriodElapsedCallback+0xbc>
			}
			else if(timecount_TIM10 > Pluse_High)
 8001c42:	4b7f      	ldr	r3, [pc, #508]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	4b80      	ldr	r3, [pc, #512]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d904      	bls.n	8001c58 <HAL_TIM_PeriodElapsedCallback+0xbc>
			{
				Motorpluse1_Low();
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2108      	movs	r1, #8
 8001c52:	487e      	ldr	r0, [pc, #504]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001c54:	f005 ffa4 	bl	8007ba0 <HAL_GPIO_WritePin>
			}
			if(timecount_TIM10 >= Motor[1].StepperSpeedTMR)
 8001c58:	4b7d      	ldr	r3, [pc, #500]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c5a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8001c5e:	4b78      	ldr	r3, [pc, #480]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d843      	bhi.n	8001cee <HAL_TIM_PeriodElapsedCallback+0x152>
			{
				timecount_TIM10 = 0 ;
 8001c66:	4b76      	ldr	r3, [pc, #472]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
				Motor[1].NumberofSteps--;
 8001c6c:	4b78      	ldr	r3, [pc, #480]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001c72:	3b01      	subs	r3, #1
 8001c74:	4a76      	ldr	r2, [pc, #472]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c76:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
				if (Motor[1].MotorDirection == 1){
 8001c7a:	4b75      	ldr	r3, [pc, #468]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c7c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d11c      	bne.n	8001cbe <HAL_TIM_PeriodElapsedCallback+0x122>
					Motor[1].StepPosition++;
 8001c84:	4b72      	ldr	r3, [pc, #456]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	4a70      	ldr	r2, [pc, #448]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c8e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					if (Motor[1].StepPosition >= Motor[1].StepsInOneCircle){
 8001c92:	4b6f      	ldr	r3, [pc, #444]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b6d      	ldr	r3, [pc, #436]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d324      	bcc.n	8001cee <HAL_TIM_PeriodElapsedCallback+0x152>
						Motor[1].StepPosition = Motor[1].StepPosition - Motor[1].StepsInOneCircle ;
 8001ca4:	4b6a      	ldr	r3, [pc, #424]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b68      	ldr	r3, [pc, #416]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001cae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b66      	ldr	r3, [pc, #408]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001cb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8001cbc:	e017      	b.n	8001cee <HAL_TIM_PeriodElapsedCallback+0x152>
					}
				}
				else{
					Motor[1].StepPosition--;
 8001cbe:	4b64      	ldr	r3, [pc, #400]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	4a62      	ldr	r2, [pc, #392]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					if (Motor[1].StepPosition < 0){
 8001ccc:	4b60      	ldr	r3, [pc, #384]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	da0b      	bge.n	8001cee <HAL_TIM_PeriodElapsedCallback+0x152>
						Motor[1].StepPosition = Motor[1].StepPosition + Motor[1].StepsInOneCircle ;
 8001cd6:	4b5e      	ldr	r3, [pc, #376]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4b5c      	ldr	r3, [pc, #368]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001ce0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ce4:	4413      	add	r3, r2
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4b59      	ldr	r3, [pc, #356]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001cea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}
				}
			}
			if(Motor[1].StepPosition == Motor[1].TargetPosition)
 8001cee:	4b58      	ldr	r3, [pc, #352]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001cf0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001cf4:	4b56      	ldr	r3, [pc, #344]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d10e      	bne.n	8001d1c <HAL_TIM_PeriodElapsedCallback+0x180>
			{
				Motor[1].Status = 0;
 8001cfe:	4b54      	ldr	r3, [pc, #336]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
				printf("---Motor1 Steps Position:%ld---\r\n",Motor[1].StepPosition);
 8001d06:	4b52      	ldr	r3, [pc, #328]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4851      	ldr	r0, [pc, #324]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001d10:	f00d fb3a 	bl	800f388 <iprintf>
				HAL_TIM_Base_Stop_IT(&htim10);
 8001d14:	4850      	ldr	r0, [pc, #320]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001d16:	f008 fb11 	bl	800a33c <HAL_TIM_Base_Stop_IT>
 8001d1a:	e00b      	b.n	8001d34 <HAL_TIM_PeriodElapsedCallback+0x198>
			}
			else if (Motor[1].NumberofSteps <= 0){
 8001d1c:	4b4c      	ldr	r3, [pc, #304]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d106      	bne.n	8001d34 <HAL_TIM_PeriodElapsedCallback+0x198>
				Motor[1].Status = 0;
 8001d26:	4b4a      	ldr	r3, [pc, #296]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
				//printf("[WRONG]Motor1 Goto Target Position Failed!---Current_Position:%ld---\r\n",Motor[1].StepPosition);
				HAL_TIM_Base_Stop_IT(&htim10);
 8001d2e:	484a      	ldr	r0, [pc, #296]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001d30:	f008 fb04 	bl	800a33c <HAL_TIM_Base_Stop_IT>
			}

			if (Motor[1].NumberofSteps > Motor[1].NumberofSteps_StopAccel)  // if.. begin Acceleration
 8001d34:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d36:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001d3a:	4b45      	ldr	r3, [pc, #276]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d910      	bls.n	8001d66 <HAL_TIM_PeriodElapsedCallback+0x1ca>
			{
				if(AccelDecelcount_TIM10 >= Motor[1].AccelerationTimeTMR)
 8001d44:	4b42      	ldr	r3, [pc, #264]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d46:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001d4a:	4b3e      	ldr	r3, [pc, #248]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	f200 8456 	bhi.w	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
				{
					AccelDecelcount_TIM10=0;
 8001d54:	4b3b      	ldr	r3, [pc, #236]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
					AccelDecel(ACCEL,&Motor[1]);
 8001d5a:	4940      	ldr	r1, [pc, #256]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	f001 ffc1 	bl	8003ce4 <AccelDecel>
				}
			}
	}
#endif
  /* USER CODE END Callback 1 */
}
 8001d62:	f000 bc4d 	b.w	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
			else if (Motor[1].NumberofSteps < Motor[1].NumberofSteps_BeginDecel)  // if.. begin Deceleration
 8001d66:	4b3a      	ldr	r3, [pc, #232]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d68:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001d6c:	4b38      	ldr	r3, [pc, #224]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001d72:	429a      	cmp	r2, r3
 8001d74:	f080 8444 	bcs.w	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
				if(AccelDecelcount_TIM10 >= Motor[1].DecelerationTimeTMR)
 8001d78:	4b35      	ldr	r3, [pc, #212]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d7a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001d7e:	4b31      	ldr	r3, [pc, #196]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	f200 843c 	bhi.w	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
					AccelDecelcount_TIM10=0;
 8001d88:	4b2e      	ldr	r3, [pc, #184]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
					AccelDecel(DECEL,&Motor[1]);
 8001d8e:	4933      	ldr	r1, [pc, #204]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001d90:	2002      	movs	r0, #2
 8001d92:	f001 ffa7 	bl	8003ce4 <AccelDecel>
}
 8001d96:	f000 bc33 	b.w	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
	else if (htim->Instance == TIM11)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a30      	ldr	r2, [pc, #192]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	f040 80be 	bne.w	8001f22 <HAL_TIM_PeriodElapsedCallback+0x386>
			timecount_TIM11++;
 8001da6:	4b2f      	ldr	r3, [pc, #188]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	3301      	adds	r3, #1
 8001dac:	4a2d      	ldr	r2, [pc, #180]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001dae:	6013      	str	r3, [r2, #0]
			AccelDecelcount_TIM11++;
 8001db0:	4b2d      	ldr	r3, [pc, #180]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	3301      	adds	r3, #1
 8001db6:	4a2c      	ldr	r2, [pc, #176]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001db8:	6013      	str	r3, [r2, #0]
			if(timecount_TIM11 <= Pluse_High)
 8001dba:	4b2a      	ldr	r3, [pc, #168]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	4b22      	ldr	r3, [pc, #136]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d805      	bhi.n	8001dd2 <HAL_TIM_PeriodElapsedCallback+0x236>
				Motorpluse2_High();
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	2140      	movs	r1, #64	; 0x40
 8001dca:	4820      	ldr	r0, [pc, #128]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001dcc:	f005 fee8 	bl	8007ba0 <HAL_GPIO_WritePin>
 8001dd0:	e00a      	b.n	8001de8 <HAL_TIM_PeriodElapsedCallback+0x24c>
			else if(timecount_TIM11 > Pluse_High)
 8001dd2:	4b24      	ldr	r3, [pc, #144]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d904      	bls.n	8001de8 <HAL_TIM_PeriodElapsedCallback+0x24c>
				Motorpluse2_Low();
 8001dde:	2200      	movs	r2, #0
 8001de0:	2140      	movs	r1, #64	; 0x40
 8001de2:	481a      	ldr	r0, [pc, #104]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001de4:	f005 fedc 	bl	8007ba0 <HAL_GPIO_WritePin>
			if(timecount_TIM11 >= Motor[2].StepperSpeedTMR)
 8001de8:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001dea:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001dee:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d841      	bhi.n	8001e7a <HAL_TIM_PeriodElapsedCallback+0x2de>
				timecount_TIM11 = 0 ;
 8001df6:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
				Motor[2].NumberofSteps--;
 8001dfc:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001dfe:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001e02:	3b01      	subs	r3, #1
 8001e04:	4a12      	ldr	r2, [pc, #72]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e06:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
				if (Motor[2].MotorDirection == 1){
 8001e0a:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e0c:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d12b      	bne.n	8001e6c <HAL_TIM_PeriodElapsedCallback+0x2d0>
					Motor[2].StepPosition++;
 8001e14:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	4a0c      	ldr	r2, [pc, #48]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e22:	e02a      	b.n	8001e7a <HAL_TIM_PeriodElapsedCallback+0x2de>
 8001e24:	40010000 	.word	0x40010000
 8001e28:	40014000 	.word	0x40014000
 8001e2c:	2000050c 	.word	0x2000050c
 8001e30:	20000910 	.word	0x20000910
 8001e34:	200006f8 	.word	0x200006f8
 8001e38:	08011484 	.word	0x08011484
 8001e3c:	40014400 	.word	0x40014400
 8001e40:	20000510 	.word	0x20000510
 8001e44:	20000514 	.word	0x20000514
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	40020400 	.word	0x40020400
 8001e50:	20000a24 	.word	0x20000a24
 8001e54:	080114a4 	.word	0x080114a4
 8001e58:	20000740 	.word	0x20000740
 8001e5c:	20000a84 	.word	0x20000a84
 8001e60:	40014800 	.word	0x40014800
 8001e64:	20000518 	.word	0x20000518
 8001e68:	2000051c 	.word	0x2000051c
					Motor[2].StepPosition--;
 8001e6c:	4ba4      	ldr	r3, [pc, #656]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001e6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e72:	3b01      	subs	r3, #1
 8001e74:	4aa2      	ldr	r2, [pc, #648]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001e76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
			if(Motor[2].StepPosition == Motor[2].TargetPosition){
 8001e7a:	4ba1      	ldr	r3, [pc, #644]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001e7c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001e80:	4b9f      	ldr	r3, [pc, #636]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001e82:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d10e      	bne.n	8001ea8 <HAL_TIM_PeriodElapsedCallback+0x30c>
				Motor[2].Status = 0;
 8001e8a:	4b9d      	ldr	r3, [pc, #628]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				printf("---Motor2 Steps Position:%ld---\r\n",Motor[2].StepPosition);
 8001e92:	4b9b      	ldr	r3, [pc, #620]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001e94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e98:	4619      	mov	r1, r3
 8001e9a:	489a      	ldr	r0, [pc, #616]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001e9c:	f00d fa74 	bl	800f388 <iprintf>
				HAL_TIM_Base_Stop_IT(&htim11);
 8001ea0:	4899      	ldr	r0, [pc, #612]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8001ea2:	f008 fa4b 	bl	800a33c <HAL_TIM_Base_Stop_IT>
 8001ea6:	e00b      	b.n	8001ec0 <HAL_TIM_PeriodElapsedCallback+0x324>
			else if (Motor[2].NumberofSteps <= 0){
 8001ea8:	4b95      	ldr	r3, [pc, #596]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001eaa:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d106      	bne.n	8001ec0 <HAL_TIM_PeriodElapsedCallback+0x324>
				Motor[2].Status = 0;
 8001eb2:	4b93      	ldr	r3, [pc, #588]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				HAL_TIM_Base_Stop_IT(&htim11);
 8001eba:	4893      	ldr	r0, [pc, #588]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8001ebc:	f008 fa3e 	bl	800a33c <HAL_TIM_Base_Stop_IT>
			if (Motor[2].NumberofSteps > Motor[2].NumberofSteps_StopAccel)
 8001ec0:	4b8f      	ldr	r3, [pc, #572]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001ec2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001ec6:	4b8e      	ldr	r3, [pc, #568]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001ec8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d90f      	bls.n	8001ef0 <HAL_TIM_PeriodElapsedCallback+0x354>
				if(AccelDecelcount_TIM11 >= Motor[2].AccelerationTimeTMR)
 8001ed0:	4b8b      	ldr	r3, [pc, #556]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001ed2:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8001ed6:	4b8d      	ldr	r3, [pc, #564]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x570>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	f200 8390 	bhi.w	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
					AccelDecelcount_TIM11=0;
 8001ee0:	4b8a      	ldr	r3, [pc, #552]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x570>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
					AccelDecel(ACCEL,&Motor[2]);
 8001ee6:	498a      	ldr	r1, [pc, #552]	; (8002110 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8001ee8:	2001      	movs	r0, #1
 8001eea:	f001 fefb 	bl	8003ce4 <AccelDecel>
}
 8001eee:	e387      	b.n	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
			else if (Motor[2].NumberofSteps < Motor[2].NumberofSteps_BeginDecel)
 8001ef0:	4b83      	ldr	r3, [pc, #524]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001ef2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001ef6:	4b82      	ldr	r3, [pc, #520]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001ef8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001efc:	429a      	cmp	r2, r3
 8001efe:	f080 837f 	bcs.w	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
				if(AccelDecelcount_TIM11 >= Motor[2].DecelerationTimeTMR)
 8001f02:	4b7f      	ldr	r3, [pc, #508]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001f04:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8001f08:	4b80      	ldr	r3, [pc, #512]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x570>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	f200 8377 	bhi.w	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
					AccelDecelcount_TIM11=0;
 8001f12:	4b7e      	ldr	r3, [pc, #504]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x570>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
					AccelDecel(DECEL,&Motor[2]);
 8001f18:	497d      	ldr	r1, [pc, #500]	; (8002110 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8001f1a:	2002      	movs	r0, #2
 8001f1c:	f001 fee2 	bl	8003ce4 <AccelDecel>
}
 8001f20:	e36e      	b.n	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
	else if (htim->Instance == TIM13)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a7b      	ldr	r2, [pc, #492]	; (8002114 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	f040 80a3 	bne.w	8002074 <HAL_TIM_PeriodElapsedCallback+0x4d8>
			timecount_TIM13++;
 8001f2e:	4b7a      	ldr	r3, [pc, #488]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	3301      	adds	r3, #1
 8001f34:	4a78      	ldr	r2, [pc, #480]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8001f36:	6013      	str	r3, [r2, #0]
			AccelDecelcount_TIM13++;
 8001f38:	4b78      	ldr	r3, [pc, #480]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	4a77      	ldr	r2, [pc, #476]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001f40:	6013      	str	r3, [r2, #0]
				if(timecount_TIM13 <= Pluse_High){
 8001f42:	4b75      	ldr	r3, [pc, #468]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4b76      	ldr	r3, [pc, #472]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d806      	bhi.n	8001f5c <HAL_TIM_PeriodElapsedCallback+0x3c0>
					Motorpluse3_High();
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f54:	4873      	ldr	r0, [pc, #460]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8001f56:	f005 fe23 	bl	8007ba0 <HAL_GPIO_WritePin>
 8001f5a:	e00b      	b.n	8001f74 <HAL_TIM_PeriodElapsedCallback+0x3d8>
				else if(timecount_TIM13 > Pluse_High){
 8001f5c:	4b6e      	ldr	r3, [pc, #440]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4b6f      	ldr	r3, [pc, #444]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d905      	bls.n	8001f74 <HAL_TIM_PeriodElapsedCallback+0x3d8>
					Motorpluse3_Low();
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f6e:	486d      	ldr	r0, [pc, #436]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8001f70:	f005 fe16 	bl	8007ba0 <HAL_GPIO_WritePin>
				if(timecount_TIM13 >= Motor[3].StepperSpeedTMR){
 8001f74:	4b62      	ldr	r3, [pc, #392]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001f76:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8001f7a:	4b67      	ldr	r3, [pc, #412]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d81d      	bhi.n	8001fbe <HAL_TIM_PeriodElapsedCallback+0x422>
					timecount_TIM13 = 0 ;
 8001f82:	4b65      	ldr	r3, [pc, #404]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
					Motor[3].NumberofSteps--;
 8001f88:	4b5d      	ldr	r3, [pc, #372]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001f8a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	4a5b      	ldr	r2, [pc, #364]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001f92:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
					if (Motor[3].MotorDirection == 1){
 8001f96:	4b5a      	ldr	r3, [pc, #360]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001f98:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d107      	bne.n	8001fb0 <HAL_TIM_PeriodElapsedCallback+0x414>
						Motor[3].StepPosition++;
 8001fa0:	4b57      	ldr	r3, [pc, #348]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001fa2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	4a55      	ldr	r2, [pc, #340]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001faa:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001fae:	e006      	b.n	8001fbe <HAL_TIM_PeriodElapsedCallback+0x422>
						Motor[3].StepPosition--;
 8001fb0:	4b53      	ldr	r3, [pc, #332]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001fb2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	4a51      	ldr	r2, [pc, #324]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001fba:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
				if(Motor[3].StepPosition == Motor[3].TargetPosition){
 8001fbe:	4b50      	ldr	r3, [pc, #320]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001fc0:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8001fc4:	4b4e      	ldr	r3, [pc, #312]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001fc6:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d10e      	bne.n	8001fec <HAL_TIM_PeriodElapsedCallback+0x450>
					Motor[3].Status = 0;
 8001fce:	4b4c      	ldr	r3, [pc, #304]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
					printf("---Motor3 Steps Position:%ld---\r\n",Motor[3].StepPosition);
 8001fd6:	4b4a      	ldr	r3, [pc, #296]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001fd8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4852      	ldr	r0, [pc, #328]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8001fe0:	f00d f9d2 	bl	800f388 <iprintf>
					HAL_TIM_Base_Stop_IT(&htim13);
 8001fe4:	4851      	ldr	r0, [pc, #324]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x590>)
 8001fe6:	f008 f9a9 	bl	800a33c <HAL_TIM_Base_Stop_IT>
 8001fea:	e012      	b.n	8002012 <HAL_TIM_PeriodElapsedCallback+0x476>
				else if (Motor[3].NumberofSteps <= 0){
 8001fec:	4b44      	ldr	r3, [pc, #272]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001fee:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10d      	bne.n	8002012 <HAL_TIM_PeriodElapsedCallback+0x476>
					Motor[3].Status = 0;
 8001ff6:	4b42      	ldr	r3, [pc, #264]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
					printf("[WRONG]Motor3 Goto Target Position Failed!---Current_Position:%ld---\r\n",Motor[3].StepPosition);
 8001ffe:	4b40      	ldr	r3, [pc, #256]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002000:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002004:	4619      	mov	r1, r3
 8002006:	484a      	ldr	r0, [pc, #296]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0x594>)
 8002008:	f00d f9be 	bl	800f388 <iprintf>
					HAL_TIM_Base_Stop_IT(&htim13);
 800200c:	4847      	ldr	r0, [pc, #284]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x590>)
 800200e:	f008 f995 	bl	800a33c <HAL_TIM_Base_Stop_IT>
				if (Motor[3].NumberofSteps > Motor[3].NumberofSteps_StopAccel){
 8002012:	4b3b      	ldr	r3, [pc, #236]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002014:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 8002018:	4b39      	ldr	r3, [pc, #228]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 800201a:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800201e:	429a      	cmp	r2, r3
 8002020:	d90f      	bls.n	8002042 <HAL_TIM_PeriodElapsedCallback+0x4a6>
					if(AccelDecelcount_TIM13 >= Motor[3].AccelerationTimeTMR){
 8002022:	4b37      	ldr	r3, [pc, #220]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002024:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 8002028:	4b3c      	ldr	r3, [pc, #240]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x580>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	f200 82e7 	bhi.w	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
						AccelDecelcount_TIM13=0;
 8002032:	4b3a      	ldr	r3, [pc, #232]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
						AccelDecel(ACCEL,&Motor[3]);
 8002038:	493e      	ldr	r1, [pc, #248]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800203a:	2001      	movs	r0, #1
 800203c:	f001 fe52 	bl	8003ce4 <AccelDecel>
}
 8002040:	e2de      	b.n	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
				else if (Motor[3].NumberofSteps < Motor[3].NumberofSteps_BeginDecel){
 8002042:	4b2f      	ldr	r3, [pc, #188]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002044:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 8002048:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 800204a:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800204e:	429a      	cmp	r2, r3
 8002050:	f080 82d6 	bcs.w	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
					if(AccelDecelcount_TIM13 >= Motor[3].DecelerationTimeTMR){
 8002054:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002056:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800205a:	4b30      	ldr	r3, [pc, #192]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x580>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	f200 82ce 	bhi.w	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
						AccelDecelcount_TIM13=0;
 8002064:	4b2d      	ldr	r3, [pc, #180]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
						AccelDecel(DECEL,&Motor[3]);
 800206a:	4932      	ldr	r1, [pc, #200]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800206c:	2002      	movs	r0, #2
 800206e:	f001 fe39 	bl	8003ce4 <AccelDecel>
}
 8002072:	e2c5      	b.n	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
	else if (htim->Instance == TIM14)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a2f      	ldr	r2, [pc, #188]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	f040 80bf 	bne.w	80021fe <HAL_TIM_PeriodElapsedCallback+0x662>
			timecount_TIM14++;
 8002080:	4b2e      	ldr	r3, [pc, #184]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	3301      	adds	r3, #1
 8002086:	4a2d      	ldr	r2, [pc, #180]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002088:	6013      	str	r3, [r2, #0]
			AccelDecelcount_TIM14++;
 800208a:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	3301      	adds	r3, #1
 8002090:	4a2b      	ldr	r2, [pc, #172]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8002092:	6013      	str	r3, [r2, #0]
			if(timecount_TIM14 <= Pluse_High)
 8002094:	4b29      	ldr	r3, [pc, #164]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4b21      	ldr	r3, [pc, #132]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x584>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d805      	bhi.n	80020ac <HAL_TIM_PeriodElapsedCallback+0x510>
				Motorpluse4_High();
 80020a0:	2201      	movs	r2, #1
 80020a2:	2104      	movs	r1, #4
 80020a4:	4827      	ldr	r0, [pc, #156]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80020a6:	f005 fd7b 	bl	8007ba0 <HAL_GPIO_WritePin>
 80020aa:	e00a      	b.n	80020c2 <HAL_TIM_PeriodElapsedCallback+0x526>
			else if(timecount_TIM14 > Pluse_High)
 80020ac:	4b23      	ldr	r3, [pc, #140]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x584>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d904      	bls.n	80020c2 <HAL_TIM_PeriodElapsedCallback+0x526>
				Motorpluse4_Low();
 80020b8:	2200      	movs	r2, #0
 80020ba:	2104      	movs	r1, #4
 80020bc:	4821      	ldr	r0, [pc, #132]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80020be:	f005 fd6f 	bl	8007ba0 <HAL_GPIO_WritePin>
			if(timecount_TIM14 >= Motor[4].StepperSpeedTMR)
 80020c2:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 80020c4:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 80020c8:	4b1c      	ldr	r3, [pc, #112]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d842      	bhi.n	8002156 <HAL_TIM_PeriodElapsedCallback+0x5ba>
				timecount_TIM14 = 0 ;
 80020d0:	4b1a      	ldr	r3, [pc, #104]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
				Motor[4].NumberofSteps--;
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 80020d8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80020dc:	3b01      	subs	r3, #1
 80020de:	4a08      	ldr	r2, [pc, #32]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 80020e0:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
				if (Motor[4].MotorDirection == 1){
 80020e4:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 80020e6:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d12c      	bne.n	8002148 <HAL_TIM_PeriodElapsedCallback+0x5ac>
					Motor[4].StepPosition++;
 80020ee:	4b04      	ldr	r3, [pc, #16]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 80020f0:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 80020f4:	3301      	adds	r3, #1
 80020f6:	4a02      	ldr	r2, [pc, #8]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x564>)
 80020f8:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
 80020fc:	e02b      	b.n	8002156 <HAL_TIM_PeriodElapsedCallback+0x5ba>
 80020fe:	bf00      	nop
 8002100:	20000a24 	.word	0x20000a24
 8002104:	080114c8 	.word	0x080114c8
 8002108:	20000788 	.word	0x20000788
 800210c:	2000051c 	.word	0x2000051c
 8002110:	20000ae4 	.word	0x20000ae4
 8002114:	40001c00 	.word	0x40001c00
 8002118:	20000520 	.word	0x20000520
 800211c:	20000524 	.word	0x20000524
 8002120:	20000000 	.word	0x20000000
 8002124:	40020400 	.word	0x40020400
 8002128:	080114ec 	.word	0x080114ec
 800212c:	20000818 	.word	0x20000818
 8002130:	08011510 	.word	0x08011510
 8002134:	20000b44 	.word	0x20000b44
 8002138:	40002000 	.word	0x40002000
 800213c:	20000528 	.word	0x20000528
 8002140:	2000052c 	.word	0x2000052c
 8002144:	40021000 	.word	0x40021000
					Motor[4].StepPosition--;
 8002148:	4b9e      	ldr	r3, [pc, #632]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 800214a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800214e:	3b01      	subs	r3, #1
 8002150:	4a9c      	ldr	r2, [pc, #624]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8002152:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
			if(Motor[4].StepPosition == Motor[4].TargetPosition)
 8002156:	4b9b      	ldr	r3, [pc, #620]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8002158:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 800215c:	4b99      	ldr	r3, [pc, #612]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 800215e:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002162:	429a      	cmp	r2, r3
 8002164:	d107      	bne.n	8002176 <HAL_TIM_PeriodElapsedCallback+0x5da>
				Motor[4].Status = 0;
 8002166:	4b97      	ldr	r3, [pc, #604]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8002168:	2200      	movs	r2, #0
 800216a:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
				HAL_TIM_Base_Stop_IT(&htim14);
 800216e:	4896      	ldr	r0, [pc, #600]	; (80023c8 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8002170:	f008 f8e4 	bl	800a33c <HAL_TIM_Base_Stop_IT>
 8002174:	e012      	b.n	800219c <HAL_TIM_PeriodElapsedCallback+0x600>
			else if (Motor[4].NumberofSteps <= 0){
 8002176:	4b93      	ldr	r3, [pc, #588]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8002178:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10d      	bne.n	800219c <HAL_TIM_PeriodElapsedCallback+0x600>
				Motor[4].Status = 0;
 8002180:	4b90      	ldr	r3, [pc, #576]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8002182:	2200      	movs	r2, #0
 8002184:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
				printf("[WRONG]Motor4 Goto Target Position Failed!---Current_Position:%ld---\r\n",Motor[4].StepPosition);
 8002188:	4b8e      	ldr	r3, [pc, #568]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 800218a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800218e:	4619      	mov	r1, r3
 8002190:	488e      	ldr	r0, [pc, #568]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x830>)
 8002192:	f00d f8f9 	bl	800f388 <iprintf>
				HAL_TIM_Base_Stop_IT(&htim14);
 8002196:	488c      	ldr	r0, [pc, #560]	; (80023c8 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8002198:	f008 f8d0 	bl	800a33c <HAL_TIM_Base_Stop_IT>
			if (Motor[4].NumberofSteps > Motor[4].NumberofSteps_StopAccel)
 800219c:	4b89      	ldr	r3, [pc, #548]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 800219e:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 80021a2:	4b88      	ldr	r3, [pc, #544]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 80021a4:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d90f      	bls.n	80021cc <HAL_TIM_PeriodElapsedCallback+0x630>
				if(AccelDecelcount_TIM14 >= Motor[4].AccelerationTimeTMR)
 80021ac:	4b85      	ldr	r3, [pc, #532]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 80021ae:	f8d3 21d8 	ldr.w	r2, [r3, #472]	; 0x1d8
 80021b2:	4b87      	ldr	r3, [pc, #540]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x834>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	f200 8222 	bhi.w	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
					AccelDecelcount_TIM14=0;
 80021bc:	4b84      	ldr	r3, [pc, #528]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x834>)
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
					AccelDecel(ACCEL,&Motor[4]);
 80021c2:	4984      	ldr	r1, [pc, #528]	; (80023d4 <HAL_TIM_PeriodElapsedCallback+0x838>)
 80021c4:	2001      	movs	r0, #1
 80021c6:	f001 fd8d 	bl	8003ce4 <AccelDecel>
}
 80021ca:	e219      	b.n	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
			else if (Motor[4].NumberofSteps < Motor[4].NumberofSteps_BeginDecel)
 80021cc:	4b7d      	ldr	r3, [pc, #500]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 80021ce:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 80021d2:	4b7c      	ldr	r3, [pc, #496]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 80021d4:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80021d8:	429a      	cmp	r2, r3
 80021da:	f080 8211 	bcs.w	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
				if(AccelDecelcount_TIM14 >= Motor[4].DecelerationTimeTMR)
 80021de:	4b79      	ldr	r3, [pc, #484]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 80021e0:	f8d3 21dc 	ldr.w	r2, [r3, #476]	; 0x1dc
 80021e4:	4b7a      	ldr	r3, [pc, #488]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x834>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	f200 8209 	bhi.w	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
					AccelDecelcount_TIM14=0;
 80021ee:	4b78      	ldr	r3, [pc, #480]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x834>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
					AccelDecel(DECEL,&Motor[4]);
 80021f4:	4977      	ldr	r1, [pc, #476]	; (80023d4 <HAL_TIM_PeriodElapsedCallback+0x838>)
 80021f6:	2002      	movs	r0, #2
 80021f8:	f001 fd74 	bl	8003ce4 <AccelDecel>
}
 80021fc:	e200      	b.n	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
	else if (htim->Instance == TIM6)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a75      	ldr	r2, [pc, #468]	; (80023d8 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8002204:	4293      	cmp	r3, r2
 8002206:	f040 80f5 	bne.w	80023f4 <HAL_TIM_PeriodElapsedCallback+0x858>
			timecount_TIM6++;
 800220a:	4b74      	ldr	r3, [pc, #464]	; (80023dc <HAL_TIM_PeriodElapsedCallback+0x840>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	3301      	adds	r3, #1
 8002210:	4a72      	ldr	r2, [pc, #456]	; (80023dc <HAL_TIM_PeriodElapsedCallback+0x840>)
 8002212:	6013      	str	r3, [r2, #0]
			AccelDecelcount_TIM6++;
 8002214:	4b72      	ldr	r3, [pc, #456]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x844>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	3301      	adds	r3, #1
 800221a:	4a71      	ldr	r2, [pc, #452]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x844>)
 800221c:	6013      	str	r3, [r2, #0]
			if(timecount_TIM6 >= Motor[5].StepperSpeedTMR)
 800221e:	4b69      	ldr	r3, [pc, #420]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8002220:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 8002224:	4b6d      	ldr	r3, [pc, #436]	; (80023dc <HAL_TIM_PeriodElapsedCallback+0x840>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d872      	bhi.n	8002312 <HAL_TIM_PeriodElapsedCallback+0x776>
				timecount_TIM6 = 0 ;
 800222c:	4b6b      	ldr	r3, [pc, #428]	; (80023dc <HAL_TIM_PeriodElapsedCallback+0x840>)
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
				if (Motor[5].MotorDirection == 1){
 8002232:	4b64      	ldr	r3, [pc, #400]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8002234:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8002238:	2b01      	cmp	r3, #1
 800223a:	d127      	bne.n	800228c <HAL_TIM_PeriodElapsedCallback+0x6f0>
					switch ( Motor5_State )
 800223c:	4b69      	ldr	r3, [pc, #420]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x848>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	3b01      	subs	r3, #1
 8002242:	2b03      	cmp	r3, #3
 8002244:	d84a      	bhi.n	80022dc <HAL_TIM_PeriodElapsedCallback+0x740>
 8002246:	a201      	add	r2, pc, #4	; (adr r2, 800224c <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8002248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224c:	0800225d 	.word	0x0800225d
 8002250:	08002269 	.word	0x08002269
 8002254:	08002275 	.word	0x08002275
 8002258:	08002281 	.word	0x08002281
						Motor5_AB();
 800225c:	f001 fb4a 	bl	80038f4 <Motor5_AB>
						Motor5_State = 2 ;
 8002260:	4b60      	ldr	r3, [pc, #384]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8002262:	2202      	movs	r2, #2
 8002264:	701a      	strb	r2, [r3, #0]
						break;
 8002266:	e039      	b.n	80022dc <HAL_TIM_PeriodElapsedCallback+0x740>
						Motor5_Ab();
 8002268:	f001 fb9e 	bl	80039a8 <Motor5_Ab>
						Motor5_State = 3 ;
 800226c:	4b5d      	ldr	r3, [pc, #372]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x848>)
 800226e:	2203      	movs	r2, #3
 8002270:	701a      	strb	r2, [r3, #0]
						break;
 8002272:	e033      	b.n	80022dc <HAL_TIM_PeriodElapsedCallback+0x740>
						Motor5_ab();
 8002274:	f001 fb7a 	bl	800396c <Motor5_ab>
						Motor5_State = 4 ;
 8002278:	4b5a      	ldr	r3, [pc, #360]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x848>)
 800227a:	2204      	movs	r2, #4
 800227c:	701a      	strb	r2, [r3, #0]
						break;
 800227e:	e02d      	b.n	80022dc <HAL_TIM_PeriodElapsedCallback+0x740>
						Motor5_aB();
 8002280:	f001 fb56 	bl	8003930 <Motor5_aB>
						Motor5_State = 1 ;
 8002284:	4b57      	ldr	r3, [pc, #348]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8002286:	2201      	movs	r2, #1
 8002288:	701a      	strb	r2, [r3, #0]
						break;
 800228a:	e027      	b.n	80022dc <HAL_TIM_PeriodElapsedCallback+0x740>
					switch ( Motor5_State )
 800228c:	4b55      	ldr	r3, [pc, #340]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x848>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	3b01      	subs	r3, #1
 8002292:	2b03      	cmp	r3, #3
 8002294:	d822      	bhi.n	80022dc <HAL_TIM_PeriodElapsedCallback+0x740>
 8002296:	a201      	add	r2, pc, #4	; (adr r2, 800229c <HAL_TIM_PeriodElapsedCallback+0x700>)
 8002298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229c:	080022ad 	.word	0x080022ad
 80022a0:	080022b9 	.word	0x080022b9
 80022a4:	080022c5 	.word	0x080022c5
 80022a8:	080022d1 	.word	0x080022d1
						Motor5_AB();
 80022ac:	f001 fb22 	bl	80038f4 <Motor5_AB>
						Motor5_State = 2 ;
 80022b0:	4b4c      	ldr	r3, [pc, #304]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x848>)
 80022b2:	2202      	movs	r2, #2
 80022b4:	701a      	strb	r2, [r3, #0]
						break;
 80022b6:	e011      	b.n	80022dc <HAL_TIM_PeriodElapsedCallback+0x740>
						Motor5_aB();
 80022b8:	f001 fb3a 	bl	8003930 <Motor5_aB>
						Motor5_State = 3 ;
 80022bc:	4b49      	ldr	r3, [pc, #292]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x848>)
 80022be:	2203      	movs	r2, #3
 80022c0:	701a      	strb	r2, [r3, #0]
						break;
 80022c2:	e00b      	b.n	80022dc <HAL_TIM_PeriodElapsedCallback+0x740>
						Motor5_ab();
 80022c4:	f001 fb52 	bl	800396c <Motor5_ab>
						Motor5_State = 4 ;
 80022c8:	4b46      	ldr	r3, [pc, #280]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x848>)
 80022ca:	2204      	movs	r2, #4
 80022cc:	701a      	strb	r2, [r3, #0]
						break;
 80022ce:	e005      	b.n	80022dc <HAL_TIM_PeriodElapsedCallback+0x740>
						Motor5_Ab();
 80022d0:	f001 fb6a 	bl	80039a8 <Motor5_Ab>
						Motor5_State = 1 ;
 80022d4:	4b43      	ldr	r3, [pc, #268]	; (80023e4 <HAL_TIM_PeriodElapsedCallback+0x848>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	701a      	strb	r2, [r3, #0]
						break;
 80022da:	bf00      	nop
				Motor[5].NumberofSteps--;
 80022dc:	4b39      	ldr	r3, [pc, #228]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 80022de:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80022e2:	3b01      	subs	r3, #1
 80022e4:	4a37      	ldr	r2, [pc, #220]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 80022e6:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
				if (Motor[5].MotorDirection == 1){
 80022ea:	4b36      	ldr	r3, [pc, #216]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 80022ec:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d107      	bne.n	8002304 <HAL_TIM_PeriodElapsedCallback+0x768>
					Motor[5].StepPosition++;
 80022f4:	4b33      	ldr	r3, [pc, #204]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 80022f6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80022fa:	3301      	adds	r3, #1
 80022fc:	4a31      	ldr	r2, [pc, #196]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 80022fe:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
 8002302:	e006      	b.n	8002312 <HAL_TIM_PeriodElapsedCallback+0x776>
					Motor[5].StepPosition--;
 8002304:	4b2f      	ldr	r3, [pc, #188]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8002306:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800230a:	3b01      	subs	r3, #1
 800230c:	4a2d      	ldr	r2, [pc, #180]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 800230e:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
			if(Motor[5].StepPosition == Motor[5].TargetPosition){
 8002312:	4b2c      	ldr	r3, [pc, #176]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8002314:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8002318:	4b2a      	ldr	r3, [pc, #168]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 800231a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800231e:	429a      	cmp	r2, r3
 8002320:	d110      	bne.n	8002344 <HAL_TIM_PeriodElapsedCallback+0x7a8>
				Motor[5].Status = 0;
 8002322:	4b28      	ldr	r3, [pc, #160]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
				Motor5_Release();
 800232a:	f001 fb5b 	bl	80039e4 <Motor5_Release>
				printf("---Motor5 Steps Position:%ld---\r\n",Motor[5].StepPosition);
 800232e:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8002330:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002334:	4619      	mov	r1, r3
 8002336:	482c      	ldr	r0, [pc, #176]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8002338:	f00d f826 	bl	800f388 <iprintf>
				HAL_TIM_Base_Stop_IT(&htim6);
 800233c:	482b      	ldr	r0, [pc, #172]	; (80023ec <HAL_TIM_PeriodElapsedCallback+0x850>)
 800233e:	f007 fffd 	bl	800a33c <HAL_TIM_Base_Stop_IT>
 8002342:	e00d      	b.n	8002360 <HAL_TIM_PeriodElapsedCallback+0x7c4>
			else if (Motor[5].NumberofSteps <= 0){
 8002344:	4b1f      	ldr	r3, [pc, #124]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8002346:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800234a:	2b00      	cmp	r3, #0
 800234c:	d108      	bne.n	8002360 <HAL_TIM_PeriodElapsedCallback+0x7c4>
				Motor[5].Status = 0;
 800234e:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
				Motor5_Release();
 8002356:	f001 fb45 	bl	80039e4 <Motor5_Release>
				HAL_TIM_Base_Stop_IT(&htim6);
 800235a:	4824      	ldr	r0, [pc, #144]	; (80023ec <HAL_TIM_PeriodElapsedCallback+0x850>)
 800235c:	f007 ffee 	bl	800a33c <HAL_TIM_Base_Stop_IT>
			if (Motor[5].NumberofSteps > Motor[5].NumberofSteps_StopAccel){
 8002360:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8002362:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8002366:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8002368:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800236c:	429a      	cmp	r2, r3
 800236e:	d90f      	bls.n	8002390 <HAL_TIM_PeriodElapsedCallback+0x7f4>
				if(AccelDecelcount_TIM6 >= Motor[5].AccelerationTimeTMR){
 8002370:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8002372:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8002376:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x844>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	f200 8140 	bhi.w	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
					AccelDecelcount_TIM6=0;
 8002380:	4b17      	ldr	r3, [pc, #92]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x844>)
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
					AccelDecel(ACCEL,&Motor[5]);
 8002386:	491a      	ldr	r1, [pc, #104]	; (80023f0 <HAL_TIM_PeriodElapsedCallback+0x854>)
 8002388:	2001      	movs	r0, #1
 800238a:	f001 fcab 	bl	8003ce4 <AccelDecel>
}
 800238e:	e137      	b.n	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
			else if (Motor[5].NumberofSteps < Motor[5].NumberofSteps_BeginDecel){
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8002392:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8002396:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8002398:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800239c:	429a      	cmp	r2, r3
 800239e:	f080 812f 	bcs.w	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
				if(AccelDecelcount_TIM6 >= Motor[5].DecelerationTimeTMR){
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x828>)
 80023a4:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 80023a8:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x844>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	f200 8127 	bhi.w	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
					AccelDecelcount_TIM6=0;
 80023b2:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_TIM_PeriodElapsedCallback+0x844>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
					AccelDecel(DECEL,&Motor[5]);
 80023b8:	490d      	ldr	r1, [pc, #52]	; (80023f0 <HAL_TIM_PeriodElapsedCallback+0x854>)
 80023ba:	2002      	movs	r0, #2
 80023bc:	f001 fc92 	bl	8003ce4 <AccelDecel>
}
 80023c0:	e11e      	b.n	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
 80023c2:	bf00      	nop
 80023c4:	20000a24 	.word	0x20000a24
 80023c8:	20000860 	.word	0x20000860
 80023cc:	08011558 	.word	0x08011558
 80023d0:	2000052c 	.word	0x2000052c
 80023d4:	20000ba4 	.word	0x20000ba4
 80023d8:	40001000 	.word	0x40001000
 80023dc:	20000530 	.word	0x20000530
 80023e0:	20000534 	.word	0x20000534
 80023e4:	20000004 	.word	0x20000004
 80023e8:	080115a0 	.word	0x080115a0
 80023ec:	20000668 	.word	0x20000668
 80023f0:	20000c04 	.word	0x20000c04
	else if (htim->Instance == TIM7)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a83      	ldr	r2, [pc, #524]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	f040 8100 	bne.w	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
			timecount_TIM7++;
 8002400:	4b82      	ldr	r3, [pc, #520]	; (800260c <HAL_TIM_PeriodElapsedCallback+0xa70>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	3301      	adds	r3, #1
 8002406:	4a81      	ldr	r2, [pc, #516]	; (800260c <HAL_TIM_PeriodElapsedCallback+0xa70>)
 8002408:	6013      	str	r3, [r2, #0]
			AccelDecelcount_TIM7++;
 800240a:	4b81      	ldr	r3, [pc, #516]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0xa74>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	3301      	adds	r3, #1
 8002410:	4a7f      	ldr	r2, [pc, #508]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0xa74>)
 8002412:	6013      	str	r3, [r2, #0]
			if ( get_ADC1_Current_Phase(0) < (abs(Motor6_MicroSteps[Motor6_State][1])*VM6_Full_Current) ){
 8002414:	2000      	movs	r0, #0
 8002416:	f003 fa17 	bl	8005848 <get_ADC1_Current_Phase>
 800241a:	4603      	mov	r3, r0
 800241c:	4618      	mov	r0, r3
 800241e:	4b7d      	ldr	r3, [pc, #500]	; (8002614 <HAL_TIM_PeriodElapsedCallback+0xa78>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	497d      	ldr	r1, [pc, #500]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0xa7c>)
 8002424:	4613      	mov	r3, r2
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	4413      	add	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	3304      	adds	r3, #4
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	bfb8      	it	lt
 8002436:	425b      	neglt	r3, r3
 8002438:	4298      	cmp	r0, r3
 800243a:	da11      	bge.n	8002460 <HAL_TIM_PeriodElapsedCallback+0x8c4>
				if ( Motor6_MicroSteps[Motor6_State][1] > 0 ){
 800243c:	4b75      	ldr	r3, [pc, #468]	; (8002614 <HAL_TIM_PeriodElapsedCallback+0xa78>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4975      	ldr	r1, [pc, #468]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0xa7c>)
 8002442:	4613      	mov	r3, r2
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	4413      	add	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	3304      	adds	r3, #4
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	dd02      	ble.n	800245a <HAL_TIM_PeriodElapsedCallback+0x8be>
					Motor6_A();
 8002454:	f001 fae4 	bl	8003a20 <Motor6_A>
 8002458:	e004      	b.n	8002464 <HAL_TIM_PeriodElapsedCallback+0x8c8>
					Motor6_a();
 800245a:	f001 faf1 	bl	8003a40 <Motor6_a>
 800245e:	e001      	b.n	8002464 <HAL_TIM_PeriodElapsedCallback+0x8c8>
				Motor6_A_release();
 8002460:	f001 fb22 	bl	8003aa8 <Motor6_A_release>
			if ( get_ADC1_Current_Phase(1) < (abs(Motor6_MicroSteps[Motor6_State][2])*VM6_Full_Current) ){
 8002464:	2001      	movs	r0, #1
 8002466:	f003 f9ef 	bl	8005848 <get_ADC1_Current_Phase>
 800246a:	4603      	mov	r3, r0
 800246c:	4618      	mov	r0, r3
 800246e:	4b69      	ldr	r3, [pc, #420]	; (8002614 <HAL_TIM_PeriodElapsedCallback+0xa78>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	4969      	ldr	r1, [pc, #420]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0xa7c>)
 8002474:	4613      	mov	r3, r2
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	4413      	add	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	3308      	adds	r3, #8
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	bfb8      	it	lt
 8002486:	425b      	neglt	r3, r3
 8002488:	4298      	cmp	r0, r3
 800248a:	da11      	bge.n	80024b0 <HAL_TIM_PeriodElapsedCallback+0x914>
				if ( Motor6_MicroSteps[Motor6_State][2] > 0 ){
 800248c:	4b61      	ldr	r3, [pc, #388]	; (8002614 <HAL_TIM_PeriodElapsedCallback+0xa78>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4961      	ldr	r1, [pc, #388]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0xa7c>)
 8002492:	4613      	mov	r3, r2
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	3308      	adds	r3, #8
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	dd02      	ble.n	80024aa <HAL_TIM_PeriodElapsedCallback+0x90e>
					Motor6_B();
 80024a4:	f001 fadc 	bl	8003a60 <Motor6_B>
 80024a8:	e004      	b.n	80024b4 <HAL_TIM_PeriodElapsedCallback+0x918>
					Motor6_b();
 80024aa:	f001 faeb 	bl	8003a84 <Motor6_b>
 80024ae:	e001      	b.n	80024b4 <HAL_TIM_PeriodElapsedCallback+0x918>
				Motor6_B_release();
 80024b0:	f001 fb0a 	bl	8003ac8 <Motor6_B_release>
			if(timecount_TIM7 >= Motor[6].StepperSpeedTMR)
 80024b4:	4b59      	ldr	r3, [pc, #356]	; (800261c <HAL_TIM_PeriodElapsedCallback+0xa80>)
 80024b6:	f8d3 2288 	ldr.w	r2, [r3, #648]	; 0x288
 80024ba:	4b54      	ldr	r3, [pc, #336]	; (800260c <HAL_TIM_PeriodElapsedCallback+0xa70>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d871      	bhi.n	80025a6 <HAL_TIM_PeriodElapsedCallback+0xa0a>
				timecount_TIM7 = 0 ;
 80024c2:	4b52      	ldr	r3, [pc, #328]	; (800260c <HAL_TIM_PeriodElapsedCallback+0xa70>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
				Motor[6].NumberofSteps--;
 80024c8:	4b54      	ldr	r3, [pc, #336]	; (800261c <HAL_TIM_PeriodElapsedCallback+0xa80>)
 80024ca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80024ce:	3b01      	subs	r3, #1
 80024d0:	4a52      	ldr	r2, [pc, #328]	; (800261c <HAL_TIM_PeriodElapsedCallback+0xa80>)
 80024d2:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c
				if (Motor[6].MotorDirection == 1){
 80024d6:	4b51      	ldr	r3, [pc, #324]	; (800261c <HAL_TIM_PeriodElapsedCallback+0xa80>)
 80024d8:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d10f      	bne.n	8002500 <HAL_TIM_PeriodElapsedCallback+0x964>
					Motor6_State += Motor6_MicroSteps_Increment ;
 80024e0:	4b4f      	ldr	r3, [pc, #316]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	4b4b      	ldr	r3, [pc, #300]	; (8002614 <HAL_TIM_PeriodElapsedCallback+0xa78>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4413      	add	r3, r2
 80024ec:	4a49      	ldr	r2, [pc, #292]	; (8002614 <HAL_TIM_PeriodElapsedCallback+0xa78>)
 80024ee:	6013      	str	r3, [r2, #0]
					if ( Motor6_State > 31 ){
 80024f0:	4b48      	ldr	r3, [pc, #288]	; (8002614 <HAL_TIM_PeriodElapsedCallback+0xa78>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b1f      	cmp	r3, #31
 80024f6:	dd14      	ble.n	8002522 <HAL_TIM_PeriodElapsedCallback+0x986>
						Motor6_State = 0;
 80024f8:	4b46      	ldr	r3, [pc, #280]	; (8002614 <HAL_TIM_PeriodElapsedCallback+0xa78>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	e010      	b.n	8002522 <HAL_TIM_PeriodElapsedCallback+0x986>
					Motor6_State -= Motor6_MicroSteps_Increment;
 8002500:	4b44      	ldr	r3, [pc, #272]	; (8002614 <HAL_TIM_PeriodElapsedCallback+0xa78>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a46      	ldr	r2, [pc, #280]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8002506:	8812      	ldrh	r2, [r2, #0]
 8002508:	1a9b      	subs	r3, r3, r2
 800250a:	4a42      	ldr	r2, [pc, #264]	; (8002614 <HAL_TIM_PeriodElapsedCallback+0xa78>)
 800250c:	6013      	str	r3, [r2, #0]
					if ( Motor6_State < 0 ){
 800250e:	4b41      	ldr	r3, [pc, #260]	; (8002614 <HAL_TIM_PeriodElapsedCallback+0xa78>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	da05      	bge.n	8002522 <HAL_TIM_PeriodElapsedCallback+0x986>
						Motor6_State = 32 - Motor6_MicroSteps_Increment;
 8002516:	4b42      	ldr	r3, [pc, #264]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	f1c3 0320 	rsb	r3, r3, #32
 800251e:	4a3d      	ldr	r2, [pc, #244]	; (8002614 <HAL_TIM_PeriodElapsedCallback+0xa78>)
 8002520:	6013      	str	r3, [r2, #0]
				if (Motor[6].MotorDirection == 1){
 8002522:	4b3e      	ldr	r3, [pc, #248]	; (800261c <HAL_TIM_PeriodElapsedCallback+0xa80>)
 8002524:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8002528:	2b01      	cmp	r3, #1
 800252a:	d107      	bne.n	800253c <HAL_TIM_PeriodElapsedCallback+0x9a0>
					Motor[6].StepPosition++;
 800252c:	4b3b      	ldr	r3, [pc, #236]	; (800261c <HAL_TIM_PeriodElapsedCallback+0xa80>)
 800252e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8002532:	3301      	adds	r3, #1
 8002534:	4a39      	ldr	r2, [pc, #228]	; (800261c <HAL_TIM_PeriodElapsedCallback+0xa80>)
 8002536:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
 800253a:	e006      	b.n	800254a <HAL_TIM_PeriodElapsedCallback+0x9ae>
					Motor[6].StepPosition--;
 800253c:	4b37      	ldr	r3, [pc, #220]	; (800261c <HAL_TIM_PeriodElapsedCallback+0xa80>)
 800253e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8002542:	3b01      	subs	r3, #1
 8002544:	4a35      	ldr	r2, [pc, #212]	; (800261c <HAL_TIM_PeriodElapsedCallback+0xa80>)
 8002546:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
				if(Motor[6].StepPosition == Motor[6].TargetPosition){
 800254a:	4b34      	ldr	r3, [pc, #208]	; (800261c <HAL_TIM_PeriodElapsedCallback+0xa80>)
 800254c:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8002550:	4b32      	ldr	r3, [pc, #200]	; (800261c <HAL_TIM_PeriodElapsedCallback+0xa80>)
 8002552:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8002556:	429a      	cmp	r2, r3
 8002558:	d110      	bne.n	800257c <HAL_TIM_PeriodElapsedCallback+0x9e0>
					Motor[6].Status = 0;
 800255a:	4b30      	ldr	r3, [pc, #192]	; (800261c <HAL_TIM_PeriodElapsedCallback+0xa80>)
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
					Motor6_Release();
 8002562:	f001 fac3 	bl	8003aec <Motor6_Release>
					printf("---Motor[6] Steps Position:%ld---\r\n",Motor[6].StepPosition);
 8002566:	4b2d      	ldr	r3, [pc, #180]	; (800261c <HAL_TIM_PeriodElapsedCallback+0xa80>)
 8002568:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800256c:	4619      	mov	r1, r3
 800256e:	482d      	ldr	r0, [pc, #180]	; (8002624 <HAL_TIM_PeriodElapsedCallback+0xa88>)
 8002570:	f00c ff0a 	bl	800f388 <iprintf>
					HAL_TIM_Base_Stop_IT(&htim7);
 8002574:	482c      	ldr	r0, [pc, #176]	; (8002628 <HAL_TIM_PeriodElapsedCallback+0xa8c>)
 8002576:	f007 fee1 	bl	800a33c <HAL_TIM_Base_Stop_IT>
 800257a:	e014      	b.n	80025a6 <HAL_TIM_PeriodElapsedCallback+0xa0a>
				else if (Motor[6].NumberofSteps <= 0){
 800257c:	4b27      	ldr	r3, [pc, #156]	; (800261c <HAL_TIM_PeriodElapsedCallback+0xa80>)
 800257e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10f      	bne.n	80025a6 <HAL_TIM_PeriodElapsedCallback+0xa0a>
					Motor[6].Status = 0;
 8002586:	4b25      	ldr	r3, [pc, #148]	; (800261c <HAL_TIM_PeriodElapsedCallback+0xa80>)
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
					Motor6_Release();
 800258e:	f001 faad 	bl	8003aec <Motor6_Release>
					printf("[WRONG]Motor6 Goto Target Position Failed!---Current_Position:%ld---\r\n",Motor[6].StepPosition);
 8002592:	4b22      	ldr	r3, [pc, #136]	; (800261c <HAL_TIM_PeriodElapsedCallback+0xa80>)
 8002594:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8002598:	4619      	mov	r1, r3
 800259a:	4824      	ldr	r0, [pc, #144]	; (800262c <HAL_TIM_PeriodElapsedCallback+0xa90>)
 800259c:	f00c fef4 	bl	800f388 <iprintf>
					HAL_TIM_Base_Stop_IT(&htim7);
 80025a0:	4821      	ldr	r0, [pc, #132]	; (8002628 <HAL_TIM_PeriodElapsedCallback+0xa8c>)
 80025a2:	f007 fecb 	bl	800a33c <HAL_TIM_Base_Stop_IT>
			if (Motor[6].NumberofSteps > Motor[6].NumberofSteps_StopAccel){
 80025a6:	4b1d      	ldr	r3, [pc, #116]	; (800261c <HAL_TIM_PeriodElapsedCallback+0xa80>)
 80025a8:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
 80025ac:	4b1b      	ldr	r3, [pc, #108]	; (800261c <HAL_TIM_PeriodElapsedCallback+0xa80>)
 80025ae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d90e      	bls.n	80025d4 <HAL_TIM_PeriodElapsedCallback+0xa38>
				if(AccelDecelcount_TIM7 >= Motor[6].AccelerationTimeTMR){
 80025b6:	4b19      	ldr	r3, [pc, #100]	; (800261c <HAL_TIM_PeriodElapsedCallback+0xa80>)
 80025b8:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
 80025bc:	4b14      	ldr	r3, [pc, #80]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0xa74>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d81d      	bhi.n	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
					AccelDecelcount_TIM7=0;
 80025c4:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0xa74>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
					AccelDecel(ACCEL,&Motor[6]);
 80025ca:	4919      	ldr	r1, [pc, #100]	; (8002630 <HAL_TIM_PeriodElapsedCallback+0xa94>)
 80025cc:	2001      	movs	r0, #1
 80025ce:	f001 fb89 	bl	8003ce4 <AccelDecel>
}
 80025d2:	e015      	b.n	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
			else if (Motor[6].NumberofSteps < Motor[6].NumberofSteps_BeginDecel){
 80025d4:	4b11      	ldr	r3, [pc, #68]	; (800261c <HAL_TIM_PeriodElapsedCallback+0xa80>)
 80025d6:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
 80025da:	4b10      	ldr	r3, [pc, #64]	; (800261c <HAL_TIM_PeriodElapsedCallback+0xa80>)
 80025dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d20d      	bcs.n	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
				if(AccelDecelcount_TIM7 >= Motor[6].DecelerationTimeTMR){
 80025e4:	4b0d      	ldr	r3, [pc, #52]	; (800261c <HAL_TIM_PeriodElapsedCallback+0xa80>)
 80025e6:	f8d3 229c 	ldr.w	r2, [r3, #668]	; 0x29c
 80025ea:	4b09      	ldr	r3, [pc, #36]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0xa74>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d806      	bhi.n	8002600 <HAL_TIM_PeriodElapsedCallback+0xa64>
					AccelDecelcount_TIM7=0;
 80025f2:	4b07      	ldr	r3, [pc, #28]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0xa74>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
					AccelDecel(DECEL,&Motor[6]);
 80025f8:	490d      	ldr	r1, [pc, #52]	; (8002630 <HAL_TIM_PeriodElapsedCallback+0xa94>)
 80025fa:	2002      	movs	r0, #2
 80025fc:	f001 fb72 	bl	8003ce4 <AccelDecel>
}
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40001400 	.word	0x40001400
 800260c:	20000538 	.word	0x20000538
 8002610:	2000053c 	.word	0x2000053c
 8002614:	20000540 	.word	0x20000540
 8002618:	2000000c 	.word	0x2000000c
 800261c:	20000a24 	.word	0x20000a24
 8002620:	20000de4 	.word	0x20000de4
 8002624:	080115c4 	.word	0x080115c4
 8002628:	200006b0 	.word	0x200006b0
 800262c:	080115e8 	.word	0x080115e8
 8002630:	20000c64 	.word	0x20000c64

08002634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002638:	b672      	cpsid	i
}
 800263a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800263c:	e7fe      	b.n	800263c <Error_Handler+0x8>
	...

08002640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	4b12      	ldr	r3, [pc, #72]	; (8002694 <HAL_MspInit+0x54>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	4a11      	ldr	r2, [pc, #68]	; (8002694 <HAL_MspInit+0x54>)
 8002650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002654:	6453      	str	r3, [r2, #68]	; 0x44
 8002656:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <HAL_MspInit+0x54>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	603b      	str	r3, [r7, #0]
 8002666:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_MspInit+0x54>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <HAL_MspInit+0x54>)
 800266c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002670:	6413      	str	r3, [r2, #64]	; 0x40
 8002672:	4b08      	ldr	r3, [pc, #32]	; (8002694 <HAL_MspInit+0x54>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800267e:	2200      	movs	r2, #0
 8002680:	210f      	movs	r1, #15
 8002682:	f06f 0001 	mvn.w	r0, #1
 8002686:	f004 fbbd 	bl	8006e04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40023800 	.word	0x40023800

08002698 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08c      	sub	sp, #48	; 0x30
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80026a8:	2300      	movs	r3, #0
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	4b2f      	ldr	r3, [pc, #188]	; (800276c <HAL_InitTick+0xd4>)
 80026ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b0:	4a2e      	ldr	r2, [pc, #184]	; (800276c <HAL_InitTick+0xd4>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6453      	str	r3, [r2, #68]	; 0x44
 80026b8:	4b2c      	ldr	r3, [pc, #176]	; (800276c <HAL_InitTick+0xd4>)
 80026ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026c4:	f107 020c 	add.w	r2, r7, #12
 80026c8:	f107 0310 	add.w	r3, r7, #16
 80026cc:	4611      	mov	r1, r2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f007 fd42 	bl	800a158 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80026d4:	f007 fd2c 	bl	800a130 <HAL_RCC_GetPCLK2Freq>
 80026d8:	4603      	mov	r3, r0
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e0:	4a23      	ldr	r2, [pc, #140]	; (8002770 <HAL_InitTick+0xd8>)
 80026e2:	fba2 2303 	umull	r2, r3, r2, r3
 80026e6:	0c9b      	lsrs	r3, r3, #18
 80026e8:	3b01      	subs	r3, #1
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80026ec:	4b21      	ldr	r3, [pc, #132]	; (8002774 <HAL_InitTick+0xdc>)
 80026ee:	4a22      	ldr	r2, [pc, #136]	; (8002778 <HAL_InitTick+0xe0>)
 80026f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80026f2:	4b20      	ldr	r3, [pc, #128]	; (8002774 <HAL_InitTick+0xdc>)
 80026f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026f8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80026fa:	4a1e      	ldr	r2, [pc, #120]	; (8002774 <HAL_InitTick+0xdc>)
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002700:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <HAL_InitTick+0xdc>)
 8002702:	2200      	movs	r2, #0
 8002704:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002706:	4b1b      	ldr	r3, [pc, #108]	; (8002774 <HAL_InitTick+0xdc>)
 8002708:	2200      	movs	r2, #0
 800270a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800270c:	4b19      	ldr	r3, [pc, #100]	; (8002774 <HAL_InitTick+0xdc>)
 800270e:	2200      	movs	r2, #0
 8002710:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002712:	4818      	ldr	r0, [pc, #96]	; (8002774 <HAL_InitTick+0xdc>)
 8002714:	f007 fd52 	bl	800a1bc <HAL_TIM_Base_Init>
 8002718:	4603      	mov	r3, r0
 800271a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800271e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002722:	2b00      	cmp	r3, #0
 8002724:	d11b      	bne.n	800275e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002726:	4813      	ldr	r0, [pc, #76]	; (8002774 <HAL_InitTick+0xdc>)
 8002728:	f007 fd98 	bl	800a25c <HAL_TIM_Base_Start_IT>
 800272c:	4603      	mov	r3, r0
 800272e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002732:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002736:	2b00      	cmp	r3, #0
 8002738:	d111      	bne.n	800275e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800273a:	2019      	movs	r0, #25
 800273c:	f004 fb7e 	bl	8006e3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b0f      	cmp	r3, #15
 8002744:	d808      	bhi.n	8002758 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002746:	2200      	movs	r2, #0
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	2019      	movs	r0, #25
 800274c:	f004 fb5a 	bl	8006e04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002750:	4a0a      	ldr	r2, [pc, #40]	; (800277c <HAL_InitTick+0xe4>)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	e002      	b.n	800275e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800275e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002762:	4618      	mov	r0, r3
 8002764:	3730      	adds	r7, #48	; 0x30
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800
 8002770:	431bde83 	.word	0x431bde83
 8002774:	20000544 	.word	0x20000544
 8002778:	40010000 	.word	0x40010000
 800277c:	2000018c 	.word	0x2000018c

08002780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002784:	e7fe      	b.n	8002784 <NMI_Handler+0x4>

08002786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002786:	b480      	push	{r7}
 8002788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800278a:	e7fe      	b.n	800278a <HardFault_Handler+0x4>

0800278c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002790:	e7fe      	b.n	8002790 <MemManage_Handler+0x4>

08002792 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002792:	b480      	push	{r7}
 8002794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002796:	e7fe      	b.n	8002796 <BusFault_Handler+0x4>

08002798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800279c:	e7fe      	b.n	800279c <UsageFault_Handler+0x4>

0800279e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Liquid_Detect_Pin);
 80027b0:	2001      	movs	r0, #1
 80027b2:	f005 fa29 	bl	8007c08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}

080027ba <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPT_IN1_Pin);
 80027be:	2008      	movs	r0, #8
 80027c0:	f005 fa22 	bl	8007c08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80027c4:	bf00      	nop
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPT_IN2_Pin);
 80027cc:	2010      	movs	r0, #16
 80027ce:	f005 fa1b 	bl	8007c08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80027dc:	4802      	ldr	r0, [pc, #8]	; (80027e8 <DMA1_Stream2_IRQHandler+0x10>)
 80027de:	f004 fdb3 	bl	8007348 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	200004ac 	.word	0x200004ac

080027ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPT_IN3_Pin);
 80027f0:	2020      	movs	r0, #32
 80027f2:	f005 fa09 	bl	8007c08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN4_Pin);
 80027f6:	2040      	movs	r0, #64	; 0x40
 80027f8:	f005 fa06 	bl	8007c08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN5_Pin);
 80027fc:	2080      	movs	r0, #128	; 0x80
 80027fe:	f005 fa03 	bl	8007c08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN6_Pin);
 8002802:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002806:	f005 f9ff 	bl	8007c08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002814:	4802      	ldr	r0, [pc, #8]	; (8002820 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002816:	f007 fe66 	bl	800a4e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	200006f8 	.word	0x200006f8

08002824 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002828:	4803      	ldr	r0, [pc, #12]	; (8002838 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800282a:	f007 fe5c 	bl	800a4e6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800282e:	4803      	ldr	r0, [pc, #12]	; (800283c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002830:	f007 fe59 	bl	800a4e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002834:	bf00      	nop
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20000544 	.word	0x20000544
 800283c:	20000740 	.word	0x20000740

08002840 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002844:	4802      	ldr	r0, [pc, #8]	; (8002850 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002846:	f007 fe4e 	bl	800a4e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000788 	.word	0x20000788

08002854 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
#ifdef JiaYangZhen_EncoderMode
	Motor[3].StepPosition = Encoder3_0position_number - (__HAL_TIM_GET_COUNTER(&htim3)) ;
#endif

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002858:	4802      	ldr	r0, [pc, #8]	; (8002864 <TIM3_IRQHandler+0x10>)
 800285a:	f007 fe44 	bl	800a4e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	200005d8 	.word	0x200005d8

08002868 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
#ifdef JiaYangZhen_EncoderMode
	Motor[2].StepPosition = __HAL_TIM_GET_COUNTER(&htim4) - Encoder2_0position_number ;
#endif

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800286c:	4802      	ldr	r0, [pc, #8]	; (8002878 <TIM4_IRQHandler+0x10>)
 800286e:	f007 fe3a 	bl	800a4e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000620 	.word	0x20000620

0800287c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002880:	4802      	ldr	r0, [pc, #8]	; (800288c <I2C2_EV_IRQHandler+0x10>)
 8002882:	f005 fb1d 	bl	8007ec0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000458 	.word	0x20000458

08002890 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002894:	4802      	ldr	r0, [pc, #8]	; (80028a0 <I2C2_ER_IRQHandler+0x10>)
 8002896:	f005 fc66 	bl	8008166 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800289a:	bf00      	nop
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	20000458 	.word	0x20000458

080028a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPT_IN7_Pin);
 80028a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80028ac:	f005 f9ac 	bl	8007c08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN8_Pin);
 80028b0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80028b4:	f005 f9a8 	bl	8007c08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN9_Pin);
 80028b8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80028bc:	f005 f9a4 	bl	8007c08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN10_Pin);
 80028c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80028c4:	f005 f9a0 	bl	8007c08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN11_Pin);
 80028c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80028cc:	f005 f99c 	bl	8007c08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN12_Pin);
 80028d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80028d4:	f005 f998 	bl	8007c08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80028d8:	bf00      	nop
 80028da:	bd80      	pop	{r7, pc}

080028dc <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80028e0:	4802      	ldr	r0, [pc, #8]	; (80028ec <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80028e2:	f007 fe00 	bl	800a4e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	200007d0 	.word	0x200007d0

080028f0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80028f4:	4802      	ldr	r0, [pc, #8]	; (8002900 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80028f6:	f007 fdf6 	bl	800a4e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000818 	.word	0x20000818

08002904 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002908:	4802      	ldr	r0, [pc, #8]	; (8002914 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800290a:	f007 fdec 	bl	800a4e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20000860 	.word	0x20000860

08002918 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800291c:	4804      	ldr	r0, [pc, #16]	; (8002930 <UART5_IRQHandler+0x18>)
 800291e:	f008 faf7 	bl	800af10 <HAL_UART_IRQHandler>
//  while(HAL_UART_Receive_IT(&huart5, (uint8_t *)aRxBuffer, 1) != HAL_OK)	//每次中断处理完成之后，重新开启中断并设置RxXferCount 1
//  {
//	 timeout++; 	//超时处理
//	 if(timeout>HAL_MAX_DELAY) break;
//  }
  	HAL_UART_Receive_IT(&huart5, (uint8_t *)aRxBuffer, 1);
 8002922:	2201      	movs	r2, #1
 8002924:	4903      	ldr	r1, [pc, #12]	; (8002934 <UART5_IRQHandler+0x1c>)
 8002926:	4802      	ldr	r0, [pc, #8]	; (8002930 <UART5_IRQHandler+0x18>)
 8002928:	f008 fac2 	bl	800aeb0 <HAL_UART_Receive_IT>

  /* USER CODE END UART5_IRQn 1 */
}
 800292c:	bf00      	nop
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20000958 	.word	0x20000958
 8002934:	200008a8 	.word	0x200008a8

08002938 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 800293c:	4803      	ldr	r0, [pc, #12]	; (800294c <TIM6_DAC_IRQHandler+0x14>)
 800293e:	f004 faad 	bl	8006e9c <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002942:	4803      	ldr	r0, [pc, #12]	; (8002950 <TIM6_DAC_IRQHandler+0x18>)
 8002944:	f007 fdcf 	bl	800a4e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002948:	bf00      	nop
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20000434 	.word	0x20000434
 8002950:	20000668 	.word	0x20000668

08002954 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002958:	4802      	ldr	r0, [pc, #8]	; (8002964 <TIM7_IRQHandler+0x10>)
 800295a:	f007 fdc4 	bl	800a4e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	200006b0 	.word	0x200006b0

08002968 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
	return 1;
 800296c:	2301      	movs	r3, #1
}
 800296e:	4618      	mov	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <_kill>:

int _kill(int pid, int sig)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002982:	f00c feef 	bl	800f764 <__errno>
 8002986:	4603      	mov	r3, r0
 8002988:	2216      	movs	r2, #22
 800298a:	601a      	str	r2, [r3, #0]
	return -1;
 800298c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002990:	4618      	mov	r0, r3
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <_exit>:

void _exit (int status)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80029a0:	f04f 31ff 	mov.w	r1, #4294967295
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff ffe7 	bl	8002978 <_kill>
	while (1) {}		/* Make sure we hang here */
 80029aa:	e7fe      	b.n	80029aa <_exit+0x12>

080029ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	e00a      	b.n	80029d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029be:	f3af 8000 	nop.w
 80029c2:	4601      	mov	r1, r0
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	60ba      	str	r2, [r7, #8]
 80029ca:	b2ca      	uxtb	r2, r1
 80029cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	3301      	adds	r3, #1
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	429a      	cmp	r2, r3
 80029da:	dbf0      	blt.n	80029be <_read+0x12>
	}

return len;
 80029dc:	687b      	ldr	r3, [r7, #4]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b086      	sub	sp, #24
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	60f8      	str	r0, [r7, #12]
 80029ee:	60b9      	str	r1, [r7, #8]
 80029f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	e009      	b.n	8002a0c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	1c5a      	adds	r2, r3, #1
 80029fc:	60ba      	str	r2, [r7, #8]
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff f813 	bl	8001a2c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	dbf1      	blt.n	80029f8 <_write+0x12>
	}
	return len;
 8002a14:	687b      	ldr	r3, [r7, #4]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <_close>:

int _close(int file)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
	return -1;
 8002a26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a46:	605a      	str	r2, [r3, #4]
	return 0;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <_isatty>:

int _isatty(int file)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
	return 1;
 8002a5e:	2301      	movs	r3, #1
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
	return 0;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a90:	4a14      	ldr	r2, [pc, #80]	; (8002ae4 <_sbrk+0x5c>)
 8002a92:	4b15      	ldr	r3, [pc, #84]	; (8002ae8 <_sbrk+0x60>)
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a9c:	4b13      	ldr	r3, [pc, #76]	; (8002aec <_sbrk+0x64>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d102      	bne.n	8002aaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002aa4:	4b11      	ldr	r3, [pc, #68]	; (8002aec <_sbrk+0x64>)
 8002aa6:	4a12      	ldr	r2, [pc, #72]	; (8002af0 <_sbrk+0x68>)
 8002aa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aaa:	4b10      	ldr	r3, [pc, #64]	; (8002aec <_sbrk+0x64>)
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d207      	bcs.n	8002ac8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ab8:	f00c fe54 	bl	800f764 <__errno>
 8002abc:	4603      	mov	r3, r0
 8002abe:	220c      	movs	r2, #12
 8002ac0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac6:	e009      	b.n	8002adc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ac8:	4b08      	ldr	r3, [pc, #32]	; (8002aec <_sbrk+0x64>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ace:	4b07      	ldr	r3, [pc, #28]	; (8002aec <_sbrk+0x64>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	4a05      	ldr	r2, [pc, #20]	; (8002aec <_sbrk+0x64>)
 8002ad8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ada:	68fb      	ldr	r3, [r7, #12]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	20020000 	.word	0x20020000
 8002ae8:	00000400 	.word	0x00000400
 8002aec:	2000058c 	.word	0x2000058c
 8002af0:	20005988 	.word	0x20005988

08002af4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002af8:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <SystemInit+0x20>)
 8002afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afe:	4a05      	ldr	r2, [pc, #20]	; (8002b14 <SystemInit+0x20>)
 8002b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <MX_TIM2_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08c      	sub	sp, #48	; 0x30
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b1e:	f107 030c 	add.w	r3, r7, #12
 8002b22:	2224      	movs	r2, #36	; 0x24
 8002b24:	2100      	movs	r1, #0
 8002b26:	4618      	mov	r0, r3
 8002b28:	f00c fd74 	bl	800f614 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b2c:	1d3b      	adds	r3, r7, #4
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b34:	4b21      	ldr	r3, [pc, #132]	; (8002bbc <MX_TIM2_Init+0xa4>)
 8002b36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8002b3c:	4b1f      	ldr	r3, [pc, #124]	; (8002bbc <MX_TIM2_Init+0xa4>)
 8002b3e:	2203      	movs	r2, #3
 8002b40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b42:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <MX_TIM2_Init+0xa4>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002b48:	4b1c      	ldr	r3, [pc, #112]	; (8002bbc <MX_TIM2_Init+0xa4>)
 8002b4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b50:	4b1a      	ldr	r3, [pc, #104]	; (8002bbc <MX_TIM2_Init+0xa4>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b56:	4b19      	ldr	r3, [pc, #100]	; (8002bbc <MX_TIM2_Init+0xa4>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b60:	2300      	movs	r3, #0
 8002b62:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b64:	2301      	movs	r3, #1
 8002b66:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b70:	2300      	movs	r3, #0
 8002b72:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b74:	2301      	movs	r3, #1
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002b80:	f107 030c 	add.w	r3, r7, #12
 8002b84:	4619      	mov	r1, r3
 8002b86:	480d      	ldr	r0, [pc, #52]	; (8002bbc <MX_TIM2_Init+0xa4>)
 8002b88:	f007 fc07 	bl	800a39a <HAL_TIM_Encoder_Init>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002b92:	f7ff fd4f 	bl	8002634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b96:	2300      	movs	r3, #0
 8002b98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b9e:	1d3b      	adds	r3, r7, #4
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4806      	ldr	r0, [pc, #24]	; (8002bbc <MX_TIM2_Init+0xa4>)
 8002ba4:	f007 ffd0 	bl	800ab48 <HAL_TIMEx_MasterConfigSynchronization>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002bae:	f7ff fd41 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002bb2:	bf00      	nop
 8002bb4:	3730      	adds	r7, #48	; 0x30
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000590 	.word	0x20000590

08002bc0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08c      	sub	sp, #48	; 0x30
 8002bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002bc6:	f107 030c 	add.w	r3, r7, #12
 8002bca:	2224      	movs	r2, #36	; 0x24
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f00c fd20 	bl	800f614 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bd4:	1d3b      	adds	r3, r7, #4
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bdc:	4b20      	ldr	r3, [pc, #128]	; (8002c60 <MX_TIM3_Init+0xa0>)
 8002bde:	4a21      	ldr	r2, [pc, #132]	; (8002c64 <MX_TIM3_Init+0xa4>)
 8002be0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8002be2:	4b1f      	ldr	r3, [pc, #124]	; (8002c60 <MX_TIM3_Init+0xa0>)
 8002be4:	2203      	movs	r2, #3
 8002be6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002be8:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <MX_TIM3_Init+0xa0>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002bee:	4b1c      	ldr	r3, [pc, #112]	; (8002c60 <MX_TIM3_Init+0xa0>)
 8002bf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bf4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bf6:	4b1a      	ldr	r3, [pc, #104]	; (8002c60 <MX_TIM3_Init+0xa0>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bfc:	4b18      	ldr	r3, [pc, #96]	; (8002c60 <MX_TIM3_Init+0xa0>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002c02:	2303      	movs	r3, #3
 8002c04:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c06:	2300      	movs	r3, #0
 8002c08:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002c12:	230f      	movs	r3, #15
 8002c14:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c16:	2300      	movs	r3, #0
 8002c18:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002c22:	230f      	movs	r3, #15
 8002c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002c26:	f107 030c 	add.w	r3, r7, #12
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	480c      	ldr	r0, [pc, #48]	; (8002c60 <MX_TIM3_Init+0xa0>)
 8002c2e:	f007 fbb4 	bl	800a39a <HAL_TIM_Encoder_Init>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002c38:	f7ff fcfc 	bl	8002634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c44:	1d3b      	adds	r3, r7, #4
 8002c46:	4619      	mov	r1, r3
 8002c48:	4805      	ldr	r0, [pc, #20]	; (8002c60 <MX_TIM3_Init+0xa0>)
 8002c4a:	f007 ff7d 	bl	800ab48 <HAL_TIMEx_MasterConfigSynchronization>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002c54:	f7ff fcee 	bl	8002634 <Error_Handler>
#ifdef JiaYangZhen_EncoderMode
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
#endif
  /* USER CODE END TIM3_Init 2 */

}
 8002c58:	bf00      	nop
 8002c5a:	3730      	adds	r7, #48	; 0x30
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	200005d8 	.word	0x200005d8
 8002c64:	40000400 	.word	0x40000400

08002c68 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08c      	sub	sp, #48	; 0x30
 8002c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002c6e:	f107 030c 	add.w	r3, r7, #12
 8002c72:	2224      	movs	r2, #36	; 0x24
 8002c74:	2100      	movs	r1, #0
 8002c76:	4618      	mov	r0, r3
 8002c78:	f00c fccc 	bl	800f614 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c7c:	1d3b      	adds	r3, r7, #4
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c84:	4b20      	ldr	r3, [pc, #128]	; (8002d08 <MX_TIM4_Init+0xa0>)
 8002c86:	4a21      	ldr	r2, [pc, #132]	; (8002d0c <MX_TIM4_Init+0xa4>)
 8002c88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 8002c8a:	4b1f      	ldr	r3, [pc, #124]	; (8002d08 <MX_TIM4_Init+0xa0>)
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c90:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <MX_TIM4_Init+0xa0>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002c96:	4b1c      	ldr	r3, [pc, #112]	; (8002d08 <MX_TIM4_Init+0xa0>)
 8002c98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c9e:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <MX_TIM4_Init+0xa0>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ca4:	4b18      	ldr	r3, [pc, #96]	; (8002d08 <MX_TIM4_Init+0xa0>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002caa:	2303      	movs	r3, #3
 8002cac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002cba:	230f      	movs	r3, #15
 8002cbc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002cca:	230f      	movs	r3, #15
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002cce:	f107 030c 	add.w	r3, r7, #12
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	480c      	ldr	r0, [pc, #48]	; (8002d08 <MX_TIM4_Init+0xa0>)
 8002cd6:	f007 fb60 	bl	800a39a <HAL_TIM_Encoder_Init>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002ce0:	f7ff fca8 	bl	8002634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002cec:	1d3b      	adds	r3, r7, #4
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4805      	ldr	r0, [pc, #20]	; (8002d08 <MX_TIM4_Init+0xa0>)
 8002cf2:	f007 ff29 	bl	800ab48 <HAL_TIMEx_MasterConfigSynchronization>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002cfc:	f7ff fc9a 	bl	8002634 <Error_Handler>
#ifdef JiaYangZhen_EncoderMode
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
#endif
  /* USER CODE END TIM4_Init 2 */

}
 8002d00:	bf00      	nop
 8002d02:	3730      	adds	r7, #48	; 0x30
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	20000620 	.word	0x20000620
 8002d0c:	40000800 	.word	0x40000800

08002d10 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d16:	463b      	mov	r3, r7
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002d1e:	4b14      	ldr	r3, [pc, #80]	; (8002d70 <MX_TIM6_Init+0x60>)
 8002d20:	4a14      	ldr	r2, [pc, #80]	; (8002d74 <MX_TIM6_Init+0x64>)
 8002d22:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 8002d24:	4b12      	ldr	r3, [pc, #72]	; (8002d70 <MX_TIM6_Init+0x60>)
 8002d26:	224f      	movs	r2, #79	; 0x4f
 8002d28:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d2a:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <MX_TIM6_Init+0x60>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8002d30:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <MX_TIM6_Init+0x60>)
 8002d32:	2209      	movs	r2, #9
 8002d34:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d36:	4b0e      	ldr	r3, [pc, #56]	; (8002d70 <MX_TIM6_Init+0x60>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002d3c:	480c      	ldr	r0, [pc, #48]	; (8002d70 <MX_TIM6_Init+0x60>)
 8002d3e:	f007 fa3d 	bl	800a1bc <HAL_TIM_Base_Init>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8002d48:	f7ff fc74 	bl	8002634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d50:	2300      	movs	r3, #0
 8002d52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002d54:	463b      	mov	r3, r7
 8002d56:	4619      	mov	r1, r3
 8002d58:	4805      	ldr	r0, [pc, #20]	; (8002d70 <MX_TIM6_Init+0x60>)
 8002d5a:	f007 fef5 	bl	800ab48 <HAL_TIMEx_MasterConfigSynchronization>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8002d64:	f7ff fc66 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002d68:	bf00      	nop
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	20000668 	.word	0x20000668
 8002d74:	40001000 	.word	0x40001000

08002d78 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d7e:	463b      	mov	r3, r7
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002d86:	4b14      	ldr	r3, [pc, #80]	; (8002dd8 <MX_TIM7_Init+0x60>)
 8002d88:	4a14      	ldr	r2, [pc, #80]	; (8002ddc <MX_TIM7_Init+0x64>)
 8002d8a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 79;
 8002d8c:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <MX_TIM7_Init+0x60>)
 8002d8e:	224f      	movs	r2, #79	; 0x4f
 8002d90:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d92:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <MX_TIM7_Init+0x60>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8002d98:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <MX_TIM7_Init+0x60>)
 8002d9a:	2209      	movs	r2, #9
 8002d9c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <MX_TIM7_Init+0x60>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002da4:	480c      	ldr	r0, [pc, #48]	; (8002dd8 <MX_TIM7_Init+0x60>)
 8002da6:	f007 fa09 	bl	800a1bc <HAL_TIM_Base_Init>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8002db0:	f7ff fc40 	bl	8002634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002db4:	2300      	movs	r3, #0
 8002db6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002db8:	2300      	movs	r3, #0
 8002dba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002dbc:	463b      	mov	r3, r7
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4805      	ldr	r0, [pc, #20]	; (8002dd8 <MX_TIM7_Init+0x60>)
 8002dc2:	f007 fec1 	bl	800ab48 <HAL_TIMEx_MasterConfigSynchronization>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8002dcc:	f7ff fc32 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002dd0:	bf00      	nop
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	200006b0 	.word	0x200006b0
 8002ddc:	40001400 	.word	0x40001400

08002de0 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002de6:	463b      	mov	r3, r7
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002df2:	4b15      	ldr	r3, [pc, #84]	; (8002e48 <MX_TIM9_Init+0x68>)
 8002df4:	4a15      	ldr	r2, [pc, #84]	; (8002e4c <MX_TIM9_Init+0x6c>)
 8002df6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 79;
 8002df8:	4b13      	ldr	r3, [pc, #76]	; (8002e48 <MX_TIM9_Init+0x68>)
 8002dfa:	224f      	movs	r2, #79	; 0x4f
 8002dfc:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dfe:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <MX_TIM9_Init+0x68>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 99;
 8002e04:	4b10      	ldr	r3, [pc, #64]	; (8002e48 <MX_TIM9_Init+0x68>)
 8002e06:	2263      	movs	r2, #99	; 0x63
 8002e08:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e0a:	4b0f      	ldr	r3, [pc, #60]	; (8002e48 <MX_TIM9_Init+0x68>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e10:	4b0d      	ldr	r3, [pc, #52]	; (8002e48 <MX_TIM9_Init+0x68>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002e16:	480c      	ldr	r0, [pc, #48]	; (8002e48 <MX_TIM9_Init+0x68>)
 8002e18:	f007 f9d0 	bl	800a1bc <HAL_TIM_Base_Init>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <MX_TIM9_Init+0x46>
  {
    Error_Handler();
 8002e22:	f7ff fc07 	bl	8002634 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e2a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002e2c:	463b      	mov	r3, r7
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4805      	ldr	r0, [pc, #20]	; (8002e48 <MX_TIM9_Init+0x68>)
 8002e32:	f007 fc60 	bl	800a6f6 <HAL_TIM_ConfigClockSource>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <MX_TIM9_Init+0x60>
  {
    Error_Handler();
 8002e3c:	f7ff fbfa 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002e40:	bf00      	nop
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	200006f8 	.word	0x200006f8
 8002e4c:	40014000 	.word	0x40014000

08002e50 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002e54:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <MX_TIM10_Init+0x3c>)
 8002e56:	4a0e      	ldr	r2, [pc, #56]	; (8002e90 <MX_TIM10_Init+0x40>)
 8002e58:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 79;
 8002e5a:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <MX_TIM10_Init+0x3c>)
 8002e5c:	224f      	movs	r2, #79	; 0x4f
 8002e5e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e60:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <MX_TIM10_Init+0x3c>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9;
 8002e66:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <MX_TIM10_Init+0x3c>)
 8002e68:	2209      	movs	r2, #9
 8002e6a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e6c:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <MX_TIM10_Init+0x3c>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e72:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <MX_TIM10_Init+0x3c>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002e78:	4804      	ldr	r0, [pc, #16]	; (8002e8c <MX_TIM10_Init+0x3c>)
 8002e7a:	f007 f99f 	bl	800a1bc <HAL_TIM_Base_Init>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 8002e84:	f7ff fbd6 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002e88:	bf00      	nop
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	20000740 	.word	0x20000740
 8002e90:	40014400 	.word	0x40014400

08002e94 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002e98:	4b0d      	ldr	r3, [pc, #52]	; (8002ed0 <MX_TIM11_Init+0x3c>)
 8002e9a:	4a0e      	ldr	r2, [pc, #56]	; (8002ed4 <MX_TIM11_Init+0x40>)
 8002e9c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 79;
 8002e9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <MX_TIM11_Init+0x3c>)
 8002ea0:	224f      	movs	r2, #79	; 0x4f
 8002ea2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ea4:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <MX_TIM11_Init+0x3c>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9;
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <MX_TIM11_Init+0x3c>)
 8002eac:	2209      	movs	r2, #9
 8002eae:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eb0:	4b07      	ldr	r3, [pc, #28]	; (8002ed0 <MX_TIM11_Init+0x3c>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <MX_TIM11_Init+0x3c>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002ebc:	4804      	ldr	r0, [pc, #16]	; (8002ed0 <MX_TIM11_Init+0x3c>)
 8002ebe:	f007 f97d 	bl	800a1bc <HAL_TIM_Base_Init>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 8002ec8:	f7ff fbb4 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002ecc:	bf00      	nop
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	20000788 	.word	0x20000788
 8002ed4:	40014800 	.word	0x40014800

08002ed8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ede:	463b      	mov	r3, r7
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	605a      	str	r2, [r3, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002eea:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <MX_TIM12_Init+0x68>)
 8002eec:	4a15      	ldr	r2, [pc, #84]	; (8002f44 <MX_TIM12_Init+0x6c>)
 8002eee:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 79;
 8002ef0:	4b13      	ldr	r3, [pc, #76]	; (8002f40 <MX_TIM12_Init+0x68>)
 8002ef2:	224f      	movs	r2, #79	; 0x4f
 8002ef4:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ef6:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <MX_TIM12_Init+0x68>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 9;
 8002efc:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <MX_TIM12_Init+0x68>)
 8002efe:	2209      	movs	r2, #9
 8002f00:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f02:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <MX_TIM12_Init+0x68>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f08:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <MX_TIM12_Init+0x68>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002f0e:	480c      	ldr	r0, [pc, #48]	; (8002f40 <MX_TIM12_Init+0x68>)
 8002f10:	f007 f954 	bl	800a1bc <HAL_TIM_Base_Init>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_TIM12_Init+0x46>
  {
    Error_Handler();
 8002f1a:	f7ff fb8b 	bl	8002634 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f22:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002f24:	463b      	mov	r3, r7
 8002f26:	4619      	mov	r1, r3
 8002f28:	4805      	ldr	r0, [pc, #20]	; (8002f40 <MX_TIM12_Init+0x68>)
 8002f2a:	f007 fbe4 	bl	800a6f6 <HAL_TIM_ConfigClockSource>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <MX_TIM12_Init+0x60>
  {
    Error_Handler();
 8002f34:	f7ff fb7e 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8002f38:	bf00      	nop
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	200007d0 	.word	0x200007d0
 8002f44:	40001800 	.word	0x40001800

08002f48 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002f4c:	4b0d      	ldr	r3, [pc, #52]	; (8002f84 <MX_TIM13_Init+0x3c>)
 8002f4e:	4a0e      	ldr	r2, [pc, #56]	; (8002f88 <MX_TIM13_Init+0x40>)
 8002f50:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 79;
 8002f52:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <MX_TIM13_Init+0x3c>)
 8002f54:	224f      	movs	r2, #79	; 0x4f
 8002f56:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f58:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <MX_TIM13_Init+0x3c>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9;
 8002f5e:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <MX_TIM13_Init+0x3c>)
 8002f60:	2209      	movs	r2, #9
 8002f62:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f64:	4b07      	ldr	r3, [pc, #28]	; (8002f84 <MX_TIM13_Init+0x3c>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f6a:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <MX_TIM13_Init+0x3c>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002f70:	4804      	ldr	r0, [pc, #16]	; (8002f84 <MX_TIM13_Init+0x3c>)
 8002f72:	f007 f923 	bl	800a1bc <HAL_TIM_Base_Init>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <MX_TIM13_Init+0x38>
  {
    Error_Handler();
 8002f7c:	f7ff fb5a 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002f80:	bf00      	nop
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20000818 	.word	0x20000818
 8002f88:	40001c00 	.word	0x40001c00

08002f8c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002f90:	4b0d      	ldr	r3, [pc, #52]	; (8002fc8 <MX_TIM14_Init+0x3c>)
 8002f92:	4a0e      	ldr	r2, [pc, #56]	; (8002fcc <MX_TIM14_Init+0x40>)
 8002f94:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 79;
 8002f96:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <MX_TIM14_Init+0x3c>)
 8002f98:	224f      	movs	r2, #79	; 0x4f
 8002f9a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f9c:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <MX_TIM14_Init+0x3c>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9;
 8002fa2:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <MX_TIM14_Init+0x3c>)
 8002fa4:	2209      	movs	r2, #9
 8002fa6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fa8:	4b07      	ldr	r3, [pc, #28]	; (8002fc8 <MX_TIM14_Init+0x3c>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fae:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <MX_TIM14_Init+0x3c>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002fb4:	4804      	ldr	r0, [pc, #16]	; (8002fc8 <MX_TIM14_Init+0x3c>)
 8002fb6:	f007 f901 	bl	800a1bc <HAL_TIM_Base_Init>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8002fc0:	f7ff fb38 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002fc4:	bf00      	nop
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20000860 	.word	0x20000860
 8002fcc:	40002000 	.word	0x40002000

08002fd0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08e      	sub	sp, #56	; 0x38
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	60da      	str	r2, [r3, #12]
 8002fe6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff0:	d12c      	bne.n	800304c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	623b      	str	r3, [r7, #32]
 8002ff6:	4b51      	ldr	r3, [pc, #324]	; (800313c <HAL_TIM_Encoder_MspInit+0x16c>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	4a50      	ldr	r2, [pc, #320]	; (800313c <HAL_TIM_Encoder_MspInit+0x16c>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	6413      	str	r3, [r2, #64]	; 0x40
 8003002:	4b4e      	ldr	r3, [pc, #312]	; (800313c <HAL_TIM_Encoder_MspInit+0x16c>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	623b      	str	r3, [r7, #32]
 800300c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	61fb      	str	r3, [r7, #28]
 8003012:	4b4a      	ldr	r3, [pc, #296]	; (800313c <HAL_TIM_Encoder_MspInit+0x16c>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	4a49      	ldr	r2, [pc, #292]	; (800313c <HAL_TIM_Encoder_MspInit+0x16c>)
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	6313      	str	r3, [r2, #48]	; 0x30
 800301e:	4b47      	ldr	r3, [pc, #284]	; (800313c <HAL_TIM_Encoder_MspInit+0x16c>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	61fb      	str	r3, [r7, #28]
 8003028:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Encoder4_B_Pin|Encoder4_A_Pin;
 800302a:	2322      	movs	r3, #34	; 0x22
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302e:	2302      	movs	r3, #2
 8003030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	2300      	movs	r3, #0
 8003034:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003036:	2300      	movs	r3, #0
 8003038:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800303a:	2301      	movs	r3, #1
 800303c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800303e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003042:	4619      	mov	r1, r3
 8003044:	483e      	ldr	r0, [pc, #248]	; (8003140 <HAL_TIM_Encoder_MspInit+0x170>)
 8003046:	f004 fbf7 	bl	8007838 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800304a:	e073      	b.n	8003134 <HAL_TIM_Encoder_MspInit+0x164>
  else if(tim_encoderHandle->Instance==TIM3)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a3c      	ldr	r2, [pc, #240]	; (8003144 <HAL_TIM_Encoder_MspInit+0x174>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d134      	bne.n	80030c0 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	61bb      	str	r3, [r7, #24]
 800305a:	4b38      	ldr	r3, [pc, #224]	; (800313c <HAL_TIM_Encoder_MspInit+0x16c>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	4a37      	ldr	r2, [pc, #220]	; (800313c <HAL_TIM_Encoder_MspInit+0x16c>)
 8003060:	f043 0302 	orr.w	r3, r3, #2
 8003064:	6413      	str	r3, [r2, #64]	; 0x40
 8003066:	4b35      	ldr	r3, [pc, #212]	; (800313c <HAL_TIM_Encoder_MspInit+0x16c>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	61bb      	str	r3, [r7, #24]
 8003070:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	4b31      	ldr	r3, [pc, #196]	; (800313c <HAL_TIM_Encoder_MspInit+0x16c>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	4a30      	ldr	r2, [pc, #192]	; (800313c <HAL_TIM_Encoder_MspInit+0x16c>)
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	6313      	str	r3, [r2, #48]	; 0x30
 8003082:	4b2e      	ldr	r3, [pc, #184]	; (800313c <HAL_TIM_Encoder_MspInit+0x16c>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Encoder3_A_Pin|Encoder3_B_Pin;
 800308e:	23c0      	movs	r3, #192	; 0xc0
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003092:	2302      	movs	r3, #2
 8003094:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003096:	2300      	movs	r3, #0
 8003098:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309a:	2300      	movs	r3, #0
 800309c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800309e:	2302      	movs	r3, #2
 80030a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030a6:	4619      	mov	r1, r3
 80030a8:	4825      	ldr	r0, [pc, #148]	; (8003140 <HAL_TIM_Encoder_MspInit+0x170>)
 80030aa:	f004 fbc5 	bl	8007838 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80030ae:	2200      	movs	r2, #0
 80030b0:	2105      	movs	r1, #5
 80030b2:	201d      	movs	r0, #29
 80030b4:	f003 fea6 	bl	8006e04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80030b8:	201d      	movs	r0, #29
 80030ba:	f003 febf 	bl	8006e3c <HAL_NVIC_EnableIRQ>
}
 80030be:	e039      	b.n	8003134 <HAL_TIM_Encoder_MspInit+0x164>
  else if(tim_encoderHandle->Instance==TIM4)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a20      	ldr	r2, [pc, #128]	; (8003148 <HAL_TIM_Encoder_MspInit+0x178>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d134      	bne.n	8003134 <HAL_TIM_Encoder_MspInit+0x164>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	4b1b      	ldr	r3, [pc, #108]	; (800313c <HAL_TIM_Encoder_MspInit+0x16c>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	4a1a      	ldr	r2, [pc, #104]	; (800313c <HAL_TIM_Encoder_MspInit+0x16c>)
 80030d4:	f043 0304 	orr.w	r3, r3, #4
 80030d8:	6413      	str	r3, [r2, #64]	; 0x40
 80030da:	4b18      	ldr	r3, [pc, #96]	; (800313c <HAL_TIM_Encoder_MspInit+0x16c>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	4b14      	ldr	r3, [pc, #80]	; (800313c <HAL_TIM_Encoder_MspInit+0x16c>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	4a13      	ldr	r2, [pc, #76]	; (800313c <HAL_TIM_Encoder_MspInit+0x16c>)
 80030f0:	f043 0308 	orr.w	r3, r3, #8
 80030f4:	6313      	str	r3, [r2, #48]	; 0x30
 80030f6:	4b11      	ldr	r3, [pc, #68]	; (800313c <HAL_TIM_Encoder_MspInit+0x16c>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 8003102:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003108:	2302      	movs	r3, #2
 800310a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310c:	2300      	movs	r3, #0
 800310e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003110:	2300      	movs	r3, #0
 8003112:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003114:	2302      	movs	r3, #2
 8003116:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800311c:	4619      	mov	r1, r3
 800311e:	480b      	ldr	r0, [pc, #44]	; (800314c <HAL_TIM_Encoder_MspInit+0x17c>)
 8003120:	f004 fb8a 	bl	8007838 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003124:	2200      	movs	r2, #0
 8003126:	2105      	movs	r1, #5
 8003128:	201e      	movs	r0, #30
 800312a:	f003 fe6b 	bl	8006e04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800312e:	201e      	movs	r0, #30
 8003130:	f003 fe84 	bl	8006e3c <HAL_NVIC_EnableIRQ>
}
 8003134:	bf00      	nop
 8003136:	3738      	adds	r7, #56	; 0x38
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40023800 	.word	0x40023800
 8003140:	40020000 	.word	0x40020000
 8003144:	40000400 	.word	0x40000400
 8003148:	40000800 	.word	0x40000800
 800314c:	40020c00 	.word	0x40020c00

08003150 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08a      	sub	sp, #40	; 0x28
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a70      	ldr	r2, [pc, #448]	; (8003320 <HAL_TIM_Base_MspInit+0x1d0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d116      	bne.n	8003190 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003162:	2300      	movs	r3, #0
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
 8003166:	4b6f      	ldr	r3, [pc, #444]	; (8003324 <HAL_TIM_Base_MspInit+0x1d4>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	4a6e      	ldr	r2, [pc, #440]	; (8003324 <HAL_TIM_Base_MspInit+0x1d4>)
 800316c:	f043 0310 	orr.w	r3, r3, #16
 8003170:	6413      	str	r3, [r2, #64]	; 0x40
 8003172:	4b6c      	ldr	r3, [pc, #432]	; (8003324 <HAL_TIM_Base_MspInit+0x1d4>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f003 0310 	and.w	r3, r3, #16
 800317a:	627b      	str	r3, [r7, #36]	; 0x24
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 7, 0);
 800317e:	2200      	movs	r2, #0
 8003180:	2107      	movs	r1, #7
 8003182:	2036      	movs	r0, #54	; 0x36
 8003184:	f003 fe3e 	bl	8006e04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003188:	2036      	movs	r0, #54	; 0x36
 800318a:	f003 fe57 	bl	8006e3c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800318e:	e0c2      	b.n	8003316 <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM7)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a64      	ldr	r2, [pc, #400]	; (8003328 <HAL_TIM_Base_MspInit+0x1d8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d116      	bne.n	80031c8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	623b      	str	r3, [r7, #32]
 800319e:	4b61      	ldr	r3, [pc, #388]	; (8003324 <HAL_TIM_Base_MspInit+0x1d4>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	4a60      	ldr	r2, [pc, #384]	; (8003324 <HAL_TIM_Base_MspInit+0x1d4>)
 80031a4:	f043 0320 	orr.w	r3, r3, #32
 80031a8:	6413      	str	r3, [r2, #64]	; 0x40
 80031aa:	4b5e      	ldr	r3, [pc, #376]	; (8003324 <HAL_TIM_Base_MspInit+0x1d4>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f003 0320 	and.w	r3, r3, #32
 80031b2:	623b      	str	r3, [r7, #32]
 80031b4:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM7_IRQn, 6, 0);
 80031b6:	2200      	movs	r2, #0
 80031b8:	2106      	movs	r1, #6
 80031ba:	2037      	movs	r0, #55	; 0x37
 80031bc:	f003 fe22 	bl	8006e04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80031c0:	2037      	movs	r0, #55	; 0x37
 80031c2:	f003 fe3b 	bl	8006e3c <HAL_NVIC_EnableIRQ>
}
 80031c6:	e0a6      	b.n	8003316 <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM9)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a57      	ldr	r2, [pc, #348]	; (800332c <HAL_TIM_Base_MspInit+0x1dc>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d116      	bne.n	8003200 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
 80031d6:	4b53      	ldr	r3, [pc, #332]	; (8003324 <HAL_TIM_Base_MspInit+0x1d4>)
 80031d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031da:	4a52      	ldr	r2, [pc, #328]	; (8003324 <HAL_TIM_Base_MspInit+0x1d4>)
 80031dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e0:	6453      	str	r3, [r2, #68]	; 0x44
 80031e2:	4b50      	ldr	r3, [pc, #320]	; (8003324 <HAL_TIM_Base_MspInit+0x1d4>)
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ea:	61fb      	str	r3, [r7, #28]
 80031ec:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80031ee:	2200      	movs	r2, #0
 80031f0:	2105      	movs	r1, #5
 80031f2:	2018      	movs	r0, #24
 80031f4:	f003 fe06 	bl	8006e04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80031f8:	2018      	movs	r0, #24
 80031fa:	f003 fe1f 	bl	8006e3c <HAL_NVIC_EnableIRQ>
}
 80031fe:	e08a      	b.n	8003316 <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM10)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a4a      	ldr	r2, [pc, #296]	; (8003330 <HAL_TIM_Base_MspInit+0x1e0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d116      	bne.n	8003238 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800320a:	2300      	movs	r3, #0
 800320c:	61bb      	str	r3, [r7, #24]
 800320e:	4b45      	ldr	r3, [pc, #276]	; (8003324 <HAL_TIM_Base_MspInit+0x1d4>)
 8003210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003212:	4a44      	ldr	r2, [pc, #272]	; (8003324 <HAL_TIM_Base_MspInit+0x1d4>)
 8003214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003218:	6453      	str	r3, [r2, #68]	; 0x44
 800321a:	4b42      	ldr	r3, [pc, #264]	; (8003324 <HAL_TIM_Base_MspInit+0x1d4>)
 800321c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003222:	61bb      	str	r3, [r7, #24]
 8003224:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8003226:	2200      	movs	r2, #0
 8003228:	2105      	movs	r1, #5
 800322a:	2019      	movs	r0, #25
 800322c:	f003 fdea 	bl	8006e04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003230:	2019      	movs	r0, #25
 8003232:	f003 fe03 	bl	8006e3c <HAL_NVIC_EnableIRQ>
}
 8003236:	e06e      	b.n	8003316 <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM11)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a3d      	ldr	r2, [pc, #244]	; (8003334 <HAL_TIM_Base_MspInit+0x1e4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d116      	bne.n	8003270 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	4b37      	ldr	r3, [pc, #220]	; (8003324 <HAL_TIM_Base_MspInit+0x1d4>)
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	4a36      	ldr	r2, [pc, #216]	; (8003324 <HAL_TIM_Base_MspInit+0x1d4>)
 800324c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003250:	6453      	str	r3, [r2, #68]	; 0x44
 8003252:	4b34      	ldr	r3, [pc, #208]	; (8003324 <HAL_TIM_Base_MspInit+0x1d4>)
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800325e:	2200      	movs	r2, #0
 8003260:	2105      	movs	r1, #5
 8003262:	201a      	movs	r0, #26
 8003264:	f003 fdce 	bl	8006e04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003268:	201a      	movs	r0, #26
 800326a:	f003 fde7 	bl	8006e3c <HAL_NVIC_EnableIRQ>
}
 800326e:	e052      	b.n	8003316 <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM12)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a30      	ldr	r2, [pc, #192]	; (8003338 <HAL_TIM_Base_MspInit+0x1e8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d116      	bne.n	80032a8 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	4b29      	ldr	r3, [pc, #164]	; (8003324 <HAL_TIM_Base_MspInit+0x1d4>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	4a28      	ldr	r2, [pc, #160]	; (8003324 <HAL_TIM_Base_MspInit+0x1d4>)
 8003284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003288:	6413      	str	r3, [r2, #64]	; 0x40
 800328a:	4b26      	ldr	r3, [pc, #152]	; (8003324 <HAL_TIM_Base_MspInit+0x1d4>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003292:	613b      	str	r3, [r7, #16]
 8003294:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8003296:	2200      	movs	r2, #0
 8003298:	2105      	movs	r1, #5
 800329a:	202b      	movs	r0, #43	; 0x2b
 800329c:	f003 fdb2 	bl	8006e04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80032a0:	202b      	movs	r0, #43	; 0x2b
 80032a2:	f003 fdcb 	bl	8006e3c <HAL_NVIC_EnableIRQ>
}
 80032a6:	e036      	b.n	8003316 <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM13)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a23      	ldr	r2, [pc, #140]	; (800333c <HAL_TIM_Base_MspInit+0x1ec>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d116      	bne.n	80032e0 <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	4b1b      	ldr	r3, [pc, #108]	; (8003324 <HAL_TIM_Base_MspInit+0x1d4>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	4a1a      	ldr	r2, [pc, #104]	; (8003324 <HAL_TIM_Base_MspInit+0x1d4>)
 80032bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032c0:	6413      	str	r3, [r2, #64]	; 0x40
 80032c2:	4b18      	ldr	r3, [pc, #96]	; (8003324 <HAL_TIM_Base_MspInit+0x1d4>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 80032ce:	2200      	movs	r2, #0
 80032d0:	2105      	movs	r1, #5
 80032d2:	202c      	movs	r0, #44	; 0x2c
 80032d4:	f003 fd96 	bl	8006e04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80032d8:	202c      	movs	r0, #44	; 0x2c
 80032da:	f003 fdaf 	bl	8006e3c <HAL_NVIC_EnableIRQ>
}
 80032de:	e01a      	b.n	8003316 <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM14)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a16      	ldr	r2, [pc, #88]	; (8003340 <HAL_TIM_Base_MspInit+0x1f0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d115      	bne.n	8003316 <HAL_TIM_Base_MspInit+0x1c6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80032ea:	2300      	movs	r3, #0
 80032ec:	60bb      	str	r3, [r7, #8]
 80032ee:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <HAL_TIM_Base_MspInit+0x1d4>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	4a0c      	ldr	r2, [pc, #48]	; (8003324 <HAL_TIM_Base_MspInit+0x1d4>)
 80032f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f8:	6413      	str	r3, [r2, #64]	; 0x40
 80032fa:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <HAL_TIM_Base_MspInit+0x1d4>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003302:	60bb      	str	r3, [r7, #8]
 8003304:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8003306:	2200      	movs	r2, #0
 8003308:	2105      	movs	r1, #5
 800330a:	202d      	movs	r0, #45	; 0x2d
 800330c:	f003 fd7a 	bl	8006e04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003310:	202d      	movs	r0, #45	; 0x2d
 8003312:	f003 fd93 	bl	8006e3c <HAL_NVIC_EnableIRQ>
}
 8003316:	bf00      	nop
 8003318:	3728      	adds	r7, #40	; 0x28
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40001000 	.word	0x40001000
 8003324:	40023800 	.word	0x40023800
 8003328:	40001400 	.word	0x40001400
 800332c:	40014000 	.word	0x40014000
 8003330:	40014400 	.word	0x40014400
 8003334:	40014800 	.word	0x40014800
 8003338:	40001800 	.word	0x40001800
 800333c:	40001c00 	.word	0x40001c00
 8003340:	40002000 	.word	0x40002000

08003344 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003348:	4b11      	ldr	r3, [pc, #68]	; (8003390 <MX_UART4_Init+0x4c>)
 800334a:	4a12      	ldr	r2, [pc, #72]	; (8003394 <MX_UART4_Init+0x50>)
 800334c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800334e:	4b10      	ldr	r3, [pc, #64]	; (8003390 <MX_UART4_Init+0x4c>)
 8003350:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003354:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003356:	4b0e      	ldr	r3, [pc, #56]	; (8003390 <MX_UART4_Init+0x4c>)
 8003358:	2200      	movs	r2, #0
 800335a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800335c:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <MX_UART4_Init+0x4c>)
 800335e:	2200      	movs	r2, #0
 8003360:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003362:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <MX_UART4_Init+0x4c>)
 8003364:	2200      	movs	r2, #0
 8003366:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003368:	4b09      	ldr	r3, [pc, #36]	; (8003390 <MX_UART4_Init+0x4c>)
 800336a:	220c      	movs	r2, #12
 800336c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800336e:	4b08      	ldr	r3, [pc, #32]	; (8003390 <MX_UART4_Init+0x4c>)
 8003370:	2200      	movs	r2, #0
 8003372:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <MX_UART4_Init+0x4c>)
 8003376:	2200      	movs	r2, #0
 8003378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800337a:	4805      	ldr	r0, [pc, #20]	; (8003390 <MX_UART4_Init+0x4c>)
 800337c:	f007 fc74 	bl	800ac68 <HAL_UART_Init>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003386:	f7ff f955 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000914 	.word	0x20000914
 8003394:	40004c00 	.word	0x40004c00

08003398 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */
#ifndef DushuModule
  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800339c:	4b13      	ldr	r3, [pc, #76]	; (80033ec <MX_UART5_Init+0x54>)
 800339e:	4a14      	ldr	r2, [pc, #80]	; (80033f0 <MX_UART5_Init+0x58>)
 80033a0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80033a2:	4b12      	ldr	r3, [pc, #72]	; (80033ec <MX_UART5_Init+0x54>)
 80033a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033a8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80033aa:	4b10      	ldr	r3, [pc, #64]	; (80033ec <MX_UART5_Init+0x54>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80033b0:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <MX_UART5_Init+0x54>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80033b6:	4b0d      	ldr	r3, [pc, #52]	; (80033ec <MX_UART5_Init+0x54>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <MX_UART5_Init+0x54>)
 80033be:	220c      	movs	r2, #12
 80033c0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033c2:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <MX_UART5_Init+0x54>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80033c8:	4b08      	ldr	r3, [pc, #32]	; (80033ec <MX_UART5_Init+0x54>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80033ce:	4807      	ldr	r0, [pc, #28]	; (80033ec <MX_UART5_Init+0x54>)
 80033d0:	f007 fc4a 	bl	800ac68 <HAL_UART_Init>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80033da:	f7ff f92b 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
  HAL_UART_Receive_IT(&huart5, (uint8_t *)aRxBuffer, 1);
 80033de:	2201      	movs	r2, #1
 80033e0:	4904      	ldr	r1, [pc, #16]	; (80033f4 <MX_UART5_Init+0x5c>)
 80033e2:	4802      	ldr	r0, [pc, #8]	; (80033ec <MX_UART5_Init+0x54>)
 80033e4:	f007 fd64 	bl	800aeb0 <HAL_UART_Receive_IT>
  }
  HAL_UART_Receive_IT(&huart5, (uint8_t *)aRxBuffer, 1);	//接收中断：标志位UART_IT_RXNE，并且设置接收缓冲以及接收缓冲接收最大数据量
#endif
  /* USER CODE END UART5_Init 2 */

}
 80033e8:	bf00      	nop
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	20000958 	.word	0x20000958
 80033f0:	40005000 	.word	0x40005000
 80033f4:	200008a8 	.word	0x200008a8

080033f8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80033fc:	4b11      	ldr	r3, [pc, #68]	; (8003444 <MX_USART1_UART_Init+0x4c>)
 80033fe:	4a12      	ldr	r2, [pc, #72]	; (8003448 <MX_USART1_UART_Init+0x50>)
 8003400:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003402:	4b10      	ldr	r3, [pc, #64]	; (8003444 <MX_USART1_UART_Init+0x4c>)
 8003404:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003408:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800340a:	4b0e      	ldr	r3, [pc, #56]	; (8003444 <MX_USART1_UART_Init+0x4c>)
 800340c:	2200      	movs	r2, #0
 800340e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003410:	4b0c      	ldr	r3, [pc, #48]	; (8003444 <MX_USART1_UART_Init+0x4c>)
 8003412:	2200      	movs	r2, #0
 8003414:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003416:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <MX_USART1_UART_Init+0x4c>)
 8003418:	2200      	movs	r2, #0
 800341a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800341c:	4b09      	ldr	r3, [pc, #36]	; (8003444 <MX_USART1_UART_Init+0x4c>)
 800341e:	220c      	movs	r2, #12
 8003420:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003422:	4b08      	ldr	r3, [pc, #32]	; (8003444 <MX_USART1_UART_Init+0x4c>)
 8003424:	2200      	movs	r2, #0
 8003426:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003428:	4b06      	ldr	r3, [pc, #24]	; (8003444 <MX_USART1_UART_Init+0x4c>)
 800342a:	2200      	movs	r2, #0
 800342c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800342e:	4805      	ldr	r0, [pc, #20]	; (8003444 <MX_USART1_UART_Init+0x4c>)
 8003430:	f007 fc1a 	bl	800ac68 <HAL_UART_Init>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800343a:	f7ff f8fb 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800343e:	bf00      	nop
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	2000099c 	.word	0x2000099c
 8003448:	40011000 	.word	0x40011000

0800344c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003450:	4b11      	ldr	r3, [pc, #68]	; (8003498 <MX_USART3_UART_Init+0x4c>)
 8003452:	4a12      	ldr	r2, [pc, #72]	; (800349c <MX_USART3_UART_Init+0x50>)
 8003454:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003456:	4b10      	ldr	r3, [pc, #64]	; (8003498 <MX_USART3_UART_Init+0x4c>)
 8003458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800345c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800345e:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <MX_USART3_UART_Init+0x4c>)
 8003460:	2200      	movs	r2, #0
 8003462:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003464:	4b0c      	ldr	r3, [pc, #48]	; (8003498 <MX_USART3_UART_Init+0x4c>)
 8003466:	2200      	movs	r2, #0
 8003468:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800346a:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <MX_USART3_UART_Init+0x4c>)
 800346c:	2200      	movs	r2, #0
 800346e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003470:	4b09      	ldr	r3, [pc, #36]	; (8003498 <MX_USART3_UART_Init+0x4c>)
 8003472:	220c      	movs	r2, #12
 8003474:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003476:	4b08      	ldr	r3, [pc, #32]	; (8003498 <MX_USART3_UART_Init+0x4c>)
 8003478:	2200      	movs	r2, #0
 800347a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800347c:	4b06      	ldr	r3, [pc, #24]	; (8003498 <MX_USART3_UART_Init+0x4c>)
 800347e:	2200      	movs	r2, #0
 8003480:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003482:	4805      	ldr	r0, [pc, #20]	; (8003498 <MX_USART3_UART_Init+0x4c>)
 8003484:	f007 fbf0 	bl	800ac68 <HAL_UART_Init>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800348e:	f7ff f8d1 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	200009e0 	.word	0x200009e0
 800349c:	40004800 	.word	0x40004800

080034a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b090      	sub	sp, #64	; 0x40
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	605a      	str	r2, [r3, #4]
 80034b2:	609a      	str	r2, [r3, #8]
 80034b4:	60da      	str	r2, [r3, #12]
 80034b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a79      	ldr	r2, [pc, #484]	; (80036a4 <HAL_UART_MspInit+0x204>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d12d      	bne.n	800351e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80034c2:	2300      	movs	r3, #0
 80034c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034c6:	4b78      	ldr	r3, [pc, #480]	; (80036a8 <HAL_UART_MspInit+0x208>)
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	4a77      	ldr	r2, [pc, #476]	; (80036a8 <HAL_UART_MspInit+0x208>)
 80034cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80034d0:	6413      	str	r3, [r2, #64]	; 0x40
 80034d2:	4b75      	ldr	r3, [pc, #468]	; (80036a8 <HAL_UART_MspInit+0x208>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034da:	62bb      	str	r3, [r7, #40]	; 0x28
 80034dc:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034de:	2300      	movs	r3, #0
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
 80034e2:	4b71      	ldr	r3, [pc, #452]	; (80036a8 <HAL_UART_MspInit+0x208>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	4a70      	ldr	r2, [pc, #448]	; (80036a8 <HAL_UART_MspInit+0x208>)
 80034e8:	f043 0304 	orr.w	r3, r3, #4
 80034ec:	6313      	str	r3, [r2, #48]	; 0x30
 80034ee:	4b6e      	ldr	r3, [pc, #440]	; (80036a8 <HAL_UART_MspInit+0x208>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80034fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80034fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003500:	2302      	movs	r3, #2
 8003502:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003504:	2300      	movs	r3, #0
 8003506:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003508:	2303      	movs	r3, #3
 800350a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800350c:	2308      	movs	r3, #8
 800350e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003510:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003514:	4619      	mov	r1, r3
 8003516:	4865      	ldr	r0, [pc, #404]	; (80036ac <HAL_UART_MspInit+0x20c>)
 8003518:	f004 f98e 	bl	8007838 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800351c:	e0bd      	b.n	800369a <HAL_UART_MspInit+0x1fa>
  else if(uartHandle->Instance==UART5)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a63      	ldr	r2, [pc, #396]	; (80036b0 <HAL_UART_MspInit+0x210>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d153      	bne.n	80035d0 <HAL_UART_MspInit+0x130>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003528:	2300      	movs	r3, #0
 800352a:	623b      	str	r3, [r7, #32]
 800352c:	4b5e      	ldr	r3, [pc, #376]	; (80036a8 <HAL_UART_MspInit+0x208>)
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	4a5d      	ldr	r2, [pc, #372]	; (80036a8 <HAL_UART_MspInit+0x208>)
 8003532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003536:	6413      	str	r3, [r2, #64]	; 0x40
 8003538:	4b5b      	ldr	r3, [pc, #364]	; (80036a8 <HAL_UART_MspInit+0x208>)
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003540:	623b      	str	r3, [r7, #32]
 8003542:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003544:	2300      	movs	r3, #0
 8003546:	61fb      	str	r3, [r7, #28]
 8003548:	4b57      	ldr	r3, [pc, #348]	; (80036a8 <HAL_UART_MspInit+0x208>)
 800354a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354c:	4a56      	ldr	r2, [pc, #344]	; (80036a8 <HAL_UART_MspInit+0x208>)
 800354e:	f043 0304 	orr.w	r3, r3, #4
 8003552:	6313      	str	r3, [r2, #48]	; 0x30
 8003554:	4b54      	ldr	r3, [pc, #336]	; (80036a8 <HAL_UART_MspInit+0x208>)
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003560:	2300      	movs	r3, #0
 8003562:	61bb      	str	r3, [r7, #24]
 8003564:	4b50      	ldr	r3, [pc, #320]	; (80036a8 <HAL_UART_MspInit+0x208>)
 8003566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003568:	4a4f      	ldr	r2, [pc, #316]	; (80036a8 <HAL_UART_MspInit+0x208>)
 800356a:	f043 0308 	orr.w	r3, r3, #8
 800356e:	6313      	str	r3, [r2, #48]	; 0x30
 8003570:	4b4d      	ldr	r3, [pc, #308]	; (80036a8 <HAL_UART_MspInit+0x208>)
 8003572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	61bb      	str	r3, [r7, #24]
 800357a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800357c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003580:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003582:	2302      	movs	r3, #2
 8003584:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003586:	2300      	movs	r3, #0
 8003588:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800358a:	2303      	movs	r3, #3
 800358c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800358e:	2308      	movs	r3, #8
 8003590:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003592:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003596:	4619      	mov	r1, r3
 8003598:	4844      	ldr	r0, [pc, #272]	; (80036ac <HAL_UART_MspInit+0x20c>)
 800359a:	f004 f94d 	bl	8007838 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800359e:	2304      	movs	r3, #4
 80035a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a2:	2302      	movs	r3, #2
 80035a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035aa:	2303      	movs	r3, #3
 80035ac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80035ae:	2308      	movs	r3, #8
 80035b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035b6:	4619      	mov	r1, r3
 80035b8:	483e      	ldr	r0, [pc, #248]	; (80036b4 <HAL_UART_MspInit+0x214>)
 80035ba:	f004 f93d 	bl	8007838 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 9, 0);
 80035be:	2200      	movs	r2, #0
 80035c0:	2109      	movs	r1, #9
 80035c2:	2035      	movs	r0, #53	; 0x35
 80035c4:	f003 fc1e 	bl	8006e04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80035c8:	2035      	movs	r0, #53	; 0x35
 80035ca:	f003 fc37 	bl	8006e3c <HAL_NVIC_EnableIRQ>
}
 80035ce:	e064      	b.n	800369a <HAL_UART_MspInit+0x1fa>
  else if(uartHandle->Instance==USART1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a38      	ldr	r2, [pc, #224]	; (80036b8 <HAL_UART_MspInit+0x218>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d12d      	bne.n	8003636 <HAL_UART_MspInit+0x196>
    __HAL_RCC_USART1_CLK_ENABLE();
 80035da:	2300      	movs	r3, #0
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	4b32      	ldr	r3, [pc, #200]	; (80036a8 <HAL_UART_MspInit+0x208>)
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	4a31      	ldr	r2, [pc, #196]	; (80036a8 <HAL_UART_MspInit+0x208>)
 80035e4:	f043 0310 	orr.w	r3, r3, #16
 80035e8:	6453      	str	r3, [r2, #68]	; 0x44
 80035ea:	4b2f      	ldr	r3, [pc, #188]	; (80036a8 <HAL_UART_MspInit+0x208>)
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	f003 0310 	and.w	r3, r3, #16
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035f6:	2300      	movs	r3, #0
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	4b2b      	ldr	r3, [pc, #172]	; (80036a8 <HAL_UART_MspInit+0x208>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	4a2a      	ldr	r2, [pc, #168]	; (80036a8 <HAL_UART_MspInit+0x208>)
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	6313      	str	r3, [r2, #48]	; 0x30
 8003606:	4b28      	ldr	r3, [pc, #160]	; (80036a8 <HAL_UART_MspInit+0x208>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003612:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003616:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003618:	2302      	movs	r3, #2
 800361a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361c:	2300      	movs	r3, #0
 800361e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003620:	2303      	movs	r3, #3
 8003622:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003624:	2307      	movs	r3, #7
 8003626:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800362c:	4619      	mov	r1, r3
 800362e:	4823      	ldr	r0, [pc, #140]	; (80036bc <HAL_UART_MspInit+0x21c>)
 8003630:	f004 f902 	bl	8007838 <HAL_GPIO_Init>
}
 8003634:	e031      	b.n	800369a <HAL_UART_MspInit+0x1fa>
  else if(uartHandle->Instance==USART3)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a21      	ldr	r2, [pc, #132]	; (80036c0 <HAL_UART_MspInit+0x220>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d12c      	bne.n	800369a <HAL_UART_MspInit+0x1fa>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	4b18      	ldr	r3, [pc, #96]	; (80036a8 <HAL_UART_MspInit+0x208>)
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	4a17      	ldr	r2, [pc, #92]	; (80036a8 <HAL_UART_MspInit+0x208>)
 800364a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800364e:	6413      	str	r3, [r2, #64]	; 0x40
 8003650:	4b15      	ldr	r3, [pc, #84]	; (80036a8 <HAL_UART_MspInit+0x208>)
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800365c:	2300      	movs	r3, #0
 800365e:	60bb      	str	r3, [r7, #8]
 8003660:	4b11      	ldr	r3, [pc, #68]	; (80036a8 <HAL_UART_MspInit+0x208>)
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	4a10      	ldr	r2, [pc, #64]	; (80036a8 <HAL_UART_MspInit+0x208>)
 8003666:	f043 0308 	orr.w	r3, r3, #8
 800366a:	6313      	str	r3, [r2, #48]	; 0x30
 800366c:	4b0e      	ldr	r3, [pc, #56]	; (80036a8 <HAL_UART_MspInit+0x208>)
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003678:	f44f 7340 	mov.w	r3, #768	; 0x300
 800367c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367e:	2302      	movs	r3, #2
 8003680:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003682:	2300      	movs	r3, #0
 8003684:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003686:	2303      	movs	r3, #3
 8003688:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800368a:	2307      	movs	r3, #7
 800368c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800368e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003692:	4619      	mov	r1, r3
 8003694:	4807      	ldr	r0, [pc, #28]	; (80036b4 <HAL_UART_MspInit+0x214>)
 8003696:	f004 f8cf 	bl	8007838 <HAL_GPIO_Init>
}
 800369a:	bf00      	nop
 800369c:	3740      	adds	r7, #64	; 0x40
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40004c00 	.word	0x40004c00
 80036a8:	40023800 	.word	0x40023800
 80036ac:	40020800 	.word	0x40020800
 80036b0:	40005000 	.word	0x40005000
 80036b4:	40020c00 	.word	0x40020c00
 80036b8:	40011000 	.word	0x40011000
 80036bc:	40020000 	.word	0x40020000
 80036c0:	40004800 	.word	0x40004800

080036c4 <HAL_UART_RxCpltCallback>:
	}
}

#else
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
	if(huart->Instance==UART5)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a2e      	ldr	r2, [pc, #184]	; (800378c <HAL_UART_RxCpltCallback+0xc8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d155      	bne.n	8003782 <HAL_UART_RxCpltCallback+0xbe>
	{
		if ( USART_RX_STA&0x8000 ){		// 判断是否已经完成接收(bit15-1则已接收完成)
 80036d6:	4b2e      	ldr	r3, [pc, #184]	; (8003790 <HAL_UART_RxCpltCallback+0xcc>)
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	b21b      	sxth	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	db50      	blt.n	8003782 <HAL_UART_RxCpltCallback+0xbe>
			;							// 如果完成接收数据接收且尚未处理，则不接受后续data
		}
		else{
			if( USART_RX_STA&0x4000 ){		// 判断是否已收到起始位
 80036e0:	4b2b      	ldr	r3, [pc, #172]	; (8003790 <HAL_UART_RxCpltCallback+0xcc>)
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d02a      	beq.n	8003742 <HAL_UART_RxCpltCallback+0x7e>
				if( aRxBuffer[0]==0x55 ){	// 判断是否已收到结束位
 80036ec:	4b29      	ldr	r3, [pc, #164]	; (8003794 <HAL_UART_RxCpltCallback+0xd0>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b55      	cmp	r3, #85	; 0x55
 80036f2:	d117      	bne.n	8003724 <HAL_UART_RxCpltCallback+0x60>
					USART_RX_STA|=0x8000;
 80036f4:	4b26      	ldr	r3, [pc, #152]	; (8003790 <HAL_UART_RxCpltCallback+0xcc>)
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003700:	b29a      	uxth	r2, r3
 8003702:	4b23      	ldr	r3, [pc, #140]	; (8003790 <HAL_UART_RxCpltCallback+0xcc>)
 8003704:	801a      	strh	r2, [r3, #0]
					USART5_RX_BUF[USART_RX_STA&0X3FFF]=aRxBuffer[0] ;
 8003706:	4b22      	ldr	r3, [pc, #136]	; (8003790 <HAL_UART_RxCpltCallback+0xcc>)
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800370e:	4a21      	ldr	r2, [pc, #132]	; (8003794 <HAL_UART_RxCpltCallback+0xd0>)
 8003710:	7811      	ldrb	r1, [r2, #0]
 8003712:	4a21      	ldr	r2, [pc, #132]	; (8003798 <HAL_UART_RxCpltCallback+0xd4>)
 8003714:	54d1      	strb	r1, [r2, r3]
					USART_RX_STA++;
 8003716:	4b1e      	ldr	r3, [pc, #120]	; (8003790 <HAL_UART_RxCpltCallback+0xcc>)
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	3301      	adds	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	4b1c      	ldr	r3, [pc, #112]	; (8003790 <HAL_UART_RxCpltCallback+0xcc>)
 8003720:	801a      	strh	r2, [r3, #0]
					USART_RX_STA=0;
				}
			}
		}
	}
}
 8003722:	e02e      	b.n	8003782 <HAL_UART_RxCpltCallback+0xbe>
					USART5_RX_BUF[USART_RX_STA&0X3FFF]=aRxBuffer[0] ;
 8003724:	4b1a      	ldr	r3, [pc, #104]	; (8003790 <HAL_UART_RxCpltCallback+0xcc>)
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800372c:	4a19      	ldr	r2, [pc, #100]	; (8003794 <HAL_UART_RxCpltCallback+0xd0>)
 800372e:	7811      	ldrb	r1, [r2, #0]
 8003730:	4a19      	ldr	r2, [pc, #100]	; (8003798 <HAL_UART_RxCpltCallback+0xd4>)
 8003732:	54d1      	strb	r1, [r2, r3]
					USART_RX_STA++;
 8003734:	4b16      	ldr	r3, [pc, #88]	; (8003790 <HAL_UART_RxCpltCallback+0xcc>)
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	3301      	adds	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	4b14      	ldr	r3, [pc, #80]	; (8003790 <HAL_UART_RxCpltCallback+0xcc>)
 800373e:	801a      	strh	r2, [r3, #0]
}
 8003740:	e01f      	b.n	8003782 <HAL_UART_RxCpltCallback+0xbe>
				if(aRxBuffer[0]==0xAA){
 8003742:	4b14      	ldr	r3, [pc, #80]	; (8003794 <HAL_UART_RxCpltCallback+0xd0>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2baa      	cmp	r3, #170	; 0xaa
 8003748:	d118      	bne.n	800377c <HAL_UART_RxCpltCallback+0xb8>
					USART_RX_STA|=0x4000;
 800374a:	4b11      	ldr	r3, [pc, #68]	; (8003790 <HAL_UART_RxCpltCallback+0xcc>)
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003752:	b29a      	uxth	r2, r3
 8003754:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <HAL_UART_RxCpltCallback+0xcc>)
 8003756:	801a      	strh	r2, [r3, #0]
					USART5_RX_BUF[USART_RX_STA&0X3FFF]=aRxBuffer[0] ;
 8003758:	4b0d      	ldr	r3, [pc, #52]	; (8003790 <HAL_UART_RxCpltCallback+0xcc>)
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003760:	4a0c      	ldr	r2, [pc, #48]	; (8003794 <HAL_UART_RxCpltCallback+0xd0>)
 8003762:	7811      	ldrb	r1, [r2, #0]
 8003764:	4a0c      	ldr	r2, [pc, #48]	; (8003798 <HAL_UART_RxCpltCallback+0xd4>)
 8003766:	54d1      	strb	r1, [r2, r3]
					USART_RX_STA++;
 8003768:	4b09      	ldr	r3, [pc, #36]	; (8003790 <HAL_UART_RxCpltCallback+0xcc>)
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	3301      	adds	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	4b07      	ldr	r3, [pc, #28]	; (8003790 <HAL_UART_RxCpltCallback+0xcc>)
 8003772:	801a      	strh	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(&htim9);
 8003774:	4809      	ldr	r0, [pc, #36]	; (800379c <HAL_UART_RxCpltCallback+0xd8>)
 8003776:	f006 fd71 	bl	800a25c <HAL_TIM_Base_Start_IT>
}
 800377a:	e002      	b.n	8003782 <HAL_UART_RxCpltCallback+0xbe>
					USART_RX_STA=0;
 800377c:	4b04      	ldr	r3, [pc, #16]	; (8003790 <HAL_UART_RxCpltCallback+0xcc>)
 800377e:	2200      	movs	r2, #0
 8003780:	801a      	strh	r2, [r3, #0]
}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40005000 	.word	0x40005000
 8003790:	20000910 	.word	0x20000910
 8003794:	200008a8 	.word	0x200008a8
 8003798:	200008ac 	.word	0x200008ac
 800379c:	200006f8 	.word	0x200006f8

080037a0 <Motor_Data_Init>:
#include "stdlib.h"

struct MotorDefine Motor[10];

void Motor_Data_Init(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
		Motor[6].accelerationRate = 8000;
		Motor[6].decelerationRate = 8000;
#endif

/*  Motor4 : 柱塞泵，负责注液（也可以抽液），最大排量1000uL，总行程10rads（2000步），每步0.5uL  */
		Motor[4].MotorNumber = 4;
 80037a4:	4b48      	ldr	r3, [pc, #288]	; (80038c8 <Motor_Data_Init+0x128>)
 80037a6:	2204      	movs	r2, #4
 80037a8:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
		Motor[4].Status = 0,
 80037ac:	4b46      	ldr	r3, [pc, #280]	; (80038c8 <Motor_Data_Init+0x128>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
		Motor[4].htim_x = &htim14,
 80037b4:	4b44      	ldr	r3, [pc, #272]	; (80038c8 <Motor_Data_Init+0x128>)
 80037b6:	4a45      	ldr	r2, [pc, #276]	; (80038cc <Motor_Data_Init+0x12c>)
 80037b8:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		//机械参数
		Motor[4].deceleration_ratio = 1;
 80037bc:	4b42      	ldr	r3, [pc, #264]	; (80038c8 <Motor_Data_Init+0x128>)
 80037be:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80037c2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		Motor[4].step_angle = 1.8;
 80037c6:	4b40      	ldr	r3, [pc, #256]	; (80038c8 <Motor_Data_Init+0x128>)
 80037c8:	4a41      	ldr	r2, [pc, #260]	; (80038d0 <Motor_Data_Init+0x130>)
 80037ca:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
		Motor[4].mircro_steps = 16;
 80037ce:	4b3e      	ldr	r3, [pc, #248]	; (80038c8 <Motor_Data_Init+0x128>)
 80037d0:	2210      	movs	r2, #16
 80037d2:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		Motor[4].MaxSpeedInRads= 13;
 80037d6:	4b3c      	ldr	r3, [pc, #240]	; (80038c8 <Motor_Data_Init+0x128>)
 80037d8:	4a3e      	ldr	r2, [pc, #248]	; (80038d4 <Motor_Data_Init+0x134>)
 80037da:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
		//设定默认速度参数，以下为实测优化后结果，可以通过参数控制模式修改
		Motor[4].StartupSpeedInRads = 5;
 80037de:	4b3a      	ldr	r3, [pc, #232]	; (80038c8 <Motor_Data_Init+0x128>)
 80037e0:	4a3d      	ldr	r2, [pc, #244]	; (80038d8 <Motor_Data_Init+0x138>)
 80037e2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
		Motor[4].DesiredSpeedInRads = 10;
 80037e6:	4b38      	ldr	r3, [pc, #224]	; (80038c8 <Motor_Data_Init+0x128>)
 80037e8:	4a3c      	ldr	r2, [pc, #240]	; (80038dc <Motor_Data_Init+0x13c>)
 80037ea:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
		Motor[4].accelerationRate = 20000;
 80037ee:	4b36      	ldr	r3, [pc, #216]	; (80038c8 <Motor_Data_Init+0x128>)
 80037f0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80037f4:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
		Motor[4].decelerationRate = 10000;
 80037f8:	4b33      	ldr	r3, [pc, #204]	; (80038c8 <Motor_Data_Init+0x128>)
 80037fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80037fe:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
#endif

#ifdef L298N_StepMotorCtrl

/*  Motor6 : 微流控5V小电机-旋转电机，垂直上下运动  理想速度：20rads/s 导程0.5mm/rad 行进速度:10mm/s */
	Motor[5].MotorNumber = 5;
 8003802:	4b31      	ldr	r3, [pc, #196]	; (80038c8 <Motor_Data_Init+0x128>)
 8003804:	2205      	movs	r2, #5
 8003806:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	Motor[5].Status = 0;
 800380a:	4b2f      	ldr	r3, [pc, #188]	; (80038c8 <Motor_Data_Init+0x128>)
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
	Motor[5].htim_x = &htim6;
 8003812:	4b2d      	ldr	r3, [pc, #180]	; (80038c8 <Motor_Data_Init+0x128>)
 8003814:	4a32      	ldr	r2, [pc, #200]	; (80038e0 <Motor_Data_Init+0x140>)
 8003816:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	//机械参数
	Motor[5].deceleration_ratio = 10;
 800381a:	4b2b      	ldr	r3, [pc, #172]	; (80038c8 <Motor_Data_Init+0x128>)
 800381c:	4a2f      	ldr	r2, [pc, #188]	; (80038dc <Motor_Data_Init+0x13c>)
 800381e:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	Motor[5].step_angle = 18;
 8003822:	4b29      	ldr	r3, [pc, #164]	; (80038c8 <Motor_Data_Init+0x128>)
 8003824:	4a2f      	ldr	r2, [pc, #188]	; (80038e4 <Motor_Data_Init+0x144>)
 8003826:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	Motor[5].mircro_steps = 1;
 800382a:	4b27      	ldr	r3, [pc, #156]	; (80038c8 <Motor_Data_Init+0x128>)
 800382c:	2201      	movs	r2, #1
 800382e:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	Motor[5].MaxSpeedInRads= 255;
 8003832:	4b25      	ldr	r3, [pc, #148]	; (80038c8 <Motor_Data_Init+0x128>)
 8003834:	4a2c      	ldr	r2, [pc, #176]	; (80038e8 <Motor_Data_Init+0x148>)
 8003836:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	//设定默认速度参数，以下为实测优化后结果，可以通过参数控制模式修改
	Motor[5].StartupSpeedInRads = 1;
 800383a:	4b23      	ldr	r3, [pc, #140]	; (80038c8 <Motor_Data_Init+0x128>)
 800383c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003840:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	Motor[5].DesiredSpeedInRads = 10;
 8003844:	4b20      	ldr	r3, [pc, #128]	; (80038c8 <Motor_Data_Init+0x128>)
 8003846:	4a25      	ldr	r2, [pc, #148]	; (80038dc <Motor_Data_Init+0x13c>)
 8003848:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
	Motor[5].accelerationRate = 10000;
 800384c:	4b1e      	ldr	r3, [pc, #120]	; (80038c8 <Motor_Data_Init+0x128>)
 800384e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003852:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	Motor[5].decelerationRate = 10000;
 8003856:	4b1c      	ldr	r3, [pc, #112]	; (80038c8 <Motor_Data_Init+0x128>)
 8003858:	f242 7210 	movw	r2, #10000	; 0x2710
 800385c:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc

/*  Motor6 : 微流控5V小电机-旋转电机，垂直上下运动  理想速度：20rads/s 导程0.5mm/rad 行进速度:10mm/s */
	Motor[6].MotorNumber = 6;
 8003860:	4b19      	ldr	r3, [pc, #100]	; (80038c8 <Motor_Data_Init+0x128>)
 8003862:	2206      	movs	r2, #6
 8003864:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
	Motor[6].Status = 0;
 8003868:	4b17      	ldr	r3, [pc, #92]	; (80038c8 <Motor_Data_Init+0x128>)
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
	Motor[6].htim_x = &htim7;
 8003870:	4b15      	ldr	r3, [pc, #84]	; (80038c8 <Motor_Data_Init+0x128>)
 8003872:	4a1e      	ldr	r2, [pc, #120]	; (80038ec <Motor_Data_Init+0x14c>)
 8003874:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
	//机械参数
	Motor[6].deceleration_ratio = 1;
 8003878:	4b13      	ldr	r3, [pc, #76]	; (80038c8 <Motor_Data_Init+0x128>)
 800387a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800387e:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	Motor[6].step_angle = 18;
 8003882:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <Motor_Data_Init+0x128>)
 8003884:	4a17      	ldr	r2, [pc, #92]	; (80038e4 <Motor_Data_Init+0x144>)
 8003886:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	Motor[6].mircro_steps = 8;
 800388a:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <Motor_Data_Init+0x128>)
 800388c:	2208      	movs	r2, #8
 800388e:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	Motor[6].MaxSpeedInRads= 255;
 8003892:	4b0d      	ldr	r3, [pc, #52]	; (80038c8 <Motor_Data_Init+0x128>)
 8003894:	4a14      	ldr	r2, [pc, #80]	; (80038e8 <Motor_Data_Init+0x148>)
 8003896:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
	//设定默认速度参数，以下为实测优化后结果，可以通过参数控制模式修改
	Motor[6].StartupSpeedInRads = 5;
 800389a:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <Motor_Data_Init+0x128>)
 800389c:	4a0e      	ldr	r2, [pc, #56]	; (80038d8 <Motor_Data_Init+0x138>)
 800389e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	Motor[6].DesiredSpeedInRads = 20;
 80038a2:	4b09      	ldr	r3, [pc, #36]	; (80038c8 <Motor_Data_Init+0x128>)
 80038a4:	4a12      	ldr	r2, [pc, #72]	; (80038f0 <Motor_Data_Init+0x150>)
 80038a6:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
	Motor[6].accelerationRate = 10000;
 80038aa:	4b07      	ldr	r3, [pc, #28]	; (80038c8 <Motor_Data_Init+0x128>)
 80038ac:	f242 7210 	movw	r2, #10000	; 0x2710
 80038b0:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	Motor[6].decelerationRate = 10000;
 80038b4:	4b04      	ldr	r3, [pc, #16]	; (80038c8 <Motor_Data_Init+0x128>)
 80038b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80038ba:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
#endif
}
 80038be:	bf00      	nop
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	20000a24 	.word	0x20000a24
 80038cc:	20000860 	.word	0x20000860
 80038d0:	3fe66666 	.word	0x3fe66666
 80038d4:	41500000 	.word	0x41500000
 80038d8:	40a00000 	.word	0x40a00000
 80038dc:	41200000 	.word	0x41200000
 80038e0:	20000668 	.word	0x20000668
 80038e4:	41900000 	.word	0x41900000
 80038e8:	437f0000 	.word	0x437f0000
 80038ec:	200006b0 	.word	0x200006b0
 80038f0:	41a00000 	.word	0x41a00000

080038f4 <Motor5_AB>:



void Motor5_AB(void) // 电机5状态1
{VM5_IN1_H();	VM5_IN2_L();	VM5_IN3_H()	;	VM5_IN4_L();}
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	2201      	movs	r2, #1
 80038fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038fe:	480b      	ldr	r0, [pc, #44]	; (800392c <Motor5_AB+0x38>)
 8003900:	f004 f94e 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003904:	2200      	movs	r2, #0
 8003906:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800390a:	4808      	ldr	r0, [pc, #32]	; (800392c <Motor5_AB+0x38>)
 800390c:	f004 f948 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003910:	2201      	movs	r2, #1
 8003912:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003916:	4805      	ldr	r0, [pc, #20]	; (800392c <Motor5_AB+0x38>)
 8003918:	f004 f942 	bl	8007ba0 <HAL_GPIO_WritePin>
 800391c:	2200      	movs	r2, #0
 800391e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003922:	4802      	ldr	r0, [pc, #8]	; (800392c <Motor5_AB+0x38>)
 8003924:	f004 f93c 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003928:	bf00      	nop
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40020400 	.word	0x40020400

08003930 <Motor5_aB>:
void Motor5_aB(void) // 电机5状态2
{VM5_IN1_L();	VM5_IN2_H();	VM5_IN3_H()	;	VM5_IN4_L();}
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
 8003934:	2200      	movs	r2, #0
 8003936:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800393a:	480b      	ldr	r0, [pc, #44]	; (8003968 <Motor5_aB+0x38>)
 800393c:	f004 f930 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003940:	2201      	movs	r2, #1
 8003942:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003946:	4808      	ldr	r0, [pc, #32]	; (8003968 <Motor5_aB+0x38>)
 8003948:	f004 f92a 	bl	8007ba0 <HAL_GPIO_WritePin>
 800394c:	2201      	movs	r2, #1
 800394e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003952:	4805      	ldr	r0, [pc, #20]	; (8003968 <Motor5_aB+0x38>)
 8003954:	f004 f924 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003958:	2200      	movs	r2, #0
 800395a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800395e:	4802      	ldr	r0, [pc, #8]	; (8003968 <Motor5_aB+0x38>)
 8003960:	f004 f91e 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003964:	bf00      	nop
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40020400 	.word	0x40020400

0800396c <Motor5_ab>:
void Motor5_ab(void) // 电机5状态3
{VM5_IN1_L();	VM5_IN2_H();	VM5_IN3_L()	;	VM5_IN4_H();}
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
 8003970:	2200      	movs	r2, #0
 8003972:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003976:	480b      	ldr	r0, [pc, #44]	; (80039a4 <Motor5_ab+0x38>)
 8003978:	f004 f912 	bl	8007ba0 <HAL_GPIO_WritePin>
 800397c:	2201      	movs	r2, #1
 800397e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003982:	4808      	ldr	r0, [pc, #32]	; (80039a4 <Motor5_ab+0x38>)
 8003984:	f004 f90c 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003988:	2200      	movs	r2, #0
 800398a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800398e:	4805      	ldr	r0, [pc, #20]	; (80039a4 <Motor5_ab+0x38>)
 8003990:	f004 f906 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003994:	2201      	movs	r2, #1
 8003996:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800399a:	4802      	ldr	r0, [pc, #8]	; (80039a4 <Motor5_ab+0x38>)
 800399c:	f004 f900 	bl	8007ba0 <HAL_GPIO_WritePin>
 80039a0:	bf00      	nop
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40020400 	.word	0x40020400

080039a8 <Motor5_Ab>:
void Motor5_Ab(void) // 电机5状态4
{VM5_IN1_H();	VM5_IN2_L();	VM5_IN3_L()	;	VM5_IN4_H();}
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	2201      	movs	r2, #1
 80039ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039b2:	480b      	ldr	r0, [pc, #44]	; (80039e0 <Motor5_Ab+0x38>)
 80039b4:	f004 f8f4 	bl	8007ba0 <HAL_GPIO_WritePin>
 80039b8:	2200      	movs	r2, #0
 80039ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039be:	4808      	ldr	r0, [pc, #32]	; (80039e0 <Motor5_Ab+0x38>)
 80039c0:	f004 f8ee 	bl	8007ba0 <HAL_GPIO_WritePin>
 80039c4:	2200      	movs	r2, #0
 80039c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80039ca:	4805      	ldr	r0, [pc, #20]	; (80039e0 <Motor5_Ab+0x38>)
 80039cc:	f004 f8e8 	bl	8007ba0 <HAL_GPIO_WritePin>
 80039d0:	2201      	movs	r2, #1
 80039d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039d6:	4802      	ldr	r0, [pc, #8]	; (80039e0 <Motor5_Ab+0x38>)
 80039d8:	f004 f8e2 	bl	8007ba0 <HAL_GPIO_WritePin>
 80039dc:	bf00      	nop
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40020400 	.word	0x40020400

080039e4 <Motor5_Release>:
void Motor5_Release(void) // 电机5释放锁定
{VM5_IN1_L();	VM5_IN2_L();	VM5_IN3_L()	;	VM5_IN4_L();}
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	2200      	movs	r2, #0
 80039ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039ee:	480b      	ldr	r0, [pc, #44]	; (8003a1c <Motor5_Release+0x38>)
 80039f0:	f004 f8d6 	bl	8007ba0 <HAL_GPIO_WritePin>
 80039f4:	2200      	movs	r2, #0
 80039f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039fa:	4808      	ldr	r0, [pc, #32]	; (8003a1c <Motor5_Release+0x38>)
 80039fc:	f004 f8d0 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003a00:	2200      	movs	r2, #0
 8003a02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a06:	4805      	ldr	r0, [pc, #20]	; (8003a1c <Motor5_Release+0x38>)
 8003a08:	f004 f8ca 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a12:	4802      	ldr	r0, [pc, #8]	; (8003a1c <Motor5_Release+0x38>)
 8003a14:	f004 f8c4 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003a18:	bf00      	nop
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40020400 	.word	0x40020400

08003a20 <Motor6_A>:
void Motor6_ab(void) // 电机6状态3
{VM6_IN1_L();	VM6_IN2_H();	VM6_IN3_L()	;	VM6_IN4_H();}
void Motor6_Ab(void) // 电机6状态4
{VM6_IN1_H();	VM6_IN2_L();	VM6_IN3_L()	;	VM6_IN4_H();}
void Motor6_A(void)
{VM6_IN1_H();	VM6_IN2_L();}
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	2201      	movs	r2, #1
 8003a26:	2120      	movs	r1, #32
 8003a28:	4804      	ldr	r0, [pc, #16]	; (8003a3c <Motor6_A+0x1c>)
 8003a2a:	f004 f8b9 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2140      	movs	r1, #64	; 0x40
 8003a32:	4802      	ldr	r0, [pc, #8]	; (8003a3c <Motor6_A+0x1c>)
 8003a34:	f004 f8b4 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003a38:	bf00      	nop
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40021000 	.word	0x40021000

08003a40 <Motor6_a>:
void Motor6_a(void)
{VM6_IN1_L();	VM6_IN2_H();}
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	2200      	movs	r2, #0
 8003a46:	2120      	movs	r1, #32
 8003a48:	4804      	ldr	r0, [pc, #16]	; (8003a5c <Motor6_a+0x1c>)
 8003a4a:	f004 f8a9 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003a4e:	2201      	movs	r2, #1
 8003a50:	2140      	movs	r1, #64	; 0x40
 8003a52:	4802      	ldr	r0, [pc, #8]	; (8003a5c <Motor6_a+0x1c>)
 8003a54:	f004 f8a4 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003a58:	bf00      	nop
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40021000 	.word	0x40021000

08003a60 <Motor6_B>:
void Motor6_B(void)
{VM6_IN3_H();	VM6_IN4_L();}
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	2201      	movs	r2, #1
 8003a66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a6a:	4805      	ldr	r0, [pc, #20]	; (8003a80 <Motor6_B+0x20>)
 8003a6c:	f004 f898 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003a70:	2200      	movs	r2, #0
 8003a72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a76:	4802      	ldr	r0, [pc, #8]	; (8003a80 <Motor6_B+0x20>)
 8003a78:	f004 f892 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003a7c:	bf00      	nop
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40020800 	.word	0x40020800

08003a84 <Motor6_b>:
void Motor6_b(void)
{VM6_IN3_L();	VM6_IN4_H();}
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a8e:	4805      	ldr	r0, [pc, #20]	; (8003aa4 <Motor6_b+0x20>)
 8003a90:	f004 f886 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003a94:	2201      	movs	r2, #1
 8003a96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a9a:	4802      	ldr	r0, [pc, #8]	; (8003aa4 <Motor6_b+0x20>)
 8003a9c:	f004 f880 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003aa0:	bf00      	nop
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40020800 	.word	0x40020800

08003aa8 <Motor6_A_release>:
void Motor6_A_release(void)
{VM6_IN1_L();	VM6_IN2_L();}
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	2200      	movs	r2, #0
 8003aae:	2120      	movs	r1, #32
 8003ab0:	4804      	ldr	r0, [pc, #16]	; (8003ac4 <Motor6_A_release+0x1c>)
 8003ab2:	f004 f875 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2140      	movs	r1, #64	; 0x40
 8003aba:	4802      	ldr	r0, [pc, #8]	; (8003ac4 <Motor6_A_release+0x1c>)
 8003abc:	f004 f870 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003ac0:	bf00      	nop
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40021000 	.word	0x40021000

08003ac8 <Motor6_B_release>:
void Motor6_B_release(void)
{VM6_IN3_L();	VM6_IN4_L();}
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	2200      	movs	r2, #0
 8003ace:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ad2:	4805      	ldr	r0, [pc, #20]	; (8003ae8 <Motor6_B_release+0x20>)
 8003ad4:	f004 f864 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ade:	4802      	ldr	r0, [pc, #8]	; (8003ae8 <Motor6_B_release+0x20>)
 8003ae0:	f004 f85e 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003ae4:	bf00      	nop
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40020800 	.word	0x40020800

08003aec <Motor6_Release>:
void Motor6_Release(void) // 电机6释放锁定
{VM6_IN1_L();	VM6_IN2_L();	VM6_IN3_L()	;	VM6_IN4_L();}
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	2200      	movs	r2, #0
 8003af2:	2120      	movs	r1, #32
 8003af4:	480a      	ldr	r0, [pc, #40]	; (8003b20 <Motor6_Release+0x34>)
 8003af6:	f004 f853 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003afa:	2200      	movs	r2, #0
 8003afc:	2140      	movs	r1, #64	; 0x40
 8003afe:	4808      	ldr	r0, [pc, #32]	; (8003b20 <Motor6_Release+0x34>)
 8003b00:	f004 f84e 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003b04:	2200      	movs	r2, #0
 8003b06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b0a:	4806      	ldr	r0, [pc, #24]	; (8003b24 <Motor6_Release+0x38>)
 8003b0c:	f004 f848 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003b10:	2200      	movs	r2, #0
 8003b12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b16:	4803      	ldr	r0, [pc, #12]	; (8003b24 <Motor6_Release+0x38>)
 8003b18:	f004 f842 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003b1c:	bf00      	nop
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40020800 	.word	0x40020800

08003b28 <ALL_Motors_Disable>:
	printf("DecelerationTimeTMR:%ld\r\n",a->DecelerationTimeTMR);
	printf("********************\r\n");
}

void ALL_Motors_Disable(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
	Motor1_Disable();	Motor2_Disable();	Motor3_Disable();	Motor4_Disable();
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	2110      	movs	r1, #16
 8003b30:	4857      	ldr	r0, [pc, #348]	; (8003c90 <ALL_Motors_Disable+0x168>)
 8003b32:	f004 f835 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003b36:	2201      	movs	r2, #1
 8003b38:	2180      	movs	r1, #128	; 0x80
 8003b3a:	4855      	ldr	r0, [pc, #340]	; (8003c90 <ALL_Motors_Disable+0x168>)
 8003b3c:	f004 f830 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003b40:	2201      	movs	r2, #1
 8003b42:	2101      	movs	r1, #1
 8003b44:	4853      	ldr	r0, [pc, #332]	; (8003c94 <ALL_Motors_Disable+0x16c>)
 8003b46:	f004 f82b 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	2108      	movs	r1, #8
 8003b4e:	4851      	ldr	r0, [pc, #324]	; (8003c94 <ALL_Motors_Disable+0x16c>)
 8003b50:	f004 f826 	bl	8007ba0 <HAL_GPIO_WritePin>
	VM5_Disable_A();	VM5_Disable_B();	VM6_Disable_A();	VM6_Disable_B();
 8003b54:	2200      	movs	r2, #0
 8003b56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b5a:	484e      	ldr	r0, [pc, #312]	; (8003c94 <ALL_Motors_Disable+0x16c>)
 8003b5c:	f004 f820 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003b60:	2200      	movs	r2, #0
 8003b62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b66:	484b      	ldr	r0, [pc, #300]	; (8003c94 <ALL_Motors_Disable+0x16c>)
 8003b68:	f004 f81a 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	2180      	movs	r1, #128	; 0x80
 8003b70:	4848      	ldr	r0, [pc, #288]	; (8003c94 <ALL_Motors_Disable+0x16c>)
 8003b72:	f004 f815 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003b76:	2200      	movs	r2, #0
 8003b78:	2102      	movs	r1, #2
 8003b7a:	4847      	ldr	r0, [pc, #284]	; (8003c98 <ALL_Motors_Disable+0x170>)
 8003b7c:	f004 f810 	bl	8007ba0 <HAL_GPIO_WritePin>
	VM7_Disable_A();	VM7_Disable_B();	VM8_Disable_A();	VM8_Disable_B();
 8003b80:	2200      	movs	r2, #0
 8003b82:	2101      	movs	r1, #1
 8003b84:	4844      	ldr	r0, [pc, #272]	; (8003c98 <ALL_Motors_Disable+0x170>)
 8003b86:	f004 f80b 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b90:	4842      	ldr	r0, [pc, #264]	; (8003c9c <ALL_Motors_Disable+0x174>)
 8003b92:	f004 f805 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003b96:	2200      	movs	r2, #0
 8003b98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b9c:	483f      	ldr	r0, [pc, #252]	; (8003c9c <ALL_Motors_Disable+0x174>)
 8003b9e:	f003 ffff 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ba8:	483c      	ldr	r0, [pc, #240]	; (8003c9c <ALL_Motors_Disable+0x174>)
 8003baa:	f003 fff9 	bl	8007ba0 <HAL_GPIO_WritePin>
	Motorpluse1_Low();	Motorpluse2_Low();	Motorpluse3_Low();	Motorpluse4_Low();
 8003bae:	2200      	movs	r2, #0
 8003bb0:	2108      	movs	r1, #8
 8003bb2:	4837      	ldr	r0, [pc, #220]	; (8003c90 <ALL_Motors_Disable+0x168>)
 8003bb4:	f003 fff4 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003bb8:	2200      	movs	r2, #0
 8003bba:	2140      	movs	r1, #64	; 0x40
 8003bbc:	4834      	ldr	r0, [pc, #208]	; (8003c90 <ALL_Motors_Disable+0x168>)
 8003bbe:	f003 ffef 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003bc8:	4831      	ldr	r0, [pc, #196]	; (8003c90 <ALL_Motors_Disable+0x168>)
 8003bca:	f003 ffe9 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2104      	movs	r1, #4
 8003bd2:	4830      	ldr	r0, [pc, #192]	; (8003c94 <ALL_Motors_Disable+0x16c>)
 8003bd4:	f003 ffe4 	bl	8007ba0 <HAL_GPIO_WritePin>
	VM5_IN1_L();	VM5_IN2_L();	VM5_IN3_L();	VM5_IN4_L();
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bde:	482c      	ldr	r0, [pc, #176]	; (8003c90 <ALL_Motors_Disable+0x168>)
 8003be0:	f003 ffde 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003be4:	2200      	movs	r2, #0
 8003be6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bea:	4829      	ldr	r0, [pc, #164]	; (8003c90 <ALL_Motors_Disable+0x168>)
 8003bec:	f003 ffd8 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003bf6:	4826      	ldr	r0, [pc, #152]	; (8003c90 <ALL_Motors_Disable+0x168>)
 8003bf8:	f003 ffd2 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c02:	4823      	ldr	r0, [pc, #140]	; (8003c90 <ALL_Motors_Disable+0x168>)
 8003c04:	f003 ffcc 	bl	8007ba0 <HAL_GPIO_WritePin>
	VM6_IN1_L();	VM6_IN2_L();	VM6_IN3_L();	VM6_IN4_L();
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2120      	movs	r1, #32
 8003c0c:	4821      	ldr	r0, [pc, #132]	; (8003c94 <ALL_Motors_Disable+0x16c>)
 8003c0e:	f003 ffc7 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003c12:	2200      	movs	r2, #0
 8003c14:	2140      	movs	r1, #64	; 0x40
 8003c16:	481f      	ldr	r0, [pc, #124]	; (8003c94 <ALL_Motors_Disable+0x16c>)
 8003c18:	f003 ffc2 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c22:	481f      	ldr	r0, [pc, #124]	; (8003ca0 <ALL_Motors_Disable+0x178>)
 8003c24:	f003 ffbc 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c2e:	481c      	ldr	r0, [pc, #112]	; (8003ca0 <ALL_Motors_Disable+0x178>)
 8003c30:	f003 ffb6 	bl	8007ba0 <HAL_GPIO_WritePin>
	VM7_IN1_L();	VM7_IN2_L();	VM7_IN3_L();	VM7_IN4_L();
 8003c34:	2200      	movs	r2, #0
 8003c36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c3a:	4815      	ldr	r0, [pc, #84]	; (8003c90 <ALL_Motors_Disable+0x168>)
 8003c3c:	f003 ffb0 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003c40:	2200      	movs	r2, #0
 8003c42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c46:	4812      	ldr	r0, [pc, #72]	; (8003c90 <ALL_Motors_Disable+0x168>)
 8003c48:	f003 ffaa 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	2101      	movs	r1, #1
 8003c50:	480f      	ldr	r0, [pc, #60]	; (8003c90 <ALL_Motors_Disable+0x168>)
 8003c52:	f003 ffa5 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003c56:	2200      	movs	r2, #0
 8003c58:	2102      	movs	r1, #2
 8003c5a:	480d      	ldr	r0, [pc, #52]	; (8003c90 <ALL_Motors_Disable+0x168>)
 8003c5c:	f003 ffa0 	bl	8007ba0 <HAL_GPIO_WritePin>
	VM8_IN1_L();	VM8_IN2_L();	VM8_IN3_L();	VM8_IN4_L();
 8003c60:	2200      	movs	r2, #0
 8003c62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c66:	480f      	ldr	r0, [pc, #60]	; (8003ca4 <ALL_Motors_Disable+0x17c>)
 8003c68:	f003 ff9a 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c72:	480c      	ldr	r0, [pc, #48]	; (8003ca4 <ALL_Motors_Disable+0x17c>)
 8003c74:	f003 ff94 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003c78:	2200      	movs	r2, #0
 8003c7a:	2104      	movs	r1, #4
 8003c7c:	480a      	ldr	r0, [pc, #40]	; (8003ca8 <ALL_Motors_Disable+0x180>)
 8003c7e:	f003 ff8f 	bl	8007ba0 <HAL_GPIO_WritePin>
 8003c82:	2200      	movs	r2, #0
 8003c84:	2108      	movs	r1, #8
 8003c86:	4808      	ldr	r0, [pc, #32]	; (8003ca8 <ALL_Motors_Disable+0x180>)
 8003c88:	f003 ff8a 	bl	8007ba0 <HAL_GPIO_WritePin>
}
 8003c8c:	bf00      	nop
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40020400 	.word	0x40020400
 8003c94:	40021000 	.word	0x40021000
 8003c98:	40021800 	.word	0x40021800
 8003c9c:	40021400 	.word	0x40021400
 8003ca0:	40020800 	.word	0x40020800
 8003ca4:	40020c00 	.word	0x40020c00
 8003ca8:	40020000 	.word	0x40020000

08003cac <AccelDecelTimeCompute>:
	printf("Reseting Motors Result:0x%x ...\r\n",Motor_Init_Result);
	return Motor_Init_Result;
}

uint32_t AccelDecelTimeCompute(uint32_t AccelDecelRate)  //根据输入的加减速率，计算加减速计时器的TMR
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
	uint32_t temp_AccelDecelTimeTMR;
	if(AccelDecelRate > MOTORTIM_TMR){
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a09      	ldr	r2, [pc, #36]	; (8003cdc <AccelDecelTimeCompute+0x30>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d905      	bls.n	8003cc8 <AccelDecelTimeCompute+0x1c>
		printf("[WRONG]AccelDecel Rate Oversize!\r\n"); //如果加减速超过MOTORTIM_TMR（100000Hz/s），判断过快报错
 8003cbc:	4808      	ldr	r0, [pc, #32]	; (8003ce0 <AccelDecelTimeCompute+0x34>)
 8003cbe:	f00b fbc9 	bl	800f454 <puts>
		return 10000;  // 返回一个较大的加速度增量10kHz
 8003cc2:	f242 7310 	movw	r3, #10000	; 0x2710
 8003cc6:	e005      	b.n	8003cd4 <AccelDecelTimeCompute+0x28>
	}
	temp_AccelDecelTimeTMR = MOTORTIM_TMR / AccelDecelRate ;  // 计算对应的加减速计时器TMR
 8003cc8:	4a04      	ldr	r2, [pc, #16]	; (8003cdc <AccelDecelTimeCompute+0x30>)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd0:	60fb      	str	r3, [r7, #12]
	return temp_AccelDecelTimeTMR;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	000186a0 	.word	0x000186a0
 8003ce0:	080118d0 	.word	0x080118d0

08003ce4 <AccelDecel>:

void AccelDecel(uint32_t AccelDecelState,struct MotorDefine *a)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
	switch (AccelDecelState){
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d022      	beq.n	8003d3a <AccelDecel+0x56>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d839      	bhi.n	8003d6e <AccelDecel+0x8a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d035      	beq.n	8003d6c <AccelDecel+0x88>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d000      	beq.n	8003d08 <AccelDecel+0x24>
			a->ActualSpeedInHz = a->StartupSpeedInHz;
			AccelDecelState = 0;
		}
		a->StepperSpeedTMR = MOTORTIM_TMR / a->ActualSpeedInHz;
	}
}
 8003d06:	e032      	b.n	8003d6e <AccelDecel+0x8a>
		a->ActualSpeedInHz ++ ;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	1c5a      	adds	r2, r3, #1
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	641a      	str	r2, [r3, #64]	; 0x40
		if (a->ActualSpeedInHz >= a->DesiredSpeedInHz){
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d305      	bcc.n	8003d2a <AccelDecel+0x46>
			a->ActualSpeedInHz = a->DesiredSpeedInHz;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	641a      	str	r2, [r3, #64]	; 0x40
			AccelDecelState = 0;
 8003d26:	2300      	movs	r3, #0
 8003d28:	607b      	str	r3, [r7, #4]
		a->StepperSpeedTMR = MOTORTIM_TMR / a->ActualSpeedInHz;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	4a13      	ldr	r2, [pc, #76]	; (8003d7c <AccelDecel+0x98>)
 8003d30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	649a      	str	r2, [r3, #72]	; 0x48
	break;
 8003d38:	e019      	b.n	8003d6e <AccelDecel+0x8a>
		a->ActualSpeedInHz -- ;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	1e5a      	subs	r2, r3, #1
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	641a      	str	r2, [r3, #64]	; 0x40
		if (a->ActualSpeedInHz <= a->StartupSpeedInHz){
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d805      	bhi.n	8003d5c <AccelDecel+0x78>
			a->ActualSpeedInHz = a->StartupSpeedInHz;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	641a      	str	r2, [r3, #64]	; 0x40
			AccelDecelState = 0;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	607b      	str	r3, [r7, #4]
		a->StepperSpeedTMR = MOTORTIM_TMR / a->ActualSpeedInHz;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d60:	4a06      	ldr	r2, [pc, #24]	; (8003d7c <AccelDecel+0x98>)
 8003d62:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003d6a:	e000      	b.n	8003d6e <AccelDecel+0x8a>
	break;
 8003d6c:	bf00      	nop
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	000186a0 	.word	0x000186a0

08003d80 <Motor_AccelDecel_waveCalculate>:

void Motor_AccelDecel_waveCalculate(struct MotorDefine *a)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
	uint32_t DesiredNumberofSteptoAccel ;
	uint32_t DesiredNumberofSteptoDecel ;
	float DesiredAccellTimeInSeconds ;
	float DesiredDecellTimeInSeconds ;

	a->AccelerationTimeTMR = AccelDecelTimeCompute(a->accelerationRate);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff ff8d 	bl	8003cac <AccelDecelTimeCompute>
 8003d92:	4602      	mov	r2, r0
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	659a      	str	r2, [r3, #88]	; 0x58
	a->DecelerationTimeTMR = AccelDecelTimeCompute(a->decelerationRate);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff ff85 	bl	8003cac <AccelDecelTimeCompute>
 8003da2:	4602      	mov	r2, r0
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	65da      	str	r2, [r3, #92]	; 0x5c

	DesiredAccellTimeInSeconds = ((float)a->DesiredSpeedInHz-a->StartupSpeedInHz) / a->accelerationRate;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dac:	ee07 3a90 	vmov	s15, r3
 8003db0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db8:	ee07 3a90 	vmov	s15, r3
 8003dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dc0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	ee07 3a90 	vmov	s15, r3
 8003dcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003dd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dd4:	edc7 7a05 	vstr	s15, [r7, #20]
	DesiredDecellTimeInSeconds = ((float)a->DesiredSpeedInHz-a->StartupSpeedInHz) / a->decelerationRate;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ddc:	ee07 3a90 	vmov	s15, r3
 8003de0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de8:	ee07 3a90 	vmov	s15, r3
 8003dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003df0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	ee07 3a90 	vmov	s15, r3
 8003dfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e04:	edc7 7a04 	vstr	s15, [r7, #16]
	DesiredNumberofSteptoAccel =  DesiredAccellTimeInSeconds * (a->DesiredSpeedInHz-a->StartupSpeedInHz) /2 + a->StartupSpeedInHz*DesiredAccellTimeInSeconds; //对速度曲线求积分，理论计算完成加速需要的步数
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	ee07 3a90 	vmov	s15, r3
 8003e16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e22:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003e26:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2e:	ee07 3a90 	vmov	s15, r3
 8003e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e36:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e46:	ee17 3a90 	vmov	r3, s15
 8003e4a:	60fb      	str	r3, [r7, #12]
	DesiredNumberofSteptoDecel =  DesiredDecellTimeInSeconds * (a->DesiredSpeedInHz-a->StartupSpeedInHz) /2 + a->StartupSpeedInHz*DesiredDecellTimeInSeconds ; //对速度曲线求积分，理论计算完成减速需要的步数
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	ee07 3a90 	vmov	s15, r3
 8003e5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e66:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003e6a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e72:	ee07 3a90 	vmov	s15, r3
 8003e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e8a:	ee17 3a90 	vmov	r3, s15
 8003e8e:	60bb      	str	r3, [r7, #8]

	if ( (DesiredNumberofSteptoAccel + DesiredNumberofSteptoDecel) <= a->NumberofSteps ) //如果加减速需要的步数和，小于总步数，则进行完整加减速
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	441a      	add	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d809      	bhi.n	8003eb2 <Motor_AccelDecel_waveCalculate+0x132>
	{
		a->NumberofSteps_StopAccel = a->NumberofSteps - DesiredNumberofSteptoAccel ;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1ad2      	subs	r2, r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	651a      	str	r2, [r3, #80]	; 0x50
		a->NumberofSteps_BeginDecel =  DesiredNumberofSteptoDecel ;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	655a      	str	r2, [r3, #84]	; 0x54
 8003eb0:	e010      	b.n	8003ed4 <Motor_AccelDecel_waveCalculate+0x154>
	}
	else  // 如果行进距离不能完成完整的加减速曲线，则前1/3加速，后1/3减速
	{
		a->NumberofSteps_StopAccel = a->NumberofSteps /3*2 ;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb6:	4a0d      	ldr	r2, [pc, #52]	; (8003eec <Motor_AccelDecel_waveCalculate+0x16c>)
 8003eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebc:	085b      	lsrs	r3, r3, #1
 8003ebe:	005a      	lsls	r2, r3, #1
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	651a      	str	r2, [r3, #80]	; 0x50
		a->NumberofSteps_BeginDecel = a->NumberofSteps /3 ;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec8:	4a08      	ldr	r2, [pc, #32]	; (8003eec <Motor_AccelDecel_waveCalculate+0x16c>)
 8003eca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ece:	085a      	lsrs	r2, r3, #1
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	655a      	str	r2, [r3, #84]	; 0x54
	}
	if ( a->MotorNumber == 4 ){		// 电机4柱塞泵，防止注液时挂液，取消减速使电机高速注液
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d102      	bne.n	8003ee4 <Motor_AccelDecel_waveCalculate+0x164>
		a->NumberofSteps_BeginDecel = 0 ;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	655a      	str	r2, [r3, #84]	; 0x54
	}
}
 8003ee4:	bf00      	nop
 8003ee6:	3718      	adds	r7, #24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	aaaaaaab 	.word	0xaaaaaaab

08003ef0 <MotorDirection_SetUp>:

void MotorDirection_SetUp(struct MotorDefine *a)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
	if (a->MotorNumber == 1){
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d110      	bne.n	8003f24 <MotorDirection_SetUp+0x34>
		if(a->MotorDirection == 1){
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d105      	bne.n	8003f18 <MotorDirection_SetUp+0x28>
			Motor1_Nreset_direction;
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	2120      	movs	r1, #32
 8003f10:	4828      	ldr	r0, [pc, #160]	; (8003fb4 <MotorDirection_SetUp+0xc4>)
 8003f12:	f003 fe45 	bl	8007ba0 <HAL_GPIO_WritePin>
		else{
			Motor4_reset_direction;
		}
	}

}
 8003f16:	e048      	b.n	8003faa <MotorDirection_SetUp+0xba>
			Motor1_reset_direction;
 8003f18:	2201      	movs	r2, #1
 8003f1a:	2120      	movs	r1, #32
 8003f1c:	4825      	ldr	r0, [pc, #148]	; (8003fb4 <MotorDirection_SetUp+0xc4>)
 8003f1e:	f003 fe3f 	bl	8007ba0 <HAL_GPIO_WritePin>
}
 8003f22:	e042      	b.n	8003faa <MotorDirection_SetUp+0xba>
	else if (a->MotorNumber == 2){
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d112      	bne.n	8003f54 <MotorDirection_SetUp+0x64>
		if(a->MotorDirection == 1){
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d106      	bne.n	8003f46 <MotorDirection_SetUp+0x56>
			Motor2_Nreset_direction;
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f3e:	481d      	ldr	r0, [pc, #116]	; (8003fb4 <MotorDirection_SetUp+0xc4>)
 8003f40:	f003 fe2e 	bl	8007ba0 <HAL_GPIO_WritePin>
}
 8003f44:	e031      	b.n	8003faa <MotorDirection_SetUp+0xba>
			Motor2_reset_direction;
 8003f46:	2200      	movs	r2, #0
 8003f48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f4c:	4819      	ldr	r0, [pc, #100]	; (8003fb4 <MotorDirection_SetUp+0xc4>)
 8003f4e:	f003 fe27 	bl	8007ba0 <HAL_GPIO_WritePin>
}
 8003f52:	e02a      	b.n	8003faa <MotorDirection_SetUp+0xba>
	else if (a->MotorNumber == 3){
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	d110      	bne.n	8003f80 <MotorDirection_SetUp+0x90>
		if(a->MotorDirection == 1){
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d105      	bne.n	8003f74 <MotorDirection_SetUp+0x84>
			Motor3_Nreset_direction;
 8003f68:	2200      	movs	r2, #0
 8003f6a:	2102      	movs	r1, #2
 8003f6c:	4812      	ldr	r0, [pc, #72]	; (8003fb8 <MotorDirection_SetUp+0xc8>)
 8003f6e:	f003 fe17 	bl	8007ba0 <HAL_GPIO_WritePin>
}
 8003f72:	e01a      	b.n	8003faa <MotorDirection_SetUp+0xba>
			Motor3_reset_direction;
 8003f74:	2201      	movs	r2, #1
 8003f76:	2102      	movs	r1, #2
 8003f78:	480f      	ldr	r0, [pc, #60]	; (8003fb8 <MotorDirection_SetUp+0xc8>)
 8003f7a:	f003 fe11 	bl	8007ba0 <HAL_GPIO_WritePin>
}
 8003f7e:	e014      	b.n	8003faa <MotorDirection_SetUp+0xba>
	else if (a->MotorNumber == 4){
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d10f      	bne.n	8003faa <MotorDirection_SetUp+0xba>
		if(a->MotorDirection == 1){
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d105      	bne.n	8003fa0 <MotorDirection_SetUp+0xb0>
			Motor4_Nreset_direction;
 8003f94:	2200      	movs	r2, #0
 8003f96:	2110      	movs	r1, #16
 8003f98:	4807      	ldr	r0, [pc, #28]	; (8003fb8 <MotorDirection_SetUp+0xc8>)
 8003f9a:	f003 fe01 	bl	8007ba0 <HAL_GPIO_WritePin>
}
 8003f9e:	e004      	b.n	8003faa <MotorDirection_SetUp+0xba>
			Motor4_reset_direction;
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	2110      	movs	r1, #16
 8003fa4:	4804      	ldr	r0, [pc, #16]	; (8003fb8 <MotorDirection_SetUp+0xc8>)
 8003fa6:	f003 fdfb 	bl	8007ba0 <HAL_GPIO_WritePin>
}
 8003faa:	bf00      	nop
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40020400 	.word	0x40020400
 8003fb8:	40021000 	.word	0x40021000

08003fbc <MotorMove_steps>:

/*            *****************    0x40-0b01000000 电机参数控制模式 ：  ******************
根据协议，通过USART5进行出串口通讯，输入步进电机的【编号、方向、速度、距离、启动速度、加减速频率】电机运动参数
***特别注意： 调试模式如果增加打印信息，在连续执行函数时，会造成10-20ms的延时，***/
void MotorMove_steps(struct MotorDefine *temp)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
	if (Motor[temp->MotorNumber].Status == 1){
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4a47      	ldr	r2, [pc, #284]	; (80040ec <MotorMove_steps+0x130>)
 8003fce:	460b      	mov	r3, r1
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	440b      	add	r3, r1
 8003fd4:	015b      	lsls	r3, r3, #5
 8003fd6:	4413      	add	r3, r2
 8003fd8:	3330      	adds	r3, #48	; 0x30
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d110      	bne.n	8004002 <MotorMove_steps+0x46>
		printf("[WRONG] Motor Moved Failed,Motor%d is busy!\r\n",Motor[temp->MotorNumber].MotorNumber);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	4a40      	ldr	r2, [pc, #256]	; (80040ec <MotorMove_steps+0x130>)
 8003fea:	460b      	mov	r3, r1
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	440b      	add	r3, r1
 8003ff0:	015b      	lsls	r3, r3, #5
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3320      	adds	r3, #32
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	483d      	ldr	r0, [pc, #244]	; (80040f0 <MotorMove_steps+0x134>)
 8003ffc:	f00b f9c4 	bl	800f388 <iprintf>
		return ;
 8004000:	e19c      	b.n	800433c <MotorMove_steps+0x380>
	}
	else {
		Motor[temp->MotorNumber].Status = 1 ;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004008:	4619      	mov	r1, r3
 800400a:	4a38      	ldr	r2, [pc, #224]	; (80040ec <MotorMove_steps+0x130>)
 800400c:	460b      	mov	r3, r1
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	440b      	add	r3, r1
 8004012:	015b      	lsls	r3, r3, #5
 8004014:	4413      	add	r3, r2
 8004016:	3330      	adds	r3, #48	; 0x30
 8004018:	2201      	movs	r2, #1
 800401a:	701a      	strb	r2, [r3, #0]
	}

	temp->deceleration_ratio = Motor[temp->MotorNumber].deceleration_ratio ;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004022:	4619      	mov	r1, r3
 8004024:	4a31      	ldr	r2, [pc, #196]	; (80040ec <MotorMove_steps+0x130>)
 8004026:	460b      	mov	r3, r1
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	440b      	add	r3, r1
 800402c:	015b      	lsls	r3, r3, #5
 800402e:	4413      	add	r3, r2
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	601a      	str	r2, [r3, #0]
	temp->step_angle = Motor[temp->MotorNumber].step_angle ;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 3020 	ldrb.w	r3, [r3, #32]
 800403c:	4619      	mov	r1, r3
 800403e:	4a2b      	ldr	r2, [pc, #172]	; (80040ec <MotorMove_steps+0x130>)
 8004040:	460b      	mov	r3, r1
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	440b      	add	r3, r1
 8004046:	015b      	lsls	r3, r3, #5
 8004048:	4413      	add	r3, r2
 800404a:	3304      	adds	r3, #4
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	605a      	str	r2, [r3, #4]
	temp->mircro_steps = Motor[temp->MotorNumber].mircro_steps ;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004058:	4619      	mov	r1, r3
 800405a:	4a24      	ldr	r2, [pc, #144]	; (80040ec <MotorMove_steps+0x130>)
 800405c:	460b      	mov	r3, r1
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	440b      	add	r3, r1
 8004062:	015b      	lsls	r3, r3, #5
 8004064:	4413      	add	r3, r2
 8004066:	3308      	adds	r3, #8
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	609a      	str	r2, [r3, #8]
	temp->MaxSpeedInRads = Motor[temp->MotorNumber].MaxSpeedInRads ;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004074:	4619      	mov	r1, r3
 8004076:	4a1d      	ldr	r2, [pc, #116]	; (80040ec <MotorMove_steps+0x130>)
 8004078:	460b      	mov	r3, r1
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	440b      	add	r3, r1
 800407e:	015b      	lsls	r3, r3, #5
 8004080:	4413      	add	r3, r2
 8004082:	330c      	adds	r3, #12
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	60da      	str	r2, [r3, #12]
	temp->htim_x = Motor[temp->MotorNumber].htim_x ;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004090:	4619      	mov	r1, r3
 8004092:	4a16      	ldr	r2, [pc, #88]	; (80040ec <MotorMove_steps+0x130>)
 8004094:	460b      	mov	r3, r1
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	440b      	add	r3, r1
 800409a:	015b      	lsls	r3, r3, #5
 800409c:	4413      	add	r3, r2
 800409e:	3334      	adds	r3, #52	; 0x34
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	635a      	str	r2, [r3, #52]	; 0x34

	if(temp->DesiredSpeedInRads > temp->MaxSpeedInRads)  // 判断电机设置速度是否超过最大转速
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	ed93 7a05 	vldr	s14, [r3, #20]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80040b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ba:	dd1f      	ble.n	80040fc <MotorMove_steps+0x140>
	{
		printf("[WRONG] Setup Speed faster than max speed:%.2f rad/s !\r\n",temp->MaxSpeedInRads);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7fc fa41 	bl	8000548 <__aeabi_f2d>
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	480a      	ldr	r0, [pc, #40]	; (80040f4 <MotorMove_steps+0x138>)
 80040cc:	f00b f95c 	bl	800f388 <iprintf>
		Motor[temp->MotorNumber].Status = 0 ;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040d6:	4619      	mov	r1, r3
 80040d8:	4a04      	ldr	r2, [pc, #16]	; (80040ec <MotorMove_steps+0x130>)
 80040da:	460b      	mov	r3, r1
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	440b      	add	r3, r1
 80040e0:	015b      	lsls	r3, r3, #5
 80040e2:	4413      	add	r3, r2
 80040e4:	3330      	adds	r3, #48	; 0x30
 80040e6:	2200      	movs	r2, #0
 80040e8:	701a      	strb	r2, [r3, #0]
		return ;
 80040ea:	e127      	b.n	800433c <MotorMove_steps+0x380>
 80040ec:	20000a24 	.word	0x20000a24
 80040f0:	080118f4 	.word	0x080118f4
 80040f4:	08011924 	.word	0x08011924
 80040f8:	43b40000 	.word	0x43b40000
	}

	// 计算： 单圈步数、启动速度、目标速度、行进步数、加减速时间
	temp->StepsInOneCircle = (360 / temp->step_angle) * temp->deceleration_ratio * temp->mircro_steps;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8004102:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80040f8 <MotorMove_steps+0x13c>
 8004106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	edd3 7a00 	vldr	s15, [r3]
 8004110:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	ee07 3a90 	vmov	s15, r3
 800411c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004124:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004128:	ee17 2a90 	vmov	r2, s15
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	639a      	str	r2, [r3, #56]	; 0x38
	temp->StartupSpeedInHz = temp->StepsInOneCircle * temp->StartupSpeedInRads ;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004134:	ee07 3a90 	vmov	s15, r3
 8004138:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800414a:	ee17 2a90 	vmov	r2, s15
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	63da      	str	r2, [r3, #60]	; 0x3c
	temp->ActualSpeedInHz = temp->StartupSpeedInHz;						// 设定初始实际频率为启动频率
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	641a      	str	r2, [r3, #64]	; 0x40
	temp->DesiredSpeedInHz = temp->StepsInOneCircle * temp->DesiredSpeedInRads ;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415e:	ee07 3a90 	vmov	s15, r3
 8004162:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	edd3 7a05 	vldr	s15, [r3, #20]
 800416c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004174:	ee17 2a90 	vmov	r2, s15
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	645a      	str	r2, [r3, #68]	; 0x44
	temp->StepperSpeedTMR = MOTORTIM_TMR / temp->ActualSpeedInHz;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004180:	4a70      	ldr	r2, [pc, #448]	; (8004344 <MotorMove_steps+0x388>)
 8004182:	fbb2 f2f3 	udiv	r2, r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	649a      	str	r2, [r3, #72]	; 0x48
	temp->NumberofSteps = temp->NumberofRads * temp->StepsInOneCircle ;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004194:	ee07 3a90 	vmov	s15, r3
 8004198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041a4:	ee17 2a90 	vmov	r2, s15
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	64da      	str	r2, [r3, #76]	; 0x4c

	Motor_AccelDecel_waveCalculate(temp);  // 计算电机加减速曲线
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff fde7 	bl	8003d80 <Motor_AccelDecel_waveCalculate>

	Motor[temp->MotorNumber].StepsInOneCircle = temp->StepsInOneCircle ;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041b8:	4618      	mov	r0, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041be:	4962      	ldr	r1, [pc, #392]	; (8004348 <MotorMove_steps+0x38c>)
 80041c0:	4603      	mov	r3, r0
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	4403      	add	r3, r0
 80041c6:	015b      	lsls	r3, r3, #5
 80041c8:	440b      	add	r3, r1
 80041ca:	3338      	adds	r3, #56	; 0x38
 80041cc:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].StartupSpeedInHz = temp->StartupSpeedInHz ;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041d4:	4618      	mov	r0, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041da:	495b      	ldr	r1, [pc, #364]	; (8004348 <MotorMove_steps+0x38c>)
 80041dc:	4603      	mov	r3, r0
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	4403      	add	r3, r0
 80041e2:	015b      	lsls	r3, r3, #5
 80041e4:	440b      	add	r3, r1
 80041e6:	333c      	adds	r3, #60	; 0x3c
 80041e8:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].ActualSpeedInHz = temp->ActualSpeedInHz ;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041f0:	4618      	mov	r0, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041f6:	4954      	ldr	r1, [pc, #336]	; (8004348 <MotorMove_steps+0x38c>)
 80041f8:	4603      	mov	r3, r0
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	4403      	add	r3, r0
 80041fe:	015b      	lsls	r3, r3, #5
 8004200:	440b      	add	r3, r1
 8004202:	3340      	adds	r3, #64	; 0x40
 8004204:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].DesiredSpeedInHz = temp->DesiredSpeedInHz ;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 3020 	ldrb.w	r3, [r3, #32]
 800420c:	4618      	mov	r0, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004212:	494d      	ldr	r1, [pc, #308]	; (8004348 <MotorMove_steps+0x38c>)
 8004214:	4603      	mov	r3, r0
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	4403      	add	r3, r0
 800421a:	015b      	lsls	r3, r3, #5
 800421c:	440b      	add	r3, r1
 800421e:	3344      	adds	r3, #68	; 0x44
 8004220:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].StepperSpeedTMR = temp->StepperSpeedTMR ;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004228:	4618      	mov	r0, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800422e:	4946      	ldr	r1, [pc, #280]	; (8004348 <MotorMove_steps+0x38c>)
 8004230:	4603      	mov	r3, r0
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	4403      	add	r3, r0
 8004236:	015b      	lsls	r3, r3, #5
 8004238:	440b      	add	r3, r1
 800423a:	3348      	adds	r3, #72	; 0x48
 800423c:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].NumberofSteps = temp->NumberofSteps ;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004244:	4618      	mov	r0, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800424a:	493f      	ldr	r1, [pc, #252]	; (8004348 <MotorMove_steps+0x38c>)
 800424c:	4603      	mov	r3, r0
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	4403      	add	r3, r0
 8004252:	015b      	lsls	r3, r3, #5
 8004254:	440b      	add	r3, r1
 8004256:	334c      	adds	r3, #76	; 0x4c
 8004258:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].MotorDirection = temp->MotorDirection ;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004260:	4619      	mov	r1, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
 8004268:	4a37      	ldr	r2, [pc, #220]	; (8004348 <MotorMove_steps+0x38c>)
 800426a:	460b      	mov	r3, r1
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	440b      	add	r3, r1
 8004270:	015b      	lsls	r3, r3, #5
 8004272:	4413      	add	r3, r2
 8004274:	3321      	adds	r3, #33	; 0x21
 8004276:	4602      	mov	r2, r0
 8004278:	701a      	strb	r2, [r3, #0]
	Motor[temp->MotorNumber].NumberofSteps_StopAccel = temp->NumberofSteps_StopAccel ;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004280:	4618      	mov	r0, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004286:	4930      	ldr	r1, [pc, #192]	; (8004348 <MotorMove_steps+0x38c>)
 8004288:	4603      	mov	r3, r0
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	4403      	add	r3, r0
 800428e:	015b      	lsls	r3, r3, #5
 8004290:	440b      	add	r3, r1
 8004292:	3350      	adds	r3, #80	; 0x50
 8004294:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].NumberofSteps_BeginDecel = temp->NumberofSteps_BeginDecel ;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 3020 	ldrb.w	r3, [r3, #32]
 800429c:	4618      	mov	r0, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042a2:	4929      	ldr	r1, [pc, #164]	; (8004348 <MotorMove_steps+0x38c>)
 80042a4:	4603      	mov	r3, r0
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	4403      	add	r3, r0
 80042aa:	015b      	lsls	r3, r3, #5
 80042ac:	440b      	add	r3, r1
 80042ae:	3354      	adds	r3, #84	; 0x54
 80042b0:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].AccelerationTimeTMR = temp->AccelerationTimeTMR ;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042b8:	4618      	mov	r0, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80042be:	4922      	ldr	r1, [pc, #136]	; (8004348 <MotorMove_steps+0x38c>)
 80042c0:	4603      	mov	r3, r0
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	4403      	add	r3, r0
 80042c6:	015b      	lsls	r3, r3, #5
 80042c8:	440b      	add	r3, r1
 80042ca:	3358      	adds	r3, #88	; 0x58
 80042cc:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].DecelerationTimeTMR = temp->DecelerationTimeTMR ;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042d4:	4618      	mov	r0, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042da:	491b      	ldr	r1, [pc, #108]	; (8004348 <MotorMove_steps+0x38c>)
 80042dc:	4603      	mov	r3, r0
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	4403      	add	r3, r0
 80042e2:	015b      	lsls	r3, r3, #5
 80042e4:	440b      	add	r3, r1
 80042e6:	335c      	adds	r3, #92	; 0x5c
 80042e8:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].TargetPosition = -16777200 ; //暂时设置目标位置为无法达到的值，参数控制模式用步进数控制中断停止
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042f0:	4619      	mov	r1, r3
 80042f2:	4a15      	ldr	r2, [pc, #84]	; (8004348 <MotorMove_steps+0x38c>)
 80042f4:	460b      	mov	r3, r1
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	440b      	add	r3, r1
 80042fa:	015b      	lsls	r3, r3, #5
 80042fc:	4413      	add	r3, r2
 80042fe:	332c      	adds	r3, #44	; 0x2c
 8004300:	4a12      	ldr	r2, [pc, #72]	; (800434c <MotorMove_steps+0x390>)
 8004302:	601a      	str	r2, [r3, #0]

	MotorDirection_SetUp(&Motor[temp->MotorNumber]) ;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 3020 	ldrb.w	r3, [r3, #32]
 800430a:	461a      	mov	r2, r3
 800430c:	4613      	mov	r3, r2
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	4413      	add	r3, r2
 8004312:	015b      	lsls	r3, r3, #5
 8004314:	4a0c      	ldr	r2, [pc, #48]	; (8004348 <MotorMove_steps+0x38c>)
 8004316:	4413      	add	r3, r2
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff fde9 	bl	8003ef0 <MotorDirection_SetUp>
	HAL_TIM_Base_Start_IT(Motor[temp->MotorNumber].htim_x);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004324:	4619      	mov	r1, r3
 8004326:	4a08      	ldr	r2, [pc, #32]	; (8004348 <MotorMove_steps+0x38c>)
 8004328:	460b      	mov	r3, r1
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	440b      	add	r3, r1
 800432e:	015b      	lsls	r3, r3, #5
 8004330:	4413      	add	r3, r2
 8004332:	3334      	adds	r3, #52	; 0x34
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f005 ff90 	bl	800a25c <HAL_TIM_Base_Start_IT>
}
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	000186a0 	.word	0x000186a0
 8004348:	20000a24 	.word	0x20000a24
 800434c:	ff000010 	.word	0xff000010

08004350 <MotorMove_position>:

/*            *****************    0x80-0b10000000 电机位置控制模式 ：  ******************
根据协议，通过USART5进行出串口通讯，输入步进电机的 【地址+目标位置】 即可，使用程序本身的电机参数控制运动
***特别注意： 调试模式如果增加打印信息，在连续执行函数时，会造成10-20ms的延时，***/
void MotorMove_position(struct MotorDefine *temp  , int32_t targer_position)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
	if (Motor[temp->MotorNumber].Status == 1){
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004360:	4619      	mov	r1, r3
 8004362:	4acf      	ldr	r2, [pc, #828]	; (80046a0 <MotorMove_position+0x350>)
 8004364:	460b      	mov	r3, r1
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	440b      	add	r3, r1
 800436a:	015b      	lsls	r3, r3, #5
 800436c:	4413      	add	r3, r2
 800436e:	3330      	adds	r3, #48	; 0x30
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d110      	bne.n	8004398 <MotorMove_position+0x48>
		printf("[WRONG] Position Set Failed,Motor%d is busy!\r\n",Motor[temp->MotorNumber].MotorNumber);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 3020 	ldrb.w	r3, [r3, #32]
 800437c:	4619      	mov	r1, r3
 800437e:	4ac8      	ldr	r2, [pc, #800]	; (80046a0 <MotorMove_position+0x350>)
 8004380:	460b      	mov	r3, r1
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	440b      	add	r3, r1
 8004386:	015b      	lsls	r3, r3, #5
 8004388:	4413      	add	r3, r2
 800438a:	3320      	adds	r3, #32
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	4619      	mov	r1, r3
 8004390:	48c4      	ldr	r0, [pc, #784]	; (80046a4 <MotorMove_position+0x354>)
 8004392:	f00a fff9 	bl	800f388 <iprintf>
		return ;
 8004396:	e2fb      	b.n	8004990 <MotorMove_position+0x640>
	}
	else {
		Motor[temp->MotorNumber].Status = 1 ;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800439e:	4619      	mov	r1, r3
 80043a0:	4abf      	ldr	r2, [pc, #764]	; (80046a0 <MotorMove_position+0x350>)
 80043a2:	460b      	mov	r3, r1
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	440b      	add	r3, r1
 80043a8:	015b      	lsls	r3, r3, #5
 80043aa:	4413      	add	r3, r2
 80043ac:	3330      	adds	r3, #48	; 0x30
 80043ae:	2201      	movs	r2, #1
 80043b0:	701a      	strb	r2, [r3, #0]
	}

	Motor[temp->MotorNumber].StepsInOneCircle = (360 / Motor[temp->MotorNumber].step_angle) * Motor[temp->MotorNumber].deceleration_ratio * Motor[temp->MotorNumber].mircro_steps;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043b8:	4619      	mov	r1, r3
 80043ba:	4ab9      	ldr	r2, [pc, #740]	; (80046a0 <MotorMove_position+0x350>)
 80043bc:	460b      	mov	r3, r1
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	440b      	add	r3, r1
 80043c2:	015b      	lsls	r3, r3, #5
 80043c4:	4413      	add	r3, r2
 80043c6:	3304      	adds	r3, #4
 80043c8:	edd3 7a00 	vldr	s15, [r3]
 80043cc:	eddf 6ab6 	vldr	s13, [pc, #728]	; 80046a8 <MotorMove_position+0x358>
 80043d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043da:	4619      	mov	r1, r3
 80043dc:	4ab0      	ldr	r2, [pc, #704]	; (80046a0 <MotorMove_position+0x350>)
 80043de:	460b      	mov	r3, r1
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	440b      	add	r3, r1
 80043e4:	015b      	lsls	r3, r3, #5
 80043e6:	4413      	add	r3, r2
 80043e8:	edd3 7a00 	vldr	s15, [r3]
 80043ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043f6:	4619      	mov	r1, r3
 80043f8:	4aa9      	ldr	r2, [pc, #676]	; (80046a0 <MotorMove_position+0x350>)
 80043fa:	460b      	mov	r3, r1
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	440b      	add	r3, r1
 8004400:	015b      	lsls	r3, r3, #5
 8004402:	4413      	add	r3, r2
 8004404:	3308      	adds	r3, #8
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	ee07 3a90 	vmov	s15, r3
 800440c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 3020 	ldrb.w	r3, [r3, #32]
 800441a:	4619      	mov	r1, r3
 800441c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004420:	ee17 0a90 	vmov	r0, s15
 8004424:	4a9e      	ldr	r2, [pc, #632]	; (80046a0 <MotorMove_position+0x350>)
 8004426:	460b      	mov	r3, r1
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	440b      	add	r3, r1
 800442c:	015b      	lsls	r3, r3, #5
 800442e:	4413      	add	r3, r2
 8004430:	3338      	adds	r3, #56	; 0x38
 8004432:	6018      	str	r0, [r3, #0]
	Motor[temp->MotorNumber].StartupSpeedInHz = Motor[temp->MotorNumber].StepsInOneCircle * Motor[temp->MotorNumber].StartupSpeedInRads ;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 3020 	ldrb.w	r3, [r3, #32]
 800443a:	4619      	mov	r1, r3
 800443c:	4a98      	ldr	r2, [pc, #608]	; (80046a0 <MotorMove_position+0x350>)
 800443e:	460b      	mov	r3, r1
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	440b      	add	r3, r1
 8004444:	015b      	lsls	r3, r3, #5
 8004446:	4413      	add	r3, r2
 8004448:	3338      	adds	r3, #56	; 0x38
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	ee07 3a90 	vmov	s15, r3
 8004450:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 3020 	ldrb.w	r3, [r3, #32]
 800445a:	4619      	mov	r1, r3
 800445c:	4a90      	ldr	r2, [pc, #576]	; (80046a0 <MotorMove_position+0x350>)
 800445e:	460b      	mov	r3, r1
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	440b      	add	r3, r1
 8004464:	015b      	lsls	r3, r3, #5
 8004466:	4413      	add	r3, r2
 8004468:	3310      	adds	r3, #16
 800446a:	edd3 7a00 	vldr	s15, [r3]
 800446e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004478:	4619      	mov	r1, r3
 800447a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800447e:	ee17 0a90 	vmov	r0, s15
 8004482:	4a87      	ldr	r2, [pc, #540]	; (80046a0 <MotorMove_position+0x350>)
 8004484:	460b      	mov	r3, r1
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	440b      	add	r3, r1
 800448a:	015b      	lsls	r3, r3, #5
 800448c:	4413      	add	r3, r2
 800448e:	333c      	adds	r3, #60	; 0x3c
 8004490:	6018      	str	r0, [r3, #0]
	Motor[temp->MotorNumber].ActualSpeedInHz = Motor[temp->MotorNumber].StartupSpeedInHz;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004498:	4619      	mov	r1, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044a0:	4618      	mov	r0, r3
 80044a2:	4a7f      	ldr	r2, [pc, #508]	; (80046a0 <MotorMove_position+0x350>)
 80044a4:	460b      	mov	r3, r1
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	440b      	add	r3, r1
 80044aa:	015b      	lsls	r3, r3, #5
 80044ac:	4413      	add	r3, r2
 80044ae:	333c      	adds	r3, #60	; 0x3c
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	497b      	ldr	r1, [pc, #492]	; (80046a0 <MotorMove_position+0x350>)
 80044b4:	4603      	mov	r3, r0
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	4403      	add	r3, r0
 80044ba:	015b      	lsls	r3, r3, #5
 80044bc:	440b      	add	r3, r1
 80044be:	3340      	adds	r3, #64	; 0x40
 80044c0:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].DesiredSpeedInHz = Motor[temp->MotorNumber].StepsInOneCircle * Motor[temp->MotorNumber].DesiredSpeedInRads ;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044c8:	4619      	mov	r1, r3
 80044ca:	4a75      	ldr	r2, [pc, #468]	; (80046a0 <MotorMove_position+0x350>)
 80044cc:	460b      	mov	r3, r1
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	440b      	add	r3, r1
 80044d2:	015b      	lsls	r3, r3, #5
 80044d4:	4413      	add	r3, r2
 80044d6:	3338      	adds	r3, #56	; 0x38
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	ee07 3a90 	vmov	s15, r3
 80044de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044e8:	4619      	mov	r1, r3
 80044ea:	4a6d      	ldr	r2, [pc, #436]	; (80046a0 <MotorMove_position+0x350>)
 80044ec:	460b      	mov	r3, r1
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	440b      	add	r3, r1
 80044f2:	015b      	lsls	r3, r3, #5
 80044f4:	4413      	add	r3, r2
 80044f6:	3314      	adds	r3, #20
 80044f8:	edd3 7a00 	vldr	s15, [r3]
 80044fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004506:	4619      	mov	r1, r3
 8004508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800450c:	ee17 0a90 	vmov	r0, s15
 8004510:	4a63      	ldr	r2, [pc, #396]	; (80046a0 <MotorMove_position+0x350>)
 8004512:	460b      	mov	r3, r1
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	440b      	add	r3, r1
 8004518:	015b      	lsls	r3, r3, #5
 800451a:	4413      	add	r3, r2
 800451c:	3344      	adds	r3, #68	; 0x44
 800451e:	6018      	str	r0, [r3, #0]
	Motor[temp->MotorNumber].StepperSpeedTMR = MOTORTIM_TMR / Motor[temp->MotorNumber].ActualSpeedInHz;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004526:	4619      	mov	r1, r3
 8004528:	4a5d      	ldr	r2, [pc, #372]	; (80046a0 <MotorMove_position+0x350>)
 800452a:	460b      	mov	r3, r1
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	440b      	add	r3, r1
 8004530:	015b      	lsls	r3, r3, #5
 8004532:	4413      	add	r3, r2
 8004534:	3340      	adds	r3, #64	; 0x40
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800453e:	4610      	mov	r0, r2
 8004540:	4a5a      	ldr	r2, [pc, #360]	; (80046ac <MotorMove_position+0x35c>)
 8004542:	fbb2 f2f3 	udiv	r2, r2, r3
 8004546:	4956      	ldr	r1, [pc, #344]	; (80046a0 <MotorMove_position+0x350>)
 8004548:	4603      	mov	r3, r0
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	4403      	add	r3, r0
 800454e:	015b      	lsls	r3, r3, #5
 8004550:	440b      	add	r3, r1
 8004552:	3348      	adds	r3, #72	; 0x48
 8004554:	601a      	str	r2, [r3, #0]

	Motor[temp->MotorNumber].TargetPosition = targer_position ;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3020 	ldrb.w	r3, [r3, #32]
 800455c:	4619      	mov	r1, r3
 800455e:	4a50      	ldr	r2, [pc, #320]	; (80046a0 <MotorMove_position+0x350>)
 8004560:	460b      	mov	r3, r1
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	440b      	add	r3, r1
 8004566:	015b      	lsls	r3, r3, #5
 8004568:	4413      	add	r3, r2
 800456a:	332c      	adds	r3, #44	; 0x2c
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].NumberofSteps = abs(Motor[temp->MotorNumber].TargetPosition  -  Motor[temp->MotorNumber].StepPosition) ;//计算总步数
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004576:	4619      	mov	r1, r3
 8004578:	4a49      	ldr	r2, [pc, #292]	; (80046a0 <MotorMove_position+0x350>)
 800457a:	460b      	mov	r3, r1
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	440b      	add	r3, r1
 8004580:	015b      	lsls	r3, r3, #5
 8004582:	4413      	add	r3, r2
 8004584:	332c      	adds	r3, #44	; 0x2c
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800458e:	4618      	mov	r0, r3
 8004590:	4943      	ldr	r1, [pc, #268]	; (80046a0 <MotorMove_position+0x350>)
 8004592:	4603      	mov	r3, r0
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	4403      	add	r3, r0
 8004598:	015b      	lsls	r3, r3, #5
 800459a:	440b      	add	r3, r1
 800459c:	3328      	adds	r3, #40	; 0x28
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80045a6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045b0:	4619      	mov	r1, r3
 80045b2:	4610      	mov	r0, r2
 80045b4:	4a3a      	ldr	r2, [pc, #232]	; (80046a0 <MotorMove_position+0x350>)
 80045b6:	460b      	mov	r3, r1
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	440b      	add	r3, r1
 80045bc:	015b      	lsls	r3, r3, #5
 80045be:	4413      	add	r3, r2
 80045c0:	334c      	adds	r3, #76	; 0x4c
 80045c2:	6018      	str	r0, [r3, #0]
	if (Motor[temp->MotorNumber].TargetPosition == Motor[temp->MotorNumber].StepPosition){
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045ca:	4619      	mov	r1, r3
 80045cc:	4a34      	ldr	r2, [pc, #208]	; (80046a0 <MotorMove_position+0x350>)
 80045ce:	460b      	mov	r3, r1
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	440b      	add	r3, r1
 80045d4:	015b      	lsls	r3, r3, #5
 80045d6:	4413      	add	r3, r2
 80045d8:	332c      	adds	r3, #44	; 0x2c
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045e2:	4618      	mov	r0, r3
 80045e4:	492e      	ldr	r1, [pc, #184]	; (80046a0 <MotorMove_position+0x350>)
 80045e6:	4603      	mov	r3, r0
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	4403      	add	r3, r0
 80045ec:	015b      	lsls	r3, r3, #5
 80045ee:	440b      	add	r3, r1
 80045f0:	3328      	adds	r3, #40	; 0x28
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d12b      	bne.n	8004650 <MotorMove_position+0x300>
		Motor[temp->MotorNumber].Status = 0 ;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045fe:	4619      	mov	r1, r3
 8004600:	4a27      	ldr	r2, [pc, #156]	; (80046a0 <MotorMove_position+0x350>)
 8004602:	460b      	mov	r3, r1
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	440b      	add	r3, r1
 8004608:	015b      	lsls	r3, r3, #5
 800460a:	4413      	add	r3, r2
 800460c:	3330      	adds	r3, #48	; 0x30
 800460e:	2200      	movs	r2, #0
 8004610:	701a      	strb	r2, [r3, #0]
		printf("---KEEP---Motor%d Steps Position:%ld---\r\n",Motor[temp->MotorNumber].MotorNumber,Motor[temp->MotorNumber].StepPosition);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004618:	4619      	mov	r1, r3
 800461a:	4a21      	ldr	r2, [pc, #132]	; (80046a0 <MotorMove_position+0x350>)
 800461c:	460b      	mov	r3, r1
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	440b      	add	r3, r1
 8004622:	015b      	lsls	r3, r3, #5
 8004624:	4413      	add	r3, r2
 8004626:	3320      	adds	r3, #32
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004632:	4619      	mov	r1, r3
 8004634:	4a1a      	ldr	r2, [pc, #104]	; (80046a0 <MotorMove_position+0x350>)
 8004636:	460b      	mov	r3, r1
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	440b      	add	r3, r1
 800463c:	015b      	lsls	r3, r3, #5
 800463e:	4413      	add	r3, r2
 8004640:	3328      	adds	r3, #40	; 0x28
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	461a      	mov	r2, r3
 8004646:	4601      	mov	r1, r0
 8004648:	4819      	ldr	r0, [pc, #100]	; (80046b0 <MotorMove_position+0x360>)
 800464a:	f00a fe9d 	bl	800f388 <iprintf>
		return ;
 800464e:	e19f      	b.n	8004990 <MotorMove_position+0x640>
	}
	else if (Motor[temp->MotorNumber].TargetPosition > Motor[temp->MotorNumber].StepPosition ){
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004656:	4619      	mov	r1, r3
 8004658:	4a11      	ldr	r2, [pc, #68]	; (80046a0 <MotorMove_position+0x350>)
 800465a:	460b      	mov	r3, r1
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	440b      	add	r3, r1
 8004660:	015b      	lsls	r3, r3, #5
 8004662:	4413      	add	r3, r2
 8004664:	332c      	adds	r3, #44	; 0x2c
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800466e:	4618      	mov	r0, r3
 8004670:	490b      	ldr	r1, [pc, #44]	; (80046a0 <MotorMove_position+0x350>)
 8004672:	4603      	mov	r3, r0
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	4403      	add	r3, r0
 8004678:	015b      	lsls	r3, r3, #5
 800467a:	440b      	add	r3, r1
 800467c:	3328      	adds	r3, #40	; 0x28
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	429a      	cmp	r2, r3
 8004682:	dd17      	ble.n	80046b4 <MotorMove_position+0x364>
		Motor[temp->MotorNumber].MotorDirection = 1 ;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 3020 	ldrb.w	r3, [r3, #32]
 800468a:	4619      	mov	r1, r3
 800468c:	4a04      	ldr	r2, [pc, #16]	; (80046a0 <MotorMove_position+0x350>)
 800468e:	460b      	mov	r3, r1
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	440b      	add	r3, r1
 8004694:	015b      	lsls	r3, r3, #5
 8004696:	4413      	add	r3, r2
 8004698:	3321      	adds	r3, #33	; 0x21
 800469a:	2201      	movs	r2, #1
 800469c:	701a      	strb	r2, [r3, #0]
 800469e:	e016      	b.n	80046ce <MotorMove_position+0x37e>
 80046a0:	20000a24 	.word	0x20000a24
 80046a4:	08011960 	.word	0x08011960
 80046a8:	43b40000 	.word	0x43b40000
 80046ac:	000186a0 	.word	0x000186a0
 80046b0:	08011990 	.word	0x08011990
	}
	else{
		Motor[temp->MotorNumber].MotorDirection = 0 ;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046ba:	4619      	mov	r1, r3
 80046bc:	4ab6      	ldr	r2, [pc, #728]	; (8004998 <MotorMove_position+0x648>)
 80046be:	460b      	mov	r3, r1
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	440b      	add	r3, r1
 80046c4:	015b      	lsls	r3, r3, #5
 80046c6:	4413      	add	r3, r2
 80046c8:	3321      	adds	r3, #33	; 0x21
 80046ca:	2200      	movs	r2, #0
 80046cc:	701a      	strb	r2, [r3, #0]
	}

	Motor_AccelDecel_waveCalculate(&Motor[temp->MotorNumber]);  // 计算电机加减速曲线
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046d4:	461a      	mov	r2, r3
 80046d6:	4613      	mov	r3, r2
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	4413      	add	r3, r2
 80046dc:	015b      	lsls	r3, r3, #5
 80046de:	4aae      	ldr	r2, [pc, #696]	; (8004998 <MotorMove_position+0x648>)
 80046e0:	4413      	add	r3, r2
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff fb4c 	bl	8003d80 <Motor_AccelDecel_waveCalculate>

	if (Motor[temp->MotorNumber].MotorNumber == 1)   // Motor1为传送带形式步进电机，非丝杆直线电机，方向控制和直线电机不一样
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046ee:	4619      	mov	r1, r3
 80046f0:	4aa9      	ldr	r2, [pc, #676]	; (8004998 <MotorMove_position+0x648>)
 80046f2:	460b      	mov	r3, r1
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	440b      	add	r3, r1
 80046f8:	015b      	lsls	r3, r3, #5
 80046fa:	4413      	add	r3, r2
 80046fc:	3320      	adds	r3, #32
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b01      	cmp	r3, #1
 8004702:	f040 8101 	bne.w	8004908 <MotorMove_position+0x5b8>
	{
		Motor[temp->MotorNumber].NumberofSteps = Motor[temp->MotorNumber].NumberofSteps % Motor[temp->MotorNumber].StepsInOneCircle ;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800470c:	4619      	mov	r1, r3
 800470e:	4aa2      	ldr	r2, [pc, #648]	; (8004998 <MotorMove_position+0x648>)
 8004710:	460b      	mov	r3, r1
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	440b      	add	r3, r1
 8004716:	015b      	lsls	r3, r3, #5
 8004718:	4413      	add	r3, r2
 800471a:	334c      	adds	r3, #76	; 0x4c
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004724:	4618      	mov	r0, r3
 8004726:	499c      	ldr	r1, [pc, #624]	; (8004998 <MotorMove_position+0x648>)
 8004728:	4603      	mov	r3, r0
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	4403      	add	r3, r0
 800472e:	015b      	lsls	r3, r3, #5
 8004730:	440b      	add	r3, r1
 8004732:	3338      	adds	r3, #56	; 0x38
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	f891 1020 	ldrb.w	r1, [r1, #32]
 800473c:	4608      	mov	r0, r1
 800473e:	fbb2 f1f3 	udiv	r1, r2, r3
 8004742:	fb01 f303 	mul.w	r3, r1, r3
 8004746:	1ad2      	subs	r2, r2, r3
 8004748:	4993      	ldr	r1, [pc, #588]	; (8004998 <MotorMove_position+0x648>)
 800474a:	4603      	mov	r3, r0
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	4403      	add	r3, r0
 8004750:	015b      	lsls	r3, r3, #5
 8004752:	440b      	add	r3, r1
 8004754:	334c      	adds	r3, #76	; 0x4c
 8004756:	601a      	str	r2, [r3, #0]
		Motor[temp->MotorNumber].TargetPosition = Motor[temp->MotorNumber].TargetPosition % Motor[temp->MotorNumber].StepsInOneCircle ;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800475e:	4619      	mov	r1, r3
 8004760:	4a8d      	ldr	r2, [pc, #564]	; (8004998 <MotorMove_position+0x648>)
 8004762:	460b      	mov	r3, r1
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	440b      	add	r3, r1
 8004768:	015b      	lsls	r3, r3, #5
 800476a:	4413      	add	r3, r2
 800476c:	332c      	adds	r3, #44	; 0x2c
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	461a      	mov	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004778:	4618      	mov	r0, r3
 800477a:	4987      	ldr	r1, [pc, #540]	; (8004998 <MotorMove_position+0x648>)
 800477c:	4603      	mov	r3, r0
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	4403      	add	r3, r0
 8004782:	015b      	lsls	r3, r3, #5
 8004784:	440b      	add	r3, r1
 8004786:	3338      	adds	r3, #56	; 0x38
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	fbb2 f1f3 	udiv	r1, r2, r3
 800478e:	fb01 f303 	mul.w	r3, r1, r3
 8004792:	1ad2      	subs	r2, r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 3020 	ldrb.w	r3, [r3, #32]
 800479a:	4619      	mov	r1, r3
 800479c:	4610      	mov	r0, r2
 800479e:	4a7e      	ldr	r2, [pc, #504]	; (8004998 <MotorMove_position+0x648>)
 80047a0:	460b      	mov	r3, r1
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	440b      	add	r3, r1
 80047a6:	015b      	lsls	r3, r3, #5
 80047a8:	4413      	add	r3, r2
 80047aa:	332c      	adds	r3, #44	; 0x2c
 80047ac:	6018      	str	r0, [r3, #0]
		if( Motor[temp->MotorNumber].NumberofSteps <= (Motor[temp->MotorNumber].StepsInOneCircle/2) ){  //如果计算出的步数小于半圈，则按照既定计算方向及进行
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047b4:	4619      	mov	r1, r3
 80047b6:	4a78      	ldr	r2, [pc, #480]	; (8004998 <MotorMove_position+0x648>)
 80047b8:	460b      	mov	r3, r1
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	440b      	add	r3, r1
 80047be:	015b      	lsls	r3, r3, #5
 80047c0:	4413      	add	r3, r2
 80047c2:	334c      	adds	r3, #76	; 0x4c
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047cc:	4618      	mov	r0, r3
 80047ce:	4972      	ldr	r1, [pc, #456]	; (8004998 <MotorMove_position+0x648>)
 80047d0:	4603      	mov	r3, r0
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	4403      	add	r3, r0
 80047d6:	015b      	lsls	r3, r3, #5
 80047d8:	440b      	add	r3, r1
 80047da:	3338      	adds	r3, #56	; 0x38
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	085b      	lsrs	r3, r3, #1
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d826      	bhi.n	8004832 <MotorMove_position+0x4e2>
			Motor_AccelDecel_waveCalculate(&Motor[temp->MotorNumber]);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047ea:	461a      	mov	r2, r3
 80047ec:	4613      	mov	r3, r2
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	4413      	add	r3, r2
 80047f2:	015b      	lsls	r3, r3, #5
 80047f4:	4a68      	ldr	r2, [pc, #416]	; (8004998 <MotorMove_position+0x648>)
 80047f6:	4413      	add	r3, r2
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7ff fac1 	bl	8003d80 <Motor_AccelDecel_waveCalculate>
			if(Motor[temp->MotorNumber].MotorDirection == 1){
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004804:	4619      	mov	r1, r3
 8004806:	4a64      	ldr	r2, [pc, #400]	; (8004998 <MotorMove_position+0x648>)
 8004808:	460b      	mov	r3, r1
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	440b      	add	r3, r1
 800480e:	015b      	lsls	r3, r3, #5
 8004810:	4413      	add	r3, r2
 8004812:	3321      	adds	r3, #33	; 0x21
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d105      	bne.n	8004826 <MotorMove_position+0x4d6>
				Motor1_Nreset_direction;
 800481a:	2200      	movs	r2, #0
 800481c:	2120      	movs	r1, #32
 800481e:	485f      	ldr	r0, [pc, #380]	; (800499c <MotorMove_position+0x64c>)
 8004820:	f003 f9be 	bl	8007ba0 <HAL_GPIO_WritePin>
 8004824:	e07d      	b.n	8004922 <MotorMove_position+0x5d2>
			}
			else{
				Motor1_reset_direction;
 8004826:	2201      	movs	r2, #1
 8004828:	2120      	movs	r1, #32
 800482a:	485c      	ldr	r0, [pc, #368]	; (800499c <MotorMove_position+0x64c>)
 800482c:	f003 f9b8 	bl	8007ba0 <HAL_GPIO_WritePin>
 8004830:	e077      	b.n	8004922 <MotorMove_position+0x5d2>
			}
		}
		else{
			Motor[temp->MotorNumber].NumberofSteps = abs (Motor[temp->MotorNumber].StepsInOneCircle - Motor[temp->MotorNumber].NumberofSteps);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004838:	4619      	mov	r1, r3
 800483a:	4a57      	ldr	r2, [pc, #348]	; (8004998 <MotorMove_position+0x648>)
 800483c:	460b      	mov	r3, r1
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	440b      	add	r3, r1
 8004842:	015b      	lsls	r3, r3, #5
 8004844:	4413      	add	r3, r2
 8004846:	3338      	adds	r3, #56	; 0x38
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004850:	4618      	mov	r0, r3
 8004852:	4951      	ldr	r1, [pc, #324]	; (8004998 <MotorMove_position+0x648>)
 8004854:	4603      	mov	r3, r0
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	4403      	add	r3, r0
 800485a:	015b      	lsls	r3, r3, #5
 800485c:	440b      	add	r3, r1
 800485e:	334c      	adds	r3, #76	; 0x4c
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004868:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004872:	4619      	mov	r1, r3
 8004874:	4610      	mov	r0, r2
 8004876:	4a48      	ldr	r2, [pc, #288]	; (8004998 <MotorMove_position+0x648>)
 8004878:	460b      	mov	r3, r1
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	440b      	add	r3, r1
 800487e:	015b      	lsls	r3, r3, #5
 8004880:	4413      	add	r3, r2
 8004882:	334c      	adds	r3, #76	; 0x4c
 8004884:	6018      	str	r0, [r3, #0]
			Motor_AccelDecel_waveCalculate(&Motor[temp->MotorNumber]);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 3020 	ldrb.w	r3, [r3, #32]
 800488c:	461a      	mov	r2, r3
 800488e:	4613      	mov	r3, r2
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	4413      	add	r3, r2
 8004894:	015b      	lsls	r3, r3, #5
 8004896:	4a40      	ldr	r2, [pc, #256]	; (8004998 <MotorMove_position+0x648>)
 8004898:	4413      	add	r3, r2
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff fa70 	bl	8003d80 <Motor_AccelDecel_waveCalculate>
			if(Motor[temp->MotorNumber].MotorDirection == 1){
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048a6:	4619      	mov	r1, r3
 80048a8:	4a3b      	ldr	r2, [pc, #236]	; (8004998 <MotorMove_position+0x648>)
 80048aa:	460b      	mov	r3, r1
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	440b      	add	r3, r1
 80048b0:	015b      	lsls	r3, r3, #5
 80048b2:	4413      	add	r3, r2
 80048b4:	3321      	adds	r3, #33	; 0x21
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d112      	bne.n	80048e2 <MotorMove_position+0x592>
				Motor[temp->MotorNumber].MotorDirection = 0;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048c2:	4619      	mov	r1, r3
 80048c4:	4a34      	ldr	r2, [pc, #208]	; (8004998 <MotorMove_position+0x648>)
 80048c6:	460b      	mov	r3, r1
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	440b      	add	r3, r1
 80048cc:	015b      	lsls	r3, r3, #5
 80048ce:	4413      	add	r3, r2
 80048d0:	3321      	adds	r3, #33	; 0x21
 80048d2:	2200      	movs	r2, #0
 80048d4:	701a      	strb	r2, [r3, #0]
				Motor1_reset_direction;
 80048d6:	2201      	movs	r2, #1
 80048d8:	2120      	movs	r1, #32
 80048da:	4830      	ldr	r0, [pc, #192]	; (800499c <MotorMove_position+0x64c>)
 80048dc:	f003 f960 	bl	8007ba0 <HAL_GPIO_WritePin>
 80048e0:	e01f      	b.n	8004922 <MotorMove_position+0x5d2>
			}
			else{
				Motor[temp->MotorNumber].MotorDirection = 1;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048e8:	4619      	mov	r1, r3
 80048ea:	4a2b      	ldr	r2, [pc, #172]	; (8004998 <MotorMove_position+0x648>)
 80048ec:	460b      	mov	r3, r1
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	440b      	add	r3, r1
 80048f2:	015b      	lsls	r3, r3, #5
 80048f4:	4413      	add	r3, r2
 80048f6:	3321      	adds	r3, #33	; 0x21
 80048f8:	2201      	movs	r2, #1
 80048fa:	701a      	strb	r2, [r3, #0]
				Motor1_Nreset_direction;
 80048fc:	2200      	movs	r2, #0
 80048fe:	2120      	movs	r1, #32
 8004900:	4826      	ldr	r0, [pc, #152]	; (800499c <MotorMove_position+0x64c>)
 8004902:	f003 f94d 	bl	8007ba0 <HAL_GPIO_WritePin>
 8004906:	e00c      	b.n	8004922 <MotorMove_position+0x5d2>
			}
		}
	}
	else{
		MotorDirection_SetUp(&Motor[temp->MotorNumber]) ;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800490e:	461a      	mov	r2, r3
 8004910:	4613      	mov	r3, r2
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	4413      	add	r3, r2
 8004916:	015b      	lsls	r3, r3, #5
 8004918:	4a1f      	ldr	r2, [pc, #124]	; (8004998 <MotorMove_position+0x648>)
 800491a:	4413      	add	r3, r2
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff fae7 	bl	8003ef0 <MotorDirection_SetUp>
	}
	//位置控制情况下，允许总步数多走10步，如果仍没有到达目标位置，则判定超时失败
	Motor[temp->MotorNumber].NumberofSteps = Motor[temp->MotorNumber].NumberofSteps + 5*Motor[temp->MotorNumber].mircro_steps;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004928:	4619      	mov	r1, r3
 800492a:	4a1b      	ldr	r2, [pc, #108]	; (8004998 <MotorMove_position+0x648>)
 800492c:	460b      	mov	r3, r1
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	440b      	add	r3, r1
 8004932:	015b      	lsls	r3, r3, #5
 8004934:	4413      	add	r3, r2
 8004936:	334c      	adds	r3, #76	; 0x4c
 8004938:	6819      	ldr	r1, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004940:	4618      	mov	r0, r3
 8004942:	4a15      	ldr	r2, [pc, #84]	; (8004998 <MotorMove_position+0x648>)
 8004944:	4603      	mov	r3, r0
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	4403      	add	r3, r0
 800494a:	015b      	lsls	r3, r3, #5
 800494c:	4413      	add	r3, r2
 800494e:	3308      	adds	r3, #8
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	4613      	mov	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800495e:	4610      	mov	r0, r2
 8004960:	18ca      	adds	r2, r1, r3
 8004962:	490d      	ldr	r1, [pc, #52]	; (8004998 <MotorMove_position+0x648>)
 8004964:	4603      	mov	r3, r0
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	4403      	add	r3, r0
 800496a:	015b      	lsls	r3, r3, #5
 800496c:	440b      	add	r3, r1
 800496e:	334c      	adds	r3, #76	; 0x4c
 8004970:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(Motor[temp->MotorNumber].htim_x);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004978:	4619      	mov	r1, r3
 800497a:	4a07      	ldr	r2, [pc, #28]	; (8004998 <MotorMove_position+0x648>)
 800497c:	460b      	mov	r3, r1
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	440b      	add	r3, r1
 8004982:	015b      	lsls	r3, r3, #5
 8004984:	4413      	add	r3, r2
 8004986:	3334      	adds	r3, #52	; 0x34
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f005 fc66 	bl	800a25c <HAL_TIM_Base_Start_IT>
}
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	20000a24 	.word	0x20000a24
 800499c:	40020400 	.word	0x40020400

080049a0 <MotorRun_LowSpeed>:
	HAL_TIM_Base_Start_IT(Motor[temp->MotorNumber].htim_x);
}
#endif

void MotorRun_LowSpeed(struct MotorDefine *temp)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
	if (Motor[temp->MotorNumber].Status == 1){
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049ae:	4619      	mov	r1, r3
 80049b0:	4aad      	ldr	r2, [pc, #692]	; (8004c68 <MotorRun_LowSpeed+0x2c8>)
 80049b2:	460b      	mov	r3, r1
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	440b      	add	r3, r1
 80049b8:	015b      	lsls	r3, r3, #5
 80049ba:	4413      	add	r3, r2
 80049bc:	3330      	adds	r3, #48	; 0x30
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d110      	bne.n	80049e6 <MotorRun_LowSpeed+0x46>
		printf("[WRONG]MotorRun_LowSpeed Failed,Motor%d is busy!\r\n",Motor[temp->MotorNumber].MotorNumber);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049ca:	4619      	mov	r1, r3
 80049cc:	4aa6      	ldr	r2, [pc, #664]	; (8004c68 <MotorRun_LowSpeed+0x2c8>)
 80049ce:	460b      	mov	r3, r1
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	440b      	add	r3, r1
 80049d4:	015b      	lsls	r3, r3, #5
 80049d6:	4413      	add	r3, r2
 80049d8:	3320      	adds	r3, #32
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	4619      	mov	r1, r3
 80049de:	48a3      	ldr	r0, [pc, #652]	; (8004c6c <MotorRun_LowSpeed+0x2cc>)
 80049e0:	f00a fcd2 	bl	800f388 <iprintf>
		return ;
 80049e4:	e13c      	b.n	8004c60 <MotorRun_LowSpeed+0x2c0>
	}
	else {
		Motor[temp->MotorNumber].Status = 1 ;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049ec:	4619      	mov	r1, r3
 80049ee:	4a9e      	ldr	r2, [pc, #632]	; (8004c68 <MotorRun_LowSpeed+0x2c8>)
 80049f0:	460b      	mov	r3, r1
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	440b      	add	r3, r1
 80049f6:	015b      	lsls	r3, r3, #5
 80049f8:	4413      	add	r3, r2
 80049fa:	3330      	adds	r3, #48	; 0x30
 80049fc:	2201      	movs	r2, #1
 80049fe:	701a      	strb	r2, [r3, #0]
	}

	temp->deceleration_ratio = Motor[temp->MotorNumber].deceleration_ratio ;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a06:	4619      	mov	r1, r3
 8004a08:	4a97      	ldr	r2, [pc, #604]	; (8004c68 <MotorRun_LowSpeed+0x2c8>)
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	440b      	add	r3, r1
 8004a10:	015b      	lsls	r3, r3, #5
 8004a12:	4413      	add	r3, r2
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	601a      	str	r2, [r3, #0]
	temp->step_angle = Motor[temp->MotorNumber].step_angle ;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a20:	4619      	mov	r1, r3
 8004a22:	4a91      	ldr	r2, [pc, #580]	; (8004c68 <MotorRun_LowSpeed+0x2c8>)
 8004a24:	460b      	mov	r3, r1
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	440b      	add	r3, r1
 8004a2a:	015b      	lsls	r3, r3, #5
 8004a2c:	4413      	add	r3, r2
 8004a2e:	3304      	adds	r3, #4
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	605a      	str	r2, [r3, #4]
	temp->mircro_steps = Motor[temp->MotorNumber].mircro_steps ;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4a8a      	ldr	r2, [pc, #552]	; (8004c68 <MotorRun_LowSpeed+0x2c8>)
 8004a40:	460b      	mov	r3, r1
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	440b      	add	r3, r1
 8004a46:	015b      	lsls	r3, r3, #5
 8004a48:	4413      	add	r3, r2
 8004a4a:	3308      	adds	r3, #8
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	609a      	str	r2, [r3, #8]
	temp->MaxSpeedInRads = Motor[temp->MotorNumber].MaxSpeedInRads ;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4a83      	ldr	r2, [pc, #524]	; (8004c68 <MotorRun_LowSpeed+0x2c8>)
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	440b      	add	r3, r1
 8004a62:	015b      	lsls	r3, r3, #5
 8004a64:	4413      	add	r3, r2
 8004a66:	330c      	adds	r3, #12
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	60da      	str	r2, [r3, #12]
	temp->htim_x = Motor[temp->MotorNumber].htim_x ;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a74:	4619      	mov	r1, r3
 8004a76:	4a7c      	ldr	r2, [pc, #496]	; (8004c68 <MotorRun_LowSpeed+0x2c8>)
 8004a78:	460b      	mov	r3, r1
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	440b      	add	r3, r1
 8004a7e:	015b      	lsls	r3, r3, #5
 8004a80:	4413      	add	r3, r2
 8004a82:	3334      	adds	r3, #52	; 0x34
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	635a      	str	r2, [r3, #52]	; 0x34

	// 计算： 单圈步数、启动速度、目标速度、行进步数、加减速时间
	temp->StepsInOneCircle = (360 / temp->step_angle) * temp->deceleration_ratio * temp->mircro_steps;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a90:	eddf 6a77 	vldr	s13, [pc, #476]	; 8004c70 <MotorRun_LowSpeed+0x2d0>
 8004a94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	edd3 7a00 	vldr	s15, [r3]
 8004a9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	ee07 3a90 	vmov	s15, r3
 8004aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ab6:	ee17 2a90 	vmov	r2, s15
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	639a      	str	r2, [r3, #56]	; 0x38
	temp->StartupSpeedInHz = temp->StepsInOneCircle * temp->StartupSpeedInRads ;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac2:	ee07 3a90 	vmov	s15, r3
 8004ac6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	edd3 7a04 	vldr	s15, [r3, #16]
 8004ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ad8:	ee17 2a90 	vmov	r2, s15
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	63da      	str	r2, [r3, #60]	; 0x3c
	temp->StepperSpeedTMR = MOTORTIM_TMR / temp->StartupSpeedInHz;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae4:	4a63      	ldr	r2, [pc, #396]	; (8004c74 <MotorRun_LowSpeed+0x2d4>)
 8004ae6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	649a      	str	r2, [r3, #72]	; 0x48
	temp->NumberofSteps = temp->NumberofRads * temp->StepsInOneCircle ;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af8:	ee07 3a90 	vmov	s15, r3
 8004afc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b08:	ee17 2a90 	vmov	r2, s15
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	64da      	str	r2, [r3, #76]	; 0x4c

	//不进行加减速，电机保持最小速度运行
	Motor[temp->MotorNumber].NumberofSteps_StopAccel = temp->NumberofSteps;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b16:	4618      	mov	r0, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b1c:	4952      	ldr	r1, [pc, #328]	; (8004c68 <MotorRun_LowSpeed+0x2c8>)
 8004b1e:	4603      	mov	r3, r0
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	4403      	add	r3, r0
 8004b24:	015b      	lsls	r3, r3, #5
 8004b26:	440b      	add	r3, r1
 8004b28:	3350      	adds	r3, #80	; 0x50
 8004b2a:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].NumberofSteps_BeginDecel = 0;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b32:	4619      	mov	r1, r3
 8004b34:	4a4c      	ldr	r2, [pc, #304]	; (8004c68 <MotorRun_LowSpeed+0x2c8>)
 8004b36:	460b      	mov	r3, r1
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	440b      	add	r3, r1
 8004b3c:	015b      	lsls	r3, r3, #5
 8004b3e:	4413      	add	r3, r2
 8004b40:	3354      	adds	r3, #84	; 0x54
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]

	Motor[temp->MotorNumber].StepsInOneCircle = temp->StepsInOneCircle ;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b52:	4945      	ldr	r1, [pc, #276]	; (8004c68 <MotorRun_LowSpeed+0x2c8>)
 8004b54:	4603      	mov	r3, r0
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	4403      	add	r3, r0
 8004b5a:	015b      	lsls	r3, r3, #5
 8004b5c:	440b      	add	r3, r1
 8004b5e:	3338      	adds	r3, #56	; 0x38
 8004b60:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].StartupSpeedInHz = temp->StartupSpeedInHz ;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b6e:	493e      	ldr	r1, [pc, #248]	; (8004c68 <MotorRun_LowSpeed+0x2c8>)
 8004b70:	4603      	mov	r3, r0
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	4403      	add	r3, r0
 8004b76:	015b      	lsls	r3, r3, #5
 8004b78:	440b      	add	r3, r1
 8004b7a:	333c      	adds	r3, #60	; 0x3c
 8004b7c:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].StepperSpeedTMR = temp->StepperSpeedTMR ;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b84:	4618      	mov	r0, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b8a:	4937      	ldr	r1, [pc, #220]	; (8004c68 <MotorRun_LowSpeed+0x2c8>)
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	4403      	add	r3, r0
 8004b92:	015b      	lsls	r3, r3, #5
 8004b94:	440b      	add	r3, r1
 8004b96:	3348      	adds	r3, #72	; 0x48
 8004b98:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].NumberofSteps = temp->NumberofSteps ;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ba6:	4930      	ldr	r1, [pc, #192]	; (8004c68 <MotorRun_LowSpeed+0x2c8>)
 8004ba8:	4603      	mov	r3, r0
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	4403      	add	r3, r0
 8004bae:	015b      	lsls	r3, r3, #5
 8004bb0:	440b      	add	r3, r1
 8004bb2:	334c      	adds	r3, #76	; 0x4c
 8004bb4:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].MotorDirection = temp->MotorDirection ;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
 8004bc4:	4a28      	ldr	r2, [pc, #160]	; (8004c68 <MotorRun_LowSpeed+0x2c8>)
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	440b      	add	r3, r1
 8004bcc:	015b      	lsls	r3, r3, #5
 8004bce:	4413      	add	r3, r2
 8004bd0:	3321      	adds	r3, #33	; 0x21
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	701a      	strb	r2, [r3, #0]
	Motor[temp->MotorNumber].AccelerationTimeTMR = 10000 ;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bdc:	4619      	mov	r1, r3
 8004bde:	4a22      	ldr	r2, [pc, #136]	; (8004c68 <MotorRun_LowSpeed+0x2c8>)
 8004be0:	460b      	mov	r3, r1
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	440b      	add	r3, r1
 8004be6:	015b      	lsls	r3, r3, #5
 8004be8:	4413      	add	r3, r2
 8004bea:	3358      	adds	r3, #88	; 0x58
 8004bec:	f242 7210 	movw	r2, #10000	; 0x2710
 8004bf0:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].DecelerationTimeTMR = 10000 ;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4a1b      	ldr	r2, [pc, #108]	; (8004c68 <MotorRun_LowSpeed+0x2c8>)
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	440b      	add	r3, r1
 8004c02:	015b      	lsls	r3, r3, #5
 8004c04:	4413      	add	r3, r2
 8004c06:	335c      	adds	r3, #92	; 0x5c
 8004c08:	f242 7210 	movw	r2, #10000	; 0x2710
 8004c0c:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].TargetPosition = -16777200 ; //暂时设置目标位置为无法达到的值，参数控制模式用步进数控制中断停止
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c14:	4619      	mov	r1, r3
 8004c16:	4a14      	ldr	r2, [pc, #80]	; (8004c68 <MotorRun_LowSpeed+0x2c8>)
 8004c18:	460b      	mov	r3, r1
 8004c1a:	005b      	lsls	r3, r3, #1
 8004c1c:	440b      	add	r3, r1
 8004c1e:	015b      	lsls	r3, r3, #5
 8004c20:	4413      	add	r3, r2
 8004c22:	332c      	adds	r3, #44	; 0x2c
 8004c24:	4a14      	ldr	r2, [pc, #80]	; (8004c78 <MotorRun_LowSpeed+0x2d8>)
 8004c26:	601a      	str	r2, [r3, #0]

	MotorDirection_SetUp(&Motor[temp->MotorNumber]) ;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	4613      	mov	r3, r2
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	4413      	add	r3, r2
 8004c36:	015b      	lsls	r3, r3, #5
 8004c38:	4a0b      	ldr	r2, [pc, #44]	; (8004c68 <MotorRun_LowSpeed+0x2c8>)
 8004c3a:	4413      	add	r3, r2
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7ff f957 	bl	8003ef0 <MotorDirection_SetUp>
	HAL_TIM_Base_Start_IT(Motor[temp->MotorNumber].htim_x);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4a07      	ldr	r2, [pc, #28]	; (8004c68 <MotorRun_LowSpeed+0x2c8>)
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	440b      	add	r3, r1
 8004c52:	015b      	lsls	r3, r3, #5
 8004c54:	4413      	add	r3, r2
 8004c56:	3334      	adds	r3, #52	; 0x34
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f005 fafe 	bl	800a25c <HAL_TIM_Base_Start_IT>
}
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	20000a24 	.word	0x20000a24
 8004c6c:	080119bc 	.word	0x080119bc
 8004c70:	43b40000 	.word	0x43b40000
 8004c74:	000186a0 	.word	0x000186a0
 8004c78:	ff000010 	.word	0xff000010

08004c7c <Motor_Reset>:
/*            *****************    0x20-0b00100000 电机复位 ：  ****************** */
// 根据协议，通过USART5进行出串口通讯，输入步进电机的 【地址】 即可，使用程序优化配置好的电机参数对电机进行复位（需要配合0位开关）
// 返回值： SUCCESS-1-完成，正在运行  FAIL-0
// 方案：控制电机运动上限圈数为10转，过程中如果触发0位信号则停止运动。如果电机初始位置已经触发0位信号，则反方向运动一小段时间，再找0位
uint8_t Motor_Reset(struct MotorDefine *temp)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b08e      	sub	sp, #56	; 0x38
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
	if (Motor[temp->MotorNumber].Status == 1){
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4aba      	ldr	r2, [pc, #744]	; (8004f78 <Motor_Reset+0x2fc>)
 8004c8e:	460b      	mov	r3, r1
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	440b      	add	r3, r1
 8004c94:	015b      	lsls	r3, r3, #5
 8004c96:	4413      	add	r3, r2
 8004c98:	3330      	adds	r3, #48	; 0x30
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d108      	bne.n	8004cb2 <Motor_Reset+0x36>
		printf("[WRONG] Reset Failed,Motor%d is busy!\r\n",temp->MotorNumber);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	48b4      	ldr	r0, [pc, #720]	; (8004f7c <Motor_Reset+0x300>)
 8004caa:	f00a fb6d 	bl	800f388 <iprintf>
		return FAIL;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	e3d8      	b.n	8005464 <Motor_Reset+0x7e8>
	}
	*temp = Motor[temp->MotorNumber];
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cb8:	4619      	mov	r1, r3
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	4aae      	ldr	r2, [pc, #696]	; (8004f78 <Motor_Reset+0x2fc>)
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	440b      	add	r3, r1
 8004cc4:	015b      	lsls	r3, r3, #5
 8004cc6:	4413      	add	r3, r2
 8004cc8:	4619      	mov	r1, r3
 8004cca:	2360      	movs	r3, #96	; 0x60
 8004ccc:	461a      	mov	r2, r3
 8004cce:	f00a fd75 	bl	800f7bc <memcpy>

	temp->NumberofRads = 30;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4aaa      	ldr	r2, [pc, #680]	; (8004f80 <Motor_Reset+0x304>)
 8004cd6:	625a      	str	r2, [r3, #36]	; 0x24

	if (temp->MotorNumber == 1){
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	f040 8093 	bne.w	8004e0a <Motor_Reset+0x18e>
		if ( Motor1_reset_OPTstatus ){
 8004ce4:	2108      	movs	r1, #8
 8004ce6:	48a7      	ldr	r0, [pc, #668]	; (8004f84 <Motor_Reset+0x308>)
 8004ce8:	f002 ff42 	bl	8007b70 <HAL_GPIO_ReadPin>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d140      	bne.n	8004d74 <Motor_Reset+0xf8>
			temp->MotorDirection = 1 ;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7ff fe50 	bl	80049a0 <MotorRun_LowSpeed>
			HAL_Delay(MotorResetDelay);
 8004d00:	2078      	movs	r0, #120	; 0x78
 8004d02:	f001 f8cf 	bl	8005ea4 <HAL_Delay>
			for(uint32_t i=0 ; Motor1_reset_OPTstatus ; i++){
 8004d06:	2300      	movs	r3, #0
 8004d08:	637b      	str	r3, [r7, #52]	; 0x34
 8004d0a:	e01f      	b.n	8004d4c <Motor_Reset+0xd0>
				if(i>500) {
 8004d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d0e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004d12:	d915      	bls.n	8004d40 <Motor_Reset+0xc4>
					printf("[WRONG] Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	489a      	ldr	r0, [pc, #616]	; (8004f88 <Motor_Reset+0x30c>)
 8004d1e:	f00a fb33 	bl	800f388 <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4a93      	ldr	r2, [pc, #588]	; (8004f78 <Motor_Reset+0x2fc>)
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	440b      	add	r3, r1
 8004d32:	015b      	lsls	r3, r3, #5
 8004d34:	4413      	add	r3, r2
 8004d36:	334c      	adds	r3, #76	; 0x4c
 8004d38:	2202      	movs	r2, #2
 8004d3a:	601a      	str	r2, [r3, #0]
					return FAIL;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	e391      	b.n	8005464 <Motor_Reset+0x7e8>
				}
				else {HAL_Delay(1);}
 8004d40:	2001      	movs	r0, #1
 8004d42:	f001 f8af 	bl	8005ea4 <HAL_Delay>
			for(uint32_t i=0 ; Motor1_reset_OPTstatus ; i++){
 8004d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d48:	3301      	adds	r3, #1
 8004d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8004d4c:	2108      	movs	r1, #8
 8004d4e:	488d      	ldr	r0, [pc, #564]	; (8004f84 <Motor_Reset+0x308>)
 8004d50:	f002 ff0e 	bl	8007b70 <HAL_GPIO_ReadPin>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0d8      	beq.n	8004d0c <Motor_Reset+0x90>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d60:	4619      	mov	r1, r3
 8004d62:	4a85      	ldr	r2, [pc, #532]	; (8004f78 <Motor_Reset+0x2fc>)
 8004d64:	460b      	mov	r3, r1
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	440b      	add	r3, r1
 8004d6a:	015b      	lsls	r3, r3, #5
 8004d6c:	4413      	add	r3, r2
 8004d6e:	334c      	adds	r3, #76	; 0x4c
 8004d70:	2202      	movs	r2, #2
 8004d72:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(MotorResetDelay);
 8004d74:	2078      	movs	r0, #120	; 0x78
 8004d76:	f001 f895 	bl	8005ea4 <HAL_Delay>
		if (Motor1_Nreset_OPTstatus){
 8004d7a:	2108      	movs	r1, #8
 8004d7c:	4881      	ldr	r0, [pc, #516]	; (8004f84 <Motor_Reset+0x308>)
 8004d7e:	f002 fef7 	bl	8007b70 <HAL_GPIO_ReadPin>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d140      	bne.n	8004e0a <Motor_Reset+0x18e>
			temp->MotorDirection = 0 ;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f7ff fe05 	bl	80049a0 <MotorRun_LowSpeed>
			for(uint32_t i=0 ; Motor1_Nreset_OPTstatus ; i++){
 8004d96:	2300      	movs	r3, #0
 8004d98:	633b      	str	r3, [r7, #48]	; 0x30
 8004d9a:	e020      	b.n	8004dde <Motor_Reset+0x162>
				if(i>5000) {
 8004d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d915      	bls.n	8004dd2 <Motor_Reset+0x156>
					printf("[WRONG] Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dac:	4619      	mov	r1, r3
 8004dae:	4876      	ldr	r0, [pc, #472]	; (8004f88 <Motor_Reset+0x30c>)
 8004db0:	f00a faea 	bl	800f388 <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4a6e      	ldr	r2, [pc, #440]	; (8004f78 <Motor_Reset+0x2fc>)
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	440b      	add	r3, r1
 8004dc4:	015b      	lsls	r3, r3, #5
 8004dc6:	4413      	add	r3, r2
 8004dc8:	334c      	adds	r3, #76	; 0x4c
 8004dca:	2202      	movs	r2, #2
 8004dcc:	601a      	str	r2, [r3, #0]
					return FAIL;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	e348      	b.n	8005464 <Motor_Reset+0x7e8>
				}
				else {HAL_Delay(1);}
 8004dd2:	2001      	movs	r0, #1
 8004dd4:	f001 f866 	bl	8005ea4 <HAL_Delay>
			for(uint32_t i=0 ; Motor1_Nreset_OPTstatus ; i++){
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dda:	3301      	adds	r3, #1
 8004ddc:	633b      	str	r3, [r7, #48]	; 0x30
 8004dde:	2108      	movs	r1, #8
 8004de0:	4868      	ldr	r0, [pc, #416]	; (8004f84 <Motor_Reset+0x308>)
 8004de2:	f002 fec5 	bl	8007b70 <HAL_GPIO_ReadPin>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d0d7      	beq.n	8004d9c <Motor_Reset+0x120>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004df2:	4619      	mov	r1, r3
 8004df4:	4a60      	ldr	r2, [pc, #384]	; (8004f78 <Motor_Reset+0x2fc>)
 8004df6:	460b      	mov	r3, r1
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	440b      	add	r3, r1
 8004dfc:	015b      	lsls	r3, r3, #5
 8004dfe:	4413      	add	r3, r2
 8004e00:	334c      	adds	r3, #76	; 0x4c
 8004e02:	2202      	movs	r2, #2
 8004e04:	601a      	str	r2, [r3, #0]
			return SUCCESS;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e32c      	b.n	8005464 <Motor_Reset+0x7e8>
		}
	}

	if (temp->MotorNumber == 2){
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	f040 8093 	bne.w	8004f3c <Motor_Reset+0x2c0>
		if ( Motor2_reset_OPTstatus ){
 8004e16:	2110      	movs	r1, #16
 8004e18:	485a      	ldr	r0, [pc, #360]	; (8004f84 <Motor_Reset+0x308>)
 8004e1a:	f002 fea9 	bl	8007b70 <HAL_GPIO_ReadPin>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d140      	bne.n	8004ea6 <Motor_Reset+0x22a>
			temp->MotorDirection = 1 ;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7ff fdb7 	bl	80049a0 <MotorRun_LowSpeed>
			HAL_Delay(MotorResetDelay);
 8004e32:	2078      	movs	r0, #120	; 0x78
 8004e34:	f001 f836 	bl	8005ea4 <HAL_Delay>
			for(uint32_t i=0 ; Motor2_reset_OPTstatus ; i++){
 8004e38:	2300      	movs	r3, #0
 8004e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e3c:	e01f      	b.n	8004e7e <Motor_Reset+0x202>
				if(i>500) {
 8004e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e40:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004e44:	d915      	bls.n	8004e72 <Motor_Reset+0x1f6>
					printf("[WRONG] Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	484e      	ldr	r0, [pc, #312]	; (8004f88 <Motor_Reset+0x30c>)
 8004e50:	f00a fa9a 	bl	800f388 <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	4a46      	ldr	r2, [pc, #280]	; (8004f78 <Motor_Reset+0x2fc>)
 8004e5e:	460b      	mov	r3, r1
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	440b      	add	r3, r1
 8004e64:	015b      	lsls	r3, r3, #5
 8004e66:	4413      	add	r3, r2
 8004e68:	334c      	adds	r3, #76	; 0x4c
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	601a      	str	r2, [r3, #0]
					return FAIL;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	e2f8      	b.n	8005464 <Motor_Reset+0x7e8>
				}
				else {HAL_Delay(1);}
 8004e72:	2001      	movs	r0, #1
 8004e74:	f001 f816 	bl	8005ea4 <HAL_Delay>
			for(uint32_t i=0 ; Motor2_reset_OPTstatus ; i++){
 8004e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e7e:	2110      	movs	r1, #16
 8004e80:	4840      	ldr	r0, [pc, #256]	; (8004f84 <Motor_Reset+0x308>)
 8004e82:	f002 fe75 	bl	8007b70 <HAL_GPIO_ReadPin>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0d8      	beq.n	8004e3e <Motor_Reset+0x1c2>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e92:	4619      	mov	r1, r3
 8004e94:	4a38      	ldr	r2, [pc, #224]	; (8004f78 <Motor_Reset+0x2fc>)
 8004e96:	460b      	mov	r3, r1
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	440b      	add	r3, r1
 8004e9c:	015b      	lsls	r3, r3, #5
 8004e9e:	4413      	add	r3, r2
 8004ea0:	334c      	adds	r3, #76	; 0x4c
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(MotorResetDelay);
 8004ea6:	2078      	movs	r0, #120	; 0x78
 8004ea8:	f000 fffc 	bl	8005ea4 <HAL_Delay>
		if (Motor2_Nreset_OPTstatus){
 8004eac:	2110      	movs	r1, #16
 8004eae:	4835      	ldr	r0, [pc, #212]	; (8004f84 <Motor_Reset+0x308>)
 8004eb0:	f002 fe5e 	bl	8007b70 <HAL_GPIO_ReadPin>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d140      	bne.n	8004f3c <Motor_Reset+0x2c0>
			temp->MotorDirection = 0 ;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7ff fd6c 	bl	80049a0 <MotorRun_LowSpeed>
			for(uint32_t i=0 ; Motor2_Nreset_OPTstatus ; i++){
 8004ec8:	2300      	movs	r3, #0
 8004eca:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ecc:	e020      	b.n	8004f10 <Motor_Reset+0x294>
				if(i>5000) {
 8004ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d915      	bls.n	8004f04 <Motor_Reset+0x288>
					printf("[WRONG]Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ede:	4619      	mov	r1, r3
 8004ee0:	482a      	ldr	r0, [pc, #168]	; (8004f8c <Motor_Reset+0x310>)
 8004ee2:	f00a fa51 	bl	800f388 <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004eec:	4619      	mov	r1, r3
 8004eee:	4a22      	ldr	r2, [pc, #136]	; (8004f78 <Motor_Reset+0x2fc>)
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	440b      	add	r3, r1
 8004ef6:	015b      	lsls	r3, r3, #5
 8004ef8:	4413      	add	r3, r2
 8004efa:	334c      	adds	r3, #76	; 0x4c
 8004efc:	2202      	movs	r2, #2
 8004efe:	601a      	str	r2, [r3, #0]
					return FAIL;
 8004f00:	2300      	movs	r3, #0
 8004f02:	e2af      	b.n	8005464 <Motor_Reset+0x7e8>
				}
				else {HAL_Delay(1);}
 8004f04:	2001      	movs	r0, #1
 8004f06:	f000 ffcd 	bl	8005ea4 <HAL_Delay>
			for(uint32_t i=0 ; Motor2_Nreset_OPTstatus ; i++){
 8004f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f10:	2110      	movs	r1, #16
 8004f12:	481c      	ldr	r0, [pc, #112]	; (8004f84 <Motor_Reset+0x308>)
 8004f14:	f002 fe2c 	bl	8007b70 <HAL_GPIO_ReadPin>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d0d7      	beq.n	8004ece <Motor_Reset+0x252>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f24:	4619      	mov	r1, r3
 8004f26:	4a14      	ldr	r2, [pc, #80]	; (8004f78 <Motor_Reset+0x2fc>)
 8004f28:	460b      	mov	r3, r1
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	440b      	add	r3, r1
 8004f2e:	015b      	lsls	r3, r3, #5
 8004f30:	4413      	add	r3, r2
 8004f32:	334c      	adds	r3, #76	; 0x4c
 8004f34:	2202      	movs	r2, #2
 8004f36:	601a      	str	r2, [r3, #0]
			return SUCCESS;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e293      	b.n	8005464 <Motor_Reset+0x7e8>
		}
	}

	if (temp->MotorNumber == 3){
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f42:	2b03      	cmp	r3, #3
 8004f44:	f040 80a2 	bne.w	800508c <Motor_Reset+0x410>
		if ( Motor3_reset_OPTstatus ){
 8004f48:	2120      	movs	r1, #32
 8004f4a:	480e      	ldr	r0, [pc, #56]	; (8004f84 <Motor_Reset+0x308>)
 8004f4c:	f002 fe10 	bl	8007b70 <HAL_GPIO_ReadPin>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d150      	bne.n	8004ff8 <Motor_Reset+0x37c>
			temp->MotorDirection = 1 ;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7ff fd1e 	bl	80049a0 <MotorRun_LowSpeed>
			HAL_Delay(MotorResetDelay);
 8004f64:	2078      	movs	r0, #120	; 0x78
 8004f66:	f000 ff9d 	bl	8005ea4 <HAL_Delay>
			HAL_Delay(MotorResetDelay);
 8004f6a:	2078      	movs	r0, #120	; 0x78
 8004f6c:	f000 ff9a 	bl	8005ea4 <HAL_Delay>
			for(uint32_t i=0 ; Motor3_reset_OPTstatus ; i++){
 8004f70:	2300      	movs	r3, #0
 8004f72:	627b      	str	r3, [r7, #36]	; 0x24
 8004f74:	e02c      	b.n	8004fd0 <Motor_Reset+0x354>
 8004f76:	bf00      	nop
 8004f78:	20000a24 	.word	0x20000a24
 8004f7c:	080119f0 	.word	0x080119f0
 8004f80:	41f00000 	.word	0x41f00000
 8004f84:	40020c00 	.word	0x40020c00
 8004f88:	08011a18 	.word	0x08011a18
 8004f8c:	08011a44 	.word	0x08011a44
				if(i>500) {
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004f96:	d915      	bls.n	8004fc4 <Motor_Reset+0x348>
					printf("[WRONG] Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	48bc      	ldr	r0, [pc, #752]	; (8005294 <Motor_Reset+0x618>)
 8004fa2:	f00a f9f1 	bl	800f388 <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fac:	4619      	mov	r1, r3
 8004fae:	4aba      	ldr	r2, [pc, #744]	; (8005298 <Motor_Reset+0x61c>)
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	440b      	add	r3, r1
 8004fb6:	015b      	lsls	r3, r3, #5
 8004fb8:	4413      	add	r3, r2
 8004fba:	334c      	adds	r3, #76	; 0x4c
 8004fbc:	2202      	movs	r2, #2
 8004fbe:	601a      	str	r2, [r3, #0]
					return FAIL;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	e24f      	b.n	8005464 <Motor_Reset+0x7e8>
				}
				else {HAL_Delay(1);}
 8004fc4:	2001      	movs	r0, #1
 8004fc6:	f000 ff6d 	bl	8005ea4 <HAL_Delay>
			for(uint32_t i=0 ; Motor3_reset_OPTstatus ; i++){
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	3301      	adds	r3, #1
 8004fce:	627b      	str	r3, [r7, #36]	; 0x24
 8004fd0:	2120      	movs	r1, #32
 8004fd2:	48b2      	ldr	r0, [pc, #712]	; (800529c <Motor_Reset+0x620>)
 8004fd4:	f002 fdcc 	bl	8007b70 <HAL_GPIO_ReadPin>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d0d8      	beq.n	8004f90 <Motor_Reset+0x314>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4aac      	ldr	r2, [pc, #688]	; (8005298 <Motor_Reset+0x61c>)
 8004fe8:	460b      	mov	r3, r1
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	440b      	add	r3, r1
 8004fee:	015b      	lsls	r3, r3, #5
 8004ff0:	4413      	add	r3, r2
 8004ff2:	334c      	adds	r3, #76	; 0x4c
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(MotorResetDelay);
 8004ff8:	2078      	movs	r0, #120	; 0x78
 8004ffa:	f000 ff53 	bl	8005ea4 <HAL_Delay>
		if (Motor3_Nreset_OPTstatus){
 8004ffe:	2120      	movs	r1, #32
 8005000:	48a6      	ldr	r0, [pc, #664]	; (800529c <Motor_Reset+0x620>)
 8005002:	f002 fdb5 	bl	8007b70 <HAL_GPIO_ReadPin>
 8005006:	4603      	mov	r3, r0
 8005008:	2b01      	cmp	r3, #1
 800500a:	d13f      	bne.n	800508c <Motor_Reset+0x410>
			temp->MotorDirection = 0 ;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7ff fcc3 	bl	80049a0 <MotorRun_LowSpeed>
			for(uint32_t i=0 ; Motor3_Nreset_OPTstatus ; i++){
 800501a:	2300      	movs	r3, #0
 800501c:	623b      	str	r3, [r7, #32]
 800501e:	e01f      	b.n	8005060 <Motor_Reset+0x3e4>
				if(i>4000) {
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8005026:	d915      	bls.n	8005054 <Motor_Reset+0x3d8>
					printf("[WRONG] Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800502e:	4619      	mov	r1, r3
 8005030:	4898      	ldr	r0, [pc, #608]	; (8005294 <Motor_Reset+0x618>)
 8005032:	f00a f9a9 	bl	800f388 <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 3020 	ldrb.w	r3, [r3, #32]
 800503c:	4619      	mov	r1, r3
 800503e:	4a96      	ldr	r2, [pc, #600]	; (8005298 <Motor_Reset+0x61c>)
 8005040:	460b      	mov	r3, r1
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	440b      	add	r3, r1
 8005046:	015b      	lsls	r3, r3, #5
 8005048:	4413      	add	r3, r2
 800504a:	334c      	adds	r3, #76	; 0x4c
 800504c:	2202      	movs	r2, #2
 800504e:	601a      	str	r2, [r3, #0]
					return FAIL;
 8005050:	2300      	movs	r3, #0
 8005052:	e207      	b.n	8005464 <Motor_Reset+0x7e8>
				}
				else {HAL_Delay(1);}
 8005054:	2001      	movs	r0, #1
 8005056:	f000 ff25 	bl	8005ea4 <HAL_Delay>
			for(uint32_t i=0 ; Motor3_Nreset_OPTstatus ; i++){
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	3301      	adds	r3, #1
 800505e:	623b      	str	r3, [r7, #32]
 8005060:	2120      	movs	r1, #32
 8005062:	488e      	ldr	r0, [pc, #568]	; (800529c <Motor_Reset+0x620>)
 8005064:	f002 fd84 	bl	8007b70 <HAL_GPIO_ReadPin>
 8005068:	4603      	mov	r3, r0
 800506a:	2b01      	cmp	r3, #1
 800506c:	d0d8      	beq.n	8005020 <Motor_Reset+0x3a4>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005074:	4619      	mov	r1, r3
 8005076:	4a88      	ldr	r2, [pc, #544]	; (8005298 <Motor_Reset+0x61c>)
 8005078:	460b      	mov	r3, r1
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	440b      	add	r3, r1
 800507e:	015b      	lsls	r3, r3, #5
 8005080:	4413      	add	r3, r2
 8005082:	334c      	adds	r3, #76	; 0x4c
 8005084:	2202      	movs	r2, #2
 8005086:	601a      	str	r2, [r3, #0]
			return SUCCESS;
 8005088:	2301      	movs	r3, #1
 800508a:	e1eb      	b.n	8005464 <Motor_Reset+0x7e8>
		}
	}

	if (temp->MotorNumber == 4){
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005092:	2b04      	cmp	r3, #4
 8005094:	f040 8098 	bne.w	80051c8 <Motor_Reset+0x54c>
		if ( Motor4_reset_OPTstatus ){
 8005098:	2140      	movs	r1, #64	; 0x40
 800509a:	4880      	ldr	r0, [pc, #512]	; (800529c <Motor_Reset+0x620>)
 800509c:	f002 fd68 	bl	8007b70 <HAL_GPIO_ReadPin>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d143      	bne.n	800512e <Motor_Reset+0x4b2>
			temp->MotorDirection = 1 ;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp->NumberofRads = 10 ;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a7b      	ldr	r2, [pc, #492]	; (80052a0 <Motor_Reset+0x624>)
 80050b2:	625a      	str	r2, [r3, #36]	; 0x24
			MotorMove_steps(temp);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7fe ff81 	bl	8003fbc <MotorMove_steps>
			HAL_Delay(MotorResetDelay);
 80050ba:	2078      	movs	r0, #120	; 0x78
 80050bc:	f000 fef2 	bl	8005ea4 <HAL_Delay>
			for(uint32_t i=0 ; Motor4_reset_OPTstatus ; i++){
 80050c0:	2300      	movs	r3, #0
 80050c2:	61fb      	str	r3, [r7, #28]
 80050c4:	e01f      	b.n	8005106 <Motor_Reset+0x48a>
				if(i>500) {
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80050cc:	d915      	bls.n	80050fa <Motor_Reset+0x47e>
					printf("[WRONG] Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050d4:	4619      	mov	r1, r3
 80050d6:	486f      	ldr	r0, [pc, #444]	; (8005294 <Motor_Reset+0x618>)
 80050d8:	f00a f956 	bl	800f388 <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050e2:	4619      	mov	r1, r3
 80050e4:	4a6c      	ldr	r2, [pc, #432]	; (8005298 <Motor_Reset+0x61c>)
 80050e6:	460b      	mov	r3, r1
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	440b      	add	r3, r1
 80050ec:	015b      	lsls	r3, r3, #5
 80050ee:	4413      	add	r3, r2
 80050f0:	334c      	adds	r3, #76	; 0x4c
 80050f2:	2202      	movs	r2, #2
 80050f4:	601a      	str	r2, [r3, #0]
					return FAIL;
 80050f6:	2300      	movs	r3, #0
 80050f8:	e1b4      	b.n	8005464 <Motor_Reset+0x7e8>
				}
				else {HAL_Delay(1);}
 80050fa:	2001      	movs	r0, #1
 80050fc:	f000 fed2 	bl	8005ea4 <HAL_Delay>
			for(uint32_t i=0 ; Motor4_reset_OPTstatus ; i++){
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	3301      	adds	r3, #1
 8005104:	61fb      	str	r3, [r7, #28]
 8005106:	2140      	movs	r1, #64	; 0x40
 8005108:	4864      	ldr	r0, [pc, #400]	; (800529c <Motor_Reset+0x620>)
 800510a:	f002 fd31 	bl	8007b70 <HAL_GPIO_ReadPin>
 800510e:	4603      	mov	r3, r0
 8005110:	2b01      	cmp	r3, #1
 8005112:	d0d8      	beq.n	80050c6 <Motor_Reset+0x44a>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 3020 	ldrb.w	r3, [r3, #32]
 800511a:	4619      	mov	r1, r3
 800511c:	4a5e      	ldr	r2, [pc, #376]	; (8005298 <Motor_Reset+0x61c>)
 800511e:	460b      	mov	r3, r1
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	440b      	add	r3, r1
 8005124:	015b      	lsls	r3, r3, #5
 8005126:	4413      	add	r3, r2
 8005128:	334c      	adds	r3, #76	; 0x4c
 800512a:	2202      	movs	r2, #2
 800512c:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(MotorResetDelay);
 800512e:	2078      	movs	r0, #120	; 0x78
 8005130:	f000 feb8 	bl	8005ea4 <HAL_Delay>
		if (Motor4_Nreset_OPTstatus){
 8005134:	2140      	movs	r1, #64	; 0x40
 8005136:	4859      	ldr	r0, [pc, #356]	; (800529c <Motor_Reset+0x620>)
 8005138:	f002 fd1a 	bl	8007b70 <HAL_GPIO_ReadPin>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d142      	bne.n	80051c8 <Motor_Reset+0x54c>
			temp->MotorDirection = 0 ;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp->NumberofRads = 10 ;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a54      	ldr	r2, [pc, #336]	; (80052a0 <Motor_Reset+0x624>)
 800514e:	625a      	str	r2, [r3, #36]	; 0x24
			MotorMove_steps(temp);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7fe ff33 	bl	8003fbc <MotorMove_steps>
			for(uint32_t i=0 ; Motor4_Nreset_OPTstatus ; i++){
 8005156:	2300      	movs	r3, #0
 8005158:	61bb      	str	r3, [r7, #24]
 800515a:	e01f      	b.n	800519c <Motor_Reset+0x520>
				if(i>8000) {
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8005162:	d915      	bls.n	8005190 <Motor_Reset+0x514>
					printf("[WRONG] Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 3020 	ldrb.w	r3, [r3, #32]
 800516a:	4619      	mov	r1, r3
 800516c:	4849      	ldr	r0, [pc, #292]	; (8005294 <Motor_Reset+0x618>)
 800516e:	f00a f90b 	bl	800f388 <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005178:	4619      	mov	r1, r3
 800517a:	4a47      	ldr	r2, [pc, #284]	; (8005298 <Motor_Reset+0x61c>)
 800517c:	460b      	mov	r3, r1
 800517e:	005b      	lsls	r3, r3, #1
 8005180:	440b      	add	r3, r1
 8005182:	015b      	lsls	r3, r3, #5
 8005184:	4413      	add	r3, r2
 8005186:	334c      	adds	r3, #76	; 0x4c
 8005188:	2202      	movs	r2, #2
 800518a:	601a      	str	r2, [r3, #0]
					return FAIL;
 800518c:	2300      	movs	r3, #0
 800518e:	e169      	b.n	8005464 <Motor_Reset+0x7e8>
				}
				else {HAL_Delay(1);}
 8005190:	2001      	movs	r0, #1
 8005192:	f000 fe87 	bl	8005ea4 <HAL_Delay>
			for(uint32_t i=0 ; Motor4_Nreset_OPTstatus ; i++){
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	3301      	adds	r3, #1
 800519a:	61bb      	str	r3, [r7, #24]
 800519c:	2140      	movs	r1, #64	; 0x40
 800519e:	483f      	ldr	r0, [pc, #252]	; (800529c <Motor_Reset+0x620>)
 80051a0:	f002 fce6 	bl	8007b70 <HAL_GPIO_ReadPin>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0d8      	beq.n	800515c <Motor_Reset+0x4e0>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051b0:	4619      	mov	r1, r3
 80051b2:	4a39      	ldr	r2, [pc, #228]	; (8005298 <Motor_Reset+0x61c>)
 80051b4:	460b      	mov	r3, r1
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	440b      	add	r3, r1
 80051ba:	015b      	lsls	r3, r3, #5
 80051bc:	4413      	add	r3, r2
 80051be:	334c      	adds	r3, #76	; 0x4c
 80051c0:	2202      	movs	r2, #2
 80051c2:	601a      	str	r2, [r3, #0]
			return SUCCESS;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e14d      	b.n	8005464 <Motor_Reset+0x7e8>
		}
	}

	if (temp->MotorNumber == 5){
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051ce:	2b05      	cmp	r3, #5
 80051d0:	f040 80a4 	bne.w	800531c <Motor_Reset+0x6a0>
		if ( Motor5_reset_OPTstatus ){
 80051d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80051d8:	4832      	ldr	r0, [pc, #200]	; (80052a4 <Motor_Reset+0x628>)
 80051da:	f002 fcc9 	bl	8007b70 <HAL_GPIO_ReadPin>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d141      	bne.n	8005268 <Motor_Reset+0x5ec>
			temp->MotorDirection = 1 ;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7ff fbd7 	bl	80049a0 <MotorRun_LowSpeed>
			HAL_Delay(MotorResetDelay);
 80051f2:	2078      	movs	r0, #120	; 0x78
 80051f4:	f000 fe56 	bl	8005ea4 <HAL_Delay>
			for(uint32_t i=0 ; Motor5_reset_OPTstatus ; i++){
 80051f8:	2300      	movs	r3, #0
 80051fa:	617b      	str	r3, [r7, #20]
 80051fc:	e01f      	b.n	800523e <Motor_Reset+0x5c2>
				if(i>500) {
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005204:	d915      	bls.n	8005232 <Motor_Reset+0x5b6>
					printf("[WRONG1]Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 3020 	ldrb.w	r3, [r3, #32]
 800520c:	4619      	mov	r1, r3
 800520e:	4826      	ldr	r0, [pc, #152]	; (80052a8 <Motor_Reset+0x62c>)
 8005210:	f00a f8ba 	bl	800f388 <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3020 	ldrb.w	r3, [r3, #32]
 800521a:	4619      	mov	r1, r3
 800521c:	4a1e      	ldr	r2, [pc, #120]	; (8005298 <Motor_Reset+0x61c>)
 800521e:	460b      	mov	r3, r1
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	440b      	add	r3, r1
 8005224:	015b      	lsls	r3, r3, #5
 8005226:	4413      	add	r3, r2
 8005228:	334c      	adds	r3, #76	; 0x4c
 800522a:	2202      	movs	r2, #2
 800522c:	601a      	str	r2, [r3, #0]
					return FAIL;
 800522e:	2300      	movs	r3, #0
 8005230:	e118      	b.n	8005464 <Motor_Reset+0x7e8>
				}
				else {HAL_Delay(1);}
 8005232:	2001      	movs	r0, #1
 8005234:	f000 fe36 	bl	8005ea4 <HAL_Delay>
			for(uint32_t i=0 ; Motor5_reset_OPTstatus ; i++){
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	3301      	adds	r3, #1
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005242:	4818      	ldr	r0, [pc, #96]	; (80052a4 <Motor_Reset+0x628>)
 8005244:	f002 fc94 	bl	8007b70 <HAL_GPIO_ReadPin>
 8005248:	4603      	mov	r3, r0
 800524a:	2b01      	cmp	r3, #1
 800524c:	d0d7      	beq.n	80051fe <Motor_Reset+0x582>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005254:	4619      	mov	r1, r3
 8005256:	4a10      	ldr	r2, [pc, #64]	; (8005298 <Motor_Reset+0x61c>)
 8005258:	460b      	mov	r3, r1
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	440b      	add	r3, r1
 800525e:	015b      	lsls	r3, r3, #5
 8005260:	4413      	add	r3, r2
 8005262:	334c      	adds	r3, #76	; 0x4c
 8005264:	2202      	movs	r2, #2
 8005266:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(MotorResetDelay);
 8005268:	2078      	movs	r0, #120	; 0x78
 800526a:	f000 fe1b 	bl	8005ea4 <HAL_Delay>
		if (Motor5_Nreset_OPTstatus){
 800526e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005272:	480c      	ldr	r0, [pc, #48]	; (80052a4 <Motor_Reset+0x628>)
 8005274:	f002 fc7c 	bl	8007b70 <HAL_GPIO_ReadPin>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d14e      	bne.n	800531c <Motor_Reset+0x6a0>
			temp->MotorDirection = 0 ;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7ff fb8a 	bl	80049a0 <MotorRun_LowSpeed>
			for(uint32_t i=0 ; Motor5_Nreset_OPTstatus ; i++){
 800528c:	2300      	movs	r3, #0
 800528e:	613b      	str	r3, [r7, #16]
 8005290:	e02d      	b.n	80052ee <Motor_Reset+0x672>
 8005292:	bf00      	nop
 8005294:	08011a18 	.word	0x08011a18
 8005298:	20000a24 	.word	0x20000a24
 800529c:	40020c00 	.word	0x40020c00
 80052a0:	41200000 	.word	0x41200000
 80052a4:	40021800 	.word	0x40021800
 80052a8:	08011a70 	.word	0x08011a70
				if(i>5000) {
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d915      	bls.n	80052e2 <Motor_Reset+0x666>
					printf("[WRONG2]Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052bc:	4619      	mov	r1, r3
 80052be:	486b      	ldr	r0, [pc, #428]	; (800546c <Motor_Reset+0x7f0>)
 80052c0:	f00a f862 	bl	800f388 <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052ca:	4619      	mov	r1, r3
 80052cc:	4a68      	ldr	r2, [pc, #416]	; (8005470 <Motor_Reset+0x7f4>)
 80052ce:	460b      	mov	r3, r1
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	440b      	add	r3, r1
 80052d4:	015b      	lsls	r3, r3, #5
 80052d6:	4413      	add	r3, r2
 80052d8:	334c      	adds	r3, #76	; 0x4c
 80052da:	2202      	movs	r2, #2
 80052dc:	601a      	str	r2, [r3, #0]
					return FAIL;
 80052de:	2300      	movs	r3, #0
 80052e0:	e0c0      	b.n	8005464 <Motor_Reset+0x7e8>
				}
				else {HAL_Delay(1);}
 80052e2:	2001      	movs	r0, #1
 80052e4:	f000 fdde 	bl	8005ea4 <HAL_Delay>
			for(uint32_t i=0 ; Motor5_Nreset_OPTstatus ; i++){
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	3301      	adds	r3, #1
 80052ec:	613b      	str	r3, [r7, #16]
 80052ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80052f2:	4860      	ldr	r0, [pc, #384]	; (8005474 <Motor_Reset+0x7f8>)
 80052f4:	f002 fc3c 	bl	8007b70 <HAL_GPIO_ReadPin>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d0d6      	beq.n	80052ac <Motor_Reset+0x630>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005304:	4619      	mov	r1, r3
 8005306:	4a5a      	ldr	r2, [pc, #360]	; (8005470 <Motor_Reset+0x7f4>)
 8005308:	460b      	mov	r3, r1
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	440b      	add	r3, r1
 800530e:	015b      	lsls	r3, r3, #5
 8005310:	4413      	add	r3, r2
 8005312:	334c      	adds	r3, #76	; 0x4c
 8005314:	2202      	movs	r2, #2
 8005316:	601a      	str	r2, [r3, #0]
			return SUCCESS;
 8005318:	2301      	movs	r3, #1
 800531a:	e0a3      	b.n	8005464 <Motor_Reset+0x7e8>
		}
	}

	if (temp->MotorNumber == 6){
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005322:	2b06      	cmp	r3, #6
 8005324:	f040 809d 	bne.w	8005462 <Motor_Reset+0x7e6>
		if ( Motor6_reset_OPTstatus ){
 8005328:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800532c:	4851      	ldr	r0, [pc, #324]	; (8005474 <Motor_Reset+0x7f8>)
 800532e:	f002 fc1f 	bl	8007b70 <HAL_GPIO_ReadPin>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d144      	bne.n	80053c2 <Motor_Reset+0x746>
			temp->MotorDirection = 1 ;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp->NumberofRads = 10 ;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a4d      	ldr	r2, [pc, #308]	; (8005478 <Motor_Reset+0x7fc>)
 8005344:	625a      	str	r2, [r3, #36]	; 0x24
			MotorRun_LowSpeed(temp);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7ff fb2a 	bl	80049a0 <MotorRun_LowSpeed>
			HAL_Delay(MotorResetDelay);
 800534c:	2078      	movs	r0, #120	; 0x78
 800534e:	f000 fda9 	bl	8005ea4 <HAL_Delay>
			for(uint32_t i=0 ; Motor6_reset_OPTstatus ; i++){
 8005352:	2300      	movs	r3, #0
 8005354:	60fb      	str	r3, [r7, #12]
 8005356:	e01f      	b.n	8005398 <Motor_Reset+0x71c>
				if(i>500) {
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800535e:	d915      	bls.n	800538c <Motor_Reset+0x710>
					printf("[WRONG]1Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005366:	4619      	mov	r1, r3
 8005368:	4844      	ldr	r0, [pc, #272]	; (800547c <Motor_Reset+0x800>)
 800536a:	f00a f80d 	bl	800f388 <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005374:	4619      	mov	r1, r3
 8005376:	4a3e      	ldr	r2, [pc, #248]	; (8005470 <Motor_Reset+0x7f4>)
 8005378:	460b      	mov	r3, r1
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	440b      	add	r3, r1
 800537e:	015b      	lsls	r3, r3, #5
 8005380:	4413      	add	r3, r2
 8005382:	334c      	adds	r3, #76	; 0x4c
 8005384:	2202      	movs	r2, #2
 8005386:	601a      	str	r2, [r3, #0]
					return FAIL;
 8005388:	2300      	movs	r3, #0
 800538a:	e06b      	b.n	8005464 <Motor_Reset+0x7e8>
				}
				else {HAL_Delay(1);}
 800538c:	2001      	movs	r0, #1
 800538e:	f000 fd89 	bl	8005ea4 <HAL_Delay>
			for(uint32_t i=0 ; Motor6_reset_OPTstatus ; i++){
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	3301      	adds	r3, #1
 8005396:	60fb      	str	r3, [r7, #12]
 8005398:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800539c:	4835      	ldr	r0, [pc, #212]	; (8005474 <Motor_Reset+0x7f8>)
 800539e:	f002 fbe7 	bl	8007b70 <HAL_GPIO_ReadPin>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0d7      	beq.n	8005358 <Motor_Reset+0x6dc>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053ae:	4619      	mov	r1, r3
 80053b0:	4a2f      	ldr	r2, [pc, #188]	; (8005470 <Motor_Reset+0x7f4>)
 80053b2:	460b      	mov	r3, r1
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	440b      	add	r3, r1
 80053b8:	015b      	lsls	r3, r3, #5
 80053ba:	4413      	add	r3, r2
 80053bc:	334c      	adds	r3, #76	; 0x4c
 80053be:	2202      	movs	r2, #2
 80053c0:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(MotorResetDelay);
 80053c2:	2078      	movs	r0, #120	; 0x78
 80053c4:	f000 fd6e 	bl	8005ea4 <HAL_Delay>
		if (Motor6_Nreset_OPTstatus){
 80053c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80053cc:	4829      	ldr	r0, [pc, #164]	; (8005474 <Motor_Reset+0x7f8>)
 80053ce:	f002 fbcf 	bl	8007b70 <HAL_GPIO_ReadPin>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d144      	bne.n	8005462 <Motor_Reset+0x7e6>
			temp->MotorDirection = 0 ;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp->NumberofRads = 50 ;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a27      	ldr	r2, [pc, #156]	; (8005480 <Motor_Reset+0x804>)
 80053e4:	625a      	str	r2, [r3, #36]	; 0x24
			MotorRun_LowSpeed(temp);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7ff fada 	bl	80049a0 <MotorRun_LowSpeed>
			for(uint32_t i=0 ; Motor6_Nreset_OPTstatus ; i++){
 80053ec:	2300      	movs	r3, #0
 80053ee:	60bb      	str	r3, [r7, #8]
 80053f0:	e020      	b.n	8005434 <Motor_Reset+0x7b8>
				if(i>5000) {
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d915      	bls.n	8005428 <Motor_Reset+0x7ac>
					printf("[WRONG]2Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005402:	4619      	mov	r1, r3
 8005404:	481f      	ldr	r0, [pc, #124]	; (8005484 <Motor_Reset+0x808>)
 8005406:	f009 ffbf 	bl	800f388 <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005410:	4619      	mov	r1, r3
 8005412:	4a17      	ldr	r2, [pc, #92]	; (8005470 <Motor_Reset+0x7f4>)
 8005414:	460b      	mov	r3, r1
 8005416:	005b      	lsls	r3, r3, #1
 8005418:	440b      	add	r3, r1
 800541a:	015b      	lsls	r3, r3, #5
 800541c:	4413      	add	r3, r2
 800541e:	334c      	adds	r3, #76	; 0x4c
 8005420:	2202      	movs	r2, #2
 8005422:	601a      	str	r2, [r3, #0]
					return FAIL;
 8005424:	2300      	movs	r3, #0
 8005426:	e01d      	b.n	8005464 <Motor_Reset+0x7e8>
				}
				else {HAL_Delay(1);}
 8005428:	2001      	movs	r0, #1
 800542a:	f000 fd3b 	bl	8005ea4 <HAL_Delay>
			for(uint32_t i=0 ; Motor6_Nreset_OPTstatus ; i++){
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	3301      	adds	r3, #1
 8005432:	60bb      	str	r3, [r7, #8]
 8005434:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005438:	480e      	ldr	r0, [pc, #56]	; (8005474 <Motor_Reset+0x7f8>)
 800543a:	f002 fb99 	bl	8007b70 <HAL_GPIO_ReadPin>
 800543e:	4603      	mov	r3, r0
 8005440:	2b01      	cmp	r3, #1
 8005442:	d0d6      	beq.n	80053f2 <Motor_Reset+0x776>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 3020 	ldrb.w	r3, [r3, #32]
 800544a:	4619      	mov	r1, r3
 800544c:	4a08      	ldr	r2, [pc, #32]	; (8005470 <Motor_Reset+0x7f4>)
 800544e:	460b      	mov	r3, r1
 8005450:	005b      	lsls	r3, r3, #1
 8005452:	440b      	add	r3, r1
 8005454:	015b      	lsls	r3, r3, #5
 8005456:	4413      	add	r3, r2
 8005458:	334c      	adds	r3, #76	; 0x4c
 800545a:	2202      	movs	r2, #2
 800545c:	601a      	str	r2, [r3, #0]
			return SUCCESS;
 800545e:	2301      	movs	r3, #1
 8005460:	e000      	b.n	8005464 <Motor_Reset+0x7e8>
		}
	}


	return FAIL;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3738      	adds	r7, #56	; 0x38
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	08011a9c 	.word	0x08011a9c
 8005470:	20000a24 	.word	0x20000a24
 8005474:	40021800 	.word	0x40021800
 8005478:	41200000 	.word	0x41200000
 800547c:	08011ac8 	.word	0x08011ac8
 8005480:	42480000 	.word	0x42480000
 8005484:	08011af4 	.word	0x08011af4

08005488 <DC_Motor_ON>:

/*            *****************    0x10-0b00010000 直流电机控制模式 ：  ******************
根据协议，通过USART5进行出串口通讯，输入直流电机的【编号、AB相、占空比】参数
Status - 0x02 代表A相使能，0x01代表B相使能。同一个电机的AB相占空比一致 ***/
void DC_Motor_ON(struct MotorDefine *temp ,char x, uint32_t Duty_Cycle)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	460b      	mov	r3, r1
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	72fb      	strb	r3, [r7, #11]
	if ( x == 'A' ){
 8005496:	7afb      	ldrb	r3, [r7, #11]
 8005498:	2b41      	cmp	r3, #65	; 0x41
 800549a:	d13d      	bne.n	8005518 <DC_Motor_ON+0x90>
		Motor[temp->MotorNumber].Status = Motor[temp->MotorNumber].Status | 0b00000010 ;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054a2:	4619      	mov	r1, r3
 80054a4:	4a61      	ldr	r2, [pc, #388]	; (800562c <DC_Motor_ON+0x1a4>)
 80054a6:	460b      	mov	r3, r1
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	440b      	add	r3, r1
 80054ac:	015b      	lsls	r3, r3, #5
 80054ae:	4413      	add	r3, r2
 80054b0:	3330      	adds	r3, #48	; 0x30
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80054ba:	4611      	mov	r1, r2
 80054bc:	f043 0302 	orr.w	r3, r3, #2
 80054c0:	b2d8      	uxtb	r0, r3
 80054c2:	4a5a      	ldr	r2, [pc, #360]	; (800562c <DC_Motor_ON+0x1a4>)
 80054c4:	460b      	mov	r3, r1
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	440b      	add	r3, r1
 80054ca:	015b      	lsls	r3, r3, #5
 80054cc:	4413      	add	r3, r2
 80054ce:	3330      	adds	r3, #48	; 0x30
 80054d0:	4602      	mov	r2, r0
 80054d2:	701a      	strb	r2, [r3, #0]
		if ( temp->MotorNumber == 6 ){
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054da:	2b06      	cmp	r3, #6
 80054dc:	d105      	bne.n	80054ea <DC_Motor_ON+0x62>
			VM6_Enable_A();
 80054de:	2201      	movs	r2, #1
 80054e0:	2180      	movs	r1, #128	; 0x80
 80054e2:	4853      	ldr	r0, [pc, #332]	; (8005630 <DC_Motor_ON+0x1a8>)
 80054e4:	f002 fb5c 	bl	8007ba0 <HAL_GPIO_WritePin>
 80054e8:	e057      	b.n	800559a <DC_Motor_ON+0x112>
		}
		else if ( temp->MotorNumber == 7 ){
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054f0:	2b07      	cmp	r3, #7
 80054f2:	d105      	bne.n	8005500 <DC_Motor_ON+0x78>
			VM7_Enable_A();
 80054f4:	2201      	movs	r2, #1
 80054f6:	2101      	movs	r1, #1
 80054f8:	484e      	ldr	r0, [pc, #312]	; (8005634 <DC_Motor_ON+0x1ac>)
 80054fa:	f002 fb51 	bl	8007ba0 <HAL_GPIO_WritePin>
 80054fe:	e04c      	b.n	800559a <DC_Motor_ON+0x112>
		}
		else if ( temp->MotorNumber == 8 ){
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005506:	2b08      	cmp	r3, #8
 8005508:	d147      	bne.n	800559a <DC_Motor_ON+0x112>
			VM8_Enable_A();
 800550a:	2201      	movs	r2, #1
 800550c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005510:	4849      	ldr	r0, [pc, #292]	; (8005638 <DC_Motor_ON+0x1b0>)
 8005512:	f002 fb45 	bl	8007ba0 <HAL_GPIO_WritePin>
 8005516:	e040      	b.n	800559a <DC_Motor_ON+0x112>
		}
	}
	else if ( x == 'B' ){
 8005518:	7afb      	ldrb	r3, [r7, #11]
 800551a:	2b42      	cmp	r3, #66	; 0x42
 800551c:	d13d      	bne.n	800559a <DC_Motor_ON+0x112>
		Motor[temp->MotorNumber].Status = Motor[temp->MotorNumber].Status | 0b00000001 ;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005524:	4619      	mov	r1, r3
 8005526:	4a41      	ldr	r2, [pc, #260]	; (800562c <DC_Motor_ON+0x1a4>)
 8005528:	460b      	mov	r3, r1
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	440b      	add	r3, r1
 800552e:	015b      	lsls	r3, r3, #5
 8005530:	4413      	add	r3, r2
 8005532:	3330      	adds	r3, #48	; 0x30
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	f892 2020 	ldrb.w	r2, [r2, #32]
 800553c:	4611      	mov	r1, r2
 800553e:	f043 0301 	orr.w	r3, r3, #1
 8005542:	b2d8      	uxtb	r0, r3
 8005544:	4a39      	ldr	r2, [pc, #228]	; (800562c <DC_Motor_ON+0x1a4>)
 8005546:	460b      	mov	r3, r1
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	440b      	add	r3, r1
 800554c:	015b      	lsls	r3, r3, #5
 800554e:	4413      	add	r3, r2
 8005550:	3330      	adds	r3, #48	; 0x30
 8005552:	4602      	mov	r2, r0
 8005554:	701a      	strb	r2, [r3, #0]
		if ( temp->MotorNumber == 6 ){
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f893 3020 	ldrb.w	r3, [r3, #32]
 800555c:	2b06      	cmp	r3, #6
 800555e:	d105      	bne.n	800556c <DC_Motor_ON+0xe4>
			VM6_Enable_B();
 8005560:	2201      	movs	r2, #1
 8005562:	2102      	movs	r1, #2
 8005564:	4833      	ldr	r0, [pc, #204]	; (8005634 <DC_Motor_ON+0x1ac>)
 8005566:	f002 fb1b 	bl	8007ba0 <HAL_GPIO_WritePin>
 800556a:	e016      	b.n	800559a <DC_Motor_ON+0x112>
		}
		else if ( temp->MotorNumber == 7 ){
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005572:	2b07      	cmp	r3, #7
 8005574:	d106      	bne.n	8005584 <DC_Motor_ON+0xfc>
			VM7_Enable_B();
 8005576:	2201      	movs	r2, #1
 8005578:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800557c:	482e      	ldr	r0, [pc, #184]	; (8005638 <DC_Motor_ON+0x1b0>)
 800557e:	f002 fb0f 	bl	8007ba0 <HAL_GPIO_WritePin>
 8005582:	e00a      	b.n	800559a <DC_Motor_ON+0x112>
		}
		else if ( temp->MotorNumber == 8 ){
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f893 3020 	ldrb.w	r3, [r3, #32]
 800558a:	2b08      	cmp	r3, #8
 800558c:	d105      	bne.n	800559a <DC_Motor_ON+0x112>
			VM8_Enable_B();
 800558e:	2201      	movs	r2, #1
 8005590:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005594:	4828      	ldr	r0, [pc, #160]	; (8005638 <DC_Motor_ON+0x1b0>)
 8005596:	f002 fb03 	bl	8007ba0 <HAL_GPIO_WritePin>
		}
	}

	Motor[temp->MotorNumber].NumberofSteps_StopAccel = Duty_Cycle;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055a0:	4619      	mov	r1, r3
 80055a2:	4a22      	ldr	r2, [pc, #136]	; (800562c <DC_Motor_ON+0x1a4>)
 80055a4:	460b      	mov	r3, r1
 80055a6:	005b      	lsls	r3, r3, #1
 80055a8:	440b      	add	r3, r1
 80055aa:	015b      	lsls	r3, r3, #5
 80055ac:	4413      	add	r3, r2
 80055ae:	3350      	adds	r3, #80	; 0x50
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].AccelerationTimeTMR = Duty_Cycle * Motor[temp->MotorNumber].StepperSpeedTMR / Motor[temp->MotorNumber].DecelerationTimeTMR ;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055ba:	4619      	mov	r1, r3
 80055bc:	4a1b      	ldr	r2, [pc, #108]	; (800562c <DC_Motor_ON+0x1a4>)
 80055be:	460b      	mov	r3, r1
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	440b      	add	r3, r1
 80055c4:	015b      	lsls	r3, r3, #5
 80055c6:	4413      	add	r3, r2
 80055c8:	3348      	adds	r3, #72	; 0x48
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	fb03 f202 	mul.w	r2, r3, r2
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055d8:	4618      	mov	r0, r3
 80055da:	4914      	ldr	r1, [pc, #80]	; (800562c <DC_Motor_ON+0x1a4>)
 80055dc:	4603      	mov	r3, r0
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	4403      	add	r3, r0
 80055e2:	015b      	lsls	r3, r3, #5
 80055e4:	440b      	add	r3, r1
 80055e6:	335c      	adds	r3, #92	; 0x5c
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68f9      	ldr	r1, [r7, #12]
 80055ec:	f891 1020 	ldrb.w	r1, [r1, #32]
 80055f0:	4608      	mov	r0, r1
 80055f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80055f6:	490d      	ldr	r1, [pc, #52]	; (800562c <DC_Motor_ON+0x1a4>)
 80055f8:	4603      	mov	r3, r0
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	4403      	add	r3, r0
 80055fe:	015b      	lsls	r3, r3, #5
 8005600:	440b      	add	r3, r1
 8005602:	3358      	adds	r3, #88	; 0x58
 8005604:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(Motor[temp->MotorNumber].htim_x);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f893 3020 	ldrb.w	r3, [r3, #32]
 800560c:	4619      	mov	r1, r3
 800560e:	4a07      	ldr	r2, [pc, #28]	; (800562c <DC_Motor_ON+0x1a4>)
 8005610:	460b      	mov	r3, r1
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	440b      	add	r3, r1
 8005616:	015b      	lsls	r3, r3, #5
 8005618:	4413      	add	r3, r2
 800561a:	3334      	adds	r3, #52	; 0x34
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4618      	mov	r0, r3
 8005620:	f004 fe1c 	bl	800a25c <HAL_TIM_Base_Start_IT>
}
 8005624:	bf00      	nop
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	20000a24 	.word	0x20000a24
 8005630:	40021000 	.word	0x40021000
 8005634:	40021800 	.word	0x40021800
 8005638:	40021400 	.word	0x40021400

0800563c <DC_Motor_OFF>:

void DC_Motor_OFF(struct MotorDefine *temp ,char x)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	460b      	mov	r3, r1
 8005646:	70fb      	strb	r3, [r7, #3]
	if ( x == 'A' ){
 8005648:	78fb      	ldrb	r3, [r7, #3]
 800564a:	2b41      	cmp	r3, #65	; 0x41
 800564c:	d13d      	bne.n	80056ca <DC_Motor_OFF+0x8e>
		Motor[temp->MotorNumber].Status = Motor[temp->MotorNumber].Status & 0b11111101 ;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005654:	4619      	mov	r1, r3
 8005656:	4a4e      	ldr	r2, [pc, #312]	; (8005790 <DC_Motor_OFF+0x154>)
 8005658:	460b      	mov	r3, r1
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	440b      	add	r3, r1
 800565e:	015b      	lsls	r3, r3, #5
 8005660:	4413      	add	r3, r2
 8005662:	3330      	adds	r3, #48	; 0x30
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	f892 2020 	ldrb.w	r2, [r2, #32]
 800566c:	4611      	mov	r1, r2
 800566e:	f023 0302 	bic.w	r3, r3, #2
 8005672:	b2d8      	uxtb	r0, r3
 8005674:	4a46      	ldr	r2, [pc, #280]	; (8005790 <DC_Motor_OFF+0x154>)
 8005676:	460b      	mov	r3, r1
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	440b      	add	r3, r1
 800567c:	015b      	lsls	r3, r3, #5
 800567e:	4413      	add	r3, r2
 8005680:	3330      	adds	r3, #48	; 0x30
 8005682:	4602      	mov	r2, r0
 8005684:	701a      	strb	r2, [r3, #0]
		if ( temp->MotorNumber == 6 ){
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 3020 	ldrb.w	r3, [r3, #32]
 800568c:	2b06      	cmp	r3, #6
 800568e:	d105      	bne.n	800569c <DC_Motor_OFF+0x60>
			VM6_Disable_A();
 8005690:	2200      	movs	r2, #0
 8005692:	2180      	movs	r1, #128	; 0x80
 8005694:	483f      	ldr	r0, [pc, #252]	; (8005794 <DC_Motor_OFF+0x158>)
 8005696:	f002 fa83 	bl	8007ba0 <HAL_GPIO_WritePin>
 800569a:	e057      	b.n	800574c <DC_Motor_OFF+0x110>
		}
		else if ( temp->MotorNumber == 7 ){
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056a2:	2b07      	cmp	r3, #7
 80056a4:	d105      	bne.n	80056b2 <DC_Motor_OFF+0x76>
			VM7_Disable_A();
 80056a6:	2200      	movs	r2, #0
 80056a8:	2101      	movs	r1, #1
 80056aa:	483b      	ldr	r0, [pc, #236]	; (8005798 <DC_Motor_OFF+0x15c>)
 80056ac:	f002 fa78 	bl	8007ba0 <HAL_GPIO_WritePin>
 80056b0:	e04c      	b.n	800574c <DC_Motor_OFF+0x110>
		}
		else if ( temp->MotorNumber == 8 ){
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	d147      	bne.n	800574c <DC_Motor_OFF+0x110>
			VM8_Disable_A();
 80056bc:	2200      	movs	r2, #0
 80056be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80056c2:	4836      	ldr	r0, [pc, #216]	; (800579c <DC_Motor_OFF+0x160>)
 80056c4:	f002 fa6c 	bl	8007ba0 <HAL_GPIO_WritePin>
 80056c8:	e040      	b.n	800574c <DC_Motor_OFF+0x110>
		}
	}
	else if ( x == 'B' ){
 80056ca:	78fb      	ldrb	r3, [r7, #3]
 80056cc:	2b42      	cmp	r3, #66	; 0x42
 80056ce:	d13d      	bne.n	800574c <DC_Motor_OFF+0x110>
		Motor[temp->MotorNumber].Status = Motor[temp->MotorNumber].Status & 0b11111110 ;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056d6:	4619      	mov	r1, r3
 80056d8:	4a2d      	ldr	r2, [pc, #180]	; (8005790 <DC_Motor_OFF+0x154>)
 80056da:	460b      	mov	r3, r1
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	440b      	add	r3, r1
 80056e0:	015b      	lsls	r3, r3, #5
 80056e2:	4413      	add	r3, r2
 80056e4:	3330      	adds	r3, #48	; 0x30
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	f892 2020 	ldrb.w	r2, [r2, #32]
 80056ee:	4611      	mov	r1, r2
 80056f0:	f023 0301 	bic.w	r3, r3, #1
 80056f4:	b2d8      	uxtb	r0, r3
 80056f6:	4a26      	ldr	r2, [pc, #152]	; (8005790 <DC_Motor_OFF+0x154>)
 80056f8:	460b      	mov	r3, r1
 80056fa:	005b      	lsls	r3, r3, #1
 80056fc:	440b      	add	r3, r1
 80056fe:	015b      	lsls	r3, r3, #5
 8005700:	4413      	add	r3, r2
 8005702:	3330      	adds	r3, #48	; 0x30
 8005704:	4602      	mov	r2, r0
 8005706:	701a      	strb	r2, [r3, #0]
		if ( temp->MotorNumber == 6 ){
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800570e:	2b06      	cmp	r3, #6
 8005710:	d105      	bne.n	800571e <DC_Motor_OFF+0xe2>
			VM6_Disable_B();
 8005712:	2200      	movs	r2, #0
 8005714:	2102      	movs	r1, #2
 8005716:	4820      	ldr	r0, [pc, #128]	; (8005798 <DC_Motor_OFF+0x15c>)
 8005718:	f002 fa42 	bl	8007ba0 <HAL_GPIO_WritePin>
 800571c:	e016      	b.n	800574c <DC_Motor_OFF+0x110>
		}
		else if ( temp->MotorNumber == 7 ){
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005724:	2b07      	cmp	r3, #7
 8005726:	d106      	bne.n	8005736 <DC_Motor_OFF+0xfa>
			VM7_Disable_B();
 8005728:	2200      	movs	r2, #0
 800572a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800572e:	481b      	ldr	r0, [pc, #108]	; (800579c <DC_Motor_OFF+0x160>)
 8005730:	f002 fa36 	bl	8007ba0 <HAL_GPIO_WritePin>
 8005734:	e00a      	b.n	800574c <DC_Motor_OFF+0x110>
		}
		else if ( temp->MotorNumber == 8 ){
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 3020 	ldrb.w	r3, [r3, #32]
 800573c:	2b08      	cmp	r3, #8
 800573e:	d105      	bne.n	800574c <DC_Motor_OFF+0x110>
			VM8_Disable_B();
 8005740:	2200      	movs	r2, #0
 8005742:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005746:	4815      	ldr	r0, [pc, #84]	; (800579c <DC_Motor_OFF+0x160>)
 8005748:	f002 fa2a 	bl	8007ba0 <HAL_GPIO_WritePin>
		}
	}

	if ( Motor[6].Status | Motor[7].Status | Motor[8].Status ){;}
 800574c:	4b10      	ldr	r3, [pc, #64]	; (8005790 <DC_Motor_OFF+0x154>)
 800574e:	f893 2270 	ldrb.w	r2, [r3, #624]	; 0x270
 8005752:	4b0f      	ldr	r3, [pc, #60]	; (8005790 <DC_Motor_OFF+0x154>)
 8005754:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
 8005758:	4313      	orrs	r3, r2
 800575a:	b2da      	uxtb	r2, r3
 800575c:	4b0c      	ldr	r3, [pc, #48]	; (8005790 <DC_Motor_OFF+0x154>)
 800575e:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8005762:	4313      	orrs	r3, r2
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10e      	bne.n	8005788 <DC_Motor_OFF+0x14c>
	else{
		HAL_TIM_Base_Stop_IT(Motor[temp->MotorNumber].htim_x);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005770:	4619      	mov	r1, r3
 8005772:	4a07      	ldr	r2, [pc, #28]	; (8005790 <DC_Motor_OFF+0x154>)
 8005774:	460b      	mov	r3, r1
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	440b      	add	r3, r1
 800577a:	015b      	lsls	r3, r3, #5
 800577c:	4413      	add	r3, r2
 800577e:	3334      	adds	r3, #52	; 0x34
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4618      	mov	r0, r3
 8005784:	f004 fdda 	bl	800a33c <HAL_TIM_Base_Stop_IT>
	}
}
 8005788:	bf00      	nop
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	20000a24 	.word	0x20000a24
 8005794:	40021000 	.word	0x40021000
 8005798:	40021800 	.word	0x40021800
 800579c:	40021400 	.word	0x40021400

080057a0 <Motor6_MicroSteps_Table_Init>:
		{32 , 98 , -20},
};

uint16_t Motor6_MicroSteps_Increment ;
void Motor6_MicroSteps_Table_Init(void)
{
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0
	Motor6_MicroSteps_Increment = 8/Motor[6].mircro_steps ;
 80057a4:	4b06      	ldr	r3, [pc, #24]	; (80057c0 <Motor6_MicroSteps_Table_Init+0x20>)
 80057a6:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 80057aa:	2208      	movs	r2, #8
 80057ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	4b04      	ldr	r3, [pc, #16]	; (80057c4 <Motor6_MicroSteps_Table_Init+0x24>)
 80057b4:	801a      	strh	r2, [r3, #0]
}
 80057b6:	bf00      	nop
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr
 80057c0:	20000a24 	.word	0x20000a24
 80057c4:	20000de4 	.word	0x20000de4

080057c8 <Start_DMA_ADC1_CH10CH11>:
uint16_t ADC_Values[2]={0};


//DMA循环扫描ADC，调用一次即可持续采集，特别注意：main函数中DMA初始化放在ADC初始化前面
void Start_DMA_ADC1_CH10CH11(void)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)ADC_Values,2);
 80057cc:	2202      	movs	r2, #2
 80057ce:	4903      	ldr	r1, [pc, #12]	; (80057dc <Start_DMA_ADC1_CH10CH11+0x14>)
 80057d0:	4803      	ldr	r0, [pc, #12]	; (80057e0 <Start_DMA_ADC1_CH10CH11+0x18>)
 80057d2:	f000 fd2d 	bl	8006230 <HAL_ADC_Start_DMA>
}
 80057d6:	bf00      	nop
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	20000de8 	.word	0x20000de8
 80057e0:	2000037c 	.word	0x2000037c

080057e4 <STOP_DMA_ADC1_CH10CH11>:

void STOP_DMA_ADC1_CH10CH11(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 80057e8:	4802      	ldr	r0, [pc, #8]	; (80057f4 <STOP_DMA_ADC1_CH10CH11+0x10>)
 80057ea:	f000 fe31 	bl	8006450 <HAL_ADC_Stop_DMA>
}
 80057ee:	bf00      	nop
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	2000037c 	.word	0x2000037c

080057f8 <Get_ADC1_Value>:

uint16_t Get_ADC1_Value(uint32_t channel_x)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef ADC1_ChanConf;

	ADC1_ChanConf.Channel = channel_x;                            	//通道
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	60bb      	str	r3, [r7, #8]
	ADC1_ChanConf.Rank = 1;                                       	//第1个序列，序列1
 8005804:	2301      	movs	r3, #1
 8005806:	60fb      	str	r3, [r7, #12]
	ADC1_ChanConf.SamplingTime = ADC_SAMPLETIME_15CYCLES;      		//采样时间
 8005808:	2301      	movs	r3, #1
 800580a:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(&hadc1, &ADC1_ChanConf) != HAL_OK) 	//通道配置
 800580c:	f107 0308 	add.w	r3, r7, #8
 8005810:	4619      	mov	r1, r3
 8005812:	480c      	ldr	r0, [pc, #48]	; (8005844 <Get_ADC1_Value+0x4c>)
 8005814:	f000 fea2 	bl	800655c <HAL_ADC_ConfigChannel>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <Get_ADC1_Value+0x2a>
	{
		Error_Handler();
 800581e:	f7fc ff09 	bl	8002634 <Error_Handler>
	}
	HAL_ADC_Start(&hadc1);                               	//开启ADC
 8005822:	4808      	ldr	r0, [pc, #32]	; (8005844 <Get_ADC1_Value+0x4c>)
 8005824:	f000 fba6 	bl	8005f74 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);                	//轮询转换
 8005828:	210a      	movs	r1, #10
 800582a:	4806      	ldr	r0, [pc, #24]	; (8005844 <Get_ADC1_Value+0x4c>)
 800582c:	f000 fc74 	bl	8006118 <HAL_ADC_PollForConversion>

	return (uint16_t) HAL_ADC_GetValue(&hadc1);	 			//返回最近一次ADC1规则组的转换结果
 8005830:	4804      	ldr	r0, [pc, #16]	; (8005844 <Get_ADC1_Value+0x4c>)
 8005832:	f000 fe67 	bl	8006504 <HAL_ADC_GetValue>
 8005836:	4603      	mov	r3, r0
 8005838:	b29b      	uxth	r3, r3
}
 800583a:	4618      	mov	r0, r3
 800583c:	3718      	adds	r7, #24
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	2000037c 	.word	0x2000037c

08005848 <get_ADC1_Current_Phase>:

// get Motor[6] AorB phase current, units:mA
// Phase A: x=0 , Phase B: x=1
uint16_t get_ADC1_Current_Phase(uint8_t x)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	4603      	mov	r3, r0
 8005850:	71fb      	strb	r3, [r7, #7]
	return 0.5*Get_ADC1_Value(x+10);
 8005852:	79fb      	ldrb	r3, [r7, #7]
 8005854:	330a      	adds	r3, #10
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff ffce 	bl	80057f8 <Get_ADC1_Value>
 800585c:	4603      	mov	r3, r0
 800585e:	4618      	mov	r0, r3
 8005860:	f7fa fe60 	bl	8000524 <__aeabi_i2d>
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	4b07      	ldr	r3, [pc, #28]	; (8005888 <get_ADC1_Current_Phase+0x40>)
 800586a:	f7fa fec5 	bl	80005f8 <__aeabi_dmul>
 800586e:	4602      	mov	r2, r0
 8005870:	460b      	mov	r3, r1
 8005872:	4610      	mov	r0, r2
 8005874:	4619      	mov	r1, r3
 8005876:	f7fb f997 	bl	8000ba8 <__aeabi_d2uiz>
 800587a:	4603      	mov	r3, r0
 800587c:	b29b      	uxth	r3, r3
}
 800587e:	4618      	mov	r0, r3
 8005880:	3708      	adds	r7, #8
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	3fe00000 	.word	0x3fe00000

0800588c <deal_buffer_motorCtrl_data>:
#ifndef DushuModule
#ifndef QuanxiePVctrl

struct  MotorDefine Motor_Temp ;
void deal_buffer_motorCtrl_data(struct MotorDefine *a)
{
 800588c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005890:	b08a      	sub	sp, #40	; 0x28
 8005892:	af08      	add	r7, sp, #32
 8005894:	6078      	str	r0, [r7, #4]
	a->MotorNumber = USART5_RX_BUF[1];
 8005896:	4b44      	ldr	r3, [pc, #272]	; (80059a8 <deal_buffer_motorCtrl_data+0x11c>)
 8005898:	785a      	ldrb	r2, [r3, #1]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f883 2020 	strb.w	r2, [r3, #32]

	if ( USART5_RX_BUF[3] & 0b10000000 )  // 0x80
 80058a0:	4b41      	ldr	r3, [pc, #260]	; (80059a8 <deal_buffer_motorCtrl_data+0x11c>)
 80058a2:	78db      	ldrb	r3, [r3, #3]
 80058a4:	b25b      	sxtb	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	da04      	bge.n	80058b4 <deal_buffer_motorCtrl_data+0x28>
	{
		a->MotorDirection = 1 ;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80058b2:	e009      	b.n	80058c8 <deal_buffer_motorCtrl_data+0x3c>
	}
	else if (USART5_RX_BUF[3] & 0b01000000)	// 0x40
 80058b4:	4b3c      	ldr	r3, [pc, #240]	; (80059a8 <deal_buffer_motorCtrl_data+0x11c>)
 80058b6:	78db      	ldrb	r3, [r3, #3]
 80058b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <deal_buffer_motorCtrl_data+0x3c>
	{
		a->MotorDirection = 0 ;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	//a->DesiredSpeedInRads =  (float)USART5_RX_BUF[4] / 10;
	a->DesiredSpeedInRads =  (float)USART5_RX_BUF[4] ;
 80058c8:	4b37      	ldr	r3, [pc, #220]	; (80059a8 <deal_buffer_motorCtrl_data+0x11c>)
 80058ca:	791b      	ldrb	r3, [r3, #4]
 80058cc:	ee07 3a90 	vmov	s15, r3
 80058d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	edc3 7a05 	vstr	s15, [r3, #20]
	a->NumberofRads = (float)USART5_RX_BUF[5] + (float)USART5_RX_BUF[6] / 100 ;
 80058da:	4b33      	ldr	r3, [pc, #204]	; (80059a8 <deal_buffer_motorCtrl_data+0x11c>)
 80058dc:	795b      	ldrb	r3, [r3, #5]
 80058de:	ee07 3a90 	vmov	s15, r3
 80058e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80058e6:	4b30      	ldr	r3, [pc, #192]	; (80059a8 <deal_buffer_motorCtrl_data+0x11c>)
 80058e8:	799b      	ldrb	r3, [r3, #6]
 80058ea:	ee07 3a90 	vmov	s15, r3
 80058ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058f2:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 80059ac <deal_buffer_motorCtrl_data+0x120>
 80058f6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80058fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	//a->StartupSpeedInRads = (float)USART5_RX_BUF[7] / 10 ;
	a->StartupSpeedInRads =  (float)USART5_RX_BUF[7] ;
 8005904:	4b28      	ldr	r3, [pc, #160]	; (80059a8 <deal_buffer_motorCtrl_data+0x11c>)
 8005906:	79db      	ldrb	r3, [r3, #7]
 8005908:	ee07 3a90 	vmov	s15, r3
 800590c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	edc3 7a04 	vstr	s15, [r3, #16]
	a->accelerationRate = USART5_RX_BUF[8] * 100 ;
 8005916:	4b24      	ldr	r3, [pc, #144]	; (80059a8 <deal_buffer_motorCtrl_data+0x11c>)
 8005918:	7a1b      	ldrb	r3, [r3, #8]
 800591a:	461a      	mov	r2, r3
 800591c:	2364      	movs	r3, #100	; 0x64
 800591e:	fb02 f303 	mul.w	r3, r2, r3
 8005922:	461a      	mov	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	619a      	str	r2, [r3, #24]
	a->decelerationRate = USART5_RX_BUF[9] * 100 ;
 8005928:	4b1f      	ldr	r3, [pc, #124]	; (80059a8 <deal_buffer_motorCtrl_data+0x11c>)
 800592a:	7a5b      	ldrb	r3, [r3, #9]
 800592c:	461a      	mov	r2, r3
 800592e:	2364      	movs	r3, #100	; 0x64
 8005930:	fb02 f303 	mul.w	r3, r2, r3
 8005934:	461a      	mov	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	61da      	str	r2, [r3, #28]

	printf("\r\nInput Information:\r\n");
 800593a:	481d      	ldr	r0, [pc, #116]	; (80059b0 <deal_buffer_motorCtrl_data+0x124>)
 800593c:	f009 fd8a 	bl	800f454 <puts>
	printf("  MotorNumber:%d  MotorDirection:%d\r\n  DesiredSpeedInRads:%.2f\r\n  NumberofRads:%.2f\r\n  StartupSpeedInRads:%.2f\r\n  accelerationRate:%ld /Hz\r\n  decelerationRate:%ld /Hz\r\n"
	,a->MotorNumber,a->MotorDirection,a->DesiredSpeedInRads,a->NumberofRads,a->StartupSpeedInRads,a->accelerationRate,a->decelerationRate);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 3020 	ldrb.w	r3, [r3, #32]
	printf("  MotorNumber:%d  MotorDirection:%d\r\n  DesiredSpeedInRads:%.2f\r\n  NumberofRads:%.2f\r\n  StartupSpeedInRads:%.2f\r\n  accelerationRate:%ld /Hz\r\n  decelerationRate:%ld /Hz\r\n"
 8005946:	461e      	mov	r6, r3
	,a->MotorNumber,a->MotorDirection,a->DesiredSpeedInRads,a->NumberofRads,a->StartupSpeedInRads,a->accelerationRate,a->decelerationRate);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
	printf("  MotorNumber:%d  MotorDirection:%d\r\n  DesiredSpeedInRads:%.2f\r\n  NumberofRads:%.2f\r\n  StartupSpeedInRads:%.2f\r\n  accelerationRate:%ld /Hz\r\n  decelerationRate:%ld /Hz\r\n"
 800594e:	469a      	mov	sl, r3
	,a->MotorNumber,a->MotorDirection,a->DesiredSpeedInRads,a->NumberofRads,a->StartupSpeedInRads,a->accelerationRate,a->decelerationRate);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	695b      	ldr	r3, [r3, #20]
	printf("  MotorNumber:%d  MotorDirection:%d\r\n  DesiredSpeedInRads:%.2f\r\n  NumberofRads:%.2f\r\n  StartupSpeedInRads:%.2f\r\n  accelerationRate:%ld /Hz\r\n  decelerationRate:%ld /Hz\r\n"
 8005954:	4618      	mov	r0, r3
 8005956:	f7fa fdf7 	bl	8000548 <__aeabi_f2d>
 800595a:	4604      	mov	r4, r0
 800595c:	460d      	mov	r5, r1
	,a->MotorNumber,a->MotorDirection,a->DesiredSpeedInRads,a->NumberofRads,a->StartupSpeedInRads,a->accelerationRate,a->decelerationRate);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	printf("  MotorNumber:%d  MotorDirection:%d\r\n  DesiredSpeedInRads:%.2f\r\n  NumberofRads:%.2f\r\n  StartupSpeedInRads:%.2f\r\n  accelerationRate:%ld /Hz\r\n  decelerationRate:%ld /Hz\r\n"
 8005962:	4618      	mov	r0, r3
 8005964:	f7fa fdf0 	bl	8000548 <__aeabi_f2d>
 8005968:	4680      	mov	r8, r0
 800596a:	4689      	mov	r9, r1
	,a->MotorNumber,a->MotorDirection,a->DesiredSpeedInRads,a->NumberofRads,a->StartupSpeedInRads,a->accelerationRate,a->decelerationRate);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691b      	ldr	r3, [r3, #16]
	printf("  MotorNumber:%d  MotorDirection:%d\r\n  DesiredSpeedInRads:%.2f\r\n  NumberofRads:%.2f\r\n  StartupSpeedInRads:%.2f\r\n  accelerationRate:%ld /Hz\r\n  decelerationRate:%ld /Hz\r\n"
 8005970:	4618      	mov	r0, r3
 8005972:	f7fa fde9 	bl	8000548 <__aeabi_f2d>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	6879      	ldr	r1, [r7, #4]
 800597c:	6989      	ldr	r1, [r1, #24]
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	69c0      	ldr	r0, [r0, #28]
 8005982:	9007      	str	r0, [sp, #28]
 8005984:	9106      	str	r1, [sp, #24]
 8005986:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800598a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800598e:	e9cd 4500 	strd	r4, r5, [sp]
 8005992:	4652      	mov	r2, sl
 8005994:	4631      	mov	r1, r6
 8005996:	4807      	ldr	r0, [pc, #28]	; (80059b4 <deal_buffer_motorCtrl_data+0x128>)
 8005998:	f009 fcf6 	bl	800f388 <iprintf>
}
 800599c:	bf00      	nop
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a6:	bf00      	nop
 80059a8:	200008ac 	.word	0x200008ac
 80059ac:	42c80000 	.word	0x42c80000
 80059b0:	08011b5c 	.word	0x08011b5c
 80059b4:	08011b74 	.word	0x08011b74

080059b8 <deal_buffer_motorCtrl_position>:


void deal_buffer_motorCtrl_position(struct MotorDefine *a)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
	a->MotorNumber = USART5_RX_BUF[1];
 80059c0:	4b1b      	ldr	r3, [pc, #108]	; (8005a30 <deal_buffer_motorCtrl_position+0x78>)
 80059c2:	785a      	ldrb	r2, [r3, #1]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f883 2020 	strb.w	r2, [r3, #32]
	if ( USART5_RX_BUF[4] == 1){
 80059ca:	4b19      	ldr	r3, [pc, #100]	; (8005a30 <deal_buffer_motorCtrl_position+0x78>)
 80059cc:	791b      	ldrb	r3, [r3, #4]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d10d      	bne.n	80059ee <deal_buffer_motorCtrl_position+0x36>
		a->TargetPosition = USART5_RX_BUF[7] + USART5_RX_BUF[6] * 16*16 + USART5_RX_BUF[5] * 16*16*16*16 ;
 80059d2:	4b17      	ldr	r3, [pc, #92]	; (8005a30 <deal_buffer_motorCtrl_position+0x78>)
 80059d4:	79db      	ldrb	r3, [r3, #7]
 80059d6:	461a      	mov	r2, r3
 80059d8:	4b15      	ldr	r3, [pc, #84]	; (8005a30 <deal_buffer_motorCtrl_position+0x78>)
 80059da:	799b      	ldrb	r3, [r3, #6]
 80059dc:	021b      	lsls	r3, r3, #8
 80059de:	441a      	add	r2, r3
 80059e0:	4b13      	ldr	r3, [pc, #76]	; (8005a30 <deal_buffer_motorCtrl_position+0x78>)
 80059e2:	795b      	ldrb	r3, [r3, #5]
 80059e4:	041b      	lsls	r3, r3, #16
 80059e6:	441a      	add	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80059ec:	e011      	b.n	8005a12 <deal_buffer_motorCtrl_position+0x5a>
	}
	else if ( USART5_RX_BUF[4] == 0){
 80059ee:	4b10      	ldr	r3, [pc, #64]	; (8005a30 <deal_buffer_motorCtrl_position+0x78>)
 80059f0:	791b      	ldrb	r3, [r3, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10d      	bne.n	8005a12 <deal_buffer_motorCtrl_position+0x5a>
		a->TargetPosition = - (USART5_RX_BUF[7] + USART5_RX_BUF[6] * 16*16 + USART5_RX_BUF[5] * 16*16*16*16) ;
 80059f6:	4b0e      	ldr	r3, [pc, #56]	; (8005a30 <deal_buffer_motorCtrl_position+0x78>)
 80059f8:	79db      	ldrb	r3, [r3, #7]
 80059fa:	461a      	mov	r2, r3
 80059fc:	4b0c      	ldr	r3, [pc, #48]	; (8005a30 <deal_buffer_motorCtrl_position+0x78>)
 80059fe:	799b      	ldrb	r3, [r3, #6]
 8005a00:	021b      	lsls	r3, r3, #8
 8005a02:	441a      	add	r2, r3
 8005a04:	4b0a      	ldr	r3, [pc, #40]	; (8005a30 <deal_buffer_motorCtrl_position+0x78>)
 8005a06:	795b      	ldrb	r3, [r3, #5]
 8005a08:	041b      	lsls	r3, r3, #16
 8005a0a:	4413      	add	r3, r2
 8005a0c:	425a      	negs	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	printf("\r\nInput Information: Motor%d goes to TargetPosition:%ld\r\n",a->MotorNumber,a->TargetPosition);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a18:	4619      	mov	r1, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1e:	461a      	mov	r2, r3
 8005a20:	4804      	ldr	r0, [pc, #16]	; (8005a34 <deal_buffer_motorCtrl_position+0x7c>)
 8005a22:	f009 fcb1 	bl	800f388 <iprintf>
}
 8005a26:	bf00      	nop
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	200008ac 	.word	0x200008ac
 8005a34:	08011c20 	.word	0x08011c20

08005a38 <deal_buffer_motorCtrl_reset>:

void deal_buffer_motorCtrl_reset(struct MotorDefine *a)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
	a->MotorNumber = USART5_RX_BUF[1];
 8005a40:	4b07      	ldr	r3, [pc, #28]	; (8005a60 <deal_buffer_motorCtrl_reset+0x28>)
 8005a42:	785a      	ldrb	r2, [r3, #1]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f883 2020 	strb.w	r2, [r3, #32]

	printf("\r\nInput Information: Reset Motor%d\r\n",a->MotorNumber);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a50:	4619      	mov	r1, r3
 8005a52:	4804      	ldr	r0, [pc, #16]	; (8005a64 <deal_buffer_motorCtrl_reset+0x2c>)
 8005a54:	f009 fc98 	bl	800f388 <iprintf>
}
 8005a58:	bf00      	nop
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	200008ac 	.word	0x200008ac
 8005a64:	08011c5c 	.word	0x08011c5c

08005a68 <deal_buffer_DCmotorCtrl>:

void deal_buffer_DCmotorCtrl(struct MotorDefine *a)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
	a->MotorNumber = USART5_RX_BUF[1];
 8005a70:	4b11      	ldr	r3, [pc, #68]	; (8005ab8 <deal_buffer_DCmotorCtrl+0x50>)
 8005a72:	785a      	ldrb	r2, [r3, #1]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f883 2020 	strb.w	r2, [r3, #32]
	a->NumberofSteps_StopAccel = USART5_RX_BUF[6];
 8005a7a:	4b0f      	ldr	r3, [pc, #60]	; (8005ab8 <deal_buffer_DCmotorCtrl+0x50>)
 8005a7c:	799b      	ldrb	r3, [r3, #6]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	651a      	str	r2, [r3, #80]	; 0x50
	if (USART5_RX_BUF[4] == 0x00 ){
 8005a84:	4b0c      	ldr	r3, [pc, #48]	; (8005ab8 <deal_buffer_DCmotorCtrl+0x50>)
 8005a86:	791b      	ldrb	r3, [r3, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d107      	bne.n	8005a9c <deal_buffer_DCmotorCtrl+0x34>
		printf("\r\nInput Information: DC Motor%d STOP! \r\n",a->MotorNumber);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a92:	4619      	mov	r1, r3
 8005a94:	4809      	ldr	r0, [pc, #36]	; (8005abc <deal_buffer_DCmotorCtrl+0x54>)
 8005a96:	f009 fc77 	bl	800f388 <iprintf>
	}
	else{
		printf("\r\nInput Information: DC Motor%d Run,Duty Cycle: %ld percent\r\n",a->MotorNumber,a->NumberofSteps_StopAccel);
	}
}
 8005a9a:	e009      	b.n	8005ab0 <deal_buffer_DCmotorCtrl+0x48>
		printf("\r\nInput Information: DC Motor%d Run,Duty Cycle: %ld percent\r\n",a->MotorNumber,a->NumberofSteps_StopAccel);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	4805      	ldr	r0, [pc, #20]	; (8005ac0 <deal_buffer_DCmotorCtrl+0x58>)
 8005aac:	f009 fc6c 	bl	800f388 <iprintf>
}
 8005ab0:	bf00      	nop
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	200008ac 	.word	0x200008ac
 8005abc:	08011c84 	.word	0x08011c84
 8005ac0:	08011cb0 	.word	0x08011cb0

08005ac4 <StartmessageTask>:

void StartmessageTask(void *argument)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
	osDelay(20);
 8005acc:	2014      	movs	r0, #20
 8005ace:	f006 faa7 	bl	800c020 <osDelay>
	uint8_t len = 0;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	73fb      	strb	r3, [r7, #15]
	printf("messageTask starts! \r\n");
 8005ad6:	4848      	ldr	r0, [pc, #288]	; (8005bf8 <StartmessageTask+0x134>)
 8005ad8:	f009 fcbc 	bl	800f454 <puts>

	for(;;){
		osDelay(1);
 8005adc:	2001      	movs	r0, #1
 8005ade:	f006 fa9f 	bl	800c020 <osDelay>
	    if(USART_RX_STA&0x8000)
 8005ae2:	4b46      	ldr	r3, [pc, #280]	; (8005bfc <StartmessageTask+0x138>)
 8005ae4:	881b      	ldrh	r3, [r3, #0]
 8005ae6:	b21b      	sxth	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	daf7      	bge.n	8005adc <StartmessageTask+0x18>
		{
	    	len=USART_RX_STA&0x3fff;
 8005aec:	4b43      	ldr	r3, [pc, #268]	; (8005bfc <StartmessageTask+0x138>)
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	73fb      	strb	r3, [r7, #15]

			switch ( USART5_RX_BUF[2] )
 8005af2:	4b43      	ldr	r3, [pc, #268]	; (8005c00 <StartmessageTask+0x13c>)
 8005af4:	789b      	ldrb	r3, [r3, #2]
 8005af6:	2b80      	cmp	r3, #128	; 0x80
 8005af8:	d00e      	beq.n	8005b18 <StartmessageTask+0x54>
 8005afa:	2b80      	cmp	r3, #128	; 0x80
 8005afc:	dcee      	bgt.n	8005adc <StartmessageTask+0x18>
 8005afe:	2b40      	cmp	r3, #64	; 0x40
 8005b00:	d01d      	beq.n	8005b3e <StartmessageTask+0x7a>
 8005b02:	2b40      	cmp	r3, #64	; 0x40
 8005b04:	dcea      	bgt.n	8005adc <StartmessageTask+0x18>
 8005b06:	2b20      	cmp	r3, #32
 8005b08:	d023      	beq.n	8005b52 <StartmessageTask+0x8e>
 8005b0a:	2b20      	cmp	r3, #32
 8005b0c:	dce6      	bgt.n	8005adc <StartmessageTask+0x18>
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d05d      	beq.n	8005bce <StartmessageTask+0x10a>
 8005b12:	2b10      	cmp	r3, #16
 8005b14:	d027      	beq.n	8005b66 <StartmessageTask+0xa2>
 8005b16:	e06d      	b.n	8005bf4 <StartmessageTask+0x130>
			{
			/***   电机控制-位置模式 ，16进制0x80  ***/
			case 0b10000000:
				deal_buffer_motorCtrl_position(&Motor_Temp);
 8005b18:	483a      	ldr	r0, [pc, #232]	; (8005c04 <StartmessageTask+0x140>)
 8005b1a:	f7ff ff4d 	bl	80059b8 <deal_buffer_motorCtrl_position>
				if (USART5_RX_BUF[3] & 0b00000001){			// 不带编码器模式
 8005b1e:	4b38      	ldr	r3, [pc, #224]	; (8005c00 <StartmessageTask+0x13c>)
 8005b20:	78db      	ldrb	r3, [r3, #3]
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d005      	beq.n	8005b36 <StartmessageTask+0x72>
					MotorMove_position(&Motor_Temp,Motor_Temp.TargetPosition);
 8005b2a:	4b36      	ldr	r3, [pc, #216]	; (8005c04 <StartmessageTask+0x140>)
 8005b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2e:	4619      	mov	r1, r3
 8005b30:	4834      	ldr	r0, [pc, #208]	; (8005c04 <StartmessageTask+0x140>)
 8005b32:	f7fe fc0d 	bl	8004350 <MotorMove_position>
#ifdef JiaYangZhen_EncoderMode
				else if (USART5_RX_BUF[3] & 0b00000010){	// 带编码器模式
					MotorMove_position_Enocder(&Motor_Temp,Motor_Temp.TargetPosition);
				}
#endif
				USART_RX_STA=0;
 8005b36:	4b31      	ldr	r3, [pc, #196]	; (8005bfc <StartmessageTask+0x138>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	801a      	strh	r2, [r3, #0]
			break;
 8005b3c:	e05a      	b.n	8005bf4 <StartmessageTask+0x130>

			/***   电机控制-参数模式 ，16进制0x40  ***/
			case 0b01000000:
				deal_buffer_motorCtrl_data(&Motor_Temp);
 8005b3e:	4831      	ldr	r0, [pc, #196]	; (8005c04 <StartmessageTask+0x140>)
 8005b40:	f7ff fea4 	bl	800588c <deal_buffer_motorCtrl_data>
				MotorMove_steps(&Motor_Temp);
 8005b44:	482f      	ldr	r0, [pc, #188]	; (8005c04 <StartmessageTask+0x140>)
 8005b46:	f7fe fa39 	bl	8003fbc <MotorMove_steps>
				USART_RX_STA=0;
 8005b4a:	4b2c      	ldr	r3, [pc, #176]	; (8005bfc <StartmessageTask+0x138>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	801a      	strh	r2, [r3, #0]
			break;
 8005b50:	e050      	b.n	8005bf4 <StartmessageTask+0x130>

			/***   电机控制-复位 ，16进制0x20  ***/
			case 0b00100000:
				deal_buffer_motorCtrl_reset(&Motor_Temp);
 8005b52:	482c      	ldr	r0, [pc, #176]	; (8005c04 <StartmessageTask+0x140>)
 8005b54:	f7ff ff70 	bl	8005a38 <deal_buffer_motorCtrl_reset>
				Motor_Reset(&Motor_Temp);
 8005b58:	482a      	ldr	r0, [pc, #168]	; (8005c04 <StartmessageTask+0x140>)
 8005b5a:	f7ff f88f 	bl	8004c7c <Motor_Reset>
				USART_RX_STA=0;
 8005b5e:	4b27      	ldr	r3, [pc, #156]	; (8005bfc <StartmessageTask+0x138>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	801a      	strh	r2, [r3, #0]
			break;
 8005b64:	e046      	b.n	8005bf4 <StartmessageTask+0x130>

			/***   直流电机控制 0x10  ***/
			case 0b00010000:
				deal_buffer_DCmotorCtrl(&Motor_Temp);
 8005b66:	4827      	ldr	r0, [pc, #156]	; (8005c04 <StartmessageTask+0x140>)
 8005b68:	f7ff ff7e 	bl	8005a68 <deal_buffer_DCmotorCtrl>
				if (USART5_RX_BUF[4] == 0x00 ){
 8005b6c:	4b24      	ldr	r3, [pc, #144]	; (8005c00 <StartmessageTask+0x13c>)
 8005b6e:	791b      	ldrb	r3, [r3, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d111      	bne.n	8005b98 <StartmessageTask+0xd4>
					if( USART5_RX_BUF[5] == 0x02 ){
 8005b74:	4b22      	ldr	r3, [pc, #136]	; (8005c00 <StartmessageTask+0x13c>)
 8005b76:	795b      	ldrb	r3, [r3, #5]
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d104      	bne.n	8005b86 <StartmessageTask+0xc2>
						DC_Motor_OFF(&Motor_Temp,'A');
 8005b7c:	2141      	movs	r1, #65	; 0x41
 8005b7e:	4821      	ldr	r0, [pc, #132]	; (8005c04 <StartmessageTask+0x140>)
 8005b80:	f7ff fd5c 	bl	800563c <DC_Motor_OFF>
 8005b84:	e01f      	b.n	8005bc6 <StartmessageTask+0x102>
					}
					else if( USART5_RX_BUF[5] == 0x01 ){
 8005b86:	4b1e      	ldr	r3, [pc, #120]	; (8005c00 <StartmessageTask+0x13c>)
 8005b88:	795b      	ldrb	r3, [r3, #5]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d11b      	bne.n	8005bc6 <StartmessageTask+0x102>
						DC_Motor_OFF(&Motor_Temp,'B');
 8005b8e:	2142      	movs	r1, #66	; 0x42
 8005b90:	481c      	ldr	r0, [pc, #112]	; (8005c04 <StartmessageTask+0x140>)
 8005b92:	f7ff fd53 	bl	800563c <DC_Motor_OFF>
 8005b96:	e016      	b.n	8005bc6 <StartmessageTask+0x102>
					}
				}
				else{
					if( USART5_RX_BUF[5] == 0x02 ){
 8005b98:	4b19      	ldr	r3, [pc, #100]	; (8005c00 <StartmessageTask+0x13c>)
 8005b9a:	795b      	ldrb	r3, [r3, #5]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d107      	bne.n	8005bb0 <StartmessageTask+0xec>
						DC_Motor_ON(&Motor_Temp,'A',USART5_RX_BUF[6]);
 8005ba0:	4b17      	ldr	r3, [pc, #92]	; (8005c00 <StartmessageTask+0x13c>)
 8005ba2:	799b      	ldrb	r3, [r3, #6]
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	2141      	movs	r1, #65	; 0x41
 8005ba8:	4816      	ldr	r0, [pc, #88]	; (8005c04 <StartmessageTask+0x140>)
 8005baa:	f7ff fc6d 	bl	8005488 <DC_Motor_ON>
 8005bae:	e00a      	b.n	8005bc6 <StartmessageTask+0x102>
					}
					else if( USART5_RX_BUF[5] == 0x01 ){
 8005bb0:	4b13      	ldr	r3, [pc, #76]	; (8005c00 <StartmessageTask+0x13c>)
 8005bb2:	795b      	ldrb	r3, [r3, #5]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d106      	bne.n	8005bc6 <StartmessageTask+0x102>
						DC_Motor_ON(&Motor_Temp,'B',USART5_RX_BUF[6]);
 8005bb8:	4b11      	ldr	r3, [pc, #68]	; (8005c00 <StartmessageTask+0x13c>)
 8005bba:	799b      	ldrb	r3, [r3, #6]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	2142      	movs	r1, #66	; 0x42
 8005bc0:	4810      	ldr	r0, [pc, #64]	; (8005c04 <StartmessageTask+0x140>)
 8005bc2:	f7ff fc61 	bl	8005488 <DC_Motor_ON>
					}
				}
				USART_RX_STA=0;
 8005bc6:	4b0d      	ldr	r3, [pc, #52]	; (8005bfc <StartmessageTask+0x138>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	801a      	strh	r2, [r3, #0]
			break;
 8005bcc:	e012      	b.n	8005bf4 <StartmessageTask+0x130>

			/***   打印回传接收到的协议数据  0x01  ***/
			case 0b00000001:
				HAL_UART_Transmit_IT(&huart5, USART5_RX_BUF,len);
 8005bce:	7bfb      	ldrb	r3, [r7, #15]
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	490a      	ldr	r1, [pc, #40]	; (8005c00 <StartmessageTask+0x13c>)
 8005bd6:	480c      	ldr	r0, [pc, #48]	; (8005c08 <StartmessageTask+0x144>)
 8005bd8:	f005 f925 	bl	800ae26 <HAL_UART_Transmit_IT>
				while(__HAL_UART_GET_FLAG(&huart5,UART_FLAG_TC)!=SET);
 8005bdc:	bf00      	nop
 8005bde:	4b0a      	ldr	r3, [pc, #40]	; (8005c08 <StartmessageTask+0x144>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be8:	2b40      	cmp	r3, #64	; 0x40
 8005bea:	d1f8      	bne.n	8005bde <StartmessageTask+0x11a>
				USART_RX_STA=0;
 8005bec:	4b03      	ldr	r3, [pc, #12]	; (8005bfc <StartmessageTask+0x138>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	801a      	strh	r2, [r3, #0]
			break;
 8005bf2:	bf00      	nop
		osDelay(1);
 8005bf4:	e772      	b.n	8005adc <StartmessageTask+0x18>
 8005bf6:	bf00      	nop
 8005bf8:	08011cf0 	.word	0x08011cf0
 8005bfc:	20000910 	.word	0x20000910
 8005c00:	200008ac 	.word	0x200008ac
 8005c04:	20000dec 	.word	0x20000dec
 8005c08:	20000958 	.word	0x20000958

08005c0c <StartTask03>:
}
#endif

#ifdef L298N_StepMotorCtrl
void StartTask03(void *argument)
{
 8005c0c:	b590      	push	{r4, r7, lr}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
	osDelay(10);
 8005c14:	200a      	movs	r0, #10
 8005c16:	f006 fa03 	bl	800c020 <osDelay>
	printf("myTask03 starts! \r\n");
 8005c1a:	4867      	ldr	r0, [pc, #412]	; (8005db8 <StartTask03+0x1ac>)
 8005c1c:	f009 fc1a 	bl	800f454 <puts>

	Motor_Data_Init();
 8005c20:	f7fd fdbe 	bl	80037a0 <Motor_Data_Init>
	VM5_Enable_A();	VM5_Enable_B();
 8005c24:	2201      	movs	r2, #1
 8005c26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c2a:	4864      	ldr	r0, [pc, #400]	; (8005dbc <StartTask03+0x1b0>)
 8005c2c:	f001 ffb8 	bl	8007ba0 <HAL_GPIO_WritePin>
 8005c30:	2201      	movs	r2, #1
 8005c32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c36:	4861      	ldr	r0, [pc, #388]	; (8005dbc <StartTask03+0x1b0>)
 8005c38:	f001 ffb2 	bl	8007ba0 <HAL_GPIO_WritePin>
	VM6_Enable_A();	VM6_Enable_B();
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	2180      	movs	r1, #128	; 0x80
 8005c40:	485e      	ldr	r0, [pc, #376]	; (8005dbc <StartTask03+0x1b0>)
 8005c42:	f001 ffad 	bl	8007ba0 <HAL_GPIO_WritePin>
 8005c46:	2201      	movs	r2, #1
 8005c48:	2102      	movs	r1, #2
 8005c4a:	485d      	ldr	r0, [pc, #372]	; (8005dc0 <StartTask03+0x1b4>)
 8005c4c:	f001 ffa8 	bl	8007ba0 <HAL_GPIO_WritePin>
	Motor6_Release();
 8005c50:	f7fd ff4c 	bl	8003aec <Motor6_Release>
	Motor6_MicroSteps_Table_Init();
 8005c54:	f7ff fda4 	bl	80057a0 <Motor6_MicroSteps_Table_Init>
	myTask03_Status = INITPASSSTATE;
 8005c58:	4b5a      	ldr	r3, [pc, #360]	; (8005dc4 <StartTask03+0x1b8>)
 8005c5a:	2263      	movs	r2, #99	; 0x63
 8005c5c:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		osDelay(1);
 8005c5e:	2001      	movs	r0, #1
 8005c60:	f006 f9de 	bl	800c020 <osDelay>
		switch (myTask03_Status)
 8005c64:	4b57      	ldr	r3, [pc, #348]	; (8005dc4 <StartTask03+0x1b8>)
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	2b63      	cmp	r3, #99	; 0x63
 8005c6a:	d00b      	beq.n	8005c84 <StartTask03+0x78>
 8005c6c:	2b63      	cmp	r3, #99	; 0x63
 8005c6e:	dcf6      	bgt.n	8005c5e <StartTask03+0x52>
 8005c70:	2b1e      	cmp	r3, #30
 8005c72:	f000 8098 	beq.w	8005da6 <StartTask03+0x19a>
 8005c76:	2b1e      	cmp	r3, #30
 8005c78:	dcf1      	bgt.n	8005c5e <StartTask03+0x52>
 8005c7a:	2b0a      	cmp	r3, #10
 8005c7c:	d06f      	beq.n	8005d5e <StartTask03+0x152>
 8005c7e:	2b14      	cmp	r3, #20
 8005c80:	d073      	beq.n	8005d6a <StartTask03+0x15e>
 8005c82:	e097      	b.n	8005db4 <StartTask03+0x1a8>
		{
		case INITPASSSTATE:
			osDelay(10);
 8005c84:	200a      	movs	r0, #10
 8005c86:	f006 f9cb 	bl	800c020 <osDelay>
			if(KEY0_Pressed())
 8005c8a:	2140      	movs	r1, #64	; 0x40
 8005c8c:	484c      	ldr	r0, [pc, #304]	; (8005dc0 <StartTask03+0x1b4>)
 8005c8e:	f001 ff6f 	bl	8007b70 <HAL_GPIO_ReadPin>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d11a      	bne.n	8005cce <StartTask03+0xc2>
			{
				osDelay(20);
 8005c98:	2014      	movs	r0, #20
 8005c9a:	f006 f9c1 	bl	800c020 <osDelay>
				if(KEY0_Pressed())
 8005c9e:	2140      	movs	r1, #64	; 0x40
 8005ca0:	4847      	ldr	r0, [pc, #284]	; (8005dc0 <StartTask03+0x1b4>)
 8005ca2:	f001 ff65 	bl	8007b70 <HAL_GPIO_ReadPin>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d110      	bne.n	8005cce <StartTask03+0xc2>
				{
					osDelay(20);
 8005cac:	2014      	movs	r0, #20
 8005cae:	f006 f9b7 	bl	800c020 <osDelay>
					while (KEY0_Pressed()){osDelay(1);}
 8005cb2:	e002      	b.n	8005cba <StartTask03+0xae>
 8005cb4:	2001      	movs	r0, #1
 8005cb6:	f006 f9b3 	bl	800c020 <osDelay>
 8005cba:	2140      	movs	r1, #64	; 0x40
 8005cbc:	4840      	ldr	r0, [pc, #256]	; (8005dc0 <StartTask03+0x1b4>)
 8005cbe:	f001 ff57 	bl	8007b70 <HAL_GPIO_ReadPin>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d0f5      	beq.n	8005cb4 <StartTask03+0xa8>
					myTask03_Status = 10;
 8005cc8:	4b3e      	ldr	r3, [pc, #248]	; (8005dc4 <StartTask03+0x1b8>)
 8005cca:	220a      	movs	r2, #10
 8005ccc:	701a      	strb	r2, [r3, #0]
				}
			}
			if(KEY1_Pressed())
 8005cce:	2180      	movs	r1, #128	; 0x80
 8005cd0:	483b      	ldr	r0, [pc, #236]	; (8005dc0 <StartTask03+0x1b4>)
 8005cd2:	f001 ff4d 	bl	8007b70 <HAL_GPIO_ReadPin>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d11a      	bne.n	8005d12 <StartTask03+0x106>
			{
				osDelay(20);
 8005cdc:	2014      	movs	r0, #20
 8005cde:	f006 f99f 	bl	800c020 <osDelay>
				if(KEY1_Pressed())
 8005ce2:	2180      	movs	r1, #128	; 0x80
 8005ce4:	4836      	ldr	r0, [pc, #216]	; (8005dc0 <StartTask03+0x1b4>)
 8005ce6:	f001 ff43 	bl	8007b70 <HAL_GPIO_ReadPin>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d110      	bne.n	8005d12 <StartTask03+0x106>
				{
					osDelay(20);
 8005cf0:	2014      	movs	r0, #20
 8005cf2:	f006 f995 	bl	800c020 <osDelay>
					while (KEY1_Pressed()){osDelay(1);}
 8005cf6:	e002      	b.n	8005cfe <StartTask03+0xf2>
 8005cf8:	2001      	movs	r0, #1
 8005cfa:	f006 f991 	bl	800c020 <osDelay>
 8005cfe:	2180      	movs	r1, #128	; 0x80
 8005d00:	482f      	ldr	r0, [pc, #188]	; (8005dc0 <StartTask03+0x1b4>)
 8005d02:	f001 ff35 	bl	8007b70 <HAL_GPIO_ReadPin>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0f5      	beq.n	8005cf8 <StartTask03+0xec>
					myTask03_Status = 20;
 8005d0c:	4b2d      	ldr	r3, [pc, #180]	; (8005dc4 <StartTask03+0x1b8>)
 8005d0e:	2214      	movs	r2, #20
 8005d10:	701a      	strb	r2, [r3, #0]
				}
			}
			if(KEY2_Pressed())
 8005d12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d16:	482a      	ldr	r0, [pc, #168]	; (8005dc0 <StartTask03+0x1b4>)
 8005d18:	f001 ff2a 	bl	8007b70 <HAL_GPIO_ReadPin>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d147      	bne.n	8005db2 <StartTask03+0x1a6>
			{
				osDelay(20);
 8005d22:	2014      	movs	r0, #20
 8005d24:	f006 f97c 	bl	800c020 <osDelay>
				if(KEY2_Pressed())
 8005d28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d2c:	4824      	ldr	r0, [pc, #144]	; (8005dc0 <StartTask03+0x1b4>)
 8005d2e:	f001 ff1f 	bl	8007b70 <HAL_GPIO_ReadPin>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d13c      	bne.n	8005db2 <StartTask03+0x1a6>
				{
					osDelay(20);
 8005d38:	2014      	movs	r0, #20
 8005d3a:	f006 f971 	bl	800c020 <osDelay>
					while (KEY2_Pressed()){osDelay(1);}
 8005d3e:	e002      	b.n	8005d46 <StartTask03+0x13a>
 8005d40:	2001      	movs	r0, #1
 8005d42:	f006 f96d 	bl	800c020 <osDelay>
 8005d46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d4a:	481d      	ldr	r0, [pc, #116]	; (8005dc0 <StartTask03+0x1b4>)
 8005d4c:	f001 ff10 	bl	8007b70 <HAL_GPIO_ReadPin>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d0f4      	beq.n	8005d40 <StartTask03+0x134>
					myTask03_Status = 30;
 8005d56:	4b1b      	ldr	r3, [pc, #108]	; (8005dc4 <StartTask03+0x1b8>)
 8005d58:	221e      	movs	r2, #30
 8005d5a:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 8005d5c:	e029      	b.n	8005db2 <StartTask03+0x1a6>

		case 10:
			Start_DMA_ADC1_CH10CH11();
 8005d5e:	f7ff fd33 	bl	80057c8 <Start_DMA_ADC1_CH10CH11>
			myTask03_Status = INITPASSSTATE;
 8005d62:	4b18      	ldr	r3, [pc, #96]	; (8005dc4 <StartTask03+0x1b8>)
 8005d64:	2263      	movs	r2, #99	; 0x63
 8005d66:	701a      	strb	r2, [r3, #0]
			break;
 8005d68:	e024      	b.n	8005db4 <StartTask03+0x1a8>

		case 20:
			for (uint16_t i=0 ; i<30 ; i++){
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	81fb      	strh	r3, [r7, #14]
 8005d6e:	e013      	b.n	8005d98 <StartTask03+0x18c>
				printf("\t***ADC1 Values: %d, %d ***\r\n",get_ADC1_Current_Phase(0),get_ADC1_Current_Phase(1));
 8005d70:	2000      	movs	r0, #0
 8005d72:	f7ff fd69 	bl	8005848 <get_ADC1_Current_Phase>
 8005d76:	4603      	mov	r3, r0
 8005d78:	461c      	mov	r4, r3
 8005d7a:	2001      	movs	r0, #1
 8005d7c:	f7ff fd64 	bl	8005848 <get_ADC1_Current_Phase>
 8005d80:	4603      	mov	r3, r0
 8005d82:	461a      	mov	r2, r3
 8005d84:	4621      	mov	r1, r4
 8005d86:	4810      	ldr	r0, [pc, #64]	; (8005dc8 <StartTask03+0x1bc>)
 8005d88:	f009 fafe 	bl	800f388 <iprintf>
				//printf("\t***ADC1 Values: %d, %d ***\r\n",ADC_Values[0],ADC_Values[1]);
				osDelay(200);
 8005d8c:	20c8      	movs	r0, #200	; 0xc8
 8005d8e:	f006 f947 	bl	800c020 <osDelay>
			for (uint16_t i=0 ; i<30 ; i++){
 8005d92:	89fb      	ldrh	r3, [r7, #14]
 8005d94:	3301      	adds	r3, #1
 8005d96:	81fb      	strh	r3, [r7, #14]
 8005d98:	89fb      	ldrh	r3, [r7, #14]
 8005d9a:	2b1d      	cmp	r3, #29
 8005d9c:	d9e8      	bls.n	8005d70 <StartTask03+0x164>
			}
			myTask03_Status = INITPASSSTATE;
 8005d9e:	4b09      	ldr	r3, [pc, #36]	; (8005dc4 <StartTask03+0x1b8>)
 8005da0:	2263      	movs	r2, #99	; 0x63
 8005da2:	701a      	strb	r2, [r3, #0]
			break;
 8005da4:	e006      	b.n	8005db4 <StartTask03+0x1a8>

		case 30:
			STOP_DMA_ADC1_CH10CH11();
 8005da6:	f7ff fd1d 	bl	80057e4 <STOP_DMA_ADC1_CH10CH11>
			myTask03_Status = INITPASSSTATE;
 8005daa:	4b06      	ldr	r3, [pc, #24]	; (8005dc4 <StartTask03+0x1b8>)
 8005dac:	2263      	movs	r2, #99	; 0x63
 8005dae:	701a      	strb	r2, [r3, #0]
			break ;
 8005db0:	e000      	b.n	8005db4 <StartTask03+0x1a8>
			break;
 8005db2:	bf00      	nop
		osDelay(1);
 8005db4:	e753      	b.n	8005c5e <StartTask03+0x52>
 8005db6:	bf00      	nop
 8005db8:	08011d08 	.word	0x08011d08
 8005dbc:	40021000 	.word	0x40021000
 8005dc0:	40021800 	.word	0x40021800
 8005dc4:	20000e4c 	.word	0x20000e4c
 8005dc8:	08011d1c 	.word	0x08011d1c

08005dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005dcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005e04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005dd0:	480d      	ldr	r0, [pc, #52]	; (8005e08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005dd2:	490e      	ldr	r1, [pc, #56]	; (8005e0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005dd4:	4a0e      	ldr	r2, [pc, #56]	; (8005e10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005dd8:	e002      	b.n	8005de0 <LoopCopyDataInit>

08005dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005dde:	3304      	adds	r3, #4

08005de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005de4:	d3f9      	bcc.n	8005dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005de6:	4a0b      	ldr	r2, [pc, #44]	; (8005e14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005de8:	4c0b      	ldr	r4, [pc, #44]	; (8005e18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005dec:	e001      	b.n	8005df2 <LoopFillZerobss>

08005dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005df0:	3204      	adds	r2, #4

08005df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005df4:	d3fb      	bcc.n	8005dee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005df6:	f7fc fe7d 	bl	8002af4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005dfa:	f009 fcb9 	bl	800f770 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005dfe:	f7fb fe27 	bl	8001a50 <main>
  bx  lr    
 8005e02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005e04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e0c:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 8005e10:	08012184 	.word	0x08012184
  ldr r2, =_sbss
 8005e14:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 8005e18:	20005988 	.word	0x20005988

08005e1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005e1c:	e7fe      	b.n	8005e1c <ADC_IRQHandler>
	...

08005e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005e24:	4b0e      	ldr	r3, [pc, #56]	; (8005e60 <HAL_Init+0x40>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a0d      	ldr	r2, [pc, #52]	; (8005e60 <HAL_Init+0x40>)
 8005e2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005e30:	4b0b      	ldr	r3, [pc, #44]	; (8005e60 <HAL_Init+0x40>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a0a      	ldr	r2, [pc, #40]	; (8005e60 <HAL_Init+0x40>)
 8005e36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e3c:	4b08      	ldr	r3, [pc, #32]	; (8005e60 <HAL_Init+0x40>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a07      	ldr	r2, [pc, #28]	; (8005e60 <HAL_Init+0x40>)
 8005e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e48:	2003      	movs	r0, #3
 8005e4a:	f000 ffd0 	bl	8006dee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e4e:	2005      	movs	r0, #5
 8005e50:	f7fc fc22 	bl	8002698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e54:	f7fc fbf4 	bl	8002640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	40023c00 	.word	0x40023c00

08005e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e64:	b480      	push	{r7}
 8005e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e68:	4b06      	ldr	r3, [pc, #24]	; (8005e84 <HAL_IncTick+0x20>)
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	4b06      	ldr	r3, [pc, #24]	; (8005e88 <HAL_IncTick+0x24>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4413      	add	r3, r2
 8005e74:	4a04      	ldr	r2, [pc, #16]	; (8005e88 <HAL_IncTick+0x24>)
 8005e76:	6013      	str	r3, [r2, #0]
}
 8005e78:	bf00      	nop
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	20000190 	.word	0x20000190
 8005e88:	20000e50 	.word	0x20000e50

08005e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8005e90:	4b03      	ldr	r3, [pc, #12]	; (8005ea0 <HAL_GetTick+0x14>)
 8005e92:	681b      	ldr	r3, [r3, #0]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	20000e50 	.word	0x20000e50

08005ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005eac:	f7ff ffee 	bl	8005e8c <HAL_GetTick>
 8005eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ebc:	d005      	beq.n	8005eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005ebe:	4b0a      	ldr	r3, [pc, #40]	; (8005ee8 <HAL_Delay+0x44>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005eca:	bf00      	nop
 8005ecc:	f7ff ffde 	bl	8005e8c <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d8f7      	bhi.n	8005ecc <HAL_Delay+0x28>
  {
  }
}
 8005edc:	bf00      	nop
 8005ede:	bf00      	nop
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	20000190 	.word	0x20000190

08005eec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e033      	b.n	8005f6a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d109      	bne.n	8005f1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7fb f88e 	bl	800102c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	f003 0310 	and.w	r3, r3, #16
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d118      	bne.n	8005f5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005f32:	f023 0302 	bic.w	r3, r3, #2
 8005f36:	f043 0202 	orr.w	r2, r3, #2
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fc2e 	bl	80067a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4e:	f023 0303 	bic.w	r3, r3, #3
 8005f52:	f043 0201 	orr.w	r2, r3, #1
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	641a      	str	r2, [r3, #64]	; 0x40
 8005f5a:	e001      	b.n	8005f60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
	...

08005f74 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d101      	bne.n	8005f8e <HAL_ADC_Start+0x1a>
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	e0b2      	b.n	80060f4 <HAL_ADC_Start+0x180>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d018      	beq.n	8005fd6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f042 0201 	orr.w	r2, r2, #1
 8005fb2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005fb4:	4b52      	ldr	r3, [pc, #328]	; (8006100 <HAL_ADC_Start+0x18c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a52      	ldr	r2, [pc, #328]	; (8006104 <HAL_ADC_Start+0x190>)
 8005fba:	fba2 2303 	umull	r2, r3, r2, r3
 8005fbe:	0c9a      	lsrs	r2, r3, #18
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	4413      	add	r3, r2
 8005fc6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005fc8:	e002      	b.n	8005fd0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1f9      	bne.n	8005fca <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d17a      	bne.n	80060da <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005fec:	f023 0301 	bic.w	r3, r3, #1
 8005ff0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006002:	2b00      	cmp	r3, #0
 8006004:	d007      	beq.n	8006016 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800600e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800601e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006022:	d106      	bne.n	8006032 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006028:	f023 0206 	bic.w	r2, r3, #6
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	645a      	str	r2, [r3, #68]	; 0x44
 8006030:	e002      	b.n	8006038 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006040:	4b31      	ldr	r3, [pc, #196]	; (8006108 <HAL_ADC_Start+0x194>)
 8006042:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800604c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f003 031f 	and.w	r3, r3, #31
 8006056:	2b00      	cmp	r3, #0
 8006058:	d12a      	bne.n	80060b0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a2b      	ldr	r2, [pc, #172]	; (800610c <HAL_ADC_Start+0x198>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d015      	beq.n	8006090 <HAL_ADC_Start+0x11c>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a29      	ldr	r2, [pc, #164]	; (8006110 <HAL_ADC_Start+0x19c>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d105      	bne.n	800607a <HAL_ADC_Start+0x106>
 800606e:	4b26      	ldr	r3, [pc, #152]	; (8006108 <HAL_ADC_Start+0x194>)
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f003 031f 	and.w	r3, r3, #31
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00a      	beq.n	8006090 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a25      	ldr	r2, [pc, #148]	; (8006114 <HAL_ADC_Start+0x1a0>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d136      	bne.n	80060f2 <HAL_ADC_Start+0x17e>
 8006084:	4b20      	ldr	r3, [pc, #128]	; (8006108 <HAL_ADC_Start+0x194>)
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f003 0310 	and.w	r3, r3, #16
 800608c:	2b00      	cmp	r3, #0
 800608e:	d130      	bne.n	80060f2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d129      	bne.n	80060f2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80060ac:	609a      	str	r2, [r3, #8]
 80060ae:	e020      	b.n	80060f2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a15      	ldr	r2, [pc, #84]	; (800610c <HAL_ADC_Start+0x198>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d11b      	bne.n	80060f2 <HAL_ADC_Start+0x17e>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d114      	bne.n	80060f2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689a      	ldr	r2, [r3, #8]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80060d6:	609a      	str	r2, [r3, #8]
 80060d8:	e00b      	b.n	80060f2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	f043 0210 	orr.w	r2, r3, #16
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ea:	f043 0201 	orr.w	r2, r3, #1
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	20000008 	.word	0x20000008
 8006104:	431bde83 	.word	0x431bde83
 8006108:	40012300 	.word	0x40012300
 800610c:	40012000 	.word	0x40012000
 8006110:	40012100 	.word	0x40012100
 8006114:	40012200 	.word	0x40012200

08006118 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006134:	d113      	bne.n	800615e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006144:	d10b      	bne.n	800615e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	f043 0220 	orr.w	r2, r3, #32
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e063      	b.n	8006226 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800615e:	f7ff fe95 	bl	8005e8c <HAL_GetTick>
 8006162:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006164:	e021      	b.n	80061aa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616c:	d01d      	beq.n	80061aa <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d007      	beq.n	8006184 <HAL_ADC_PollForConversion+0x6c>
 8006174:	f7ff fe8a 	bl	8005e8c <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	683a      	ldr	r2, [r7, #0]
 8006180:	429a      	cmp	r2, r3
 8006182:	d212      	bcs.n	80061aa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b02      	cmp	r3, #2
 8006190:	d00b      	beq.n	80061aa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006196:	f043 0204 	orr.w	r2, r3, #4
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e03d      	b.n	8006226 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d1d6      	bne.n	8006166 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f06f 0212 	mvn.w	r2, #18
 80061c0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d123      	bne.n	8006224 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d11f      	bne.n	8006224 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d006      	beq.n	8006200 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d111      	bne.n	8006224 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006204:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006210:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d105      	bne.n	8006224 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621c:	f043 0201 	orr.w	r2, r3, #1
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
	...

08006230 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006246:	2b01      	cmp	r3, #1
 8006248:	d101      	bne.n	800624e <HAL_ADC_Start_DMA+0x1e>
 800624a:	2302      	movs	r3, #2
 800624c:	e0e9      	b.n	8006422 <HAL_ADC_Start_DMA+0x1f2>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b01      	cmp	r3, #1
 8006262:	d018      	beq.n	8006296 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689a      	ldr	r2, [r3, #8]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f042 0201 	orr.w	r2, r2, #1
 8006272:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006274:	4b6d      	ldr	r3, [pc, #436]	; (800642c <HAL_ADC_Start_DMA+0x1fc>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a6d      	ldr	r2, [pc, #436]	; (8006430 <HAL_ADC_Start_DMA+0x200>)
 800627a:	fba2 2303 	umull	r2, r3, r2, r3
 800627e:	0c9a      	lsrs	r2, r3, #18
 8006280:	4613      	mov	r3, r2
 8006282:	005b      	lsls	r3, r3, #1
 8006284:	4413      	add	r3, r2
 8006286:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006288:	e002      	b.n	8006290 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	3b01      	subs	r3, #1
 800628e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1f9      	bne.n	800628a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062a4:	d107      	bne.n	80062b6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	f040 80a1 	bne.w	8006408 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80062ce:	f023 0301 	bic.w	r3, r3, #1
 80062d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d007      	beq.n	80062f8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80062f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006304:	d106      	bne.n	8006314 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800630a:	f023 0206 	bic.w	r2, r3, #6
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	645a      	str	r2, [r3, #68]	; 0x44
 8006312:	e002      	b.n	800631a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006322:	4b44      	ldr	r3, [pc, #272]	; (8006434 <HAL_ADC_Start_DMA+0x204>)
 8006324:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632a:	4a43      	ldr	r2, [pc, #268]	; (8006438 <HAL_ADC_Start_DMA+0x208>)
 800632c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006332:	4a42      	ldr	r2, [pc, #264]	; (800643c <HAL_ADC_Start_DMA+0x20c>)
 8006334:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633a:	4a41      	ldr	r2, [pc, #260]	; (8006440 <HAL_ADC_Start_DMA+0x210>)
 800633c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006346:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006356:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689a      	ldr	r2, [r3, #8]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006366:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	334c      	adds	r3, #76	; 0x4c
 8006372:	4619      	mov	r1, r3
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f000 fefc 	bl	8007174 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f003 031f 	and.w	r3, r3, #31
 8006384:	2b00      	cmp	r3, #0
 8006386:	d12a      	bne.n	80063de <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a2d      	ldr	r2, [pc, #180]	; (8006444 <HAL_ADC_Start_DMA+0x214>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d015      	beq.n	80063be <HAL_ADC_Start_DMA+0x18e>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a2c      	ldr	r2, [pc, #176]	; (8006448 <HAL_ADC_Start_DMA+0x218>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d105      	bne.n	80063a8 <HAL_ADC_Start_DMA+0x178>
 800639c:	4b25      	ldr	r3, [pc, #148]	; (8006434 <HAL_ADC_Start_DMA+0x204>)
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f003 031f 	and.w	r3, r3, #31
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00a      	beq.n	80063be <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a27      	ldr	r2, [pc, #156]	; (800644c <HAL_ADC_Start_DMA+0x21c>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d136      	bne.n	8006420 <HAL_ADC_Start_DMA+0x1f0>
 80063b2:	4b20      	ldr	r3, [pc, #128]	; (8006434 <HAL_ADC_Start_DMA+0x204>)
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f003 0310 	and.w	r3, r3, #16
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d130      	bne.n	8006420 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d129      	bne.n	8006420 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689a      	ldr	r2, [r3, #8]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80063da:	609a      	str	r2, [r3, #8]
 80063dc:	e020      	b.n	8006420 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a18      	ldr	r2, [pc, #96]	; (8006444 <HAL_ADC_Start_DMA+0x214>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d11b      	bne.n	8006420 <HAL_ADC_Start_DMA+0x1f0>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d114      	bne.n	8006420 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006404:	609a      	str	r2, [r3, #8]
 8006406:	e00b      	b.n	8006420 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640c:	f043 0210 	orr.w	r2, r3, #16
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006418:	f043 0201 	orr.w	r2, r3, #1
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3718      	adds	r7, #24
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	20000008 	.word	0x20000008
 8006430:	431bde83 	.word	0x431bde83
 8006434:	40012300 	.word	0x40012300
 8006438:	08006999 	.word	0x08006999
 800643c:	08006a53 	.word	0x08006a53
 8006440:	08006a6f 	.word	0x08006a6f
 8006444:	40012000 	.word	0x40012000
 8006448:	40012100 	.word	0x40012100
 800644c:	40012200 	.word	0x40012200

08006450 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006458:	2300      	movs	r3, #0
 800645a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006462:	2b01      	cmp	r3, #1
 8006464:	d101      	bne.n	800646a <HAL_ADC_Stop_DMA+0x1a>
 8006466:	2302      	movs	r3, #2
 8006468:	e048      	b.n	80064fc <HAL_ADC_Stop_DMA+0xac>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 0201 	bic.w	r2, r2, #1
 8006480:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	2b00      	cmp	r3, #0
 800648e:	d130      	bne.n	80064f2 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689a      	ldr	r2, [r3, #8]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800649e:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d10f      	bne.n	80064ce <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b2:	4618      	mov	r0, r3
 80064b4:	f000 feb6 	bl	8007224 <HAL_DMA_Abort>
 80064b8:	4603      	mov	r3, r0
 80064ba:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d005      	beq.n	80064ce <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80064dc:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80064e6:	f023 0301 	bic.w	r3, r3, #1
 80064ea:	f043 0201 	orr.w	r2, r3, #1
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80064fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006512:	4618      	mov	r0, r3
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800651e:	b480      	push	{r7}
 8006520:	b083      	sub	sp, #12
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006526:	bf00      	nop
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006532:	b480      	push	{r7}
 8006534:	b083      	sub	sp, #12
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800653a:	bf00      	nop
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006546:	b480      	push	{r7}
 8006548:	b083      	sub	sp, #12
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800654e:	bf00      	nop
 8006550:	370c      	adds	r7, #12
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
	...

0800655c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006566:	2300      	movs	r3, #0
 8006568:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006570:	2b01      	cmp	r3, #1
 8006572:	d101      	bne.n	8006578 <HAL_ADC_ConfigChannel+0x1c>
 8006574:	2302      	movs	r3, #2
 8006576:	e105      	b.n	8006784 <HAL_ADC_ConfigChannel+0x228>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2b09      	cmp	r3, #9
 8006586:	d925      	bls.n	80065d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68d9      	ldr	r1, [r3, #12]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	b29b      	uxth	r3, r3
 8006594:	461a      	mov	r2, r3
 8006596:	4613      	mov	r3, r2
 8006598:	005b      	lsls	r3, r3, #1
 800659a:	4413      	add	r3, r2
 800659c:	3b1e      	subs	r3, #30
 800659e:	2207      	movs	r2, #7
 80065a0:	fa02 f303 	lsl.w	r3, r2, r3
 80065a4:	43da      	mvns	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	400a      	ands	r2, r1
 80065ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68d9      	ldr	r1, [r3, #12]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	689a      	ldr	r2, [r3, #8]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	b29b      	uxth	r3, r3
 80065be:	4618      	mov	r0, r3
 80065c0:	4603      	mov	r3, r0
 80065c2:	005b      	lsls	r3, r3, #1
 80065c4:	4403      	add	r3, r0
 80065c6:	3b1e      	subs	r3, #30
 80065c8:	409a      	lsls	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	430a      	orrs	r2, r1
 80065d0:	60da      	str	r2, [r3, #12]
 80065d2:	e022      	b.n	800661a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6919      	ldr	r1, [r3, #16]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	b29b      	uxth	r3, r3
 80065e0:	461a      	mov	r2, r3
 80065e2:	4613      	mov	r3, r2
 80065e4:	005b      	lsls	r3, r3, #1
 80065e6:	4413      	add	r3, r2
 80065e8:	2207      	movs	r2, #7
 80065ea:	fa02 f303 	lsl.w	r3, r2, r3
 80065ee:	43da      	mvns	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	400a      	ands	r2, r1
 80065f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6919      	ldr	r1, [r3, #16]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	689a      	ldr	r2, [r3, #8]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	b29b      	uxth	r3, r3
 8006608:	4618      	mov	r0, r3
 800660a:	4603      	mov	r3, r0
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	4403      	add	r3, r0
 8006610:	409a      	lsls	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	430a      	orrs	r2, r1
 8006618:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	2b06      	cmp	r3, #6
 8006620:	d824      	bhi.n	800666c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	4613      	mov	r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4413      	add	r3, r2
 8006632:	3b05      	subs	r3, #5
 8006634:	221f      	movs	r2, #31
 8006636:	fa02 f303 	lsl.w	r3, r2, r3
 800663a:	43da      	mvns	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	400a      	ands	r2, r1
 8006642:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	b29b      	uxth	r3, r3
 8006650:	4618      	mov	r0, r3
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	4613      	mov	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	3b05      	subs	r3, #5
 800665e:	fa00 f203 	lsl.w	r2, r0, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	635a      	str	r2, [r3, #52]	; 0x34
 800666a:	e04c      	b.n	8006706 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	2b0c      	cmp	r3, #12
 8006672:	d824      	bhi.n	80066be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	4613      	mov	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	3b23      	subs	r3, #35	; 0x23
 8006686:	221f      	movs	r2, #31
 8006688:	fa02 f303 	lsl.w	r3, r2, r3
 800668c:	43da      	mvns	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	400a      	ands	r2, r1
 8006694:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	4618      	mov	r0, r3
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	4613      	mov	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4413      	add	r3, r2
 80066ae:	3b23      	subs	r3, #35	; 0x23
 80066b0:	fa00 f203 	lsl.w	r2, r0, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	430a      	orrs	r2, r1
 80066ba:	631a      	str	r2, [r3, #48]	; 0x30
 80066bc:	e023      	b.n	8006706 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	4613      	mov	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4413      	add	r3, r2
 80066ce:	3b41      	subs	r3, #65	; 0x41
 80066d0:	221f      	movs	r2, #31
 80066d2:	fa02 f303 	lsl.w	r3, r2, r3
 80066d6:	43da      	mvns	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	400a      	ands	r2, r1
 80066de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	4618      	mov	r0, r3
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	4613      	mov	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4413      	add	r3, r2
 80066f8:	3b41      	subs	r3, #65	; 0x41
 80066fa:	fa00 f203 	lsl.w	r2, r0, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	430a      	orrs	r2, r1
 8006704:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006706:	4b22      	ldr	r3, [pc, #136]	; (8006790 <HAL_ADC_ConfigChannel+0x234>)
 8006708:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a21      	ldr	r2, [pc, #132]	; (8006794 <HAL_ADC_ConfigChannel+0x238>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d109      	bne.n	8006728 <HAL_ADC_ConfigChannel+0x1cc>
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2b12      	cmp	r3, #18
 800671a:	d105      	bne.n	8006728 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a19      	ldr	r2, [pc, #100]	; (8006794 <HAL_ADC_ConfigChannel+0x238>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d123      	bne.n	800677a <HAL_ADC_ConfigChannel+0x21e>
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b10      	cmp	r3, #16
 8006738:	d003      	beq.n	8006742 <HAL_ADC_ConfigChannel+0x1e6>
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2b11      	cmp	r3, #17
 8006740:	d11b      	bne.n	800677a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b10      	cmp	r3, #16
 8006754:	d111      	bne.n	800677a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006756:	4b10      	ldr	r3, [pc, #64]	; (8006798 <HAL_ADC_ConfigChannel+0x23c>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a10      	ldr	r2, [pc, #64]	; (800679c <HAL_ADC_ConfigChannel+0x240>)
 800675c:	fba2 2303 	umull	r2, r3, r2, r3
 8006760:	0c9a      	lsrs	r2, r3, #18
 8006762:	4613      	mov	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4413      	add	r3, r2
 8006768:	005b      	lsls	r3, r3, #1
 800676a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800676c:	e002      	b.n	8006774 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	3b01      	subs	r3, #1
 8006772:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1f9      	bne.n	800676e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3714      	adds	r7, #20
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr
 8006790:	40012300 	.word	0x40012300
 8006794:	40012000 	.word	0x40012000
 8006798:	20000008 	.word	0x20000008
 800679c:	431bde83 	.word	0x431bde83

080067a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80067a8:	4b79      	ldr	r3, [pc, #484]	; (8006990 <ADC_Init+0x1f0>)
 80067aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	431a      	orrs	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	6859      	ldr	r1, [r3, #4]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	021a      	lsls	r2, r3, #8
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	685a      	ldr	r2, [r3, #4]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80067f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6859      	ldr	r1, [r3, #4]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	689a      	ldr	r2, [r3, #8]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	430a      	orrs	r2, r1
 800680a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689a      	ldr	r2, [r3, #8]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800681a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6899      	ldr	r1, [r3, #8]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68da      	ldr	r2, [r3, #12]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006832:	4a58      	ldr	r2, [pc, #352]	; (8006994 <ADC_Init+0x1f4>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d022      	beq.n	800687e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689a      	ldr	r2, [r3, #8]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006846:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6899      	ldr	r1, [r3, #8]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	430a      	orrs	r2, r1
 8006858:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	689a      	ldr	r2, [r3, #8]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006868:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6899      	ldr	r1, [r3, #8]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	430a      	orrs	r2, r1
 800687a:	609a      	str	r2, [r3, #8]
 800687c:	e00f      	b.n	800689e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800688c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689a      	ldr	r2, [r3, #8]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800689c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f022 0202 	bic.w	r2, r2, #2
 80068ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	6899      	ldr	r1, [r3, #8]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	7e1b      	ldrb	r3, [r3, #24]
 80068b8:	005a      	lsls	r2, r3, #1
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	430a      	orrs	r2, r1
 80068c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d01b      	beq.n	8006904 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	685a      	ldr	r2, [r3, #4]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80068ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6859      	ldr	r1, [r3, #4]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f6:	3b01      	subs	r3, #1
 80068f8:	035a      	lsls	r2, r3, #13
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	430a      	orrs	r2, r1
 8006900:	605a      	str	r2, [r3, #4]
 8006902:	e007      	b.n	8006914 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006912:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006922:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	3b01      	subs	r3, #1
 8006930:	051a      	lsls	r2, r3, #20
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	689a      	ldr	r2, [r3, #8]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006948:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6899      	ldr	r1, [r3, #8]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006956:	025a      	lsls	r2, r3, #9
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	430a      	orrs	r2, r1
 800695e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689a      	ldr	r2, [r3, #8]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800696e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6899      	ldr	r1, [r3, #8]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	029a      	lsls	r2, r3, #10
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	430a      	orrs	r2, r1
 8006982:	609a      	str	r2, [r3, #8]
}
 8006984:	bf00      	nop
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	40012300 	.word	0x40012300
 8006994:	0f000001 	.word	0x0f000001

08006998 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d13c      	bne.n	8006a2c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d12b      	bne.n	8006a24 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d127      	bne.n	8006a24 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d006      	beq.n	80069f0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d119      	bne.n	8006a24 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f022 0220 	bic.w	r2, r2, #32
 80069fe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d105      	bne.n	8006a24 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1c:	f043 0201 	orr.w	r2, r3, #1
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f7ff fd7a 	bl	800651e <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006a2a:	e00e      	b.n	8006a4a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a30:	f003 0310 	and.w	r3, r3, #16
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d003      	beq.n	8006a40 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f7ff fd84 	bl	8006546 <HAL_ADC_ErrorCallback>
}
 8006a3e:	e004      	b.n	8006a4a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	4798      	blx	r3
}
 8006a4a:	bf00      	nop
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b084      	sub	sp, #16
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f7ff fd66 	bl	8006532 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006a66:	bf00      	nop
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b084      	sub	sp, #16
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2240      	movs	r2, #64	; 0x40
 8006a80:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a86:	f043 0204 	orr.w	r2, r3, #4
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f7ff fd59 	bl	8006546 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006a94:	bf00      	nop
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d101      	bne.n	8006aae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e0ed      	b.n	8006c8a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d102      	bne.n	8006ac0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7fa fb5e 	bl	800117c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f042 0201 	orr.w	r2, r2, #1
 8006ace:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ad0:	f7ff f9dc 	bl	8005e8c <HAL_GetTick>
 8006ad4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006ad6:	e012      	b.n	8006afe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006ad8:	f7ff f9d8 	bl	8005e8c <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	2b0a      	cmp	r3, #10
 8006ae4:	d90b      	bls.n	8006afe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2205      	movs	r2, #5
 8006af6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e0c5      	b.n	8006c8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f003 0301 	and.w	r3, r3, #1
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d0e5      	beq.n	8006ad8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 0202 	bic.w	r2, r2, #2
 8006b1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b1c:	f7ff f9b6 	bl	8005e8c <HAL_GetTick>
 8006b20:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006b22:	e012      	b.n	8006b4a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006b24:	f7ff f9b2 	bl	8005e8c <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	2b0a      	cmp	r3, #10
 8006b30:	d90b      	bls.n	8006b4a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2205      	movs	r2, #5
 8006b42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e09f      	b.n	8006c8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f003 0302 	and.w	r3, r3, #2
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1e5      	bne.n	8006b24 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	7e1b      	ldrb	r3, [r3, #24]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d108      	bne.n	8006b72 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b6e:	601a      	str	r2, [r3, #0]
 8006b70:	e007      	b.n	8006b82 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	7e5b      	ldrb	r3, [r3, #25]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d108      	bne.n	8006b9c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	e007      	b.n	8006bac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006baa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	7e9b      	ldrb	r3, [r3, #26]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d108      	bne.n	8006bc6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f042 0220 	orr.w	r2, r2, #32
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	e007      	b.n	8006bd6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 0220 	bic.w	r2, r2, #32
 8006bd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	7edb      	ldrb	r3, [r3, #27]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d108      	bne.n	8006bf0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0210 	bic.w	r2, r2, #16
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	e007      	b.n	8006c00 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0210 	orr.w	r2, r2, #16
 8006bfe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	7f1b      	ldrb	r3, [r3, #28]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d108      	bne.n	8006c1a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f042 0208 	orr.w	r2, r2, #8
 8006c16:	601a      	str	r2, [r3, #0]
 8006c18:	e007      	b.n	8006c2a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f022 0208 	bic.w	r2, r2, #8
 8006c28:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	7f5b      	ldrb	r3, [r3, #29]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d108      	bne.n	8006c44 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f042 0204 	orr.w	r2, r2, #4
 8006c40:	601a      	str	r2, [r3, #0]
 8006c42:	e007      	b.n	8006c54 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f022 0204 	bic.w	r2, r2, #4
 8006c52:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	689a      	ldr	r2, [r3, #8]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	431a      	orrs	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	695b      	ldr	r3, [r3, #20]
 8006c68:	ea42 0103 	orr.w	r1, r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	1e5a      	subs	r2, r3, #1
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
	...

08006c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f003 0307 	and.w	r3, r3, #7
 8006ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ca4:	4b0c      	ldr	r3, [pc, #48]	; (8006cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006cc6:	4a04      	ldr	r2, [pc, #16]	; (8006cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	60d3      	str	r3, [r2, #12]
}
 8006ccc:	bf00      	nop
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr
 8006cd8:	e000ed00 	.word	0xe000ed00

08006cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ce0:	4b04      	ldr	r3, [pc, #16]	; (8006cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	0a1b      	lsrs	r3, r3, #8
 8006ce6:	f003 0307 	and.w	r3, r3, #7
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr
 8006cf4:	e000ed00 	.word	0xe000ed00

08006cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	4603      	mov	r3, r0
 8006d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	db0b      	blt.n	8006d22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d0a:	79fb      	ldrb	r3, [r7, #7]
 8006d0c:	f003 021f 	and.w	r2, r3, #31
 8006d10:	4907      	ldr	r1, [pc, #28]	; (8006d30 <__NVIC_EnableIRQ+0x38>)
 8006d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d16:	095b      	lsrs	r3, r3, #5
 8006d18:	2001      	movs	r0, #1
 8006d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8006d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006d22:	bf00      	nop
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	e000e100 	.word	0xe000e100

08006d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	6039      	str	r1, [r7, #0]
 8006d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	db0a      	blt.n	8006d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	b2da      	uxtb	r2, r3
 8006d4c:	490c      	ldr	r1, [pc, #48]	; (8006d80 <__NVIC_SetPriority+0x4c>)
 8006d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d52:	0112      	lsls	r2, r2, #4
 8006d54:	b2d2      	uxtb	r2, r2
 8006d56:	440b      	add	r3, r1
 8006d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006d5c:	e00a      	b.n	8006d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	4908      	ldr	r1, [pc, #32]	; (8006d84 <__NVIC_SetPriority+0x50>)
 8006d64:	79fb      	ldrb	r3, [r7, #7]
 8006d66:	f003 030f 	and.w	r3, r3, #15
 8006d6a:	3b04      	subs	r3, #4
 8006d6c:	0112      	lsls	r2, r2, #4
 8006d6e:	b2d2      	uxtb	r2, r2
 8006d70:	440b      	add	r3, r1
 8006d72:	761a      	strb	r2, [r3, #24]
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	e000e100 	.word	0xe000e100
 8006d84:	e000ed00 	.word	0xe000ed00

08006d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b089      	sub	sp, #36	; 0x24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f003 0307 	and.w	r3, r3, #7
 8006d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	f1c3 0307 	rsb	r3, r3, #7
 8006da2:	2b04      	cmp	r3, #4
 8006da4:	bf28      	it	cs
 8006da6:	2304      	movcs	r3, #4
 8006da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	3304      	adds	r3, #4
 8006dae:	2b06      	cmp	r3, #6
 8006db0:	d902      	bls.n	8006db8 <NVIC_EncodePriority+0x30>
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	3b03      	subs	r3, #3
 8006db6:	e000      	b.n	8006dba <NVIC_EncodePriority+0x32>
 8006db8:	2300      	movs	r3, #0
 8006dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc6:	43da      	mvns	r2, r3
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	401a      	ands	r2, r3
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dda:	43d9      	mvns	r1, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006de0:	4313      	orrs	r3, r2
         );
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3724      	adds	r7, #36	; 0x24
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr

08006dee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b082      	sub	sp, #8
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7ff ff4c 	bl	8006c94 <__NVIC_SetPriorityGrouping>
}
 8006dfc:	bf00      	nop
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
 8006e10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006e12:	2300      	movs	r3, #0
 8006e14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006e16:	f7ff ff61 	bl	8006cdc <__NVIC_GetPriorityGrouping>
 8006e1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	68b9      	ldr	r1, [r7, #8]
 8006e20:	6978      	ldr	r0, [r7, #20]
 8006e22:	f7ff ffb1 	bl	8006d88 <NVIC_EncodePriority>
 8006e26:	4602      	mov	r2, r0
 8006e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e2c:	4611      	mov	r1, r2
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7ff ff80 	bl	8006d34 <__NVIC_SetPriority>
}
 8006e34:	bf00      	nop
 8006e36:	3718      	adds	r7, #24
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	4603      	mov	r3, r0
 8006e44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7ff ff54 	bl	8006cf8 <__NVIC_EnableIRQ>
}
 8006e50:	bf00      	nop
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d101      	bne.n	8006e6a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e014      	b.n	8006e94 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	791b      	ldrb	r3, [r3, #4]
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d105      	bne.n	8006e80 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f7fa f9f0 	bl	8001260 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2202      	movs	r2, #2
 8006e84:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eb2:	d120      	bne.n	8006ef6 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ec2:	d118      	bne.n	8006ef6 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2204      	movs	r2, #4
 8006ec8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	f043 0201 	orr.w	r2, r3, #1
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006ede:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006eee:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f82d 	bl	8006f50 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f04:	d120      	bne.n	8006f48 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f14:	d118      	bne.n	8006f48 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2204      	movs	r2, #4
 8006f1a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	f043 0202 	orr.w	r2, r3, #2
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006f30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006f40:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f85d 	bl	8007002 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8006f48:	bf00      	nop
 8006f4a:	3708      	adds	r7, #8
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b087      	sub	sp, #28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	795b      	ldrb	r3, [r3, #5]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d101      	bne.n	8006f7c <HAL_DAC_ConfigChannel+0x18>
 8006f78:	2302      	movs	r3, #2
 8006f7a:	e03c      	b.n	8006ff6 <HAL_DAC_ConfigChannel+0x92>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2202      	movs	r2, #2
 8006f86:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f003 0310 	and.w	r3, r3, #16
 8006f96:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f9e:	43db      	mvns	r3, r3
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f003 0310 	and.w	r3, r3, #16
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	fa02 f303 	lsl.w	r3, r2, r3
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6819      	ldr	r1, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f003 0310 	and.w	r3, r3, #16
 8006fd8:	22c0      	movs	r2, #192	; 0xc0
 8006fda:	fa02 f303 	lsl.w	r3, r2, r3
 8006fde:	43da      	mvns	r2, r3
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	400a      	ands	r2, r1
 8006fe6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2201      	movs	r2, #1
 8006fec:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	371c      	adds	r7, #28
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007002:	b480      	push	{r7}
 8007004:	b083      	sub	sp, #12
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800700a:	bf00      	nop
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
	...

08007018 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007020:	2300      	movs	r3, #0
 8007022:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007024:	f7fe ff32 	bl	8005e8c <HAL_GetTick>
 8007028:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d101      	bne.n	8007034 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e099      	b.n	8007168 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f022 0201 	bic.w	r2, r2, #1
 8007052:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007054:	e00f      	b.n	8007076 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007056:	f7fe ff19 	bl	8005e8c <HAL_GetTick>
 800705a:	4602      	mov	r2, r0
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	2b05      	cmp	r3, #5
 8007062:	d908      	bls.n	8007076 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2220      	movs	r2, #32
 8007068:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2203      	movs	r2, #3
 800706e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e078      	b.n	8007168 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1e8      	bne.n	8007056 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	4b38      	ldr	r3, [pc, #224]	; (8007170 <HAL_DMA_Init+0x158>)
 8007090:	4013      	ands	r3, r2
 8007092:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685a      	ldr	r2, [r3, #4]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80070a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a1b      	ldr	r3, [r3, #32]
 80070c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070cc:	2b04      	cmp	r3, #4
 80070ce:	d107      	bne.n	80070e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d8:	4313      	orrs	r3, r2
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	4313      	orrs	r3, r2
 80070de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f023 0307 	bic.w	r3, r3, #7
 80070f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	4313      	orrs	r3, r2
 8007100:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007106:	2b04      	cmp	r3, #4
 8007108:	d117      	bne.n	800713a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	4313      	orrs	r3, r2
 8007112:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00e      	beq.n	800713a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fb0f 	bl	8007740 <DMA_CheckFifoParam>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d008      	beq.n	800713a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2240      	movs	r2, #64	; 0x40
 800712c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007136:	2301      	movs	r3, #1
 8007138:	e016      	b.n	8007168 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fac6 	bl	80076d4 <DMA_CalcBaseAndBitshift>
 8007148:	4603      	mov	r3, r0
 800714a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007150:	223f      	movs	r2, #63	; 0x3f
 8007152:	409a      	lsls	r2, r3
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2201      	movs	r2, #1
 8007162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3718      	adds	r7, #24
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	f010803f 	.word	0xf010803f

08007174 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b086      	sub	sp, #24
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	607a      	str	r2, [r7, #4]
 8007180:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007182:	2300      	movs	r3, #0
 8007184:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800718a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007192:	2b01      	cmp	r3, #1
 8007194:	d101      	bne.n	800719a <HAL_DMA_Start_IT+0x26>
 8007196:	2302      	movs	r3, #2
 8007198:	e040      	b.n	800721c <HAL_DMA_Start_IT+0xa8>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2201      	movs	r2, #1
 800719e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d12f      	bne.n	800720e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2202      	movs	r2, #2
 80071b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	68b9      	ldr	r1, [r7, #8]
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f000 fa58 	bl	8007678 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071cc:	223f      	movs	r2, #63	; 0x3f
 80071ce:	409a      	lsls	r2, r3
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f042 0216 	orr.w	r2, r2, #22
 80071e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d007      	beq.n	80071fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f042 0208 	orr.w	r2, r2, #8
 80071fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f042 0201 	orr.w	r2, r2, #1
 800720a:	601a      	str	r2, [r3, #0]
 800720c:	e005      	b.n	800721a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007216:	2302      	movs	r3, #2
 8007218:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800721a:	7dfb      	ldrb	r3, [r7, #23]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3718      	adds	r7, #24
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007230:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007232:	f7fe fe2b 	bl	8005e8c <HAL_GetTick>
 8007236:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2b02      	cmp	r3, #2
 8007242:	d008      	beq.n	8007256 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2280      	movs	r2, #128	; 0x80
 8007248:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e052      	b.n	80072fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f022 0216 	bic.w	r2, r2, #22
 8007264:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	695a      	ldr	r2, [r3, #20]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007274:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727a:	2b00      	cmp	r3, #0
 800727c:	d103      	bne.n	8007286 <HAL_DMA_Abort+0x62>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007282:	2b00      	cmp	r3, #0
 8007284:	d007      	beq.n	8007296 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f022 0208 	bic.w	r2, r2, #8
 8007294:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f022 0201 	bic.w	r2, r2, #1
 80072a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80072a6:	e013      	b.n	80072d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80072a8:	f7fe fdf0 	bl	8005e8c <HAL_GetTick>
 80072ac:	4602      	mov	r2, r0
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	2b05      	cmp	r3, #5
 80072b4:	d90c      	bls.n	80072d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2220      	movs	r2, #32
 80072ba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2203      	movs	r2, #3
 80072c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e015      	b.n	80072fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0301 	and.w	r3, r3, #1
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1e4      	bne.n	80072a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072e2:	223f      	movs	r2, #63	; 0x3f
 80072e4:	409a      	lsls	r2, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b02      	cmp	r3, #2
 8007316:	d004      	beq.n	8007322 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2280      	movs	r2, #128	; 0x80
 800731c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e00c      	b.n	800733c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2205      	movs	r2, #5
 8007326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f022 0201 	bic.w	r2, r2, #1
 8007338:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b086      	sub	sp, #24
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007350:	2300      	movs	r3, #0
 8007352:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007354:	4b8e      	ldr	r3, [pc, #568]	; (8007590 <HAL_DMA_IRQHandler+0x248>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a8e      	ldr	r2, [pc, #568]	; (8007594 <HAL_DMA_IRQHandler+0x24c>)
 800735a:	fba2 2303 	umull	r2, r3, r2, r3
 800735e:	0a9b      	lsrs	r3, r3, #10
 8007360:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007366:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007372:	2208      	movs	r2, #8
 8007374:	409a      	lsls	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	4013      	ands	r3, r2
 800737a:	2b00      	cmp	r3, #0
 800737c:	d01a      	beq.n	80073b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0304 	and.w	r3, r3, #4
 8007388:	2b00      	cmp	r3, #0
 800738a:	d013      	beq.n	80073b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 0204 	bic.w	r2, r2, #4
 800739a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073a0:	2208      	movs	r2, #8
 80073a2:	409a      	lsls	r2, r3
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ac:	f043 0201 	orr.w	r2, r3, #1
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073b8:	2201      	movs	r2, #1
 80073ba:	409a      	lsls	r2, r3
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	4013      	ands	r3, r2
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d012      	beq.n	80073ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00b      	beq.n	80073ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073d6:	2201      	movs	r2, #1
 80073d8:	409a      	lsls	r2, r3
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e2:	f043 0202 	orr.w	r2, r3, #2
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ee:	2204      	movs	r2, #4
 80073f0:	409a      	lsls	r2, r3
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	4013      	ands	r3, r2
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d012      	beq.n	8007420 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 0302 	and.w	r3, r3, #2
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00b      	beq.n	8007420 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800740c:	2204      	movs	r2, #4
 800740e:	409a      	lsls	r2, r3
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007418:	f043 0204 	orr.w	r2, r3, #4
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007424:	2210      	movs	r2, #16
 8007426:	409a      	lsls	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	4013      	ands	r3, r2
 800742c:	2b00      	cmp	r3, #0
 800742e:	d043      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0308 	and.w	r3, r3, #8
 800743a:	2b00      	cmp	r3, #0
 800743c:	d03c      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007442:	2210      	movs	r2, #16
 8007444:	409a      	lsls	r2, r3
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d018      	beq.n	800748a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d108      	bne.n	8007478 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746a:	2b00      	cmp	r3, #0
 800746c:	d024      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	4798      	blx	r3
 8007476:	e01f      	b.n	80074b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800747c:	2b00      	cmp	r3, #0
 800747e:	d01b      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	4798      	blx	r3
 8007488:	e016      	b.n	80074b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007494:	2b00      	cmp	r3, #0
 8007496:	d107      	bne.n	80074a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f022 0208 	bic.w	r2, r2, #8
 80074a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d003      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074bc:	2220      	movs	r2, #32
 80074be:	409a      	lsls	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	4013      	ands	r3, r2
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 808f 	beq.w	80075e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0310 	and.w	r3, r3, #16
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f000 8087 	beq.w	80075e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074de:	2220      	movs	r2, #32
 80074e0:	409a      	lsls	r2, r3
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b05      	cmp	r3, #5
 80074f0:	d136      	bne.n	8007560 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f022 0216 	bic.w	r2, r2, #22
 8007500:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	695a      	ldr	r2, [r3, #20]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007510:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007516:	2b00      	cmp	r3, #0
 8007518:	d103      	bne.n	8007522 <HAL_DMA_IRQHandler+0x1da>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800751e:	2b00      	cmp	r3, #0
 8007520:	d007      	beq.n	8007532 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f022 0208 	bic.w	r2, r2, #8
 8007530:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007536:	223f      	movs	r2, #63	; 0x3f
 8007538:	409a      	lsls	r2, r3
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007552:	2b00      	cmp	r3, #0
 8007554:	d07e      	beq.n	8007654 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	4798      	blx	r3
        }
        return;
 800755e:	e079      	b.n	8007654 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d01d      	beq.n	80075aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10d      	bne.n	8007598 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007580:	2b00      	cmp	r3, #0
 8007582:	d031      	beq.n	80075e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	4798      	blx	r3
 800758c:	e02c      	b.n	80075e8 <HAL_DMA_IRQHandler+0x2a0>
 800758e:	bf00      	nop
 8007590:	20000008 	.word	0x20000008
 8007594:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800759c:	2b00      	cmp	r3, #0
 800759e:	d023      	beq.n	80075e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	4798      	blx	r3
 80075a8:	e01e      	b.n	80075e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10f      	bne.n	80075d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f022 0210 	bic.w	r2, r2, #16
 80075c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d003      	beq.n	80075e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d032      	beq.n	8007656 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f4:	f003 0301 	and.w	r3, r3, #1
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d022      	beq.n	8007642 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2205      	movs	r2, #5
 8007600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f022 0201 	bic.w	r2, r2, #1
 8007612:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	3301      	adds	r3, #1
 8007618:	60bb      	str	r3, [r7, #8]
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	429a      	cmp	r2, r3
 800761e:	d307      	bcc.n	8007630 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1f2      	bne.n	8007614 <HAL_DMA_IRQHandler+0x2cc>
 800762e:	e000      	b.n	8007632 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007630:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007646:	2b00      	cmp	r3, #0
 8007648:	d005      	beq.n	8007656 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	4798      	blx	r3
 8007652:	e000      	b.n	8007656 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007654:	bf00      	nop
    }
  }
}
 8007656:	3718      	adds	r7, #24
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800766a:	b2db      	uxtb	r3, r3
}
 800766c:	4618      	mov	r0, r3
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
 8007684:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007694:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	683a      	ldr	r2, [r7, #0]
 800769c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	2b40      	cmp	r3, #64	; 0x40
 80076a4:	d108      	bne.n	80076b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80076b6:	e007      	b.n	80076c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	60da      	str	r2, [r3, #12]
}
 80076c8:	bf00      	nop
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	3b10      	subs	r3, #16
 80076e4:	4a14      	ldr	r2, [pc, #80]	; (8007738 <DMA_CalcBaseAndBitshift+0x64>)
 80076e6:	fba2 2303 	umull	r2, r3, r2, r3
 80076ea:	091b      	lsrs	r3, r3, #4
 80076ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80076ee:	4a13      	ldr	r2, [pc, #76]	; (800773c <DMA_CalcBaseAndBitshift+0x68>)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	4413      	add	r3, r2
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	461a      	mov	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2b03      	cmp	r3, #3
 8007700:	d909      	bls.n	8007716 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800770a:	f023 0303 	bic.w	r3, r3, #3
 800770e:	1d1a      	adds	r2, r3, #4
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	659a      	str	r2, [r3, #88]	; 0x58
 8007714:	e007      	b.n	8007726 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800771e:	f023 0303 	bic.w	r3, r3, #3
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800772a:	4618      	mov	r0, r3
 800772c:	3714      	adds	r7, #20
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	aaaaaaab 	.word	0xaaaaaaab
 800773c:	08011dfc 	.word	0x08011dfc

08007740 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007748:	2300      	movs	r3, #0
 800774a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007750:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d11f      	bne.n	800779a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	2b03      	cmp	r3, #3
 800775e:	d856      	bhi.n	800780e <DMA_CheckFifoParam+0xce>
 8007760:	a201      	add	r2, pc, #4	; (adr r2, 8007768 <DMA_CheckFifoParam+0x28>)
 8007762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007766:	bf00      	nop
 8007768:	08007779 	.word	0x08007779
 800776c:	0800778b 	.word	0x0800778b
 8007770:	08007779 	.word	0x08007779
 8007774:	0800780f 	.word	0x0800780f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d046      	beq.n	8007812 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007788:	e043      	b.n	8007812 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007792:	d140      	bne.n	8007816 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007798:	e03d      	b.n	8007816 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077a2:	d121      	bne.n	80077e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	d837      	bhi.n	800781a <DMA_CheckFifoParam+0xda>
 80077aa:	a201      	add	r2, pc, #4	; (adr r2, 80077b0 <DMA_CheckFifoParam+0x70>)
 80077ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b0:	080077c1 	.word	0x080077c1
 80077b4:	080077c7 	.word	0x080077c7
 80077b8:	080077c1 	.word	0x080077c1
 80077bc:	080077d9 	.word	0x080077d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	73fb      	strb	r3, [r7, #15]
      break;
 80077c4:	e030      	b.n	8007828 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d025      	beq.n	800781e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077d6:	e022      	b.n	800781e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80077e0:	d11f      	bne.n	8007822 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80077e6:	e01c      	b.n	8007822 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d903      	bls.n	80077f6 <DMA_CheckFifoParam+0xb6>
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	2b03      	cmp	r3, #3
 80077f2:	d003      	beq.n	80077fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80077f4:	e018      	b.n	8007828 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	73fb      	strb	r3, [r7, #15]
      break;
 80077fa:	e015      	b.n	8007828 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007800:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00e      	beq.n	8007826 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	73fb      	strb	r3, [r7, #15]
      break;
 800780c:	e00b      	b.n	8007826 <DMA_CheckFifoParam+0xe6>
      break;
 800780e:	bf00      	nop
 8007810:	e00a      	b.n	8007828 <DMA_CheckFifoParam+0xe8>
      break;
 8007812:	bf00      	nop
 8007814:	e008      	b.n	8007828 <DMA_CheckFifoParam+0xe8>
      break;
 8007816:	bf00      	nop
 8007818:	e006      	b.n	8007828 <DMA_CheckFifoParam+0xe8>
      break;
 800781a:	bf00      	nop
 800781c:	e004      	b.n	8007828 <DMA_CheckFifoParam+0xe8>
      break;
 800781e:	bf00      	nop
 8007820:	e002      	b.n	8007828 <DMA_CheckFifoParam+0xe8>
      break;   
 8007822:	bf00      	nop
 8007824:	e000      	b.n	8007828 <DMA_CheckFifoParam+0xe8>
      break;
 8007826:	bf00      	nop
    }
  } 
  
  return status; 
 8007828:	7bfb      	ldrb	r3, [r7, #15]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3714      	adds	r7, #20
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop

08007838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007838:	b480      	push	{r7}
 800783a:	b089      	sub	sp, #36	; 0x24
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007842:	2300      	movs	r3, #0
 8007844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007846:	2300      	movs	r3, #0
 8007848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800784a:	2300      	movs	r3, #0
 800784c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800784e:	2300      	movs	r3, #0
 8007850:	61fb      	str	r3, [r7, #28]
 8007852:	e16b      	b.n	8007b2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007854:	2201      	movs	r2, #1
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	fa02 f303 	lsl.w	r3, r2, r3
 800785c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	4013      	ands	r3, r2
 8007866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	429a      	cmp	r2, r3
 800786e:	f040 815a 	bne.w	8007b26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f003 0303 	and.w	r3, r3, #3
 800787a:	2b01      	cmp	r3, #1
 800787c:	d005      	beq.n	800788a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007886:	2b02      	cmp	r3, #2
 8007888:	d130      	bne.n	80078ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	005b      	lsls	r3, r3, #1
 8007894:	2203      	movs	r2, #3
 8007896:	fa02 f303 	lsl.w	r3, r2, r3
 800789a:	43db      	mvns	r3, r3
 800789c:	69ba      	ldr	r2, [r7, #24]
 800789e:	4013      	ands	r3, r2
 80078a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	68da      	ldr	r2, [r3, #12]
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	005b      	lsls	r3, r3, #1
 80078aa:	fa02 f303 	lsl.w	r3, r2, r3
 80078ae:	69ba      	ldr	r2, [r7, #24]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	69ba      	ldr	r2, [r7, #24]
 80078b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80078c0:	2201      	movs	r2, #1
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	fa02 f303 	lsl.w	r3, r2, r3
 80078c8:	43db      	mvns	r3, r3
 80078ca:	69ba      	ldr	r2, [r7, #24]
 80078cc:	4013      	ands	r3, r2
 80078ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	091b      	lsrs	r3, r3, #4
 80078d6:	f003 0201 	and.w	r2, r3, #1
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	fa02 f303 	lsl.w	r3, r2, r3
 80078e0:	69ba      	ldr	r2, [r7, #24]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	69ba      	ldr	r2, [r7, #24]
 80078ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	f003 0303 	and.w	r3, r3, #3
 80078f4:	2b03      	cmp	r3, #3
 80078f6:	d017      	beq.n	8007928 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	005b      	lsls	r3, r3, #1
 8007902:	2203      	movs	r2, #3
 8007904:	fa02 f303 	lsl.w	r3, r2, r3
 8007908:	43db      	mvns	r3, r3
 800790a:	69ba      	ldr	r2, [r7, #24]
 800790c:	4013      	ands	r3, r2
 800790e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	689a      	ldr	r2, [r3, #8]
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	005b      	lsls	r3, r3, #1
 8007918:	fa02 f303 	lsl.w	r3, r2, r3
 800791c:	69ba      	ldr	r2, [r7, #24]
 800791e:	4313      	orrs	r3, r2
 8007920:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	69ba      	ldr	r2, [r7, #24]
 8007926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	f003 0303 	and.w	r3, r3, #3
 8007930:	2b02      	cmp	r3, #2
 8007932:	d123      	bne.n	800797c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	08da      	lsrs	r2, r3, #3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	3208      	adds	r2, #8
 800793c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007940:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	f003 0307 	and.w	r3, r3, #7
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	220f      	movs	r2, #15
 800794c:	fa02 f303 	lsl.w	r3, r2, r3
 8007950:	43db      	mvns	r3, r3
 8007952:	69ba      	ldr	r2, [r7, #24]
 8007954:	4013      	ands	r3, r2
 8007956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	691a      	ldr	r2, [r3, #16]
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	f003 0307 	and.w	r3, r3, #7
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	fa02 f303 	lsl.w	r3, r2, r3
 8007968:	69ba      	ldr	r2, [r7, #24]
 800796a:	4313      	orrs	r3, r2
 800796c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	08da      	lsrs	r2, r3, #3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	3208      	adds	r2, #8
 8007976:	69b9      	ldr	r1, [r7, #24]
 8007978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	005b      	lsls	r3, r3, #1
 8007986:	2203      	movs	r2, #3
 8007988:	fa02 f303 	lsl.w	r3, r2, r3
 800798c:	43db      	mvns	r3, r3
 800798e:	69ba      	ldr	r2, [r7, #24]
 8007990:	4013      	ands	r3, r2
 8007992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f003 0203 	and.w	r2, r3, #3
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	005b      	lsls	r3, r3, #1
 80079a0:	fa02 f303 	lsl.w	r3, r2, r3
 80079a4:	69ba      	ldr	r2, [r7, #24]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	69ba      	ldr	r2, [r7, #24]
 80079ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 80b4 	beq.w	8007b26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079be:	2300      	movs	r3, #0
 80079c0:	60fb      	str	r3, [r7, #12]
 80079c2:	4b60      	ldr	r3, [pc, #384]	; (8007b44 <HAL_GPIO_Init+0x30c>)
 80079c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079c6:	4a5f      	ldr	r2, [pc, #380]	; (8007b44 <HAL_GPIO_Init+0x30c>)
 80079c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079cc:	6453      	str	r3, [r2, #68]	; 0x44
 80079ce:	4b5d      	ldr	r3, [pc, #372]	; (8007b44 <HAL_GPIO_Init+0x30c>)
 80079d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079d6:	60fb      	str	r3, [r7, #12]
 80079d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80079da:	4a5b      	ldr	r2, [pc, #364]	; (8007b48 <HAL_GPIO_Init+0x310>)
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	089b      	lsrs	r3, r3, #2
 80079e0:	3302      	adds	r3, #2
 80079e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	f003 0303 	and.w	r3, r3, #3
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	220f      	movs	r2, #15
 80079f2:	fa02 f303 	lsl.w	r3, r2, r3
 80079f6:	43db      	mvns	r3, r3
 80079f8:	69ba      	ldr	r2, [r7, #24]
 80079fa:	4013      	ands	r3, r2
 80079fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a52      	ldr	r2, [pc, #328]	; (8007b4c <HAL_GPIO_Init+0x314>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d02b      	beq.n	8007a5e <HAL_GPIO_Init+0x226>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a51      	ldr	r2, [pc, #324]	; (8007b50 <HAL_GPIO_Init+0x318>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d025      	beq.n	8007a5a <HAL_GPIO_Init+0x222>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a50      	ldr	r2, [pc, #320]	; (8007b54 <HAL_GPIO_Init+0x31c>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d01f      	beq.n	8007a56 <HAL_GPIO_Init+0x21e>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a4f      	ldr	r2, [pc, #316]	; (8007b58 <HAL_GPIO_Init+0x320>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d019      	beq.n	8007a52 <HAL_GPIO_Init+0x21a>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a4e      	ldr	r2, [pc, #312]	; (8007b5c <HAL_GPIO_Init+0x324>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d013      	beq.n	8007a4e <HAL_GPIO_Init+0x216>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a4d      	ldr	r2, [pc, #308]	; (8007b60 <HAL_GPIO_Init+0x328>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d00d      	beq.n	8007a4a <HAL_GPIO_Init+0x212>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a4c      	ldr	r2, [pc, #304]	; (8007b64 <HAL_GPIO_Init+0x32c>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d007      	beq.n	8007a46 <HAL_GPIO_Init+0x20e>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a4b      	ldr	r2, [pc, #300]	; (8007b68 <HAL_GPIO_Init+0x330>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d101      	bne.n	8007a42 <HAL_GPIO_Init+0x20a>
 8007a3e:	2307      	movs	r3, #7
 8007a40:	e00e      	b.n	8007a60 <HAL_GPIO_Init+0x228>
 8007a42:	2308      	movs	r3, #8
 8007a44:	e00c      	b.n	8007a60 <HAL_GPIO_Init+0x228>
 8007a46:	2306      	movs	r3, #6
 8007a48:	e00a      	b.n	8007a60 <HAL_GPIO_Init+0x228>
 8007a4a:	2305      	movs	r3, #5
 8007a4c:	e008      	b.n	8007a60 <HAL_GPIO_Init+0x228>
 8007a4e:	2304      	movs	r3, #4
 8007a50:	e006      	b.n	8007a60 <HAL_GPIO_Init+0x228>
 8007a52:	2303      	movs	r3, #3
 8007a54:	e004      	b.n	8007a60 <HAL_GPIO_Init+0x228>
 8007a56:	2302      	movs	r3, #2
 8007a58:	e002      	b.n	8007a60 <HAL_GPIO_Init+0x228>
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e000      	b.n	8007a60 <HAL_GPIO_Init+0x228>
 8007a5e:	2300      	movs	r3, #0
 8007a60:	69fa      	ldr	r2, [r7, #28]
 8007a62:	f002 0203 	and.w	r2, r2, #3
 8007a66:	0092      	lsls	r2, r2, #2
 8007a68:	4093      	lsls	r3, r2
 8007a6a:	69ba      	ldr	r2, [r7, #24]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007a70:	4935      	ldr	r1, [pc, #212]	; (8007b48 <HAL_GPIO_Init+0x310>)
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	089b      	lsrs	r3, r3, #2
 8007a76:	3302      	adds	r3, #2
 8007a78:	69ba      	ldr	r2, [r7, #24]
 8007a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007a7e:	4b3b      	ldr	r3, [pc, #236]	; (8007b6c <HAL_GPIO_Init+0x334>)
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	43db      	mvns	r3, r3
 8007a88:	69ba      	ldr	r2, [r7, #24]
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d003      	beq.n	8007aa2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007a9a:	69ba      	ldr	r2, [r7, #24]
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007aa2:	4a32      	ldr	r2, [pc, #200]	; (8007b6c <HAL_GPIO_Init+0x334>)
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007aa8:	4b30      	ldr	r3, [pc, #192]	; (8007b6c <HAL_GPIO_Init+0x334>)
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	43db      	mvns	r3, r3
 8007ab2:	69ba      	ldr	r2, [r7, #24]
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d003      	beq.n	8007acc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007ac4:	69ba      	ldr	r2, [r7, #24]
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007acc:	4a27      	ldr	r2, [pc, #156]	; (8007b6c <HAL_GPIO_Init+0x334>)
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007ad2:	4b26      	ldr	r3, [pc, #152]	; (8007b6c <HAL_GPIO_Init+0x334>)
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	43db      	mvns	r3, r3
 8007adc:	69ba      	ldr	r2, [r7, #24]
 8007ade:	4013      	ands	r3, r2
 8007ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d003      	beq.n	8007af6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007aee:	69ba      	ldr	r2, [r7, #24]
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007af6:	4a1d      	ldr	r2, [pc, #116]	; (8007b6c <HAL_GPIO_Init+0x334>)
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007afc:	4b1b      	ldr	r3, [pc, #108]	; (8007b6c <HAL_GPIO_Init+0x334>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	43db      	mvns	r3, r3
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	4013      	ands	r3, r2
 8007b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d003      	beq.n	8007b20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007b18:	69ba      	ldr	r2, [r7, #24]
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007b20:	4a12      	ldr	r2, [pc, #72]	; (8007b6c <HAL_GPIO_Init+0x334>)
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	61fb      	str	r3, [r7, #28]
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	2b0f      	cmp	r3, #15
 8007b30:	f67f ae90 	bls.w	8007854 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007b34:	bf00      	nop
 8007b36:	bf00      	nop
 8007b38:	3724      	adds	r7, #36	; 0x24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	40023800 	.word	0x40023800
 8007b48:	40013800 	.word	0x40013800
 8007b4c:	40020000 	.word	0x40020000
 8007b50:	40020400 	.word	0x40020400
 8007b54:	40020800 	.word	0x40020800
 8007b58:	40020c00 	.word	0x40020c00
 8007b5c:	40021000 	.word	0x40021000
 8007b60:	40021400 	.word	0x40021400
 8007b64:	40021800 	.word	0x40021800
 8007b68:	40021c00 	.word	0x40021c00
 8007b6c:	40013c00 	.word	0x40013c00

08007b70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	691a      	ldr	r2, [r3, #16]
 8007b80:	887b      	ldrh	r3, [r7, #2]
 8007b82:	4013      	ands	r3, r2
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d002      	beq.n	8007b8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	73fb      	strb	r3, [r7, #15]
 8007b8c:	e001      	b.n	8007b92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	807b      	strh	r3, [r7, #2]
 8007bac:	4613      	mov	r3, r2
 8007bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007bb0:	787b      	ldrb	r3, [r7, #1]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d003      	beq.n	8007bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007bb6:	887a      	ldrh	r2, [r7, #2]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007bbc:	e003      	b.n	8007bc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007bbe:	887b      	ldrh	r3, [r7, #2]
 8007bc0:	041a      	lsls	r2, r3, #16
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	619a      	str	r2, [r3, #24]
}
 8007bc6:	bf00      	nop
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b085      	sub	sp, #20
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	460b      	mov	r3, r1
 8007bdc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007be4:	887a      	ldrh	r2, [r7, #2]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	4013      	ands	r3, r2
 8007bea:	041a      	lsls	r2, r3, #16
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	43d9      	mvns	r1, r3
 8007bf0:	887b      	ldrh	r3, [r7, #2]
 8007bf2:	400b      	ands	r3, r1
 8007bf4:	431a      	orrs	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	619a      	str	r2, [r3, #24]
}
 8007bfa:	bf00      	nop
 8007bfc:	3714      	adds	r7, #20
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
	...

08007c08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007c12:	4b08      	ldr	r3, [pc, #32]	; (8007c34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c14:	695a      	ldr	r2, [r3, #20]
 8007c16:	88fb      	ldrh	r3, [r7, #6]
 8007c18:	4013      	ands	r3, r2
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d006      	beq.n	8007c2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007c1e:	4a05      	ldr	r2, [pc, #20]	; (8007c34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c20:	88fb      	ldrh	r3, [r7, #6]
 8007c22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007c24:	88fb      	ldrh	r3, [r7, #6]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7f9 fe0a 	bl	8001840 <HAL_GPIO_EXTI_Callback>
  }
}
 8007c2c:	bf00      	nop
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	40013c00 	.word	0x40013c00

08007c38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d101      	bne.n	8007c4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e12b      	b.n	8007ea2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d106      	bne.n	8007c64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f7f9 fe58 	bl	8001914 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2224      	movs	r2, #36	; 0x24
 8007c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f022 0201 	bic.w	r2, r2, #1
 8007c7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007c9c:	f002 fa34 	bl	800a108 <HAL_RCC_GetPCLK1Freq>
 8007ca0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	4a81      	ldr	r2, [pc, #516]	; (8007eac <HAL_I2C_Init+0x274>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d807      	bhi.n	8007cbc <HAL_I2C_Init+0x84>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	4a80      	ldr	r2, [pc, #512]	; (8007eb0 <HAL_I2C_Init+0x278>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	bf94      	ite	ls
 8007cb4:	2301      	movls	r3, #1
 8007cb6:	2300      	movhi	r3, #0
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	e006      	b.n	8007cca <HAL_I2C_Init+0x92>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	4a7d      	ldr	r2, [pc, #500]	; (8007eb4 <HAL_I2C_Init+0x27c>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	bf94      	ite	ls
 8007cc4:	2301      	movls	r3, #1
 8007cc6:	2300      	movhi	r3, #0
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d001      	beq.n	8007cd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e0e7      	b.n	8007ea2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	4a78      	ldr	r2, [pc, #480]	; (8007eb8 <HAL_I2C_Init+0x280>)
 8007cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cda:	0c9b      	lsrs	r3, r3, #18
 8007cdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68ba      	ldr	r2, [r7, #8]
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	6a1b      	ldr	r3, [r3, #32]
 8007cf8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	4a6a      	ldr	r2, [pc, #424]	; (8007eac <HAL_I2C_Init+0x274>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d802      	bhi.n	8007d0c <HAL_I2C_Init+0xd4>
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	e009      	b.n	8007d20 <HAL_I2C_Init+0xe8>
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007d12:	fb02 f303 	mul.w	r3, r2, r3
 8007d16:	4a69      	ldr	r2, [pc, #420]	; (8007ebc <HAL_I2C_Init+0x284>)
 8007d18:	fba2 2303 	umull	r2, r3, r2, r3
 8007d1c:	099b      	lsrs	r3, r3, #6
 8007d1e:	3301      	adds	r3, #1
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	6812      	ldr	r2, [r2, #0]
 8007d24:	430b      	orrs	r3, r1
 8007d26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	69db      	ldr	r3, [r3, #28]
 8007d2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007d32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	495c      	ldr	r1, [pc, #368]	; (8007eac <HAL_I2C_Init+0x274>)
 8007d3c:	428b      	cmp	r3, r1
 8007d3e:	d819      	bhi.n	8007d74 <HAL_I2C_Init+0x13c>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	1e59      	subs	r1, r3, #1
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	005b      	lsls	r3, r3, #1
 8007d4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d4e:	1c59      	adds	r1, r3, #1
 8007d50:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007d54:	400b      	ands	r3, r1
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00a      	beq.n	8007d70 <HAL_I2C_Init+0x138>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	1e59      	subs	r1, r3, #1
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	005b      	lsls	r3, r3, #1
 8007d64:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d68:	3301      	adds	r3, #1
 8007d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d6e:	e051      	b.n	8007e14 <HAL_I2C_Init+0x1dc>
 8007d70:	2304      	movs	r3, #4
 8007d72:	e04f      	b.n	8007e14 <HAL_I2C_Init+0x1dc>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d111      	bne.n	8007da0 <HAL_I2C_Init+0x168>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	1e58      	subs	r0, r3, #1
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6859      	ldr	r1, [r3, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	440b      	add	r3, r1
 8007d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d8e:	3301      	adds	r3, #1
 8007d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	bf0c      	ite	eq
 8007d98:	2301      	moveq	r3, #1
 8007d9a:	2300      	movne	r3, #0
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	e012      	b.n	8007dc6 <HAL_I2C_Init+0x18e>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	1e58      	subs	r0, r3, #1
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6859      	ldr	r1, [r3, #4]
 8007da8:	460b      	mov	r3, r1
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	440b      	add	r3, r1
 8007dae:	0099      	lsls	r1, r3, #2
 8007db0:	440b      	add	r3, r1
 8007db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8007db6:	3301      	adds	r3, #1
 8007db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	bf0c      	ite	eq
 8007dc0:	2301      	moveq	r3, #1
 8007dc2:	2300      	movne	r3, #0
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d001      	beq.n	8007dce <HAL_I2C_Init+0x196>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e022      	b.n	8007e14 <HAL_I2C_Init+0x1dc>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10e      	bne.n	8007df4 <HAL_I2C_Init+0x1bc>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	1e58      	subs	r0, r3, #1
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6859      	ldr	r1, [r3, #4]
 8007dde:	460b      	mov	r3, r1
 8007de0:	005b      	lsls	r3, r3, #1
 8007de2:	440b      	add	r3, r1
 8007de4:	fbb0 f3f3 	udiv	r3, r0, r3
 8007de8:	3301      	adds	r3, #1
 8007dea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007df2:	e00f      	b.n	8007e14 <HAL_I2C_Init+0x1dc>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	1e58      	subs	r0, r3, #1
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6859      	ldr	r1, [r3, #4]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	440b      	add	r3, r1
 8007e02:	0099      	lsls	r1, r3, #2
 8007e04:	440b      	add	r3, r1
 8007e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e14:	6879      	ldr	r1, [r7, #4]
 8007e16:	6809      	ldr	r1, [r1, #0]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	69da      	ldr	r2, [r3, #28]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	431a      	orrs	r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	430a      	orrs	r2, r1
 8007e36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007e42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	6911      	ldr	r1, [r2, #16]
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	68d2      	ldr	r2, [r2, #12]
 8007e4e:	4311      	orrs	r1, r2
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	6812      	ldr	r2, [r2, #0]
 8007e54:	430b      	orrs	r3, r1
 8007e56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	695a      	ldr	r2, [r3, #20]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	699b      	ldr	r3, [r3, #24]
 8007e6a:	431a      	orrs	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	430a      	orrs	r2, r1
 8007e72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f042 0201 	orr.w	r2, r2, #1
 8007e82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2220      	movs	r2, #32
 8007e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	000186a0 	.word	0x000186a0
 8007eb0:	001e847f 	.word	0x001e847f
 8007eb4:	003d08ff 	.word	0x003d08ff
 8007eb8:	431bde83 	.word	0x431bde83
 8007ebc:	10624dd3 	.word	0x10624dd3

08007ec0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b088      	sub	sp, #32
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ee0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ee8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007eea:	7bfb      	ldrb	r3, [r7, #15]
 8007eec:	2b10      	cmp	r3, #16
 8007eee:	d003      	beq.n	8007ef8 <HAL_I2C_EV_IRQHandler+0x38>
 8007ef0:	7bfb      	ldrb	r3, [r7, #15]
 8007ef2:	2b40      	cmp	r3, #64	; 0x40
 8007ef4:	f040 80b1 	bne.w	800805a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	695b      	ldr	r3, [r3, #20]
 8007f06:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	f003 0301 	and.w	r3, r3, #1
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10d      	bne.n	8007f2e <HAL_I2C_EV_IRQHandler+0x6e>
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007f18:	d003      	beq.n	8007f22 <HAL_I2C_EV_IRQHandler+0x62>
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007f20:	d101      	bne.n	8007f26 <HAL_I2C_EV_IRQHandler+0x66>
 8007f22:	2301      	movs	r3, #1
 8007f24:	e000      	b.n	8007f28 <HAL_I2C_EV_IRQHandler+0x68>
 8007f26:	2300      	movs	r3, #0
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	f000 8114 	beq.w	8008156 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	f003 0301 	and.w	r3, r3, #1
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00b      	beq.n	8007f50 <HAL_I2C_EV_IRQHandler+0x90>
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d006      	beq.n	8007f50 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f001 fc54 	bl	80097f0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fd5e 	bl	8008a0a <I2C_Master_SB>
 8007f4e:	e083      	b.n	8008058 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	f003 0308 	and.w	r3, r3, #8
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d008      	beq.n	8007f6c <HAL_I2C_EV_IRQHandler+0xac>
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d003      	beq.n	8007f6c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fdd6 	bl	8008b16 <I2C_Master_ADD10>
 8007f6a:	e075      	b.n	8008058 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	f003 0302 	and.w	r3, r3, #2
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d008      	beq.n	8007f88 <HAL_I2C_EV_IRQHandler+0xc8>
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d003      	beq.n	8007f88 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fdf2 	bl	8008b6a <I2C_Master_ADDR>
 8007f86:	e067      	b.n	8008058 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	f003 0304 	and.w	r3, r3, #4
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d036      	beq.n	8008000 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fa0:	f000 80db 	beq.w	800815a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00d      	beq.n	8007fca <HAL_I2C_EV_IRQHandler+0x10a>
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d008      	beq.n	8007fca <HAL_I2C_EV_IRQHandler+0x10a>
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	f003 0304 	and.w	r3, r3, #4
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d103      	bne.n	8007fca <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f9d6 	bl	8008374 <I2C_MasterTransmit_TXE>
 8007fc8:	e046      	b.n	8008058 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	f003 0304 	and.w	r3, r3, #4
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f000 80c2 	beq.w	800815a <HAL_I2C_EV_IRQHandler+0x29a>
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f000 80bc 	beq.w	800815a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007fe2:	7bbb      	ldrb	r3, [r7, #14]
 8007fe4:	2b21      	cmp	r3, #33	; 0x21
 8007fe6:	d103      	bne.n	8007ff0 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 fa5f 	bl	80084ac <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007fee:	e0b4      	b.n	800815a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
 8007ff2:	2b40      	cmp	r3, #64	; 0x40
 8007ff4:	f040 80b1 	bne.w	800815a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 facd 	bl	8008598 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007ffe:	e0ac      	b.n	800815a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800800a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800800e:	f000 80a4 	beq.w	800815a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00d      	beq.n	8008038 <HAL_I2C_EV_IRQHandler+0x178>
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008022:	2b00      	cmp	r3, #0
 8008024:	d008      	beq.n	8008038 <HAL_I2C_EV_IRQHandler+0x178>
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	f003 0304 	and.w	r3, r3, #4
 800802c:	2b00      	cmp	r3, #0
 800802e:	d103      	bne.n	8008038 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fb45 	bl	80086c0 <I2C_MasterReceive_RXNE>
 8008036:	e00f      	b.n	8008058 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	f003 0304 	and.w	r3, r3, #4
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 808b 	beq.w	800815a <HAL_I2C_EV_IRQHandler+0x29a>
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800804a:	2b00      	cmp	r3, #0
 800804c:	f000 8085 	beq.w	800815a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fbf0 	bl	8008836 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008056:	e080      	b.n	800815a <HAL_I2C_EV_IRQHandler+0x29a>
 8008058:	e07f      	b.n	800815a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805e:	2b00      	cmp	r3, #0
 8008060:	d004      	beq.n	800806c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	695b      	ldr	r3, [r3, #20]
 8008068:	61fb      	str	r3, [r7, #28]
 800806a:	e007      	b.n	800807c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	699b      	ldr	r3, [r3, #24]
 8008072:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	695b      	ldr	r3, [r3, #20]
 800807a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	f003 0302 	and.w	r3, r3, #2
 8008082:	2b00      	cmp	r3, #0
 8008084:	d011      	beq.n	80080aa <HAL_I2C_EV_IRQHandler+0x1ea>
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00c      	beq.n	80080aa <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008094:	2b00      	cmp	r3, #0
 8008096:	d003      	beq.n	80080a0 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	699b      	ldr	r3, [r3, #24]
 800809e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80080a0:	69b9      	ldr	r1, [r7, #24]
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 ffb0 	bl	8009008 <I2C_Slave_ADDR>
 80080a8:	e05a      	b.n	8008160 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	f003 0310 	and.w	r3, r3, #16
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d008      	beq.n	80080c6 <HAL_I2C_EV_IRQHandler+0x206>
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d003      	beq.n	80080c6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 ffea 	bl	8009098 <I2C_Slave_STOPF>
 80080c4:	e04c      	b.n	8008160 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80080c6:	7bbb      	ldrb	r3, [r7, #14]
 80080c8:	2b21      	cmp	r3, #33	; 0x21
 80080ca:	d002      	beq.n	80080d2 <HAL_I2C_EV_IRQHandler+0x212>
 80080cc:	7bbb      	ldrb	r3, [r7, #14]
 80080ce:	2b29      	cmp	r3, #41	; 0x29
 80080d0:	d120      	bne.n	8008114 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00d      	beq.n	80080f8 <HAL_I2C_EV_IRQHandler+0x238>
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d008      	beq.n	80080f8 <HAL_I2C_EV_IRQHandler+0x238>
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	f003 0304 	and.w	r3, r3, #4
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d103      	bne.n	80080f8 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fecb 	bl	8008e8c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80080f6:	e032      	b.n	800815e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	f003 0304 	and.w	r3, r3, #4
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d02d      	beq.n	800815e <HAL_I2C_EV_IRQHandler+0x29e>
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008108:	2b00      	cmp	r3, #0
 800810a:	d028      	beq.n	800815e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fefa 	bl	8008f06 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008112:	e024      	b.n	800815e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00d      	beq.n	800813a <HAL_I2C_EV_IRQHandler+0x27a>
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008124:	2b00      	cmp	r3, #0
 8008126:	d008      	beq.n	800813a <HAL_I2C_EV_IRQHandler+0x27a>
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	f003 0304 	and.w	r3, r3, #4
 800812e:	2b00      	cmp	r3, #0
 8008130:	d103      	bne.n	800813a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 ff08 	bl	8008f48 <I2C_SlaveReceive_RXNE>
 8008138:	e012      	b.n	8008160 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	f003 0304 	and.w	r3, r3, #4
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00d      	beq.n	8008160 <HAL_I2C_EV_IRQHandler+0x2a0>
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800814a:	2b00      	cmp	r3, #0
 800814c:	d008      	beq.n	8008160 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 ff38 	bl	8008fc4 <I2C_SlaveReceive_BTF>
 8008154:	e004      	b.n	8008160 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8008156:	bf00      	nop
 8008158:	e002      	b.n	8008160 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800815a:	bf00      	nop
 800815c:	e000      	b.n	8008160 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800815e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8008160:	3720      	adds	r7, #32
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b08a      	sub	sp, #40	; 0x28
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	695b      	ldr	r3, [r3, #20]
 8008174:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800817e:	2300      	movs	r3, #0
 8008180:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008188:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800818a:	6a3b      	ldr	r3, [r7, #32]
 800818c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00d      	beq.n	80081b0 <HAL_I2C_ER_IRQHandler+0x4a>
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800819a:	2b00      	cmp	r3, #0
 800819c:	d008      	beq.n	80081b0 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800819e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a0:	f043 0301 	orr.w	r3, r3, #1
 80081a4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80081ae:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80081b0:	6a3b      	ldr	r3, [r7, #32]
 80081b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00d      	beq.n	80081d6 <HAL_I2C_ER_IRQHandler+0x70>
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d008      	beq.n	80081d6 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80081c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c6:	f043 0302 	orr.w	r3, r3, #2
 80081ca:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80081d4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80081d6:	6a3b      	ldr	r3, [r7, #32]
 80081d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d03e      	beq.n	800825e <HAL_I2C_ER_IRQHandler+0xf8>
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d039      	beq.n	800825e <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80081ea:	7efb      	ldrb	r3, [r7, #27]
 80081ec:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081fc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008202:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8008204:	7ebb      	ldrb	r3, [r7, #26]
 8008206:	2b20      	cmp	r3, #32
 8008208:	d112      	bne.n	8008230 <HAL_I2C_ER_IRQHandler+0xca>
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10f      	bne.n	8008230 <HAL_I2C_ER_IRQHandler+0xca>
 8008210:	7cfb      	ldrb	r3, [r7, #19]
 8008212:	2b21      	cmp	r3, #33	; 0x21
 8008214:	d008      	beq.n	8008228 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8008216:	7cfb      	ldrb	r3, [r7, #19]
 8008218:	2b29      	cmp	r3, #41	; 0x29
 800821a:	d005      	beq.n	8008228 <HAL_I2C_ER_IRQHandler+0xc2>
 800821c:	7cfb      	ldrb	r3, [r7, #19]
 800821e:	2b28      	cmp	r3, #40	; 0x28
 8008220:	d106      	bne.n	8008230 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2b21      	cmp	r3, #33	; 0x21
 8008226:	d103      	bne.n	8008230 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f001 f865 	bl	80092f8 <I2C_Slave_AF>
 800822e:	e016      	b.n	800825e <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008238:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823c:	f043 0304 	orr.w	r3, r3, #4
 8008240:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008242:	7efb      	ldrb	r3, [r7, #27]
 8008244:	2b10      	cmp	r3, #16
 8008246:	d002      	beq.n	800824e <HAL_I2C_ER_IRQHandler+0xe8>
 8008248:	7efb      	ldrb	r3, [r7, #27]
 800824a:	2b40      	cmp	r3, #64	; 0x40
 800824c:	d107      	bne.n	800825e <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800825c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800825e:	6a3b      	ldr	r3, [r7, #32]
 8008260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00d      	beq.n	8008284 <HAL_I2C_ER_IRQHandler+0x11e>
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800826e:	2b00      	cmp	r3, #0
 8008270:	d008      	beq.n	8008284 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8008272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008274:	f043 0308 	orr.w	r3, r3, #8
 8008278:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8008282:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8008284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008286:	2b00      	cmp	r3, #0
 8008288:	d008      	beq.n	800829c <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800828e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008290:	431a      	orrs	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f001 f89e 	bl	80093d8 <I2C_ITError>
  }
}
 800829c:	bf00      	nop
 800829e:	3728      	adds	r7, #40	; 0x28
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80082ac:	bf00      	nop
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80082d4:	bf00      	nop
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	460b      	mov	r3, r1
 80082fe:	70fb      	strb	r3, [r7, #3]
 8008300:	4613      	mov	r3, r2
 8008302:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8008318:	bf00      	nop
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008368:	bf00      	nop
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008382:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800838a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008390:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008396:	2b00      	cmp	r3, #0
 8008398:	d150      	bne.n	800843c <I2C_MasterTransmit_TXE+0xc8>
 800839a:	7bfb      	ldrb	r3, [r7, #15]
 800839c:	2b21      	cmp	r3, #33	; 0x21
 800839e:	d14d      	bne.n	800843c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2b08      	cmp	r3, #8
 80083a4:	d01d      	beq.n	80083e2 <I2C_MasterTransmit_TXE+0x6e>
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	2b20      	cmp	r3, #32
 80083aa:	d01a      	beq.n	80083e2 <I2C_MasterTransmit_TXE+0x6e>
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80083b2:	d016      	beq.n	80083e2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	685a      	ldr	r2, [r3, #4]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80083c2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2211      	movs	r2, #17
 80083c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2220      	movs	r2, #32
 80083d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f7ff ff62 	bl	80082a4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80083e0:	e060      	b.n	80084a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	685a      	ldr	r2, [r3, #4]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80083f0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008400:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2220      	movs	r2, #32
 800840c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008416:	b2db      	uxtb	r3, r3
 8008418:	2b40      	cmp	r3, #64	; 0x40
 800841a:	d107      	bne.n	800842c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f7ff ff7d 	bl	8008324 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800842a:	e03b      	b.n	80084a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f7ff ff35 	bl	80082a4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800843a:	e033      	b.n	80084a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800843c:	7bfb      	ldrb	r3, [r7, #15]
 800843e:	2b21      	cmp	r3, #33	; 0x21
 8008440:	d005      	beq.n	800844e <I2C_MasterTransmit_TXE+0xda>
 8008442:	7bbb      	ldrb	r3, [r7, #14]
 8008444:	2b40      	cmp	r3, #64	; 0x40
 8008446:	d12d      	bne.n	80084a4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8008448:	7bfb      	ldrb	r3, [r7, #15]
 800844a:	2b22      	cmp	r3, #34	; 0x22
 800844c:	d12a      	bne.n	80084a4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008452:	b29b      	uxth	r3, r3
 8008454:	2b00      	cmp	r3, #0
 8008456:	d108      	bne.n	800846a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	685a      	ldr	r2, [r3, #4]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008466:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008468:	e01c      	b.n	80084a4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008470:	b2db      	uxtb	r3, r3
 8008472:	2b40      	cmp	r3, #64	; 0x40
 8008474:	d103      	bne.n	800847e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f88e 	bl	8008598 <I2C_MemoryTransmit_TXE_BTF>
}
 800847c:	e012      	b.n	80084a4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008482:	781a      	ldrb	r2, [r3, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848e:	1c5a      	adds	r2, r3, #1
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008498:	b29b      	uxth	r3, r3
 800849a:	3b01      	subs	r3, #1
 800849c:	b29a      	uxth	r2, r3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80084a2:	e7ff      	b.n	80084a4 <I2C_MasterTransmit_TXE+0x130>
 80084a4:	bf00      	nop
 80084a6:	3710      	adds	r7, #16
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	2b21      	cmp	r3, #33	; 0x21
 80084c4:	d164      	bne.n	8008590 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d012      	beq.n	80084f6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d4:	781a      	ldrb	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e0:	1c5a      	adds	r2, r3, #1
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	3b01      	subs	r3, #1
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80084f4:	e04c      	b.n	8008590 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2b08      	cmp	r3, #8
 80084fa:	d01d      	beq.n	8008538 <I2C_MasterTransmit_BTF+0x8c>
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2b20      	cmp	r3, #32
 8008500:	d01a      	beq.n	8008538 <I2C_MasterTransmit_BTF+0x8c>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008508:	d016      	beq.n	8008538 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	685a      	ldr	r2, [r3, #4]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008518:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2211      	movs	r2, #17
 800851e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2220      	movs	r2, #32
 800852c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f7ff feb7 	bl	80082a4 <HAL_I2C_MasterTxCpltCallback>
}
 8008536:	e02b      	b.n	8008590 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	685a      	ldr	r2, [r3, #4]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008546:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008556:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2220      	movs	r2, #32
 8008562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800856c:	b2db      	uxtb	r3, r3
 800856e:	2b40      	cmp	r3, #64	; 0x40
 8008570:	d107      	bne.n	8008582 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f7ff fed2 	bl	8008324 <HAL_I2C_MemTxCpltCallback>
}
 8008580:	e006      	b.n	8008590 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f7ff fe8a 	bl	80082a4 <HAL_I2C_MasterTxCpltCallback>
}
 8008590:	bf00      	nop
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085a6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d11d      	bne.n	80085ec <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d10b      	bne.n	80085d0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c8:	1c9a      	adds	r2, r3, #2
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80085ce:	e073      	b.n	80086b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	121b      	asrs	r3, r3, #8
 80085d8:	b2da      	uxtb	r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085e4:	1c5a      	adds	r2, r3, #1
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80085ea:	e065      	b.n	80086b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d10b      	bne.n	800860c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085f8:	b2da      	uxtb	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008604:	1c5a      	adds	r2, r3, #1
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	651a      	str	r2, [r3, #80]	; 0x50
}
 800860a:	e055      	b.n	80086b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008610:	2b02      	cmp	r3, #2
 8008612:	d151      	bne.n	80086b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8008614:	7bfb      	ldrb	r3, [r7, #15]
 8008616:	2b22      	cmp	r3, #34	; 0x22
 8008618:	d10d      	bne.n	8008636 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008628:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800862e:	1c5a      	adds	r2, r3, #1
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008634:	e040      	b.n	80086b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800863a:	b29b      	uxth	r3, r3
 800863c:	2b00      	cmp	r3, #0
 800863e:	d015      	beq.n	800866c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8008640:	7bfb      	ldrb	r3, [r7, #15]
 8008642:	2b21      	cmp	r3, #33	; 0x21
 8008644:	d112      	bne.n	800866c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864a:	781a      	ldrb	r2, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008656:	1c5a      	adds	r2, r3, #1
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008660:	b29b      	uxth	r3, r3
 8008662:	3b01      	subs	r3, #1
 8008664:	b29a      	uxth	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800866a:	e025      	b.n	80086b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008670:	b29b      	uxth	r3, r3
 8008672:	2b00      	cmp	r3, #0
 8008674:	d120      	bne.n	80086b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8008676:	7bfb      	ldrb	r3, [r7, #15]
 8008678:	2b21      	cmp	r3, #33	; 0x21
 800867a:	d11d      	bne.n	80086b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	685a      	ldr	r2, [r3, #4]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800868a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800869a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2220      	movs	r2, #32
 80086a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f7ff fe36 	bl	8008324 <HAL_I2C_MemTxCpltCallback>
}
 80086b8:	bf00      	nop
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	2b22      	cmp	r3, #34	; 0x22
 80086d2:	f040 80ac 	bne.w	800882e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086da:	b29b      	uxth	r3, r3
 80086dc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2b03      	cmp	r3, #3
 80086e2:	d921      	bls.n	8008728 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	691a      	ldr	r2, [r3, #16]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ee:	b2d2      	uxtb	r2, r2
 80086f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f6:	1c5a      	adds	r2, r3, #1
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008700:	b29b      	uxth	r3, r3
 8008702:	3b01      	subs	r3, #1
 8008704:	b29a      	uxth	r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800870e:	b29b      	uxth	r3, r3
 8008710:	2b03      	cmp	r3, #3
 8008712:	f040 808c 	bne.w	800882e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	685a      	ldr	r2, [r3, #4]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008724:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8008726:	e082      	b.n	800882e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872c:	2b02      	cmp	r3, #2
 800872e:	d075      	beq.n	800881c <I2C_MasterReceive_RXNE+0x15c>
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2b01      	cmp	r3, #1
 8008734:	d002      	beq.n	800873c <I2C_MasterReceive_RXNE+0x7c>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d16f      	bne.n	800881c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f001 f825 	bl	800978c <I2C_WaitOnSTOPRequestThroughIT>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d142      	bne.n	80087ce <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008756:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	685a      	ldr	r2, [r3, #4]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008766:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	691a      	ldr	r2, [r3, #16]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008772:	b2d2      	uxtb	r2, r2
 8008774:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877a:	1c5a      	adds	r2, r3, #1
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008784:	b29b      	uxth	r3, r3
 8008786:	3b01      	subs	r3, #1
 8008788:	b29a      	uxth	r2, r3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2220      	movs	r2, #32
 8008792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800879c:	b2db      	uxtb	r3, r3
 800879e:	2b40      	cmp	r3, #64	; 0x40
 80087a0:	d10a      	bne.n	80087b8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f7ff fdc1 	bl	8008338 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80087b6:	e03a      	b.n	800882e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2212      	movs	r2, #18
 80087c4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f7ff fd76 	bl	80082b8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80087cc:	e02f      	b.n	800882e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	685a      	ldr	r2, [r3, #4]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80087dc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	691a      	ldr	r2, [r3, #16]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e8:	b2d2      	uxtb	r2, r2
 80087ea:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f0:	1c5a      	adds	r2, r3, #1
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	3b01      	subs	r3, #1
 80087fe:	b29a      	uxth	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2220      	movs	r2, #32
 8008808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f7ff fd99 	bl	800834c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800881a:	e008      	b.n	800882e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	685a      	ldr	r2, [r3, #4]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800882a:	605a      	str	r2, [r3, #4]
}
 800882c:	e7ff      	b.n	800882e <I2C_MasterReceive_RXNE+0x16e>
 800882e:	bf00      	nop
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b084      	sub	sp, #16
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008842:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008848:	b29b      	uxth	r3, r3
 800884a:	2b04      	cmp	r3, #4
 800884c:	d11b      	bne.n	8008886 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	685a      	ldr	r2, [r3, #4]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800885c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	691a      	ldr	r2, [r3, #16]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008868:	b2d2      	uxtb	r2, r2
 800886a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008870:	1c5a      	adds	r2, r3, #1
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800887a:	b29b      	uxth	r3, r3
 800887c:	3b01      	subs	r3, #1
 800887e:	b29a      	uxth	r2, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8008884:	e0bd      	b.n	8008a02 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800888a:	b29b      	uxth	r3, r3
 800888c:	2b03      	cmp	r3, #3
 800888e:	d129      	bne.n	80088e4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	685a      	ldr	r2, [r3, #4]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800889e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2b04      	cmp	r3, #4
 80088a4:	d00a      	beq.n	80088bc <I2C_MasterReceive_BTF+0x86>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2b02      	cmp	r3, #2
 80088aa:	d007      	beq.n	80088bc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088ba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	691a      	ldr	r2, [r3, #16]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c6:	b2d2      	uxtb	r2, r2
 80088c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ce:	1c5a      	adds	r2, r3, #1
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088d8:	b29b      	uxth	r3, r3
 80088da:	3b01      	subs	r3, #1
 80088dc:	b29a      	uxth	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80088e2:	e08e      	b.n	8008a02 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d176      	bne.n	80089dc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d002      	beq.n	80088fa <I2C_MasterReceive_BTF+0xc4>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2b10      	cmp	r3, #16
 80088f8:	d108      	bne.n	800890c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008908:	601a      	str	r2, [r3, #0]
 800890a:	e019      	b.n	8008940 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2b04      	cmp	r3, #4
 8008910:	d002      	beq.n	8008918 <I2C_MasterReceive_BTF+0xe2>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2b02      	cmp	r3, #2
 8008916:	d108      	bne.n	800892a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008926:	601a      	str	r2, [r3, #0]
 8008928:	e00a      	b.n	8008940 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2b10      	cmp	r3, #16
 800892e:	d007      	beq.n	8008940 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800893e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	691a      	ldr	r2, [r3, #16]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894a:	b2d2      	uxtb	r2, r2
 800894c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008952:	1c5a      	adds	r2, r3, #1
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800895c:	b29b      	uxth	r3, r3
 800895e:	3b01      	subs	r3, #1
 8008960:	b29a      	uxth	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	691a      	ldr	r2, [r3, #16]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008970:	b2d2      	uxtb	r2, r2
 8008972:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008978:	1c5a      	adds	r2, r3, #1
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008982:	b29b      	uxth	r3, r3
 8008984:	3b01      	subs	r3, #1
 8008986:	b29a      	uxth	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	685a      	ldr	r2, [r3, #4]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800899a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2220      	movs	r2, #32
 80089a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	2b40      	cmp	r3, #64	; 0x40
 80089ae:	d10a      	bne.n	80089c6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f7ff fcba 	bl	8008338 <HAL_I2C_MemRxCpltCallback>
}
 80089c4:	e01d      	b.n	8008a02 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2212      	movs	r2, #18
 80089d2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f7ff fc6f 	bl	80082b8 <HAL_I2C_MasterRxCpltCallback>
}
 80089da:	e012      	b.n	8008a02 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	691a      	ldr	r2, [r3, #16]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e6:	b2d2      	uxtb	r2, r2
 80089e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ee:	1c5a      	adds	r2, r3, #1
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	3b01      	subs	r3, #1
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008a02:	bf00      	nop
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8008a0a:	b480      	push	{r7}
 8008a0c:	b083      	sub	sp, #12
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b40      	cmp	r3, #64	; 0x40
 8008a1c:	d117      	bne.n	8008a4e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d109      	bne.n	8008a3a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008a36:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008a38:	e067      	b.n	8008b0a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	f043 0301 	orr.w	r3, r3, #1
 8008a44:	b2da      	uxtb	r2, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	611a      	str	r2, [r3, #16]
}
 8008a4c:	e05d      	b.n	8008b0a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a56:	d133      	bne.n	8008ac0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	2b21      	cmp	r3, #33	; 0x21
 8008a62:	d109      	bne.n	8008a78 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008a74:	611a      	str	r2, [r3, #16]
 8008a76:	e008      	b.n	8008a8a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	f043 0301 	orr.w	r3, r3, #1
 8008a82:	b2da      	uxtb	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d004      	beq.n	8008a9c <I2C_Master_SB+0x92>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d108      	bne.n	8008aae <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d032      	beq.n	8008b0a <I2C_Master_SB+0x100>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d02d      	beq.n	8008b0a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008abc:	605a      	str	r2, [r3, #4]
}
 8008abe:	e024      	b.n	8008b0a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10e      	bne.n	8008ae6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	11db      	asrs	r3, r3, #7
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	f003 0306 	and.w	r3, r3, #6
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	f063 030f 	orn	r3, r3, #15
 8008adc:	b2da      	uxtb	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	611a      	str	r2, [r3, #16]
}
 8008ae4:	e011      	b.n	8008b0a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d10d      	bne.n	8008b0a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	11db      	asrs	r3, r3, #7
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	f003 0306 	and.w	r3, r3, #6
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	f063 030e 	orn	r3, r3, #14
 8008b02:	b2da      	uxtb	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	611a      	str	r2, [r3, #16]
}
 8008b0a:	bf00      	nop
 8008b0c:	370c      	adds	r7, #12
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr

08008b16 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8008b16:	b480      	push	{r7}
 8008b18:	b083      	sub	sp, #12
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b22:	b2da      	uxtb	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d004      	beq.n	8008b3c <I2C_Master_ADD10+0x26>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d108      	bne.n	8008b4e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00c      	beq.n	8008b5e <I2C_Master_ADD10+0x48>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d007      	beq.n	8008b5e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	685a      	ldr	r2, [r3, #4]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b5c:	605a      	str	r2, [r3, #4]
  }
}
 8008b5e:	bf00      	nop
 8008b60:	370c      	adds	r7, #12
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr

08008b6a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	b091      	sub	sp, #68	; 0x44
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b80:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b86:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	2b22      	cmp	r3, #34	; 0x22
 8008b92:	f040 8169 	bne.w	8008e68 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d10f      	bne.n	8008bbe <I2C_Master_ADDR+0x54>
 8008b9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008ba2:	2b40      	cmp	r3, #64	; 0x40
 8008ba4:	d10b      	bne.n	8008bbe <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	633b      	str	r3, [r7, #48]	; 0x30
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	695b      	ldr	r3, [r3, #20]
 8008bb0:	633b      	str	r3, [r7, #48]	; 0x30
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	699b      	ldr	r3, [r3, #24]
 8008bb8:	633b      	str	r3, [r7, #48]	; 0x30
 8008bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bbc:	e160      	b.n	8008e80 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d11d      	bne.n	8008c02 <I2C_Master_ADDR+0x98>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008bce:	d118      	bne.n	8008c02 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	695b      	ldr	r3, [r3, #20]
 8008bda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	699b      	ldr	r3, [r3, #24]
 8008be2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bf4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bfa:	1c5a      	adds	r2, r3, #1
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	651a      	str	r2, [r3, #80]	; 0x50
 8008c00:	e13e      	b.n	8008e80 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d113      	bne.n	8008c34 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	695b      	ldr	r3, [r3, #20]
 8008c16:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	699b      	ldr	r3, [r3, #24]
 8008c1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c20:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c30:	601a      	str	r2, [r3, #0]
 8008c32:	e115      	b.n	8008e60 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	f040 808a 	bne.w	8008d54 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008c46:	d137      	bne.n	8008cb8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c56:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c66:	d113      	bne.n	8008c90 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c76:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c78:	2300      	movs	r3, #0
 8008c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	695b      	ldr	r3, [r3, #20]
 8008c82:	627b      	str	r3, [r7, #36]	; 0x24
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8e:	e0e7      	b.n	8008e60 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c90:	2300      	movs	r3, #0
 8008c92:	623b      	str	r3, [r7, #32]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	695b      	ldr	r3, [r3, #20]
 8008c9a:	623b      	str	r3, [r7, #32]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	699b      	ldr	r3, [r3, #24]
 8008ca2:	623b      	str	r3, [r7, #32]
 8008ca4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cb4:	601a      	str	r2, [r3, #0]
 8008cb6:	e0d3      	b.n	8008e60 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cba:	2b08      	cmp	r3, #8
 8008cbc:	d02e      	beq.n	8008d1c <I2C_Master_ADDR+0x1b2>
 8008cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc0:	2b20      	cmp	r3, #32
 8008cc2:	d02b      	beq.n	8008d1c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cc6:	2b12      	cmp	r3, #18
 8008cc8:	d102      	bne.n	8008cd0 <I2C_Master_ADDR+0x166>
 8008cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d125      	bne.n	8008d1c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd2:	2b04      	cmp	r3, #4
 8008cd4:	d00e      	beq.n	8008cf4 <I2C_Master_ADDR+0x18a>
 8008cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	d00b      	beq.n	8008cf4 <I2C_Master_ADDR+0x18a>
 8008cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cde:	2b10      	cmp	r3, #16
 8008ce0:	d008      	beq.n	8008cf4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cf0:	601a      	str	r2, [r3, #0]
 8008cf2:	e007      	b.n	8008d04 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008d02:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d04:	2300      	movs	r3, #0
 8008d06:	61fb      	str	r3, [r7, #28]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	695b      	ldr	r3, [r3, #20]
 8008d0e:	61fb      	str	r3, [r7, #28]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	699b      	ldr	r3, [r3, #24]
 8008d16:	61fb      	str	r3, [r7, #28]
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	e0a1      	b.n	8008e60 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d2a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	61bb      	str	r3, [r7, #24]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	695b      	ldr	r3, [r3, #20]
 8008d36:	61bb      	str	r3, [r7, #24]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	61bb      	str	r3, [r7, #24]
 8008d40:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d50:	601a      	str	r2, [r3, #0]
 8008d52:	e085      	b.n	8008e60 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d14d      	bne.n	8008dfa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d60:	2b04      	cmp	r3, #4
 8008d62:	d016      	beq.n	8008d92 <I2C_Master_ADDR+0x228>
 8008d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d66:	2b02      	cmp	r3, #2
 8008d68:	d013      	beq.n	8008d92 <I2C_Master_ADDR+0x228>
 8008d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6c:	2b10      	cmp	r3, #16
 8008d6e:	d010      	beq.n	8008d92 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d7e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d8e:	601a      	str	r2, [r3, #0]
 8008d90:	e007      	b.n	8008da2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008da0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008db0:	d117      	bne.n	8008de2 <I2C_Master_ADDR+0x278>
 8008db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008db8:	d00b      	beq.n	8008dd2 <I2C_Master_ADDR+0x268>
 8008dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d008      	beq.n	8008dd2 <I2C_Master_ADDR+0x268>
 8008dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc2:	2b08      	cmp	r3, #8
 8008dc4:	d005      	beq.n	8008dd2 <I2C_Master_ADDR+0x268>
 8008dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc8:	2b10      	cmp	r3, #16
 8008dca:	d002      	beq.n	8008dd2 <I2C_Master_ADDR+0x268>
 8008dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dce:	2b20      	cmp	r3, #32
 8008dd0:	d107      	bne.n	8008de2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	685a      	ldr	r2, [r3, #4]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008de0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008de2:	2300      	movs	r3, #0
 8008de4:	617b      	str	r3, [r7, #20]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	695b      	ldr	r3, [r3, #20]
 8008dec:	617b      	str	r3, [r7, #20]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	699b      	ldr	r3, [r3, #24]
 8008df4:	617b      	str	r3, [r7, #20]
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	e032      	b.n	8008e60 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e08:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e18:	d117      	bne.n	8008e4a <I2C_Master_ADDR+0x2e0>
 8008e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008e20:	d00b      	beq.n	8008e3a <I2C_Master_ADDR+0x2d0>
 8008e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d008      	beq.n	8008e3a <I2C_Master_ADDR+0x2d0>
 8008e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2a:	2b08      	cmp	r3, #8
 8008e2c:	d005      	beq.n	8008e3a <I2C_Master_ADDR+0x2d0>
 8008e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e30:	2b10      	cmp	r3, #16
 8008e32:	d002      	beq.n	8008e3a <I2C_Master_ADDR+0x2d0>
 8008e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e36:	2b20      	cmp	r3, #32
 8008e38:	d107      	bne.n	8008e4a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	685a      	ldr	r2, [r3, #4]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008e48:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	613b      	str	r3, [r7, #16]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	695b      	ldr	r3, [r3, #20]
 8008e54:	613b      	str	r3, [r7, #16]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	699b      	ldr	r3, [r3, #24]
 8008e5c:	613b      	str	r3, [r7, #16]
 8008e5e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008e66:	e00b      	b.n	8008e80 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e68:	2300      	movs	r3, #0
 8008e6a:	60fb      	str	r3, [r7, #12]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	695b      	ldr	r3, [r3, #20]
 8008e72:	60fb      	str	r3, [r7, #12]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	699b      	ldr	r3, [r3, #24]
 8008e7a:	60fb      	str	r3, [r7, #12]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
}
 8008e7e:	e7ff      	b.n	8008e80 <I2C_Master_ADDR+0x316>
 8008e80:	bf00      	nop
 8008e82:	3744      	adds	r7, #68	; 0x44
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e9a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d02b      	beq.n	8008efe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eaa:	781a      	ldrb	r2, [r3, #0]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb6:	1c5a      	adds	r2, r3, #1
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	3b01      	subs	r3, #1
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d114      	bne.n	8008efe <I2C_SlaveTransmit_TXE+0x72>
 8008ed4:	7bfb      	ldrb	r3, [r7, #15]
 8008ed6:	2b29      	cmp	r3, #41	; 0x29
 8008ed8:	d111      	bne.n	8008efe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	685a      	ldr	r2, [r3, #4]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ee8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2221      	movs	r2, #33	; 0x21
 8008eee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2228      	movs	r2, #40	; 0x28
 8008ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f7ff f9e7 	bl	80082cc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008efe:	bf00      	nop
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008f06:	b480      	push	{r7}
 8008f08:	b083      	sub	sp, #12
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d011      	beq.n	8008f3c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1c:	781a      	ldrb	r2, [r3, #0]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f28:	1c5a      	adds	r2, r3, #1
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	3b01      	subs	r3, #1
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f56:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d02c      	beq.n	8008fbc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	691a      	ldr	r2, [r3, #16]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6c:	b2d2      	uxtb	r2, r2
 8008f6e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f74:	1c5a      	adds	r2, r3, #1
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	3b01      	subs	r3, #1
 8008f82:	b29a      	uxth	r2, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d114      	bne.n	8008fbc <I2C_SlaveReceive_RXNE+0x74>
 8008f92:	7bfb      	ldrb	r3, [r7, #15]
 8008f94:	2b2a      	cmp	r3, #42	; 0x2a
 8008f96:	d111      	bne.n	8008fbc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	685a      	ldr	r2, [r3, #4]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fa6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2222      	movs	r2, #34	; 0x22
 8008fac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2228      	movs	r2, #40	; 0x28
 8008fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f7ff f992 	bl	80082e0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008fbc:	bf00      	nop
 8008fbe:	3710      	adds	r7, #16
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d012      	beq.n	8008ffc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	691a      	ldr	r2, [r3, #16]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe0:	b2d2      	uxtb	r2, r2
 8008fe2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe8:	1c5a      	adds	r2, r3, #1
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	b29a      	uxth	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008ffc:	bf00      	nop
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8009012:	2300      	movs	r3, #0
 8009014:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800901c:	b2db      	uxtb	r3, r3
 800901e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009022:	2b28      	cmp	r3, #40	; 0x28
 8009024:	d125      	bne.n	8009072 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	685a      	ldr	r2, [r3, #4]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009034:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	f003 0304 	and.w	r3, r3, #4
 800903c:	2b00      	cmp	r3, #0
 800903e:	d101      	bne.n	8009044 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8009040:	2301      	movs	r3, #1
 8009042:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800904a:	2b00      	cmp	r3, #0
 800904c:	d103      	bne.n	8009056 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	81bb      	strh	r3, [r7, #12]
 8009054:	e002      	b.n	800905c <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009064:	89ba      	ldrh	r2, [r7, #12]
 8009066:	7bfb      	ldrb	r3, [r7, #15]
 8009068:	4619      	mov	r1, r3
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f7ff f942 	bl	80082f4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009070:	e00e      	b.n	8009090 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009072:	2300      	movs	r3, #0
 8009074:	60bb      	str	r3, [r7, #8]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	695b      	ldr	r3, [r3, #20]
 800907c:	60bb      	str	r3, [r7, #8]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	60bb      	str	r3, [r7, #8]
 8009086:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8009090:	bf00      	nop
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090a6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	685a      	ldr	r2, [r3, #4]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80090b6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80090b8:	2300      	movs	r3, #0
 80090ba:	60bb      	str	r3, [r7, #8]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	695b      	ldr	r3, [r3, #20]
 80090c2:	60bb      	str	r3, [r7, #8]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f042 0201 	orr.w	r2, r2, #1
 80090d2:	601a      	str	r2, [r3, #0]
 80090d4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090e4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090f4:	d172      	bne.n	80091dc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80090f6:	7bfb      	ldrb	r3, [r7, #15]
 80090f8:	2b22      	cmp	r3, #34	; 0x22
 80090fa:	d002      	beq.n	8009102 <I2C_Slave_STOPF+0x6a>
 80090fc:	7bfb      	ldrb	r3, [r7, #15]
 80090fe:	2b2a      	cmp	r3, #42	; 0x2a
 8009100:	d135      	bne.n	800916e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	b29a      	uxth	r2, r3
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009114:	b29b      	uxth	r3, r3
 8009116:	2b00      	cmp	r3, #0
 8009118:	d005      	beq.n	8009126 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800911e:	f043 0204 	orr.w	r2, r3, #4
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	685a      	ldr	r2, [r3, #4]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009134:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800913a:	4618      	mov	r0, r3
 800913c:	f7fe fa8e 	bl	800765c <HAL_DMA_GetState>
 8009140:	4603      	mov	r3, r0
 8009142:	2b01      	cmp	r3, #1
 8009144:	d049      	beq.n	80091da <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800914a:	4a69      	ldr	r2, [pc, #420]	; (80092f0 <I2C_Slave_STOPF+0x258>)
 800914c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009152:	4618      	mov	r0, r3
 8009154:	f7fe f8d6 	bl	8007304 <HAL_DMA_Abort_IT>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d03d      	beq.n	80091da <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009168:	4610      	mov	r0, r2
 800916a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800916c:	e035      	b.n	80091da <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	b29a      	uxth	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009180:	b29b      	uxth	r3, r3
 8009182:	2b00      	cmp	r3, #0
 8009184:	d005      	beq.n	8009192 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800918a:	f043 0204 	orr.w	r2, r3, #4
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	685a      	ldr	r2, [r3, #4]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80091a0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7fe fa58 	bl	800765c <HAL_DMA_GetState>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d014      	beq.n	80091dc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091b6:	4a4e      	ldr	r2, [pc, #312]	; (80092f0 <I2C_Slave_STOPF+0x258>)
 80091b8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091be:	4618      	mov	r0, r3
 80091c0:	f7fe f8a0 	bl	8007304 <HAL_DMA_Abort_IT>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d008      	beq.n	80091dc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80091d4:	4610      	mov	r0, r2
 80091d6:	4798      	blx	r3
 80091d8:	e000      	b.n	80091dc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80091da:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d03e      	beq.n	8009264 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	695b      	ldr	r3, [r3, #20]
 80091ec:	f003 0304 	and.w	r3, r3, #4
 80091f0:	2b04      	cmp	r3, #4
 80091f2:	d112      	bne.n	800921a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	691a      	ldr	r2, [r3, #16]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fe:	b2d2      	uxtb	r2, r2
 8009200:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009206:	1c5a      	adds	r2, r3, #1
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009210:	b29b      	uxth	r3, r3
 8009212:	3b01      	subs	r3, #1
 8009214:	b29a      	uxth	r2, r3
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	695b      	ldr	r3, [r3, #20]
 8009220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009224:	2b40      	cmp	r3, #64	; 0x40
 8009226:	d112      	bne.n	800924e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	691a      	ldr	r2, [r3, #16]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009232:	b2d2      	uxtb	r2, r2
 8009234:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923a:	1c5a      	adds	r2, r3, #1
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009244:	b29b      	uxth	r3, r3
 8009246:	3b01      	subs	r3, #1
 8009248:	b29a      	uxth	r2, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009252:	b29b      	uxth	r3, r3
 8009254:	2b00      	cmp	r3, #0
 8009256:	d005      	beq.n	8009264 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800925c:	f043 0204 	orr.w	r2, r3, #4
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009268:	2b00      	cmp	r3, #0
 800926a:	d003      	beq.n	8009274 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 f8b3 	bl	80093d8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8009272:	e039      	b.n	80092e8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009274:	7bfb      	ldrb	r3, [r7, #15]
 8009276:	2b2a      	cmp	r3, #42	; 0x2a
 8009278:	d109      	bne.n	800928e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2228      	movs	r2, #40	; 0x28
 8009284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f7ff f829 	bl	80082e0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009294:	b2db      	uxtb	r3, r3
 8009296:	2b28      	cmp	r3, #40	; 0x28
 8009298:	d111      	bne.n	80092be <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	4a15      	ldr	r2, [pc, #84]	; (80092f4 <I2C_Slave_STOPF+0x25c>)
 800929e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2220      	movs	r2, #32
 80092aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7ff f82a 	bl	8008310 <HAL_I2C_ListenCpltCallback>
}
 80092bc:	e014      	b.n	80092e8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c2:	2b22      	cmp	r3, #34	; 0x22
 80092c4:	d002      	beq.n	80092cc <I2C_Slave_STOPF+0x234>
 80092c6:	7bfb      	ldrb	r3, [r7, #15]
 80092c8:	2b22      	cmp	r3, #34	; 0x22
 80092ca:	d10d      	bne.n	80092e8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2220      	movs	r2, #32
 80092d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f7fe fffc 	bl	80082e0 <HAL_I2C_SlaveRxCpltCallback>
}
 80092e8:	bf00      	nop
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	0800963d 	.word	0x0800963d
 80092f4:	ffff0000 	.word	0xffff0000

080092f8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009306:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	2b08      	cmp	r3, #8
 8009312:	d002      	beq.n	800931a <I2C_Slave_AF+0x22>
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	2b20      	cmp	r3, #32
 8009318:	d129      	bne.n	800936e <I2C_Slave_AF+0x76>
 800931a:	7bfb      	ldrb	r3, [r7, #15]
 800931c:	2b28      	cmp	r3, #40	; 0x28
 800931e:	d126      	bne.n	800936e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4a2c      	ldr	r2, [pc, #176]	; (80093d4 <I2C_Slave_AF+0xdc>)
 8009324:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	685a      	ldr	r2, [r3, #4]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009334:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800933e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800934e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2220      	movs	r2, #32
 800935a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f7fe ffd2 	bl	8008310 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800936c:	e02e      	b.n	80093cc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800936e:	7bfb      	ldrb	r3, [r7, #15]
 8009370:	2b21      	cmp	r3, #33	; 0x21
 8009372:	d126      	bne.n	80093c2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a17      	ldr	r2, [pc, #92]	; (80093d4 <I2C_Slave_AF+0xdc>)
 8009378:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2221      	movs	r2, #33	; 0x21
 800937e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2220      	movs	r2, #32
 8009384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	685a      	ldr	r2, [r3, #4]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800939e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80093a8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093b8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f7fe ff86 	bl	80082cc <HAL_I2C_SlaveTxCpltCallback>
}
 80093c0:	e004      	b.n	80093cc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80093ca:	615a      	str	r2, [r3, #20]
}
 80093cc:	bf00      	nop
 80093ce:	3710      	adds	r7, #16
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	ffff0000 	.word	0xffff0000

080093d8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093ee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80093f0:	7bbb      	ldrb	r3, [r7, #14]
 80093f2:	2b10      	cmp	r3, #16
 80093f4:	d002      	beq.n	80093fc <I2C_ITError+0x24>
 80093f6:	7bbb      	ldrb	r3, [r7, #14]
 80093f8:	2b40      	cmp	r3, #64	; 0x40
 80093fa:	d10a      	bne.n	8009412 <I2C_ITError+0x3a>
 80093fc:	7bfb      	ldrb	r3, [r7, #15]
 80093fe:	2b22      	cmp	r3, #34	; 0x22
 8009400:	d107      	bne.n	8009412 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009410:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009412:	7bfb      	ldrb	r3, [r7, #15]
 8009414:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009418:	2b28      	cmp	r3, #40	; 0x28
 800941a:	d107      	bne.n	800942c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2228      	movs	r2, #40	; 0x28
 8009426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800942a:	e015      	b.n	8009458 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009436:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800943a:	d00a      	beq.n	8009452 <I2C_ITError+0x7a>
 800943c:	7bfb      	ldrb	r3, [r7, #15]
 800943e:	2b60      	cmp	r3, #96	; 0x60
 8009440:	d007      	beq.n	8009452 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2220      	movs	r2, #32
 8009446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009462:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009466:	d162      	bne.n	800952e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	685a      	ldr	r2, [r3, #4]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009476:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800947c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009480:	b2db      	uxtb	r3, r3
 8009482:	2b01      	cmp	r3, #1
 8009484:	d020      	beq.n	80094c8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800948a:	4a6a      	ldr	r2, [pc, #424]	; (8009634 <I2C_ITError+0x25c>)
 800948c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009492:	4618      	mov	r0, r3
 8009494:	f7fd ff36 	bl	8007304 <HAL_DMA_Abort_IT>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	f000 8089 	beq.w	80095b2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f022 0201 	bic.w	r2, r2, #1
 80094ae:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2220      	movs	r2, #32
 80094b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80094c2:	4610      	mov	r0, r2
 80094c4:	4798      	blx	r3
 80094c6:	e074      	b.n	80095b2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094cc:	4a59      	ldr	r2, [pc, #356]	; (8009634 <I2C_ITError+0x25c>)
 80094ce:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7fd ff15 	bl	8007304 <HAL_DMA_Abort_IT>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d068      	beq.n	80095b2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	695b      	ldr	r3, [r3, #20]
 80094e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ea:	2b40      	cmp	r3, #64	; 0x40
 80094ec:	d10b      	bne.n	8009506 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	691a      	ldr	r2, [r3, #16]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f8:	b2d2      	uxtb	r2, r2
 80094fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009500:	1c5a      	adds	r2, r3, #1
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f022 0201 	bic.w	r2, r2, #1
 8009514:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2220      	movs	r2, #32
 800951a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009528:	4610      	mov	r0, r2
 800952a:	4798      	blx	r3
 800952c:	e041      	b.n	80095b2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009534:	b2db      	uxtb	r3, r3
 8009536:	2b60      	cmp	r3, #96	; 0x60
 8009538:	d125      	bne.n	8009586 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2220      	movs	r2, #32
 800953e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	695b      	ldr	r3, [r3, #20]
 800954e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009552:	2b40      	cmp	r3, #64	; 0x40
 8009554:	d10b      	bne.n	800956e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	691a      	ldr	r2, [r3, #16]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009560:	b2d2      	uxtb	r2, r2
 8009562:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009568:	1c5a      	adds	r2, r3, #1
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f022 0201 	bic.w	r2, r2, #1
 800957c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f7fe feee 	bl	8008360 <HAL_I2C_AbortCpltCallback>
 8009584:	e015      	b.n	80095b2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	695b      	ldr	r3, [r3, #20]
 800958c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009590:	2b40      	cmp	r3, #64	; 0x40
 8009592:	d10b      	bne.n	80095ac <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	691a      	ldr	r2, [r3, #16]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959e:	b2d2      	uxtb	r2, r2
 80095a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a6:	1c5a      	adds	r2, r3, #1
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f7fe fecd 	bl	800834c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	f003 0301 	and.w	r3, r3, #1
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d10e      	bne.n	80095e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d109      	bne.n	80095e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d104      	bne.n	80095e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d007      	beq.n	80095f0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	685a      	ldr	r2, [r3, #4]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80095ee:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095f6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095fc:	f003 0304 	and.w	r3, r3, #4
 8009600:	2b04      	cmp	r3, #4
 8009602:	d113      	bne.n	800962c <I2C_ITError+0x254>
 8009604:	7bfb      	ldrb	r3, [r7, #15]
 8009606:	2b28      	cmp	r3, #40	; 0x28
 8009608:	d110      	bne.n	800962c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4a0a      	ldr	r2, [pc, #40]	; (8009638 <I2C_ITError+0x260>)
 800960e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2220      	movs	r2, #32
 800961a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f7fe fe72 	bl	8008310 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800962c:	bf00      	nop
 800962e:	3710      	adds	r7, #16
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	0800963d 	.word	0x0800963d
 8009638:	ffff0000 	.word	0xffff0000

0800963c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b086      	sub	sp, #24
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009644:	2300      	movs	r3, #0
 8009646:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800964c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009654:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009656:	4b4b      	ldr	r3, [pc, #300]	; (8009784 <I2C_DMAAbort+0x148>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	08db      	lsrs	r3, r3, #3
 800965c:	4a4a      	ldr	r2, [pc, #296]	; (8009788 <I2C_DMAAbort+0x14c>)
 800965e:	fba2 2303 	umull	r2, r3, r2, r3
 8009662:	0a1a      	lsrs	r2, r3, #8
 8009664:	4613      	mov	r3, r2
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	4413      	add	r3, r2
 800966a:	00da      	lsls	r2, r3, #3
 800966c:	1ad3      	subs	r3, r2, r3
 800966e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d106      	bne.n	8009684 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800967a:	f043 0220 	orr.w	r2, r3, #32
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8009682:	e00a      	b.n	800969a <I2C_DMAAbort+0x5e>
    }
    count--;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	3b01      	subs	r3, #1
 8009688:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009698:	d0ea      	beq.n	8009670 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d003      	beq.n	80096aa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096a6:	2200      	movs	r2, #0
 80096a8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d003      	beq.n	80096ba <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b6:	2200      	movs	r2, #0
 80096b8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096c8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	2200      	movs	r2, #0
 80096ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d003      	beq.n	80096e0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096dc:	2200      	movs	r2, #0
 80096de:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d003      	beq.n	80096f0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ec:	2200      	movs	r2, #0
 80096ee:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f022 0201 	bic.w	r2, r2, #1
 80096fe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009706:	b2db      	uxtb	r3, r3
 8009708:	2b60      	cmp	r3, #96	; 0x60
 800970a:	d10e      	bne.n	800972a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	2220      	movs	r2, #32
 8009710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	2200      	movs	r2, #0
 8009718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	2200      	movs	r2, #0
 8009720:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009722:	6978      	ldr	r0, [r7, #20]
 8009724:	f7fe fe1c 	bl	8008360 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009728:	e027      	b.n	800977a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800972a:	7cfb      	ldrb	r3, [r7, #19]
 800972c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009730:	2b28      	cmp	r3, #40	; 0x28
 8009732:	d117      	bne.n	8009764 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f042 0201 	orr.w	r2, r2, #1
 8009742:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009752:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	2200      	movs	r2, #0
 8009758:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	2228      	movs	r2, #40	; 0x28
 800975e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009762:	e007      	b.n	8009774 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	2220      	movs	r2, #32
 8009768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	2200      	movs	r2, #0
 8009770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009774:	6978      	ldr	r0, [r7, #20]
 8009776:	f7fe fde9 	bl	800834c <HAL_I2C_ErrorCallback>
}
 800977a:	bf00      	nop
 800977c:	3718      	adds	r7, #24
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	20000008 	.word	0x20000008
 8009788:	14f8b589 	.word	0x14f8b589

0800978c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800978c:	b480      	push	{r7}
 800978e:	b085      	sub	sp, #20
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009794:	2300      	movs	r3, #0
 8009796:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009798:	4b13      	ldr	r3, [pc, #76]	; (80097e8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	08db      	lsrs	r3, r3, #3
 800979e:	4a13      	ldr	r2, [pc, #76]	; (80097ec <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80097a0:	fba2 2303 	umull	r2, r3, r2, r3
 80097a4:	0a1a      	lsrs	r2, r3, #8
 80097a6:	4613      	mov	r3, r2
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	4413      	add	r3, r2
 80097ac:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	3b01      	subs	r3, #1
 80097b2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d107      	bne.n	80097ca <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097be:	f043 0220 	orr.w	r2, r3, #32
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80097c6:	2301      	movs	r3, #1
 80097c8:	e008      	b.n	80097dc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097d8:	d0e9      	beq.n	80097ae <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3714      	adds	r7, #20
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr
 80097e8:	20000008 	.word	0x20000008
 80097ec:	14f8b589 	.word	0x14f8b589

080097f0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097fc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009800:	d103      	bne.n	800980a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2201      	movs	r2, #1
 8009806:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009808:	e007      	b.n	800981a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009812:	d102      	bne.n	800981a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2208      	movs	r2, #8
 8009818:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800981a:	bf00      	nop
 800981c:	370c      	adds	r7, #12
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr
	...

08009828 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b086      	sub	sp, #24
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d101      	bne.n	800983a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	e267      	b.n	8009d0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 0301 	and.w	r3, r3, #1
 8009842:	2b00      	cmp	r3, #0
 8009844:	d075      	beq.n	8009932 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009846:	4b88      	ldr	r3, [pc, #544]	; (8009a68 <HAL_RCC_OscConfig+0x240>)
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	f003 030c 	and.w	r3, r3, #12
 800984e:	2b04      	cmp	r3, #4
 8009850:	d00c      	beq.n	800986c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009852:	4b85      	ldr	r3, [pc, #532]	; (8009a68 <HAL_RCC_OscConfig+0x240>)
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800985a:	2b08      	cmp	r3, #8
 800985c:	d112      	bne.n	8009884 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800985e:	4b82      	ldr	r3, [pc, #520]	; (8009a68 <HAL_RCC_OscConfig+0x240>)
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009866:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800986a:	d10b      	bne.n	8009884 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800986c:	4b7e      	ldr	r3, [pc, #504]	; (8009a68 <HAL_RCC_OscConfig+0x240>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009874:	2b00      	cmp	r3, #0
 8009876:	d05b      	beq.n	8009930 <HAL_RCC_OscConfig+0x108>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d157      	bne.n	8009930 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	e242      	b.n	8009d0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800988c:	d106      	bne.n	800989c <HAL_RCC_OscConfig+0x74>
 800988e:	4b76      	ldr	r3, [pc, #472]	; (8009a68 <HAL_RCC_OscConfig+0x240>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a75      	ldr	r2, [pc, #468]	; (8009a68 <HAL_RCC_OscConfig+0x240>)
 8009894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009898:	6013      	str	r3, [r2, #0]
 800989a:	e01d      	b.n	80098d8 <HAL_RCC_OscConfig+0xb0>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80098a4:	d10c      	bne.n	80098c0 <HAL_RCC_OscConfig+0x98>
 80098a6:	4b70      	ldr	r3, [pc, #448]	; (8009a68 <HAL_RCC_OscConfig+0x240>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a6f      	ldr	r2, [pc, #444]	; (8009a68 <HAL_RCC_OscConfig+0x240>)
 80098ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80098b0:	6013      	str	r3, [r2, #0]
 80098b2:	4b6d      	ldr	r3, [pc, #436]	; (8009a68 <HAL_RCC_OscConfig+0x240>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a6c      	ldr	r2, [pc, #432]	; (8009a68 <HAL_RCC_OscConfig+0x240>)
 80098b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098bc:	6013      	str	r3, [r2, #0]
 80098be:	e00b      	b.n	80098d8 <HAL_RCC_OscConfig+0xb0>
 80098c0:	4b69      	ldr	r3, [pc, #420]	; (8009a68 <HAL_RCC_OscConfig+0x240>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a68      	ldr	r2, [pc, #416]	; (8009a68 <HAL_RCC_OscConfig+0x240>)
 80098c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098ca:	6013      	str	r3, [r2, #0]
 80098cc:	4b66      	ldr	r3, [pc, #408]	; (8009a68 <HAL_RCC_OscConfig+0x240>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a65      	ldr	r2, [pc, #404]	; (8009a68 <HAL_RCC_OscConfig+0x240>)
 80098d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d013      	beq.n	8009908 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098e0:	f7fc fad4 	bl	8005e8c <HAL_GetTick>
 80098e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098e6:	e008      	b.n	80098fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80098e8:	f7fc fad0 	bl	8005e8c <HAL_GetTick>
 80098ec:	4602      	mov	r2, r0
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	1ad3      	subs	r3, r2, r3
 80098f2:	2b64      	cmp	r3, #100	; 0x64
 80098f4:	d901      	bls.n	80098fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80098f6:	2303      	movs	r3, #3
 80098f8:	e207      	b.n	8009d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098fa:	4b5b      	ldr	r3, [pc, #364]	; (8009a68 <HAL_RCC_OscConfig+0x240>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009902:	2b00      	cmp	r3, #0
 8009904:	d0f0      	beq.n	80098e8 <HAL_RCC_OscConfig+0xc0>
 8009906:	e014      	b.n	8009932 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009908:	f7fc fac0 	bl	8005e8c <HAL_GetTick>
 800990c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800990e:	e008      	b.n	8009922 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009910:	f7fc fabc 	bl	8005e8c <HAL_GetTick>
 8009914:	4602      	mov	r2, r0
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	1ad3      	subs	r3, r2, r3
 800991a:	2b64      	cmp	r3, #100	; 0x64
 800991c:	d901      	bls.n	8009922 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800991e:	2303      	movs	r3, #3
 8009920:	e1f3      	b.n	8009d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009922:	4b51      	ldr	r3, [pc, #324]	; (8009a68 <HAL_RCC_OscConfig+0x240>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1f0      	bne.n	8009910 <HAL_RCC_OscConfig+0xe8>
 800992e:	e000      	b.n	8009932 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f003 0302 	and.w	r3, r3, #2
 800993a:	2b00      	cmp	r3, #0
 800993c:	d063      	beq.n	8009a06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800993e:	4b4a      	ldr	r3, [pc, #296]	; (8009a68 <HAL_RCC_OscConfig+0x240>)
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	f003 030c 	and.w	r3, r3, #12
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00b      	beq.n	8009962 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800994a:	4b47      	ldr	r3, [pc, #284]	; (8009a68 <HAL_RCC_OscConfig+0x240>)
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009952:	2b08      	cmp	r3, #8
 8009954:	d11c      	bne.n	8009990 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009956:	4b44      	ldr	r3, [pc, #272]	; (8009a68 <HAL_RCC_OscConfig+0x240>)
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800995e:	2b00      	cmp	r3, #0
 8009960:	d116      	bne.n	8009990 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009962:	4b41      	ldr	r3, [pc, #260]	; (8009a68 <HAL_RCC_OscConfig+0x240>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f003 0302 	and.w	r3, r3, #2
 800996a:	2b00      	cmp	r3, #0
 800996c:	d005      	beq.n	800997a <HAL_RCC_OscConfig+0x152>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	68db      	ldr	r3, [r3, #12]
 8009972:	2b01      	cmp	r3, #1
 8009974:	d001      	beq.n	800997a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	e1c7      	b.n	8009d0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800997a:	4b3b      	ldr	r3, [pc, #236]	; (8009a68 <HAL_RCC_OscConfig+0x240>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	691b      	ldr	r3, [r3, #16]
 8009986:	00db      	lsls	r3, r3, #3
 8009988:	4937      	ldr	r1, [pc, #220]	; (8009a68 <HAL_RCC_OscConfig+0x240>)
 800998a:	4313      	orrs	r3, r2
 800998c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800998e:	e03a      	b.n	8009a06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d020      	beq.n	80099da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009998:	4b34      	ldr	r3, [pc, #208]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 800999a:	2201      	movs	r2, #1
 800999c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800999e:	f7fc fa75 	bl	8005e8c <HAL_GetTick>
 80099a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099a4:	e008      	b.n	80099b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099a6:	f7fc fa71 	bl	8005e8c <HAL_GetTick>
 80099aa:	4602      	mov	r2, r0
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	1ad3      	subs	r3, r2, r3
 80099b0:	2b02      	cmp	r3, #2
 80099b2:	d901      	bls.n	80099b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80099b4:	2303      	movs	r3, #3
 80099b6:	e1a8      	b.n	8009d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099b8:	4b2b      	ldr	r3, [pc, #172]	; (8009a68 <HAL_RCC_OscConfig+0x240>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f003 0302 	and.w	r3, r3, #2
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d0f0      	beq.n	80099a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099c4:	4b28      	ldr	r3, [pc, #160]	; (8009a68 <HAL_RCC_OscConfig+0x240>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	691b      	ldr	r3, [r3, #16]
 80099d0:	00db      	lsls	r3, r3, #3
 80099d2:	4925      	ldr	r1, [pc, #148]	; (8009a68 <HAL_RCC_OscConfig+0x240>)
 80099d4:	4313      	orrs	r3, r2
 80099d6:	600b      	str	r3, [r1, #0]
 80099d8:	e015      	b.n	8009a06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099da:	4b24      	ldr	r3, [pc, #144]	; (8009a6c <HAL_RCC_OscConfig+0x244>)
 80099dc:	2200      	movs	r2, #0
 80099de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099e0:	f7fc fa54 	bl	8005e8c <HAL_GetTick>
 80099e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80099e6:	e008      	b.n	80099fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099e8:	f7fc fa50 	bl	8005e8c <HAL_GetTick>
 80099ec:	4602      	mov	r2, r0
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	1ad3      	subs	r3, r2, r3
 80099f2:	2b02      	cmp	r3, #2
 80099f4:	d901      	bls.n	80099fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80099f6:	2303      	movs	r3, #3
 80099f8:	e187      	b.n	8009d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80099fa:	4b1b      	ldr	r3, [pc, #108]	; (8009a68 <HAL_RCC_OscConfig+0x240>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f003 0302 	and.w	r3, r3, #2
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1f0      	bne.n	80099e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f003 0308 	and.w	r3, r3, #8
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d036      	beq.n	8009a80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	695b      	ldr	r3, [r3, #20]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d016      	beq.n	8009a48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a1a:	4b15      	ldr	r3, [pc, #84]	; (8009a70 <HAL_RCC_OscConfig+0x248>)
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a20:	f7fc fa34 	bl	8005e8c <HAL_GetTick>
 8009a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a26:	e008      	b.n	8009a3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009a28:	f7fc fa30 	bl	8005e8c <HAL_GetTick>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	2b02      	cmp	r3, #2
 8009a34:	d901      	bls.n	8009a3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009a36:	2303      	movs	r3, #3
 8009a38:	e167      	b.n	8009d0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a3a:	4b0b      	ldr	r3, [pc, #44]	; (8009a68 <HAL_RCC_OscConfig+0x240>)
 8009a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a3e:	f003 0302 	and.w	r3, r3, #2
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d0f0      	beq.n	8009a28 <HAL_RCC_OscConfig+0x200>
 8009a46:	e01b      	b.n	8009a80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a48:	4b09      	ldr	r3, [pc, #36]	; (8009a70 <HAL_RCC_OscConfig+0x248>)
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009a4e:	f7fc fa1d 	bl	8005e8c <HAL_GetTick>
 8009a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a54:	e00e      	b.n	8009a74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009a56:	f7fc fa19 	bl	8005e8c <HAL_GetTick>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	1ad3      	subs	r3, r2, r3
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	d907      	bls.n	8009a74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009a64:	2303      	movs	r3, #3
 8009a66:	e150      	b.n	8009d0a <HAL_RCC_OscConfig+0x4e2>
 8009a68:	40023800 	.word	0x40023800
 8009a6c:	42470000 	.word	0x42470000
 8009a70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a74:	4b88      	ldr	r3, [pc, #544]	; (8009c98 <HAL_RCC_OscConfig+0x470>)
 8009a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a78:	f003 0302 	and.w	r3, r3, #2
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d1ea      	bne.n	8009a56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f003 0304 	and.w	r3, r3, #4
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f000 8097 	beq.w	8009bbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a92:	4b81      	ldr	r3, [pc, #516]	; (8009c98 <HAL_RCC_OscConfig+0x470>)
 8009a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d10f      	bne.n	8009abe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	60bb      	str	r3, [r7, #8]
 8009aa2:	4b7d      	ldr	r3, [pc, #500]	; (8009c98 <HAL_RCC_OscConfig+0x470>)
 8009aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa6:	4a7c      	ldr	r2, [pc, #496]	; (8009c98 <HAL_RCC_OscConfig+0x470>)
 8009aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009aac:	6413      	str	r3, [r2, #64]	; 0x40
 8009aae:	4b7a      	ldr	r3, [pc, #488]	; (8009c98 <HAL_RCC_OscConfig+0x470>)
 8009ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ab6:	60bb      	str	r3, [r7, #8]
 8009ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009aba:	2301      	movs	r3, #1
 8009abc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009abe:	4b77      	ldr	r3, [pc, #476]	; (8009c9c <HAL_RCC_OscConfig+0x474>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d118      	bne.n	8009afc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009aca:	4b74      	ldr	r3, [pc, #464]	; (8009c9c <HAL_RCC_OscConfig+0x474>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a73      	ldr	r2, [pc, #460]	; (8009c9c <HAL_RCC_OscConfig+0x474>)
 8009ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009ad6:	f7fc f9d9 	bl	8005e8c <HAL_GetTick>
 8009ada:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009adc:	e008      	b.n	8009af0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ade:	f7fc f9d5 	bl	8005e8c <HAL_GetTick>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	1ad3      	subs	r3, r2, r3
 8009ae8:	2b02      	cmp	r3, #2
 8009aea:	d901      	bls.n	8009af0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009aec:	2303      	movs	r3, #3
 8009aee:	e10c      	b.n	8009d0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009af0:	4b6a      	ldr	r3, [pc, #424]	; (8009c9c <HAL_RCC_OscConfig+0x474>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d0f0      	beq.n	8009ade <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d106      	bne.n	8009b12 <HAL_RCC_OscConfig+0x2ea>
 8009b04:	4b64      	ldr	r3, [pc, #400]	; (8009c98 <HAL_RCC_OscConfig+0x470>)
 8009b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b08:	4a63      	ldr	r2, [pc, #396]	; (8009c98 <HAL_RCC_OscConfig+0x470>)
 8009b0a:	f043 0301 	orr.w	r3, r3, #1
 8009b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8009b10:	e01c      	b.n	8009b4c <HAL_RCC_OscConfig+0x324>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	2b05      	cmp	r3, #5
 8009b18:	d10c      	bne.n	8009b34 <HAL_RCC_OscConfig+0x30c>
 8009b1a:	4b5f      	ldr	r3, [pc, #380]	; (8009c98 <HAL_RCC_OscConfig+0x470>)
 8009b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b1e:	4a5e      	ldr	r2, [pc, #376]	; (8009c98 <HAL_RCC_OscConfig+0x470>)
 8009b20:	f043 0304 	orr.w	r3, r3, #4
 8009b24:	6713      	str	r3, [r2, #112]	; 0x70
 8009b26:	4b5c      	ldr	r3, [pc, #368]	; (8009c98 <HAL_RCC_OscConfig+0x470>)
 8009b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b2a:	4a5b      	ldr	r2, [pc, #364]	; (8009c98 <HAL_RCC_OscConfig+0x470>)
 8009b2c:	f043 0301 	orr.w	r3, r3, #1
 8009b30:	6713      	str	r3, [r2, #112]	; 0x70
 8009b32:	e00b      	b.n	8009b4c <HAL_RCC_OscConfig+0x324>
 8009b34:	4b58      	ldr	r3, [pc, #352]	; (8009c98 <HAL_RCC_OscConfig+0x470>)
 8009b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b38:	4a57      	ldr	r2, [pc, #348]	; (8009c98 <HAL_RCC_OscConfig+0x470>)
 8009b3a:	f023 0301 	bic.w	r3, r3, #1
 8009b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8009b40:	4b55      	ldr	r3, [pc, #340]	; (8009c98 <HAL_RCC_OscConfig+0x470>)
 8009b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b44:	4a54      	ldr	r2, [pc, #336]	; (8009c98 <HAL_RCC_OscConfig+0x470>)
 8009b46:	f023 0304 	bic.w	r3, r3, #4
 8009b4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d015      	beq.n	8009b80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b54:	f7fc f99a 	bl	8005e8c <HAL_GetTick>
 8009b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b5a:	e00a      	b.n	8009b72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b5c:	f7fc f996 	bl	8005e8c <HAL_GetTick>
 8009b60:	4602      	mov	r2, r0
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	1ad3      	subs	r3, r2, r3
 8009b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d901      	bls.n	8009b72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	e0cb      	b.n	8009d0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b72:	4b49      	ldr	r3, [pc, #292]	; (8009c98 <HAL_RCC_OscConfig+0x470>)
 8009b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b76:	f003 0302 	and.w	r3, r3, #2
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d0ee      	beq.n	8009b5c <HAL_RCC_OscConfig+0x334>
 8009b7e:	e014      	b.n	8009baa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b80:	f7fc f984 	bl	8005e8c <HAL_GetTick>
 8009b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b86:	e00a      	b.n	8009b9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b88:	f7fc f980 	bl	8005e8c <HAL_GetTick>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	1ad3      	subs	r3, r2, r3
 8009b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d901      	bls.n	8009b9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009b9a:	2303      	movs	r3, #3
 8009b9c:	e0b5      	b.n	8009d0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b9e:	4b3e      	ldr	r3, [pc, #248]	; (8009c98 <HAL_RCC_OscConfig+0x470>)
 8009ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ba2:	f003 0302 	and.w	r3, r3, #2
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1ee      	bne.n	8009b88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009baa:	7dfb      	ldrb	r3, [r7, #23]
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d105      	bne.n	8009bbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009bb0:	4b39      	ldr	r3, [pc, #228]	; (8009c98 <HAL_RCC_OscConfig+0x470>)
 8009bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb4:	4a38      	ldr	r2, [pc, #224]	; (8009c98 <HAL_RCC_OscConfig+0x470>)
 8009bb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	699b      	ldr	r3, [r3, #24]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f000 80a1 	beq.w	8009d08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009bc6:	4b34      	ldr	r3, [pc, #208]	; (8009c98 <HAL_RCC_OscConfig+0x470>)
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	f003 030c 	and.w	r3, r3, #12
 8009bce:	2b08      	cmp	r3, #8
 8009bd0:	d05c      	beq.n	8009c8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	699b      	ldr	r3, [r3, #24]
 8009bd6:	2b02      	cmp	r3, #2
 8009bd8:	d141      	bne.n	8009c5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009bda:	4b31      	ldr	r3, [pc, #196]	; (8009ca0 <HAL_RCC_OscConfig+0x478>)
 8009bdc:	2200      	movs	r2, #0
 8009bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009be0:	f7fc f954 	bl	8005e8c <HAL_GetTick>
 8009be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009be6:	e008      	b.n	8009bfa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009be8:	f7fc f950 	bl	8005e8c <HAL_GetTick>
 8009bec:	4602      	mov	r2, r0
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	1ad3      	subs	r3, r2, r3
 8009bf2:	2b02      	cmp	r3, #2
 8009bf4:	d901      	bls.n	8009bfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009bf6:	2303      	movs	r3, #3
 8009bf8:	e087      	b.n	8009d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bfa:	4b27      	ldr	r3, [pc, #156]	; (8009c98 <HAL_RCC_OscConfig+0x470>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d1f0      	bne.n	8009be8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	69da      	ldr	r2, [r3, #28]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a1b      	ldr	r3, [r3, #32]
 8009c0e:	431a      	orrs	r2, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c14:	019b      	lsls	r3, r3, #6
 8009c16:	431a      	orrs	r2, r3
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c1c:	085b      	lsrs	r3, r3, #1
 8009c1e:	3b01      	subs	r3, #1
 8009c20:	041b      	lsls	r3, r3, #16
 8009c22:	431a      	orrs	r2, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c28:	061b      	lsls	r3, r3, #24
 8009c2a:	491b      	ldr	r1, [pc, #108]	; (8009c98 <HAL_RCC_OscConfig+0x470>)
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c30:	4b1b      	ldr	r3, [pc, #108]	; (8009ca0 <HAL_RCC_OscConfig+0x478>)
 8009c32:	2201      	movs	r2, #1
 8009c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c36:	f7fc f929 	bl	8005e8c <HAL_GetTick>
 8009c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c3c:	e008      	b.n	8009c50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c3e:	f7fc f925 	bl	8005e8c <HAL_GetTick>
 8009c42:	4602      	mov	r2, r0
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	1ad3      	subs	r3, r2, r3
 8009c48:	2b02      	cmp	r3, #2
 8009c4a:	d901      	bls.n	8009c50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009c4c:	2303      	movs	r3, #3
 8009c4e:	e05c      	b.n	8009d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c50:	4b11      	ldr	r3, [pc, #68]	; (8009c98 <HAL_RCC_OscConfig+0x470>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d0f0      	beq.n	8009c3e <HAL_RCC_OscConfig+0x416>
 8009c5c:	e054      	b.n	8009d08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c5e:	4b10      	ldr	r3, [pc, #64]	; (8009ca0 <HAL_RCC_OscConfig+0x478>)
 8009c60:	2200      	movs	r2, #0
 8009c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c64:	f7fc f912 	bl	8005e8c <HAL_GetTick>
 8009c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c6a:	e008      	b.n	8009c7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c6c:	f7fc f90e 	bl	8005e8c <HAL_GetTick>
 8009c70:	4602      	mov	r2, r0
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	1ad3      	subs	r3, r2, r3
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	d901      	bls.n	8009c7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	e045      	b.n	8009d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c7e:	4b06      	ldr	r3, [pc, #24]	; (8009c98 <HAL_RCC_OscConfig+0x470>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d1f0      	bne.n	8009c6c <HAL_RCC_OscConfig+0x444>
 8009c8a:	e03d      	b.n	8009d08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	699b      	ldr	r3, [r3, #24]
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d107      	bne.n	8009ca4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009c94:	2301      	movs	r3, #1
 8009c96:	e038      	b.n	8009d0a <HAL_RCC_OscConfig+0x4e2>
 8009c98:	40023800 	.word	0x40023800
 8009c9c:	40007000 	.word	0x40007000
 8009ca0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009ca4:	4b1b      	ldr	r3, [pc, #108]	; (8009d14 <HAL_RCC_OscConfig+0x4ec>)
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	699b      	ldr	r3, [r3, #24]
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d028      	beq.n	8009d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d121      	bne.n	8009d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d11a      	bne.n	8009d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009cce:	68fa      	ldr	r2, [r7, #12]
 8009cd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009cda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d111      	bne.n	8009d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cea:	085b      	lsrs	r3, r3, #1
 8009cec:	3b01      	subs	r3, #1
 8009cee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d107      	bne.n	8009d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d001      	beq.n	8009d08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	e000      	b.n	8009d0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009d08:	2300      	movs	r3, #0
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3718      	adds	r7, #24
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	40023800 	.word	0x40023800

08009d18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d101      	bne.n	8009d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e0cc      	b.n	8009ec6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009d2c:	4b68      	ldr	r3, [pc, #416]	; (8009ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f003 0307 	and.w	r3, r3, #7
 8009d34:	683a      	ldr	r2, [r7, #0]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d90c      	bls.n	8009d54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d3a:	4b65      	ldr	r3, [pc, #404]	; (8009ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8009d3c:	683a      	ldr	r2, [r7, #0]
 8009d3e:	b2d2      	uxtb	r2, r2
 8009d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d42:	4b63      	ldr	r3, [pc, #396]	; (8009ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f003 0307 	and.w	r3, r3, #7
 8009d4a:	683a      	ldr	r2, [r7, #0]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d001      	beq.n	8009d54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	e0b8      	b.n	8009ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f003 0302 	and.w	r3, r3, #2
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d020      	beq.n	8009da2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f003 0304 	and.w	r3, r3, #4
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d005      	beq.n	8009d78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009d6c:	4b59      	ldr	r3, [pc, #356]	; (8009ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	4a58      	ldr	r2, [pc, #352]	; (8009ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8009d72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009d76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f003 0308 	and.w	r3, r3, #8
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d005      	beq.n	8009d90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009d84:	4b53      	ldr	r3, [pc, #332]	; (8009ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	4a52      	ldr	r2, [pc, #328]	; (8009ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8009d8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009d8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d90:	4b50      	ldr	r3, [pc, #320]	; (8009ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	494d      	ldr	r1, [pc, #308]	; (8009ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f003 0301 	and.w	r3, r3, #1
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d044      	beq.n	8009e38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d107      	bne.n	8009dc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009db6:	4b47      	ldr	r3, [pc, #284]	; (8009ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d119      	bne.n	8009df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e07f      	b.n	8009ec6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	2b02      	cmp	r3, #2
 8009dcc:	d003      	beq.n	8009dd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009dd2:	2b03      	cmp	r3, #3
 8009dd4:	d107      	bne.n	8009de6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009dd6:	4b3f      	ldr	r3, [pc, #252]	; (8009ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d109      	bne.n	8009df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	e06f      	b.n	8009ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009de6:	4b3b      	ldr	r3, [pc, #236]	; (8009ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f003 0302 	and.w	r3, r3, #2
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d101      	bne.n	8009df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e067      	b.n	8009ec6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009df6:	4b37      	ldr	r3, [pc, #220]	; (8009ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	f023 0203 	bic.w	r2, r3, #3
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	4934      	ldr	r1, [pc, #208]	; (8009ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e04:	4313      	orrs	r3, r2
 8009e06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009e08:	f7fc f840 	bl	8005e8c <HAL_GetTick>
 8009e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e0e:	e00a      	b.n	8009e26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e10:	f7fc f83c 	bl	8005e8c <HAL_GetTick>
 8009e14:	4602      	mov	r2, r0
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	1ad3      	subs	r3, r2, r3
 8009e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d901      	bls.n	8009e26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009e22:	2303      	movs	r3, #3
 8009e24:	e04f      	b.n	8009ec6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e26:	4b2b      	ldr	r3, [pc, #172]	; (8009ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	f003 020c 	and.w	r2, r3, #12
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	009b      	lsls	r3, r3, #2
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d1eb      	bne.n	8009e10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009e38:	4b25      	ldr	r3, [pc, #148]	; (8009ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f003 0307 	and.w	r3, r3, #7
 8009e40:	683a      	ldr	r2, [r7, #0]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d20c      	bcs.n	8009e60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e46:	4b22      	ldr	r3, [pc, #136]	; (8009ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8009e48:	683a      	ldr	r2, [r7, #0]
 8009e4a:	b2d2      	uxtb	r2, r2
 8009e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e4e:	4b20      	ldr	r3, [pc, #128]	; (8009ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f003 0307 	and.w	r3, r3, #7
 8009e56:	683a      	ldr	r2, [r7, #0]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d001      	beq.n	8009e60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	e032      	b.n	8009ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f003 0304 	and.w	r3, r3, #4
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d008      	beq.n	8009e7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009e6c:	4b19      	ldr	r3, [pc, #100]	; (8009ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	4916      	ldr	r1, [pc, #88]	; (8009ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f003 0308 	and.w	r3, r3, #8
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d009      	beq.n	8009e9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009e8a:	4b12      	ldr	r3, [pc, #72]	; (8009ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	691b      	ldr	r3, [r3, #16]
 8009e96:	00db      	lsls	r3, r3, #3
 8009e98:	490e      	ldr	r1, [pc, #56]	; (8009ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009e9e:	f000 f821 	bl	8009ee4 <HAL_RCC_GetSysClockFreq>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	4b0b      	ldr	r3, [pc, #44]	; (8009ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	091b      	lsrs	r3, r3, #4
 8009eaa:	f003 030f 	and.w	r3, r3, #15
 8009eae:	490a      	ldr	r1, [pc, #40]	; (8009ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8009eb0:	5ccb      	ldrb	r3, [r1, r3]
 8009eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8009eb6:	4a09      	ldr	r2, [pc, #36]	; (8009edc <HAL_RCC_ClockConfig+0x1c4>)
 8009eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009eba:	4b09      	ldr	r3, [pc, #36]	; (8009ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f7f8 fbea 	bl	8002698 <HAL_InitTick>

  return HAL_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	40023c00 	.word	0x40023c00
 8009ed4:	40023800 	.word	0x40023800
 8009ed8:	08011de4 	.word	0x08011de4
 8009edc:	20000008 	.word	0x20000008
 8009ee0:	2000018c 	.word	0x2000018c

08009ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ee8:	b094      	sub	sp, #80	; 0x50
 8009eea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009eec:	2300      	movs	r3, #0
 8009eee:	647b      	str	r3, [r7, #68]	; 0x44
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009efc:	4b79      	ldr	r3, [pc, #484]	; (800a0e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009efe:	689b      	ldr	r3, [r3, #8]
 8009f00:	f003 030c 	and.w	r3, r3, #12
 8009f04:	2b08      	cmp	r3, #8
 8009f06:	d00d      	beq.n	8009f24 <HAL_RCC_GetSysClockFreq+0x40>
 8009f08:	2b08      	cmp	r3, #8
 8009f0a:	f200 80e1 	bhi.w	800a0d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d002      	beq.n	8009f18 <HAL_RCC_GetSysClockFreq+0x34>
 8009f12:	2b04      	cmp	r3, #4
 8009f14:	d003      	beq.n	8009f1e <HAL_RCC_GetSysClockFreq+0x3a>
 8009f16:	e0db      	b.n	800a0d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009f18:	4b73      	ldr	r3, [pc, #460]	; (800a0e8 <HAL_RCC_GetSysClockFreq+0x204>)
 8009f1a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009f1c:	e0db      	b.n	800a0d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009f1e:	4b73      	ldr	r3, [pc, #460]	; (800a0ec <HAL_RCC_GetSysClockFreq+0x208>)
 8009f20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009f22:	e0d8      	b.n	800a0d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009f24:	4b6f      	ldr	r3, [pc, #444]	; (800a0e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f2c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009f2e:	4b6d      	ldr	r3, [pc, #436]	; (800a0e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d063      	beq.n	800a002 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f3a:	4b6a      	ldr	r3, [pc, #424]	; (800a0e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	099b      	lsrs	r3, r3, #6
 8009f40:	2200      	movs	r2, #0
 8009f42:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f4c:	633b      	str	r3, [r7, #48]	; 0x30
 8009f4e:	2300      	movs	r3, #0
 8009f50:	637b      	str	r3, [r7, #52]	; 0x34
 8009f52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009f56:	4622      	mov	r2, r4
 8009f58:	462b      	mov	r3, r5
 8009f5a:	f04f 0000 	mov.w	r0, #0
 8009f5e:	f04f 0100 	mov.w	r1, #0
 8009f62:	0159      	lsls	r1, r3, #5
 8009f64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009f68:	0150      	lsls	r0, r2, #5
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	4621      	mov	r1, r4
 8009f70:	1a51      	subs	r1, r2, r1
 8009f72:	6139      	str	r1, [r7, #16]
 8009f74:	4629      	mov	r1, r5
 8009f76:	eb63 0301 	sbc.w	r3, r3, r1
 8009f7a:	617b      	str	r3, [r7, #20]
 8009f7c:	f04f 0200 	mov.w	r2, #0
 8009f80:	f04f 0300 	mov.w	r3, #0
 8009f84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009f88:	4659      	mov	r1, fp
 8009f8a:	018b      	lsls	r3, r1, #6
 8009f8c:	4651      	mov	r1, sl
 8009f8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009f92:	4651      	mov	r1, sl
 8009f94:	018a      	lsls	r2, r1, #6
 8009f96:	4651      	mov	r1, sl
 8009f98:	ebb2 0801 	subs.w	r8, r2, r1
 8009f9c:	4659      	mov	r1, fp
 8009f9e:	eb63 0901 	sbc.w	r9, r3, r1
 8009fa2:	f04f 0200 	mov.w	r2, #0
 8009fa6:	f04f 0300 	mov.w	r3, #0
 8009faa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009fae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009fb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009fb6:	4690      	mov	r8, r2
 8009fb8:	4699      	mov	r9, r3
 8009fba:	4623      	mov	r3, r4
 8009fbc:	eb18 0303 	adds.w	r3, r8, r3
 8009fc0:	60bb      	str	r3, [r7, #8]
 8009fc2:	462b      	mov	r3, r5
 8009fc4:	eb49 0303 	adc.w	r3, r9, r3
 8009fc8:	60fb      	str	r3, [r7, #12]
 8009fca:	f04f 0200 	mov.w	r2, #0
 8009fce:	f04f 0300 	mov.w	r3, #0
 8009fd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009fd6:	4629      	mov	r1, r5
 8009fd8:	024b      	lsls	r3, r1, #9
 8009fda:	4621      	mov	r1, r4
 8009fdc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009fe0:	4621      	mov	r1, r4
 8009fe2:	024a      	lsls	r2, r1, #9
 8009fe4:	4610      	mov	r0, r2
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fea:	2200      	movs	r2, #0
 8009fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8009fee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ff0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ff4:	f7f6 fdf8 	bl	8000be8 <__aeabi_uldivmod>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a000:	e058      	b.n	800a0b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a002:	4b38      	ldr	r3, [pc, #224]	; (800a0e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	099b      	lsrs	r3, r3, #6
 800a008:	2200      	movs	r2, #0
 800a00a:	4618      	mov	r0, r3
 800a00c:	4611      	mov	r1, r2
 800a00e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a012:	623b      	str	r3, [r7, #32]
 800a014:	2300      	movs	r3, #0
 800a016:	627b      	str	r3, [r7, #36]	; 0x24
 800a018:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a01c:	4642      	mov	r2, r8
 800a01e:	464b      	mov	r3, r9
 800a020:	f04f 0000 	mov.w	r0, #0
 800a024:	f04f 0100 	mov.w	r1, #0
 800a028:	0159      	lsls	r1, r3, #5
 800a02a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a02e:	0150      	lsls	r0, r2, #5
 800a030:	4602      	mov	r2, r0
 800a032:	460b      	mov	r3, r1
 800a034:	4641      	mov	r1, r8
 800a036:	ebb2 0a01 	subs.w	sl, r2, r1
 800a03a:	4649      	mov	r1, r9
 800a03c:	eb63 0b01 	sbc.w	fp, r3, r1
 800a040:	f04f 0200 	mov.w	r2, #0
 800a044:	f04f 0300 	mov.w	r3, #0
 800a048:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a04c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a050:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a054:	ebb2 040a 	subs.w	r4, r2, sl
 800a058:	eb63 050b 	sbc.w	r5, r3, fp
 800a05c:	f04f 0200 	mov.w	r2, #0
 800a060:	f04f 0300 	mov.w	r3, #0
 800a064:	00eb      	lsls	r3, r5, #3
 800a066:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a06a:	00e2      	lsls	r2, r4, #3
 800a06c:	4614      	mov	r4, r2
 800a06e:	461d      	mov	r5, r3
 800a070:	4643      	mov	r3, r8
 800a072:	18e3      	adds	r3, r4, r3
 800a074:	603b      	str	r3, [r7, #0]
 800a076:	464b      	mov	r3, r9
 800a078:	eb45 0303 	adc.w	r3, r5, r3
 800a07c:	607b      	str	r3, [r7, #4]
 800a07e:	f04f 0200 	mov.w	r2, #0
 800a082:	f04f 0300 	mov.w	r3, #0
 800a086:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a08a:	4629      	mov	r1, r5
 800a08c:	028b      	lsls	r3, r1, #10
 800a08e:	4621      	mov	r1, r4
 800a090:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a094:	4621      	mov	r1, r4
 800a096:	028a      	lsls	r2, r1, #10
 800a098:	4610      	mov	r0, r2
 800a09a:	4619      	mov	r1, r3
 800a09c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a09e:	2200      	movs	r2, #0
 800a0a0:	61bb      	str	r3, [r7, #24]
 800a0a2:	61fa      	str	r2, [r7, #28]
 800a0a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a0a8:	f7f6 fd9e 	bl	8000be8 <__aeabi_uldivmod>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a0b4:	4b0b      	ldr	r3, [pc, #44]	; (800a0e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	0c1b      	lsrs	r3, r3, #16
 800a0ba:	f003 0303 	and.w	r3, r3, #3
 800a0be:	3301      	adds	r3, #1
 800a0c0:	005b      	lsls	r3, r3, #1
 800a0c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800a0c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a0c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a0ce:	e002      	b.n	800a0d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a0d0:	4b05      	ldr	r3, [pc, #20]	; (800a0e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800a0d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a0d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a0d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3750      	adds	r7, #80	; 0x50
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a0e2:	bf00      	nop
 800a0e4:	40023800 	.word	0x40023800
 800a0e8:	00f42400 	.word	0x00f42400
 800a0ec:	007a1200 	.word	0x007a1200

0800a0f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a0f4:	4b03      	ldr	r3, [pc, #12]	; (800a104 <HAL_RCC_GetHCLKFreq+0x14>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr
 800a102:	bf00      	nop
 800a104:	20000008 	.word	0x20000008

0800a108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a10c:	f7ff fff0 	bl	800a0f0 <HAL_RCC_GetHCLKFreq>
 800a110:	4602      	mov	r2, r0
 800a112:	4b05      	ldr	r3, [pc, #20]	; (800a128 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	0a9b      	lsrs	r3, r3, #10
 800a118:	f003 0307 	and.w	r3, r3, #7
 800a11c:	4903      	ldr	r1, [pc, #12]	; (800a12c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a11e:	5ccb      	ldrb	r3, [r1, r3]
 800a120:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a124:	4618      	mov	r0, r3
 800a126:	bd80      	pop	{r7, pc}
 800a128:	40023800 	.word	0x40023800
 800a12c:	08011df4 	.word	0x08011df4

0800a130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a134:	f7ff ffdc 	bl	800a0f0 <HAL_RCC_GetHCLKFreq>
 800a138:	4602      	mov	r2, r0
 800a13a:	4b05      	ldr	r3, [pc, #20]	; (800a150 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a13c:	689b      	ldr	r3, [r3, #8]
 800a13e:	0b5b      	lsrs	r3, r3, #13
 800a140:	f003 0307 	and.w	r3, r3, #7
 800a144:	4903      	ldr	r1, [pc, #12]	; (800a154 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a146:	5ccb      	ldrb	r3, [r1, r3]
 800a148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	40023800 	.word	0x40023800
 800a154:	08011df4 	.word	0x08011df4

0800a158 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	220f      	movs	r2, #15
 800a166:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a168:	4b12      	ldr	r3, [pc, #72]	; (800a1b4 <HAL_RCC_GetClockConfig+0x5c>)
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	f003 0203 	and.w	r2, r3, #3
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a174:	4b0f      	ldr	r3, [pc, #60]	; (800a1b4 <HAL_RCC_GetClockConfig+0x5c>)
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a180:	4b0c      	ldr	r3, [pc, #48]	; (800a1b4 <HAL_RCC_GetClockConfig+0x5c>)
 800a182:	689b      	ldr	r3, [r3, #8]
 800a184:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a18c:	4b09      	ldr	r3, [pc, #36]	; (800a1b4 <HAL_RCC_GetClockConfig+0x5c>)
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	08db      	lsrs	r3, r3, #3
 800a192:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a19a:	4b07      	ldr	r3, [pc, #28]	; (800a1b8 <HAL_RCC_GetClockConfig+0x60>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f003 0207 	and.w	r2, r3, #7
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	601a      	str	r2, [r3, #0]
}
 800a1a6:	bf00      	nop
 800a1a8:	370c      	adds	r7, #12
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop
 800a1b4:	40023800 	.word	0x40023800
 800a1b8:	40023c00 	.word	0x40023c00

0800a1bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d101      	bne.n	800a1ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e041      	b.n	800a252 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d106      	bne.n	800a1e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f7f8 ffb4 	bl	8003150 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2202      	movs	r2, #2
 800a1ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	3304      	adds	r3, #4
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	4610      	mov	r0, r2
 800a1fc:	f000 fb6a 	bl	800a8d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2201      	movs	r2, #1
 800a204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2201      	movs	r2, #1
 800a20c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2201      	movs	r2, #1
 800a214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2201      	movs	r2, #1
 800a21c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2201      	movs	r2, #1
 800a244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2201      	movs	r2, #1
 800a24c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	3708      	adds	r7, #8
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
	...

0800a25c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b085      	sub	sp, #20
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d001      	beq.n	800a274 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a270:	2301      	movs	r3, #1
 800a272:	e04e      	b.n	800a312 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2202      	movs	r2, #2
 800a278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	68da      	ldr	r2, [r3, #12]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f042 0201 	orr.w	r2, r2, #1
 800a28a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a23      	ldr	r2, [pc, #140]	; (800a320 <HAL_TIM_Base_Start_IT+0xc4>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d022      	beq.n	800a2dc <HAL_TIM_Base_Start_IT+0x80>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a29e:	d01d      	beq.n	800a2dc <HAL_TIM_Base_Start_IT+0x80>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a1f      	ldr	r2, [pc, #124]	; (800a324 <HAL_TIM_Base_Start_IT+0xc8>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d018      	beq.n	800a2dc <HAL_TIM_Base_Start_IT+0x80>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a1e      	ldr	r2, [pc, #120]	; (800a328 <HAL_TIM_Base_Start_IT+0xcc>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d013      	beq.n	800a2dc <HAL_TIM_Base_Start_IT+0x80>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4a1c      	ldr	r2, [pc, #112]	; (800a32c <HAL_TIM_Base_Start_IT+0xd0>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d00e      	beq.n	800a2dc <HAL_TIM_Base_Start_IT+0x80>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a1b      	ldr	r2, [pc, #108]	; (800a330 <HAL_TIM_Base_Start_IT+0xd4>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d009      	beq.n	800a2dc <HAL_TIM_Base_Start_IT+0x80>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a19      	ldr	r2, [pc, #100]	; (800a334 <HAL_TIM_Base_Start_IT+0xd8>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d004      	beq.n	800a2dc <HAL_TIM_Base_Start_IT+0x80>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a18      	ldr	r2, [pc, #96]	; (800a338 <HAL_TIM_Base_Start_IT+0xdc>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d111      	bne.n	800a300 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	f003 0307 	and.w	r3, r3, #7
 800a2e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2b06      	cmp	r3, #6
 800a2ec:	d010      	beq.n	800a310 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f042 0201 	orr.w	r2, r2, #1
 800a2fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2fe:	e007      	b.n	800a310 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f042 0201 	orr.w	r2, r2, #1
 800a30e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3714      	adds	r7, #20
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop
 800a320:	40010000 	.word	0x40010000
 800a324:	40000400 	.word	0x40000400
 800a328:	40000800 	.word	0x40000800
 800a32c:	40000c00 	.word	0x40000c00
 800a330:	40010400 	.word	0x40010400
 800a334:	40014000 	.word	0x40014000
 800a338:	40001800 	.word	0x40001800

0800a33c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	68da      	ldr	r2, [r3, #12]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f022 0201 	bic.w	r2, r2, #1
 800a352:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	6a1a      	ldr	r2, [r3, #32]
 800a35a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a35e:	4013      	ands	r3, r2
 800a360:	2b00      	cmp	r3, #0
 800a362:	d10f      	bne.n	800a384 <HAL_TIM_Base_Stop_IT+0x48>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	6a1a      	ldr	r2, [r3, #32]
 800a36a:	f240 4344 	movw	r3, #1092	; 0x444
 800a36e:	4013      	ands	r3, r2
 800a370:	2b00      	cmp	r3, #0
 800a372:	d107      	bne.n	800a384 <HAL_TIM_Base_Stop_IT+0x48>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f022 0201 	bic.w	r2, r2, #1
 800a382:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2201      	movs	r2, #1
 800a388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	370c      	adds	r7, #12
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr

0800a39a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a39a:	b580      	push	{r7, lr}
 800a39c:	b086      	sub	sp, #24
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
 800a3a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d101      	bne.n	800a3ae <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e097      	b.n	800a4de <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d106      	bne.n	800a3c8 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f7f8 fe04 	bl	8002fd0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2202      	movs	r2, #2
 800a3cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	6812      	ldr	r2, [r2, #0]
 800a3da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3de:	f023 0307 	bic.w	r3, r3, #7
 800a3e2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	3304      	adds	r3, #4
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	4610      	mov	r0, r2
 800a3f0:	f000 fa70 	bl	800a8d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	699b      	ldr	r3, [r3, #24]
 800a402:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	6a1b      	ldr	r3, [r3, #32]
 800a40a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	697a      	ldr	r2, [r7, #20]
 800a412:	4313      	orrs	r3, r2
 800a414:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a41c:	f023 0303 	bic.w	r3, r3, #3
 800a420:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	689a      	ldr	r2, [r3, #8]
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	699b      	ldr	r3, [r3, #24]
 800a42a:	021b      	lsls	r3, r3, #8
 800a42c:	4313      	orrs	r3, r2
 800a42e:	693a      	ldr	r2, [r7, #16]
 800a430:	4313      	orrs	r3, r2
 800a432:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a43a:	f023 030c 	bic.w	r3, r3, #12
 800a43e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a446:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a44a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	68da      	ldr	r2, [r3, #12]
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	69db      	ldr	r3, [r3, #28]
 800a454:	021b      	lsls	r3, r3, #8
 800a456:	4313      	orrs	r3, r2
 800a458:	693a      	ldr	r2, [r7, #16]
 800a45a:	4313      	orrs	r3, r2
 800a45c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	691b      	ldr	r3, [r3, #16]
 800a462:	011a      	lsls	r2, r3, #4
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	6a1b      	ldr	r3, [r3, #32]
 800a468:	031b      	lsls	r3, r3, #12
 800a46a:	4313      	orrs	r3, r2
 800a46c:	693a      	ldr	r2, [r7, #16]
 800a46e:	4313      	orrs	r3, r2
 800a470:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a478:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a480:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	685a      	ldr	r2, [r3, #4]
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	695b      	ldr	r3, [r3, #20]
 800a48a:	011b      	lsls	r3, r3, #4
 800a48c:	4313      	orrs	r3, r2
 800a48e:	68fa      	ldr	r2, [r7, #12]
 800a490:	4313      	orrs	r3, r2
 800a492:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	697a      	ldr	r2, [r7, #20]
 800a49a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	693a      	ldr	r2, [r7, #16]
 800a4a2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	68fa      	ldr	r2, [r7, #12]
 800a4aa:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3718      	adds	r7, #24
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b082      	sub	sp, #8
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	691b      	ldr	r3, [r3, #16]
 800a4f4:	f003 0302 	and.w	r3, r3, #2
 800a4f8:	2b02      	cmp	r3, #2
 800a4fa:	d122      	bne.n	800a542 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	f003 0302 	and.w	r3, r3, #2
 800a506:	2b02      	cmp	r3, #2
 800a508:	d11b      	bne.n	800a542 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f06f 0202 	mvn.w	r2, #2
 800a512:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2201      	movs	r2, #1
 800a518:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	699b      	ldr	r3, [r3, #24]
 800a520:	f003 0303 	and.w	r3, r3, #3
 800a524:	2b00      	cmp	r3, #0
 800a526:	d003      	beq.n	800a530 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 f9b5 	bl	800a898 <HAL_TIM_IC_CaptureCallback>
 800a52e:	e005      	b.n	800a53c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 f9a7 	bl	800a884 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 f9b8 	bl	800a8ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	691b      	ldr	r3, [r3, #16]
 800a548:	f003 0304 	and.w	r3, r3, #4
 800a54c:	2b04      	cmp	r3, #4
 800a54e:	d122      	bne.n	800a596 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	f003 0304 	and.w	r3, r3, #4
 800a55a:	2b04      	cmp	r3, #4
 800a55c:	d11b      	bne.n	800a596 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f06f 0204 	mvn.w	r2, #4
 800a566:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2202      	movs	r2, #2
 800a56c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	699b      	ldr	r3, [r3, #24]
 800a574:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d003      	beq.n	800a584 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 f98b 	bl	800a898 <HAL_TIM_IC_CaptureCallback>
 800a582:	e005      	b.n	800a590 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 f97d 	bl	800a884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 f98e 	bl	800a8ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	691b      	ldr	r3, [r3, #16]
 800a59c:	f003 0308 	and.w	r3, r3, #8
 800a5a0:	2b08      	cmp	r3, #8
 800a5a2:	d122      	bne.n	800a5ea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	f003 0308 	and.w	r3, r3, #8
 800a5ae:	2b08      	cmp	r3, #8
 800a5b0:	d11b      	bne.n	800a5ea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f06f 0208 	mvn.w	r2, #8
 800a5ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2204      	movs	r2, #4
 800a5c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	69db      	ldr	r3, [r3, #28]
 800a5c8:	f003 0303 	and.w	r3, r3, #3
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d003      	beq.n	800a5d8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 f961 	bl	800a898 <HAL_TIM_IC_CaptureCallback>
 800a5d6:	e005      	b.n	800a5e4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 f953 	bl	800a884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 f964 	bl	800a8ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	f003 0310 	and.w	r3, r3, #16
 800a5f4:	2b10      	cmp	r3, #16
 800a5f6:	d122      	bne.n	800a63e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	68db      	ldr	r3, [r3, #12]
 800a5fe:	f003 0310 	and.w	r3, r3, #16
 800a602:	2b10      	cmp	r3, #16
 800a604:	d11b      	bne.n	800a63e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f06f 0210 	mvn.w	r2, #16
 800a60e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2208      	movs	r2, #8
 800a614:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	69db      	ldr	r3, [r3, #28]
 800a61c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a620:	2b00      	cmp	r3, #0
 800a622:	d003      	beq.n	800a62c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f000 f937 	bl	800a898 <HAL_TIM_IC_CaptureCallback>
 800a62a:	e005      	b.n	800a638 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 f929 	bl	800a884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 f93a 	bl	800a8ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2200      	movs	r2, #0
 800a63c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	691b      	ldr	r3, [r3, #16]
 800a644:	f003 0301 	and.w	r3, r3, #1
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d10e      	bne.n	800a66a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	68db      	ldr	r3, [r3, #12]
 800a652:	f003 0301 	and.w	r3, r3, #1
 800a656:	2b01      	cmp	r3, #1
 800a658:	d107      	bne.n	800a66a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f06f 0201 	mvn.w	r2, #1
 800a662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f7f7 fa99 	bl	8001b9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	691b      	ldr	r3, [r3, #16]
 800a670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a674:	2b80      	cmp	r3, #128	; 0x80
 800a676:	d10e      	bne.n	800a696 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a682:	2b80      	cmp	r3, #128	; 0x80
 800a684:	d107      	bne.n	800a696 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a68e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 fadf 	bl	800ac54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	691b      	ldr	r3, [r3, #16]
 800a69c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6a0:	2b40      	cmp	r3, #64	; 0x40
 800a6a2:	d10e      	bne.n	800a6c2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ae:	2b40      	cmp	r3, #64	; 0x40
 800a6b0:	d107      	bne.n	800a6c2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a6ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 f8ff 	bl	800a8c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	f003 0320 	and.w	r3, r3, #32
 800a6cc:	2b20      	cmp	r3, #32
 800a6ce:	d10e      	bne.n	800a6ee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	f003 0320 	and.w	r3, r3, #32
 800a6da:	2b20      	cmp	r3, #32
 800a6dc:	d107      	bne.n	800a6ee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f06f 0220 	mvn.w	r2, #32
 800a6e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 faa9 	bl	800ac40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a6ee:	bf00      	nop
 800a6f0:	3708      	adds	r7, #8
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}

0800a6f6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a6f6:	b580      	push	{r7, lr}
 800a6f8:	b084      	sub	sp, #16
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
 800a6fe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a700:	2300      	movs	r3, #0
 800a702:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d101      	bne.n	800a712 <HAL_TIM_ConfigClockSource+0x1c>
 800a70e:	2302      	movs	r3, #2
 800a710:	e0b4      	b.n	800a87c <HAL_TIM_ConfigClockSource+0x186>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2201      	movs	r2, #1
 800a716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2202      	movs	r2, #2
 800a71e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a730:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a738:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a74a:	d03e      	beq.n	800a7ca <HAL_TIM_ConfigClockSource+0xd4>
 800a74c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a750:	f200 8087 	bhi.w	800a862 <HAL_TIM_ConfigClockSource+0x16c>
 800a754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a758:	f000 8086 	beq.w	800a868 <HAL_TIM_ConfigClockSource+0x172>
 800a75c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a760:	d87f      	bhi.n	800a862 <HAL_TIM_ConfigClockSource+0x16c>
 800a762:	2b70      	cmp	r3, #112	; 0x70
 800a764:	d01a      	beq.n	800a79c <HAL_TIM_ConfigClockSource+0xa6>
 800a766:	2b70      	cmp	r3, #112	; 0x70
 800a768:	d87b      	bhi.n	800a862 <HAL_TIM_ConfigClockSource+0x16c>
 800a76a:	2b60      	cmp	r3, #96	; 0x60
 800a76c:	d050      	beq.n	800a810 <HAL_TIM_ConfigClockSource+0x11a>
 800a76e:	2b60      	cmp	r3, #96	; 0x60
 800a770:	d877      	bhi.n	800a862 <HAL_TIM_ConfigClockSource+0x16c>
 800a772:	2b50      	cmp	r3, #80	; 0x50
 800a774:	d03c      	beq.n	800a7f0 <HAL_TIM_ConfigClockSource+0xfa>
 800a776:	2b50      	cmp	r3, #80	; 0x50
 800a778:	d873      	bhi.n	800a862 <HAL_TIM_ConfigClockSource+0x16c>
 800a77a:	2b40      	cmp	r3, #64	; 0x40
 800a77c:	d058      	beq.n	800a830 <HAL_TIM_ConfigClockSource+0x13a>
 800a77e:	2b40      	cmp	r3, #64	; 0x40
 800a780:	d86f      	bhi.n	800a862 <HAL_TIM_ConfigClockSource+0x16c>
 800a782:	2b30      	cmp	r3, #48	; 0x30
 800a784:	d064      	beq.n	800a850 <HAL_TIM_ConfigClockSource+0x15a>
 800a786:	2b30      	cmp	r3, #48	; 0x30
 800a788:	d86b      	bhi.n	800a862 <HAL_TIM_ConfigClockSource+0x16c>
 800a78a:	2b20      	cmp	r3, #32
 800a78c:	d060      	beq.n	800a850 <HAL_TIM_ConfigClockSource+0x15a>
 800a78e:	2b20      	cmp	r3, #32
 800a790:	d867      	bhi.n	800a862 <HAL_TIM_ConfigClockSource+0x16c>
 800a792:	2b00      	cmp	r3, #0
 800a794:	d05c      	beq.n	800a850 <HAL_TIM_ConfigClockSource+0x15a>
 800a796:	2b10      	cmp	r3, #16
 800a798:	d05a      	beq.n	800a850 <HAL_TIM_ConfigClockSource+0x15a>
 800a79a:	e062      	b.n	800a862 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6818      	ldr	r0, [r3, #0]
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	6899      	ldr	r1, [r3, #8]
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	685a      	ldr	r2, [r3, #4]
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	f000 f9ac 	bl	800ab08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a7be:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	68ba      	ldr	r2, [r7, #8]
 800a7c6:	609a      	str	r2, [r3, #8]
      break;
 800a7c8:	e04f      	b.n	800a86a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6818      	ldr	r0, [r3, #0]
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	6899      	ldr	r1, [r3, #8]
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	685a      	ldr	r2, [r3, #4]
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	f000 f995 	bl	800ab08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	689a      	ldr	r2, [r3, #8]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a7ec:	609a      	str	r2, [r3, #8]
      break;
 800a7ee:	e03c      	b.n	800a86a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6818      	ldr	r0, [r3, #0]
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	6859      	ldr	r1, [r3, #4]
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	f000 f909 	bl	800aa14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	2150      	movs	r1, #80	; 0x50
 800a808:	4618      	mov	r0, r3
 800a80a:	f000 f962 	bl	800aad2 <TIM_ITRx_SetConfig>
      break;
 800a80e:	e02c      	b.n	800a86a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6818      	ldr	r0, [r3, #0]
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	6859      	ldr	r1, [r3, #4]
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	461a      	mov	r2, r3
 800a81e:	f000 f928 	bl	800aa72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2160      	movs	r1, #96	; 0x60
 800a828:	4618      	mov	r0, r3
 800a82a:	f000 f952 	bl	800aad2 <TIM_ITRx_SetConfig>
      break;
 800a82e:	e01c      	b.n	800a86a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6818      	ldr	r0, [r3, #0]
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	6859      	ldr	r1, [r3, #4]
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	461a      	mov	r2, r3
 800a83e:	f000 f8e9 	bl	800aa14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2140      	movs	r1, #64	; 0x40
 800a848:	4618      	mov	r0, r3
 800a84a:	f000 f942 	bl	800aad2 <TIM_ITRx_SetConfig>
      break;
 800a84e:	e00c      	b.n	800a86a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4619      	mov	r1, r3
 800a85a:	4610      	mov	r0, r2
 800a85c:	f000 f939 	bl	800aad2 <TIM_ITRx_SetConfig>
      break;
 800a860:	e003      	b.n	800a86a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a862:	2301      	movs	r3, #1
 800a864:	73fb      	strb	r3, [r7, #15]
      break;
 800a866:	e000      	b.n	800a86a <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a868:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2201      	movs	r2, #1
 800a86e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2200      	movs	r2, #0
 800a876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a87a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3710      	adds	r7, #16
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a88c:	bf00      	nop
 800a88e:	370c      	adds	r7, #12
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a8a0:	bf00      	nop
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr

0800a8ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a8b4:	bf00      	nop
 800a8b6:	370c      	adds	r7, #12
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a8c8:	bf00      	nop
 800a8ca:	370c      	adds	r7, #12
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b085      	sub	sp, #20
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	4a40      	ldr	r2, [pc, #256]	; (800a9e8 <TIM_Base_SetConfig+0x114>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d013      	beq.n	800a914 <TIM_Base_SetConfig+0x40>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8f2:	d00f      	beq.n	800a914 <TIM_Base_SetConfig+0x40>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	4a3d      	ldr	r2, [pc, #244]	; (800a9ec <TIM_Base_SetConfig+0x118>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d00b      	beq.n	800a914 <TIM_Base_SetConfig+0x40>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4a3c      	ldr	r2, [pc, #240]	; (800a9f0 <TIM_Base_SetConfig+0x11c>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d007      	beq.n	800a914 <TIM_Base_SetConfig+0x40>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4a3b      	ldr	r2, [pc, #236]	; (800a9f4 <TIM_Base_SetConfig+0x120>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d003      	beq.n	800a914 <TIM_Base_SetConfig+0x40>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	4a3a      	ldr	r2, [pc, #232]	; (800a9f8 <TIM_Base_SetConfig+0x124>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d108      	bne.n	800a926 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a91a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	68fa      	ldr	r2, [r7, #12]
 800a922:	4313      	orrs	r3, r2
 800a924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4a2f      	ldr	r2, [pc, #188]	; (800a9e8 <TIM_Base_SetConfig+0x114>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d02b      	beq.n	800a986 <TIM_Base_SetConfig+0xb2>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a934:	d027      	beq.n	800a986 <TIM_Base_SetConfig+0xb2>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	4a2c      	ldr	r2, [pc, #176]	; (800a9ec <TIM_Base_SetConfig+0x118>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d023      	beq.n	800a986 <TIM_Base_SetConfig+0xb2>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4a2b      	ldr	r2, [pc, #172]	; (800a9f0 <TIM_Base_SetConfig+0x11c>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d01f      	beq.n	800a986 <TIM_Base_SetConfig+0xb2>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4a2a      	ldr	r2, [pc, #168]	; (800a9f4 <TIM_Base_SetConfig+0x120>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d01b      	beq.n	800a986 <TIM_Base_SetConfig+0xb2>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4a29      	ldr	r2, [pc, #164]	; (800a9f8 <TIM_Base_SetConfig+0x124>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d017      	beq.n	800a986 <TIM_Base_SetConfig+0xb2>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	4a28      	ldr	r2, [pc, #160]	; (800a9fc <TIM_Base_SetConfig+0x128>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d013      	beq.n	800a986 <TIM_Base_SetConfig+0xb2>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	4a27      	ldr	r2, [pc, #156]	; (800aa00 <TIM_Base_SetConfig+0x12c>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d00f      	beq.n	800a986 <TIM_Base_SetConfig+0xb2>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4a26      	ldr	r2, [pc, #152]	; (800aa04 <TIM_Base_SetConfig+0x130>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d00b      	beq.n	800a986 <TIM_Base_SetConfig+0xb2>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4a25      	ldr	r2, [pc, #148]	; (800aa08 <TIM_Base_SetConfig+0x134>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d007      	beq.n	800a986 <TIM_Base_SetConfig+0xb2>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	4a24      	ldr	r2, [pc, #144]	; (800aa0c <TIM_Base_SetConfig+0x138>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d003      	beq.n	800a986 <TIM_Base_SetConfig+0xb2>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	4a23      	ldr	r2, [pc, #140]	; (800aa10 <TIM_Base_SetConfig+0x13c>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d108      	bne.n	800a998 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a98c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	68db      	ldr	r3, [r3, #12]
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	4313      	orrs	r3, r2
 800a996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	695b      	ldr	r3, [r3, #20]
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	68fa      	ldr	r2, [r7, #12]
 800a9aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	689a      	ldr	r2, [r3, #8]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	4a0a      	ldr	r2, [pc, #40]	; (800a9e8 <TIM_Base_SetConfig+0x114>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d003      	beq.n	800a9cc <TIM_Base_SetConfig+0xf8>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	4a0c      	ldr	r2, [pc, #48]	; (800a9f8 <TIM_Base_SetConfig+0x124>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d103      	bne.n	800a9d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	691a      	ldr	r2, [r3, #16]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	615a      	str	r2, [r3, #20]
}
 800a9da:	bf00      	nop
 800a9dc:	3714      	adds	r7, #20
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr
 800a9e6:	bf00      	nop
 800a9e8:	40010000 	.word	0x40010000
 800a9ec:	40000400 	.word	0x40000400
 800a9f0:	40000800 	.word	0x40000800
 800a9f4:	40000c00 	.word	0x40000c00
 800a9f8:	40010400 	.word	0x40010400
 800a9fc:	40014000 	.word	0x40014000
 800aa00:	40014400 	.word	0x40014400
 800aa04:	40014800 	.word	0x40014800
 800aa08:	40001800 	.word	0x40001800
 800aa0c:	40001c00 	.word	0x40001c00
 800aa10:	40002000 	.word	0x40002000

0800aa14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b087      	sub	sp, #28
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	60f8      	str	r0, [r7, #12]
 800aa1c:	60b9      	str	r1, [r7, #8]
 800aa1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	6a1b      	ldr	r3, [r3, #32]
 800aa24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6a1b      	ldr	r3, [r3, #32]
 800aa2a:	f023 0201 	bic.w	r2, r3, #1
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	699b      	ldr	r3, [r3, #24]
 800aa36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	011b      	lsls	r3, r3, #4
 800aa44:	693a      	ldr	r2, [r7, #16]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	f023 030a 	bic.w	r3, r3, #10
 800aa50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa52:	697a      	ldr	r2, [r7, #20]
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	4313      	orrs	r3, r2
 800aa58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	693a      	ldr	r2, [r7, #16]
 800aa5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	697a      	ldr	r2, [r7, #20]
 800aa64:	621a      	str	r2, [r3, #32]
}
 800aa66:	bf00      	nop
 800aa68:	371c      	adds	r7, #28
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr

0800aa72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa72:	b480      	push	{r7}
 800aa74:	b087      	sub	sp, #28
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	60f8      	str	r0, [r7, #12]
 800aa7a:	60b9      	str	r1, [r7, #8]
 800aa7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	6a1b      	ldr	r3, [r3, #32]
 800aa82:	f023 0210 	bic.w	r2, r3, #16
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	699b      	ldr	r3, [r3, #24]
 800aa8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	6a1b      	ldr	r3, [r3, #32]
 800aa94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	031b      	lsls	r3, r3, #12
 800aaa2:	697a      	ldr	r2, [r7, #20]
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aaae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	011b      	lsls	r3, r3, #4
 800aab4:	693a      	ldr	r2, [r7, #16]
 800aab6:	4313      	orrs	r3, r2
 800aab8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	697a      	ldr	r2, [r7, #20]
 800aabe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	693a      	ldr	r2, [r7, #16]
 800aac4:	621a      	str	r2, [r3, #32]
}
 800aac6:	bf00      	nop
 800aac8:	371c      	adds	r7, #28
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr

0800aad2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aad2:	b480      	push	{r7}
 800aad4:	b085      	sub	sp, #20
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
 800aada:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	689b      	ldr	r3, [r3, #8]
 800aae0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aae8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aaea:	683a      	ldr	r2, [r7, #0]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	f043 0307 	orr.w	r3, r3, #7
 800aaf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	68fa      	ldr	r2, [r7, #12]
 800aafa:	609a      	str	r2, [r3, #8]
}
 800aafc:	bf00      	nop
 800aafe:	3714      	adds	r7, #20
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b087      	sub	sp, #28
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	607a      	str	r2, [r7, #4]
 800ab14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	689b      	ldr	r3, [r3, #8]
 800ab1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	021a      	lsls	r2, r3, #8
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	431a      	orrs	r2, r3
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	697a      	ldr	r2, [r7, #20]
 800ab32:	4313      	orrs	r3, r2
 800ab34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	697a      	ldr	r2, [r7, #20]
 800ab3a:	609a      	str	r2, [r3, #8]
}
 800ab3c:	bf00      	nop
 800ab3e:	371c      	adds	r7, #28
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d101      	bne.n	800ab60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab5c:	2302      	movs	r3, #2
 800ab5e:	e05a      	b.n	800ac16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2201      	movs	r2, #1
 800ab64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2202      	movs	r2, #2
 800ab6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	689b      	ldr	r3, [r3, #8]
 800ab7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	68fa      	ldr	r2, [r7, #12]
 800ab98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4a21      	ldr	r2, [pc, #132]	; (800ac24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d022      	beq.n	800abea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abac:	d01d      	beq.n	800abea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a1d      	ldr	r2, [pc, #116]	; (800ac28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d018      	beq.n	800abea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a1b      	ldr	r2, [pc, #108]	; (800ac2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d013      	beq.n	800abea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a1a      	ldr	r2, [pc, #104]	; (800ac30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d00e      	beq.n	800abea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a18      	ldr	r2, [pc, #96]	; (800ac34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d009      	beq.n	800abea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a17      	ldr	r2, [pc, #92]	; (800ac38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d004      	beq.n	800abea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a15      	ldr	r2, [pc, #84]	; (800ac3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d10c      	bne.n	800ac04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	68ba      	ldr	r2, [r7, #8]
 800abf8:	4313      	orrs	r3, r2
 800abfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	68ba      	ldr	r2, [r7, #8]
 800ac02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2201      	movs	r2, #1
 800ac08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3714      	adds	r7, #20
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	40010000 	.word	0x40010000
 800ac28:	40000400 	.word	0x40000400
 800ac2c:	40000800 	.word	0x40000800
 800ac30:	40000c00 	.word	0x40000c00
 800ac34:	40010400 	.word	0x40010400
 800ac38:	40014000 	.word	0x40014000
 800ac3c:	40001800 	.word	0x40001800

0800ac40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac48:	bf00      	nop
 800ac4a:	370c      	adds	r7, #12
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac5c:	bf00      	nop
 800ac5e:	370c      	adds	r7, #12
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr

0800ac68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d101      	bne.n	800ac7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac76:	2301      	movs	r3, #1
 800ac78:	e03f      	b.n	800acfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d106      	bne.n	800ac94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f7f8 fc06 	bl	80034a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2224      	movs	r2, #36	; 0x24
 800ac98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	68da      	ldr	r2, [r3, #12]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800acaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 fe23 	bl	800b8f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	691a      	ldr	r2, [r3, #16]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800acc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	695a      	ldr	r2, [r3, #20]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800acd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	68da      	ldr	r2, [r3, #12]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ace0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2220      	movs	r2, #32
 800acec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2220      	movs	r2, #32
 800acf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800acf8:	2300      	movs	r3, #0
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3708      	adds	r7, #8
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b08a      	sub	sp, #40	; 0x28
 800ad06:	af02      	add	r7, sp, #8
 800ad08:	60f8      	str	r0, [r7, #12]
 800ad0a:	60b9      	str	r1, [r7, #8]
 800ad0c:	603b      	str	r3, [r7, #0]
 800ad0e:	4613      	mov	r3, r2
 800ad10:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ad12:	2300      	movs	r3, #0
 800ad14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	2b20      	cmp	r3, #32
 800ad20:	d17c      	bne.n	800ae1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d002      	beq.n	800ad2e <HAL_UART_Transmit+0x2c>
 800ad28:	88fb      	ldrh	r3, [r7, #6]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d101      	bne.n	800ad32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	e075      	b.n	800ae1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d101      	bne.n	800ad40 <HAL_UART_Transmit+0x3e>
 800ad3c:	2302      	movs	r3, #2
 800ad3e:	e06e      	b.n	800ae1e <HAL_UART_Transmit+0x11c>
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2201      	movs	r2, #1
 800ad44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2221      	movs	r2, #33	; 0x21
 800ad52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ad56:	f7fb f899 	bl	8005e8c <HAL_GetTick>
 800ad5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	88fa      	ldrh	r2, [r7, #6]
 800ad60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	88fa      	ldrh	r2, [r7, #6]
 800ad66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad70:	d108      	bne.n	800ad84 <HAL_UART_Transmit+0x82>
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d104      	bne.n	800ad84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	61bb      	str	r3, [r7, #24]
 800ad82:	e003      	b.n	800ad8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800ad94:	e02a      	b.n	800adec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	9300      	str	r3, [sp, #0]
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	2180      	movs	r1, #128	; 0x80
 800ada0:	68f8      	ldr	r0, [r7, #12]
 800ada2:	f000 fb63 	bl	800b46c <UART_WaitOnFlagUntilTimeout>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d001      	beq.n	800adb0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800adac:	2303      	movs	r3, #3
 800adae:	e036      	b.n	800ae1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800adb0:	69fb      	ldr	r3, [r7, #28]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d10b      	bne.n	800adce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800adb6:	69bb      	ldr	r3, [r7, #24]
 800adb8:	881b      	ldrh	r3, [r3, #0]
 800adba:	461a      	mov	r2, r3
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800adc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800adc6:	69bb      	ldr	r3, [r7, #24]
 800adc8:	3302      	adds	r3, #2
 800adca:	61bb      	str	r3, [r7, #24]
 800adcc:	e007      	b.n	800adde <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800adce:	69fb      	ldr	r3, [r7, #28]
 800add0:	781a      	ldrb	r2, [r3, #0]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800add8:	69fb      	ldr	r3, [r7, #28]
 800adda:	3301      	adds	r3, #1
 800addc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	3b01      	subs	r3, #1
 800ade6:	b29a      	uxth	r2, r3
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d1cf      	bne.n	800ad96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	9300      	str	r3, [sp, #0]
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	2200      	movs	r2, #0
 800adfe:	2140      	movs	r1, #64	; 0x40
 800ae00:	68f8      	ldr	r0, [r7, #12]
 800ae02:	f000 fb33 	bl	800b46c <UART_WaitOnFlagUntilTimeout>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d001      	beq.n	800ae10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ae0c:	2303      	movs	r3, #3
 800ae0e:	e006      	b.n	800ae1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2220      	movs	r2, #32
 800ae14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	e000      	b.n	800ae1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800ae1c:	2302      	movs	r3, #2
  }
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3720      	adds	r7, #32
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}

0800ae26 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ae26:	b480      	push	{r7}
 800ae28:	b085      	sub	sp, #20
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	60f8      	str	r0, [r7, #12]
 800ae2e:	60b9      	str	r1, [r7, #8]
 800ae30:	4613      	mov	r3, r2
 800ae32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae3a:	b2db      	uxtb	r3, r3
 800ae3c:	2b20      	cmp	r3, #32
 800ae3e:	d130      	bne.n	800aea2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d002      	beq.n	800ae4c <HAL_UART_Transmit_IT+0x26>
 800ae46:	88fb      	ldrh	r3, [r7, #6]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d101      	bne.n	800ae50 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e029      	b.n	800aea4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d101      	bne.n	800ae5e <HAL_UART_Transmit_IT+0x38>
 800ae5a:	2302      	movs	r3, #2
 800ae5c:	e022      	b.n	800aea4 <HAL_UART_Transmit_IT+0x7e>
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2201      	movs	r2, #1
 800ae62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	68ba      	ldr	r2, [r7, #8]
 800ae6a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	88fa      	ldrh	r2, [r7, #6]
 800ae70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	88fa      	ldrh	r2, [r7, #6]
 800ae76:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2221      	movs	r2, #33	; 0x21
 800ae82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	68da      	ldr	r2, [r3, #12]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ae9c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	e000      	b.n	800aea4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800aea2:	2302      	movs	r3, #2
  }
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3714      	adds	r7, #20
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	4613      	mov	r3, r2
 800aebc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	2b20      	cmp	r3, #32
 800aec8:	d11d      	bne.n	800af06 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d002      	beq.n	800aed6 <HAL_UART_Receive_IT+0x26>
 800aed0:	88fb      	ldrh	r3, [r7, #6]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d101      	bne.n	800aeda <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800aed6:	2301      	movs	r3, #1
 800aed8:	e016      	b.n	800af08 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d101      	bne.n	800aee8 <HAL_UART_Receive_IT+0x38>
 800aee4:	2302      	movs	r3, #2
 800aee6:	e00f      	b.n	800af08 <HAL_UART_Receive_IT+0x58>
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2201      	movs	r2, #1
 800aeec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2200      	movs	r2, #0
 800aef4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800aef6:	88fb      	ldrh	r3, [r7, #6]
 800aef8:	461a      	mov	r2, r3
 800aefa:	68b9      	ldr	r1, [r7, #8]
 800aefc:	68f8      	ldr	r0, [r7, #12]
 800aefe:	f000 fb23 	bl	800b548 <UART_Start_Receive_IT>
 800af02:	4603      	mov	r3, r0
 800af04:	e000      	b.n	800af08 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800af06:	2302      	movs	r3, #2
  }
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3710      	adds	r7, #16
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b0ba      	sub	sp, #232	; 0xe8
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	68db      	ldr	r3, [r3, #12]
 800af28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	695b      	ldr	r3, [r3, #20]
 800af32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800af36:	2300      	movs	r3, #0
 800af38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800af3c:	2300      	movs	r3, #0
 800af3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800af42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af46:	f003 030f 	and.w	r3, r3, #15
 800af4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800af4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af52:	2b00      	cmp	r3, #0
 800af54:	d10f      	bne.n	800af76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800af56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af5a:	f003 0320 	and.w	r3, r3, #32
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d009      	beq.n	800af76 <HAL_UART_IRQHandler+0x66>
 800af62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af66:	f003 0320 	and.w	r3, r3, #32
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d003      	beq.n	800af76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 fc07 	bl	800b782 <UART_Receive_IT>
      return;
 800af74:	e256      	b.n	800b424 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800af76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	f000 80de 	beq.w	800b13c <HAL_UART_IRQHandler+0x22c>
 800af80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af84:	f003 0301 	and.w	r3, r3, #1
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d106      	bne.n	800af9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800af8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800af94:	2b00      	cmp	r3, #0
 800af96:	f000 80d1 	beq.w	800b13c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800af9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af9e:	f003 0301 	and.w	r3, r3, #1
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d00b      	beq.n	800afbe <HAL_UART_IRQHandler+0xae>
 800afa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d005      	beq.n	800afbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb6:	f043 0201 	orr.w	r2, r3, #1
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800afbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afc2:	f003 0304 	and.w	r3, r3, #4
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d00b      	beq.n	800afe2 <HAL_UART_IRQHandler+0xd2>
 800afca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800afce:	f003 0301 	and.w	r3, r3, #1
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d005      	beq.n	800afe2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afda:	f043 0202 	orr.w	r2, r3, #2
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800afe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afe6:	f003 0302 	and.w	r3, r3, #2
 800afea:	2b00      	cmp	r3, #0
 800afec:	d00b      	beq.n	800b006 <HAL_UART_IRQHandler+0xf6>
 800afee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aff2:	f003 0301 	and.w	r3, r3, #1
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d005      	beq.n	800b006 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800affe:	f043 0204 	orr.w	r2, r3, #4
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b00a:	f003 0308 	and.w	r3, r3, #8
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d011      	beq.n	800b036 <HAL_UART_IRQHandler+0x126>
 800b012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b016:	f003 0320 	and.w	r3, r3, #32
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d105      	bne.n	800b02a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b01e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b022:	f003 0301 	and.w	r3, r3, #1
 800b026:	2b00      	cmp	r3, #0
 800b028:	d005      	beq.n	800b036 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b02e:	f043 0208 	orr.w	r2, r3, #8
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	f000 81ed 	beq.w	800b41a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b044:	f003 0320 	and.w	r3, r3, #32
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d008      	beq.n	800b05e <HAL_UART_IRQHandler+0x14e>
 800b04c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b050:	f003 0320 	and.w	r3, r3, #32
 800b054:	2b00      	cmp	r3, #0
 800b056:	d002      	beq.n	800b05e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 fb92 	bl	800b782 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	695b      	ldr	r3, [r3, #20]
 800b064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b068:	2b40      	cmp	r3, #64	; 0x40
 800b06a:	bf0c      	ite	eq
 800b06c:	2301      	moveq	r3, #1
 800b06e:	2300      	movne	r3, #0
 800b070:	b2db      	uxtb	r3, r3
 800b072:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b07a:	f003 0308 	and.w	r3, r3, #8
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d103      	bne.n	800b08a <HAL_UART_IRQHandler+0x17a>
 800b082:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b086:	2b00      	cmp	r3, #0
 800b088:	d04f      	beq.n	800b12a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 fa9a 	bl	800b5c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	695b      	ldr	r3, [r3, #20]
 800b096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b09a:	2b40      	cmp	r3, #64	; 0x40
 800b09c:	d141      	bne.n	800b122 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	3314      	adds	r3, #20
 800b0a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b0ac:	e853 3f00 	ldrex	r3, [r3]
 800b0b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b0b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b0b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	3314      	adds	r3, #20
 800b0c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b0ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b0ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b0d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b0da:	e841 2300 	strex	r3, r2, [r1]
 800b0de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b0e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d1d9      	bne.n	800b09e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d013      	beq.n	800b11a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0f6:	4a7d      	ldr	r2, [pc, #500]	; (800b2ec <HAL_UART_IRQHandler+0x3dc>)
 800b0f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7fc f900 	bl	8007304 <HAL_DMA_Abort_IT>
 800b104:	4603      	mov	r3, r0
 800b106:	2b00      	cmp	r3, #0
 800b108:	d016      	beq.n	800b138 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b10e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b114:	4610      	mov	r0, r2
 800b116:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b118:	e00e      	b.n	800b138 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 f990 	bl	800b440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b120:	e00a      	b.n	800b138 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 f98c 	bl	800b440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b128:	e006      	b.n	800b138 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 f988 	bl	800b440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b136:	e170      	b.n	800b41a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b138:	bf00      	nop
    return;
 800b13a:	e16e      	b.n	800b41a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b140:	2b01      	cmp	r3, #1
 800b142:	f040 814a 	bne.w	800b3da <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b14a:	f003 0310 	and.w	r3, r3, #16
 800b14e:	2b00      	cmp	r3, #0
 800b150:	f000 8143 	beq.w	800b3da <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b158:	f003 0310 	and.w	r3, r3, #16
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	f000 813c 	beq.w	800b3da <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b162:	2300      	movs	r3, #0
 800b164:	60bb      	str	r3, [r7, #8]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	60bb      	str	r3, [r7, #8]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	60bb      	str	r3, [r7, #8]
 800b176:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	695b      	ldr	r3, [r3, #20]
 800b17e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b182:	2b40      	cmp	r3, #64	; 0x40
 800b184:	f040 80b4 	bne.w	800b2f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b194:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b198:	2b00      	cmp	r3, #0
 800b19a:	f000 8140 	beq.w	800b41e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b1a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	f080 8139 	bcs.w	800b41e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b1b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1b8:	69db      	ldr	r3, [r3, #28]
 800b1ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1be:	f000 8088 	beq.w	800b2d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	330c      	adds	r3, #12
 800b1c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b1d0:	e853 3f00 	ldrex	r3, [r3]
 800b1d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b1d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b1dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	330c      	adds	r3, #12
 800b1ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b1ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b1f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b1fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b1fe:	e841 2300 	strex	r3, r2, [r1]
 800b202:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b206:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d1d9      	bne.n	800b1c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	3314      	adds	r3, #20
 800b214:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b218:	e853 3f00 	ldrex	r3, [r3]
 800b21c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b21e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b220:	f023 0301 	bic.w	r3, r3, #1
 800b224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	3314      	adds	r3, #20
 800b22e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b232:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b236:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b238:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b23a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b23e:	e841 2300 	strex	r3, r2, [r1]
 800b242:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b244:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b246:	2b00      	cmp	r3, #0
 800b248:	d1e1      	bne.n	800b20e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	3314      	adds	r3, #20
 800b250:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b252:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b254:	e853 3f00 	ldrex	r3, [r3]
 800b258:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b25a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b25c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b260:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	3314      	adds	r3, #20
 800b26a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b26e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b270:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b272:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b274:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b276:	e841 2300 	strex	r3, r2, [r1]
 800b27a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b27c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d1e3      	bne.n	800b24a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2220      	movs	r2, #32
 800b286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2200      	movs	r2, #0
 800b28e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	330c      	adds	r3, #12
 800b296:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b29a:	e853 3f00 	ldrex	r3, [r3]
 800b29e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b2a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2a2:	f023 0310 	bic.w	r3, r3, #16
 800b2a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	330c      	adds	r3, #12
 800b2b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b2b4:	65ba      	str	r2, [r7, #88]	; 0x58
 800b2b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b2ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b2bc:	e841 2300 	strex	r3, r2, [r1]
 800b2c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b2c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d1e3      	bne.n	800b290 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f7fb ffa9 	bl	8007224 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	1ad3      	subs	r3, r2, r3
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 f8b6 	bl	800b454 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b2e8:	e099      	b.n	800b41e <HAL_UART_IRQHandler+0x50e>
 800b2ea:	bf00      	nop
 800b2ec:	0800b68b 	.word	0x0800b68b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	1ad3      	subs	r3, r2, r3
 800b2fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b304:	b29b      	uxth	r3, r3
 800b306:	2b00      	cmp	r3, #0
 800b308:	f000 808b 	beq.w	800b422 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b30c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b310:	2b00      	cmp	r3, #0
 800b312:	f000 8086 	beq.w	800b422 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	330c      	adds	r3, #12
 800b31c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b320:	e853 3f00 	ldrex	r3, [r3]
 800b324:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b328:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b32c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	330c      	adds	r3, #12
 800b336:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b33a:	647a      	str	r2, [r7, #68]	; 0x44
 800b33c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b33e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b340:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b342:	e841 2300 	strex	r3, r2, [r1]
 800b346:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d1e3      	bne.n	800b316 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	3314      	adds	r3, #20
 800b354:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b358:	e853 3f00 	ldrex	r3, [r3]
 800b35c:	623b      	str	r3, [r7, #32]
   return(result);
 800b35e:	6a3b      	ldr	r3, [r7, #32]
 800b360:	f023 0301 	bic.w	r3, r3, #1
 800b364:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	3314      	adds	r3, #20
 800b36e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b372:	633a      	str	r2, [r7, #48]	; 0x30
 800b374:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b376:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b37a:	e841 2300 	strex	r3, r2, [r1]
 800b37e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1e3      	bne.n	800b34e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2220      	movs	r2, #32
 800b38a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2200      	movs	r2, #0
 800b392:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	330c      	adds	r3, #12
 800b39a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	e853 3f00 	ldrex	r3, [r3]
 800b3a2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f023 0310 	bic.w	r3, r3, #16
 800b3aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	330c      	adds	r3, #12
 800b3b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b3b8:	61fa      	str	r2, [r7, #28]
 800b3ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3bc:	69b9      	ldr	r1, [r7, #24]
 800b3be:	69fa      	ldr	r2, [r7, #28]
 800b3c0:	e841 2300 	strex	r3, r2, [r1]
 800b3c4:	617b      	str	r3, [r7, #20]
   return(result);
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d1e3      	bne.n	800b394 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b3cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 f83e 	bl	800b454 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b3d8:	e023      	b.n	800b422 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b3da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d009      	beq.n	800b3fa <HAL_UART_IRQHandler+0x4ea>
 800b3e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d003      	beq.n	800b3fa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 f95d 	bl	800b6b2 <UART_Transmit_IT>
    return;
 800b3f8:	e014      	b.n	800b424 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b3fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b402:	2b00      	cmp	r3, #0
 800b404:	d00e      	beq.n	800b424 <HAL_UART_IRQHandler+0x514>
 800b406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b40a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d008      	beq.n	800b424 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 f99d 	bl	800b752 <UART_EndTransmit_IT>
    return;
 800b418:	e004      	b.n	800b424 <HAL_UART_IRQHandler+0x514>
    return;
 800b41a:	bf00      	nop
 800b41c:	e002      	b.n	800b424 <HAL_UART_IRQHandler+0x514>
      return;
 800b41e:	bf00      	nop
 800b420:	e000      	b.n	800b424 <HAL_UART_IRQHandler+0x514>
      return;
 800b422:	bf00      	nop
  }
}
 800b424:	37e8      	adds	r7, #232	; 0xe8
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop

0800b42c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b434:	bf00      	nop
 800b436:	370c      	adds	r7, #12
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b440:	b480      	push	{r7}
 800b442:	b083      	sub	sp, #12
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b448:	bf00      	nop
 800b44a:	370c      	adds	r7, #12
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b454:	b480      	push	{r7}
 800b456:	b083      	sub	sp, #12
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	460b      	mov	r3, r1
 800b45e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b460:	bf00      	nop
 800b462:	370c      	adds	r7, #12
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr

0800b46c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b090      	sub	sp, #64	; 0x40
 800b470:	af00      	add	r7, sp, #0
 800b472:	60f8      	str	r0, [r7, #12]
 800b474:	60b9      	str	r1, [r7, #8]
 800b476:	603b      	str	r3, [r7, #0]
 800b478:	4613      	mov	r3, r2
 800b47a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b47c:	e050      	b.n	800b520 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b47e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b480:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b484:	d04c      	beq.n	800b520 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d007      	beq.n	800b49c <UART_WaitOnFlagUntilTimeout+0x30>
 800b48c:	f7fa fcfe 	bl	8005e8c <HAL_GetTick>
 800b490:	4602      	mov	r2, r0
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	1ad3      	subs	r3, r2, r3
 800b496:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b498:	429a      	cmp	r2, r3
 800b49a:	d241      	bcs.n	800b520 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	330c      	adds	r3, #12
 800b4a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a6:	e853 3f00 	ldrex	r3, [r3]
 800b4aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b4b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	330c      	adds	r3, #12
 800b4ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b4bc:	637a      	str	r2, [r7, #52]	; 0x34
 800b4be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b4c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4c4:	e841 2300 	strex	r3, r2, [r1]
 800b4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d1e5      	bne.n	800b49c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	3314      	adds	r3, #20
 800b4d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	e853 3f00 	ldrex	r3, [r3]
 800b4de:	613b      	str	r3, [r7, #16]
   return(result);
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	f023 0301 	bic.w	r3, r3, #1
 800b4e6:	63bb      	str	r3, [r7, #56]	; 0x38
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	3314      	adds	r3, #20
 800b4ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4f0:	623a      	str	r2, [r7, #32]
 800b4f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4f4:	69f9      	ldr	r1, [r7, #28]
 800b4f6:	6a3a      	ldr	r2, [r7, #32]
 800b4f8:	e841 2300 	strex	r3, r2, [r1]
 800b4fc:	61bb      	str	r3, [r7, #24]
   return(result);
 800b4fe:	69bb      	ldr	r3, [r7, #24]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d1e5      	bne.n	800b4d0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2220      	movs	r2, #32
 800b508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2220      	movs	r2, #32
 800b510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2200      	movs	r2, #0
 800b518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b51c:	2303      	movs	r3, #3
 800b51e:	e00f      	b.n	800b540 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	681a      	ldr	r2, [r3, #0]
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	4013      	ands	r3, r2
 800b52a:	68ba      	ldr	r2, [r7, #8]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	bf0c      	ite	eq
 800b530:	2301      	moveq	r3, #1
 800b532:	2300      	movne	r3, #0
 800b534:	b2db      	uxtb	r3, r3
 800b536:	461a      	mov	r2, r3
 800b538:	79fb      	ldrb	r3, [r7, #7]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d09f      	beq.n	800b47e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b53e:	2300      	movs	r3, #0
}
 800b540:	4618      	mov	r0, r3
 800b542:	3740      	adds	r7, #64	; 0x40
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b548:	b480      	push	{r7}
 800b54a:	b085      	sub	sp, #20
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	60b9      	str	r1, [r7, #8]
 800b552:	4613      	mov	r3, r2
 800b554:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	68ba      	ldr	r2, [r7, #8]
 800b55a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	88fa      	ldrh	r2, [r7, #6]
 800b560:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	88fa      	ldrh	r2, [r7, #6]
 800b566:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2200      	movs	r2, #0
 800b56c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2222      	movs	r2, #34	; 0x22
 800b572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2200      	movs	r2, #0
 800b57a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	691b      	ldr	r3, [r3, #16]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d007      	beq.n	800b596 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	68da      	ldr	r2, [r3, #12]
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b594:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	695a      	ldr	r2, [r3, #20]
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f042 0201 	orr.w	r2, r2, #1
 800b5a4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	68da      	ldr	r2, [r3, #12]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f042 0220 	orr.w	r2, r2, #32
 800b5b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b5b6:	2300      	movs	r3, #0
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3714      	adds	r7, #20
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr

0800b5c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b095      	sub	sp, #84	; 0x54
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	330c      	adds	r3, #12
 800b5d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5d6:	e853 3f00 	ldrex	r3, [r3]
 800b5da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b5e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	330c      	adds	r3, #12
 800b5ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b5ec:	643a      	str	r2, [r7, #64]	; 0x40
 800b5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b5f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b5f4:	e841 2300 	strex	r3, r2, [r1]
 800b5f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d1e5      	bne.n	800b5cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	3314      	adds	r3, #20
 800b606:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b608:	6a3b      	ldr	r3, [r7, #32]
 800b60a:	e853 3f00 	ldrex	r3, [r3]
 800b60e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b610:	69fb      	ldr	r3, [r7, #28]
 800b612:	f023 0301 	bic.w	r3, r3, #1
 800b616:	64bb      	str	r3, [r7, #72]	; 0x48
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	3314      	adds	r3, #20
 800b61e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b620:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b628:	e841 2300 	strex	r3, r2, [r1]
 800b62c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b630:	2b00      	cmp	r3, #0
 800b632:	d1e5      	bne.n	800b600 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b638:	2b01      	cmp	r3, #1
 800b63a:	d119      	bne.n	800b670 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	330c      	adds	r3, #12
 800b642:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	e853 3f00 	ldrex	r3, [r3]
 800b64a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	f023 0310 	bic.w	r3, r3, #16
 800b652:	647b      	str	r3, [r7, #68]	; 0x44
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	330c      	adds	r3, #12
 800b65a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b65c:	61ba      	str	r2, [r7, #24]
 800b65e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b660:	6979      	ldr	r1, [r7, #20]
 800b662:	69ba      	ldr	r2, [r7, #24]
 800b664:	e841 2300 	strex	r3, r2, [r1]
 800b668:	613b      	str	r3, [r7, #16]
   return(result);
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d1e5      	bne.n	800b63c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2220      	movs	r2, #32
 800b674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2200      	movs	r2, #0
 800b67c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b67e:	bf00      	nop
 800b680:	3754      	adds	r7, #84	; 0x54
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr

0800b68a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b68a:	b580      	push	{r7, lr}
 800b68c:	b084      	sub	sp, #16
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b696:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2200      	movs	r2, #0
 800b69c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b6a4:	68f8      	ldr	r0, [r7, #12]
 800b6a6:	f7ff fecb 	bl	800b440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6aa:	bf00      	nop
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}

0800b6b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b6b2:	b480      	push	{r7}
 800b6b4:	b085      	sub	sp, #20
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	2b21      	cmp	r3, #33	; 0x21
 800b6c4:	d13e      	bne.n	800b744 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	689b      	ldr	r3, [r3, #8]
 800b6ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6ce:	d114      	bne.n	800b6fa <UART_Transmit_IT+0x48>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	691b      	ldr	r3, [r3, #16]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d110      	bne.n	800b6fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6a1b      	ldr	r3, [r3, #32]
 800b6dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	881b      	ldrh	r3, [r3, #0]
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b6ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6a1b      	ldr	r3, [r3, #32]
 800b6f2:	1c9a      	adds	r2, r3, #2
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	621a      	str	r2, [r3, #32]
 800b6f8:	e008      	b.n	800b70c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6a1b      	ldr	r3, [r3, #32]
 800b6fe:	1c59      	adds	r1, r3, #1
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	6211      	str	r1, [r2, #32]
 800b704:	781a      	ldrb	r2, [r3, #0]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b710:	b29b      	uxth	r3, r3
 800b712:	3b01      	subs	r3, #1
 800b714:	b29b      	uxth	r3, r3
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	4619      	mov	r1, r3
 800b71a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d10f      	bne.n	800b740 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	68da      	ldr	r2, [r3, #12]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b72e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	68da      	ldr	r2, [r3, #12]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b73e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b740:	2300      	movs	r3, #0
 800b742:	e000      	b.n	800b746 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b744:	2302      	movs	r3, #2
  }
}
 800b746:	4618      	mov	r0, r3
 800b748:	3714      	adds	r7, #20
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr

0800b752 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b752:	b580      	push	{r7, lr}
 800b754:	b082      	sub	sp, #8
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	68da      	ldr	r2, [r3, #12]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b768:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2220      	movs	r2, #32
 800b76e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f7ff fe5a 	bl	800b42c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b778:	2300      	movs	r3, #0
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3708      	adds	r7, #8
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}

0800b782 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b782:	b580      	push	{r7, lr}
 800b784:	b08c      	sub	sp, #48	; 0x30
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b790:	b2db      	uxtb	r3, r3
 800b792:	2b22      	cmp	r3, #34	; 0x22
 800b794:	f040 80ab 	bne.w	800b8ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7a0:	d117      	bne.n	800b7d2 <UART_Receive_IT+0x50>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	691b      	ldr	r3, [r3, #16]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d113      	bne.n	800b7d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	b29b      	uxth	r3, r3
 800b7bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7c0:	b29a      	uxth	r2, r3
 800b7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ca:	1c9a      	adds	r2, r3, #2
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	629a      	str	r2, [r3, #40]	; 0x28
 800b7d0:	e026      	b.n	800b820 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	689b      	ldr	r3, [r3, #8]
 800b7e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7e4:	d007      	beq.n	800b7f6 <UART_Receive_IT+0x74>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d10a      	bne.n	800b804 <UART_Receive_IT+0x82>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d106      	bne.n	800b804 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	b2da      	uxtb	r2, r3
 800b7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b800:	701a      	strb	r2, [r3, #0]
 800b802:	e008      	b.n	800b816 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b810:	b2da      	uxtb	r2, r3
 800b812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b814:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b81a:	1c5a      	adds	r2, r3, #1
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b824:	b29b      	uxth	r3, r3
 800b826:	3b01      	subs	r3, #1
 800b828:	b29b      	uxth	r3, r3
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	4619      	mov	r1, r3
 800b82e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b830:	2b00      	cmp	r3, #0
 800b832:	d15a      	bne.n	800b8ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	68da      	ldr	r2, [r3, #12]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f022 0220 	bic.w	r2, r2, #32
 800b842:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	68da      	ldr	r2, [r3, #12]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b852:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	695a      	ldr	r2, [r3, #20]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f022 0201 	bic.w	r2, r2, #1
 800b862:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2220      	movs	r2, #32
 800b868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b870:	2b01      	cmp	r3, #1
 800b872:	d135      	bne.n	800b8e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2200      	movs	r2, #0
 800b878:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	330c      	adds	r3, #12
 800b880:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	e853 3f00 	ldrex	r3, [r3]
 800b888:	613b      	str	r3, [r7, #16]
   return(result);
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	f023 0310 	bic.w	r3, r3, #16
 800b890:	627b      	str	r3, [r7, #36]	; 0x24
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	330c      	adds	r3, #12
 800b898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b89a:	623a      	str	r2, [r7, #32]
 800b89c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b89e:	69f9      	ldr	r1, [r7, #28]
 800b8a0:	6a3a      	ldr	r2, [r7, #32]
 800b8a2:	e841 2300 	strex	r3, r2, [r1]
 800b8a6:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d1e5      	bne.n	800b87a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f003 0310 	and.w	r3, r3, #16
 800b8b8:	2b10      	cmp	r3, #16
 800b8ba:	d10a      	bne.n	800b8d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b8bc:	2300      	movs	r3, #0
 800b8be:	60fb      	str	r3, [r7, #12]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	60fb      	str	r3, [r7, #12]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	685b      	ldr	r3, [r3, #4]
 800b8ce:	60fb      	str	r3, [r7, #12]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f7ff fdbb 	bl	800b454 <HAL_UARTEx_RxEventCallback>
 800b8de:	e002      	b.n	800b8e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f7f7 feef 	bl	80036c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	e002      	b.n	800b8f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	e000      	b.n	800b8f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b8ee:	2302      	movs	r3, #2
  }
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3730      	adds	r7, #48	; 0x30
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b8f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b8fc:	b0c0      	sub	sp, #256	; 0x100
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	691b      	ldr	r3, [r3, #16]
 800b90c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b914:	68d9      	ldr	r1, [r3, #12]
 800b916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b91a:	681a      	ldr	r2, [r3, #0]
 800b91c:	ea40 0301 	orr.w	r3, r0, r1
 800b920:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b926:	689a      	ldr	r2, [r3, #8]
 800b928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b92c:	691b      	ldr	r3, [r3, #16]
 800b92e:	431a      	orrs	r2, r3
 800b930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b934:	695b      	ldr	r3, [r3, #20]
 800b936:	431a      	orrs	r2, r3
 800b938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b93c:	69db      	ldr	r3, [r3, #28]
 800b93e:	4313      	orrs	r3, r2
 800b940:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	68db      	ldr	r3, [r3, #12]
 800b94c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b950:	f021 010c 	bic.w	r1, r1, #12
 800b954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b958:	681a      	ldr	r2, [r3, #0]
 800b95a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b95e:	430b      	orrs	r3, r1
 800b960:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	695b      	ldr	r3, [r3, #20]
 800b96a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b96e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b972:	6999      	ldr	r1, [r3, #24]
 800b974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	ea40 0301 	orr.w	r3, r0, r1
 800b97e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b984:	681a      	ldr	r2, [r3, #0]
 800b986:	4b8f      	ldr	r3, [pc, #572]	; (800bbc4 <UART_SetConfig+0x2cc>)
 800b988:	429a      	cmp	r2, r3
 800b98a:	d005      	beq.n	800b998 <UART_SetConfig+0xa0>
 800b98c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b990:	681a      	ldr	r2, [r3, #0]
 800b992:	4b8d      	ldr	r3, [pc, #564]	; (800bbc8 <UART_SetConfig+0x2d0>)
 800b994:	429a      	cmp	r2, r3
 800b996:	d104      	bne.n	800b9a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b998:	f7fe fbca 	bl	800a130 <HAL_RCC_GetPCLK2Freq>
 800b99c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b9a0:	e003      	b.n	800b9aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b9a2:	f7fe fbb1 	bl	800a108 <HAL_RCC_GetPCLK1Freq>
 800b9a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b9aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9ae:	69db      	ldr	r3, [r3, #28]
 800b9b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9b4:	f040 810c 	bne.w	800bbd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b9b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b9bc:	2200      	movs	r2, #0
 800b9be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b9c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b9c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b9ca:	4622      	mov	r2, r4
 800b9cc:	462b      	mov	r3, r5
 800b9ce:	1891      	adds	r1, r2, r2
 800b9d0:	65b9      	str	r1, [r7, #88]	; 0x58
 800b9d2:	415b      	adcs	r3, r3
 800b9d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b9d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b9da:	4621      	mov	r1, r4
 800b9dc:	eb12 0801 	adds.w	r8, r2, r1
 800b9e0:	4629      	mov	r1, r5
 800b9e2:	eb43 0901 	adc.w	r9, r3, r1
 800b9e6:	f04f 0200 	mov.w	r2, #0
 800b9ea:	f04f 0300 	mov.w	r3, #0
 800b9ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b9f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b9f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b9fa:	4690      	mov	r8, r2
 800b9fc:	4699      	mov	r9, r3
 800b9fe:	4623      	mov	r3, r4
 800ba00:	eb18 0303 	adds.w	r3, r8, r3
 800ba04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ba08:	462b      	mov	r3, r5
 800ba0a:	eb49 0303 	adc.w	r3, r9, r3
 800ba0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ba12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ba1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ba22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ba26:	460b      	mov	r3, r1
 800ba28:	18db      	adds	r3, r3, r3
 800ba2a:	653b      	str	r3, [r7, #80]	; 0x50
 800ba2c:	4613      	mov	r3, r2
 800ba2e:	eb42 0303 	adc.w	r3, r2, r3
 800ba32:	657b      	str	r3, [r7, #84]	; 0x54
 800ba34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ba38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ba3c:	f7f5 f8d4 	bl	8000be8 <__aeabi_uldivmod>
 800ba40:	4602      	mov	r2, r0
 800ba42:	460b      	mov	r3, r1
 800ba44:	4b61      	ldr	r3, [pc, #388]	; (800bbcc <UART_SetConfig+0x2d4>)
 800ba46:	fba3 2302 	umull	r2, r3, r3, r2
 800ba4a:	095b      	lsrs	r3, r3, #5
 800ba4c:	011c      	lsls	r4, r3, #4
 800ba4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba52:	2200      	movs	r2, #0
 800ba54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ba58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ba5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ba60:	4642      	mov	r2, r8
 800ba62:	464b      	mov	r3, r9
 800ba64:	1891      	adds	r1, r2, r2
 800ba66:	64b9      	str	r1, [r7, #72]	; 0x48
 800ba68:	415b      	adcs	r3, r3
 800ba6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ba70:	4641      	mov	r1, r8
 800ba72:	eb12 0a01 	adds.w	sl, r2, r1
 800ba76:	4649      	mov	r1, r9
 800ba78:	eb43 0b01 	adc.w	fp, r3, r1
 800ba7c:	f04f 0200 	mov.w	r2, #0
 800ba80:	f04f 0300 	mov.w	r3, #0
 800ba84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ba88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ba8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ba90:	4692      	mov	sl, r2
 800ba92:	469b      	mov	fp, r3
 800ba94:	4643      	mov	r3, r8
 800ba96:	eb1a 0303 	adds.w	r3, sl, r3
 800ba9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ba9e:	464b      	mov	r3, r9
 800baa0:	eb4b 0303 	adc.w	r3, fp, r3
 800baa4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800baa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bab4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bab8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800babc:	460b      	mov	r3, r1
 800babe:	18db      	adds	r3, r3, r3
 800bac0:	643b      	str	r3, [r7, #64]	; 0x40
 800bac2:	4613      	mov	r3, r2
 800bac4:	eb42 0303 	adc.w	r3, r2, r3
 800bac8:	647b      	str	r3, [r7, #68]	; 0x44
 800baca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bace:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bad2:	f7f5 f889 	bl	8000be8 <__aeabi_uldivmod>
 800bad6:	4602      	mov	r2, r0
 800bad8:	460b      	mov	r3, r1
 800bada:	4611      	mov	r1, r2
 800badc:	4b3b      	ldr	r3, [pc, #236]	; (800bbcc <UART_SetConfig+0x2d4>)
 800bade:	fba3 2301 	umull	r2, r3, r3, r1
 800bae2:	095b      	lsrs	r3, r3, #5
 800bae4:	2264      	movs	r2, #100	; 0x64
 800bae6:	fb02 f303 	mul.w	r3, r2, r3
 800baea:	1acb      	subs	r3, r1, r3
 800baec:	00db      	lsls	r3, r3, #3
 800baee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800baf2:	4b36      	ldr	r3, [pc, #216]	; (800bbcc <UART_SetConfig+0x2d4>)
 800baf4:	fba3 2302 	umull	r2, r3, r3, r2
 800baf8:	095b      	lsrs	r3, r3, #5
 800bafa:	005b      	lsls	r3, r3, #1
 800bafc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bb00:	441c      	add	r4, r3
 800bb02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb06:	2200      	movs	r2, #0
 800bb08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bb0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bb10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bb14:	4642      	mov	r2, r8
 800bb16:	464b      	mov	r3, r9
 800bb18:	1891      	adds	r1, r2, r2
 800bb1a:	63b9      	str	r1, [r7, #56]	; 0x38
 800bb1c:	415b      	adcs	r3, r3
 800bb1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bb24:	4641      	mov	r1, r8
 800bb26:	1851      	adds	r1, r2, r1
 800bb28:	6339      	str	r1, [r7, #48]	; 0x30
 800bb2a:	4649      	mov	r1, r9
 800bb2c:	414b      	adcs	r3, r1
 800bb2e:	637b      	str	r3, [r7, #52]	; 0x34
 800bb30:	f04f 0200 	mov.w	r2, #0
 800bb34:	f04f 0300 	mov.w	r3, #0
 800bb38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bb3c:	4659      	mov	r1, fp
 800bb3e:	00cb      	lsls	r3, r1, #3
 800bb40:	4651      	mov	r1, sl
 800bb42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bb46:	4651      	mov	r1, sl
 800bb48:	00ca      	lsls	r2, r1, #3
 800bb4a:	4610      	mov	r0, r2
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	4603      	mov	r3, r0
 800bb50:	4642      	mov	r2, r8
 800bb52:	189b      	adds	r3, r3, r2
 800bb54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bb58:	464b      	mov	r3, r9
 800bb5a:	460a      	mov	r2, r1
 800bb5c:	eb42 0303 	adc.w	r3, r2, r3
 800bb60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bb64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bb70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bb74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bb78:	460b      	mov	r3, r1
 800bb7a:	18db      	adds	r3, r3, r3
 800bb7c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb7e:	4613      	mov	r3, r2
 800bb80:	eb42 0303 	adc.w	r3, r2, r3
 800bb84:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bb8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bb8e:	f7f5 f82b 	bl	8000be8 <__aeabi_uldivmod>
 800bb92:	4602      	mov	r2, r0
 800bb94:	460b      	mov	r3, r1
 800bb96:	4b0d      	ldr	r3, [pc, #52]	; (800bbcc <UART_SetConfig+0x2d4>)
 800bb98:	fba3 1302 	umull	r1, r3, r3, r2
 800bb9c:	095b      	lsrs	r3, r3, #5
 800bb9e:	2164      	movs	r1, #100	; 0x64
 800bba0:	fb01 f303 	mul.w	r3, r1, r3
 800bba4:	1ad3      	subs	r3, r2, r3
 800bba6:	00db      	lsls	r3, r3, #3
 800bba8:	3332      	adds	r3, #50	; 0x32
 800bbaa:	4a08      	ldr	r2, [pc, #32]	; (800bbcc <UART_SetConfig+0x2d4>)
 800bbac:	fba2 2303 	umull	r2, r3, r2, r3
 800bbb0:	095b      	lsrs	r3, r3, #5
 800bbb2:	f003 0207 	and.w	r2, r3, #7
 800bbb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4422      	add	r2, r4
 800bbbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bbc0:	e106      	b.n	800bdd0 <UART_SetConfig+0x4d8>
 800bbc2:	bf00      	nop
 800bbc4:	40011000 	.word	0x40011000
 800bbc8:	40011400 	.word	0x40011400
 800bbcc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bbd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bbda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bbde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bbe2:	4642      	mov	r2, r8
 800bbe4:	464b      	mov	r3, r9
 800bbe6:	1891      	adds	r1, r2, r2
 800bbe8:	6239      	str	r1, [r7, #32]
 800bbea:	415b      	adcs	r3, r3
 800bbec:	627b      	str	r3, [r7, #36]	; 0x24
 800bbee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bbf2:	4641      	mov	r1, r8
 800bbf4:	1854      	adds	r4, r2, r1
 800bbf6:	4649      	mov	r1, r9
 800bbf8:	eb43 0501 	adc.w	r5, r3, r1
 800bbfc:	f04f 0200 	mov.w	r2, #0
 800bc00:	f04f 0300 	mov.w	r3, #0
 800bc04:	00eb      	lsls	r3, r5, #3
 800bc06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bc0a:	00e2      	lsls	r2, r4, #3
 800bc0c:	4614      	mov	r4, r2
 800bc0e:	461d      	mov	r5, r3
 800bc10:	4643      	mov	r3, r8
 800bc12:	18e3      	adds	r3, r4, r3
 800bc14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bc18:	464b      	mov	r3, r9
 800bc1a:	eb45 0303 	adc.w	r3, r5, r3
 800bc1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bc22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bc2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bc32:	f04f 0200 	mov.w	r2, #0
 800bc36:	f04f 0300 	mov.w	r3, #0
 800bc3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bc3e:	4629      	mov	r1, r5
 800bc40:	008b      	lsls	r3, r1, #2
 800bc42:	4621      	mov	r1, r4
 800bc44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc48:	4621      	mov	r1, r4
 800bc4a:	008a      	lsls	r2, r1, #2
 800bc4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bc50:	f7f4 ffca 	bl	8000be8 <__aeabi_uldivmod>
 800bc54:	4602      	mov	r2, r0
 800bc56:	460b      	mov	r3, r1
 800bc58:	4b60      	ldr	r3, [pc, #384]	; (800bddc <UART_SetConfig+0x4e4>)
 800bc5a:	fba3 2302 	umull	r2, r3, r3, r2
 800bc5e:	095b      	lsrs	r3, r3, #5
 800bc60:	011c      	lsls	r4, r3, #4
 800bc62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc66:	2200      	movs	r2, #0
 800bc68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bc6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bc70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bc74:	4642      	mov	r2, r8
 800bc76:	464b      	mov	r3, r9
 800bc78:	1891      	adds	r1, r2, r2
 800bc7a:	61b9      	str	r1, [r7, #24]
 800bc7c:	415b      	adcs	r3, r3
 800bc7e:	61fb      	str	r3, [r7, #28]
 800bc80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bc84:	4641      	mov	r1, r8
 800bc86:	1851      	adds	r1, r2, r1
 800bc88:	6139      	str	r1, [r7, #16]
 800bc8a:	4649      	mov	r1, r9
 800bc8c:	414b      	adcs	r3, r1
 800bc8e:	617b      	str	r3, [r7, #20]
 800bc90:	f04f 0200 	mov.w	r2, #0
 800bc94:	f04f 0300 	mov.w	r3, #0
 800bc98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bc9c:	4659      	mov	r1, fp
 800bc9e:	00cb      	lsls	r3, r1, #3
 800bca0:	4651      	mov	r1, sl
 800bca2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bca6:	4651      	mov	r1, sl
 800bca8:	00ca      	lsls	r2, r1, #3
 800bcaa:	4610      	mov	r0, r2
 800bcac:	4619      	mov	r1, r3
 800bcae:	4603      	mov	r3, r0
 800bcb0:	4642      	mov	r2, r8
 800bcb2:	189b      	adds	r3, r3, r2
 800bcb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bcb8:	464b      	mov	r3, r9
 800bcba:	460a      	mov	r2, r1
 800bcbc:	eb42 0303 	adc.w	r3, r2, r3
 800bcc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bcc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcc8:	685b      	ldr	r3, [r3, #4]
 800bcca:	2200      	movs	r2, #0
 800bccc:	67bb      	str	r3, [r7, #120]	; 0x78
 800bcce:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bcd0:	f04f 0200 	mov.w	r2, #0
 800bcd4:	f04f 0300 	mov.w	r3, #0
 800bcd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bcdc:	4649      	mov	r1, r9
 800bcde:	008b      	lsls	r3, r1, #2
 800bce0:	4641      	mov	r1, r8
 800bce2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bce6:	4641      	mov	r1, r8
 800bce8:	008a      	lsls	r2, r1, #2
 800bcea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bcee:	f7f4 ff7b 	bl	8000be8 <__aeabi_uldivmod>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	4611      	mov	r1, r2
 800bcf8:	4b38      	ldr	r3, [pc, #224]	; (800bddc <UART_SetConfig+0x4e4>)
 800bcfa:	fba3 2301 	umull	r2, r3, r3, r1
 800bcfe:	095b      	lsrs	r3, r3, #5
 800bd00:	2264      	movs	r2, #100	; 0x64
 800bd02:	fb02 f303 	mul.w	r3, r2, r3
 800bd06:	1acb      	subs	r3, r1, r3
 800bd08:	011b      	lsls	r3, r3, #4
 800bd0a:	3332      	adds	r3, #50	; 0x32
 800bd0c:	4a33      	ldr	r2, [pc, #204]	; (800bddc <UART_SetConfig+0x4e4>)
 800bd0e:	fba2 2303 	umull	r2, r3, r2, r3
 800bd12:	095b      	lsrs	r3, r3, #5
 800bd14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd18:	441c      	add	r4, r3
 800bd1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd1e:	2200      	movs	r2, #0
 800bd20:	673b      	str	r3, [r7, #112]	; 0x70
 800bd22:	677a      	str	r2, [r7, #116]	; 0x74
 800bd24:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bd28:	4642      	mov	r2, r8
 800bd2a:	464b      	mov	r3, r9
 800bd2c:	1891      	adds	r1, r2, r2
 800bd2e:	60b9      	str	r1, [r7, #8]
 800bd30:	415b      	adcs	r3, r3
 800bd32:	60fb      	str	r3, [r7, #12]
 800bd34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bd38:	4641      	mov	r1, r8
 800bd3a:	1851      	adds	r1, r2, r1
 800bd3c:	6039      	str	r1, [r7, #0]
 800bd3e:	4649      	mov	r1, r9
 800bd40:	414b      	adcs	r3, r1
 800bd42:	607b      	str	r3, [r7, #4]
 800bd44:	f04f 0200 	mov.w	r2, #0
 800bd48:	f04f 0300 	mov.w	r3, #0
 800bd4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bd50:	4659      	mov	r1, fp
 800bd52:	00cb      	lsls	r3, r1, #3
 800bd54:	4651      	mov	r1, sl
 800bd56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bd5a:	4651      	mov	r1, sl
 800bd5c:	00ca      	lsls	r2, r1, #3
 800bd5e:	4610      	mov	r0, r2
 800bd60:	4619      	mov	r1, r3
 800bd62:	4603      	mov	r3, r0
 800bd64:	4642      	mov	r2, r8
 800bd66:	189b      	adds	r3, r3, r2
 800bd68:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd6a:	464b      	mov	r3, r9
 800bd6c:	460a      	mov	r2, r1
 800bd6e:	eb42 0303 	adc.w	r3, r2, r3
 800bd72:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	663b      	str	r3, [r7, #96]	; 0x60
 800bd7e:	667a      	str	r2, [r7, #100]	; 0x64
 800bd80:	f04f 0200 	mov.w	r2, #0
 800bd84:	f04f 0300 	mov.w	r3, #0
 800bd88:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bd8c:	4649      	mov	r1, r9
 800bd8e:	008b      	lsls	r3, r1, #2
 800bd90:	4641      	mov	r1, r8
 800bd92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bd96:	4641      	mov	r1, r8
 800bd98:	008a      	lsls	r2, r1, #2
 800bd9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bd9e:	f7f4 ff23 	bl	8000be8 <__aeabi_uldivmod>
 800bda2:	4602      	mov	r2, r0
 800bda4:	460b      	mov	r3, r1
 800bda6:	4b0d      	ldr	r3, [pc, #52]	; (800bddc <UART_SetConfig+0x4e4>)
 800bda8:	fba3 1302 	umull	r1, r3, r3, r2
 800bdac:	095b      	lsrs	r3, r3, #5
 800bdae:	2164      	movs	r1, #100	; 0x64
 800bdb0:	fb01 f303 	mul.w	r3, r1, r3
 800bdb4:	1ad3      	subs	r3, r2, r3
 800bdb6:	011b      	lsls	r3, r3, #4
 800bdb8:	3332      	adds	r3, #50	; 0x32
 800bdba:	4a08      	ldr	r2, [pc, #32]	; (800bddc <UART_SetConfig+0x4e4>)
 800bdbc:	fba2 2303 	umull	r2, r3, r2, r3
 800bdc0:	095b      	lsrs	r3, r3, #5
 800bdc2:	f003 020f 	and.w	r2, r3, #15
 800bdc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4422      	add	r2, r4
 800bdce:	609a      	str	r2, [r3, #8]
}
 800bdd0:	bf00      	nop
 800bdd2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bddc:	51eb851f 	.word	0x51eb851f

0800bde0 <__NVIC_SetPriority>:
{
 800bde0:	b480      	push	{r7}
 800bde2:	b083      	sub	sp, #12
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	4603      	mov	r3, r0
 800bde8:	6039      	str	r1, [r7, #0]
 800bdea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bdec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	db0a      	blt.n	800be0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	b2da      	uxtb	r2, r3
 800bdf8:	490c      	ldr	r1, [pc, #48]	; (800be2c <__NVIC_SetPriority+0x4c>)
 800bdfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdfe:	0112      	lsls	r2, r2, #4
 800be00:	b2d2      	uxtb	r2, r2
 800be02:	440b      	add	r3, r1
 800be04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800be08:	e00a      	b.n	800be20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	b2da      	uxtb	r2, r3
 800be0e:	4908      	ldr	r1, [pc, #32]	; (800be30 <__NVIC_SetPriority+0x50>)
 800be10:	79fb      	ldrb	r3, [r7, #7]
 800be12:	f003 030f 	and.w	r3, r3, #15
 800be16:	3b04      	subs	r3, #4
 800be18:	0112      	lsls	r2, r2, #4
 800be1a:	b2d2      	uxtb	r2, r2
 800be1c:	440b      	add	r3, r1
 800be1e:	761a      	strb	r2, [r3, #24]
}
 800be20:	bf00      	nop
 800be22:	370c      	adds	r7, #12
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr
 800be2c:	e000e100 	.word	0xe000e100
 800be30:	e000ed00 	.word	0xe000ed00

0800be34 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800be34:	b580      	push	{r7, lr}
 800be36:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800be38:	4b05      	ldr	r3, [pc, #20]	; (800be50 <SysTick_Handler+0x1c>)
 800be3a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800be3c:	f001 fd28 	bl	800d890 <xTaskGetSchedulerState>
 800be40:	4603      	mov	r3, r0
 800be42:	2b01      	cmp	r3, #1
 800be44:	d001      	beq.n	800be4a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800be46:	f002 fb0f 	bl	800e468 <xPortSysTickHandler>
  }
}
 800be4a:	bf00      	nop
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop
 800be50:	e000e010 	.word	0xe000e010

0800be54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800be54:	b580      	push	{r7, lr}
 800be56:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800be58:	2100      	movs	r1, #0
 800be5a:	f06f 0004 	mvn.w	r0, #4
 800be5e:	f7ff ffbf 	bl	800bde0 <__NVIC_SetPriority>
#endif
}
 800be62:	bf00      	nop
 800be64:	bd80      	pop	{r7, pc}
	...

0800be68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800be68:	b480      	push	{r7}
 800be6a:	b083      	sub	sp, #12
 800be6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be6e:	f3ef 8305 	mrs	r3, IPSR
 800be72:	603b      	str	r3, [r7, #0]
  return(result);
 800be74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800be76:	2b00      	cmp	r3, #0
 800be78:	d003      	beq.n	800be82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800be7a:	f06f 0305 	mvn.w	r3, #5
 800be7e:	607b      	str	r3, [r7, #4]
 800be80:	e00c      	b.n	800be9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800be82:	4b0a      	ldr	r3, [pc, #40]	; (800beac <osKernelInitialize+0x44>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d105      	bne.n	800be96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800be8a:	4b08      	ldr	r3, [pc, #32]	; (800beac <osKernelInitialize+0x44>)
 800be8c:	2201      	movs	r2, #1
 800be8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800be90:	2300      	movs	r3, #0
 800be92:	607b      	str	r3, [r7, #4]
 800be94:	e002      	b.n	800be9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800be96:	f04f 33ff 	mov.w	r3, #4294967295
 800be9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800be9c:	687b      	ldr	r3, [r7, #4]
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	370c      	adds	r7, #12
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr
 800beaa:	bf00      	nop
 800beac:	20000e54 	.word	0x20000e54

0800beb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b082      	sub	sp, #8
 800beb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800beb6:	f3ef 8305 	mrs	r3, IPSR
 800beba:	603b      	str	r3, [r7, #0]
  return(result);
 800bebc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d003      	beq.n	800beca <osKernelStart+0x1a>
    stat = osErrorISR;
 800bec2:	f06f 0305 	mvn.w	r3, #5
 800bec6:	607b      	str	r3, [r7, #4]
 800bec8:	e010      	b.n	800beec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800beca:	4b0b      	ldr	r3, [pc, #44]	; (800bef8 <osKernelStart+0x48>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2b01      	cmp	r3, #1
 800bed0:	d109      	bne.n	800bee6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bed2:	f7ff ffbf 	bl	800be54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bed6:	4b08      	ldr	r3, [pc, #32]	; (800bef8 <osKernelStart+0x48>)
 800bed8:	2202      	movs	r2, #2
 800beda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bedc:	f001 f87c 	bl	800cfd8 <vTaskStartScheduler>
      stat = osOK;
 800bee0:	2300      	movs	r3, #0
 800bee2:	607b      	str	r3, [r7, #4]
 800bee4:	e002      	b.n	800beec <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bee6:	f04f 33ff 	mov.w	r3, #4294967295
 800beea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800beec:	687b      	ldr	r3, [r7, #4]
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3708      	adds	r7, #8
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	20000e54 	.word	0x20000e54

0800befc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800befc:	b580      	push	{r7, lr}
 800befe:	b08e      	sub	sp, #56	; 0x38
 800bf00:	af04      	add	r7, sp, #16
 800bf02:	60f8      	str	r0, [r7, #12]
 800bf04:	60b9      	str	r1, [r7, #8]
 800bf06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf0c:	f3ef 8305 	mrs	r3, IPSR
 800bf10:	617b      	str	r3, [r7, #20]
  return(result);
 800bf12:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d17e      	bne.n	800c016 <osThreadNew+0x11a>
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d07b      	beq.n	800c016 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bf1e:	2380      	movs	r3, #128	; 0x80
 800bf20:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bf22:	2318      	movs	r3, #24
 800bf24:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bf26:	2300      	movs	r3, #0
 800bf28:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800bf2a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf2e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d045      	beq.n	800bfc2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d002      	beq.n	800bf44 <osThreadNew+0x48>
        name = attr->name;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	699b      	ldr	r3, [r3, #24]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d002      	beq.n	800bf52 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	699b      	ldr	r3, [r3, #24]
 800bf50:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bf52:	69fb      	ldr	r3, [r7, #28]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d008      	beq.n	800bf6a <osThreadNew+0x6e>
 800bf58:	69fb      	ldr	r3, [r7, #28]
 800bf5a:	2b38      	cmp	r3, #56	; 0x38
 800bf5c:	d805      	bhi.n	800bf6a <osThreadNew+0x6e>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	f003 0301 	and.w	r3, r3, #1
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d001      	beq.n	800bf6e <osThreadNew+0x72>
        return (NULL);
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	e054      	b.n	800c018 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	695b      	ldr	r3, [r3, #20]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d003      	beq.n	800bf7e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	695b      	ldr	r3, [r3, #20]
 800bf7a:	089b      	lsrs	r3, r3, #2
 800bf7c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d00e      	beq.n	800bfa4 <osThreadNew+0xa8>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	68db      	ldr	r3, [r3, #12]
 800bf8a:	2ba7      	cmp	r3, #167	; 0xa7
 800bf8c:	d90a      	bls.n	800bfa4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d006      	beq.n	800bfa4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	695b      	ldr	r3, [r3, #20]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d002      	beq.n	800bfa4 <osThreadNew+0xa8>
        mem = 1;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	61bb      	str	r3, [r7, #24]
 800bfa2:	e010      	b.n	800bfc6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	689b      	ldr	r3, [r3, #8]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d10c      	bne.n	800bfc6 <osThreadNew+0xca>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	68db      	ldr	r3, [r3, #12]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d108      	bne.n	800bfc6 <osThreadNew+0xca>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	691b      	ldr	r3, [r3, #16]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d104      	bne.n	800bfc6 <osThreadNew+0xca>
          mem = 0;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	61bb      	str	r3, [r7, #24]
 800bfc0:	e001      	b.n	800bfc6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bfc6:	69bb      	ldr	r3, [r7, #24]
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d110      	bne.n	800bfee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bfd4:	9202      	str	r2, [sp, #8]
 800bfd6:	9301      	str	r3, [sp, #4]
 800bfd8:	69fb      	ldr	r3, [r7, #28]
 800bfda:	9300      	str	r3, [sp, #0]
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	6a3a      	ldr	r2, [r7, #32]
 800bfe0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bfe2:	68f8      	ldr	r0, [r7, #12]
 800bfe4:	f000 fe0c 	bl	800cc00 <xTaskCreateStatic>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	613b      	str	r3, [r7, #16]
 800bfec:	e013      	b.n	800c016 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bfee:	69bb      	ldr	r3, [r7, #24]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d110      	bne.n	800c016 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bff4:	6a3b      	ldr	r3, [r7, #32]
 800bff6:	b29a      	uxth	r2, r3
 800bff8:	f107 0310 	add.w	r3, r7, #16
 800bffc:	9301      	str	r3, [sp, #4]
 800bffe:	69fb      	ldr	r3, [r7, #28]
 800c000:	9300      	str	r3, [sp, #0]
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c006:	68f8      	ldr	r0, [r7, #12]
 800c008:	f000 fe57 	bl	800ccba <xTaskCreate>
 800c00c:	4603      	mov	r3, r0
 800c00e:	2b01      	cmp	r3, #1
 800c010:	d001      	beq.n	800c016 <osThreadNew+0x11a>
            hTask = NULL;
 800c012:	2300      	movs	r3, #0
 800c014:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c016:	693b      	ldr	r3, [r7, #16]
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3728      	adds	r7, #40	; 0x28
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c020:	b580      	push	{r7, lr}
 800c022:	b084      	sub	sp, #16
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c028:	f3ef 8305 	mrs	r3, IPSR
 800c02c:	60bb      	str	r3, [r7, #8]
  return(result);
 800c02e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c030:	2b00      	cmp	r3, #0
 800c032:	d003      	beq.n	800c03c <osDelay+0x1c>
    stat = osErrorISR;
 800c034:	f06f 0305 	mvn.w	r3, #5
 800c038:	60fb      	str	r3, [r7, #12]
 800c03a:	e007      	b.n	800c04c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c03c:	2300      	movs	r3, #0
 800c03e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d002      	beq.n	800c04c <osDelay+0x2c>
      vTaskDelay(ticks);
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 ff92 	bl	800cf70 <vTaskDelay>
    }
  }

  return (stat);
 800c04c:	68fb      	ldr	r3, [r7, #12]
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3710      	adds	r7, #16
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
	...

0800c058 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c058:	b480      	push	{r7}
 800c05a:	b085      	sub	sp, #20
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	4a07      	ldr	r2, [pc, #28]	; (800c084 <vApplicationGetIdleTaskMemory+0x2c>)
 800c068:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	4a06      	ldr	r2, [pc, #24]	; (800c088 <vApplicationGetIdleTaskMemory+0x30>)
 800c06e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2280      	movs	r2, #128	; 0x80
 800c074:	601a      	str	r2, [r3, #0]
}
 800c076:	bf00      	nop
 800c078:	3714      	adds	r7, #20
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr
 800c082:	bf00      	nop
 800c084:	20000e58 	.word	0x20000e58
 800c088:	20000f00 	.word	0x20000f00

0800c08c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c08c:	b480      	push	{r7}
 800c08e:	b085      	sub	sp, #20
 800c090:	af00      	add	r7, sp, #0
 800c092:	60f8      	str	r0, [r7, #12]
 800c094:	60b9      	str	r1, [r7, #8]
 800c096:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	4a07      	ldr	r2, [pc, #28]	; (800c0b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800c09c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	4a06      	ldr	r2, [pc, #24]	; (800c0bc <vApplicationGetTimerTaskMemory+0x30>)
 800c0a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c0aa:	601a      	str	r2, [r3, #0]
}
 800c0ac:	bf00      	nop
 800c0ae:	3714      	adds	r7, #20
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr
 800c0b8:	20001100 	.word	0x20001100
 800c0bc:	200011a8 	.word	0x200011a8

0800c0c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f103 0208 	add.w	r2, r3, #8
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c0d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f103 0208 	add.w	r2, r3, #8
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f103 0208 	add.w	r2, r3, #8
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c0f4:	bf00      	nop
 800c0f6:	370c      	adds	r7, #12
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr

0800c100 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c100:	b480      	push	{r7}
 800c102:	b083      	sub	sp, #12
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2200      	movs	r2, #0
 800c10c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c10e:	bf00      	nop
 800c110:	370c      	adds	r7, #12
 800c112:	46bd      	mov	sp, r7
 800c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c118:	4770      	bx	lr

0800c11a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c11a:	b480      	push	{r7}
 800c11c:	b085      	sub	sp, #20
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
 800c122:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	685b      	ldr	r3, [r3, #4]
 800c128:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	68fa      	ldr	r2, [r7, #12]
 800c12e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	689a      	ldr	r2, [r3, #8]
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	683a      	ldr	r2, [r7, #0]
 800c13e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	683a      	ldr	r2, [r7, #0]
 800c144:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	687a      	ldr	r2, [r7, #4]
 800c14a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	1c5a      	adds	r2, r3, #1
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	601a      	str	r2, [r3, #0]
}
 800c156:	bf00      	nop
 800c158:	3714      	adds	r7, #20
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr

0800c162 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c162:	b480      	push	{r7}
 800c164:	b085      	sub	sp, #20
 800c166:	af00      	add	r7, sp, #0
 800c168:	6078      	str	r0, [r7, #4]
 800c16a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c178:	d103      	bne.n	800c182 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	691b      	ldr	r3, [r3, #16]
 800c17e:	60fb      	str	r3, [r7, #12]
 800c180:	e00c      	b.n	800c19c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	3308      	adds	r3, #8
 800c186:	60fb      	str	r3, [r7, #12]
 800c188:	e002      	b.n	800c190 <vListInsert+0x2e>
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	685b      	ldr	r3, [r3, #4]
 800c18e:	60fb      	str	r3, [r7, #12]
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	68ba      	ldr	r2, [r7, #8]
 800c198:	429a      	cmp	r2, r3
 800c19a:	d2f6      	bcs.n	800c18a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	685a      	ldr	r2, [r3, #4]
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	683a      	ldr	r2, [r7, #0]
 800c1aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	68fa      	ldr	r2, [r7, #12]
 800c1b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	683a      	ldr	r2, [r7, #0]
 800c1b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	1c5a      	adds	r2, r3, #1
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	601a      	str	r2, [r3, #0]
}
 800c1c8:	bf00      	nop
 800c1ca:	3714      	adds	r7, #20
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr

0800c1d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b085      	sub	sp, #20
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	691b      	ldr	r3, [r3, #16]
 800c1e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	685b      	ldr	r3, [r3, #4]
 800c1e6:	687a      	ldr	r2, [r7, #4]
 800c1e8:	6892      	ldr	r2, [r2, #8]
 800c1ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	689b      	ldr	r3, [r3, #8]
 800c1f0:	687a      	ldr	r2, [r7, #4]
 800c1f2:	6852      	ldr	r2, [r2, #4]
 800c1f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d103      	bne.n	800c208 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	689a      	ldr	r2, [r3, #8]
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2200      	movs	r2, #0
 800c20c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	1e5a      	subs	r2, r3, #1
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3714      	adds	r7, #20
 800c220:	46bd      	mov	sp, r7
 800c222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c226:	4770      	bx	lr

0800c228 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b084      	sub	sp, #16
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d10a      	bne.n	800c252 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c240:	f383 8811 	msr	BASEPRI, r3
 800c244:	f3bf 8f6f 	isb	sy
 800c248:	f3bf 8f4f 	dsb	sy
 800c24c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c24e:	bf00      	nop
 800c250:	e7fe      	b.n	800c250 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c252:	f002 f877 	bl	800e344 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c25e:	68f9      	ldr	r1, [r7, #12]
 800c260:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c262:	fb01 f303 	mul.w	r3, r1, r3
 800c266:	441a      	add	r2, r3
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	2200      	movs	r2, #0
 800c270:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681a      	ldr	r2, [r3, #0]
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681a      	ldr	r2, [r3, #0]
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c282:	3b01      	subs	r3, #1
 800c284:	68f9      	ldr	r1, [r7, #12]
 800c286:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c288:	fb01 f303 	mul.w	r3, r1, r3
 800c28c:	441a      	add	r2, r3
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	22ff      	movs	r2, #255	; 0xff
 800c296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	22ff      	movs	r2, #255	; 0xff
 800c29e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d114      	bne.n	800c2d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	691b      	ldr	r3, [r3, #16]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d01a      	beq.n	800c2e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	3310      	adds	r3, #16
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f001 f929 	bl	800d50c <xTaskRemoveFromEventList>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d012      	beq.n	800c2e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c2c0:	4b0c      	ldr	r3, [pc, #48]	; (800c2f4 <xQueueGenericReset+0xcc>)
 800c2c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2c6:	601a      	str	r2, [r3, #0]
 800c2c8:	f3bf 8f4f 	dsb	sy
 800c2cc:	f3bf 8f6f 	isb	sy
 800c2d0:	e009      	b.n	800c2e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	3310      	adds	r3, #16
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7ff fef2 	bl	800c0c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	3324      	adds	r3, #36	; 0x24
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f7ff feed 	bl	800c0c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c2e6:	f002 f85d 	bl	800e3a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c2ea:	2301      	movs	r3, #1
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3710      	adds	r7, #16
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}
 800c2f4:	e000ed04 	.word	0xe000ed04

0800c2f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b08e      	sub	sp, #56	; 0x38
 800c2fc:	af02      	add	r7, sp, #8
 800c2fe:	60f8      	str	r0, [r7, #12]
 800c300:	60b9      	str	r1, [r7, #8]
 800c302:	607a      	str	r2, [r7, #4]
 800c304:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d10a      	bne.n	800c322 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c310:	f383 8811 	msr	BASEPRI, r3
 800c314:	f3bf 8f6f 	isb	sy
 800c318:	f3bf 8f4f 	dsb	sy
 800c31c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c31e:	bf00      	nop
 800c320:	e7fe      	b.n	800c320 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d10a      	bne.n	800c33e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c32c:	f383 8811 	msr	BASEPRI, r3
 800c330:	f3bf 8f6f 	isb	sy
 800c334:	f3bf 8f4f 	dsb	sy
 800c338:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c33a:	bf00      	nop
 800c33c:	e7fe      	b.n	800c33c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d002      	beq.n	800c34a <xQueueGenericCreateStatic+0x52>
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d001      	beq.n	800c34e <xQueueGenericCreateStatic+0x56>
 800c34a:	2301      	movs	r3, #1
 800c34c:	e000      	b.n	800c350 <xQueueGenericCreateStatic+0x58>
 800c34e:	2300      	movs	r3, #0
 800c350:	2b00      	cmp	r3, #0
 800c352:	d10a      	bne.n	800c36a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c358:	f383 8811 	msr	BASEPRI, r3
 800c35c:	f3bf 8f6f 	isb	sy
 800c360:	f3bf 8f4f 	dsb	sy
 800c364:	623b      	str	r3, [r7, #32]
}
 800c366:	bf00      	nop
 800c368:	e7fe      	b.n	800c368 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d102      	bne.n	800c376 <xQueueGenericCreateStatic+0x7e>
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d101      	bne.n	800c37a <xQueueGenericCreateStatic+0x82>
 800c376:	2301      	movs	r3, #1
 800c378:	e000      	b.n	800c37c <xQueueGenericCreateStatic+0x84>
 800c37a:	2300      	movs	r3, #0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d10a      	bne.n	800c396 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c384:	f383 8811 	msr	BASEPRI, r3
 800c388:	f3bf 8f6f 	isb	sy
 800c38c:	f3bf 8f4f 	dsb	sy
 800c390:	61fb      	str	r3, [r7, #28]
}
 800c392:	bf00      	nop
 800c394:	e7fe      	b.n	800c394 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c396:	2350      	movs	r3, #80	; 0x50
 800c398:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	2b50      	cmp	r3, #80	; 0x50
 800c39e:	d00a      	beq.n	800c3b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a4:	f383 8811 	msr	BASEPRI, r3
 800c3a8:	f3bf 8f6f 	isb	sy
 800c3ac:	f3bf 8f4f 	dsb	sy
 800c3b0:	61bb      	str	r3, [r7, #24]
}
 800c3b2:	bf00      	nop
 800c3b4:	e7fe      	b.n	800c3b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c3b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d00d      	beq.n	800c3de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c3ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d0:	9300      	str	r3, [sp, #0]
 800c3d2:	4613      	mov	r3, r2
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	68b9      	ldr	r1, [r7, #8]
 800c3d8:	68f8      	ldr	r0, [r7, #12]
 800c3da:	f000 f805 	bl	800c3e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3730      	adds	r7, #48	; 0x30
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	607a      	str	r2, [r7, #4]
 800c3f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d103      	bne.n	800c404 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c3fc:	69bb      	ldr	r3, [r7, #24]
 800c3fe:	69ba      	ldr	r2, [r7, #24]
 800c400:	601a      	str	r2, [r3, #0]
 800c402:	e002      	b.n	800c40a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c404:	69bb      	ldr	r3, [r7, #24]
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c40a:	69bb      	ldr	r3, [r7, #24]
 800c40c:	68fa      	ldr	r2, [r7, #12]
 800c40e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c410:	69bb      	ldr	r3, [r7, #24]
 800c412:	68ba      	ldr	r2, [r7, #8]
 800c414:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c416:	2101      	movs	r1, #1
 800c418:	69b8      	ldr	r0, [r7, #24]
 800c41a:	f7ff ff05 	bl	800c228 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c41e:	69bb      	ldr	r3, [r7, #24]
 800c420:	78fa      	ldrb	r2, [r7, #3]
 800c422:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c426:	bf00      	nop
 800c428:	3710      	adds	r7, #16
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
	...

0800c430 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b08e      	sub	sp, #56	; 0x38
 800c434:	af00      	add	r7, sp, #0
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	60b9      	str	r1, [r7, #8]
 800c43a:	607a      	str	r2, [r7, #4]
 800c43c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c43e:	2300      	movs	r3, #0
 800c440:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d10a      	bne.n	800c462 <xQueueGenericSend+0x32>
	__asm volatile
 800c44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c450:	f383 8811 	msr	BASEPRI, r3
 800c454:	f3bf 8f6f 	isb	sy
 800c458:	f3bf 8f4f 	dsb	sy
 800c45c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c45e:	bf00      	nop
 800c460:	e7fe      	b.n	800c460 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d103      	bne.n	800c470 <xQueueGenericSend+0x40>
 800c468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c46a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d101      	bne.n	800c474 <xQueueGenericSend+0x44>
 800c470:	2301      	movs	r3, #1
 800c472:	e000      	b.n	800c476 <xQueueGenericSend+0x46>
 800c474:	2300      	movs	r3, #0
 800c476:	2b00      	cmp	r3, #0
 800c478:	d10a      	bne.n	800c490 <xQueueGenericSend+0x60>
	__asm volatile
 800c47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c47e:	f383 8811 	msr	BASEPRI, r3
 800c482:	f3bf 8f6f 	isb	sy
 800c486:	f3bf 8f4f 	dsb	sy
 800c48a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c48c:	bf00      	nop
 800c48e:	e7fe      	b.n	800c48e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	2b02      	cmp	r3, #2
 800c494:	d103      	bne.n	800c49e <xQueueGenericSend+0x6e>
 800c496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c49a:	2b01      	cmp	r3, #1
 800c49c:	d101      	bne.n	800c4a2 <xQueueGenericSend+0x72>
 800c49e:	2301      	movs	r3, #1
 800c4a0:	e000      	b.n	800c4a4 <xQueueGenericSend+0x74>
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d10a      	bne.n	800c4be <xQueueGenericSend+0x8e>
	__asm volatile
 800c4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ac:	f383 8811 	msr	BASEPRI, r3
 800c4b0:	f3bf 8f6f 	isb	sy
 800c4b4:	f3bf 8f4f 	dsb	sy
 800c4b8:	623b      	str	r3, [r7, #32]
}
 800c4ba:	bf00      	nop
 800c4bc:	e7fe      	b.n	800c4bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c4be:	f001 f9e7 	bl	800d890 <xTaskGetSchedulerState>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d102      	bne.n	800c4ce <xQueueGenericSend+0x9e>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d101      	bne.n	800c4d2 <xQueueGenericSend+0xa2>
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	e000      	b.n	800c4d4 <xQueueGenericSend+0xa4>
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d10a      	bne.n	800c4ee <xQueueGenericSend+0xbe>
	__asm volatile
 800c4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4dc:	f383 8811 	msr	BASEPRI, r3
 800c4e0:	f3bf 8f6f 	isb	sy
 800c4e4:	f3bf 8f4f 	dsb	sy
 800c4e8:	61fb      	str	r3, [r7, #28]
}
 800c4ea:	bf00      	nop
 800c4ec:	e7fe      	b.n	800c4ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c4ee:	f001 ff29 	bl	800e344 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d302      	bcc.n	800c504 <xQueueGenericSend+0xd4>
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	2b02      	cmp	r3, #2
 800c502:	d129      	bne.n	800c558 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c504:	683a      	ldr	r2, [r7, #0]
 800c506:	68b9      	ldr	r1, [r7, #8]
 800c508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c50a:	f000 fa0b 	bl	800c924 <prvCopyDataToQueue>
 800c50e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c514:	2b00      	cmp	r3, #0
 800c516:	d010      	beq.n	800c53a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51a:	3324      	adds	r3, #36	; 0x24
 800c51c:	4618      	mov	r0, r3
 800c51e:	f000 fff5 	bl	800d50c <xTaskRemoveFromEventList>
 800c522:	4603      	mov	r3, r0
 800c524:	2b00      	cmp	r3, #0
 800c526:	d013      	beq.n	800c550 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c528:	4b3f      	ldr	r3, [pc, #252]	; (800c628 <xQueueGenericSend+0x1f8>)
 800c52a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c52e:	601a      	str	r2, [r3, #0]
 800c530:	f3bf 8f4f 	dsb	sy
 800c534:	f3bf 8f6f 	isb	sy
 800c538:	e00a      	b.n	800c550 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d007      	beq.n	800c550 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c540:	4b39      	ldr	r3, [pc, #228]	; (800c628 <xQueueGenericSend+0x1f8>)
 800c542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c546:	601a      	str	r2, [r3, #0]
 800c548:	f3bf 8f4f 	dsb	sy
 800c54c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c550:	f001 ff28 	bl	800e3a4 <vPortExitCritical>
				return pdPASS;
 800c554:	2301      	movs	r3, #1
 800c556:	e063      	b.n	800c620 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d103      	bne.n	800c566 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c55e:	f001 ff21 	bl	800e3a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c562:	2300      	movs	r3, #0
 800c564:	e05c      	b.n	800c620 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d106      	bne.n	800c57a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c56c:	f107 0314 	add.w	r3, r7, #20
 800c570:	4618      	mov	r0, r3
 800c572:	f001 f82f 	bl	800d5d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c576:	2301      	movs	r3, #1
 800c578:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c57a:	f001 ff13 	bl	800e3a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c57e:	f000 fd9b 	bl	800d0b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c582:	f001 fedf 	bl	800e344 <vPortEnterCritical>
 800c586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c588:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c58c:	b25b      	sxtb	r3, r3
 800c58e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c592:	d103      	bne.n	800c59c <xQueueGenericSend+0x16c>
 800c594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c596:	2200      	movs	r2, #0
 800c598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c5a2:	b25b      	sxtb	r3, r3
 800c5a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5a8:	d103      	bne.n	800c5b2 <xQueueGenericSend+0x182>
 800c5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c5b2:	f001 fef7 	bl	800e3a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c5b6:	1d3a      	adds	r2, r7, #4
 800c5b8:	f107 0314 	add.w	r3, r7, #20
 800c5bc:	4611      	mov	r1, r2
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f001 f81e 	bl	800d600 <xTaskCheckForTimeOut>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d124      	bne.n	800c614 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c5ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5cc:	f000 faa2 	bl	800cb14 <prvIsQueueFull>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d018      	beq.n	800c608 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d8:	3310      	adds	r3, #16
 800c5da:	687a      	ldr	r2, [r7, #4]
 800c5dc:	4611      	mov	r1, r2
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f000 ff44 	bl	800d46c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c5e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5e6:	f000 fa2d 	bl	800ca44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c5ea:	f000 fd73 	bl	800d0d4 <xTaskResumeAll>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	f47f af7c 	bne.w	800c4ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c5f6:	4b0c      	ldr	r3, [pc, #48]	; (800c628 <xQueueGenericSend+0x1f8>)
 800c5f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5fc:	601a      	str	r2, [r3, #0]
 800c5fe:	f3bf 8f4f 	dsb	sy
 800c602:	f3bf 8f6f 	isb	sy
 800c606:	e772      	b.n	800c4ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c60a:	f000 fa1b 	bl	800ca44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c60e:	f000 fd61 	bl	800d0d4 <xTaskResumeAll>
 800c612:	e76c      	b.n	800c4ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c616:	f000 fa15 	bl	800ca44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c61a:	f000 fd5b 	bl	800d0d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c61e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c620:	4618      	mov	r0, r3
 800c622:	3738      	adds	r7, #56	; 0x38
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}
 800c628:	e000ed04 	.word	0xe000ed04

0800c62c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b090      	sub	sp, #64	; 0x40
 800c630:	af00      	add	r7, sp, #0
 800c632:	60f8      	str	r0, [r7, #12]
 800c634:	60b9      	str	r1, [r7, #8]
 800c636:	607a      	str	r2, [r7, #4]
 800c638:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c640:	2b00      	cmp	r3, #0
 800c642:	d10a      	bne.n	800c65a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c648:	f383 8811 	msr	BASEPRI, r3
 800c64c:	f3bf 8f6f 	isb	sy
 800c650:	f3bf 8f4f 	dsb	sy
 800c654:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c656:	bf00      	nop
 800c658:	e7fe      	b.n	800c658 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d103      	bne.n	800c668 <xQueueGenericSendFromISR+0x3c>
 800c660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c664:	2b00      	cmp	r3, #0
 800c666:	d101      	bne.n	800c66c <xQueueGenericSendFromISR+0x40>
 800c668:	2301      	movs	r3, #1
 800c66a:	e000      	b.n	800c66e <xQueueGenericSendFromISR+0x42>
 800c66c:	2300      	movs	r3, #0
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d10a      	bne.n	800c688 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c676:	f383 8811 	msr	BASEPRI, r3
 800c67a:	f3bf 8f6f 	isb	sy
 800c67e:	f3bf 8f4f 	dsb	sy
 800c682:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c684:	bf00      	nop
 800c686:	e7fe      	b.n	800c686 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	2b02      	cmp	r3, #2
 800c68c:	d103      	bne.n	800c696 <xQueueGenericSendFromISR+0x6a>
 800c68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c692:	2b01      	cmp	r3, #1
 800c694:	d101      	bne.n	800c69a <xQueueGenericSendFromISR+0x6e>
 800c696:	2301      	movs	r3, #1
 800c698:	e000      	b.n	800c69c <xQueueGenericSendFromISR+0x70>
 800c69a:	2300      	movs	r3, #0
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d10a      	bne.n	800c6b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a4:	f383 8811 	msr	BASEPRI, r3
 800c6a8:	f3bf 8f6f 	isb	sy
 800c6ac:	f3bf 8f4f 	dsb	sy
 800c6b0:	623b      	str	r3, [r7, #32]
}
 800c6b2:	bf00      	nop
 800c6b4:	e7fe      	b.n	800c6b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c6b6:	f001 ff27 	bl	800e508 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c6ba:	f3ef 8211 	mrs	r2, BASEPRI
 800c6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c2:	f383 8811 	msr	BASEPRI, r3
 800c6c6:	f3bf 8f6f 	isb	sy
 800c6ca:	f3bf 8f4f 	dsb	sy
 800c6ce:	61fa      	str	r2, [r7, #28]
 800c6d0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c6d2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c6d4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d302      	bcc.n	800c6e8 <xQueueGenericSendFromISR+0xbc>
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	2b02      	cmp	r3, #2
 800c6e6:	d12f      	bne.n	800c748 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c6f8:	683a      	ldr	r2, [r7, #0]
 800c6fa:	68b9      	ldr	r1, [r7, #8]
 800c6fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c6fe:	f000 f911 	bl	800c924 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c702:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c70a:	d112      	bne.n	800c732 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c710:	2b00      	cmp	r3, #0
 800c712:	d016      	beq.n	800c742 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c716:	3324      	adds	r3, #36	; 0x24
 800c718:	4618      	mov	r0, r3
 800c71a:	f000 fef7 	bl	800d50c <xTaskRemoveFromEventList>
 800c71e:	4603      	mov	r3, r0
 800c720:	2b00      	cmp	r3, #0
 800c722:	d00e      	beq.n	800c742 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d00b      	beq.n	800c742 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2201      	movs	r2, #1
 800c72e:	601a      	str	r2, [r3, #0]
 800c730:	e007      	b.n	800c742 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c732:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c736:	3301      	adds	r3, #1
 800c738:	b2db      	uxtb	r3, r3
 800c73a:	b25a      	sxtb	r2, r3
 800c73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c73e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c742:	2301      	movs	r3, #1
 800c744:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c746:	e001      	b.n	800c74c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c748:	2300      	movs	r3, #0
 800c74a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c74c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c74e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c756:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3740      	adds	r7, #64	; 0x40
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
	...

0800c764 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b08c      	sub	sp, #48	; 0x30
 800c768:	af00      	add	r7, sp, #0
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	60b9      	str	r1, [r7, #8]
 800c76e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c770:	2300      	movs	r3, #0
 800c772:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d10a      	bne.n	800c794 <xQueueReceive+0x30>
	__asm volatile
 800c77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c782:	f383 8811 	msr	BASEPRI, r3
 800c786:	f3bf 8f6f 	isb	sy
 800c78a:	f3bf 8f4f 	dsb	sy
 800c78e:	623b      	str	r3, [r7, #32]
}
 800c790:	bf00      	nop
 800c792:	e7fe      	b.n	800c792 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d103      	bne.n	800c7a2 <xQueueReceive+0x3e>
 800c79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c79c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d101      	bne.n	800c7a6 <xQueueReceive+0x42>
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	e000      	b.n	800c7a8 <xQueueReceive+0x44>
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d10a      	bne.n	800c7c2 <xQueueReceive+0x5e>
	__asm volatile
 800c7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b0:	f383 8811 	msr	BASEPRI, r3
 800c7b4:	f3bf 8f6f 	isb	sy
 800c7b8:	f3bf 8f4f 	dsb	sy
 800c7bc:	61fb      	str	r3, [r7, #28]
}
 800c7be:	bf00      	nop
 800c7c0:	e7fe      	b.n	800c7c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c7c2:	f001 f865 	bl	800d890 <xTaskGetSchedulerState>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d102      	bne.n	800c7d2 <xQueueReceive+0x6e>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d101      	bne.n	800c7d6 <xQueueReceive+0x72>
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	e000      	b.n	800c7d8 <xQueueReceive+0x74>
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d10a      	bne.n	800c7f2 <xQueueReceive+0x8e>
	__asm volatile
 800c7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e0:	f383 8811 	msr	BASEPRI, r3
 800c7e4:	f3bf 8f6f 	isb	sy
 800c7e8:	f3bf 8f4f 	dsb	sy
 800c7ec:	61bb      	str	r3, [r7, #24]
}
 800c7ee:	bf00      	nop
 800c7f0:	e7fe      	b.n	800c7f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c7f2:	f001 fda7 	bl	800e344 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d01f      	beq.n	800c842 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c802:	68b9      	ldr	r1, [r7, #8]
 800c804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c806:	f000 f8f7 	bl	800c9f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80c:	1e5a      	subs	r2, r3, #1
 800c80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c810:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c814:	691b      	ldr	r3, [r3, #16]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d00f      	beq.n	800c83a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81c:	3310      	adds	r3, #16
 800c81e:	4618      	mov	r0, r3
 800c820:	f000 fe74 	bl	800d50c <xTaskRemoveFromEventList>
 800c824:	4603      	mov	r3, r0
 800c826:	2b00      	cmp	r3, #0
 800c828:	d007      	beq.n	800c83a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c82a:	4b3d      	ldr	r3, [pc, #244]	; (800c920 <xQueueReceive+0x1bc>)
 800c82c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c830:	601a      	str	r2, [r3, #0]
 800c832:	f3bf 8f4f 	dsb	sy
 800c836:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c83a:	f001 fdb3 	bl	800e3a4 <vPortExitCritical>
				return pdPASS;
 800c83e:	2301      	movs	r3, #1
 800c840:	e069      	b.n	800c916 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d103      	bne.n	800c850 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c848:	f001 fdac 	bl	800e3a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c84c:	2300      	movs	r3, #0
 800c84e:	e062      	b.n	800c916 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c852:	2b00      	cmp	r3, #0
 800c854:	d106      	bne.n	800c864 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c856:	f107 0310 	add.w	r3, r7, #16
 800c85a:	4618      	mov	r0, r3
 800c85c:	f000 feba 	bl	800d5d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c860:	2301      	movs	r3, #1
 800c862:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c864:	f001 fd9e 	bl	800e3a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c868:	f000 fc26 	bl	800d0b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c86c:	f001 fd6a 	bl	800e344 <vPortEnterCritical>
 800c870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c872:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c876:	b25b      	sxtb	r3, r3
 800c878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c87c:	d103      	bne.n	800c886 <xQueueReceive+0x122>
 800c87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c880:	2200      	movs	r2, #0
 800c882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c888:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c88c:	b25b      	sxtb	r3, r3
 800c88e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c892:	d103      	bne.n	800c89c <xQueueReceive+0x138>
 800c894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c896:	2200      	movs	r2, #0
 800c898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c89c:	f001 fd82 	bl	800e3a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c8a0:	1d3a      	adds	r2, r7, #4
 800c8a2:	f107 0310 	add.w	r3, r7, #16
 800c8a6:	4611      	mov	r1, r2
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f000 fea9 	bl	800d600 <xTaskCheckForTimeOut>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d123      	bne.n	800c8fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c8b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8b6:	f000 f917 	bl	800cae8 <prvIsQueueEmpty>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d017      	beq.n	800c8f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c2:	3324      	adds	r3, #36	; 0x24
 800c8c4:	687a      	ldr	r2, [r7, #4]
 800c8c6:	4611      	mov	r1, r2
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f000 fdcf 	bl	800d46c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c8ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8d0:	f000 f8b8 	bl	800ca44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c8d4:	f000 fbfe 	bl	800d0d4 <xTaskResumeAll>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d189      	bne.n	800c7f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c8de:	4b10      	ldr	r3, [pc, #64]	; (800c920 <xQueueReceive+0x1bc>)
 800c8e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8e4:	601a      	str	r2, [r3, #0]
 800c8e6:	f3bf 8f4f 	dsb	sy
 800c8ea:	f3bf 8f6f 	isb	sy
 800c8ee:	e780      	b.n	800c7f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c8f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8f2:	f000 f8a7 	bl	800ca44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c8f6:	f000 fbed 	bl	800d0d4 <xTaskResumeAll>
 800c8fa:	e77a      	b.n	800c7f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c8fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8fe:	f000 f8a1 	bl	800ca44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c902:	f000 fbe7 	bl	800d0d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c908:	f000 f8ee 	bl	800cae8 <prvIsQueueEmpty>
 800c90c:	4603      	mov	r3, r0
 800c90e:	2b00      	cmp	r3, #0
 800c910:	f43f af6f 	beq.w	800c7f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c914:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c916:	4618      	mov	r0, r3
 800c918:	3730      	adds	r7, #48	; 0x30
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}
 800c91e:	bf00      	nop
 800c920:	e000ed04 	.word	0xe000ed04

0800c924 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b086      	sub	sp, #24
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	60b9      	str	r1, [r7, #8]
 800c92e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c930:	2300      	movs	r3, #0
 800c932:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c938:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d10d      	bne.n	800c95e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d14d      	bne.n	800c9e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	4618      	mov	r0, r3
 800c950:	f000 ffbc 	bl	800d8cc <xTaskPriorityDisinherit>
 800c954:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	2200      	movs	r2, #0
 800c95a:	609a      	str	r2, [r3, #8]
 800c95c:	e043      	b.n	800c9e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d119      	bne.n	800c998 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	6858      	ldr	r0, [r3, #4]
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c96c:	461a      	mov	r2, r3
 800c96e:	68b9      	ldr	r1, [r7, #8]
 800c970:	f002 ff24 	bl	800f7bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	685a      	ldr	r2, [r3, #4]
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c97c:	441a      	add	r2, r3
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	685a      	ldr	r2, [r3, #4]
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	689b      	ldr	r3, [r3, #8]
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d32b      	bcc.n	800c9e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681a      	ldr	r2, [r3, #0]
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	605a      	str	r2, [r3, #4]
 800c996:	e026      	b.n	800c9e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	68d8      	ldr	r0, [r3, #12]
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	68b9      	ldr	r1, [r7, #8]
 800c9a4:	f002 ff0a 	bl	800f7bc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	68da      	ldr	r2, [r3, #12]
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9b0:	425b      	negs	r3, r3
 800c9b2:	441a      	add	r2, r3
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	68da      	ldr	r2, [r3, #12]
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d207      	bcs.n	800c9d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	689a      	ldr	r2, [r3, #8]
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9cc:	425b      	negs	r3, r3
 800c9ce:	441a      	add	r2, r3
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2b02      	cmp	r3, #2
 800c9d8:	d105      	bne.n	800c9e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d002      	beq.n	800c9e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	3b01      	subs	r3, #1
 800c9e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	1c5a      	adds	r2, r3, #1
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c9ee:	697b      	ldr	r3, [r7, #20]
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3718      	adds	r7, #24
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d018      	beq.n	800ca3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	68da      	ldr	r2, [r3, #12]
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca12:	441a      	add	r2, r3
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	68da      	ldr	r2, [r3, #12]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	689b      	ldr	r3, [r3, #8]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d303      	bcc.n	800ca2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681a      	ldr	r2, [r3, #0]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	68d9      	ldr	r1, [r3, #12]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca34:	461a      	mov	r2, r3
 800ca36:	6838      	ldr	r0, [r7, #0]
 800ca38:	f002 fec0 	bl	800f7bc <memcpy>
	}
}
 800ca3c:	bf00      	nop
 800ca3e:	3708      	adds	r7, #8
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b084      	sub	sp, #16
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ca4c:	f001 fc7a 	bl	800e344 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca58:	e011      	b.n	800ca7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d012      	beq.n	800ca88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	3324      	adds	r3, #36	; 0x24
 800ca66:	4618      	mov	r0, r3
 800ca68:	f000 fd50 	bl	800d50c <xTaskRemoveFromEventList>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d001      	beq.n	800ca76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ca72:	f000 fe27 	bl	800d6c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ca76:	7bfb      	ldrb	r3, [r7, #15]
 800ca78:	3b01      	subs	r3, #1
 800ca7a:	b2db      	uxtb	r3, r3
 800ca7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	dce9      	bgt.n	800ca5a <prvUnlockQueue+0x16>
 800ca86:	e000      	b.n	800ca8a <prvUnlockQueue+0x46>
					break;
 800ca88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	22ff      	movs	r2, #255	; 0xff
 800ca8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ca92:	f001 fc87 	bl	800e3a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ca96:	f001 fc55 	bl	800e344 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800caa0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800caa2:	e011      	b.n	800cac8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	691b      	ldr	r3, [r3, #16]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d012      	beq.n	800cad2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	3310      	adds	r3, #16
 800cab0:	4618      	mov	r0, r3
 800cab2:	f000 fd2b 	bl	800d50c <xTaskRemoveFromEventList>
 800cab6:	4603      	mov	r3, r0
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d001      	beq.n	800cac0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cabc:	f000 fe02 	bl	800d6c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cac0:	7bbb      	ldrb	r3, [r7, #14]
 800cac2:	3b01      	subs	r3, #1
 800cac4:	b2db      	uxtb	r3, r3
 800cac6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cac8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	dce9      	bgt.n	800caa4 <prvUnlockQueue+0x60>
 800cad0:	e000      	b.n	800cad4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cad2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	22ff      	movs	r2, #255	; 0xff
 800cad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cadc:	f001 fc62 	bl	800e3a4 <vPortExitCritical>
}
 800cae0:	bf00      	nop
 800cae2:	3710      	adds	r7, #16
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b084      	sub	sp, #16
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800caf0:	f001 fc28 	bl	800e344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d102      	bne.n	800cb02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cafc:	2301      	movs	r3, #1
 800cafe:	60fb      	str	r3, [r7, #12]
 800cb00:	e001      	b.n	800cb06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cb02:	2300      	movs	r3, #0
 800cb04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb06:	f001 fc4d 	bl	800e3a4 <vPortExitCritical>

	return xReturn;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3710      	adds	r7, #16
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b084      	sub	sp, #16
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb1c:	f001 fc12 	bl	800e344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d102      	bne.n	800cb32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	60fb      	str	r3, [r7, #12]
 800cb30:	e001      	b.n	800cb36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cb32:	2300      	movs	r3, #0
 800cb34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb36:	f001 fc35 	bl	800e3a4 <vPortExitCritical>

	return xReturn;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3710      	adds	r7, #16
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cb44:	b480      	push	{r7}
 800cb46:	b085      	sub	sp, #20
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb4e:	2300      	movs	r3, #0
 800cb50:	60fb      	str	r3, [r7, #12]
 800cb52:	e014      	b.n	800cb7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cb54:	4a0f      	ldr	r2, [pc, #60]	; (800cb94 <vQueueAddToRegistry+0x50>)
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d10b      	bne.n	800cb78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cb60:	490c      	ldr	r1, [pc, #48]	; (800cb94 <vQueueAddToRegistry+0x50>)
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	683a      	ldr	r2, [r7, #0]
 800cb66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cb6a:	4a0a      	ldr	r2, [pc, #40]	; (800cb94 <vQueueAddToRegistry+0x50>)
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	00db      	lsls	r3, r3, #3
 800cb70:	4413      	add	r3, r2
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cb76:	e006      	b.n	800cb86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	60fb      	str	r3, [r7, #12]
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2b07      	cmp	r3, #7
 800cb82:	d9e7      	bls.n	800cb54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cb84:	bf00      	nop
 800cb86:	bf00      	nop
 800cb88:	3714      	adds	r7, #20
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr
 800cb92:	bf00      	nop
 800cb94:	200015a8 	.word	0x200015a8

0800cb98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b086      	sub	sp, #24
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	60f8      	str	r0, [r7, #12]
 800cba0:	60b9      	str	r1, [r7, #8]
 800cba2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cba8:	f001 fbcc 	bl	800e344 <vPortEnterCritical>
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cbb2:	b25b      	sxtb	r3, r3
 800cbb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbb8:	d103      	bne.n	800cbc2 <vQueueWaitForMessageRestricted+0x2a>
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cbc8:	b25b      	sxtb	r3, r3
 800cbca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbce:	d103      	bne.n	800cbd8 <vQueueWaitForMessageRestricted+0x40>
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cbd8:	f001 fbe4 	bl	800e3a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d106      	bne.n	800cbf2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	3324      	adds	r3, #36	; 0x24
 800cbe8:	687a      	ldr	r2, [r7, #4]
 800cbea:	68b9      	ldr	r1, [r7, #8]
 800cbec:	4618      	mov	r0, r3
 800cbee:	f000 fc61 	bl	800d4b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cbf2:	6978      	ldr	r0, [r7, #20]
 800cbf4:	f7ff ff26 	bl	800ca44 <prvUnlockQueue>
	}
 800cbf8:	bf00      	nop
 800cbfa:	3718      	adds	r7, #24
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b08e      	sub	sp, #56	; 0x38
 800cc04:	af04      	add	r7, sp, #16
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	60b9      	str	r1, [r7, #8]
 800cc0a:	607a      	str	r2, [r7, #4]
 800cc0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cc0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d10a      	bne.n	800cc2a <xTaskCreateStatic+0x2a>
	__asm volatile
 800cc14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc18:	f383 8811 	msr	BASEPRI, r3
 800cc1c:	f3bf 8f6f 	isb	sy
 800cc20:	f3bf 8f4f 	dsb	sy
 800cc24:	623b      	str	r3, [r7, #32]
}
 800cc26:	bf00      	nop
 800cc28:	e7fe      	b.n	800cc28 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d10a      	bne.n	800cc46 <xTaskCreateStatic+0x46>
	__asm volatile
 800cc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc34:	f383 8811 	msr	BASEPRI, r3
 800cc38:	f3bf 8f6f 	isb	sy
 800cc3c:	f3bf 8f4f 	dsb	sy
 800cc40:	61fb      	str	r3, [r7, #28]
}
 800cc42:	bf00      	nop
 800cc44:	e7fe      	b.n	800cc44 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cc46:	23a8      	movs	r3, #168	; 0xa8
 800cc48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cc4a:	693b      	ldr	r3, [r7, #16]
 800cc4c:	2ba8      	cmp	r3, #168	; 0xa8
 800cc4e:	d00a      	beq.n	800cc66 <xTaskCreateStatic+0x66>
	__asm volatile
 800cc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc54:	f383 8811 	msr	BASEPRI, r3
 800cc58:	f3bf 8f6f 	isb	sy
 800cc5c:	f3bf 8f4f 	dsb	sy
 800cc60:	61bb      	str	r3, [r7, #24]
}
 800cc62:	bf00      	nop
 800cc64:	e7fe      	b.n	800cc64 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cc66:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d01e      	beq.n	800ccac <xTaskCreateStatic+0xac>
 800cc6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d01b      	beq.n	800ccac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc76:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc7c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc80:	2202      	movs	r2, #2
 800cc82:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cc86:	2300      	movs	r3, #0
 800cc88:	9303      	str	r3, [sp, #12]
 800cc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8c:	9302      	str	r3, [sp, #8]
 800cc8e:	f107 0314 	add.w	r3, r7, #20
 800cc92:	9301      	str	r3, [sp, #4]
 800cc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc96:	9300      	str	r3, [sp, #0]
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	687a      	ldr	r2, [r7, #4]
 800cc9c:	68b9      	ldr	r1, [r7, #8]
 800cc9e:	68f8      	ldr	r0, [r7, #12]
 800cca0:	f000 f850 	bl	800cd44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cca4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cca6:	f000 f8f3 	bl	800ce90 <prvAddNewTaskToReadyList>
 800ccaa:	e001      	b.n	800ccb0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ccac:	2300      	movs	r3, #0
 800ccae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ccb0:	697b      	ldr	r3, [r7, #20]
	}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3728      	adds	r7, #40	; 0x28
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}

0800ccba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ccba:	b580      	push	{r7, lr}
 800ccbc:	b08c      	sub	sp, #48	; 0x30
 800ccbe:	af04      	add	r7, sp, #16
 800ccc0:	60f8      	str	r0, [r7, #12]
 800ccc2:	60b9      	str	r1, [r7, #8]
 800ccc4:	603b      	str	r3, [r7, #0]
 800ccc6:	4613      	mov	r3, r2
 800ccc8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ccca:	88fb      	ldrh	r3, [r7, #6]
 800cccc:	009b      	lsls	r3, r3, #2
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f001 fc5a 	bl	800e588 <pvPortMalloc>
 800ccd4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d00e      	beq.n	800ccfa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ccdc:	20a8      	movs	r0, #168	; 0xa8
 800ccde:	f001 fc53 	bl	800e588 <pvPortMalloc>
 800cce2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cce4:	69fb      	ldr	r3, [r7, #28]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d003      	beq.n	800ccf2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ccea:	69fb      	ldr	r3, [r7, #28]
 800ccec:	697a      	ldr	r2, [r7, #20]
 800ccee:	631a      	str	r2, [r3, #48]	; 0x30
 800ccf0:	e005      	b.n	800ccfe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ccf2:	6978      	ldr	r0, [r7, #20]
 800ccf4:	f001 fd14 	bl	800e720 <vPortFree>
 800ccf8:	e001      	b.n	800ccfe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ccfe:	69fb      	ldr	r3, [r7, #28]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d017      	beq.n	800cd34 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cd04:	69fb      	ldr	r3, [r7, #28]
 800cd06:	2200      	movs	r2, #0
 800cd08:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cd0c:	88fa      	ldrh	r2, [r7, #6]
 800cd0e:	2300      	movs	r3, #0
 800cd10:	9303      	str	r3, [sp, #12]
 800cd12:	69fb      	ldr	r3, [r7, #28]
 800cd14:	9302      	str	r3, [sp, #8]
 800cd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd18:	9301      	str	r3, [sp, #4]
 800cd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd1c:	9300      	str	r3, [sp, #0]
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	68b9      	ldr	r1, [r7, #8]
 800cd22:	68f8      	ldr	r0, [r7, #12]
 800cd24:	f000 f80e 	bl	800cd44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cd28:	69f8      	ldr	r0, [r7, #28]
 800cd2a:	f000 f8b1 	bl	800ce90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cd2e:	2301      	movs	r3, #1
 800cd30:	61bb      	str	r3, [r7, #24]
 800cd32:	e002      	b.n	800cd3a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cd34:	f04f 33ff 	mov.w	r3, #4294967295
 800cd38:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cd3a:	69bb      	ldr	r3, [r7, #24]
	}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3720      	adds	r7, #32
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b088      	sub	sp, #32
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	60f8      	str	r0, [r7, #12]
 800cd4c:	60b9      	str	r1, [r7, #8]
 800cd4e:	607a      	str	r2, [r7, #4]
 800cd50:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd54:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	009b      	lsls	r3, r3, #2
 800cd5a:	461a      	mov	r2, r3
 800cd5c:	21a5      	movs	r1, #165	; 0xa5
 800cd5e:	f002 fc59 	bl	800f614 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cd6c:	3b01      	subs	r3, #1
 800cd6e:	009b      	lsls	r3, r3, #2
 800cd70:	4413      	add	r3, r2
 800cd72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cd74:	69bb      	ldr	r3, [r7, #24]
 800cd76:	f023 0307 	bic.w	r3, r3, #7
 800cd7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cd7c:	69bb      	ldr	r3, [r7, #24]
 800cd7e:	f003 0307 	and.w	r3, r3, #7
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d00a      	beq.n	800cd9c <prvInitialiseNewTask+0x58>
	__asm volatile
 800cd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8a:	f383 8811 	msr	BASEPRI, r3
 800cd8e:	f3bf 8f6f 	isb	sy
 800cd92:	f3bf 8f4f 	dsb	sy
 800cd96:	617b      	str	r3, [r7, #20]
}
 800cd98:	bf00      	nop
 800cd9a:	e7fe      	b.n	800cd9a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d01f      	beq.n	800cde2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cda2:	2300      	movs	r3, #0
 800cda4:	61fb      	str	r3, [r7, #28]
 800cda6:	e012      	b.n	800cdce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cda8:	68ba      	ldr	r2, [r7, #8]
 800cdaa:	69fb      	ldr	r3, [r7, #28]
 800cdac:	4413      	add	r3, r2
 800cdae:	7819      	ldrb	r1, [r3, #0]
 800cdb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdb2:	69fb      	ldr	r3, [r7, #28]
 800cdb4:	4413      	add	r3, r2
 800cdb6:	3334      	adds	r3, #52	; 0x34
 800cdb8:	460a      	mov	r2, r1
 800cdba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cdbc:	68ba      	ldr	r2, [r7, #8]
 800cdbe:	69fb      	ldr	r3, [r7, #28]
 800cdc0:	4413      	add	r3, r2
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d006      	beq.n	800cdd6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cdc8:	69fb      	ldr	r3, [r7, #28]
 800cdca:	3301      	adds	r3, #1
 800cdcc:	61fb      	str	r3, [r7, #28]
 800cdce:	69fb      	ldr	r3, [r7, #28]
 800cdd0:	2b0f      	cmp	r3, #15
 800cdd2:	d9e9      	bls.n	800cda8 <prvInitialiseNewTask+0x64>
 800cdd4:	e000      	b.n	800cdd8 <prvInitialiseNewTask+0x94>
			{
				break;
 800cdd6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cdd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdda:	2200      	movs	r2, #0
 800cddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cde0:	e003      	b.n	800cdea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde4:	2200      	movs	r2, #0
 800cde6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cdea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdec:	2b37      	cmp	r3, #55	; 0x37
 800cdee:	d901      	bls.n	800cdf4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cdf0:	2337      	movs	r3, #55	; 0x37
 800cdf2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdf8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdfe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ce00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce02:	2200      	movs	r2, #0
 800ce04:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ce06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce08:	3304      	adds	r3, #4
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7ff f978 	bl	800c100 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ce10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce12:	3318      	adds	r3, #24
 800ce14:	4618      	mov	r0, r3
 800ce16:	f7ff f973 	bl	800c100 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ce1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ce26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ce2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ce30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce32:	2200      	movs	r2, #0
 800ce34:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ce38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ce40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce42:	3354      	adds	r3, #84	; 0x54
 800ce44:	224c      	movs	r2, #76	; 0x4c
 800ce46:	2100      	movs	r1, #0
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f002 fbe3 	bl	800f614 <memset>
 800ce4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce50:	4a0c      	ldr	r2, [pc, #48]	; (800ce84 <prvInitialiseNewTask+0x140>)
 800ce52:	659a      	str	r2, [r3, #88]	; 0x58
 800ce54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce56:	4a0c      	ldr	r2, [pc, #48]	; (800ce88 <prvInitialiseNewTask+0x144>)
 800ce58:	65da      	str	r2, [r3, #92]	; 0x5c
 800ce5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce5c:	4a0b      	ldr	r2, [pc, #44]	; (800ce8c <prvInitialiseNewTask+0x148>)
 800ce5e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ce60:	683a      	ldr	r2, [r7, #0]
 800ce62:	68f9      	ldr	r1, [r7, #12]
 800ce64:	69b8      	ldr	r0, [r7, #24]
 800ce66:	f001 f941 	bl	800e0ec <pxPortInitialiseStack>
 800ce6a:	4602      	mov	r2, r0
 800ce6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce6e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ce70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d002      	beq.n	800ce7c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ce76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce7a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce7c:	bf00      	nop
 800ce7e:	3720      	adds	r7, #32
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}
 800ce84:	2000583c 	.word	0x2000583c
 800ce88:	200058a4 	.word	0x200058a4
 800ce8c:	2000590c 	.word	0x2000590c

0800ce90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ce98:	f001 fa54 	bl	800e344 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ce9c:	4b2d      	ldr	r3, [pc, #180]	; (800cf54 <prvAddNewTaskToReadyList+0xc4>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	3301      	adds	r3, #1
 800cea2:	4a2c      	ldr	r2, [pc, #176]	; (800cf54 <prvAddNewTaskToReadyList+0xc4>)
 800cea4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cea6:	4b2c      	ldr	r3, [pc, #176]	; (800cf58 <prvAddNewTaskToReadyList+0xc8>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d109      	bne.n	800cec2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ceae:	4a2a      	ldr	r2, [pc, #168]	; (800cf58 <prvAddNewTaskToReadyList+0xc8>)
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ceb4:	4b27      	ldr	r3, [pc, #156]	; (800cf54 <prvAddNewTaskToReadyList+0xc4>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d110      	bne.n	800cede <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cebc:	f000 fc26 	bl	800d70c <prvInitialiseTaskLists>
 800cec0:	e00d      	b.n	800cede <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cec2:	4b26      	ldr	r3, [pc, #152]	; (800cf5c <prvAddNewTaskToReadyList+0xcc>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d109      	bne.n	800cede <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ceca:	4b23      	ldr	r3, [pc, #140]	; (800cf58 <prvAddNewTaskToReadyList+0xc8>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d802      	bhi.n	800cede <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ced8:	4a1f      	ldr	r2, [pc, #124]	; (800cf58 <prvAddNewTaskToReadyList+0xc8>)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cede:	4b20      	ldr	r3, [pc, #128]	; (800cf60 <prvAddNewTaskToReadyList+0xd0>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	3301      	adds	r3, #1
 800cee4:	4a1e      	ldr	r2, [pc, #120]	; (800cf60 <prvAddNewTaskToReadyList+0xd0>)
 800cee6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cee8:	4b1d      	ldr	r3, [pc, #116]	; (800cf60 <prvAddNewTaskToReadyList+0xd0>)
 800ceea:	681a      	ldr	r2, [r3, #0]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cef4:	4b1b      	ldr	r3, [pc, #108]	; (800cf64 <prvAddNewTaskToReadyList+0xd4>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	429a      	cmp	r2, r3
 800cefa:	d903      	bls.n	800cf04 <prvAddNewTaskToReadyList+0x74>
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf00:	4a18      	ldr	r2, [pc, #96]	; (800cf64 <prvAddNewTaskToReadyList+0xd4>)
 800cf02:	6013      	str	r3, [r2, #0]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf08:	4613      	mov	r3, r2
 800cf0a:	009b      	lsls	r3, r3, #2
 800cf0c:	4413      	add	r3, r2
 800cf0e:	009b      	lsls	r3, r3, #2
 800cf10:	4a15      	ldr	r2, [pc, #84]	; (800cf68 <prvAddNewTaskToReadyList+0xd8>)
 800cf12:	441a      	add	r2, r3
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	3304      	adds	r3, #4
 800cf18:	4619      	mov	r1, r3
 800cf1a:	4610      	mov	r0, r2
 800cf1c:	f7ff f8fd 	bl	800c11a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cf20:	f001 fa40 	bl	800e3a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cf24:	4b0d      	ldr	r3, [pc, #52]	; (800cf5c <prvAddNewTaskToReadyList+0xcc>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d00e      	beq.n	800cf4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cf2c:	4b0a      	ldr	r3, [pc, #40]	; (800cf58 <prvAddNewTaskToReadyList+0xc8>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d207      	bcs.n	800cf4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cf3a:	4b0c      	ldr	r3, [pc, #48]	; (800cf6c <prvAddNewTaskToReadyList+0xdc>)
 800cf3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf40:	601a      	str	r2, [r3, #0]
 800cf42:	f3bf 8f4f 	dsb	sy
 800cf46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf4a:	bf00      	nop
 800cf4c:	3708      	adds	r7, #8
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}
 800cf52:	bf00      	nop
 800cf54:	20001abc 	.word	0x20001abc
 800cf58:	200015e8 	.word	0x200015e8
 800cf5c:	20001ac8 	.word	0x20001ac8
 800cf60:	20001ad8 	.word	0x20001ad8
 800cf64:	20001ac4 	.word	0x20001ac4
 800cf68:	200015ec 	.word	0x200015ec
 800cf6c:	e000ed04 	.word	0xe000ed04

0800cf70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b084      	sub	sp, #16
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d017      	beq.n	800cfb2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cf82:	4b13      	ldr	r3, [pc, #76]	; (800cfd0 <vTaskDelay+0x60>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d00a      	beq.n	800cfa0 <vTaskDelay+0x30>
	__asm volatile
 800cf8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8e:	f383 8811 	msr	BASEPRI, r3
 800cf92:	f3bf 8f6f 	isb	sy
 800cf96:	f3bf 8f4f 	dsb	sy
 800cf9a:	60bb      	str	r3, [r7, #8]
}
 800cf9c:	bf00      	nop
 800cf9e:	e7fe      	b.n	800cf9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cfa0:	f000 f88a 	bl	800d0b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cfa4:	2100      	movs	r1, #0
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f000 fcfe 	bl	800d9a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cfac:	f000 f892 	bl	800d0d4 <xTaskResumeAll>
 800cfb0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d107      	bne.n	800cfc8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cfb8:	4b06      	ldr	r3, [pc, #24]	; (800cfd4 <vTaskDelay+0x64>)
 800cfba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfbe:	601a      	str	r2, [r3, #0]
 800cfc0:	f3bf 8f4f 	dsb	sy
 800cfc4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cfc8:	bf00      	nop
 800cfca:	3710      	adds	r7, #16
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}
 800cfd0:	20001ae4 	.word	0x20001ae4
 800cfd4:	e000ed04 	.word	0xe000ed04

0800cfd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b08a      	sub	sp, #40	; 0x28
 800cfdc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cfe6:	463a      	mov	r2, r7
 800cfe8:	1d39      	adds	r1, r7, #4
 800cfea:	f107 0308 	add.w	r3, r7, #8
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7ff f832 	bl	800c058 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cff4:	6839      	ldr	r1, [r7, #0]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	68ba      	ldr	r2, [r7, #8]
 800cffa:	9202      	str	r2, [sp, #8]
 800cffc:	9301      	str	r3, [sp, #4]
 800cffe:	2300      	movs	r3, #0
 800d000:	9300      	str	r3, [sp, #0]
 800d002:	2300      	movs	r3, #0
 800d004:	460a      	mov	r2, r1
 800d006:	4924      	ldr	r1, [pc, #144]	; (800d098 <vTaskStartScheduler+0xc0>)
 800d008:	4824      	ldr	r0, [pc, #144]	; (800d09c <vTaskStartScheduler+0xc4>)
 800d00a:	f7ff fdf9 	bl	800cc00 <xTaskCreateStatic>
 800d00e:	4603      	mov	r3, r0
 800d010:	4a23      	ldr	r2, [pc, #140]	; (800d0a0 <vTaskStartScheduler+0xc8>)
 800d012:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d014:	4b22      	ldr	r3, [pc, #136]	; (800d0a0 <vTaskStartScheduler+0xc8>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d002      	beq.n	800d022 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d01c:	2301      	movs	r3, #1
 800d01e:	617b      	str	r3, [r7, #20]
 800d020:	e001      	b.n	800d026 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d022:	2300      	movs	r3, #0
 800d024:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d102      	bne.n	800d032 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d02c:	f000 fd10 	bl	800da50 <xTimerCreateTimerTask>
 800d030:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	2b01      	cmp	r3, #1
 800d036:	d11b      	bne.n	800d070 <vTaskStartScheduler+0x98>
	__asm volatile
 800d038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d03c:	f383 8811 	msr	BASEPRI, r3
 800d040:	f3bf 8f6f 	isb	sy
 800d044:	f3bf 8f4f 	dsb	sy
 800d048:	613b      	str	r3, [r7, #16]
}
 800d04a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d04c:	4b15      	ldr	r3, [pc, #84]	; (800d0a4 <vTaskStartScheduler+0xcc>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	3354      	adds	r3, #84	; 0x54
 800d052:	4a15      	ldr	r2, [pc, #84]	; (800d0a8 <vTaskStartScheduler+0xd0>)
 800d054:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d056:	4b15      	ldr	r3, [pc, #84]	; (800d0ac <vTaskStartScheduler+0xd4>)
 800d058:	f04f 32ff 	mov.w	r2, #4294967295
 800d05c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d05e:	4b14      	ldr	r3, [pc, #80]	; (800d0b0 <vTaskStartScheduler+0xd8>)
 800d060:	2201      	movs	r2, #1
 800d062:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d064:	4b13      	ldr	r3, [pc, #76]	; (800d0b4 <vTaskStartScheduler+0xdc>)
 800d066:	2200      	movs	r2, #0
 800d068:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d06a:	f001 f8c9 	bl	800e200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d06e:	e00e      	b.n	800d08e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d076:	d10a      	bne.n	800d08e <vTaskStartScheduler+0xb6>
	__asm volatile
 800d078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d07c:	f383 8811 	msr	BASEPRI, r3
 800d080:	f3bf 8f6f 	isb	sy
 800d084:	f3bf 8f4f 	dsb	sy
 800d088:	60fb      	str	r3, [r7, #12]
}
 800d08a:	bf00      	nop
 800d08c:	e7fe      	b.n	800d08c <vTaskStartScheduler+0xb4>
}
 800d08e:	bf00      	nop
 800d090:	3718      	adds	r7, #24
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}
 800d096:	bf00      	nop
 800d098:	08011d3c 	.word	0x08011d3c
 800d09c:	0800d6dd 	.word	0x0800d6dd
 800d0a0:	20001ae0 	.word	0x20001ae0
 800d0a4:	200015e8 	.word	0x200015e8
 800d0a8:	200001f0 	.word	0x200001f0
 800d0ac:	20001adc 	.word	0x20001adc
 800d0b0:	20001ac8 	.word	0x20001ac8
 800d0b4:	20001ac0 	.word	0x20001ac0

0800d0b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d0bc:	4b04      	ldr	r3, [pc, #16]	; (800d0d0 <vTaskSuspendAll+0x18>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	4a03      	ldr	r2, [pc, #12]	; (800d0d0 <vTaskSuspendAll+0x18>)
 800d0c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d0c6:	bf00      	nop
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr
 800d0d0:	20001ae4 	.word	0x20001ae4

0800d0d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b084      	sub	sp, #16
 800d0d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d0e2:	4b42      	ldr	r3, [pc, #264]	; (800d1ec <xTaskResumeAll+0x118>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d10a      	bne.n	800d100 <xTaskResumeAll+0x2c>
	__asm volatile
 800d0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ee:	f383 8811 	msr	BASEPRI, r3
 800d0f2:	f3bf 8f6f 	isb	sy
 800d0f6:	f3bf 8f4f 	dsb	sy
 800d0fa:	603b      	str	r3, [r7, #0]
}
 800d0fc:	bf00      	nop
 800d0fe:	e7fe      	b.n	800d0fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d100:	f001 f920 	bl	800e344 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d104:	4b39      	ldr	r3, [pc, #228]	; (800d1ec <xTaskResumeAll+0x118>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	3b01      	subs	r3, #1
 800d10a:	4a38      	ldr	r2, [pc, #224]	; (800d1ec <xTaskResumeAll+0x118>)
 800d10c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d10e:	4b37      	ldr	r3, [pc, #220]	; (800d1ec <xTaskResumeAll+0x118>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d162      	bne.n	800d1dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d116:	4b36      	ldr	r3, [pc, #216]	; (800d1f0 <xTaskResumeAll+0x11c>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d05e      	beq.n	800d1dc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d11e:	e02f      	b.n	800d180 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d120:	4b34      	ldr	r3, [pc, #208]	; (800d1f4 <xTaskResumeAll+0x120>)
 800d122:	68db      	ldr	r3, [r3, #12]
 800d124:	68db      	ldr	r3, [r3, #12]
 800d126:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	3318      	adds	r3, #24
 800d12c:	4618      	mov	r0, r3
 800d12e:	f7ff f851 	bl	800c1d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	3304      	adds	r3, #4
 800d136:	4618      	mov	r0, r3
 800d138:	f7ff f84c 	bl	800c1d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d140:	4b2d      	ldr	r3, [pc, #180]	; (800d1f8 <xTaskResumeAll+0x124>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	429a      	cmp	r2, r3
 800d146:	d903      	bls.n	800d150 <xTaskResumeAll+0x7c>
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d14c:	4a2a      	ldr	r2, [pc, #168]	; (800d1f8 <xTaskResumeAll+0x124>)
 800d14e:	6013      	str	r3, [r2, #0]
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d154:	4613      	mov	r3, r2
 800d156:	009b      	lsls	r3, r3, #2
 800d158:	4413      	add	r3, r2
 800d15a:	009b      	lsls	r3, r3, #2
 800d15c:	4a27      	ldr	r2, [pc, #156]	; (800d1fc <xTaskResumeAll+0x128>)
 800d15e:	441a      	add	r2, r3
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	3304      	adds	r3, #4
 800d164:	4619      	mov	r1, r3
 800d166:	4610      	mov	r0, r2
 800d168:	f7fe ffd7 	bl	800c11a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d170:	4b23      	ldr	r3, [pc, #140]	; (800d200 <xTaskResumeAll+0x12c>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d176:	429a      	cmp	r2, r3
 800d178:	d302      	bcc.n	800d180 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d17a:	4b22      	ldr	r3, [pc, #136]	; (800d204 <xTaskResumeAll+0x130>)
 800d17c:	2201      	movs	r2, #1
 800d17e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d180:	4b1c      	ldr	r3, [pc, #112]	; (800d1f4 <xTaskResumeAll+0x120>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d1cb      	bne.n	800d120 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d001      	beq.n	800d192 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d18e:	f000 fb5f 	bl	800d850 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d192:	4b1d      	ldr	r3, [pc, #116]	; (800d208 <xTaskResumeAll+0x134>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d010      	beq.n	800d1c0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d19e:	f000 f847 	bl	800d230 <xTaskIncrementTick>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d002      	beq.n	800d1ae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d1a8:	4b16      	ldr	r3, [pc, #88]	; (800d204 <xTaskResumeAll+0x130>)
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	3b01      	subs	r3, #1
 800d1b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d1f1      	bne.n	800d19e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d1ba:	4b13      	ldr	r3, [pc, #76]	; (800d208 <xTaskResumeAll+0x134>)
 800d1bc:	2200      	movs	r2, #0
 800d1be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d1c0:	4b10      	ldr	r3, [pc, #64]	; (800d204 <xTaskResumeAll+0x130>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d009      	beq.n	800d1dc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d1cc:	4b0f      	ldr	r3, [pc, #60]	; (800d20c <xTaskResumeAll+0x138>)
 800d1ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1d2:	601a      	str	r2, [r3, #0]
 800d1d4:	f3bf 8f4f 	dsb	sy
 800d1d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d1dc:	f001 f8e2 	bl	800e3a4 <vPortExitCritical>

	return xAlreadyYielded;
 800d1e0:	68bb      	ldr	r3, [r7, #8]
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3710      	adds	r7, #16
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}
 800d1ea:	bf00      	nop
 800d1ec:	20001ae4 	.word	0x20001ae4
 800d1f0:	20001abc 	.word	0x20001abc
 800d1f4:	20001a7c 	.word	0x20001a7c
 800d1f8:	20001ac4 	.word	0x20001ac4
 800d1fc:	200015ec 	.word	0x200015ec
 800d200:	200015e8 	.word	0x200015e8
 800d204:	20001ad0 	.word	0x20001ad0
 800d208:	20001acc 	.word	0x20001acc
 800d20c:	e000ed04 	.word	0xe000ed04

0800d210 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d210:	b480      	push	{r7}
 800d212:	b083      	sub	sp, #12
 800d214:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d216:	4b05      	ldr	r3, [pc, #20]	; (800d22c <xTaskGetTickCount+0x1c>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d21c:	687b      	ldr	r3, [r7, #4]
}
 800d21e:	4618      	mov	r0, r3
 800d220:	370c      	adds	r7, #12
 800d222:	46bd      	mov	sp, r7
 800d224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d228:	4770      	bx	lr
 800d22a:	bf00      	nop
 800d22c:	20001ac0 	.word	0x20001ac0

0800d230 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b086      	sub	sp, #24
 800d234:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d236:	2300      	movs	r3, #0
 800d238:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d23a:	4b4f      	ldr	r3, [pc, #316]	; (800d378 <xTaskIncrementTick+0x148>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	f040 808f 	bne.w	800d362 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d244:	4b4d      	ldr	r3, [pc, #308]	; (800d37c <xTaskIncrementTick+0x14c>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	3301      	adds	r3, #1
 800d24a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d24c:	4a4b      	ldr	r2, [pc, #300]	; (800d37c <xTaskIncrementTick+0x14c>)
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d252:	693b      	ldr	r3, [r7, #16]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d120      	bne.n	800d29a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d258:	4b49      	ldr	r3, [pc, #292]	; (800d380 <xTaskIncrementTick+0x150>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d00a      	beq.n	800d278 <xTaskIncrementTick+0x48>
	__asm volatile
 800d262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d266:	f383 8811 	msr	BASEPRI, r3
 800d26a:	f3bf 8f6f 	isb	sy
 800d26e:	f3bf 8f4f 	dsb	sy
 800d272:	603b      	str	r3, [r7, #0]
}
 800d274:	bf00      	nop
 800d276:	e7fe      	b.n	800d276 <xTaskIncrementTick+0x46>
 800d278:	4b41      	ldr	r3, [pc, #260]	; (800d380 <xTaskIncrementTick+0x150>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	60fb      	str	r3, [r7, #12]
 800d27e:	4b41      	ldr	r3, [pc, #260]	; (800d384 <xTaskIncrementTick+0x154>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	4a3f      	ldr	r2, [pc, #252]	; (800d380 <xTaskIncrementTick+0x150>)
 800d284:	6013      	str	r3, [r2, #0]
 800d286:	4a3f      	ldr	r2, [pc, #252]	; (800d384 <xTaskIncrementTick+0x154>)
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	6013      	str	r3, [r2, #0]
 800d28c:	4b3e      	ldr	r3, [pc, #248]	; (800d388 <xTaskIncrementTick+0x158>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	3301      	adds	r3, #1
 800d292:	4a3d      	ldr	r2, [pc, #244]	; (800d388 <xTaskIncrementTick+0x158>)
 800d294:	6013      	str	r3, [r2, #0]
 800d296:	f000 fadb 	bl	800d850 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d29a:	4b3c      	ldr	r3, [pc, #240]	; (800d38c <xTaskIncrementTick+0x15c>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	693a      	ldr	r2, [r7, #16]
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d349      	bcc.n	800d338 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d2a4:	4b36      	ldr	r3, [pc, #216]	; (800d380 <xTaskIncrementTick+0x150>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d104      	bne.n	800d2b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2ae:	4b37      	ldr	r3, [pc, #220]	; (800d38c <xTaskIncrementTick+0x15c>)
 800d2b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d2b4:	601a      	str	r2, [r3, #0]
					break;
 800d2b6:	e03f      	b.n	800d338 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2b8:	4b31      	ldr	r3, [pc, #196]	; (800d380 <xTaskIncrementTick+0x150>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	68db      	ldr	r3, [r3, #12]
 800d2be:	68db      	ldr	r3, [r3, #12]
 800d2c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d2c8:	693a      	ldr	r2, [r7, #16]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	d203      	bcs.n	800d2d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d2d0:	4a2e      	ldr	r2, [pc, #184]	; (800d38c <xTaskIncrementTick+0x15c>)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d2d6:	e02f      	b.n	800d338 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	3304      	adds	r3, #4
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7fe ff79 	bl	800c1d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d004      	beq.n	800d2f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	3318      	adds	r3, #24
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f7fe ff70 	bl	800c1d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2f8:	4b25      	ldr	r3, [pc, #148]	; (800d390 <xTaskIncrementTick+0x160>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d903      	bls.n	800d308 <xTaskIncrementTick+0xd8>
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d304:	4a22      	ldr	r2, [pc, #136]	; (800d390 <xTaskIncrementTick+0x160>)
 800d306:	6013      	str	r3, [r2, #0]
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d30c:	4613      	mov	r3, r2
 800d30e:	009b      	lsls	r3, r3, #2
 800d310:	4413      	add	r3, r2
 800d312:	009b      	lsls	r3, r3, #2
 800d314:	4a1f      	ldr	r2, [pc, #124]	; (800d394 <xTaskIncrementTick+0x164>)
 800d316:	441a      	add	r2, r3
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	3304      	adds	r3, #4
 800d31c:	4619      	mov	r1, r3
 800d31e:	4610      	mov	r0, r2
 800d320:	f7fe fefb 	bl	800c11a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d328:	4b1b      	ldr	r3, [pc, #108]	; (800d398 <xTaskIncrementTick+0x168>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d32e:	429a      	cmp	r2, r3
 800d330:	d3b8      	bcc.n	800d2a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d332:	2301      	movs	r3, #1
 800d334:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d336:	e7b5      	b.n	800d2a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d338:	4b17      	ldr	r3, [pc, #92]	; (800d398 <xTaskIncrementTick+0x168>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d33e:	4915      	ldr	r1, [pc, #84]	; (800d394 <xTaskIncrementTick+0x164>)
 800d340:	4613      	mov	r3, r2
 800d342:	009b      	lsls	r3, r3, #2
 800d344:	4413      	add	r3, r2
 800d346:	009b      	lsls	r3, r3, #2
 800d348:	440b      	add	r3, r1
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	2b01      	cmp	r3, #1
 800d34e:	d901      	bls.n	800d354 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d350:	2301      	movs	r3, #1
 800d352:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d354:	4b11      	ldr	r3, [pc, #68]	; (800d39c <xTaskIncrementTick+0x16c>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d007      	beq.n	800d36c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d35c:	2301      	movs	r3, #1
 800d35e:	617b      	str	r3, [r7, #20]
 800d360:	e004      	b.n	800d36c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d362:	4b0f      	ldr	r3, [pc, #60]	; (800d3a0 <xTaskIncrementTick+0x170>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	3301      	adds	r3, #1
 800d368:	4a0d      	ldr	r2, [pc, #52]	; (800d3a0 <xTaskIncrementTick+0x170>)
 800d36a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d36c:	697b      	ldr	r3, [r7, #20]
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3718      	adds	r7, #24
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
 800d376:	bf00      	nop
 800d378:	20001ae4 	.word	0x20001ae4
 800d37c:	20001ac0 	.word	0x20001ac0
 800d380:	20001a74 	.word	0x20001a74
 800d384:	20001a78 	.word	0x20001a78
 800d388:	20001ad4 	.word	0x20001ad4
 800d38c:	20001adc 	.word	0x20001adc
 800d390:	20001ac4 	.word	0x20001ac4
 800d394:	200015ec 	.word	0x200015ec
 800d398:	200015e8 	.word	0x200015e8
 800d39c:	20001ad0 	.word	0x20001ad0
 800d3a0:	20001acc 	.word	0x20001acc

0800d3a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b085      	sub	sp, #20
 800d3a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d3aa:	4b2a      	ldr	r3, [pc, #168]	; (800d454 <vTaskSwitchContext+0xb0>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d003      	beq.n	800d3ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d3b2:	4b29      	ldr	r3, [pc, #164]	; (800d458 <vTaskSwitchContext+0xb4>)
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d3b8:	e046      	b.n	800d448 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d3ba:	4b27      	ldr	r3, [pc, #156]	; (800d458 <vTaskSwitchContext+0xb4>)
 800d3bc:	2200      	movs	r2, #0
 800d3be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3c0:	4b26      	ldr	r3, [pc, #152]	; (800d45c <vTaskSwitchContext+0xb8>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	60fb      	str	r3, [r7, #12]
 800d3c6:	e010      	b.n	800d3ea <vTaskSwitchContext+0x46>
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d10a      	bne.n	800d3e4 <vTaskSwitchContext+0x40>
	__asm volatile
 800d3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d2:	f383 8811 	msr	BASEPRI, r3
 800d3d6:	f3bf 8f6f 	isb	sy
 800d3da:	f3bf 8f4f 	dsb	sy
 800d3de:	607b      	str	r3, [r7, #4]
}
 800d3e0:	bf00      	nop
 800d3e2:	e7fe      	b.n	800d3e2 <vTaskSwitchContext+0x3e>
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	3b01      	subs	r3, #1
 800d3e8:	60fb      	str	r3, [r7, #12]
 800d3ea:	491d      	ldr	r1, [pc, #116]	; (800d460 <vTaskSwitchContext+0xbc>)
 800d3ec:	68fa      	ldr	r2, [r7, #12]
 800d3ee:	4613      	mov	r3, r2
 800d3f0:	009b      	lsls	r3, r3, #2
 800d3f2:	4413      	add	r3, r2
 800d3f4:	009b      	lsls	r3, r3, #2
 800d3f6:	440b      	add	r3, r1
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d0e4      	beq.n	800d3c8 <vTaskSwitchContext+0x24>
 800d3fe:	68fa      	ldr	r2, [r7, #12]
 800d400:	4613      	mov	r3, r2
 800d402:	009b      	lsls	r3, r3, #2
 800d404:	4413      	add	r3, r2
 800d406:	009b      	lsls	r3, r3, #2
 800d408:	4a15      	ldr	r2, [pc, #84]	; (800d460 <vTaskSwitchContext+0xbc>)
 800d40a:	4413      	add	r3, r2
 800d40c:	60bb      	str	r3, [r7, #8]
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	685b      	ldr	r3, [r3, #4]
 800d412:	685a      	ldr	r2, [r3, #4]
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	605a      	str	r2, [r3, #4]
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	685a      	ldr	r2, [r3, #4]
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	3308      	adds	r3, #8
 800d420:	429a      	cmp	r2, r3
 800d422:	d104      	bne.n	800d42e <vTaskSwitchContext+0x8a>
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	685b      	ldr	r3, [r3, #4]
 800d428:	685a      	ldr	r2, [r3, #4]
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	605a      	str	r2, [r3, #4]
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	685b      	ldr	r3, [r3, #4]
 800d432:	68db      	ldr	r3, [r3, #12]
 800d434:	4a0b      	ldr	r2, [pc, #44]	; (800d464 <vTaskSwitchContext+0xc0>)
 800d436:	6013      	str	r3, [r2, #0]
 800d438:	4a08      	ldr	r2, [pc, #32]	; (800d45c <vTaskSwitchContext+0xb8>)
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d43e:	4b09      	ldr	r3, [pc, #36]	; (800d464 <vTaskSwitchContext+0xc0>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	3354      	adds	r3, #84	; 0x54
 800d444:	4a08      	ldr	r2, [pc, #32]	; (800d468 <vTaskSwitchContext+0xc4>)
 800d446:	6013      	str	r3, [r2, #0]
}
 800d448:	bf00      	nop
 800d44a:	3714      	adds	r7, #20
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr
 800d454:	20001ae4 	.word	0x20001ae4
 800d458:	20001ad0 	.word	0x20001ad0
 800d45c:	20001ac4 	.word	0x20001ac4
 800d460:	200015ec 	.word	0x200015ec
 800d464:	200015e8 	.word	0x200015e8
 800d468:	200001f0 	.word	0x200001f0

0800d46c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b084      	sub	sp, #16
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d10a      	bne.n	800d492 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d480:	f383 8811 	msr	BASEPRI, r3
 800d484:	f3bf 8f6f 	isb	sy
 800d488:	f3bf 8f4f 	dsb	sy
 800d48c:	60fb      	str	r3, [r7, #12]
}
 800d48e:	bf00      	nop
 800d490:	e7fe      	b.n	800d490 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d492:	4b07      	ldr	r3, [pc, #28]	; (800d4b0 <vTaskPlaceOnEventList+0x44>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	3318      	adds	r3, #24
 800d498:	4619      	mov	r1, r3
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f7fe fe61 	bl	800c162 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d4a0:	2101      	movs	r1, #1
 800d4a2:	6838      	ldr	r0, [r7, #0]
 800d4a4:	f000 fa80 	bl	800d9a8 <prvAddCurrentTaskToDelayedList>
}
 800d4a8:	bf00      	nop
 800d4aa:	3710      	adds	r7, #16
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}
 800d4b0:	200015e8 	.word	0x200015e8

0800d4b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b086      	sub	sp, #24
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	60f8      	str	r0, [r7, #12]
 800d4bc:	60b9      	str	r1, [r7, #8]
 800d4be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d10a      	bne.n	800d4dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ca:	f383 8811 	msr	BASEPRI, r3
 800d4ce:	f3bf 8f6f 	isb	sy
 800d4d2:	f3bf 8f4f 	dsb	sy
 800d4d6:	617b      	str	r3, [r7, #20]
}
 800d4d8:	bf00      	nop
 800d4da:	e7fe      	b.n	800d4da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d4dc:	4b0a      	ldr	r3, [pc, #40]	; (800d508 <vTaskPlaceOnEventListRestricted+0x54>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	3318      	adds	r3, #24
 800d4e2:	4619      	mov	r1, r3
 800d4e4:	68f8      	ldr	r0, [r7, #12]
 800d4e6:	f7fe fe18 	bl	800c11a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d002      	beq.n	800d4f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d4f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d4f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d4f6:	6879      	ldr	r1, [r7, #4]
 800d4f8:	68b8      	ldr	r0, [r7, #8]
 800d4fa:	f000 fa55 	bl	800d9a8 <prvAddCurrentTaskToDelayedList>
	}
 800d4fe:	bf00      	nop
 800d500:	3718      	adds	r7, #24
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
 800d506:	bf00      	nop
 800d508:	200015e8 	.word	0x200015e8

0800d50c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b086      	sub	sp, #24
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	68db      	ldr	r3, [r3, #12]
 800d518:	68db      	ldr	r3, [r3, #12]
 800d51a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d10a      	bne.n	800d538 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d526:	f383 8811 	msr	BASEPRI, r3
 800d52a:	f3bf 8f6f 	isb	sy
 800d52e:	f3bf 8f4f 	dsb	sy
 800d532:	60fb      	str	r3, [r7, #12]
}
 800d534:	bf00      	nop
 800d536:	e7fe      	b.n	800d536 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d538:	693b      	ldr	r3, [r7, #16]
 800d53a:	3318      	adds	r3, #24
 800d53c:	4618      	mov	r0, r3
 800d53e:	f7fe fe49 	bl	800c1d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d542:	4b1e      	ldr	r3, [pc, #120]	; (800d5bc <xTaskRemoveFromEventList+0xb0>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d11d      	bne.n	800d586 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	3304      	adds	r3, #4
 800d54e:	4618      	mov	r0, r3
 800d550:	f7fe fe40 	bl	800c1d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d558:	4b19      	ldr	r3, [pc, #100]	; (800d5c0 <xTaskRemoveFromEventList+0xb4>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d903      	bls.n	800d568 <xTaskRemoveFromEventList+0x5c>
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d564:	4a16      	ldr	r2, [pc, #88]	; (800d5c0 <xTaskRemoveFromEventList+0xb4>)
 800d566:	6013      	str	r3, [r2, #0]
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d56c:	4613      	mov	r3, r2
 800d56e:	009b      	lsls	r3, r3, #2
 800d570:	4413      	add	r3, r2
 800d572:	009b      	lsls	r3, r3, #2
 800d574:	4a13      	ldr	r2, [pc, #76]	; (800d5c4 <xTaskRemoveFromEventList+0xb8>)
 800d576:	441a      	add	r2, r3
 800d578:	693b      	ldr	r3, [r7, #16]
 800d57a:	3304      	adds	r3, #4
 800d57c:	4619      	mov	r1, r3
 800d57e:	4610      	mov	r0, r2
 800d580:	f7fe fdcb 	bl	800c11a <vListInsertEnd>
 800d584:	e005      	b.n	800d592 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	3318      	adds	r3, #24
 800d58a:	4619      	mov	r1, r3
 800d58c:	480e      	ldr	r0, [pc, #56]	; (800d5c8 <xTaskRemoveFromEventList+0xbc>)
 800d58e:	f7fe fdc4 	bl	800c11a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d592:	693b      	ldr	r3, [r7, #16]
 800d594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d596:	4b0d      	ldr	r3, [pc, #52]	; (800d5cc <xTaskRemoveFromEventList+0xc0>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d59c:	429a      	cmp	r2, r3
 800d59e:	d905      	bls.n	800d5ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d5a4:	4b0a      	ldr	r3, [pc, #40]	; (800d5d0 <xTaskRemoveFromEventList+0xc4>)
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	601a      	str	r2, [r3, #0]
 800d5aa:	e001      	b.n	800d5b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d5b0:	697b      	ldr	r3, [r7, #20]
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3718      	adds	r7, #24
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}
 800d5ba:	bf00      	nop
 800d5bc:	20001ae4 	.word	0x20001ae4
 800d5c0:	20001ac4 	.word	0x20001ac4
 800d5c4:	200015ec 	.word	0x200015ec
 800d5c8:	20001a7c 	.word	0x20001a7c
 800d5cc:	200015e8 	.word	0x200015e8
 800d5d0:	20001ad0 	.word	0x20001ad0

0800d5d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b083      	sub	sp, #12
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d5dc:	4b06      	ldr	r3, [pc, #24]	; (800d5f8 <vTaskInternalSetTimeOutState+0x24>)
 800d5de:	681a      	ldr	r2, [r3, #0]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d5e4:	4b05      	ldr	r3, [pc, #20]	; (800d5fc <vTaskInternalSetTimeOutState+0x28>)
 800d5e6:	681a      	ldr	r2, [r3, #0]
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	605a      	str	r2, [r3, #4]
}
 800d5ec:	bf00      	nop
 800d5ee:	370c      	adds	r7, #12
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f6:	4770      	bx	lr
 800d5f8:	20001ad4 	.word	0x20001ad4
 800d5fc:	20001ac0 	.word	0x20001ac0

0800d600 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b088      	sub	sp, #32
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
 800d608:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d10a      	bne.n	800d626 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d614:	f383 8811 	msr	BASEPRI, r3
 800d618:	f3bf 8f6f 	isb	sy
 800d61c:	f3bf 8f4f 	dsb	sy
 800d620:	613b      	str	r3, [r7, #16]
}
 800d622:	bf00      	nop
 800d624:	e7fe      	b.n	800d624 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d10a      	bne.n	800d642 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d630:	f383 8811 	msr	BASEPRI, r3
 800d634:	f3bf 8f6f 	isb	sy
 800d638:	f3bf 8f4f 	dsb	sy
 800d63c:	60fb      	str	r3, [r7, #12]
}
 800d63e:	bf00      	nop
 800d640:	e7fe      	b.n	800d640 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d642:	f000 fe7f 	bl	800e344 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d646:	4b1d      	ldr	r3, [pc, #116]	; (800d6bc <xTaskCheckForTimeOut+0xbc>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	685b      	ldr	r3, [r3, #4]
 800d650:	69ba      	ldr	r2, [r7, #24]
 800d652:	1ad3      	subs	r3, r2, r3
 800d654:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d65e:	d102      	bne.n	800d666 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d660:	2300      	movs	r3, #0
 800d662:	61fb      	str	r3, [r7, #28]
 800d664:	e023      	b.n	800d6ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681a      	ldr	r2, [r3, #0]
 800d66a:	4b15      	ldr	r3, [pc, #84]	; (800d6c0 <xTaskCheckForTimeOut+0xc0>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	429a      	cmp	r2, r3
 800d670:	d007      	beq.n	800d682 <xTaskCheckForTimeOut+0x82>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	685b      	ldr	r3, [r3, #4]
 800d676:	69ba      	ldr	r2, [r7, #24]
 800d678:	429a      	cmp	r2, r3
 800d67a:	d302      	bcc.n	800d682 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d67c:	2301      	movs	r3, #1
 800d67e:	61fb      	str	r3, [r7, #28]
 800d680:	e015      	b.n	800d6ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	697a      	ldr	r2, [r7, #20]
 800d688:	429a      	cmp	r2, r3
 800d68a:	d20b      	bcs.n	800d6a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	681a      	ldr	r2, [r3, #0]
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	1ad2      	subs	r2, r2, r3
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f7ff ff9b 	bl	800d5d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	61fb      	str	r3, [r7, #28]
 800d6a2:	e004      	b.n	800d6ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d6ae:	f000 fe79 	bl	800e3a4 <vPortExitCritical>

	return xReturn;
 800d6b2:	69fb      	ldr	r3, [r7, #28]
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3720      	adds	r7, #32
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}
 800d6bc:	20001ac0 	.word	0x20001ac0
 800d6c0:	20001ad4 	.word	0x20001ad4

0800d6c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d6c4:	b480      	push	{r7}
 800d6c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d6c8:	4b03      	ldr	r3, [pc, #12]	; (800d6d8 <vTaskMissedYield+0x14>)
 800d6ca:	2201      	movs	r2, #1
 800d6cc:	601a      	str	r2, [r3, #0]
}
 800d6ce:	bf00      	nop
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d6:	4770      	bx	lr
 800d6d8:	20001ad0 	.word	0x20001ad0

0800d6dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b082      	sub	sp, #8
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d6e4:	f000 f852 	bl	800d78c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d6e8:	4b06      	ldr	r3, [pc, #24]	; (800d704 <prvIdleTask+0x28>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	2b01      	cmp	r3, #1
 800d6ee:	d9f9      	bls.n	800d6e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d6f0:	4b05      	ldr	r3, [pc, #20]	; (800d708 <prvIdleTask+0x2c>)
 800d6f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6f6:	601a      	str	r2, [r3, #0]
 800d6f8:	f3bf 8f4f 	dsb	sy
 800d6fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d700:	e7f0      	b.n	800d6e4 <prvIdleTask+0x8>
 800d702:	bf00      	nop
 800d704:	200015ec 	.word	0x200015ec
 800d708:	e000ed04 	.word	0xe000ed04

0800d70c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b082      	sub	sp, #8
 800d710:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d712:	2300      	movs	r3, #0
 800d714:	607b      	str	r3, [r7, #4]
 800d716:	e00c      	b.n	800d732 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d718:	687a      	ldr	r2, [r7, #4]
 800d71a:	4613      	mov	r3, r2
 800d71c:	009b      	lsls	r3, r3, #2
 800d71e:	4413      	add	r3, r2
 800d720:	009b      	lsls	r3, r3, #2
 800d722:	4a12      	ldr	r2, [pc, #72]	; (800d76c <prvInitialiseTaskLists+0x60>)
 800d724:	4413      	add	r3, r2
 800d726:	4618      	mov	r0, r3
 800d728:	f7fe fcca 	bl	800c0c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	3301      	adds	r3, #1
 800d730:	607b      	str	r3, [r7, #4]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2b37      	cmp	r3, #55	; 0x37
 800d736:	d9ef      	bls.n	800d718 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d738:	480d      	ldr	r0, [pc, #52]	; (800d770 <prvInitialiseTaskLists+0x64>)
 800d73a:	f7fe fcc1 	bl	800c0c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d73e:	480d      	ldr	r0, [pc, #52]	; (800d774 <prvInitialiseTaskLists+0x68>)
 800d740:	f7fe fcbe 	bl	800c0c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d744:	480c      	ldr	r0, [pc, #48]	; (800d778 <prvInitialiseTaskLists+0x6c>)
 800d746:	f7fe fcbb 	bl	800c0c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d74a:	480c      	ldr	r0, [pc, #48]	; (800d77c <prvInitialiseTaskLists+0x70>)
 800d74c:	f7fe fcb8 	bl	800c0c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d750:	480b      	ldr	r0, [pc, #44]	; (800d780 <prvInitialiseTaskLists+0x74>)
 800d752:	f7fe fcb5 	bl	800c0c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d756:	4b0b      	ldr	r3, [pc, #44]	; (800d784 <prvInitialiseTaskLists+0x78>)
 800d758:	4a05      	ldr	r2, [pc, #20]	; (800d770 <prvInitialiseTaskLists+0x64>)
 800d75a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d75c:	4b0a      	ldr	r3, [pc, #40]	; (800d788 <prvInitialiseTaskLists+0x7c>)
 800d75e:	4a05      	ldr	r2, [pc, #20]	; (800d774 <prvInitialiseTaskLists+0x68>)
 800d760:	601a      	str	r2, [r3, #0]
}
 800d762:	bf00      	nop
 800d764:	3708      	adds	r7, #8
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}
 800d76a:	bf00      	nop
 800d76c:	200015ec 	.word	0x200015ec
 800d770:	20001a4c 	.word	0x20001a4c
 800d774:	20001a60 	.word	0x20001a60
 800d778:	20001a7c 	.word	0x20001a7c
 800d77c:	20001a90 	.word	0x20001a90
 800d780:	20001aa8 	.word	0x20001aa8
 800d784:	20001a74 	.word	0x20001a74
 800d788:	20001a78 	.word	0x20001a78

0800d78c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b082      	sub	sp, #8
 800d790:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d792:	e019      	b.n	800d7c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d794:	f000 fdd6 	bl	800e344 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d798:	4b10      	ldr	r3, [pc, #64]	; (800d7dc <prvCheckTasksWaitingTermination+0x50>)
 800d79a:	68db      	ldr	r3, [r3, #12]
 800d79c:	68db      	ldr	r3, [r3, #12]
 800d79e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	3304      	adds	r3, #4
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f7fe fd15 	bl	800c1d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d7aa:	4b0d      	ldr	r3, [pc, #52]	; (800d7e0 <prvCheckTasksWaitingTermination+0x54>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	3b01      	subs	r3, #1
 800d7b0:	4a0b      	ldr	r2, [pc, #44]	; (800d7e0 <prvCheckTasksWaitingTermination+0x54>)
 800d7b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d7b4:	4b0b      	ldr	r3, [pc, #44]	; (800d7e4 <prvCheckTasksWaitingTermination+0x58>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	3b01      	subs	r3, #1
 800d7ba:	4a0a      	ldr	r2, [pc, #40]	; (800d7e4 <prvCheckTasksWaitingTermination+0x58>)
 800d7bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d7be:	f000 fdf1 	bl	800e3a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f000 f810 	bl	800d7e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d7c8:	4b06      	ldr	r3, [pc, #24]	; (800d7e4 <prvCheckTasksWaitingTermination+0x58>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d1e1      	bne.n	800d794 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d7d0:	bf00      	nop
 800d7d2:	bf00      	nop
 800d7d4:	3708      	adds	r7, #8
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
 800d7da:	bf00      	nop
 800d7dc:	20001a90 	.word	0x20001a90
 800d7e0:	20001abc 	.word	0x20001abc
 800d7e4:	20001aa4 	.word	0x20001aa4

0800d7e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b084      	sub	sp, #16
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	3354      	adds	r3, #84	; 0x54
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f001 ff29 	bl	800f64c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d800:	2b00      	cmp	r3, #0
 800d802:	d108      	bne.n	800d816 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d808:	4618      	mov	r0, r3
 800d80a:	f000 ff89 	bl	800e720 <vPortFree>
				vPortFree( pxTCB );
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f000 ff86 	bl	800e720 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d814:	e018      	b.n	800d848 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d81c:	2b01      	cmp	r3, #1
 800d81e:	d103      	bne.n	800d828 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f000 ff7d 	bl	800e720 <vPortFree>
	}
 800d826:	e00f      	b.n	800d848 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d82e:	2b02      	cmp	r3, #2
 800d830:	d00a      	beq.n	800d848 <prvDeleteTCB+0x60>
	__asm volatile
 800d832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d836:	f383 8811 	msr	BASEPRI, r3
 800d83a:	f3bf 8f6f 	isb	sy
 800d83e:	f3bf 8f4f 	dsb	sy
 800d842:	60fb      	str	r3, [r7, #12]
}
 800d844:	bf00      	nop
 800d846:	e7fe      	b.n	800d846 <prvDeleteTCB+0x5e>
	}
 800d848:	bf00      	nop
 800d84a:	3710      	adds	r7, #16
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}

0800d850 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d850:	b480      	push	{r7}
 800d852:	b083      	sub	sp, #12
 800d854:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d856:	4b0c      	ldr	r3, [pc, #48]	; (800d888 <prvResetNextTaskUnblockTime+0x38>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d104      	bne.n	800d86a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d860:	4b0a      	ldr	r3, [pc, #40]	; (800d88c <prvResetNextTaskUnblockTime+0x3c>)
 800d862:	f04f 32ff 	mov.w	r2, #4294967295
 800d866:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d868:	e008      	b.n	800d87c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d86a:	4b07      	ldr	r3, [pc, #28]	; (800d888 <prvResetNextTaskUnblockTime+0x38>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	68db      	ldr	r3, [r3, #12]
 800d870:	68db      	ldr	r3, [r3, #12]
 800d872:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	4a04      	ldr	r2, [pc, #16]	; (800d88c <prvResetNextTaskUnblockTime+0x3c>)
 800d87a:	6013      	str	r3, [r2, #0]
}
 800d87c:	bf00      	nop
 800d87e:	370c      	adds	r7, #12
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr
 800d888:	20001a74 	.word	0x20001a74
 800d88c:	20001adc 	.word	0x20001adc

0800d890 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d890:	b480      	push	{r7}
 800d892:	b083      	sub	sp, #12
 800d894:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d896:	4b0b      	ldr	r3, [pc, #44]	; (800d8c4 <xTaskGetSchedulerState+0x34>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d102      	bne.n	800d8a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d89e:	2301      	movs	r3, #1
 800d8a0:	607b      	str	r3, [r7, #4]
 800d8a2:	e008      	b.n	800d8b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d8a4:	4b08      	ldr	r3, [pc, #32]	; (800d8c8 <xTaskGetSchedulerState+0x38>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d102      	bne.n	800d8b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d8ac:	2302      	movs	r3, #2
 800d8ae:	607b      	str	r3, [r7, #4]
 800d8b0:	e001      	b.n	800d8b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d8b6:	687b      	ldr	r3, [r7, #4]
	}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	370c      	adds	r7, #12
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c2:	4770      	bx	lr
 800d8c4:	20001ac8 	.word	0x20001ac8
 800d8c8:	20001ae4 	.word	0x20001ae4

0800d8cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b086      	sub	sp, #24
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d056      	beq.n	800d990 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d8e2:	4b2e      	ldr	r3, [pc, #184]	; (800d99c <xTaskPriorityDisinherit+0xd0>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	693a      	ldr	r2, [r7, #16]
 800d8e8:	429a      	cmp	r2, r3
 800d8ea:	d00a      	beq.n	800d902 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f0:	f383 8811 	msr	BASEPRI, r3
 800d8f4:	f3bf 8f6f 	isb	sy
 800d8f8:	f3bf 8f4f 	dsb	sy
 800d8fc:	60fb      	str	r3, [r7, #12]
}
 800d8fe:	bf00      	nop
 800d900:	e7fe      	b.n	800d900 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d906:	2b00      	cmp	r3, #0
 800d908:	d10a      	bne.n	800d920 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d90e:	f383 8811 	msr	BASEPRI, r3
 800d912:	f3bf 8f6f 	isb	sy
 800d916:	f3bf 8f4f 	dsb	sy
 800d91a:	60bb      	str	r3, [r7, #8]
}
 800d91c:	bf00      	nop
 800d91e:	e7fe      	b.n	800d91e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d924:	1e5a      	subs	r2, r3, #1
 800d926:	693b      	ldr	r3, [r7, #16]
 800d928:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d92a:	693b      	ldr	r3, [r7, #16]
 800d92c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d932:	429a      	cmp	r2, r3
 800d934:	d02c      	beq.n	800d990 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d128      	bne.n	800d990 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	3304      	adds	r3, #4
 800d942:	4618      	mov	r0, r3
 800d944:	f7fe fc46 	bl	800c1d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d94c:	693b      	ldr	r3, [r7, #16]
 800d94e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d954:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d960:	4b0f      	ldr	r3, [pc, #60]	; (800d9a0 <xTaskPriorityDisinherit+0xd4>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	429a      	cmp	r2, r3
 800d966:	d903      	bls.n	800d970 <xTaskPriorityDisinherit+0xa4>
 800d968:	693b      	ldr	r3, [r7, #16]
 800d96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d96c:	4a0c      	ldr	r2, [pc, #48]	; (800d9a0 <xTaskPriorityDisinherit+0xd4>)
 800d96e:	6013      	str	r3, [r2, #0]
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d974:	4613      	mov	r3, r2
 800d976:	009b      	lsls	r3, r3, #2
 800d978:	4413      	add	r3, r2
 800d97a:	009b      	lsls	r3, r3, #2
 800d97c:	4a09      	ldr	r2, [pc, #36]	; (800d9a4 <xTaskPriorityDisinherit+0xd8>)
 800d97e:	441a      	add	r2, r3
 800d980:	693b      	ldr	r3, [r7, #16]
 800d982:	3304      	adds	r3, #4
 800d984:	4619      	mov	r1, r3
 800d986:	4610      	mov	r0, r2
 800d988:	f7fe fbc7 	bl	800c11a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d98c:	2301      	movs	r3, #1
 800d98e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d990:	697b      	ldr	r3, [r7, #20]
	}
 800d992:	4618      	mov	r0, r3
 800d994:	3718      	adds	r7, #24
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}
 800d99a:	bf00      	nop
 800d99c:	200015e8 	.word	0x200015e8
 800d9a0:	20001ac4 	.word	0x20001ac4
 800d9a4:	200015ec 	.word	0x200015ec

0800d9a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b084      	sub	sp, #16
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d9b2:	4b21      	ldr	r3, [pc, #132]	; (800da38 <prvAddCurrentTaskToDelayedList+0x90>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d9b8:	4b20      	ldr	r3, [pc, #128]	; (800da3c <prvAddCurrentTaskToDelayedList+0x94>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	3304      	adds	r3, #4
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f7fe fc08 	bl	800c1d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ca:	d10a      	bne.n	800d9e2 <prvAddCurrentTaskToDelayedList+0x3a>
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d007      	beq.n	800d9e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d9d2:	4b1a      	ldr	r3, [pc, #104]	; (800da3c <prvAddCurrentTaskToDelayedList+0x94>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	3304      	adds	r3, #4
 800d9d8:	4619      	mov	r1, r3
 800d9da:	4819      	ldr	r0, [pc, #100]	; (800da40 <prvAddCurrentTaskToDelayedList+0x98>)
 800d9dc:	f7fe fb9d 	bl	800c11a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d9e0:	e026      	b.n	800da30 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d9e2:	68fa      	ldr	r2, [r7, #12]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	4413      	add	r3, r2
 800d9e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d9ea:	4b14      	ldr	r3, [pc, #80]	; (800da3c <prvAddCurrentTaskToDelayedList+0x94>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	68ba      	ldr	r2, [r7, #8]
 800d9f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d9f2:	68ba      	ldr	r2, [r7, #8]
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d209      	bcs.n	800da0e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d9fa:	4b12      	ldr	r3, [pc, #72]	; (800da44 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d9fc:	681a      	ldr	r2, [r3, #0]
 800d9fe:	4b0f      	ldr	r3, [pc, #60]	; (800da3c <prvAddCurrentTaskToDelayedList+0x94>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	3304      	adds	r3, #4
 800da04:	4619      	mov	r1, r3
 800da06:	4610      	mov	r0, r2
 800da08:	f7fe fbab 	bl	800c162 <vListInsert>
}
 800da0c:	e010      	b.n	800da30 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da0e:	4b0e      	ldr	r3, [pc, #56]	; (800da48 <prvAddCurrentTaskToDelayedList+0xa0>)
 800da10:	681a      	ldr	r2, [r3, #0]
 800da12:	4b0a      	ldr	r3, [pc, #40]	; (800da3c <prvAddCurrentTaskToDelayedList+0x94>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	3304      	adds	r3, #4
 800da18:	4619      	mov	r1, r3
 800da1a:	4610      	mov	r0, r2
 800da1c:	f7fe fba1 	bl	800c162 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800da20:	4b0a      	ldr	r3, [pc, #40]	; (800da4c <prvAddCurrentTaskToDelayedList+0xa4>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	68ba      	ldr	r2, [r7, #8]
 800da26:	429a      	cmp	r2, r3
 800da28:	d202      	bcs.n	800da30 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800da2a:	4a08      	ldr	r2, [pc, #32]	; (800da4c <prvAddCurrentTaskToDelayedList+0xa4>)
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	6013      	str	r3, [r2, #0]
}
 800da30:	bf00      	nop
 800da32:	3710      	adds	r7, #16
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}
 800da38:	20001ac0 	.word	0x20001ac0
 800da3c:	200015e8 	.word	0x200015e8
 800da40:	20001aa8 	.word	0x20001aa8
 800da44:	20001a78 	.word	0x20001a78
 800da48:	20001a74 	.word	0x20001a74
 800da4c:	20001adc 	.word	0x20001adc

0800da50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b08a      	sub	sp, #40	; 0x28
 800da54:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800da56:	2300      	movs	r3, #0
 800da58:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800da5a:	f000 fb07 	bl	800e06c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800da5e:	4b1c      	ldr	r3, [pc, #112]	; (800dad0 <xTimerCreateTimerTask+0x80>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d021      	beq.n	800daaa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800da66:	2300      	movs	r3, #0
 800da68:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800da6a:	2300      	movs	r3, #0
 800da6c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800da6e:	1d3a      	adds	r2, r7, #4
 800da70:	f107 0108 	add.w	r1, r7, #8
 800da74:	f107 030c 	add.w	r3, r7, #12
 800da78:	4618      	mov	r0, r3
 800da7a:	f7fe fb07 	bl	800c08c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800da7e:	6879      	ldr	r1, [r7, #4]
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	68fa      	ldr	r2, [r7, #12]
 800da84:	9202      	str	r2, [sp, #8]
 800da86:	9301      	str	r3, [sp, #4]
 800da88:	2302      	movs	r3, #2
 800da8a:	9300      	str	r3, [sp, #0]
 800da8c:	2300      	movs	r3, #0
 800da8e:	460a      	mov	r2, r1
 800da90:	4910      	ldr	r1, [pc, #64]	; (800dad4 <xTimerCreateTimerTask+0x84>)
 800da92:	4811      	ldr	r0, [pc, #68]	; (800dad8 <xTimerCreateTimerTask+0x88>)
 800da94:	f7ff f8b4 	bl	800cc00 <xTaskCreateStatic>
 800da98:	4603      	mov	r3, r0
 800da9a:	4a10      	ldr	r2, [pc, #64]	; (800dadc <xTimerCreateTimerTask+0x8c>)
 800da9c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800da9e:	4b0f      	ldr	r3, [pc, #60]	; (800dadc <xTimerCreateTimerTask+0x8c>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d001      	beq.n	800daaa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800daa6:	2301      	movs	r3, #1
 800daa8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d10a      	bne.n	800dac6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800dab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab4:	f383 8811 	msr	BASEPRI, r3
 800dab8:	f3bf 8f6f 	isb	sy
 800dabc:	f3bf 8f4f 	dsb	sy
 800dac0:	613b      	str	r3, [r7, #16]
}
 800dac2:	bf00      	nop
 800dac4:	e7fe      	b.n	800dac4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dac6:	697b      	ldr	r3, [r7, #20]
}
 800dac8:	4618      	mov	r0, r3
 800daca:	3718      	adds	r7, #24
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}
 800dad0:	20001b18 	.word	0x20001b18
 800dad4:	08011d44 	.word	0x08011d44
 800dad8:	0800dc15 	.word	0x0800dc15
 800dadc:	20001b1c 	.word	0x20001b1c

0800dae0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b08a      	sub	sp, #40	; 0x28
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	60f8      	str	r0, [r7, #12]
 800dae8:	60b9      	str	r1, [r7, #8]
 800daea:	607a      	str	r2, [r7, #4]
 800daec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800daee:	2300      	movs	r3, #0
 800daf0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d10a      	bne.n	800db0e <xTimerGenericCommand+0x2e>
	__asm volatile
 800daf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dafc:	f383 8811 	msr	BASEPRI, r3
 800db00:	f3bf 8f6f 	isb	sy
 800db04:	f3bf 8f4f 	dsb	sy
 800db08:	623b      	str	r3, [r7, #32]
}
 800db0a:	bf00      	nop
 800db0c:	e7fe      	b.n	800db0c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800db0e:	4b1a      	ldr	r3, [pc, #104]	; (800db78 <xTimerGenericCommand+0x98>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d02a      	beq.n	800db6c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	2b05      	cmp	r3, #5
 800db26:	dc18      	bgt.n	800db5a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800db28:	f7ff feb2 	bl	800d890 <xTaskGetSchedulerState>
 800db2c:	4603      	mov	r3, r0
 800db2e:	2b02      	cmp	r3, #2
 800db30:	d109      	bne.n	800db46 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800db32:	4b11      	ldr	r3, [pc, #68]	; (800db78 <xTimerGenericCommand+0x98>)
 800db34:	6818      	ldr	r0, [r3, #0]
 800db36:	f107 0110 	add.w	r1, r7, #16
 800db3a:	2300      	movs	r3, #0
 800db3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db3e:	f7fe fc77 	bl	800c430 <xQueueGenericSend>
 800db42:	6278      	str	r0, [r7, #36]	; 0x24
 800db44:	e012      	b.n	800db6c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800db46:	4b0c      	ldr	r3, [pc, #48]	; (800db78 <xTimerGenericCommand+0x98>)
 800db48:	6818      	ldr	r0, [r3, #0]
 800db4a:	f107 0110 	add.w	r1, r7, #16
 800db4e:	2300      	movs	r3, #0
 800db50:	2200      	movs	r2, #0
 800db52:	f7fe fc6d 	bl	800c430 <xQueueGenericSend>
 800db56:	6278      	str	r0, [r7, #36]	; 0x24
 800db58:	e008      	b.n	800db6c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800db5a:	4b07      	ldr	r3, [pc, #28]	; (800db78 <xTimerGenericCommand+0x98>)
 800db5c:	6818      	ldr	r0, [r3, #0]
 800db5e:	f107 0110 	add.w	r1, r7, #16
 800db62:	2300      	movs	r3, #0
 800db64:	683a      	ldr	r2, [r7, #0]
 800db66:	f7fe fd61 	bl	800c62c <xQueueGenericSendFromISR>
 800db6a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800db6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3728      	adds	r7, #40	; 0x28
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}
 800db76:	bf00      	nop
 800db78:	20001b18 	.word	0x20001b18

0800db7c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b088      	sub	sp, #32
 800db80:	af02      	add	r7, sp, #8
 800db82:	6078      	str	r0, [r7, #4]
 800db84:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db86:	4b22      	ldr	r3, [pc, #136]	; (800dc10 <prvProcessExpiredTimer+0x94>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	68db      	ldr	r3, [r3, #12]
 800db8c:	68db      	ldr	r3, [r3, #12]
 800db8e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	3304      	adds	r3, #4
 800db94:	4618      	mov	r0, r3
 800db96:	f7fe fb1d 	bl	800c1d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dba0:	f003 0304 	and.w	r3, r3, #4
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d022      	beq.n	800dbee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	699a      	ldr	r2, [r3, #24]
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	18d1      	adds	r1, r2, r3
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	683a      	ldr	r2, [r7, #0]
 800dbb4:	6978      	ldr	r0, [r7, #20]
 800dbb6:	f000 f8d1 	bl	800dd5c <prvInsertTimerInActiveList>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d01f      	beq.n	800dc00 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	9300      	str	r3, [sp, #0]
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	687a      	ldr	r2, [r7, #4]
 800dbc8:	2100      	movs	r1, #0
 800dbca:	6978      	ldr	r0, [r7, #20]
 800dbcc:	f7ff ff88 	bl	800dae0 <xTimerGenericCommand>
 800dbd0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d113      	bne.n	800dc00 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800dbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbdc:	f383 8811 	msr	BASEPRI, r3
 800dbe0:	f3bf 8f6f 	isb	sy
 800dbe4:	f3bf 8f4f 	dsb	sy
 800dbe8:	60fb      	str	r3, [r7, #12]
}
 800dbea:	bf00      	nop
 800dbec:	e7fe      	b.n	800dbec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dbf4:	f023 0301 	bic.w	r3, r3, #1
 800dbf8:	b2da      	uxtb	r2, r3
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	6a1b      	ldr	r3, [r3, #32]
 800dc04:	6978      	ldr	r0, [r7, #20]
 800dc06:	4798      	blx	r3
}
 800dc08:	bf00      	nop
 800dc0a:	3718      	adds	r7, #24
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}
 800dc10:	20001b10 	.word	0x20001b10

0800dc14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b084      	sub	sp, #16
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dc1c:	f107 0308 	add.w	r3, r7, #8
 800dc20:	4618      	mov	r0, r3
 800dc22:	f000 f857 	bl	800dcd4 <prvGetNextExpireTime>
 800dc26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	68f8      	ldr	r0, [r7, #12]
 800dc2e:	f000 f803 	bl	800dc38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dc32:	f000 f8d5 	bl	800dde0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dc36:	e7f1      	b.n	800dc1c <prvTimerTask+0x8>

0800dc38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b084      	sub	sp, #16
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dc42:	f7ff fa39 	bl	800d0b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dc46:	f107 0308 	add.w	r3, r7, #8
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f000 f866 	bl	800dd1c <prvSampleTimeNow>
 800dc50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d130      	bne.n	800dcba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d10a      	bne.n	800dc74 <prvProcessTimerOrBlockTask+0x3c>
 800dc5e:	687a      	ldr	r2, [r7, #4]
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d806      	bhi.n	800dc74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dc66:	f7ff fa35 	bl	800d0d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dc6a:	68f9      	ldr	r1, [r7, #12]
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f7ff ff85 	bl	800db7c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dc72:	e024      	b.n	800dcbe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d008      	beq.n	800dc8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dc7a:	4b13      	ldr	r3, [pc, #76]	; (800dcc8 <prvProcessTimerOrBlockTask+0x90>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d101      	bne.n	800dc88 <prvProcessTimerOrBlockTask+0x50>
 800dc84:	2301      	movs	r3, #1
 800dc86:	e000      	b.n	800dc8a <prvProcessTimerOrBlockTask+0x52>
 800dc88:	2300      	movs	r3, #0
 800dc8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dc8c:	4b0f      	ldr	r3, [pc, #60]	; (800dccc <prvProcessTimerOrBlockTask+0x94>)
 800dc8e:	6818      	ldr	r0, [r3, #0]
 800dc90:	687a      	ldr	r2, [r7, #4]
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	1ad3      	subs	r3, r2, r3
 800dc96:	683a      	ldr	r2, [r7, #0]
 800dc98:	4619      	mov	r1, r3
 800dc9a:	f7fe ff7d 	bl	800cb98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dc9e:	f7ff fa19 	bl	800d0d4 <xTaskResumeAll>
 800dca2:	4603      	mov	r3, r0
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d10a      	bne.n	800dcbe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dca8:	4b09      	ldr	r3, [pc, #36]	; (800dcd0 <prvProcessTimerOrBlockTask+0x98>)
 800dcaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcae:	601a      	str	r2, [r3, #0]
 800dcb0:	f3bf 8f4f 	dsb	sy
 800dcb4:	f3bf 8f6f 	isb	sy
}
 800dcb8:	e001      	b.n	800dcbe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dcba:	f7ff fa0b 	bl	800d0d4 <xTaskResumeAll>
}
 800dcbe:	bf00      	nop
 800dcc0:	3710      	adds	r7, #16
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
 800dcc6:	bf00      	nop
 800dcc8:	20001b14 	.word	0x20001b14
 800dccc:	20001b18 	.word	0x20001b18
 800dcd0:	e000ed04 	.word	0xe000ed04

0800dcd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b085      	sub	sp, #20
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dcdc:	4b0e      	ldr	r3, [pc, #56]	; (800dd18 <prvGetNextExpireTime+0x44>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d101      	bne.n	800dcea <prvGetNextExpireTime+0x16>
 800dce6:	2201      	movs	r2, #1
 800dce8:	e000      	b.n	800dcec <prvGetNextExpireTime+0x18>
 800dcea:	2200      	movs	r2, #0
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d105      	bne.n	800dd04 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dcf8:	4b07      	ldr	r3, [pc, #28]	; (800dd18 <prvGetNextExpireTime+0x44>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	68db      	ldr	r3, [r3, #12]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	60fb      	str	r3, [r7, #12]
 800dd02:	e001      	b.n	800dd08 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dd04:	2300      	movs	r3, #0
 800dd06:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dd08:	68fb      	ldr	r3, [r7, #12]
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3714      	adds	r7, #20
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd14:	4770      	bx	lr
 800dd16:	bf00      	nop
 800dd18:	20001b10 	.word	0x20001b10

0800dd1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b084      	sub	sp, #16
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dd24:	f7ff fa74 	bl	800d210 <xTaskGetTickCount>
 800dd28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dd2a:	4b0b      	ldr	r3, [pc, #44]	; (800dd58 <prvSampleTimeNow+0x3c>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	68fa      	ldr	r2, [r7, #12]
 800dd30:	429a      	cmp	r2, r3
 800dd32:	d205      	bcs.n	800dd40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dd34:	f000 f936 	bl	800dfa4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2201      	movs	r2, #1
 800dd3c:	601a      	str	r2, [r3, #0]
 800dd3e:	e002      	b.n	800dd46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2200      	movs	r2, #0
 800dd44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dd46:	4a04      	ldr	r2, [pc, #16]	; (800dd58 <prvSampleTimeNow+0x3c>)
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
}
 800dd4e:	4618      	mov	r0, r3
 800dd50:	3710      	adds	r7, #16
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}
 800dd56:	bf00      	nop
 800dd58:	20001b20 	.word	0x20001b20

0800dd5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b086      	sub	sp, #24
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	60f8      	str	r0, [r7, #12]
 800dd64:	60b9      	str	r1, [r7, #8]
 800dd66:	607a      	str	r2, [r7, #4]
 800dd68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	68ba      	ldr	r2, [r7, #8]
 800dd72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	68fa      	ldr	r2, [r7, #12]
 800dd78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dd7a:	68ba      	ldr	r2, [r7, #8]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	429a      	cmp	r2, r3
 800dd80:	d812      	bhi.n	800dda8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd82:	687a      	ldr	r2, [r7, #4]
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	1ad2      	subs	r2, r2, r3
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	699b      	ldr	r3, [r3, #24]
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d302      	bcc.n	800dd96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dd90:	2301      	movs	r3, #1
 800dd92:	617b      	str	r3, [r7, #20]
 800dd94:	e01b      	b.n	800ddce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dd96:	4b10      	ldr	r3, [pc, #64]	; (800ddd8 <prvInsertTimerInActiveList+0x7c>)
 800dd98:	681a      	ldr	r2, [r3, #0]
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	3304      	adds	r3, #4
 800dd9e:	4619      	mov	r1, r3
 800dda0:	4610      	mov	r0, r2
 800dda2:	f7fe f9de 	bl	800c162 <vListInsert>
 800dda6:	e012      	b.n	800ddce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dda8:	687a      	ldr	r2, [r7, #4]
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	429a      	cmp	r2, r3
 800ddae:	d206      	bcs.n	800ddbe <prvInsertTimerInActiveList+0x62>
 800ddb0:	68ba      	ldr	r2, [r7, #8]
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	d302      	bcc.n	800ddbe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ddb8:	2301      	movs	r3, #1
 800ddba:	617b      	str	r3, [r7, #20]
 800ddbc:	e007      	b.n	800ddce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ddbe:	4b07      	ldr	r3, [pc, #28]	; (800dddc <prvInsertTimerInActiveList+0x80>)
 800ddc0:	681a      	ldr	r2, [r3, #0]
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	3304      	adds	r3, #4
 800ddc6:	4619      	mov	r1, r3
 800ddc8:	4610      	mov	r0, r2
 800ddca:	f7fe f9ca 	bl	800c162 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ddce:	697b      	ldr	r3, [r7, #20]
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3718      	adds	r7, #24
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}
 800ddd8:	20001b14 	.word	0x20001b14
 800dddc:	20001b10 	.word	0x20001b10

0800dde0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b08e      	sub	sp, #56	; 0x38
 800dde4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dde6:	e0ca      	b.n	800df7e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	da18      	bge.n	800de20 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ddee:	1d3b      	adds	r3, r7, #4
 800ddf0:	3304      	adds	r3, #4
 800ddf2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ddf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d10a      	bne.n	800de10 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ddfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddfe:	f383 8811 	msr	BASEPRI, r3
 800de02:	f3bf 8f6f 	isb	sy
 800de06:	f3bf 8f4f 	dsb	sy
 800de0a:	61fb      	str	r3, [r7, #28]
}
 800de0c:	bf00      	nop
 800de0e:	e7fe      	b.n	800de0e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800de10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de16:	6850      	ldr	r0, [r2, #4]
 800de18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de1a:	6892      	ldr	r2, [r2, #8]
 800de1c:	4611      	mov	r1, r2
 800de1e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2b00      	cmp	r3, #0
 800de24:	f2c0 80ab 	blt.w	800df7e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800de2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2e:	695b      	ldr	r3, [r3, #20]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d004      	beq.n	800de3e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de36:	3304      	adds	r3, #4
 800de38:	4618      	mov	r0, r3
 800de3a:	f7fe f9cb 	bl	800c1d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800de3e:	463b      	mov	r3, r7
 800de40:	4618      	mov	r0, r3
 800de42:	f7ff ff6b 	bl	800dd1c <prvSampleTimeNow>
 800de46:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2b09      	cmp	r3, #9
 800de4c:	f200 8096 	bhi.w	800df7c <prvProcessReceivedCommands+0x19c>
 800de50:	a201      	add	r2, pc, #4	; (adr r2, 800de58 <prvProcessReceivedCommands+0x78>)
 800de52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de56:	bf00      	nop
 800de58:	0800de81 	.word	0x0800de81
 800de5c:	0800de81 	.word	0x0800de81
 800de60:	0800de81 	.word	0x0800de81
 800de64:	0800def5 	.word	0x0800def5
 800de68:	0800df09 	.word	0x0800df09
 800de6c:	0800df53 	.word	0x0800df53
 800de70:	0800de81 	.word	0x0800de81
 800de74:	0800de81 	.word	0x0800de81
 800de78:	0800def5 	.word	0x0800def5
 800de7c:	0800df09 	.word	0x0800df09
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800de80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de86:	f043 0301 	orr.w	r3, r3, #1
 800de8a:	b2da      	uxtb	r2, r3
 800de8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800de92:	68ba      	ldr	r2, [r7, #8]
 800de94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de96:	699b      	ldr	r3, [r3, #24]
 800de98:	18d1      	adds	r1, r2, r3
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dea0:	f7ff ff5c 	bl	800dd5c <prvInsertTimerInActiveList>
 800dea4:	4603      	mov	r3, r0
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d069      	beq.n	800df7e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800deaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deac:	6a1b      	ldr	r3, [r3, #32]
 800deae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800deb0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800deb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800deb8:	f003 0304 	and.w	r3, r3, #4
 800debc:	2b00      	cmp	r3, #0
 800debe:	d05e      	beq.n	800df7e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dec0:	68ba      	ldr	r2, [r7, #8]
 800dec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec4:	699b      	ldr	r3, [r3, #24]
 800dec6:	441a      	add	r2, r3
 800dec8:	2300      	movs	r3, #0
 800deca:	9300      	str	r3, [sp, #0]
 800decc:	2300      	movs	r3, #0
 800dece:	2100      	movs	r1, #0
 800ded0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ded2:	f7ff fe05 	bl	800dae0 <xTimerGenericCommand>
 800ded6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ded8:	6a3b      	ldr	r3, [r7, #32]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d14f      	bne.n	800df7e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800dede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee2:	f383 8811 	msr	BASEPRI, r3
 800dee6:	f3bf 8f6f 	isb	sy
 800deea:	f3bf 8f4f 	dsb	sy
 800deee:	61bb      	str	r3, [r7, #24]
}
 800def0:	bf00      	nop
 800def2:	e7fe      	b.n	800def2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800def4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800defa:	f023 0301 	bic.w	r3, r3, #1
 800defe:	b2da      	uxtb	r2, r3
 800df00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800df06:	e03a      	b.n	800df7e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800df08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df0e:	f043 0301 	orr.w	r3, r3, #1
 800df12:	b2da      	uxtb	r2, r3
 800df14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800df1a:	68ba      	ldr	r2, [r7, #8]
 800df1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800df20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df22:	699b      	ldr	r3, [r3, #24]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d10a      	bne.n	800df3e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800df28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df2c:	f383 8811 	msr	BASEPRI, r3
 800df30:	f3bf 8f6f 	isb	sy
 800df34:	f3bf 8f4f 	dsb	sy
 800df38:	617b      	str	r3, [r7, #20]
}
 800df3a:	bf00      	nop
 800df3c:	e7fe      	b.n	800df3c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800df3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df40:	699a      	ldr	r2, [r3, #24]
 800df42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df44:	18d1      	adds	r1, r2, r3
 800df46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df4c:	f7ff ff06 	bl	800dd5c <prvInsertTimerInActiveList>
					break;
 800df50:	e015      	b.n	800df7e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800df52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df58:	f003 0302 	and.w	r3, r3, #2
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d103      	bne.n	800df68 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800df60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df62:	f000 fbdd 	bl	800e720 <vPortFree>
 800df66:	e00a      	b.n	800df7e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800df68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df6e:	f023 0301 	bic.w	r3, r3, #1
 800df72:	b2da      	uxtb	r2, r3
 800df74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800df7a:	e000      	b.n	800df7e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800df7c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800df7e:	4b08      	ldr	r3, [pc, #32]	; (800dfa0 <prvProcessReceivedCommands+0x1c0>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	1d39      	adds	r1, r7, #4
 800df84:	2200      	movs	r2, #0
 800df86:	4618      	mov	r0, r3
 800df88:	f7fe fbec 	bl	800c764 <xQueueReceive>
 800df8c:	4603      	mov	r3, r0
 800df8e:	2b00      	cmp	r3, #0
 800df90:	f47f af2a 	bne.w	800dde8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800df94:	bf00      	nop
 800df96:	bf00      	nop
 800df98:	3730      	adds	r7, #48	; 0x30
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}
 800df9e:	bf00      	nop
 800dfa0:	20001b18 	.word	0x20001b18

0800dfa4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b088      	sub	sp, #32
 800dfa8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dfaa:	e048      	b.n	800e03e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dfac:	4b2d      	ldr	r3, [pc, #180]	; (800e064 <prvSwitchTimerLists+0xc0>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	68db      	ldr	r3, [r3, #12]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfb6:	4b2b      	ldr	r3, [pc, #172]	; (800e064 <prvSwitchTimerLists+0xc0>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	68db      	ldr	r3, [r3, #12]
 800dfbc:	68db      	ldr	r3, [r3, #12]
 800dfbe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	3304      	adds	r3, #4
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f7fe f905 	bl	800c1d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	6a1b      	ldr	r3, [r3, #32]
 800dfce:	68f8      	ldr	r0, [r7, #12]
 800dfd0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dfd8:	f003 0304 	and.w	r3, r3, #4
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d02e      	beq.n	800e03e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	699b      	ldr	r3, [r3, #24]
 800dfe4:	693a      	ldr	r2, [r7, #16]
 800dfe6:	4413      	add	r3, r2
 800dfe8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dfea:	68ba      	ldr	r2, [r7, #8]
 800dfec:	693b      	ldr	r3, [r7, #16]
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d90e      	bls.n	800e010 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	68ba      	ldr	r2, [r7, #8]
 800dff6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	68fa      	ldr	r2, [r7, #12]
 800dffc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dffe:	4b19      	ldr	r3, [pc, #100]	; (800e064 <prvSwitchTimerLists+0xc0>)
 800e000:	681a      	ldr	r2, [r3, #0]
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	3304      	adds	r3, #4
 800e006:	4619      	mov	r1, r3
 800e008:	4610      	mov	r0, r2
 800e00a:	f7fe f8aa 	bl	800c162 <vListInsert>
 800e00e:	e016      	b.n	800e03e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e010:	2300      	movs	r3, #0
 800e012:	9300      	str	r3, [sp, #0]
 800e014:	2300      	movs	r3, #0
 800e016:	693a      	ldr	r2, [r7, #16]
 800e018:	2100      	movs	r1, #0
 800e01a:	68f8      	ldr	r0, [r7, #12]
 800e01c:	f7ff fd60 	bl	800dae0 <xTimerGenericCommand>
 800e020:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d10a      	bne.n	800e03e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e02c:	f383 8811 	msr	BASEPRI, r3
 800e030:	f3bf 8f6f 	isb	sy
 800e034:	f3bf 8f4f 	dsb	sy
 800e038:	603b      	str	r3, [r7, #0]
}
 800e03a:	bf00      	nop
 800e03c:	e7fe      	b.n	800e03c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e03e:	4b09      	ldr	r3, [pc, #36]	; (800e064 <prvSwitchTimerLists+0xc0>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d1b1      	bne.n	800dfac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e048:	4b06      	ldr	r3, [pc, #24]	; (800e064 <prvSwitchTimerLists+0xc0>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e04e:	4b06      	ldr	r3, [pc, #24]	; (800e068 <prvSwitchTimerLists+0xc4>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	4a04      	ldr	r2, [pc, #16]	; (800e064 <prvSwitchTimerLists+0xc0>)
 800e054:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e056:	4a04      	ldr	r2, [pc, #16]	; (800e068 <prvSwitchTimerLists+0xc4>)
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	6013      	str	r3, [r2, #0]
}
 800e05c:	bf00      	nop
 800e05e:	3718      	adds	r7, #24
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}
 800e064:	20001b10 	.word	0x20001b10
 800e068:	20001b14 	.word	0x20001b14

0800e06c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b082      	sub	sp, #8
 800e070:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e072:	f000 f967 	bl	800e344 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e076:	4b15      	ldr	r3, [pc, #84]	; (800e0cc <prvCheckForValidListAndQueue+0x60>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d120      	bne.n	800e0c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e07e:	4814      	ldr	r0, [pc, #80]	; (800e0d0 <prvCheckForValidListAndQueue+0x64>)
 800e080:	f7fe f81e 	bl	800c0c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e084:	4813      	ldr	r0, [pc, #76]	; (800e0d4 <prvCheckForValidListAndQueue+0x68>)
 800e086:	f7fe f81b 	bl	800c0c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e08a:	4b13      	ldr	r3, [pc, #76]	; (800e0d8 <prvCheckForValidListAndQueue+0x6c>)
 800e08c:	4a10      	ldr	r2, [pc, #64]	; (800e0d0 <prvCheckForValidListAndQueue+0x64>)
 800e08e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e090:	4b12      	ldr	r3, [pc, #72]	; (800e0dc <prvCheckForValidListAndQueue+0x70>)
 800e092:	4a10      	ldr	r2, [pc, #64]	; (800e0d4 <prvCheckForValidListAndQueue+0x68>)
 800e094:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e096:	2300      	movs	r3, #0
 800e098:	9300      	str	r3, [sp, #0]
 800e09a:	4b11      	ldr	r3, [pc, #68]	; (800e0e0 <prvCheckForValidListAndQueue+0x74>)
 800e09c:	4a11      	ldr	r2, [pc, #68]	; (800e0e4 <prvCheckForValidListAndQueue+0x78>)
 800e09e:	2110      	movs	r1, #16
 800e0a0:	200a      	movs	r0, #10
 800e0a2:	f7fe f929 	bl	800c2f8 <xQueueGenericCreateStatic>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	4a08      	ldr	r2, [pc, #32]	; (800e0cc <prvCheckForValidListAndQueue+0x60>)
 800e0aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e0ac:	4b07      	ldr	r3, [pc, #28]	; (800e0cc <prvCheckForValidListAndQueue+0x60>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d005      	beq.n	800e0c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e0b4:	4b05      	ldr	r3, [pc, #20]	; (800e0cc <prvCheckForValidListAndQueue+0x60>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	490b      	ldr	r1, [pc, #44]	; (800e0e8 <prvCheckForValidListAndQueue+0x7c>)
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f7fe fd42 	bl	800cb44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e0c0:	f000 f970 	bl	800e3a4 <vPortExitCritical>
}
 800e0c4:	bf00      	nop
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}
 800e0ca:	bf00      	nop
 800e0cc:	20001b18 	.word	0x20001b18
 800e0d0:	20001ae8 	.word	0x20001ae8
 800e0d4:	20001afc 	.word	0x20001afc
 800e0d8:	20001b10 	.word	0x20001b10
 800e0dc:	20001b14 	.word	0x20001b14
 800e0e0:	20001bc4 	.word	0x20001bc4
 800e0e4:	20001b24 	.word	0x20001b24
 800e0e8:	08011d4c 	.word	0x08011d4c

0800e0ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	b085      	sub	sp, #20
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	60f8      	str	r0, [r7, #12]
 800e0f4:	60b9      	str	r1, [r7, #8]
 800e0f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	3b04      	subs	r3, #4
 800e0fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e104:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	3b04      	subs	r3, #4
 800e10a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	f023 0201 	bic.w	r2, r3, #1
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	3b04      	subs	r3, #4
 800e11a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e11c:	4a0c      	ldr	r2, [pc, #48]	; (800e150 <pxPortInitialiseStack+0x64>)
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	3b14      	subs	r3, #20
 800e126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e128:	687a      	ldr	r2, [r7, #4]
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	3b04      	subs	r3, #4
 800e132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	f06f 0202 	mvn.w	r2, #2
 800e13a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	3b20      	subs	r3, #32
 800e140:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e142:	68fb      	ldr	r3, [r7, #12]
}
 800e144:	4618      	mov	r0, r3
 800e146:	3714      	adds	r7, #20
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr
 800e150:	0800e155 	.word	0x0800e155

0800e154 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e154:	b480      	push	{r7}
 800e156:	b085      	sub	sp, #20
 800e158:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e15a:	2300      	movs	r3, #0
 800e15c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e15e:	4b12      	ldr	r3, [pc, #72]	; (800e1a8 <prvTaskExitError+0x54>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e166:	d00a      	beq.n	800e17e <prvTaskExitError+0x2a>
	__asm volatile
 800e168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e16c:	f383 8811 	msr	BASEPRI, r3
 800e170:	f3bf 8f6f 	isb	sy
 800e174:	f3bf 8f4f 	dsb	sy
 800e178:	60fb      	str	r3, [r7, #12]
}
 800e17a:	bf00      	nop
 800e17c:	e7fe      	b.n	800e17c <prvTaskExitError+0x28>
	__asm volatile
 800e17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e182:	f383 8811 	msr	BASEPRI, r3
 800e186:	f3bf 8f6f 	isb	sy
 800e18a:	f3bf 8f4f 	dsb	sy
 800e18e:	60bb      	str	r3, [r7, #8]
}
 800e190:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e192:	bf00      	nop
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d0fc      	beq.n	800e194 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e19a:	bf00      	nop
 800e19c:	bf00      	nop
 800e19e:	3714      	adds	r7, #20
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr
 800e1a8:	20000194 	.word	0x20000194
 800e1ac:	00000000 	.word	0x00000000

0800e1b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e1b0:	4b07      	ldr	r3, [pc, #28]	; (800e1d0 <pxCurrentTCBConst2>)
 800e1b2:	6819      	ldr	r1, [r3, #0]
 800e1b4:	6808      	ldr	r0, [r1, #0]
 800e1b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ba:	f380 8809 	msr	PSP, r0
 800e1be:	f3bf 8f6f 	isb	sy
 800e1c2:	f04f 0000 	mov.w	r0, #0
 800e1c6:	f380 8811 	msr	BASEPRI, r0
 800e1ca:	4770      	bx	lr
 800e1cc:	f3af 8000 	nop.w

0800e1d0 <pxCurrentTCBConst2>:
 800e1d0:	200015e8 	.word	0x200015e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e1d4:	bf00      	nop
 800e1d6:	bf00      	nop

0800e1d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e1d8:	4808      	ldr	r0, [pc, #32]	; (800e1fc <prvPortStartFirstTask+0x24>)
 800e1da:	6800      	ldr	r0, [r0, #0]
 800e1dc:	6800      	ldr	r0, [r0, #0]
 800e1de:	f380 8808 	msr	MSP, r0
 800e1e2:	f04f 0000 	mov.w	r0, #0
 800e1e6:	f380 8814 	msr	CONTROL, r0
 800e1ea:	b662      	cpsie	i
 800e1ec:	b661      	cpsie	f
 800e1ee:	f3bf 8f4f 	dsb	sy
 800e1f2:	f3bf 8f6f 	isb	sy
 800e1f6:	df00      	svc	0
 800e1f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e1fa:	bf00      	nop
 800e1fc:	e000ed08 	.word	0xe000ed08

0800e200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b086      	sub	sp, #24
 800e204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e206:	4b46      	ldr	r3, [pc, #280]	; (800e320 <xPortStartScheduler+0x120>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	4a46      	ldr	r2, [pc, #280]	; (800e324 <xPortStartScheduler+0x124>)
 800e20c:	4293      	cmp	r3, r2
 800e20e:	d10a      	bne.n	800e226 <xPortStartScheduler+0x26>
	__asm volatile
 800e210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e214:	f383 8811 	msr	BASEPRI, r3
 800e218:	f3bf 8f6f 	isb	sy
 800e21c:	f3bf 8f4f 	dsb	sy
 800e220:	613b      	str	r3, [r7, #16]
}
 800e222:	bf00      	nop
 800e224:	e7fe      	b.n	800e224 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e226:	4b3e      	ldr	r3, [pc, #248]	; (800e320 <xPortStartScheduler+0x120>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	4a3f      	ldr	r2, [pc, #252]	; (800e328 <xPortStartScheduler+0x128>)
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d10a      	bne.n	800e246 <xPortStartScheduler+0x46>
	__asm volatile
 800e230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e234:	f383 8811 	msr	BASEPRI, r3
 800e238:	f3bf 8f6f 	isb	sy
 800e23c:	f3bf 8f4f 	dsb	sy
 800e240:	60fb      	str	r3, [r7, #12]
}
 800e242:	bf00      	nop
 800e244:	e7fe      	b.n	800e244 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e246:	4b39      	ldr	r3, [pc, #228]	; (800e32c <xPortStartScheduler+0x12c>)
 800e248:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	781b      	ldrb	r3, [r3, #0]
 800e24e:	b2db      	uxtb	r3, r3
 800e250:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	22ff      	movs	r2, #255	; 0xff
 800e256:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	781b      	ldrb	r3, [r3, #0]
 800e25c:	b2db      	uxtb	r3, r3
 800e25e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e260:	78fb      	ldrb	r3, [r7, #3]
 800e262:	b2db      	uxtb	r3, r3
 800e264:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e268:	b2da      	uxtb	r2, r3
 800e26a:	4b31      	ldr	r3, [pc, #196]	; (800e330 <xPortStartScheduler+0x130>)
 800e26c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e26e:	4b31      	ldr	r3, [pc, #196]	; (800e334 <xPortStartScheduler+0x134>)
 800e270:	2207      	movs	r2, #7
 800e272:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e274:	e009      	b.n	800e28a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e276:	4b2f      	ldr	r3, [pc, #188]	; (800e334 <xPortStartScheduler+0x134>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	3b01      	subs	r3, #1
 800e27c:	4a2d      	ldr	r2, [pc, #180]	; (800e334 <xPortStartScheduler+0x134>)
 800e27e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e280:	78fb      	ldrb	r3, [r7, #3]
 800e282:	b2db      	uxtb	r3, r3
 800e284:	005b      	lsls	r3, r3, #1
 800e286:	b2db      	uxtb	r3, r3
 800e288:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e28a:	78fb      	ldrb	r3, [r7, #3]
 800e28c:	b2db      	uxtb	r3, r3
 800e28e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e292:	2b80      	cmp	r3, #128	; 0x80
 800e294:	d0ef      	beq.n	800e276 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e296:	4b27      	ldr	r3, [pc, #156]	; (800e334 <xPortStartScheduler+0x134>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f1c3 0307 	rsb	r3, r3, #7
 800e29e:	2b04      	cmp	r3, #4
 800e2a0:	d00a      	beq.n	800e2b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2a6:	f383 8811 	msr	BASEPRI, r3
 800e2aa:	f3bf 8f6f 	isb	sy
 800e2ae:	f3bf 8f4f 	dsb	sy
 800e2b2:	60bb      	str	r3, [r7, #8]
}
 800e2b4:	bf00      	nop
 800e2b6:	e7fe      	b.n	800e2b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e2b8:	4b1e      	ldr	r3, [pc, #120]	; (800e334 <xPortStartScheduler+0x134>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	021b      	lsls	r3, r3, #8
 800e2be:	4a1d      	ldr	r2, [pc, #116]	; (800e334 <xPortStartScheduler+0x134>)
 800e2c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e2c2:	4b1c      	ldr	r3, [pc, #112]	; (800e334 <xPortStartScheduler+0x134>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e2ca:	4a1a      	ldr	r2, [pc, #104]	; (800e334 <xPortStartScheduler+0x134>)
 800e2cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	b2da      	uxtb	r2, r3
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e2d6:	4b18      	ldr	r3, [pc, #96]	; (800e338 <xPortStartScheduler+0x138>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	4a17      	ldr	r2, [pc, #92]	; (800e338 <xPortStartScheduler+0x138>)
 800e2dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e2e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e2e2:	4b15      	ldr	r3, [pc, #84]	; (800e338 <xPortStartScheduler+0x138>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	4a14      	ldr	r2, [pc, #80]	; (800e338 <xPortStartScheduler+0x138>)
 800e2e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e2ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e2ee:	f000 f8dd 	bl	800e4ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e2f2:	4b12      	ldr	r3, [pc, #72]	; (800e33c <xPortStartScheduler+0x13c>)
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e2f8:	f000 f8fc 	bl	800e4f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e2fc:	4b10      	ldr	r3, [pc, #64]	; (800e340 <xPortStartScheduler+0x140>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4a0f      	ldr	r2, [pc, #60]	; (800e340 <xPortStartScheduler+0x140>)
 800e302:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e306:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e308:	f7ff ff66 	bl	800e1d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e30c:	f7ff f84a 	bl	800d3a4 <vTaskSwitchContext>
	prvTaskExitError();
 800e310:	f7ff ff20 	bl	800e154 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e314:	2300      	movs	r3, #0
}
 800e316:	4618      	mov	r0, r3
 800e318:	3718      	adds	r7, #24
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}
 800e31e:	bf00      	nop
 800e320:	e000ed00 	.word	0xe000ed00
 800e324:	410fc271 	.word	0x410fc271
 800e328:	410fc270 	.word	0x410fc270
 800e32c:	e000e400 	.word	0xe000e400
 800e330:	20001c14 	.word	0x20001c14
 800e334:	20001c18 	.word	0x20001c18
 800e338:	e000ed20 	.word	0xe000ed20
 800e33c:	20000194 	.word	0x20000194
 800e340:	e000ef34 	.word	0xe000ef34

0800e344 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e344:	b480      	push	{r7}
 800e346:	b083      	sub	sp, #12
 800e348:	af00      	add	r7, sp, #0
	__asm volatile
 800e34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e34e:	f383 8811 	msr	BASEPRI, r3
 800e352:	f3bf 8f6f 	isb	sy
 800e356:	f3bf 8f4f 	dsb	sy
 800e35a:	607b      	str	r3, [r7, #4]
}
 800e35c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e35e:	4b0f      	ldr	r3, [pc, #60]	; (800e39c <vPortEnterCritical+0x58>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	3301      	adds	r3, #1
 800e364:	4a0d      	ldr	r2, [pc, #52]	; (800e39c <vPortEnterCritical+0x58>)
 800e366:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e368:	4b0c      	ldr	r3, [pc, #48]	; (800e39c <vPortEnterCritical+0x58>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	2b01      	cmp	r3, #1
 800e36e:	d10f      	bne.n	800e390 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e370:	4b0b      	ldr	r3, [pc, #44]	; (800e3a0 <vPortEnterCritical+0x5c>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	b2db      	uxtb	r3, r3
 800e376:	2b00      	cmp	r3, #0
 800e378:	d00a      	beq.n	800e390 <vPortEnterCritical+0x4c>
	__asm volatile
 800e37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e37e:	f383 8811 	msr	BASEPRI, r3
 800e382:	f3bf 8f6f 	isb	sy
 800e386:	f3bf 8f4f 	dsb	sy
 800e38a:	603b      	str	r3, [r7, #0]
}
 800e38c:	bf00      	nop
 800e38e:	e7fe      	b.n	800e38e <vPortEnterCritical+0x4a>
	}
}
 800e390:	bf00      	nop
 800e392:	370c      	adds	r7, #12
 800e394:	46bd      	mov	sp, r7
 800e396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39a:	4770      	bx	lr
 800e39c:	20000194 	.word	0x20000194
 800e3a0:	e000ed04 	.word	0xe000ed04

0800e3a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b083      	sub	sp, #12
 800e3a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e3aa:	4b12      	ldr	r3, [pc, #72]	; (800e3f4 <vPortExitCritical+0x50>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d10a      	bne.n	800e3c8 <vPortExitCritical+0x24>
	__asm volatile
 800e3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b6:	f383 8811 	msr	BASEPRI, r3
 800e3ba:	f3bf 8f6f 	isb	sy
 800e3be:	f3bf 8f4f 	dsb	sy
 800e3c2:	607b      	str	r3, [r7, #4]
}
 800e3c4:	bf00      	nop
 800e3c6:	e7fe      	b.n	800e3c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e3c8:	4b0a      	ldr	r3, [pc, #40]	; (800e3f4 <vPortExitCritical+0x50>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	3b01      	subs	r3, #1
 800e3ce:	4a09      	ldr	r2, [pc, #36]	; (800e3f4 <vPortExitCritical+0x50>)
 800e3d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e3d2:	4b08      	ldr	r3, [pc, #32]	; (800e3f4 <vPortExitCritical+0x50>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d105      	bne.n	800e3e6 <vPortExitCritical+0x42>
 800e3da:	2300      	movs	r3, #0
 800e3dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	f383 8811 	msr	BASEPRI, r3
}
 800e3e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e3e6:	bf00      	nop
 800e3e8:	370c      	adds	r7, #12
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f0:	4770      	bx	lr
 800e3f2:	bf00      	nop
 800e3f4:	20000194 	.word	0x20000194
	...

0800e400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e400:	f3ef 8009 	mrs	r0, PSP
 800e404:	f3bf 8f6f 	isb	sy
 800e408:	4b15      	ldr	r3, [pc, #84]	; (800e460 <pxCurrentTCBConst>)
 800e40a:	681a      	ldr	r2, [r3, #0]
 800e40c:	f01e 0f10 	tst.w	lr, #16
 800e410:	bf08      	it	eq
 800e412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e41a:	6010      	str	r0, [r2, #0]
 800e41c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e420:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e424:	f380 8811 	msr	BASEPRI, r0
 800e428:	f3bf 8f4f 	dsb	sy
 800e42c:	f3bf 8f6f 	isb	sy
 800e430:	f7fe ffb8 	bl	800d3a4 <vTaskSwitchContext>
 800e434:	f04f 0000 	mov.w	r0, #0
 800e438:	f380 8811 	msr	BASEPRI, r0
 800e43c:	bc09      	pop	{r0, r3}
 800e43e:	6819      	ldr	r1, [r3, #0]
 800e440:	6808      	ldr	r0, [r1, #0]
 800e442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e446:	f01e 0f10 	tst.w	lr, #16
 800e44a:	bf08      	it	eq
 800e44c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e450:	f380 8809 	msr	PSP, r0
 800e454:	f3bf 8f6f 	isb	sy
 800e458:	4770      	bx	lr
 800e45a:	bf00      	nop
 800e45c:	f3af 8000 	nop.w

0800e460 <pxCurrentTCBConst>:
 800e460:	200015e8 	.word	0x200015e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e464:	bf00      	nop
 800e466:	bf00      	nop

0800e468 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b082      	sub	sp, #8
 800e46c:	af00      	add	r7, sp, #0
	__asm volatile
 800e46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e472:	f383 8811 	msr	BASEPRI, r3
 800e476:	f3bf 8f6f 	isb	sy
 800e47a:	f3bf 8f4f 	dsb	sy
 800e47e:	607b      	str	r3, [r7, #4]
}
 800e480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e482:	f7fe fed5 	bl	800d230 <xTaskIncrementTick>
 800e486:	4603      	mov	r3, r0
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d003      	beq.n	800e494 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e48c:	4b06      	ldr	r3, [pc, #24]	; (800e4a8 <xPortSysTickHandler+0x40>)
 800e48e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e492:	601a      	str	r2, [r3, #0]
 800e494:	2300      	movs	r3, #0
 800e496:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	f383 8811 	msr	BASEPRI, r3
}
 800e49e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e4a0:	bf00      	nop
 800e4a2:	3708      	adds	r7, #8
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}
 800e4a8:	e000ed04 	.word	0xe000ed04

0800e4ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e4b0:	4b0b      	ldr	r3, [pc, #44]	; (800e4e0 <vPortSetupTimerInterrupt+0x34>)
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e4b6:	4b0b      	ldr	r3, [pc, #44]	; (800e4e4 <vPortSetupTimerInterrupt+0x38>)
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e4bc:	4b0a      	ldr	r3, [pc, #40]	; (800e4e8 <vPortSetupTimerInterrupt+0x3c>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	4a0a      	ldr	r2, [pc, #40]	; (800e4ec <vPortSetupTimerInterrupt+0x40>)
 800e4c2:	fba2 2303 	umull	r2, r3, r2, r3
 800e4c6:	099b      	lsrs	r3, r3, #6
 800e4c8:	4a09      	ldr	r2, [pc, #36]	; (800e4f0 <vPortSetupTimerInterrupt+0x44>)
 800e4ca:	3b01      	subs	r3, #1
 800e4cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e4ce:	4b04      	ldr	r3, [pc, #16]	; (800e4e0 <vPortSetupTimerInterrupt+0x34>)
 800e4d0:	2207      	movs	r2, #7
 800e4d2:	601a      	str	r2, [r3, #0]
}
 800e4d4:	bf00      	nop
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4dc:	4770      	bx	lr
 800e4de:	bf00      	nop
 800e4e0:	e000e010 	.word	0xe000e010
 800e4e4:	e000e018 	.word	0xe000e018
 800e4e8:	20000008 	.word	0x20000008
 800e4ec:	10624dd3 	.word	0x10624dd3
 800e4f0:	e000e014 	.word	0xe000e014

0800e4f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e4f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e504 <vPortEnableVFP+0x10>
 800e4f8:	6801      	ldr	r1, [r0, #0]
 800e4fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e4fe:	6001      	str	r1, [r0, #0]
 800e500:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e502:	bf00      	nop
 800e504:	e000ed88 	.word	0xe000ed88

0800e508 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e508:	b480      	push	{r7}
 800e50a:	b085      	sub	sp, #20
 800e50c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e50e:	f3ef 8305 	mrs	r3, IPSR
 800e512:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	2b0f      	cmp	r3, #15
 800e518:	d914      	bls.n	800e544 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e51a:	4a17      	ldr	r2, [pc, #92]	; (800e578 <vPortValidateInterruptPriority+0x70>)
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	4413      	add	r3, r2
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e524:	4b15      	ldr	r3, [pc, #84]	; (800e57c <vPortValidateInterruptPriority+0x74>)
 800e526:	781b      	ldrb	r3, [r3, #0]
 800e528:	7afa      	ldrb	r2, [r7, #11]
 800e52a:	429a      	cmp	r2, r3
 800e52c:	d20a      	bcs.n	800e544 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e532:	f383 8811 	msr	BASEPRI, r3
 800e536:	f3bf 8f6f 	isb	sy
 800e53a:	f3bf 8f4f 	dsb	sy
 800e53e:	607b      	str	r3, [r7, #4]
}
 800e540:	bf00      	nop
 800e542:	e7fe      	b.n	800e542 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e544:	4b0e      	ldr	r3, [pc, #56]	; (800e580 <vPortValidateInterruptPriority+0x78>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e54c:	4b0d      	ldr	r3, [pc, #52]	; (800e584 <vPortValidateInterruptPriority+0x7c>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	429a      	cmp	r2, r3
 800e552:	d90a      	bls.n	800e56a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e558:	f383 8811 	msr	BASEPRI, r3
 800e55c:	f3bf 8f6f 	isb	sy
 800e560:	f3bf 8f4f 	dsb	sy
 800e564:	603b      	str	r3, [r7, #0]
}
 800e566:	bf00      	nop
 800e568:	e7fe      	b.n	800e568 <vPortValidateInterruptPriority+0x60>
	}
 800e56a:	bf00      	nop
 800e56c:	3714      	adds	r7, #20
 800e56e:	46bd      	mov	sp, r7
 800e570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e574:	4770      	bx	lr
 800e576:	bf00      	nop
 800e578:	e000e3f0 	.word	0xe000e3f0
 800e57c:	20001c14 	.word	0x20001c14
 800e580:	e000ed0c 	.word	0xe000ed0c
 800e584:	20001c18 	.word	0x20001c18

0800e588 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b08a      	sub	sp, #40	; 0x28
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e590:	2300      	movs	r3, #0
 800e592:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e594:	f7fe fd90 	bl	800d0b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e598:	4b5b      	ldr	r3, [pc, #364]	; (800e708 <pvPortMalloc+0x180>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d101      	bne.n	800e5a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e5a0:	f000 f920 	bl	800e7e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e5a4:	4b59      	ldr	r3, [pc, #356]	; (800e70c <pvPortMalloc+0x184>)
 800e5a6:	681a      	ldr	r2, [r3, #0]
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	4013      	ands	r3, r2
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	f040 8093 	bne.w	800e6d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d01d      	beq.n	800e5f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e5b8:	2208      	movs	r2, #8
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	4413      	add	r3, r2
 800e5be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f003 0307 	and.w	r3, r3, #7
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d014      	beq.n	800e5f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f023 0307 	bic.w	r3, r3, #7
 800e5d0:	3308      	adds	r3, #8
 800e5d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f003 0307 	and.w	r3, r3, #7
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d00a      	beq.n	800e5f4 <pvPortMalloc+0x6c>
	__asm volatile
 800e5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e2:	f383 8811 	msr	BASEPRI, r3
 800e5e6:	f3bf 8f6f 	isb	sy
 800e5ea:	f3bf 8f4f 	dsb	sy
 800e5ee:	617b      	str	r3, [r7, #20]
}
 800e5f0:	bf00      	nop
 800e5f2:	e7fe      	b.n	800e5f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d06e      	beq.n	800e6d8 <pvPortMalloc+0x150>
 800e5fa:	4b45      	ldr	r3, [pc, #276]	; (800e710 <pvPortMalloc+0x188>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	687a      	ldr	r2, [r7, #4]
 800e600:	429a      	cmp	r2, r3
 800e602:	d869      	bhi.n	800e6d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e604:	4b43      	ldr	r3, [pc, #268]	; (800e714 <pvPortMalloc+0x18c>)
 800e606:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e608:	4b42      	ldr	r3, [pc, #264]	; (800e714 <pvPortMalloc+0x18c>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e60e:	e004      	b.n	800e61a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e612:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e61c:	685b      	ldr	r3, [r3, #4]
 800e61e:	687a      	ldr	r2, [r7, #4]
 800e620:	429a      	cmp	r2, r3
 800e622:	d903      	bls.n	800e62c <pvPortMalloc+0xa4>
 800e624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d1f1      	bne.n	800e610 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e62c:	4b36      	ldr	r3, [pc, #216]	; (800e708 <pvPortMalloc+0x180>)
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e632:	429a      	cmp	r2, r3
 800e634:	d050      	beq.n	800e6d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e636:	6a3b      	ldr	r3, [r7, #32]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	2208      	movs	r2, #8
 800e63c:	4413      	add	r3, r2
 800e63e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e642:	681a      	ldr	r2, [r3, #0]
 800e644:	6a3b      	ldr	r3, [r7, #32]
 800e646:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64a:	685a      	ldr	r2, [r3, #4]
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	1ad2      	subs	r2, r2, r3
 800e650:	2308      	movs	r3, #8
 800e652:	005b      	lsls	r3, r3, #1
 800e654:	429a      	cmp	r2, r3
 800e656:	d91f      	bls.n	800e698 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	4413      	add	r3, r2
 800e65e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e660:	69bb      	ldr	r3, [r7, #24]
 800e662:	f003 0307 	and.w	r3, r3, #7
 800e666:	2b00      	cmp	r3, #0
 800e668:	d00a      	beq.n	800e680 <pvPortMalloc+0xf8>
	__asm volatile
 800e66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e66e:	f383 8811 	msr	BASEPRI, r3
 800e672:	f3bf 8f6f 	isb	sy
 800e676:	f3bf 8f4f 	dsb	sy
 800e67a:	613b      	str	r3, [r7, #16]
}
 800e67c:	bf00      	nop
 800e67e:	e7fe      	b.n	800e67e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e682:	685a      	ldr	r2, [r3, #4]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	1ad2      	subs	r2, r2, r3
 800e688:	69bb      	ldr	r3, [r7, #24]
 800e68a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e68e:	687a      	ldr	r2, [r7, #4]
 800e690:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e692:	69b8      	ldr	r0, [r7, #24]
 800e694:	f000 f908 	bl	800e8a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e698:	4b1d      	ldr	r3, [pc, #116]	; (800e710 <pvPortMalloc+0x188>)
 800e69a:	681a      	ldr	r2, [r3, #0]
 800e69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e69e:	685b      	ldr	r3, [r3, #4]
 800e6a0:	1ad3      	subs	r3, r2, r3
 800e6a2:	4a1b      	ldr	r2, [pc, #108]	; (800e710 <pvPortMalloc+0x188>)
 800e6a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e6a6:	4b1a      	ldr	r3, [pc, #104]	; (800e710 <pvPortMalloc+0x188>)
 800e6a8:	681a      	ldr	r2, [r3, #0]
 800e6aa:	4b1b      	ldr	r3, [pc, #108]	; (800e718 <pvPortMalloc+0x190>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	d203      	bcs.n	800e6ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e6b2:	4b17      	ldr	r3, [pc, #92]	; (800e710 <pvPortMalloc+0x188>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	4a18      	ldr	r2, [pc, #96]	; (800e718 <pvPortMalloc+0x190>)
 800e6b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6bc:	685a      	ldr	r2, [r3, #4]
 800e6be:	4b13      	ldr	r3, [pc, #76]	; (800e70c <pvPortMalloc+0x184>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	431a      	orrs	r2, r3
 800e6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e6ce:	4b13      	ldr	r3, [pc, #76]	; (800e71c <pvPortMalloc+0x194>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	4a11      	ldr	r2, [pc, #68]	; (800e71c <pvPortMalloc+0x194>)
 800e6d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e6d8:	f7fe fcfc 	bl	800d0d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e6dc:	69fb      	ldr	r3, [r7, #28]
 800e6de:	f003 0307 	and.w	r3, r3, #7
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d00a      	beq.n	800e6fc <pvPortMalloc+0x174>
	__asm volatile
 800e6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ea:	f383 8811 	msr	BASEPRI, r3
 800e6ee:	f3bf 8f6f 	isb	sy
 800e6f2:	f3bf 8f4f 	dsb	sy
 800e6f6:	60fb      	str	r3, [r7, #12]
}
 800e6f8:	bf00      	nop
 800e6fa:	e7fe      	b.n	800e6fa <pvPortMalloc+0x172>
	return pvReturn;
 800e6fc:	69fb      	ldr	r3, [r7, #28]
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	3728      	adds	r7, #40	; 0x28
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	20005824 	.word	0x20005824
 800e70c:	20005838 	.word	0x20005838
 800e710:	20005828 	.word	0x20005828
 800e714:	2000581c 	.word	0x2000581c
 800e718:	2000582c 	.word	0x2000582c
 800e71c:	20005830 	.word	0x20005830

0800e720 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b086      	sub	sp, #24
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d04d      	beq.n	800e7ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e732:	2308      	movs	r3, #8
 800e734:	425b      	negs	r3, r3
 800e736:	697a      	ldr	r2, [r7, #20]
 800e738:	4413      	add	r3, r2
 800e73a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e740:	693b      	ldr	r3, [r7, #16]
 800e742:	685a      	ldr	r2, [r3, #4]
 800e744:	4b24      	ldr	r3, [pc, #144]	; (800e7d8 <vPortFree+0xb8>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	4013      	ands	r3, r2
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d10a      	bne.n	800e764 <vPortFree+0x44>
	__asm volatile
 800e74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e752:	f383 8811 	msr	BASEPRI, r3
 800e756:	f3bf 8f6f 	isb	sy
 800e75a:	f3bf 8f4f 	dsb	sy
 800e75e:	60fb      	str	r3, [r7, #12]
}
 800e760:	bf00      	nop
 800e762:	e7fe      	b.n	800e762 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e764:	693b      	ldr	r3, [r7, #16]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d00a      	beq.n	800e782 <vPortFree+0x62>
	__asm volatile
 800e76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e770:	f383 8811 	msr	BASEPRI, r3
 800e774:	f3bf 8f6f 	isb	sy
 800e778:	f3bf 8f4f 	dsb	sy
 800e77c:	60bb      	str	r3, [r7, #8]
}
 800e77e:	bf00      	nop
 800e780:	e7fe      	b.n	800e780 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e782:	693b      	ldr	r3, [r7, #16]
 800e784:	685a      	ldr	r2, [r3, #4]
 800e786:	4b14      	ldr	r3, [pc, #80]	; (800e7d8 <vPortFree+0xb8>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	4013      	ands	r3, r2
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d01e      	beq.n	800e7ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d11a      	bne.n	800e7ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e798:	693b      	ldr	r3, [r7, #16]
 800e79a:	685a      	ldr	r2, [r3, #4]
 800e79c:	4b0e      	ldr	r3, [pc, #56]	; (800e7d8 <vPortFree+0xb8>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	43db      	mvns	r3, r3
 800e7a2:	401a      	ands	r2, r3
 800e7a4:	693b      	ldr	r3, [r7, #16]
 800e7a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e7a8:	f7fe fc86 	bl	800d0b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e7ac:	693b      	ldr	r3, [r7, #16]
 800e7ae:	685a      	ldr	r2, [r3, #4]
 800e7b0:	4b0a      	ldr	r3, [pc, #40]	; (800e7dc <vPortFree+0xbc>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	4413      	add	r3, r2
 800e7b6:	4a09      	ldr	r2, [pc, #36]	; (800e7dc <vPortFree+0xbc>)
 800e7b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e7ba:	6938      	ldr	r0, [r7, #16]
 800e7bc:	f000 f874 	bl	800e8a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e7c0:	4b07      	ldr	r3, [pc, #28]	; (800e7e0 <vPortFree+0xc0>)
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	3301      	adds	r3, #1
 800e7c6:	4a06      	ldr	r2, [pc, #24]	; (800e7e0 <vPortFree+0xc0>)
 800e7c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e7ca:	f7fe fc83 	bl	800d0d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e7ce:	bf00      	nop
 800e7d0:	3718      	adds	r7, #24
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}
 800e7d6:	bf00      	nop
 800e7d8:	20005838 	.word	0x20005838
 800e7dc:	20005828 	.word	0x20005828
 800e7e0:	20005834 	.word	0x20005834

0800e7e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e7e4:	b480      	push	{r7}
 800e7e6:	b085      	sub	sp, #20
 800e7e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e7ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e7ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e7f0:	4b27      	ldr	r3, [pc, #156]	; (800e890 <prvHeapInit+0xac>)
 800e7f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f003 0307 	and.w	r3, r3, #7
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d00c      	beq.n	800e818 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	3307      	adds	r3, #7
 800e802:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f023 0307 	bic.w	r3, r3, #7
 800e80a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e80c:	68ba      	ldr	r2, [r7, #8]
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	1ad3      	subs	r3, r2, r3
 800e812:	4a1f      	ldr	r2, [pc, #124]	; (800e890 <prvHeapInit+0xac>)
 800e814:	4413      	add	r3, r2
 800e816:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e81c:	4a1d      	ldr	r2, [pc, #116]	; (800e894 <prvHeapInit+0xb0>)
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e822:	4b1c      	ldr	r3, [pc, #112]	; (800e894 <prvHeapInit+0xb0>)
 800e824:	2200      	movs	r2, #0
 800e826:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	68ba      	ldr	r2, [r7, #8]
 800e82c:	4413      	add	r3, r2
 800e82e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e830:	2208      	movs	r2, #8
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	1a9b      	subs	r3, r3, r2
 800e836:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	f023 0307 	bic.w	r3, r3, #7
 800e83e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	4a15      	ldr	r2, [pc, #84]	; (800e898 <prvHeapInit+0xb4>)
 800e844:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e846:	4b14      	ldr	r3, [pc, #80]	; (800e898 <prvHeapInit+0xb4>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	2200      	movs	r2, #0
 800e84c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e84e:	4b12      	ldr	r3, [pc, #72]	; (800e898 <prvHeapInit+0xb4>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	2200      	movs	r2, #0
 800e854:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	68fa      	ldr	r2, [r7, #12]
 800e85e:	1ad2      	subs	r2, r2, r3
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e864:	4b0c      	ldr	r3, [pc, #48]	; (800e898 <prvHeapInit+0xb4>)
 800e866:	681a      	ldr	r2, [r3, #0]
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	685b      	ldr	r3, [r3, #4]
 800e870:	4a0a      	ldr	r2, [pc, #40]	; (800e89c <prvHeapInit+0xb8>)
 800e872:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	685b      	ldr	r3, [r3, #4]
 800e878:	4a09      	ldr	r2, [pc, #36]	; (800e8a0 <prvHeapInit+0xbc>)
 800e87a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e87c:	4b09      	ldr	r3, [pc, #36]	; (800e8a4 <prvHeapInit+0xc0>)
 800e87e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e882:	601a      	str	r2, [r3, #0]
}
 800e884:	bf00      	nop
 800e886:	3714      	adds	r7, #20
 800e888:	46bd      	mov	sp, r7
 800e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88e:	4770      	bx	lr
 800e890:	20001c1c 	.word	0x20001c1c
 800e894:	2000581c 	.word	0x2000581c
 800e898:	20005824 	.word	0x20005824
 800e89c:	2000582c 	.word	0x2000582c
 800e8a0:	20005828 	.word	0x20005828
 800e8a4:	20005838 	.word	0x20005838

0800e8a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e8a8:	b480      	push	{r7}
 800e8aa:	b085      	sub	sp, #20
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e8b0:	4b28      	ldr	r3, [pc, #160]	; (800e954 <prvInsertBlockIntoFreeList+0xac>)
 800e8b2:	60fb      	str	r3, [r7, #12]
 800e8b4:	e002      	b.n	800e8bc <prvInsertBlockIntoFreeList+0x14>
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	60fb      	str	r3, [r7, #12]
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	687a      	ldr	r2, [r7, #4]
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d8f7      	bhi.n	800e8b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	68ba      	ldr	r2, [r7, #8]
 800e8d0:	4413      	add	r3, r2
 800e8d2:	687a      	ldr	r2, [r7, #4]
 800e8d4:	429a      	cmp	r2, r3
 800e8d6:	d108      	bne.n	800e8ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	685a      	ldr	r2, [r3, #4]
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	685b      	ldr	r3, [r3, #4]
 800e8e0:	441a      	add	r2, r3
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	685b      	ldr	r3, [r3, #4]
 800e8f2:	68ba      	ldr	r2, [r7, #8]
 800e8f4:	441a      	add	r2, r3
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d118      	bne.n	800e930 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	681a      	ldr	r2, [r3, #0]
 800e902:	4b15      	ldr	r3, [pc, #84]	; (800e958 <prvInsertBlockIntoFreeList+0xb0>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	429a      	cmp	r2, r3
 800e908:	d00d      	beq.n	800e926 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	685a      	ldr	r2, [r3, #4]
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	685b      	ldr	r3, [r3, #4]
 800e914:	441a      	add	r2, r3
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	681a      	ldr	r2, [r3, #0]
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	601a      	str	r2, [r3, #0]
 800e924:	e008      	b.n	800e938 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e926:	4b0c      	ldr	r3, [pc, #48]	; (800e958 <prvInsertBlockIntoFreeList+0xb0>)
 800e928:	681a      	ldr	r2, [r3, #0]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	601a      	str	r2, [r3, #0]
 800e92e:	e003      	b.n	800e938 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681a      	ldr	r2, [r3, #0]
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e938:	68fa      	ldr	r2, [r7, #12]
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	429a      	cmp	r2, r3
 800e93e:	d002      	beq.n	800e946 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e946:	bf00      	nop
 800e948:	3714      	adds	r7, #20
 800e94a:	46bd      	mov	sp, r7
 800e94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e950:	4770      	bx	lr
 800e952:	bf00      	nop
 800e954:	2000581c 	.word	0x2000581c
 800e958:	20005824 	.word	0x20005824

0800e95c <__cvt>:
 800e95c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e960:	ec55 4b10 	vmov	r4, r5, d0
 800e964:	2d00      	cmp	r5, #0
 800e966:	460e      	mov	r6, r1
 800e968:	4619      	mov	r1, r3
 800e96a:	462b      	mov	r3, r5
 800e96c:	bfbb      	ittet	lt
 800e96e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e972:	461d      	movlt	r5, r3
 800e974:	2300      	movge	r3, #0
 800e976:	232d      	movlt	r3, #45	; 0x2d
 800e978:	700b      	strb	r3, [r1, #0]
 800e97a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e97c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e980:	4691      	mov	r9, r2
 800e982:	f023 0820 	bic.w	r8, r3, #32
 800e986:	bfbc      	itt	lt
 800e988:	4622      	movlt	r2, r4
 800e98a:	4614      	movlt	r4, r2
 800e98c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e990:	d005      	beq.n	800e99e <__cvt+0x42>
 800e992:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e996:	d100      	bne.n	800e99a <__cvt+0x3e>
 800e998:	3601      	adds	r6, #1
 800e99a:	2102      	movs	r1, #2
 800e99c:	e000      	b.n	800e9a0 <__cvt+0x44>
 800e99e:	2103      	movs	r1, #3
 800e9a0:	ab03      	add	r3, sp, #12
 800e9a2:	9301      	str	r3, [sp, #4]
 800e9a4:	ab02      	add	r3, sp, #8
 800e9a6:	9300      	str	r3, [sp, #0]
 800e9a8:	ec45 4b10 	vmov	d0, r4, r5
 800e9ac:	4653      	mov	r3, sl
 800e9ae:	4632      	mov	r2, r6
 800e9b0:	f000 ff9a 	bl	800f8e8 <_dtoa_r>
 800e9b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e9b8:	4607      	mov	r7, r0
 800e9ba:	d102      	bne.n	800e9c2 <__cvt+0x66>
 800e9bc:	f019 0f01 	tst.w	r9, #1
 800e9c0:	d022      	beq.n	800ea08 <__cvt+0xac>
 800e9c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e9c6:	eb07 0906 	add.w	r9, r7, r6
 800e9ca:	d110      	bne.n	800e9ee <__cvt+0x92>
 800e9cc:	783b      	ldrb	r3, [r7, #0]
 800e9ce:	2b30      	cmp	r3, #48	; 0x30
 800e9d0:	d10a      	bne.n	800e9e8 <__cvt+0x8c>
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	4629      	mov	r1, r5
 800e9da:	f7f2 f875 	bl	8000ac8 <__aeabi_dcmpeq>
 800e9de:	b918      	cbnz	r0, 800e9e8 <__cvt+0x8c>
 800e9e0:	f1c6 0601 	rsb	r6, r6, #1
 800e9e4:	f8ca 6000 	str.w	r6, [sl]
 800e9e8:	f8da 3000 	ldr.w	r3, [sl]
 800e9ec:	4499      	add	r9, r3
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	4620      	mov	r0, r4
 800e9f4:	4629      	mov	r1, r5
 800e9f6:	f7f2 f867 	bl	8000ac8 <__aeabi_dcmpeq>
 800e9fa:	b108      	cbz	r0, 800ea00 <__cvt+0xa4>
 800e9fc:	f8cd 900c 	str.w	r9, [sp, #12]
 800ea00:	2230      	movs	r2, #48	; 0x30
 800ea02:	9b03      	ldr	r3, [sp, #12]
 800ea04:	454b      	cmp	r3, r9
 800ea06:	d307      	bcc.n	800ea18 <__cvt+0xbc>
 800ea08:	9b03      	ldr	r3, [sp, #12]
 800ea0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ea0c:	1bdb      	subs	r3, r3, r7
 800ea0e:	4638      	mov	r0, r7
 800ea10:	6013      	str	r3, [r2, #0]
 800ea12:	b004      	add	sp, #16
 800ea14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea18:	1c59      	adds	r1, r3, #1
 800ea1a:	9103      	str	r1, [sp, #12]
 800ea1c:	701a      	strb	r2, [r3, #0]
 800ea1e:	e7f0      	b.n	800ea02 <__cvt+0xa6>

0800ea20 <__exponent>:
 800ea20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ea22:	4603      	mov	r3, r0
 800ea24:	2900      	cmp	r1, #0
 800ea26:	bfb8      	it	lt
 800ea28:	4249      	neglt	r1, r1
 800ea2a:	f803 2b02 	strb.w	r2, [r3], #2
 800ea2e:	bfb4      	ite	lt
 800ea30:	222d      	movlt	r2, #45	; 0x2d
 800ea32:	222b      	movge	r2, #43	; 0x2b
 800ea34:	2909      	cmp	r1, #9
 800ea36:	7042      	strb	r2, [r0, #1]
 800ea38:	dd2a      	ble.n	800ea90 <__exponent+0x70>
 800ea3a:	f10d 0207 	add.w	r2, sp, #7
 800ea3e:	4617      	mov	r7, r2
 800ea40:	260a      	movs	r6, #10
 800ea42:	4694      	mov	ip, r2
 800ea44:	fb91 f5f6 	sdiv	r5, r1, r6
 800ea48:	fb06 1415 	mls	r4, r6, r5, r1
 800ea4c:	3430      	adds	r4, #48	; 0x30
 800ea4e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ea52:	460c      	mov	r4, r1
 800ea54:	2c63      	cmp	r4, #99	; 0x63
 800ea56:	f102 32ff 	add.w	r2, r2, #4294967295
 800ea5a:	4629      	mov	r1, r5
 800ea5c:	dcf1      	bgt.n	800ea42 <__exponent+0x22>
 800ea5e:	3130      	adds	r1, #48	; 0x30
 800ea60:	f1ac 0402 	sub.w	r4, ip, #2
 800ea64:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ea68:	1c41      	adds	r1, r0, #1
 800ea6a:	4622      	mov	r2, r4
 800ea6c:	42ba      	cmp	r2, r7
 800ea6e:	d30a      	bcc.n	800ea86 <__exponent+0x66>
 800ea70:	f10d 0209 	add.w	r2, sp, #9
 800ea74:	eba2 020c 	sub.w	r2, r2, ip
 800ea78:	42bc      	cmp	r4, r7
 800ea7a:	bf88      	it	hi
 800ea7c:	2200      	movhi	r2, #0
 800ea7e:	4413      	add	r3, r2
 800ea80:	1a18      	subs	r0, r3, r0
 800ea82:	b003      	add	sp, #12
 800ea84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea86:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ea8a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ea8e:	e7ed      	b.n	800ea6c <__exponent+0x4c>
 800ea90:	2330      	movs	r3, #48	; 0x30
 800ea92:	3130      	adds	r1, #48	; 0x30
 800ea94:	7083      	strb	r3, [r0, #2]
 800ea96:	70c1      	strb	r1, [r0, #3]
 800ea98:	1d03      	adds	r3, r0, #4
 800ea9a:	e7f1      	b.n	800ea80 <__exponent+0x60>

0800ea9c <_printf_float>:
 800ea9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaa0:	ed2d 8b02 	vpush	{d8}
 800eaa4:	b08d      	sub	sp, #52	; 0x34
 800eaa6:	460c      	mov	r4, r1
 800eaa8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800eaac:	4616      	mov	r6, r2
 800eaae:	461f      	mov	r7, r3
 800eab0:	4605      	mov	r5, r0
 800eab2:	f000 fdb7 	bl	800f624 <_localeconv_r>
 800eab6:	f8d0 a000 	ldr.w	sl, [r0]
 800eaba:	4650      	mov	r0, sl
 800eabc:	f7f1 fbd8 	bl	8000270 <strlen>
 800eac0:	2300      	movs	r3, #0
 800eac2:	930a      	str	r3, [sp, #40]	; 0x28
 800eac4:	6823      	ldr	r3, [r4, #0]
 800eac6:	9305      	str	r3, [sp, #20]
 800eac8:	f8d8 3000 	ldr.w	r3, [r8]
 800eacc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ead0:	3307      	adds	r3, #7
 800ead2:	f023 0307 	bic.w	r3, r3, #7
 800ead6:	f103 0208 	add.w	r2, r3, #8
 800eada:	f8c8 2000 	str.w	r2, [r8]
 800eade:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eae2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800eae6:	9307      	str	r3, [sp, #28]
 800eae8:	f8cd 8018 	str.w	r8, [sp, #24]
 800eaec:	ee08 0a10 	vmov	s16, r0
 800eaf0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800eaf4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eaf8:	4b9e      	ldr	r3, [pc, #632]	; (800ed74 <_printf_float+0x2d8>)
 800eafa:	f04f 32ff 	mov.w	r2, #4294967295
 800eafe:	f7f2 f815 	bl	8000b2c <__aeabi_dcmpun>
 800eb02:	bb88      	cbnz	r0, 800eb68 <_printf_float+0xcc>
 800eb04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb08:	4b9a      	ldr	r3, [pc, #616]	; (800ed74 <_printf_float+0x2d8>)
 800eb0a:	f04f 32ff 	mov.w	r2, #4294967295
 800eb0e:	f7f1 ffef 	bl	8000af0 <__aeabi_dcmple>
 800eb12:	bb48      	cbnz	r0, 800eb68 <_printf_float+0xcc>
 800eb14:	2200      	movs	r2, #0
 800eb16:	2300      	movs	r3, #0
 800eb18:	4640      	mov	r0, r8
 800eb1a:	4649      	mov	r1, r9
 800eb1c:	f7f1 ffde 	bl	8000adc <__aeabi_dcmplt>
 800eb20:	b110      	cbz	r0, 800eb28 <_printf_float+0x8c>
 800eb22:	232d      	movs	r3, #45	; 0x2d
 800eb24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb28:	4a93      	ldr	r2, [pc, #588]	; (800ed78 <_printf_float+0x2dc>)
 800eb2a:	4b94      	ldr	r3, [pc, #592]	; (800ed7c <_printf_float+0x2e0>)
 800eb2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800eb30:	bf94      	ite	ls
 800eb32:	4690      	movls	r8, r2
 800eb34:	4698      	movhi	r8, r3
 800eb36:	2303      	movs	r3, #3
 800eb38:	6123      	str	r3, [r4, #16]
 800eb3a:	9b05      	ldr	r3, [sp, #20]
 800eb3c:	f023 0304 	bic.w	r3, r3, #4
 800eb40:	6023      	str	r3, [r4, #0]
 800eb42:	f04f 0900 	mov.w	r9, #0
 800eb46:	9700      	str	r7, [sp, #0]
 800eb48:	4633      	mov	r3, r6
 800eb4a:	aa0b      	add	r2, sp, #44	; 0x2c
 800eb4c:	4621      	mov	r1, r4
 800eb4e:	4628      	mov	r0, r5
 800eb50:	f000 f9da 	bl	800ef08 <_printf_common>
 800eb54:	3001      	adds	r0, #1
 800eb56:	f040 8090 	bne.w	800ec7a <_printf_float+0x1de>
 800eb5a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb5e:	b00d      	add	sp, #52	; 0x34
 800eb60:	ecbd 8b02 	vpop	{d8}
 800eb64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb68:	4642      	mov	r2, r8
 800eb6a:	464b      	mov	r3, r9
 800eb6c:	4640      	mov	r0, r8
 800eb6e:	4649      	mov	r1, r9
 800eb70:	f7f1 ffdc 	bl	8000b2c <__aeabi_dcmpun>
 800eb74:	b140      	cbz	r0, 800eb88 <_printf_float+0xec>
 800eb76:	464b      	mov	r3, r9
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	bfbc      	itt	lt
 800eb7c:	232d      	movlt	r3, #45	; 0x2d
 800eb7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800eb82:	4a7f      	ldr	r2, [pc, #508]	; (800ed80 <_printf_float+0x2e4>)
 800eb84:	4b7f      	ldr	r3, [pc, #508]	; (800ed84 <_printf_float+0x2e8>)
 800eb86:	e7d1      	b.n	800eb2c <_printf_float+0x90>
 800eb88:	6863      	ldr	r3, [r4, #4]
 800eb8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800eb8e:	9206      	str	r2, [sp, #24]
 800eb90:	1c5a      	adds	r2, r3, #1
 800eb92:	d13f      	bne.n	800ec14 <_printf_float+0x178>
 800eb94:	2306      	movs	r3, #6
 800eb96:	6063      	str	r3, [r4, #4]
 800eb98:	9b05      	ldr	r3, [sp, #20]
 800eb9a:	6861      	ldr	r1, [r4, #4]
 800eb9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800eba0:	2300      	movs	r3, #0
 800eba2:	9303      	str	r3, [sp, #12]
 800eba4:	ab0a      	add	r3, sp, #40	; 0x28
 800eba6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ebaa:	ab09      	add	r3, sp, #36	; 0x24
 800ebac:	ec49 8b10 	vmov	d0, r8, r9
 800ebb0:	9300      	str	r3, [sp, #0]
 800ebb2:	6022      	str	r2, [r4, #0]
 800ebb4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ebb8:	4628      	mov	r0, r5
 800ebba:	f7ff fecf 	bl	800e95c <__cvt>
 800ebbe:	9b06      	ldr	r3, [sp, #24]
 800ebc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ebc2:	2b47      	cmp	r3, #71	; 0x47
 800ebc4:	4680      	mov	r8, r0
 800ebc6:	d108      	bne.n	800ebda <_printf_float+0x13e>
 800ebc8:	1cc8      	adds	r0, r1, #3
 800ebca:	db02      	blt.n	800ebd2 <_printf_float+0x136>
 800ebcc:	6863      	ldr	r3, [r4, #4]
 800ebce:	4299      	cmp	r1, r3
 800ebd0:	dd41      	ble.n	800ec56 <_printf_float+0x1ba>
 800ebd2:	f1ab 0302 	sub.w	r3, fp, #2
 800ebd6:	fa5f fb83 	uxtb.w	fp, r3
 800ebda:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ebde:	d820      	bhi.n	800ec22 <_printf_float+0x186>
 800ebe0:	3901      	subs	r1, #1
 800ebe2:	465a      	mov	r2, fp
 800ebe4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ebe8:	9109      	str	r1, [sp, #36]	; 0x24
 800ebea:	f7ff ff19 	bl	800ea20 <__exponent>
 800ebee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ebf0:	1813      	adds	r3, r2, r0
 800ebf2:	2a01      	cmp	r2, #1
 800ebf4:	4681      	mov	r9, r0
 800ebf6:	6123      	str	r3, [r4, #16]
 800ebf8:	dc02      	bgt.n	800ec00 <_printf_float+0x164>
 800ebfa:	6822      	ldr	r2, [r4, #0]
 800ebfc:	07d2      	lsls	r2, r2, #31
 800ebfe:	d501      	bpl.n	800ec04 <_printf_float+0x168>
 800ec00:	3301      	adds	r3, #1
 800ec02:	6123      	str	r3, [r4, #16]
 800ec04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d09c      	beq.n	800eb46 <_printf_float+0xaa>
 800ec0c:	232d      	movs	r3, #45	; 0x2d
 800ec0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec12:	e798      	b.n	800eb46 <_printf_float+0xaa>
 800ec14:	9a06      	ldr	r2, [sp, #24]
 800ec16:	2a47      	cmp	r2, #71	; 0x47
 800ec18:	d1be      	bne.n	800eb98 <_printf_float+0xfc>
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d1bc      	bne.n	800eb98 <_printf_float+0xfc>
 800ec1e:	2301      	movs	r3, #1
 800ec20:	e7b9      	b.n	800eb96 <_printf_float+0xfa>
 800ec22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ec26:	d118      	bne.n	800ec5a <_printf_float+0x1be>
 800ec28:	2900      	cmp	r1, #0
 800ec2a:	6863      	ldr	r3, [r4, #4]
 800ec2c:	dd0b      	ble.n	800ec46 <_printf_float+0x1aa>
 800ec2e:	6121      	str	r1, [r4, #16]
 800ec30:	b913      	cbnz	r3, 800ec38 <_printf_float+0x19c>
 800ec32:	6822      	ldr	r2, [r4, #0]
 800ec34:	07d0      	lsls	r0, r2, #31
 800ec36:	d502      	bpl.n	800ec3e <_printf_float+0x1a2>
 800ec38:	3301      	adds	r3, #1
 800ec3a:	440b      	add	r3, r1
 800ec3c:	6123      	str	r3, [r4, #16]
 800ec3e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ec40:	f04f 0900 	mov.w	r9, #0
 800ec44:	e7de      	b.n	800ec04 <_printf_float+0x168>
 800ec46:	b913      	cbnz	r3, 800ec4e <_printf_float+0x1b2>
 800ec48:	6822      	ldr	r2, [r4, #0]
 800ec4a:	07d2      	lsls	r2, r2, #31
 800ec4c:	d501      	bpl.n	800ec52 <_printf_float+0x1b6>
 800ec4e:	3302      	adds	r3, #2
 800ec50:	e7f4      	b.n	800ec3c <_printf_float+0x1a0>
 800ec52:	2301      	movs	r3, #1
 800ec54:	e7f2      	b.n	800ec3c <_printf_float+0x1a0>
 800ec56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ec5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec5c:	4299      	cmp	r1, r3
 800ec5e:	db05      	blt.n	800ec6c <_printf_float+0x1d0>
 800ec60:	6823      	ldr	r3, [r4, #0]
 800ec62:	6121      	str	r1, [r4, #16]
 800ec64:	07d8      	lsls	r0, r3, #31
 800ec66:	d5ea      	bpl.n	800ec3e <_printf_float+0x1a2>
 800ec68:	1c4b      	adds	r3, r1, #1
 800ec6a:	e7e7      	b.n	800ec3c <_printf_float+0x1a0>
 800ec6c:	2900      	cmp	r1, #0
 800ec6e:	bfd4      	ite	le
 800ec70:	f1c1 0202 	rsble	r2, r1, #2
 800ec74:	2201      	movgt	r2, #1
 800ec76:	4413      	add	r3, r2
 800ec78:	e7e0      	b.n	800ec3c <_printf_float+0x1a0>
 800ec7a:	6823      	ldr	r3, [r4, #0]
 800ec7c:	055a      	lsls	r2, r3, #21
 800ec7e:	d407      	bmi.n	800ec90 <_printf_float+0x1f4>
 800ec80:	6923      	ldr	r3, [r4, #16]
 800ec82:	4642      	mov	r2, r8
 800ec84:	4631      	mov	r1, r6
 800ec86:	4628      	mov	r0, r5
 800ec88:	47b8      	blx	r7
 800ec8a:	3001      	adds	r0, #1
 800ec8c:	d12c      	bne.n	800ece8 <_printf_float+0x24c>
 800ec8e:	e764      	b.n	800eb5a <_printf_float+0xbe>
 800ec90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ec94:	f240 80e0 	bls.w	800ee58 <_printf_float+0x3bc>
 800ec98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	2300      	movs	r3, #0
 800eca0:	f7f1 ff12 	bl	8000ac8 <__aeabi_dcmpeq>
 800eca4:	2800      	cmp	r0, #0
 800eca6:	d034      	beq.n	800ed12 <_printf_float+0x276>
 800eca8:	4a37      	ldr	r2, [pc, #220]	; (800ed88 <_printf_float+0x2ec>)
 800ecaa:	2301      	movs	r3, #1
 800ecac:	4631      	mov	r1, r6
 800ecae:	4628      	mov	r0, r5
 800ecb0:	47b8      	blx	r7
 800ecb2:	3001      	adds	r0, #1
 800ecb4:	f43f af51 	beq.w	800eb5a <_printf_float+0xbe>
 800ecb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	db02      	blt.n	800ecc6 <_printf_float+0x22a>
 800ecc0:	6823      	ldr	r3, [r4, #0]
 800ecc2:	07d8      	lsls	r0, r3, #31
 800ecc4:	d510      	bpl.n	800ece8 <_printf_float+0x24c>
 800ecc6:	ee18 3a10 	vmov	r3, s16
 800ecca:	4652      	mov	r2, sl
 800eccc:	4631      	mov	r1, r6
 800ecce:	4628      	mov	r0, r5
 800ecd0:	47b8      	blx	r7
 800ecd2:	3001      	adds	r0, #1
 800ecd4:	f43f af41 	beq.w	800eb5a <_printf_float+0xbe>
 800ecd8:	f04f 0800 	mov.w	r8, #0
 800ecdc:	f104 091a 	add.w	r9, r4, #26
 800ece0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ece2:	3b01      	subs	r3, #1
 800ece4:	4543      	cmp	r3, r8
 800ece6:	dc09      	bgt.n	800ecfc <_printf_float+0x260>
 800ece8:	6823      	ldr	r3, [r4, #0]
 800ecea:	079b      	lsls	r3, r3, #30
 800ecec:	f100 8107 	bmi.w	800eefe <_printf_float+0x462>
 800ecf0:	68e0      	ldr	r0, [r4, #12]
 800ecf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ecf4:	4298      	cmp	r0, r3
 800ecf6:	bfb8      	it	lt
 800ecf8:	4618      	movlt	r0, r3
 800ecfa:	e730      	b.n	800eb5e <_printf_float+0xc2>
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	464a      	mov	r2, r9
 800ed00:	4631      	mov	r1, r6
 800ed02:	4628      	mov	r0, r5
 800ed04:	47b8      	blx	r7
 800ed06:	3001      	adds	r0, #1
 800ed08:	f43f af27 	beq.w	800eb5a <_printf_float+0xbe>
 800ed0c:	f108 0801 	add.w	r8, r8, #1
 800ed10:	e7e6      	b.n	800ece0 <_printf_float+0x244>
 800ed12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	dc39      	bgt.n	800ed8c <_printf_float+0x2f0>
 800ed18:	4a1b      	ldr	r2, [pc, #108]	; (800ed88 <_printf_float+0x2ec>)
 800ed1a:	2301      	movs	r3, #1
 800ed1c:	4631      	mov	r1, r6
 800ed1e:	4628      	mov	r0, r5
 800ed20:	47b8      	blx	r7
 800ed22:	3001      	adds	r0, #1
 800ed24:	f43f af19 	beq.w	800eb5a <_printf_float+0xbe>
 800ed28:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ed2c:	4313      	orrs	r3, r2
 800ed2e:	d102      	bne.n	800ed36 <_printf_float+0x29a>
 800ed30:	6823      	ldr	r3, [r4, #0]
 800ed32:	07d9      	lsls	r1, r3, #31
 800ed34:	d5d8      	bpl.n	800ece8 <_printf_float+0x24c>
 800ed36:	ee18 3a10 	vmov	r3, s16
 800ed3a:	4652      	mov	r2, sl
 800ed3c:	4631      	mov	r1, r6
 800ed3e:	4628      	mov	r0, r5
 800ed40:	47b8      	blx	r7
 800ed42:	3001      	adds	r0, #1
 800ed44:	f43f af09 	beq.w	800eb5a <_printf_float+0xbe>
 800ed48:	f04f 0900 	mov.w	r9, #0
 800ed4c:	f104 0a1a 	add.w	sl, r4, #26
 800ed50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed52:	425b      	negs	r3, r3
 800ed54:	454b      	cmp	r3, r9
 800ed56:	dc01      	bgt.n	800ed5c <_printf_float+0x2c0>
 800ed58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed5a:	e792      	b.n	800ec82 <_printf_float+0x1e6>
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	4652      	mov	r2, sl
 800ed60:	4631      	mov	r1, r6
 800ed62:	4628      	mov	r0, r5
 800ed64:	47b8      	blx	r7
 800ed66:	3001      	adds	r0, #1
 800ed68:	f43f aef7 	beq.w	800eb5a <_printf_float+0xbe>
 800ed6c:	f109 0901 	add.w	r9, r9, #1
 800ed70:	e7ee      	b.n	800ed50 <_printf_float+0x2b4>
 800ed72:	bf00      	nop
 800ed74:	7fefffff 	.word	0x7fefffff
 800ed78:	08011e04 	.word	0x08011e04
 800ed7c:	08011e08 	.word	0x08011e08
 800ed80:	08011e0c 	.word	0x08011e0c
 800ed84:	08011e10 	.word	0x08011e10
 800ed88:	08011e14 	.word	0x08011e14
 800ed8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ed90:	429a      	cmp	r2, r3
 800ed92:	bfa8      	it	ge
 800ed94:	461a      	movge	r2, r3
 800ed96:	2a00      	cmp	r2, #0
 800ed98:	4691      	mov	r9, r2
 800ed9a:	dc37      	bgt.n	800ee0c <_printf_float+0x370>
 800ed9c:	f04f 0b00 	mov.w	fp, #0
 800eda0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eda4:	f104 021a 	add.w	r2, r4, #26
 800eda8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800edaa:	9305      	str	r3, [sp, #20]
 800edac:	eba3 0309 	sub.w	r3, r3, r9
 800edb0:	455b      	cmp	r3, fp
 800edb2:	dc33      	bgt.n	800ee1c <_printf_float+0x380>
 800edb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800edb8:	429a      	cmp	r2, r3
 800edba:	db3b      	blt.n	800ee34 <_printf_float+0x398>
 800edbc:	6823      	ldr	r3, [r4, #0]
 800edbe:	07da      	lsls	r2, r3, #31
 800edc0:	d438      	bmi.n	800ee34 <_printf_float+0x398>
 800edc2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800edc6:	eba2 0903 	sub.w	r9, r2, r3
 800edca:	9b05      	ldr	r3, [sp, #20]
 800edcc:	1ad2      	subs	r2, r2, r3
 800edce:	4591      	cmp	r9, r2
 800edd0:	bfa8      	it	ge
 800edd2:	4691      	movge	r9, r2
 800edd4:	f1b9 0f00 	cmp.w	r9, #0
 800edd8:	dc35      	bgt.n	800ee46 <_printf_float+0x3aa>
 800edda:	f04f 0800 	mov.w	r8, #0
 800edde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ede2:	f104 0a1a 	add.w	sl, r4, #26
 800ede6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800edea:	1a9b      	subs	r3, r3, r2
 800edec:	eba3 0309 	sub.w	r3, r3, r9
 800edf0:	4543      	cmp	r3, r8
 800edf2:	f77f af79 	ble.w	800ece8 <_printf_float+0x24c>
 800edf6:	2301      	movs	r3, #1
 800edf8:	4652      	mov	r2, sl
 800edfa:	4631      	mov	r1, r6
 800edfc:	4628      	mov	r0, r5
 800edfe:	47b8      	blx	r7
 800ee00:	3001      	adds	r0, #1
 800ee02:	f43f aeaa 	beq.w	800eb5a <_printf_float+0xbe>
 800ee06:	f108 0801 	add.w	r8, r8, #1
 800ee0a:	e7ec      	b.n	800ede6 <_printf_float+0x34a>
 800ee0c:	4613      	mov	r3, r2
 800ee0e:	4631      	mov	r1, r6
 800ee10:	4642      	mov	r2, r8
 800ee12:	4628      	mov	r0, r5
 800ee14:	47b8      	blx	r7
 800ee16:	3001      	adds	r0, #1
 800ee18:	d1c0      	bne.n	800ed9c <_printf_float+0x300>
 800ee1a:	e69e      	b.n	800eb5a <_printf_float+0xbe>
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	4631      	mov	r1, r6
 800ee20:	4628      	mov	r0, r5
 800ee22:	9205      	str	r2, [sp, #20]
 800ee24:	47b8      	blx	r7
 800ee26:	3001      	adds	r0, #1
 800ee28:	f43f ae97 	beq.w	800eb5a <_printf_float+0xbe>
 800ee2c:	9a05      	ldr	r2, [sp, #20]
 800ee2e:	f10b 0b01 	add.w	fp, fp, #1
 800ee32:	e7b9      	b.n	800eda8 <_printf_float+0x30c>
 800ee34:	ee18 3a10 	vmov	r3, s16
 800ee38:	4652      	mov	r2, sl
 800ee3a:	4631      	mov	r1, r6
 800ee3c:	4628      	mov	r0, r5
 800ee3e:	47b8      	blx	r7
 800ee40:	3001      	adds	r0, #1
 800ee42:	d1be      	bne.n	800edc2 <_printf_float+0x326>
 800ee44:	e689      	b.n	800eb5a <_printf_float+0xbe>
 800ee46:	9a05      	ldr	r2, [sp, #20]
 800ee48:	464b      	mov	r3, r9
 800ee4a:	4442      	add	r2, r8
 800ee4c:	4631      	mov	r1, r6
 800ee4e:	4628      	mov	r0, r5
 800ee50:	47b8      	blx	r7
 800ee52:	3001      	adds	r0, #1
 800ee54:	d1c1      	bne.n	800edda <_printf_float+0x33e>
 800ee56:	e680      	b.n	800eb5a <_printf_float+0xbe>
 800ee58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee5a:	2a01      	cmp	r2, #1
 800ee5c:	dc01      	bgt.n	800ee62 <_printf_float+0x3c6>
 800ee5e:	07db      	lsls	r3, r3, #31
 800ee60:	d53a      	bpl.n	800eed8 <_printf_float+0x43c>
 800ee62:	2301      	movs	r3, #1
 800ee64:	4642      	mov	r2, r8
 800ee66:	4631      	mov	r1, r6
 800ee68:	4628      	mov	r0, r5
 800ee6a:	47b8      	blx	r7
 800ee6c:	3001      	adds	r0, #1
 800ee6e:	f43f ae74 	beq.w	800eb5a <_printf_float+0xbe>
 800ee72:	ee18 3a10 	vmov	r3, s16
 800ee76:	4652      	mov	r2, sl
 800ee78:	4631      	mov	r1, r6
 800ee7a:	4628      	mov	r0, r5
 800ee7c:	47b8      	blx	r7
 800ee7e:	3001      	adds	r0, #1
 800ee80:	f43f ae6b 	beq.w	800eb5a <_printf_float+0xbe>
 800ee84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ee88:	2200      	movs	r2, #0
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ee90:	f7f1 fe1a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee94:	b9d8      	cbnz	r0, 800eece <_printf_float+0x432>
 800ee96:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ee9a:	f108 0201 	add.w	r2, r8, #1
 800ee9e:	4631      	mov	r1, r6
 800eea0:	4628      	mov	r0, r5
 800eea2:	47b8      	blx	r7
 800eea4:	3001      	adds	r0, #1
 800eea6:	d10e      	bne.n	800eec6 <_printf_float+0x42a>
 800eea8:	e657      	b.n	800eb5a <_printf_float+0xbe>
 800eeaa:	2301      	movs	r3, #1
 800eeac:	4652      	mov	r2, sl
 800eeae:	4631      	mov	r1, r6
 800eeb0:	4628      	mov	r0, r5
 800eeb2:	47b8      	blx	r7
 800eeb4:	3001      	adds	r0, #1
 800eeb6:	f43f ae50 	beq.w	800eb5a <_printf_float+0xbe>
 800eeba:	f108 0801 	add.w	r8, r8, #1
 800eebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eec0:	3b01      	subs	r3, #1
 800eec2:	4543      	cmp	r3, r8
 800eec4:	dcf1      	bgt.n	800eeaa <_printf_float+0x40e>
 800eec6:	464b      	mov	r3, r9
 800eec8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800eecc:	e6da      	b.n	800ec84 <_printf_float+0x1e8>
 800eece:	f04f 0800 	mov.w	r8, #0
 800eed2:	f104 0a1a 	add.w	sl, r4, #26
 800eed6:	e7f2      	b.n	800eebe <_printf_float+0x422>
 800eed8:	2301      	movs	r3, #1
 800eeda:	4642      	mov	r2, r8
 800eedc:	e7df      	b.n	800ee9e <_printf_float+0x402>
 800eede:	2301      	movs	r3, #1
 800eee0:	464a      	mov	r2, r9
 800eee2:	4631      	mov	r1, r6
 800eee4:	4628      	mov	r0, r5
 800eee6:	47b8      	blx	r7
 800eee8:	3001      	adds	r0, #1
 800eeea:	f43f ae36 	beq.w	800eb5a <_printf_float+0xbe>
 800eeee:	f108 0801 	add.w	r8, r8, #1
 800eef2:	68e3      	ldr	r3, [r4, #12]
 800eef4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eef6:	1a5b      	subs	r3, r3, r1
 800eef8:	4543      	cmp	r3, r8
 800eefa:	dcf0      	bgt.n	800eede <_printf_float+0x442>
 800eefc:	e6f8      	b.n	800ecf0 <_printf_float+0x254>
 800eefe:	f04f 0800 	mov.w	r8, #0
 800ef02:	f104 0919 	add.w	r9, r4, #25
 800ef06:	e7f4      	b.n	800eef2 <_printf_float+0x456>

0800ef08 <_printf_common>:
 800ef08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef0c:	4616      	mov	r6, r2
 800ef0e:	4699      	mov	r9, r3
 800ef10:	688a      	ldr	r2, [r1, #8]
 800ef12:	690b      	ldr	r3, [r1, #16]
 800ef14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	bfb8      	it	lt
 800ef1c:	4613      	movlt	r3, r2
 800ef1e:	6033      	str	r3, [r6, #0]
 800ef20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ef24:	4607      	mov	r7, r0
 800ef26:	460c      	mov	r4, r1
 800ef28:	b10a      	cbz	r2, 800ef2e <_printf_common+0x26>
 800ef2a:	3301      	adds	r3, #1
 800ef2c:	6033      	str	r3, [r6, #0]
 800ef2e:	6823      	ldr	r3, [r4, #0]
 800ef30:	0699      	lsls	r1, r3, #26
 800ef32:	bf42      	ittt	mi
 800ef34:	6833      	ldrmi	r3, [r6, #0]
 800ef36:	3302      	addmi	r3, #2
 800ef38:	6033      	strmi	r3, [r6, #0]
 800ef3a:	6825      	ldr	r5, [r4, #0]
 800ef3c:	f015 0506 	ands.w	r5, r5, #6
 800ef40:	d106      	bne.n	800ef50 <_printf_common+0x48>
 800ef42:	f104 0a19 	add.w	sl, r4, #25
 800ef46:	68e3      	ldr	r3, [r4, #12]
 800ef48:	6832      	ldr	r2, [r6, #0]
 800ef4a:	1a9b      	subs	r3, r3, r2
 800ef4c:	42ab      	cmp	r3, r5
 800ef4e:	dc26      	bgt.n	800ef9e <_printf_common+0x96>
 800ef50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ef54:	1e13      	subs	r3, r2, #0
 800ef56:	6822      	ldr	r2, [r4, #0]
 800ef58:	bf18      	it	ne
 800ef5a:	2301      	movne	r3, #1
 800ef5c:	0692      	lsls	r2, r2, #26
 800ef5e:	d42b      	bmi.n	800efb8 <_printf_common+0xb0>
 800ef60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef64:	4649      	mov	r1, r9
 800ef66:	4638      	mov	r0, r7
 800ef68:	47c0      	blx	r8
 800ef6a:	3001      	adds	r0, #1
 800ef6c:	d01e      	beq.n	800efac <_printf_common+0xa4>
 800ef6e:	6823      	ldr	r3, [r4, #0]
 800ef70:	6922      	ldr	r2, [r4, #16]
 800ef72:	f003 0306 	and.w	r3, r3, #6
 800ef76:	2b04      	cmp	r3, #4
 800ef78:	bf02      	ittt	eq
 800ef7a:	68e5      	ldreq	r5, [r4, #12]
 800ef7c:	6833      	ldreq	r3, [r6, #0]
 800ef7e:	1aed      	subeq	r5, r5, r3
 800ef80:	68a3      	ldr	r3, [r4, #8]
 800ef82:	bf0c      	ite	eq
 800ef84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef88:	2500      	movne	r5, #0
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	bfc4      	itt	gt
 800ef8e:	1a9b      	subgt	r3, r3, r2
 800ef90:	18ed      	addgt	r5, r5, r3
 800ef92:	2600      	movs	r6, #0
 800ef94:	341a      	adds	r4, #26
 800ef96:	42b5      	cmp	r5, r6
 800ef98:	d11a      	bne.n	800efd0 <_printf_common+0xc8>
 800ef9a:	2000      	movs	r0, #0
 800ef9c:	e008      	b.n	800efb0 <_printf_common+0xa8>
 800ef9e:	2301      	movs	r3, #1
 800efa0:	4652      	mov	r2, sl
 800efa2:	4649      	mov	r1, r9
 800efa4:	4638      	mov	r0, r7
 800efa6:	47c0      	blx	r8
 800efa8:	3001      	adds	r0, #1
 800efaa:	d103      	bne.n	800efb4 <_printf_common+0xac>
 800efac:	f04f 30ff 	mov.w	r0, #4294967295
 800efb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efb4:	3501      	adds	r5, #1
 800efb6:	e7c6      	b.n	800ef46 <_printf_common+0x3e>
 800efb8:	18e1      	adds	r1, r4, r3
 800efba:	1c5a      	adds	r2, r3, #1
 800efbc:	2030      	movs	r0, #48	; 0x30
 800efbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800efc2:	4422      	add	r2, r4
 800efc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800efc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800efcc:	3302      	adds	r3, #2
 800efce:	e7c7      	b.n	800ef60 <_printf_common+0x58>
 800efd0:	2301      	movs	r3, #1
 800efd2:	4622      	mov	r2, r4
 800efd4:	4649      	mov	r1, r9
 800efd6:	4638      	mov	r0, r7
 800efd8:	47c0      	blx	r8
 800efda:	3001      	adds	r0, #1
 800efdc:	d0e6      	beq.n	800efac <_printf_common+0xa4>
 800efde:	3601      	adds	r6, #1
 800efe0:	e7d9      	b.n	800ef96 <_printf_common+0x8e>
	...

0800efe4 <_printf_i>:
 800efe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800efe8:	7e0f      	ldrb	r7, [r1, #24]
 800efea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800efec:	2f78      	cmp	r7, #120	; 0x78
 800efee:	4691      	mov	r9, r2
 800eff0:	4680      	mov	r8, r0
 800eff2:	460c      	mov	r4, r1
 800eff4:	469a      	mov	sl, r3
 800eff6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800effa:	d807      	bhi.n	800f00c <_printf_i+0x28>
 800effc:	2f62      	cmp	r7, #98	; 0x62
 800effe:	d80a      	bhi.n	800f016 <_printf_i+0x32>
 800f000:	2f00      	cmp	r7, #0
 800f002:	f000 80d4 	beq.w	800f1ae <_printf_i+0x1ca>
 800f006:	2f58      	cmp	r7, #88	; 0x58
 800f008:	f000 80c0 	beq.w	800f18c <_printf_i+0x1a8>
 800f00c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f010:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f014:	e03a      	b.n	800f08c <_printf_i+0xa8>
 800f016:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f01a:	2b15      	cmp	r3, #21
 800f01c:	d8f6      	bhi.n	800f00c <_printf_i+0x28>
 800f01e:	a101      	add	r1, pc, #4	; (adr r1, 800f024 <_printf_i+0x40>)
 800f020:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f024:	0800f07d 	.word	0x0800f07d
 800f028:	0800f091 	.word	0x0800f091
 800f02c:	0800f00d 	.word	0x0800f00d
 800f030:	0800f00d 	.word	0x0800f00d
 800f034:	0800f00d 	.word	0x0800f00d
 800f038:	0800f00d 	.word	0x0800f00d
 800f03c:	0800f091 	.word	0x0800f091
 800f040:	0800f00d 	.word	0x0800f00d
 800f044:	0800f00d 	.word	0x0800f00d
 800f048:	0800f00d 	.word	0x0800f00d
 800f04c:	0800f00d 	.word	0x0800f00d
 800f050:	0800f195 	.word	0x0800f195
 800f054:	0800f0bd 	.word	0x0800f0bd
 800f058:	0800f14f 	.word	0x0800f14f
 800f05c:	0800f00d 	.word	0x0800f00d
 800f060:	0800f00d 	.word	0x0800f00d
 800f064:	0800f1b7 	.word	0x0800f1b7
 800f068:	0800f00d 	.word	0x0800f00d
 800f06c:	0800f0bd 	.word	0x0800f0bd
 800f070:	0800f00d 	.word	0x0800f00d
 800f074:	0800f00d 	.word	0x0800f00d
 800f078:	0800f157 	.word	0x0800f157
 800f07c:	682b      	ldr	r3, [r5, #0]
 800f07e:	1d1a      	adds	r2, r3, #4
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	602a      	str	r2, [r5, #0]
 800f084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f088:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f08c:	2301      	movs	r3, #1
 800f08e:	e09f      	b.n	800f1d0 <_printf_i+0x1ec>
 800f090:	6820      	ldr	r0, [r4, #0]
 800f092:	682b      	ldr	r3, [r5, #0]
 800f094:	0607      	lsls	r7, r0, #24
 800f096:	f103 0104 	add.w	r1, r3, #4
 800f09a:	6029      	str	r1, [r5, #0]
 800f09c:	d501      	bpl.n	800f0a2 <_printf_i+0xbe>
 800f09e:	681e      	ldr	r6, [r3, #0]
 800f0a0:	e003      	b.n	800f0aa <_printf_i+0xc6>
 800f0a2:	0646      	lsls	r6, r0, #25
 800f0a4:	d5fb      	bpl.n	800f09e <_printf_i+0xba>
 800f0a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f0aa:	2e00      	cmp	r6, #0
 800f0ac:	da03      	bge.n	800f0b6 <_printf_i+0xd2>
 800f0ae:	232d      	movs	r3, #45	; 0x2d
 800f0b0:	4276      	negs	r6, r6
 800f0b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0b6:	485a      	ldr	r0, [pc, #360]	; (800f220 <_printf_i+0x23c>)
 800f0b8:	230a      	movs	r3, #10
 800f0ba:	e012      	b.n	800f0e2 <_printf_i+0xfe>
 800f0bc:	682b      	ldr	r3, [r5, #0]
 800f0be:	6820      	ldr	r0, [r4, #0]
 800f0c0:	1d19      	adds	r1, r3, #4
 800f0c2:	6029      	str	r1, [r5, #0]
 800f0c4:	0605      	lsls	r5, r0, #24
 800f0c6:	d501      	bpl.n	800f0cc <_printf_i+0xe8>
 800f0c8:	681e      	ldr	r6, [r3, #0]
 800f0ca:	e002      	b.n	800f0d2 <_printf_i+0xee>
 800f0cc:	0641      	lsls	r1, r0, #25
 800f0ce:	d5fb      	bpl.n	800f0c8 <_printf_i+0xe4>
 800f0d0:	881e      	ldrh	r6, [r3, #0]
 800f0d2:	4853      	ldr	r0, [pc, #332]	; (800f220 <_printf_i+0x23c>)
 800f0d4:	2f6f      	cmp	r7, #111	; 0x6f
 800f0d6:	bf0c      	ite	eq
 800f0d8:	2308      	moveq	r3, #8
 800f0da:	230a      	movne	r3, #10
 800f0dc:	2100      	movs	r1, #0
 800f0de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f0e2:	6865      	ldr	r5, [r4, #4]
 800f0e4:	60a5      	str	r5, [r4, #8]
 800f0e6:	2d00      	cmp	r5, #0
 800f0e8:	bfa2      	ittt	ge
 800f0ea:	6821      	ldrge	r1, [r4, #0]
 800f0ec:	f021 0104 	bicge.w	r1, r1, #4
 800f0f0:	6021      	strge	r1, [r4, #0]
 800f0f2:	b90e      	cbnz	r6, 800f0f8 <_printf_i+0x114>
 800f0f4:	2d00      	cmp	r5, #0
 800f0f6:	d04b      	beq.n	800f190 <_printf_i+0x1ac>
 800f0f8:	4615      	mov	r5, r2
 800f0fa:	fbb6 f1f3 	udiv	r1, r6, r3
 800f0fe:	fb03 6711 	mls	r7, r3, r1, r6
 800f102:	5dc7      	ldrb	r7, [r0, r7]
 800f104:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f108:	4637      	mov	r7, r6
 800f10a:	42bb      	cmp	r3, r7
 800f10c:	460e      	mov	r6, r1
 800f10e:	d9f4      	bls.n	800f0fa <_printf_i+0x116>
 800f110:	2b08      	cmp	r3, #8
 800f112:	d10b      	bne.n	800f12c <_printf_i+0x148>
 800f114:	6823      	ldr	r3, [r4, #0]
 800f116:	07de      	lsls	r6, r3, #31
 800f118:	d508      	bpl.n	800f12c <_printf_i+0x148>
 800f11a:	6923      	ldr	r3, [r4, #16]
 800f11c:	6861      	ldr	r1, [r4, #4]
 800f11e:	4299      	cmp	r1, r3
 800f120:	bfde      	ittt	le
 800f122:	2330      	movle	r3, #48	; 0x30
 800f124:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f128:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f12c:	1b52      	subs	r2, r2, r5
 800f12e:	6122      	str	r2, [r4, #16]
 800f130:	f8cd a000 	str.w	sl, [sp]
 800f134:	464b      	mov	r3, r9
 800f136:	aa03      	add	r2, sp, #12
 800f138:	4621      	mov	r1, r4
 800f13a:	4640      	mov	r0, r8
 800f13c:	f7ff fee4 	bl	800ef08 <_printf_common>
 800f140:	3001      	adds	r0, #1
 800f142:	d14a      	bne.n	800f1da <_printf_i+0x1f6>
 800f144:	f04f 30ff 	mov.w	r0, #4294967295
 800f148:	b004      	add	sp, #16
 800f14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f14e:	6823      	ldr	r3, [r4, #0]
 800f150:	f043 0320 	orr.w	r3, r3, #32
 800f154:	6023      	str	r3, [r4, #0]
 800f156:	4833      	ldr	r0, [pc, #204]	; (800f224 <_printf_i+0x240>)
 800f158:	2778      	movs	r7, #120	; 0x78
 800f15a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f15e:	6823      	ldr	r3, [r4, #0]
 800f160:	6829      	ldr	r1, [r5, #0]
 800f162:	061f      	lsls	r7, r3, #24
 800f164:	f851 6b04 	ldr.w	r6, [r1], #4
 800f168:	d402      	bmi.n	800f170 <_printf_i+0x18c>
 800f16a:	065f      	lsls	r7, r3, #25
 800f16c:	bf48      	it	mi
 800f16e:	b2b6      	uxthmi	r6, r6
 800f170:	07df      	lsls	r7, r3, #31
 800f172:	bf48      	it	mi
 800f174:	f043 0320 	orrmi.w	r3, r3, #32
 800f178:	6029      	str	r1, [r5, #0]
 800f17a:	bf48      	it	mi
 800f17c:	6023      	strmi	r3, [r4, #0]
 800f17e:	b91e      	cbnz	r6, 800f188 <_printf_i+0x1a4>
 800f180:	6823      	ldr	r3, [r4, #0]
 800f182:	f023 0320 	bic.w	r3, r3, #32
 800f186:	6023      	str	r3, [r4, #0]
 800f188:	2310      	movs	r3, #16
 800f18a:	e7a7      	b.n	800f0dc <_printf_i+0xf8>
 800f18c:	4824      	ldr	r0, [pc, #144]	; (800f220 <_printf_i+0x23c>)
 800f18e:	e7e4      	b.n	800f15a <_printf_i+0x176>
 800f190:	4615      	mov	r5, r2
 800f192:	e7bd      	b.n	800f110 <_printf_i+0x12c>
 800f194:	682b      	ldr	r3, [r5, #0]
 800f196:	6826      	ldr	r6, [r4, #0]
 800f198:	6961      	ldr	r1, [r4, #20]
 800f19a:	1d18      	adds	r0, r3, #4
 800f19c:	6028      	str	r0, [r5, #0]
 800f19e:	0635      	lsls	r5, r6, #24
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	d501      	bpl.n	800f1a8 <_printf_i+0x1c4>
 800f1a4:	6019      	str	r1, [r3, #0]
 800f1a6:	e002      	b.n	800f1ae <_printf_i+0x1ca>
 800f1a8:	0670      	lsls	r0, r6, #25
 800f1aa:	d5fb      	bpl.n	800f1a4 <_printf_i+0x1c0>
 800f1ac:	8019      	strh	r1, [r3, #0]
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	6123      	str	r3, [r4, #16]
 800f1b2:	4615      	mov	r5, r2
 800f1b4:	e7bc      	b.n	800f130 <_printf_i+0x14c>
 800f1b6:	682b      	ldr	r3, [r5, #0]
 800f1b8:	1d1a      	adds	r2, r3, #4
 800f1ba:	602a      	str	r2, [r5, #0]
 800f1bc:	681d      	ldr	r5, [r3, #0]
 800f1be:	6862      	ldr	r2, [r4, #4]
 800f1c0:	2100      	movs	r1, #0
 800f1c2:	4628      	mov	r0, r5
 800f1c4:	f7f1 f804 	bl	80001d0 <memchr>
 800f1c8:	b108      	cbz	r0, 800f1ce <_printf_i+0x1ea>
 800f1ca:	1b40      	subs	r0, r0, r5
 800f1cc:	6060      	str	r0, [r4, #4]
 800f1ce:	6863      	ldr	r3, [r4, #4]
 800f1d0:	6123      	str	r3, [r4, #16]
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1d8:	e7aa      	b.n	800f130 <_printf_i+0x14c>
 800f1da:	6923      	ldr	r3, [r4, #16]
 800f1dc:	462a      	mov	r2, r5
 800f1de:	4649      	mov	r1, r9
 800f1e0:	4640      	mov	r0, r8
 800f1e2:	47d0      	blx	sl
 800f1e4:	3001      	adds	r0, #1
 800f1e6:	d0ad      	beq.n	800f144 <_printf_i+0x160>
 800f1e8:	6823      	ldr	r3, [r4, #0]
 800f1ea:	079b      	lsls	r3, r3, #30
 800f1ec:	d413      	bmi.n	800f216 <_printf_i+0x232>
 800f1ee:	68e0      	ldr	r0, [r4, #12]
 800f1f0:	9b03      	ldr	r3, [sp, #12]
 800f1f2:	4298      	cmp	r0, r3
 800f1f4:	bfb8      	it	lt
 800f1f6:	4618      	movlt	r0, r3
 800f1f8:	e7a6      	b.n	800f148 <_printf_i+0x164>
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	4632      	mov	r2, r6
 800f1fe:	4649      	mov	r1, r9
 800f200:	4640      	mov	r0, r8
 800f202:	47d0      	blx	sl
 800f204:	3001      	adds	r0, #1
 800f206:	d09d      	beq.n	800f144 <_printf_i+0x160>
 800f208:	3501      	adds	r5, #1
 800f20a:	68e3      	ldr	r3, [r4, #12]
 800f20c:	9903      	ldr	r1, [sp, #12]
 800f20e:	1a5b      	subs	r3, r3, r1
 800f210:	42ab      	cmp	r3, r5
 800f212:	dcf2      	bgt.n	800f1fa <_printf_i+0x216>
 800f214:	e7eb      	b.n	800f1ee <_printf_i+0x20a>
 800f216:	2500      	movs	r5, #0
 800f218:	f104 0619 	add.w	r6, r4, #25
 800f21c:	e7f5      	b.n	800f20a <_printf_i+0x226>
 800f21e:	bf00      	nop
 800f220:	08011e16 	.word	0x08011e16
 800f224:	08011e27 	.word	0x08011e27

0800f228 <std>:
 800f228:	2300      	movs	r3, #0
 800f22a:	b510      	push	{r4, lr}
 800f22c:	4604      	mov	r4, r0
 800f22e:	e9c0 3300 	strd	r3, r3, [r0]
 800f232:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f236:	6083      	str	r3, [r0, #8]
 800f238:	8181      	strh	r1, [r0, #12]
 800f23a:	6643      	str	r3, [r0, #100]	; 0x64
 800f23c:	81c2      	strh	r2, [r0, #14]
 800f23e:	6183      	str	r3, [r0, #24]
 800f240:	4619      	mov	r1, r3
 800f242:	2208      	movs	r2, #8
 800f244:	305c      	adds	r0, #92	; 0x5c
 800f246:	f000 f9e5 	bl	800f614 <memset>
 800f24a:	4b05      	ldr	r3, [pc, #20]	; (800f260 <std+0x38>)
 800f24c:	6263      	str	r3, [r4, #36]	; 0x24
 800f24e:	4b05      	ldr	r3, [pc, #20]	; (800f264 <std+0x3c>)
 800f250:	62a3      	str	r3, [r4, #40]	; 0x28
 800f252:	4b05      	ldr	r3, [pc, #20]	; (800f268 <std+0x40>)
 800f254:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f256:	4b05      	ldr	r3, [pc, #20]	; (800f26c <std+0x44>)
 800f258:	6224      	str	r4, [r4, #32]
 800f25a:	6323      	str	r3, [r4, #48]	; 0x30
 800f25c:	bd10      	pop	{r4, pc}
 800f25e:	bf00      	nop
 800f260:	0800f465 	.word	0x0800f465
 800f264:	0800f487 	.word	0x0800f487
 800f268:	0800f4bf 	.word	0x0800f4bf
 800f26c:	0800f4e3 	.word	0x0800f4e3

0800f270 <stdio_exit_handler>:
 800f270:	4a02      	ldr	r2, [pc, #8]	; (800f27c <stdio_exit_handler+0xc>)
 800f272:	4903      	ldr	r1, [pc, #12]	; (800f280 <stdio_exit_handler+0x10>)
 800f274:	4803      	ldr	r0, [pc, #12]	; (800f284 <stdio_exit_handler+0x14>)
 800f276:	f000 b869 	b.w	800f34c <_fwalk_sglue>
 800f27a:	bf00      	nop
 800f27c:	20000198 	.word	0x20000198
 800f280:	08011159 	.word	0x08011159
 800f284:	200001a4 	.word	0x200001a4

0800f288 <cleanup_stdio>:
 800f288:	6841      	ldr	r1, [r0, #4]
 800f28a:	4b0c      	ldr	r3, [pc, #48]	; (800f2bc <cleanup_stdio+0x34>)
 800f28c:	4299      	cmp	r1, r3
 800f28e:	b510      	push	{r4, lr}
 800f290:	4604      	mov	r4, r0
 800f292:	d001      	beq.n	800f298 <cleanup_stdio+0x10>
 800f294:	f001 ff60 	bl	8011158 <_fflush_r>
 800f298:	68a1      	ldr	r1, [r4, #8]
 800f29a:	4b09      	ldr	r3, [pc, #36]	; (800f2c0 <cleanup_stdio+0x38>)
 800f29c:	4299      	cmp	r1, r3
 800f29e:	d002      	beq.n	800f2a6 <cleanup_stdio+0x1e>
 800f2a0:	4620      	mov	r0, r4
 800f2a2:	f001 ff59 	bl	8011158 <_fflush_r>
 800f2a6:	68e1      	ldr	r1, [r4, #12]
 800f2a8:	4b06      	ldr	r3, [pc, #24]	; (800f2c4 <cleanup_stdio+0x3c>)
 800f2aa:	4299      	cmp	r1, r3
 800f2ac:	d004      	beq.n	800f2b8 <cleanup_stdio+0x30>
 800f2ae:	4620      	mov	r0, r4
 800f2b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2b4:	f001 bf50 	b.w	8011158 <_fflush_r>
 800f2b8:	bd10      	pop	{r4, pc}
 800f2ba:	bf00      	nop
 800f2bc:	2000583c 	.word	0x2000583c
 800f2c0:	200058a4 	.word	0x200058a4
 800f2c4:	2000590c 	.word	0x2000590c

0800f2c8 <global_stdio_init.part.0>:
 800f2c8:	b510      	push	{r4, lr}
 800f2ca:	4b0b      	ldr	r3, [pc, #44]	; (800f2f8 <global_stdio_init.part.0+0x30>)
 800f2cc:	4c0b      	ldr	r4, [pc, #44]	; (800f2fc <global_stdio_init.part.0+0x34>)
 800f2ce:	4a0c      	ldr	r2, [pc, #48]	; (800f300 <global_stdio_init.part.0+0x38>)
 800f2d0:	601a      	str	r2, [r3, #0]
 800f2d2:	4620      	mov	r0, r4
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	2104      	movs	r1, #4
 800f2d8:	f7ff ffa6 	bl	800f228 <std>
 800f2dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f2e0:	2201      	movs	r2, #1
 800f2e2:	2109      	movs	r1, #9
 800f2e4:	f7ff ffa0 	bl	800f228 <std>
 800f2e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f2ec:	2202      	movs	r2, #2
 800f2ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2f2:	2112      	movs	r1, #18
 800f2f4:	f7ff bf98 	b.w	800f228 <std>
 800f2f8:	20005974 	.word	0x20005974
 800f2fc:	2000583c 	.word	0x2000583c
 800f300:	0800f271 	.word	0x0800f271

0800f304 <__sfp_lock_acquire>:
 800f304:	4801      	ldr	r0, [pc, #4]	; (800f30c <__sfp_lock_acquire+0x8>)
 800f306:	f000 ba57 	b.w	800f7b8 <__retarget_lock_acquire_recursive>
 800f30a:	bf00      	nop
 800f30c:	2000597d 	.word	0x2000597d

0800f310 <__sfp_lock_release>:
 800f310:	4801      	ldr	r0, [pc, #4]	; (800f318 <__sfp_lock_release+0x8>)
 800f312:	f000 ba52 	b.w	800f7ba <__retarget_lock_release_recursive>
 800f316:	bf00      	nop
 800f318:	2000597d 	.word	0x2000597d

0800f31c <__sinit>:
 800f31c:	b510      	push	{r4, lr}
 800f31e:	4604      	mov	r4, r0
 800f320:	f7ff fff0 	bl	800f304 <__sfp_lock_acquire>
 800f324:	6a23      	ldr	r3, [r4, #32]
 800f326:	b11b      	cbz	r3, 800f330 <__sinit+0x14>
 800f328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f32c:	f7ff bff0 	b.w	800f310 <__sfp_lock_release>
 800f330:	4b04      	ldr	r3, [pc, #16]	; (800f344 <__sinit+0x28>)
 800f332:	6223      	str	r3, [r4, #32]
 800f334:	4b04      	ldr	r3, [pc, #16]	; (800f348 <__sinit+0x2c>)
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d1f5      	bne.n	800f328 <__sinit+0xc>
 800f33c:	f7ff ffc4 	bl	800f2c8 <global_stdio_init.part.0>
 800f340:	e7f2      	b.n	800f328 <__sinit+0xc>
 800f342:	bf00      	nop
 800f344:	0800f289 	.word	0x0800f289
 800f348:	20005974 	.word	0x20005974

0800f34c <_fwalk_sglue>:
 800f34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f350:	4607      	mov	r7, r0
 800f352:	4688      	mov	r8, r1
 800f354:	4614      	mov	r4, r2
 800f356:	2600      	movs	r6, #0
 800f358:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f35c:	f1b9 0901 	subs.w	r9, r9, #1
 800f360:	d505      	bpl.n	800f36e <_fwalk_sglue+0x22>
 800f362:	6824      	ldr	r4, [r4, #0]
 800f364:	2c00      	cmp	r4, #0
 800f366:	d1f7      	bne.n	800f358 <_fwalk_sglue+0xc>
 800f368:	4630      	mov	r0, r6
 800f36a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f36e:	89ab      	ldrh	r3, [r5, #12]
 800f370:	2b01      	cmp	r3, #1
 800f372:	d907      	bls.n	800f384 <_fwalk_sglue+0x38>
 800f374:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f378:	3301      	adds	r3, #1
 800f37a:	d003      	beq.n	800f384 <_fwalk_sglue+0x38>
 800f37c:	4629      	mov	r1, r5
 800f37e:	4638      	mov	r0, r7
 800f380:	47c0      	blx	r8
 800f382:	4306      	orrs	r6, r0
 800f384:	3568      	adds	r5, #104	; 0x68
 800f386:	e7e9      	b.n	800f35c <_fwalk_sglue+0x10>

0800f388 <iprintf>:
 800f388:	b40f      	push	{r0, r1, r2, r3}
 800f38a:	b507      	push	{r0, r1, r2, lr}
 800f38c:	4906      	ldr	r1, [pc, #24]	; (800f3a8 <iprintf+0x20>)
 800f38e:	ab04      	add	r3, sp, #16
 800f390:	6808      	ldr	r0, [r1, #0]
 800f392:	f853 2b04 	ldr.w	r2, [r3], #4
 800f396:	6881      	ldr	r1, [r0, #8]
 800f398:	9301      	str	r3, [sp, #4]
 800f39a:	f001 fd3d 	bl	8010e18 <_vfiprintf_r>
 800f39e:	b003      	add	sp, #12
 800f3a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3a4:	b004      	add	sp, #16
 800f3a6:	4770      	bx	lr
 800f3a8:	200001f0 	.word	0x200001f0

0800f3ac <_puts_r>:
 800f3ac:	6a03      	ldr	r3, [r0, #32]
 800f3ae:	b570      	push	{r4, r5, r6, lr}
 800f3b0:	6884      	ldr	r4, [r0, #8]
 800f3b2:	4605      	mov	r5, r0
 800f3b4:	460e      	mov	r6, r1
 800f3b6:	b90b      	cbnz	r3, 800f3bc <_puts_r+0x10>
 800f3b8:	f7ff ffb0 	bl	800f31c <__sinit>
 800f3bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f3be:	07db      	lsls	r3, r3, #31
 800f3c0:	d405      	bmi.n	800f3ce <_puts_r+0x22>
 800f3c2:	89a3      	ldrh	r3, [r4, #12]
 800f3c4:	0598      	lsls	r0, r3, #22
 800f3c6:	d402      	bmi.n	800f3ce <_puts_r+0x22>
 800f3c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3ca:	f000 f9f5 	bl	800f7b8 <__retarget_lock_acquire_recursive>
 800f3ce:	89a3      	ldrh	r3, [r4, #12]
 800f3d0:	0719      	lsls	r1, r3, #28
 800f3d2:	d513      	bpl.n	800f3fc <_puts_r+0x50>
 800f3d4:	6923      	ldr	r3, [r4, #16]
 800f3d6:	b18b      	cbz	r3, 800f3fc <_puts_r+0x50>
 800f3d8:	3e01      	subs	r6, #1
 800f3da:	68a3      	ldr	r3, [r4, #8]
 800f3dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f3e0:	3b01      	subs	r3, #1
 800f3e2:	60a3      	str	r3, [r4, #8]
 800f3e4:	b9e9      	cbnz	r1, 800f422 <_puts_r+0x76>
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	da2e      	bge.n	800f448 <_puts_r+0x9c>
 800f3ea:	4622      	mov	r2, r4
 800f3ec:	210a      	movs	r1, #10
 800f3ee:	4628      	mov	r0, r5
 800f3f0:	f000 f87b 	bl	800f4ea <__swbuf_r>
 800f3f4:	3001      	adds	r0, #1
 800f3f6:	d007      	beq.n	800f408 <_puts_r+0x5c>
 800f3f8:	250a      	movs	r5, #10
 800f3fa:	e007      	b.n	800f40c <_puts_r+0x60>
 800f3fc:	4621      	mov	r1, r4
 800f3fe:	4628      	mov	r0, r5
 800f400:	f000 f8b0 	bl	800f564 <__swsetup_r>
 800f404:	2800      	cmp	r0, #0
 800f406:	d0e7      	beq.n	800f3d8 <_puts_r+0x2c>
 800f408:	f04f 35ff 	mov.w	r5, #4294967295
 800f40c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f40e:	07da      	lsls	r2, r3, #31
 800f410:	d405      	bmi.n	800f41e <_puts_r+0x72>
 800f412:	89a3      	ldrh	r3, [r4, #12]
 800f414:	059b      	lsls	r3, r3, #22
 800f416:	d402      	bmi.n	800f41e <_puts_r+0x72>
 800f418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f41a:	f000 f9ce 	bl	800f7ba <__retarget_lock_release_recursive>
 800f41e:	4628      	mov	r0, r5
 800f420:	bd70      	pop	{r4, r5, r6, pc}
 800f422:	2b00      	cmp	r3, #0
 800f424:	da04      	bge.n	800f430 <_puts_r+0x84>
 800f426:	69a2      	ldr	r2, [r4, #24]
 800f428:	429a      	cmp	r2, r3
 800f42a:	dc06      	bgt.n	800f43a <_puts_r+0x8e>
 800f42c:	290a      	cmp	r1, #10
 800f42e:	d004      	beq.n	800f43a <_puts_r+0x8e>
 800f430:	6823      	ldr	r3, [r4, #0]
 800f432:	1c5a      	adds	r2, r3, #1
 800f434:	6022      	str	r2, [r4, #0]
 800f436:	7019      	strb	r1, [r3, #0]
 800f438:	e7cf      	b.n	800f3da <_puts_r+0x2e>
 800f43a:	4622      	mov	r2, r4
 800f43c:	4628      	mov	r0, r5
 800f43e:	f000 f854 	bl	800f4ea <__swbuf_r>
 800f442:	3001      	adds	r0, #1
 800f444:	d1c9      	bne.n	800f3da <_puts_r+0x2e>
 800f446:	e7df      	b.n	800f408 <_puts_r+0x5c>
 800f448:	6823      	ldr	r3, [r4, #0]
 800f44a:	250a      	movs	r5, #10
 800f44c:	1c5a      	adds	r2, r3, #1
 800f44e:	6022      	str	r2, [r4, #0]
 800f450:	701d      	strb	r5, [r3, #0]
 800f452:	e7db      	b.n	800f40c <_puts_r+0x60>

0800f454 <puts>:
 800f454:	4b02      	ldr	r3, [pc, #8]	; (800f460 <puts+0xc>)
 800f456:	4601      	mov	r1, r0
 800f458:	6818      	ldr	r0, [r3, #0]
 800f45a:	f7ff bfa7 	b.w	800f3ac <_puts_r>
 800f45e:	bf00      	nop
 800f460:	200001f0 	.word	0x200001f0

0800f464 <__sread>:
 800f464:	b510      	push	{r4, lr}
 800f466:	460c      	mov	r4, r1
 800f468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f46c:	f000 f956 	bl	800f71c <_read_r>
 800f470:	2800      	cmp	r0, #0
 800f472:	bfab      	itete	ge
 800f474:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f476:	89a3      	ldrhlt	r3, [r4, #12]
 800f478:	181b      	addge	r3, r3, r0
 800f47a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f47e:	bfac      	ite	ge
 800f480:	6563      	strge	r3, [r4, #84]	; 0x54
 800f482:	81a3      	strhlt	r3, [r4, #12]
 800f484:	bd10      	pop	{r4, pc}

0800f486 <__swrite>:
 800f486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f48a:	461f      	mov	r7, r3
 800f48c:	898b      	ldrh	r3, [r1, #12]
 800f48e:	05db      	lsls	r3, r3, #23
 800f490:	4605      	mov	r5, r0
 800f492:	460c      	mov	r4, r1
 800f494:	4616      	mov	r6, r2
 800f496:	d505      	bpl.n	800f4a4 <__swrite+0x1e>
 800f498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f49c:	2302      	movs	r3, #2
 800f49e:	2200      	movs	r2, #0
 800f4a0:	f000 f92a 	bl	800f6f8 <_lseek_r>
 800f4a4:	89a3      	ldrh	r3, [r4, #12]
 800f4a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f4aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f4ae:	81a3      	strh	r3, [r4, #12]
 800f4b0:	4632      	mov	r2, r6
 800f4b2:	463b      	mov	r3, r7
 800f4b4:	4628      	mov	r0, r5
 800f4b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f4ba:	f000 b941 	b.w	800f740 <_write_r>

0800f4be <__sseek>:
 800f4be:	b510      	push	{r4, lr}
 800f4c0:	460c      	mov	r4, r1
 800f4c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4c6:	f000 f917 	bl	800f6f8 <_lseek_r>
 800f4ca:	1c43      	adds	r3, r0, #1
 800f4cc:	89a3      	ldrh	r3, [r4, #12]
 800f4ce:	bf15      	itete	ne
 800f4d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f4d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f4d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f4da:	81a3      	strheq	r3, [r4, #12]
 800f4dc:	bf18      	it	ne
 800f4de:	81a3      	strhne	r3, [r4, #12]
 800f4e0:	bd10      	pop	{r4, pc}

0800f4e2 <__sclose>:
 800f4e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4e6:	f000 b8a1 	b.w	800f62c <_close_r>

0800f4ea <__swbuf_r>:
 800f4ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ec:	460e      	mov	r6, r1
 800f4ee:	4614      	mov	r4, r2
 800f4f0:	4605      	mov	r5, r0
 800f4f2:	b118      	cbz	r0, 800f4fc <__swbuf_r+0x12>
 800f4f4:	6a03      	ldr	r3, [r0, #32]
 800f4f6:	b90b      	cbnz	r3, 800f4fc <__swbuf_r+0x12>
 800f4f8:	f7ff ff10 	bl	800f31c <__sinit>
 800f4fc:	69a3      	ldr	r3, [r4, #24]
 800f4fe:	60a3      	str	r3, [r4, #8]
 800f500:	89a3      	ldrh	r3, [r4, #12]
 800f502:	071a      	lsls	r2, r3, #28
 800f504:	d525      	bpl.n	800f552 <__swbuf_r+0x68>
 800f506:	6923      	ldr	r3, [r4, #16]
 800f508:	b31b      	cbz	r3, 800f552 <__swbuf_r+0x68>
 800f50a:	6823      	ldr	r3, [r4, #0]
 800f50c:	6922      	ldr	r2, [r4, #16]
 800f50e:	1a98      	subs	r0, r3, r2
 800f510:	6963      	ldr	r3, [r4, #20]
 800f512:	b2f6      	uxtb	r6, r6
 800f514:	4283      	cmp	r3, r0
 800f516:	4637      	mov	r7, r6
 800f518:	dc04      	bgt.n	800f524 <__swbuf_r+0x3a>
 800f51a:	4621      	mov	r1, r4
 800f51c:	4628      	mov	r0, r5
 800f51e:	f001 fe1b 	bl	8011158 <_fflush_r>
 800f522:	b9e0      	cbnz	r0, 800f55e <__swbuf_r+0x74>
 800f524:	68a3      	ldr	r3, [r4, #8]
 800f526:	3b01      	subs	r3, #1
 800f528:	60a3      	str	r3, [r4, #8]
 800f52a:	6823      	ldr	r3, [r4, #0]
 800f52c:	1c5a      	adds	r2, r3, #1
 800f52e:	6022      	str	r2, [r4, #0]
 800f530:	701e      	strb	r6, [r3, #0]
 800f532:	6962      	ldr	r2, [r4, #20]
 800f534:	1c43      	adds	r3, r0, #1
 800f536:	429a      	cmp	r2, r3
 800f538:	d004      	beq.n	800f544 <__swbuf_r+0x5a>
 800f53a:	89a3      	ldrh	r3, [r4, #12]
 800f53c:	07db      	lsls	r3, r3, #31
 800f53e:	d506      	bpl.n	800f54e <__swbuf_r+0x64>
 800f540:	2e0a      	cmp	r6, #10
 800f542:	d104      	bne.n	800f54e <__swbuf_r+0x64>
 800f544:	4621      	mov	r1, r4
 800f546:	4628      	mov	r0, r5
 800f548:	f001 fe06 	bl	8011158 <_fflush_r>
 800f54c:	b938      	cbnz	r0, 800f55e <__swbuf_r+0x74>
 800f54e:	4638      	mov	r0, r7
 800f550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f552:	4621      	mov	r1, r4
 800f554:	4628      	mov	r0, r5
 800f556:	f000 f805 	bl	800f564 <__swsetup_r>
 800f55a:	2800      	cmp	r0, #0
 800f55c:	d0d5      	beq.n	800f50a <__swbuf_r+0x20>
 800f55e:	f04f 37ff 	mov.w	r7, #4294967295
 800f562:	e7f4      	b.n	800f54e <__swbuf_r+0x64>

0800f564 <__swsetup_r>:
 800f564:	b538      	push	{r3, r4, r5, lr}
 800f566:	4b2a      	ldr	r3, [pc, #168]	; (800f610 <__swsetup_r+0xac>)
 800f568:	4605      	mov	r5, r0
 800f56a:	6818      	ldr	r0, [r3, #0]
 800f56c:	460c      	mov	r4, r1
 800f56e:	b118      	cbz	r0, 800f578 <__swsetup_r+0x14>
 800f570:	6a03      	ldr	r3, [r0, #32]
 800f572:	b90b      	cbnz	r3, 800f578 <__swsetup_r+0x14>
 800f574:	f7ff fed2 	bl	800f31c <__sinit>
 800f578:	89a3      	ldrh	r3, [r4, #12]
 800f57a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f57e:	0718      	lsls	r0, r3, #28
 800f580:	d422      	bmi.n	800f5c8 <__swsetup_r+0x64>
 800f582:	06d9      	lsls	r1, r3, #27
 800f584:	d407      	bmi.n	800f596 <__swsetup_r+0x32>
 800f586:	2309      	movs	r3, #9
 800f588:	602b      	str	r3, [r5, #0]
 800f58a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f58e:	81a3      	strh	r3, [r4, #12]
 800f590:	f04f 30ff 	mov.w	r0, #4294967295
 800f594:	e034      	b.n	800f600 <__swsetup_r+0x9c>
 800f596:	0758      	lsls	r0, r3, #29
 800f598:	d512      	bpl.n	800f5c0 <__swsetup_r+0x5c>
 800f59a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f59c:	b141      	cbz	r1, 800f5b0 <__swsetup_r+0x4c>
 800f59e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f5a2:	4299      	cmp	r1, r3
 800f5a4:	d002      	beq.n	800f5ac <__swsetup_r+0x48>
 800f5a6:	4628      	mov	r0, r5
 800f5a8:	f000 ff90 	bl	80104cc <_free_r>
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	6363      	str	r3, [r4, #52]	; 0x34
 800f5b0:	89a3      	ldrh	r3, [r4, #12]
 800f5b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f5b6:	81a3      	strh	r3, [r4, #12]
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	6063      	str	r3, [r4, #4]
 800f5bc:	6923      	ldr	r3, [r4, #16]
 800f5be:	6023      	str	r3, [r4, #0]
 800f5c0:	89a3      	ldrh	r3, [r4, #12]
 800f5c2:	f043 0308 	orr.w	r3, r3, #8
 800f5c6:	81a3      	strh	r3, [r4, #12]
 800f5c8:	6923      	ldr	r3, [r4, #16]
 800f5ca:	b94b      	cbnz	r3, 800f5e0 <__swsetup_r+0x7c>
 800f5cc:	89a3      	ldrh	r3, [r4, #12]
 800f5ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f5d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f5d6:	d003      	beq.n	800f5e0 <__swsetup_r+0x7c>
 800f5d8:	4621      	mov	r1, r4
 800f5da:	4628      	mov	r0, r5
 800f5dc:	f001 fe0a 	bl	80111f4 <__smakebuf_r>
 800f5e0:	89a0      	ldrh	r0, [r4, #12]
 800f5e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f5e6:	f010 0301 	ands.w	r3, r0, #1
 800f5ea:	d00a      	beq.n	800f602 <__swsetup_r+0x9e>
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	60a3      	str	r3, [r4, #8]
 800f5f0:	6963      	ldr	r3, [r4, #20]
 800f5f2:	425b      	negs	r3, r3
 800f5f4:	61a3      	str	r3, [r4, #24]
 800f5f6:	6923      	ldr	r3, [r4, #16]
 800f5f8:	b943      	cbnz	r3, 800f60c <__swsetup_r+0xa8>
 800f5fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f5fe:	d1c4      	bne.n	800f58a <__swsetup_r+0x26>
 800f600:	bd38      	pop	{r3, r4, r5, pc}
 800f602:	0781      	lsls	r1, r0, #30
 800f604:	bf58      	it	pl
 800f606:	6963      	ldrpl	r3, [r4, #20]
 800f608:	60a3      	str	r3, [r4, #8]
 800f60a:	e7f4      	b.n	800f5f6 <__swsetup_r+0x92>
 800f60c:	2000      	movs	r0, #0
 800f60e:	e7f7      	b.n	800f600 <__swsetup_r+0x9c>
 800f610:	200001f0 	.word	0x200001f0

0800f614 <memset>:
 800f614:	4402      	add	r2, r0
 800f616:	4603      	mov	r3, r0
 800f618:	4293      	cmp	r3, r2
 800f61a:	d100      	bne.n	800f61e <memset+0xa>
 800f61c:	4770      	bx	lr
 800f61e:	f803 1b01 	strb.w	r1, [r3], #1
 800f622:	e7f9      	b.n	800f618 <memset+0x4>

0800f624 <_localeconv_r>:
 800f624:	4800      	ldr	r0, [pc, #0]	; (800f628 <_localeconv_r+0x4>)
 800f626:	4770      	bx	lr
 800f628:	200002e4 	.word	0x200002e4

0800f62c <_close_r>:
 800f62c:	b538      	push	{r3, r4, r5, lr}
 800f62e:	4d06      	ldr	r5, [pc, #24]	; (800f648 <_close_r+0x1c>)
 800f630:	2300      	movs	r3, #0
 800f632:	4604      	mov	r4, r0
 800f634:	4608      	mov	r0, r1
 800f636:	602b      	str	r3, [r5, #0]
 800f638:	f7f3 f9f1 	bl	8002a1e <_close>
 800f63c:	1c43      	adds	r3, r0, #1
 800f63e:	d102      	bne.n	800f646 <_close_r+0x1a>
 800f640:	682b      	ldr	r3, [r5, #0]
 800f642:	b103      	cbz	r3, 800f646 <_close_r+0x1a>
 800f644:	6023      	str	r3, [r4, #0]
 800f646:	bd38      	pop	{r3, r4, r5, pc}
 800f648:	20005978 	.word	0x20005978

0800f64c <_reclaim_reent>:
 800f64c:	4b29      	ldr	r3, [pc, #164]	; (800f6f4 <_reclaim_reent+0xa8>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	4283      	cmp	r3, r0
 800f652:	b570      	push	{r4, r5, r6, lr}
 800f654:	4604      	mov	r4, r0
 800f656:	d04b      	beq.n	800f6f0 <_reclaim_reent+0xa4>
 800f658:	69c3      	ldr	r3, [r0, #28]
 800f65a:	b143      	cbz	r3, 800f66e <_reclaim_reent+0x22>
 800f65c:	68db      	ldr	r3, [r3, #12]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d144      	bne.n	800f6ec <_reclaim_reent+0xa0>
 800f662:	69e3      	ldr	r3, [r4, #28]
 800f664:	6819      	ldr	r1, [r3, #0]
 800f666:	b111      	cbz	r1, 800f66e <_reclaim_reent+0x22>
 800f668:	4620      	mov	r0, r4
 800f66a:	f000 ff2f 	bl	80104cc <_free_r>
 800f66e:	6961      	ldr	r1, [r4, #20]
 800f670:	b111      	cbz	r1, 800f678 <_reclaim_reent+0x2c>
 800f672:	4620      	mov	r0, r4
 800f674:	f000 ff2a 	bl	80104cc <_free_r>
 800f678:	69e1      	ldr	r1, [r4, #28]
 800f67a:	b111      	cbz	r1, 800f682 <_reclaim_reent+0x36>
 800f67c:	4620      	mov	r0, r4
 800f67e:	f000 ff25 	bl	80104cc <_free_r>
 800f682:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f684:	b111      	cbz	r1, 800f68c <_reclaim_reent+0x40>
 800f686:	4620      	mov	r0, r4
 800f688:	f000 ff20 	bl	80104cc <_free_r>
 800f68c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f68e:	b111      	cbz	r1, 800f696 <_reclaim_reent+0x4a>
 800f690:	4620      	mov	r0, r4
 800f692:	f000 ff1b 	bl	80104cc <_free_r>
 800f696:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f698:	b111      	cbz	r1, 800f6a0 <_reclaim_reent+0x54>
 800f69a:	4620      	mov	r0, r4
 800f69c:	f000 ff16 	bl	80104cc <_free_r>
 800f6a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f6a2:	b111      	cbz	r1, 800f6aa <_reclaim_reent+0x5e>
 800f6a4:	4620      	mov	r0, r4
 800f6a6:	f000 ff11 	bl	80104cc <_free_r>
 800f6aa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f6ac:	b111      	cbz	r1, 800f6b4 <_reclaim_reent+0x68>
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	f000 ff0c 	bl	80104cc <_free_r>
 800f6b4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f6b6:	b111      	cbz	r1, 800f6be <_reclaim_reent+0x72>
 800f6b8:	4620      	mov	r0, r4
 800f6ba:	f000 ff07 	bl	80104cc <_free_r>
 800f6be:	6a23      	ldr	r3, [r4, #32]
 800f6c0:	b1b3      	cbz	r3, 800f6f0 <_reclaim_reent+0xa4>
 800f6c2:	4620      	mov	r0, r4
 800f6c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f6c8:	4718      	bx	r3
 800f6ca:	5949      	ldr	r1, [r1, r5]
 800f6cc:	b941      	cbnz	r1, 800f6e0 <_reclaim_reent+0x94>
 800f6ce:	3504      	adds	r5, #4
 800f6d0:	69e3      	ldr	r3, [r4, #28]
 800f6d2:	2d80      	cmp	r5, #128	; 0x80
 800f6d4:	68d9      	ldr	r1, [r3, #12]
 800f6d6:	d1f8      	bne.n	800f6ca <_reclaim_reent+0x7e>
 800f6d8:	4620      	mov	r0, r4
 800f6da:	f000 fef7 	bl	80104cc <_free_r>
 800f6de:	e7c0      	b.n	800f662 <_reclaim_reent+0x16>
 800f6e0:	680e      	ldr	r6, [r1, #0]
 800f6e2:	4620      	mov	r0, r4
 800f6e4:	f000 fef2 	bl	80104cc <_free_r>
 800f6e8:	4631      	mov	r1, r6
 800f6ea:	e7ef      	b.n	800f6cc <_reclaim_reent+0x80>
 800f6ec:	2500      	movs	r5, #0
 800f6ee:	e7ef      	b.n	800f6d0 <_reclaim_reent+0x84>
 800f6f0:	bd70      	pop	{r4, r5, r6, pc}
 800f6f2:	bf00      	nop
 800f6f4:	200001f0 	.word	0x200001f0

0800f6f8 <_lseek_r>:
 800f6f8:	b538      	push	{r3, r4, r5, lr}
 800f6fa:	4d07      	ldr	r5, [pc, #28]	; (800f718 <_lseek_r+0x20>)
 800f6fc:	4604      	mov	r4, r0
 800f6fe:	4608      	mov	r0, r1
 800f700:	4611      	mov	r1, r2
 800f702:	2200      	movs	r2, #0
 800f704:	602a      	str	r2, [r5, #0]
 800f706:	461a      	mov	r2, r3
 800f708:	f7f3 f9b0 	bl	8002a6c <_lseek>
 800f70c:	1c43      	adds	r3, r0, #1
 800f70e:	d102      	bne.n	800f716 <_lseek_r+0x1e>
 800f710:	682b      	ldr	r3, [r5, #0]
 800f712:	b103      	cbz	r3, 800f716 <_lseek_r+0x1e>
 800f714:	6023      	str	r3, [r4, #0]
 800f716:	bd38      	pop	{r3, r4, r5, pc}
 800f718:	20005978 	.word	0x20005978

0800f71c <_read_r>:
 800f71c:	b538      	push	{r3, r4, r5, lr}
 800f71e:	4d07      	ldr	r5, [pc, #28]	; (800f73c <_read_r+0x20>)
 800f720:	4604      	mov	r4, r0
 800f722:	4608      	mov	r0, r1
 800f724:	4611      	mov	r1, r2
 800f726:	2200      	movs	r2, #0
 800f728:	602a      	str	r2, [r5, #0]
 800f72a:	461a      	mov	r2, r3
 800f72c:	f7f3 f93e 	bl	80029ac <_read>
 800f730:	1c43      	adds	r3, r0, #1
 800f732:	d102      	bne.n	800f73a <_read_r+0x1e>
 800f734:	682b      	ldr	r3, [r5, #0]
 800f736:	b103      	cbz	r3, 800f73a <_read_r+0x1e>
 800f738:	6023      	str	r3, [r4, #0]
 800f73a:	bd38      	pop	{r3, r4, r5, pc}
 800f73c:	20005978 	.word	0x20005978

0800f740 <_write_r>:
 800f740:	b538      	push	{r3, r4, r5, lr}
 800f742:	4d07      	ldr	r5, [pc, #28]	; (800f760 <_write_r+0x20>)
 800f744:	4604      	mov	r4, r0
 800f746:	4608      	mov	r0, r1
 800f748:	4611      	mov	r1, r2
 800f74a:	2200      	movs	r2, #0
 800f74c:	602a      	str	r2, [r5, #0]
 800f74e:	461a      	mov	r2, r3
 800f750:	f7f3 f949 	bl	80029e6 <_write>
 800f754:	1c43      	adds	r3, r0, #1
 800f756:	d102      	bne.n	800f75e <_write_r+0x1e>
 800f758:	682b      	ldr	r3, [r5, #0]
 800f75a:	b103      	cbz	r3, 800f75e <_write_r+0x1e>
 800f75c:	6023      	str	r3, [r4, #0]
 800f75e:	bd38      	pop	{r3, r4, r5, pc}
 800f760:	20005978 	.word	0x20005978

0800f764 <__errno>:
 800f764:	4b01      	ldr	r3, [pc, #4]	; (800f76c <__errno+0x8>)
 800f766:	6818      	ldr	r0, [r3, #0]
 800f768:	4770      	bx	lr
 800f76a:	bf00      	nop
 800f76c:	200001f0 	.word	0x200001f0

0800f770 <__libc_init_array>:
 800f770:	b570      	push	{r4, r5, r6, lr}
 800f772:	4d0d      	ldr	r5, [pc, #52]	; (800f7a8 <__libc_init_array+0x38>)
 800f774:	4c0d      	ldr	r4, [pc, #52]	; (800f7ac <__libc_init_array+0x3c>)
 800f776:	1b64      	subs	r4, r4, r5
 800f778:	10a4      	asrs	r4, r4, #2
 800f77a:	2600      	movs	r6, #0
 800f77c:	42a6      	cmp	r6, r4
 800f77e:	d109      	bne.n	800f794 <__libc_init_array+0x24>
 800f780:	4d0b      	ldr	r5, [pc, #44]	; (800f7b0 <__libc_init_array+0x40>)
 800f782:	4c0c      	ldr	r4, [pc, #48]	; (800f7b4 <__libc_init_array+0x44>)
 800f784:	f001 fe56 	bl	8011434 <_init>
 800f788:	1b64      	subs	r4, r4, r5
 800f78a:	10a4      	asrs	r4, r4, #2
 800f78c:	2600      	movs	r6, #0
 800f78e:	42a6      	cmp	r6, r4
 800f790:	d105      	bne.n	800f79e <__libc_init_array+0x2e>
 800f792:	bd70      	pop	{r4, r5, r6, pc}
 800f794:	f855 3b04 	ldr.w	r3, [r5], #4
 800f798:	4798      	blx	r3
 800f79a:	3601      	adds	r6, #1
 800f79c:	e7ee      	b.n	800f77c <__libc_init_array+0xc>
 800f79e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7a2:	4798      	blx	r3
 800f7a4:	3601      	adds	r6, #1
 800f7a6:	e7f2      	b.n	800f78e <__libc_init_array+0x1e>
 800f7a8:	0801217c 	.word	0x0801217c
 800f7ac:	0801217c 	.word	0x0801217c
 800f7b0:	0801217c 	.word	0x0801217c
 800f7b4:	08012180 	.word	0x08012180

0800f7b8 <__retarget_lock_acquire_recursive>:
 800f7b8:	4770      	bx	lr

0800f7ba <__retarget_lock_release_recursive>:
 800f7ba:	4770      	bx	lr

0800f7bc <memcpy>:
 800f7bc:	440a      	add	r2, r1
 800f7be:	4291      	cmp	r1, r2
 800f7c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800f7c4:	d100      	bne.n	800f7c8 <memcpy+0xc>
 800f7c6:	4770      	bx	lr
 800f7c8:	b510      	push	{r4, lr}
 800f7ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f7ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f7d2:	4291      	cmp	r1, r2
 800f7d4:	d1f9      	bne.n	800f7ca <memcpy+0xe>
 800f7d6:	bd10      	pop	{r4, pc}

0800f7d8 <quorem>:
 800f7d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7dc:	6903      	ldr	r3, [r0, #16]
 800f7de:	690c      	ldr	r4, [r1, #16]
 800f7e0:	42a3      	cmp	r3, r4
 800f7e2:	4607      	mov	r7, r0
 800f7e4:	db7e      	blt.n	800f8e4 <quorem+0x10c>
 800f7e6:	3c01      	subs	r4, #1
 800f7e8:	f101 0814 	add.w	r8, r1, #20
 800f7ec:	f100 0514 	add.w	r5, r0, #20
 800f7f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f7f4:	9301      	str	r3, [sp, #4]
 800f7f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f7fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f7fe:	3301      	adds	r3, #1
 800f800:	429a      	cmp	r2, r3
 800f802:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f806:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f80a:	fbb2 f6f3 	udiv	r6, r2, r3
 800f80e:	d331      	bcc.n	800f874 <quorem+0x9c>
 800f810:	f04f 0e00 	mov.w	lr, #0
 800f814:	4640      	mov	r0, r8
 800f816:	46ac      	mov	ip, r5
 800f818:	46f2      	mov	sl, lr
 800f81a:	f850 2b04 	ldr.w	r2, [r0], #4
 800f81e:	b293      	uxth	r3, r2
 800f820:	fb06 e303 	mla	r3, r6, r3, lr
 800f824:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f828:	0c1a      	lsrs	r2, r3, #16
 800f82a:	b29b      	uxth	r3, r3
 800f82c:	ebaa 0303 	sub.w	r3, sl, r3
 800f830:	f8dc a000 	ldr.w	sl, [ip]
 800f834:	fa13 f38a 	uxtah	r3, r3, sl
 800f838:	fb06 220e 	mla	r2, r6, lr, r2
 800f83c:	9300      	str	r3, [sp, #0]
 800f83e:	9b00      	ldr	r3, [sp, #0]
 800f840:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f844:	b292      	uxth	r2, r2
 800f846:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f84a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f84e:	f8bd 3000 	ldrh.w	r3, [sp]
 800f852:	4581      	cmp	r9, r0
 800f854:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f858:	f84c 3b04 	str.w	r3, [ip], #4
 800f85c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f860:	d2db      	bcs.n	800f81a <quorem+0x42>
 800f862:	f855 300b 	ldr.w	r3, [r5, fp]
 800f866:	b92b      	cbnz	r3, 800f874 <quorem+0x9c>
 800f868:	9b01      	ldr	r3, [sp, #4]
 800f86a:	3b04      	subs	r3, #4
 800f86c:	429d      	cmp	r5, r3
 800f86e:	461a      	mov	r2, r3
 800f870:	d32c      	bcc.n	800f8cc <quorem+0xf4>
 800f872:	613c      	str	r4, [r7, #16]
 800f874:	4638      	mov	r0, r7
 800f876:	f001 f9a5 	bl	8010bc4 <__mcmp>
 800f87a:	2800      	cmp	r0, #0
 800f87c:	db22      	blt.n	800f8c4 <quorem+0xec>
 800f87e:	3601      	adds	r6, #1
 800f880:	4629      	mov	r1, r5
 800f882:	2000      	movs	r0, #0
 800f884:	f858 2b04 	ldr.w	r2, [r8], #4
 800f888:	f8d1 c000 	ldr.w	ip, [r1]
 800f88c:	b293      	uxth	r3, r2
 800f88e:	1ac3      	subs	r3, r0, r3
 800f890:	0c12      	lsrs	r2, r2, #16
 800f892:	fa13 f38c 	uxtah	r3, r3, ip
 800f896:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f89a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f89e:	b29b      	uxth	r3, r3
 800f8a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f8a4:	45c1      	cmp	r9, r8
 800f8a6:	f841 3b04 	str.w	r3, [r1], #4
 800f8aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f8ae:	d2e9      	bcs.n	800f884 <quorem+0xac>
 800f8b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f8b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f8b8:	b922      	cbnz	r2, 800f8c4 <quorem+0xec>
 800f8ba:	3b04      	subs	r3, #4
 800f8bc:	429d      	cmp	r5, r3
 800f8be:	461a      	mov	r2, r3
 800f8c0:	d30a      	bcc.n	800f8d8 <quorem+0x100>
 800f8c2:	613c      	str	r4, [r7, #16]
 800f8c4:	4630      	mov	r0, r6
 800f8c6:	b003      	add	sp, #12
 800f8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8cc:	6812      	ldr	r2, [r2, #0]
 800f8ce:	3b04      	subs	r3, #4
 800f8d0:	2a00      	cmp	r2, #0
 800f8d2:	d1ce      	bne.n	800f872 <quorem+0x9a>
 800f8d4:	3c01      	subs	r4, #1
 800f8d6:	e7c9      	b.n	800f86c <quorem+0x94>
 800f8d8:	6812      	ldr	r2, [r2, #0]
 800f8da:	3b04      	subs	r3, #4
 800f8dc:	2a00      	cmp	r2, #0
 800f8de:	d1f0      	bne.n	800f8c2 <quorem+0xea>
 800f8e0:	3c01      	subs	r4, #1
 800f8e2:	e7eb      	b.n	800f8bc <quorem+0xe4>
 800f8e4:	2000      	movs	r0, #0
 800f8e6:	e7ee      	b.n	800f8c6 <quorem+0xee>

0800f8e8 <_dtoa_r>:
 800f8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8ec:	ed2d 8b04 	vpush	{d8-d9}
 800f8f0:	69c5      	ldr	r5, [r0, #28]
 800f8f2:	b093      	sub	sp, #76	; 0x4c
 800f8f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f8f8:	ec57 6b10 	vmov	r6, r7, d0
 800f8fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f900:	9107      	str	r1, [sp, #28]
 800f902:	4604      	mov	r4, r0
 800f904:	920a      	str	r2, [sp, #40]	; 0x28
 800f906:	930d      	str	r3, [sp, #52]	; 0x34
 800f908:	b975      	cbnz	r5, 800f928 <_dtoa_r+0x40>
 800f90a:	2010      	movs	r0, #16
 800f90c:	f000 fe2a 	bl	8010564 <malloc>
 800f910:	4602      	mov	r2, r0
 800f912:	61e0      	str	r0, [r4, #28]
 800f914:	b920      	cbnz	r0, 800f920 <_dtoa_r+0x38>
 800f916:	4bae      	ldr	r3, [pc, #696]	; (800fbd0 <_dtoa_r+0x2e8>)
 800f918:	21ef      	movs	r1, #239	; 0xef
 800f91a:	48ae      	ldr	r0, [pc, #696]	; (800fbd4 <_dtoa_r+0x2ec>)
 800f91c:	f001 fcd8 	bl	80112d0 <__assert_func>
 800f920:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f924:	6005      	str	r5, [r0, #0]
 800f926:	60c5      	str	r5, [r0, #12]
 800f928:	69e3      	ldr	r3, [r4, #28]
 800f92a:	6819      	ldr	r1, [r3, #0]
 800f92c:	b151      	cbz	r1, 800f944 <_dtoa_r+0x5c>
 800f92e:	685a      	ldr	r2, [r3, #4]
 800f930:	604a      	str	r2, [r1, #4]
 800f932:	2301      	movs	r3, #1
 800f934:	4093      	lsls	r3, r2
 800f936:	608b      	str	r3, [r1, #8]
 800f938:	4620      	mov	r0, r4
 800f93a:	f000 ff07 	bl	801074c <_Bfree>
 800f93e:	69e3      	ldr	r3, [r4, #28]
 800f940:	2200      	movs	r2, #0
 800f942:	601a      	str	r2, [r3, #0]
 800f944:	1e3b      	subs	r3, r7, #0
 800f946:	bfbb      	ittet	lt
 800f948:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f94c:	9303      	strlt	r3, [sp, #12]
 800f94e:	2300      	movge	r3, #0
 800f950:	2201      	movlt	r2, #1
 800f952:	bfac      	ite	ge
 800f954:	f8c8 3000 	strge.w	r3, [r8]
 800f958:	f8c8 2000 	strlt.w	r2, [r8]
 800f95c:	4b9e      	ldr	r3, [pc, #632]	; (800fbd8 <_dtoa_r+0x2f0>)
 800f95e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f962:	ea33 0308 	bics.w	r3, r3, r8
 800f966:	d11b      	bne.n	800f9a0 <_dtoa_r+0xb8>
 800f968:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f96a:	f242 730f 	movw	r3, #9999	; 0x270f
 800f96e:	6013      	str	r3, [r2, #0]
 800f970:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f974:	4333      	orrs	r3, r6
 800f976:	f000 8593 	beq.w	80104a0 <_dtoa_r+0xbb8>
 800f97a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f97c:	b963      	cbnz	r3, 800f998 <_dtoa_r+0xb0>
 800f97e:	4b97      	ldr	r3, [pc, #604]	; (800fbdc <_dtoa_r+0x2f4>)
 800f980:	e027      	b.n	800f9d2 <_dtoa_r+0xea>
 800f982:	4b97      	ldr	r3, [pc, #604]	; (800fbe0 <_dtoa_r+0x2f8>)
 800f984:	9300      	str	r3, [sp, #0]
 800f986:	3308      	adds	r3, #8
 800f988:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f98a:	6013      	str	r3, [r2, #0]
 800f98c:	9800      	ldr	r0, [sp, #0]
 800f98e:	b013      	add	sp, #76	; 0x4c
 800f990:	ecbd 8b04 	vpop	{d8-d9}
 800f994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f998:	4b90      	ldr	r3, [pc, #576]	; (800fbdc <_dtoa_r+0x2f4>)
 800f99a:	9300      	str	r3, [sp, #0]
 800f99c:	3303      	adds	r3, #3
 800f99e:	e7f3      	b.n	800f988 <_dtoa_r+0xa0>
 800f9a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	ec51 0b17 	vmov	r0, r1, d7
 800f9aa:	eeb0 8a47 	vmov.f32	s16, s14
 800f9ae:	eef0 8a67 	vmov.f32	s17, s15
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	f7f1 f888 	bl	8000ac8 <__aeabi_dcmpeq>
 800f9b8:	4681      	mov	r9, r0
 800f9ba:	b160      	cbz	r0, 800f9d6 <_dtoa_r+0xee>
 800f9bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f9be:	2301      	movs	r3, #1
 800f9c0:	6013      	str	r3, [r2, #0]
 800f9c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	f000 8568 	beq.w	801049a <_dtoa_r+0xbb2>
 800f9ca:	4b86      	ldr	r3, [pc, #536]	; (800fbe4 <_dtoa_r+0x2fc>)
 800f9cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f9ce:	6013      	str	r3, [r2, #0]
 800f9d0:	3b01      	subs	r3, #1
 800f9d2:	9300      	str	r3, [sp, #0]
 800f9d4:	e7da      	b.n	800f98c <_dtoa_r+0xa4>
 800f9d6:	aa10      	add	r2, sp, #64	; 0x40
 800f9d8:	a911      	add	r1, sp, #68	; 0x44
 800f9da:	4620      	mov	r0, r4
 800f9dc:	eeb0 0a48 	vmov.f32	s0, s16
 800f9e0:	eef0 0a68 	vmov.f32	s1, s17
 800f9e4:	f001 f994 	bl	8010d10 <__d2b>
 800f9e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f9ec:	4682      	mov	sl, r0
 800f9ee:	2d00      	cmp	r5, #0
 800f9f0:	d07f      	beq.n	800faf2 <_dtoa_r+0x20a>
 800f9f2:	ee18 3a90 	vmov	r3, s17
 800f9f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f9fa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f9fe:	ec51 0b18 	vmov	r0, r1, d8
 800fa02:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fa06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fa0a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800fa0e:	4619      	mov	r1, r3
 800fa10:	2200      	movs	r2, #0
 800fa12:	4b75      	ldr	r3, [pc, #468]	; (800fbe8 <_dtoa_r+0x300>)
 800fa14:	f7f0 fc38 	bl	8000288 <__aeabi_dsub>
 800fa18:	a367      	add	r3, pc, #412	; (adr r3, 800fbb8 <_dtoa_r+0x2d0>)
 800fa1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa1e:	f7f0 fdeb 	bl	80005f8 <__aeabi_dmul>
 800fa22:	a367      	add	r3, pc, #412	; (adr r3, 800fbc0 <_dtoa_r+0x2d8>)
 800fa24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa28:	f7f0 fc30 	bl	800028c <__adddf3>
 800fa2c:	4606      	mov	r6, r0
 800fa2e:	4628      	mov	r0, r5
 800fa30:	460f      	mov	r7, r1
 800fa32:	f7f0 fd77 	bl	8000524 <__aeabi_i2d>
 800fa36:	a364      	add	r3, pc, #400	; (adr r3, 800fbc8 <_dtoa_r+0x2e0>)
 800fa38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa3c:	f7f0 fddc 	bl	80005f8 <__aeabi_dmul>
 800fa40:	4602      	mov	r2, r0
 800fa42:	460b      	mov	r3, r1
 800fa44:	4630      	mov	r0, r6
 800fa46:	4639      	mov	r1, r7
 800fa48:	f7f0 fc20 	bl	800028c <__adddf3>
 800fa4c:	4606      	mov	r6, r0
 800fa4e:	460f      	mov	r7, r1
 800fa50:	f7f1 f882 	bl	8000b58 <__aeabi_d2iz>
 800fa54:	2200      	movs	r2, #0
 800fa56:	4683      	mov	fp, r0
 800fa58:	2300      	movs	r3, #0
 800fa5a:	4630      	mov	r0, r6
 800fa5c:	4639      	mov	r1, r7
 800fa5e:	f7f1 f83d 	bl	8000adc <__aeabi_dcmplt>
 800fa62:	b148      	cbz	r0, 800fa78 <_dtoa_r+0x190>
 800fa64:	4658      	mov	r0, fp
 800fa66:	f7f0 fd5d 	bl	8000524 <__aeabi_i2d>
 800fa6a:	4632      	mov	r2, r6
 800fa6c:	463b      	mov	r3, r7
 800fa6e:	f7f1 f82b 	bl	8000ac8 <__aeabi_dcmpeq>
 800fa72:	b908      	cbnz	r0, 800fa78 <_dtoa_r+0x190>
 800fa74:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fa78:	f1bb 0f16 	cmp.w	fp, #22
 800fa7c:	d857      	bhi.n	800fb2e <_dtoa_r+0x246>
 800fa7e:	4b5b      	ldr	r3, [pc, #364]	; (800fbec <_dtoa_r+0x304>)
 800fa80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fa84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa88:	ec51 0b18 	vmov	r0, r1, d8
 800fa8c:	f7f1 f826 	bl	8000adc <__aeabi_dcmplt>
 800fa90:	2800      	cmp	r0, #0
 800fa92:	d04e      	beq.n	800fb32 <_dtoa_r+0x24a>
 800fa94:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fa98:	2300      	movs	r3, #0
 800fa9a:	930c      	str	r3, [sp, #48]	; 0x30
 800fa9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fa9e:	1b5b      	subs	r3, r3, r5
 800faa0:	1e5a      	subs	r2, r3, #1
 800faa2:	bf45      	ittet	mi
 800faa4:	f1c3 0301 	rsbmi	r3, r3, #1
 800faa8:	9305      	strmi	r3, [sp, #20]
 800faaa:	2300      	movpl	r3, #0
 800faac:	2300      	movmi	r3, #0
 800faae:	9206      	str	r2, [sp, #24]
 800fab0:	bf54      	ite	pl
 800fab2:	9305      	strpl	r3, [sp, #20]
 800fab4:	9306      	strmi	r3, [sp, #24]
 800fab6:	f1bb 0f00 	cmp.w	fp, #0
 800faba:	db3c      	blt.n	800fb36 <_dtoa_r+0x24e>
 800fabc:	9b06      	ldr	r3, [sp, #24]
 800fabe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800fac2:	445b      	add	r3, fp
 800fac4:	9306      	str	r3, [sp, #24]
 800fac6:	2300      	movs	r3, #0
 800fac8:	9308      	str	r3, [sp, #32]
 800faca:	9b07      	ldr	r3, [sp, #28]
 800facc:	2b09      	cmp	r3, #9
 800face:	d868      	bhi.n	800fba2 <_dtoa_r+0x2ba>
 800fad0:	2b05      	cmp	r3, #5
 800fad2:	bfc4      	itt	gt
 800fad4:	3b04      	subgt	r3, #4
 800fad6:	9307      	strgt	r3, [sp, #28]
 800fad8:	9b07      	ldr	r3, [sp, #28]
 800fada:	f1a3 0302 	sub.w	r3, r3, #2
 800fade:	bfcc      	ite	gt
 800fae0:	2500      	movgt	r5, #0
 800fae2:	2501      	movle	r5, #1
 800fae4:	2b03      	cmp	r3, #3
 800fae6:	f200 8085 	bhi.w	800fbf4 <_dtoa_r+0x30c>
 800faea:	e8df f003 	tbb	[pc, r3]
 800faee:	3b2e      	.short	0x3b2e
 800faf0:	5839      	.short	0x5839
 800faf2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800faf6:	441d      	add	r5, r3
 800faf8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fafc:	2b20      	cmp	r3, #32
 800fafe:	bfc1      	itttt	gt
 800fb00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fb04:	fa08 f803 	lslgt.w	r8, r8, r3
 800fb08:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800fb0c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800fb10:	bfd6      	itet	le
 800fb12:	f1c3 0320 	rsble	r3, r3, #32
 800fb16:	ea48 0003 	orrgt.w	r0, r8, r3
 800fb1a:	fa06 f003 	lslle.w	r0, r6, r3
 800fb1e:	f7f0 fcf1 	bl	8000504 <__aeabi_ui2d>
 800fb22:	2201      	movs	r2, #1
 800fb24:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800fb28:	3d01      	subs	r5, #1
 800fb2a:	920e      	str	r2, [sp, #56]	; 0x38
 800fb2c:	e76f      	b.n	800fa0e <_dtoa_r+0x126>
 800fb2e:	2301      	movs	r3, #1
 800fb30:	e7b3      	b.n	800fa9a <_dtoa_r+0x1b2>
 800fb32:	900c      	str	r0, [sp, #48]	; 0x30
 800fb34:	e7b2      	b.n	800fa9c <_dtoa_r+0x1b4>
 800fb36:	9b05      	ldr	r3, [sp, #20]
 800fb38:	eba3 030b 	sub.w	r3, r3, fp
 800fb3c:	9305      	str	r3, [sp, #20]
 800fb3e:	f1cb 0300 	rsb	r3, fp, #0
 800fb42:	9308      	str	r3, [sp, #32]
 800fb44:	2300      	movs	r3, #0
 800fb46:	930b      	str	r3, [sp, #44]	; 0x2c
 800fb48:	e7bf      	b.n	800faca <_dtoa_r+0x1e2>
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	9309      	str	r3, [sp, #36]	; 0x24
 800fb4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	dc52      	bgt.n	800fbfa <_dtoa_r+0x312>
 800fb54:	2301      	movs	r3, #1
 800fb56:	9301      	str	r3, [sp, #4]
 800fb58:	9304      	str	r3, [sp, #16]
 800fb5a:	461a      	mov	r2, r3
 800fb5c:	920a      	str	r2, [sp, #40]	; 0x28
 800fb5e:	e00b      	b.n	800fb78 <_dtoa_r+0x290>
 800fb60:	2301      	movs	r3, #1
 800fb62:	e7f3      	b.n	800fb4c <_dtoa_r+0x264>
 800fb64:	2300      	movs	r3, #0
 800fb66:	9309      	str	r3, [sp, #36]	; 0x24
 800fb68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb6a:	445b      	add	r3, fp
 800fb6c:	9301      	str	r3, [sp, #4]
 800fb6e:	3301      	adds	r3, #1
 800fb70:	2b01      	cmp	r3, #1
 800fb72:	9304      	str	r3, [sp, #16]
 800fb74:	bfb8      	it	lt
 800fb76:	2301      	movlt	r3, #1
 800fb78:	69e0      	ldr	r0, [r4, #28]
 800fb7a:	2100      	movs	r1, #0
 800fb7c:	2204      	movs	r2, #4
 800fb7e:	f102 0614 	add.w	r6, r2, #20
 800fb82:	429e      	cmp	r6, r3
 800fb84:	d93d      	bls.n	800fc02 <_dtoa_r+0x31a>
 800fb86:	6041      	str	r1, [r0, #4]
 800fb88:	4620      	mov	r0, r4
 800fb8a:	f000 fd9f 	bl	80106cc <_Balloc>
 800fb8e:	9000      	str	r0, [sp, #0]
 800fb90:	2800      	cmp	r0, #0
 800fb92:	d139      	bne.n	800fc08 <_dtoa_r+0x320>
 800fb94:	4b16      	ldr	r3, [pc, #88]	; (800fbf0 <_dtoa_r+0x308>)
 800fb96:	4602      	mov	r2, r0
 800fb98:	f240 11af 	movw	r1, #431	; 0x1af
 800fb9c:	e6bd      	b.n	800f91a <_dtoa_r+0x32>
 800fb9e:	2301      	movs	r3, #1
 800fba0:	e7e1      	b.n	800fb66 <_dtoa_r+0x27e>
 800fba2:	2501      	movs	r5, #1
 800fba4:	2300      	movs	r3, #0
 800fba6:	9307      	str	r3, [sp, #28]
 800fba8:	9509      	str	r5, [sp, #36]	; 0x24
 800fbaa:	f04f 33ff 	mov.w	r3, #4294967295
 800fbae:	9301      	str	r3, [sp, #4]
 800fbb0:	9304      	str	r3, [sp, #16]
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	2312      	movs	r3, #18
 800fbb6:	e7d1      	b.n	800fb5c <_dtoa_r+0x274>
 800fbb8:	636f4361 	.word	0x636f4361
 800fbbc:	3fd287a7 	.word	0x3fd287a7
 800fbc0:	8b60c8b3 	.word	0x8b60c8b3
 800fbc4:	3fc68a28 	.word	0x3fc68a28
 800fbc8:	509f79fb 	.word	0x509f79fb
 800fbcc:	3fd34413 	.word	0x3fd34413
 800fbd0:	08011e45 	.word	0x08011e45
 800fbd4:	08011e5c 	.word	0x08011e5c
 800fbd8:	7ff00000 	.word	0x7ff00000
 800fbdc:	08011e41 	.word	0x08011e41
 800fbe0:	08011e38 	.word	0x08011e38
 800fbe4:	08011e15 	.word	0x08011e15
 800fbe8:	3ff80000 	.word	0x3ff80000
 800fbec:	08011f48 	.word	0x08011f48
 800fbf0:	08011eb4 	.word	0x08011eb4
 800fbf4:	2301      	movs	r3, #1
 800fbf6:	9309      	str	r3, [sp, #36]	; 0x24
 800fbf8:	e7d7      	b.n	800fbaa <_dtoa_r+0x2c2>
 800fbfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbfc:	9301      	str	r3, [sp, #4]
 800fbfe:	9304      	str	r3, [sp, #16]
 800fc00:	e7ba      	b.n	800fb78 <_dtoa_r+0x290>
 800fc02:	3101      	adds	r1, #1
 800fc04:	0052      	lsls	r2, r2, #1
 800fc06:	e7ba      	b.n	800fb7e <_dtoa_r+0x296>
 800fc08:	69e3      	ldr	r3, [r4, #28]
 800fc0a:	9a00      	ldr	r2, [sp, #0]
 800fc0c:	601a      	str	r2, [r3, #0]
 800fc0e:	9b04      	ldr	r3, [sp, #16]
 800fc10:	2b0e      	cmp	r3, #14
 800fc12:	f200 80a8 	bhi.w	800fd66 <_dtoa_r+0x47e>
 800fc16:	2d00      	cmp	r5, #0
 800fc18:	f000 80a5 	beq.w	800fd66 <_dtoa_r+0x47e>
 800fc1c:	f1bb 0f00 	cmp.w	fp, #0
 800fc20:	dd38      	ble.n	800fc94 <_dtoa_r+0x3ac>
 800fc22:	4bc0      	ldr	r3, [pc, #768]	; (800ff24 <_dtoa_r+0x63c>)
 800fc24:	f00b 020f 	and.w	r2, fp, #15
 800fc28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fc2c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800fc30:	e9d3 6700 	ldrd	r6, r7, [r3]
 800fc34:	ea4f 182b 	mov.w	r8, fp, asr #4
 800fc38:	d019      	beq.n	800fc6e <_dtoa_r+0x386>
 800fc3a:	4bbb      	ldr	r3, [pc, #748]	; (800ff28 <_dtoa_r+0x640>)
 800fc3c:	ec51 0b18 	vmov	r0, r1, d8
 800fc40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fc44:	f7f0 fe02 	bl	800084c <__aeabi_ddiv>
 800fc48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fc4c:	f008 080f 	and.w	r8, r8, #15
 800fc50:	2503      	movs	r5, #3
 800fc52:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ff28 <_dtoa_r+0x640>
 800fc56:	f1b8 0f00 	cmp.w	r8, #0
 800fc5a:	d10a      	bne.n	800fc72 <_dtoa_r+0x38a>
 800fc5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc60:	4632      	mov	r2, r6
 800fc62:	463b      	mov	r3, r7
 800fc64:	f7f0 fdf2 	bl	800084c <__aeabi_ddiv>
 800fc68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fc6c:	e02b      	b.n	800fcc6 <_dtoa_r+0x3de>
 800fc6e:	2502      	movs	r5, #2
 800fc70:	e7ef      	b.n	800fc52 <_dtoa_r+0x36a>
 800fc72:	f018 0f01 	tst.w	r8, #1
 800fc76:	d008      	beq.n	800fc8a <_dtoa_r+0x3a2>
 800fc78:	4630      	mov	r0, r6
 800fc7a:	4639      	mov	r1, r7
 800fc7c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fc80:	f7f0 fcba 	bl	80005f8 <__aeabi_dmul>
 800fc84:	3501      	adds	r5, #1
 800fc86:	4606      	mov	r6, r0
 800fc88:	460f      	mov	r7, r1
 800fc8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fc8e:	f109 0908 	add.w	r9, r9, #8
 800fc92:	e7e0      	b.n	800fc56 <_dtoa_r+0x36e>
 800fc94:	f000 809f 	beq.w	800fdd6 <_dtoa_r+0x4ee>
 800fc98:	f1cb 0600 	rsb	r6, fp, #0
 800fc9c:	4ba1      	ldr	r3, [pc, #644]	; (800ff24 <_dtoa_r+0x63c>)
 800fc9e:	4fa2      	ldr	r7, [pc, #648]	; (800ff28 <_dtoa_r+0x640>)
 800fca0:	f006 020f 	and.w	r2, r6, #15
 800fca4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcac:	ec51 0b18 	vmov	r0, r1, d8
 800fcb0:	f7f0 fca2 	bl	80005f8 <__aeabi_dmul>
 800fcb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fcb8:	1136      	asrs	r6, r6, #4
 800fcba:	2300      	movs	r3, #0
 800fcbc:	2502      	movs	r5, #2
 800fcbe:	2e00      	cmp	r6, #0
 800fcc0:	d17e      	bne.n	800fdc0 <_dtoa_r+0x4d8>
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d1d0      	bne.n	800fc68 <_dtoa_r+0x380>
 800fcc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fcc8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	f000 8084 	beq.w	800fdda <_dtoa_r+0x4f2>
 800fcd2:	4b96      	ldr	r3, [pc, #600]	; (800ff2c <_dtoa_r+0x644>)
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	4640      	mov	r0, r8
 800fcd8:	4649      	mov	r1, r9
 800fcda:	f7f0 feff 	bl	8000adc <__aeabi_dcmplt>
 800fcde:	2800      	cmp	r0, #0
 800fce0:	d07b      	beq.n	800fdda <_dtoa_r+0x4f2>
 800fce2:	9b04      	ldr	r3, [sp, #16]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d078      	beq.n	800fdda <_dtoa_r+0x4f2>
 800fce8:	9b01      	ldr	r3, [sp, #4]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	dd39      	ble.n	800fd62 <_dtoa_r+0x47a>
 800fcee:	4b90      	ldr	r3, [pc, #576]	; (800ff30 <_dtoa_r+0x648>)
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	4640      	mov	r0, r8
 800fcf4:	4649      	mov	r1, r9
 800fcf6:	f7f0 fc7f 	bl	80005f8 <__aeabi_dmul>
 800fcfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fcfe:	9e01      	ldr	r6, [sp, #4]
 800fd00:	f10b 37ff 	add.w	r7, fp, #4294967295
 800fd04:	3501      	adds	r5, #1
 800fd06:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fd0a:	4628      	mov	r0, r5
 800fd0c:	f7f0 fc0a 	bl	8000524 <__aeabi_i2d>
 800fd10:	4642      	mov	r2, r8
 800fd12:	464b      	mov	r3, r9
 800fd14:	f7f0 fc70 	bl	80005f8 <__aeabi_dmul>
 800fd18:	4b86      	ldr	r3, [pc, #536]	; (800ff34 <_dtoa_r+0x64c>)
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	f7f0 fab6 	bl	800028c <__adddf3>
 800fd20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800fd24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd28:	9303      	str	r3, [sp, #12]
 800fd2a:	2e00      	cmp	r6, #0
 800fd2c:	d158      	bne.n	800fde0 <_dtoa_r+0x4f8>
 800fd2e:	4b82      	ldr	r3, [pc, #520]	; (800ff38 <_dtoa_r+0x650>)
 800fd30:	2200      	movs	r2, #0
 800fd32:	4640      	mov	r0, r8
 800fd34:	4649      	mov	r1, r9
 800fd36:	f7f0 faa7 	bl	8000288 <__aeabi_dsub>
 800fd3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fd3e:	4680      	mov	r8, r0
 800fd40:	4689      	mov	r9, r1
 800fd42:	f7f0 fee9 	bl	8000b18 <__aeabi_dcmpgt>
 800fd46:	2800      	cmp	r0, #0
 800fd48:	f040 8296 	bne.w	8010278 <_dtoa_r+0x990>
 800fd4c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fd50:	4640      	mov	r0, r8
 800fd52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fd56:	4649      	mov	r1, r9
 800fd58:	f7f0 fec0 	bl	8000adc <__aeabi_dcmplt>
 800fd5c:	2800      	cmp	r0, #0
 800fd5e:	f040 8289 	bne.w	8010274 <_dtoa_r+0x98c>
 800fd62:	ed8d 8b02 	vstr	d8, [sp, #8]
 800fd66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	f2c0 814e 	blt.w	801000a <_dtoa_r+0x722>
 800fd6e:	f1bb 0f0e 	cmp.w	fp, #14
 800fd72:	f300 814a 	bgt.w	801000a <_dtoa_r+0x722>
 800fd76:	4b6b      	ldr	r3, [pc, #428]	; (800ff24 <_dtoa_r+0x63c>)
 800fd78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fd7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fd80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	f280 80dc 	bge.w	800ff40 <_dtoa_r+0x658>
 800fd88:	9b04      	ldr	r3, [sp, #16]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	f300 80d8 	bgt.w	800ff40 <_dtoa_r+0x658>
 800fd90:	f040 826f 	bne.w	8010272 <_dtoa_r+0x98a>
 800fd94:	4b68      	ldr	r3, [pc, #416]	; (800ff38 <_dtoa_r+0x650>)
 800fd96:	2200      	movs	r2, #0
 800fd98:	4640      	mov	r0, r8
 800fd9a:	4649      	mov	r1, r9
 800fd9c:	f7f0 fc2c 	bl	80005f8 <__aeabi_dmul>
 800fda0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fda4:	f7f0 feae 	bl	8000b04 <__aeabi_dcmpge>
 800fda8:	9e04      	ldr	r6, [sp, #16]
 800fdaa:	4637      	mov	r7, r6
 800fdac:	2800      	cmp	r0, #0
 800fdae:	f040 8245 	bne.w	801023c <_dtoa_r+0x954>
 800fdb2:	9d00      	ldr	r5, [sp, #0]
 800fdb4:	2331      	movs	r3, #49	; 0x31
 800fdb6:	f805 3b01 	strb.w	r3, [r5], #1
 800fdba:	f10b 0b01 	add.w	fp, fp, #1
 800fdbe:	e241      	b.n	8010244 <_dtoa_r+0x95c>
 800fdc0:	07f2      	lsls	r2, r6, #31
 800fdc2:	d505      	bpl.n	800fdd0 <_dtoa_r+0x4e8>
 800fdc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fdc8:	f7f0 fc16 	bl	80005f8 <__aeabi_dmul>
 800fdcc:	3501      	adds	r5, #1
 800fdce:	2301      	movs	r3, #1
 800fdd0:	1076      	asrs	r6, r6, #1
 800fdd2:	3708      	adds	r7, #8
 800fdd4:	e773      	b.n	800fcbe <_dtoa_r+0x3d6>
 800fdd6:	2502      	movs	r5, #2
 800fdd8:	e775      	b.n	800fcc6 <_dtoa_r+0x3de>
 800fdda:	9e04      	ldr	r6, [sp, #16]
 800fddc:	465f      	mov	r7, fp
 800fdde:	e792      	b.n	800fd06 <_dtoa_r+0x41e>
 800fde0:	9900      	ldr	r1, [sp, #0]
 800fde2:	4b50      	ldr	r3, [pc, #320]	; (800ff24 <_dtoa_r+0x63c>)
 800fde4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fde8:	4431      	add	r1, r6
 800fdea:	9102      	str	r1, [sp, #8]
 800fdec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fdee:	eeb0 9a47 	vmov.f32	s18, s14
 800fdf2:	eef0 9a67 	vmov.f32	s19, s15
 800fdf6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fdfa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fdfe:	2900      	cmp	r1, #0
 800fe00:	d044      	beq.n	800fe8c <_dtoa_r+0x5a4>
 800fe02:	494e      	ldr	r1, [pc, #312]	; (800ff3c <_dtoa_r+0x654>)
 800fe04:	2000      	movs	r0, #0
 800fe06:	f7f0 fd21 	bl	800084c <__aeabi_ddiv>
 800fe0a:	ec53 2b19 	vmov	r2, r3, d9
 800fe0e:	f7f0 fa3b 	bl	8000288 <__aeabi_dsub>
 800fe12:	9d00      	ldr	r5, [sp, #0]
 800fe14:	ec41 0b19 	vmov	d9, r0, r1
 800fe18:	4649      	mov	r1, r9
 800fe1a:	4640      	mov	r0, r8
 800fe1c:	f7f0 fe9c 	bl	8000b58 <__aeabi_d2iz>
 800fe20:	4606      	mov	r6, r0
 800fe22:	f7f0 fb7f 	bl	8000524 <__aeabi_i2d>
 800fe26:	4602      	mov	r2, r0
 800fe28:	460b      	mov	r3, r1
 800fe2a:	4640      	mov	r0, r8
 800fe2c:	4649      	mov	r1, r9
 800fe2e:	f7f0 fa2b 	bl	8000288 <__aeabi_dsub>
 800fe32:	3630      	adds	r6, #48	; 0x30
 800fe34:	f805 6b01 	strb.w	r6, [r5], #1
 800fe38:	ec53 2b19 	vmov	r2, r3, d9
 800fe3c:	4680      	mov	r8, r0
 800fe3e:	4689      	mov	r9, r1
 800fe40:	f7f0 fe4c 	bl	8000adc <__aeabi_dcmplt>
 800fe44:	2800      	cmp	r0, #0
 800fe46:	d164      	bne.n	800ff12 <_dtoa_r+0x62a>
 800fe48:	4642      	mov	r2, r8
 800fe4a:	464b      	mov	r3, r9
 800fe4c:	4937      	ldr	r1, [pc, #220]	; (800ff2c <_dtoa_r+0x644>)
 800fe4e:	2000      	movs	r0, #0
 800fe50:	f7f0 fa1a 	bl	8000288 <__aeabi_dsub>
 800fe54:	ec53 2b19 	vmov	r2, r3, d9
 800fe58:	f7f0 fe40 	bl	8000adc <__aeabi_dcmplt>
 800fe5c:	2800      	cmp	r0, #0
 800fe5e:	f040 80b6 	bne.w	800ffce <_dtoa_r+0x6e6>
 800fe62:	9b02      	ldr	r3, [sp, #8]
 800fe64:	429d      	cmp	r5, r3
 800fe66:	f43f af7c 	beq.w	800fd62 <_dtoa_r+0x47a>
 800fe6a:	4b31      	ldr	r3, [pc, #196]	; (800ff30 <_dtoa_r+0x648>)
 800fe6c:	ec51 0b19 	vmov	r0, r1, d9
 800fe70:	2200      	movs	r2, #0
 800fe72:	f7f0 fbc1 	bl	80005f8 <__aeabi_dmul>
 800fe76:	4b2e      	ldr	r3, [pc, #184]	; (800ff30 <_dtoa_r+0x648>)
 800fe78:	ec41 0b19 	vmov	d9, r0, r1
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	4640      	mov	r0, r8
 800fe80:	4649      	mov	r1, r9
 800fe82:	f7f0 fbb9 	bl	80005f8 <__aeabi_dmul>
 800fe86:	4680      	mov	r8, r0
 800fe88:	4689      	mov	r9, r1
 800fe8a:	e7c5      	b.n	800fe18 <_dtoa_r+0x530>
 800fe8c:	ec51 0b17 	vmov	r0, r1, d7
 800fe90:	f7f0 fbb2 	bl	80005f8 <__aeabi_dmul>
 800fe94:	9b02      	ldr	r3, [sp, #8]
 800fe96:	9d00      	ldr	r5, [sp, #0]
 800fe98:	930f      	str	r3, [sp, #60]	; 0x3c
 800fe9a:	ec41 0b19 	vmov	d9, r0, r1
 800fe9e:	4649      	mov	r1, r9
 800fea0:	4640      	mov	r0, r8
 800fea2:	f7f0 fe59 	bl	8000b58 <__aeabi_d2iz>
 800fea6:	4606      	mov	r6, r0
 800fea8:	f7f0 fb3c 	bl	8000524 <__aeabi_i2d>
 800feac:	3630      	adds	r6, #48	; 0x30
 800feae:	4602      	mov	r2, r0
 800feb0:	460b      	mov	r3, r1
 800feb2:	4640      	mov	r0, r8
 800feb4:	4649      	mov	r1, r9
 800feb6:	f7f0 f9e7 	bl	8000288 <__aeabi_dsub>
 800feba:	f805 6b01 	strb.w	r6, [r5], #1
 800febe:	9b02      	ldr	r3, [sp, #8]
 800fec0:	429d      	cmp	r5, r3
 800fec2:	4680      	mov	r8, r0
 800fec4:	4689      	mov	r9, r1
 800fec6:	f04f 0200 	mov.w	r2, #0
 800feca:	d124      	bne.n	800ff16 <_dtoa_r+0x62e>
 800fecc:	4b1b      	ldr	r3, [pc, #108]	; (800ff3c <_dtoa_r+0x654>)
 800fece:	ec51 0b19 	vmov	r0, r1, d9
 800fed2:	f7f0 f9db 	bl	800028c <__adddf3>
 800fed6:	4602      	mov	r2, r0
 800fed8:	460b      	mov	r3, r1
 800feda:	4640      	mov	r0, r8
 800fedc:	4649      	mov	r1, r9
 800fede:	f7f0 fe1b 	bl	8000b18 <__aeabi_dcmpgt>
 800fee2:	2800      	cmp	r0, #0
 800fee4:	d173      	bne.n	800ffce <_dtoa_r+0x6e6>
 800fee6:	ec53 2b19 	vmov	r2, r3, d9
 800feea:	4914      	ldr	r1, [pc, #80]	; (800ff3c <_dtoa_r+0x654>)
 800feec:	2000      	movs	r0, #0
 800feee:	f7f0 f9cb 	bl	8000288 <__aeabi_dsub>
 800fef2:	4602      	mov	r2, r0
 800fef4:	460b      	mov	r3, r1
 800fef6:	4640      	mov	r0, r8
 800fef8:	4649      	mov	r1, r9
 800fefa:	f7f0 fdef 	bl	8000adc <__aeabi_dcmplt>
 800fefe:	2800      	cmp	r0, #0
 800ff00:	f43f af2f 	beq.w	800fd62 <_dtoa_r+0x47a>
 800ff04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ff06:	1e6b      	subs	r3, r5, #1
 800ff08:	930f      	str	r3, [sp, #60]	; 0x3c
 800ff0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ff0e:	2b30      	cmp	r3, #48	; 0x30
 800ff10:	d0f8      	beq.n	800ff04 <_dtoa_r+0x61c>
 800ff12:	46bb      	mov	fp, r7
 800ff14:	e04a      	b.n	800ffac <_dtoa_r+0x6c4>
 800ff16:	4b06      	ldr	r3, [pc, #24]	; (800ff30 <_dtoa_r+0x648>)
 800ff18:	f7f0 fb6e 	bl	80005f8 <__aeabi_dmul>
 800ff1c:	4680      	mov	r8, r0
 800ff1e:	4689      	mov	r9, r1
 800ff20:	e7bd      	b.n	800fe9e <_dtoa_r+0x5b6>
 800ff22:	bf00      	nop
 800ff24:	08011f48 	.word	0x08011f48
 800ff28:	08011f20 	.word	0x08011f20
 800ff2c:	3ff00000 	.word	0x3ff00000
 800ff30:	40240000 	.word	0x40240000
 800ff34:	401c0000 	.word	0x401c0000
 800ff38:	40140000 	.word	0x40140000
 800ff3c:	3fe00000 	.word	0x3fe00000
 800ff40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ff44:	9d00      	ldr	r5, [sp, #0]
 800ff46:	4642      	mov	r2, r8
 800ff48:	464b      	mov	r3, r9
 800ff4a:	4630      	mov	r0, r6
 800ff4c:	4639      	mov	r1, r7
 800ff4e:	f7f0 fc7d 	bl	800084c <__aeabi_ddiv>
 800ff52:	f7f0 fe01 	bl	8000b58 <__aeabi_d2iz>
 800ff56:	9001      	str	r0, [sp, #4]
 800ff58:	f7f0 fae4 	bl	8000524 <__aeabi_i2d>
 800ff5c:	4642      	mov	r2, r8
 800ff5e:	464b      	mov	r3, r9
 800ff60:	f7f0 fb4a 	bl	80005f8 <__aeabi_dmul>
 800ff64:	4602      	mov	r2, r0
 800ff66:	460b      	mov	r3, r1
 800ff68:	4630      	mov	r0, r6
 800ff6a:	4639      	mov	r1, r7
 800ff6c:	f7f0 f98c 	bl	8000288 <__aeabi_dsub>
 800ff70:	9e01      	ldr	r6, [sp, #4]
 800ff72:	9f04      	ldr	r7, [sp, #16]
 800ff74:	3630      	adds	r6, #48	; 0x30
 800ff76:	f805 6b01 	strb.w	r6, [r5], #1
 800ff7a:	9e00      	ldr	r6, [sp, #0]
 800ff7c:	1bae      	subs	r6, r5, r6
 800ff7e:	42b7      	cmp	r7, r6
 800ff80:	4602      	mov	r2, r0
 800ff82:	460b      	mov	r3, r1
 800ff84:	d134      	bne.n	800fff0 <_dtoa_r+0x708>
 800ff86:	f7f0 f981 	bl	800028c <__adddf3>
 800ff8a:	4642      	mov	r2, r8
 800ff8c:	464b      	mov	r3, r9
 800ff8e:	4606      	mov	r6, r0
 800ff90:	460f      	mov	r7, r1
 800ff92:	f7f0 fdc1 	bl	8000b18 <__aeabi_dcmpgt>
 800ff96:	b9c8      	cbnz	r0, 800ffcc <_dtoa_r+0x6e4>
 800ff98:	4642      	mov	r2, r8
 800ff9a:	464b      	mov	r3, r9
 800ff9c:	4630      	mov	r0, r6
 800ff9e:	4639      	mov	r1, r7
 800ffa0:	f7f0 fd92 	bl	8000ac8 <__aeabi_dcmpeq>
 800ffa4:	b110      	cbz	r0, 800ffac <_dtoa_r+0x6c4>
 800ffa6:	9b01      	ldr	r3, [sp, #4]
 800ffa8:	07db      	lsls	r3, r3, #31
 800ffaa:	d40f      	bmi.n	800ffcc <_dtoa_r+0x6e4>
 800ffac:	4651      	mov	r1, sl
 800ffae:	4620      	mov	r0, r4
 800ffb0:	f000 fbcc 	bl	801074c <_Bfree>
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ffb8:	702b      	strb	r3, [r5, #0]
 800ffba:	f10b 0301 	add.w	r3, fp, #1
 800ffbe:	6013      	str	r3, [r2, #0]
 800ffc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	f43f ace2 	beq.w	800f98c <_dtoa_r+0xa4>
 800ffc8:	601d      	str	r5, [r3, #0]
 800ffca:	e4df      	b.n	800f98c <_dtoa_r+0xa4>
 800ffcc:	465f      	mov	r7, fp
 800ffce:	462b      	mov	r3, r5
 800ffd0:	461d      	mov	r5, r3
 800ffd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ffd6:	2a39      	cmp	r2, #57	; 0x39
 800ffd8:	d106      	bne.n	800ffe8 <_dtoa_r+0x700>
 800ffda:	9a00      	ldr	r2, [sp, #0]
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	d1f7      	bne.n	800ffd0 <_dtoa_r+0x6e8>
 800ffe0:	9900      	ldr	r1, [sp, #0]
 800ffe2:	2230      	movs	r2, #48	; 0x30
 800ffe4:	3701      	adds	r7, #1
 800ffe6:	700a      	strb	r2, [r1, #0]
 800ffe8:	781a      	ldrb	r2, [r3, #0]
 800ffea:	3201      	adds	r2, #1
 800ffec:	701a      	strb	r2, [r3, #0]
 800ffee:	e790      	b.n	800ff12 <_dtoa_r+0x62a>
 800fff0:	4ba3      	ldr	r3, [pc, #652]	; (8010280 <_dtoa_r+0x998>)
 800fff2:	2200      	movs	r2, #0
 800fff4:	f7f0 fb00 	bl	80005f8 <__aeabi_dmul>
 800fff8:	2200      	movs	r2, #0
 800fffa:	2300      	movs	r3, #0
 800fffc:	4606      	mov	r6, r0
 800fffe:	460f      	mov	r7, r1
 8010000:	f7f0 fd62 	bl	8000ac8 <__aeabi_dcmpeq>
 8010004:	2800      	cmp	r0, #0
 8010006:	d09e      	beq.n	800ff46 <_dtoa_r+0x65e>
 8010008:	e7d0      	b.n	800ffac <_dtoa_r+0x6c4>
 801000a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801000c:	2a00      	cmp	r2, #0
 801000e:	f000 80ca 	beq.w	80101a6 <_dtoa_r+0x8be>
 8010012:	9a07      	ldr	r2, [sp, #28]
 8010014:	2a01      	cmp	r2, #1
 8010016:	f300 80ad 	bgt.w	8010174 <_dtoa_r+0x88c>
 801001a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801001c:	2a00      	cmp	r2, #0
 801001e:	f000 80a5 	beq.w	801016c <_dtoa_r+0x884>
 8010022:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010026:	9e08      	ldr	r6, [sp, #32]
 8010028:	9d05      	ldr	r5, [sp, #20]
 801002a:	9a05      	ldr	r2, [sp, #20]
 801002c:	441a      	add	r2, r3
 801002e:	9205      	str	r2, [sp, #20]
 8010030:	9a06      	ldr	r2, [sp, #24]
 8010032:	2101      	movs	r1, #1
 8010034:	441a      	add	r2, r3
 8010036:	4620      	mov	r0, r4
 8010038:	9206      	str	r2, [sp, #24]
 801003a:	f000 fc3d 	bl	80108b8 <__i2b>
 801003e:	4607      	mov	r7, r0
 8010040:	b165      	cbz	r5, 801005c <_dtoa_r+0x774>
 8010042:	9b06      	ldr	r3, [sp, #24]
 8010044:	2b00      	cmp	r3, #0
 8010046:	dd09      	ble.n	801005c <_dtoa_r+0x774>
 8010048:	42ab      	cmp	r3, r5
 801004a:	9a05      	ldr	r2, [sp, #20]
 801004c:	bfa8      	it	ge
 801004e:	462b      	movge	r3, r5
 8010050:	1ad2      	subs	r2, r2, r3
 8010052:	9205      	str	r2, [sp, #20]
 8010054:	9a06      	ldr	r2, [sp, #24]
 8010056:	1aed      	subs	r5, r5, r3
 8010058:	1ad3      	subs	r3, r2, r3
 801005a:	9306      	str	r3, [sp, #24]
 801005c:	9b08      	ldr	r3, [sp, #32]
 801005e:	b1f3      	cbz	r3, 801009e <_dtoa_r+0x7b6>
 8010060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010062:	2b00      	cmp	r3, #0
 8010064:	f000 80a3 	beq.w	80101ae <_dtoa_r+0x8c6>
 8010068:	2e00      	cmp	r6, #0
 801006a:	dd10      	ble.n	801008e <_dtoa_r+0x7a6>
 801006c:	4639      	mov	r1, r7
 801006e:	4632      	mov	r2, r6
 8010070:	4620      	mov	r0, r4
 8010072:	f000 fce1 	bl	8010a38 <__pow5mult>
 8010076:	4652      	mov	r2, sl
 8010078:	4601      	mov	r1, r0
 801007a:	4607      	mov	r7, r0
 801007c:	4620      	mov	r0, r4
 801007e:	f000 fc31 	bl	80108e4 <__multiply>
 8010082:	4651      	mov	r1, sl
 8010084:	4680      	mov	r8, r0
 8010086:	4620      	mov	r0, r4
 8010088:	f000 fb60 	bl	801074c <_Bfree>
 801008c:	46c2      	mov	sl, r8
 801008e:	9b08      	ldr	r3, [sp, #32]
 8010090:	1b9a      	subs	r2, r3, r6
 8010092:	d004      	beq.n	801009e <_dtoa_r+0x7b6>
 8010094:	4651      	mov	r1, sl
 8010096:	4620      	mov	r0, r4
 8010098:	f000 fcce 	bl	8010a38 <__pow5mult>
 801009c:	4682      	mov	sl, r0
 801009e:	2101      	movs	r1, #1
 80100a0:	4620      	mov	r0, r4
 80100a2:	f000 fc09 	bl	80108b8 <__i2b>
 80100a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	4606      	mov	r6, r0
 80100ac:	f340 8081 	ble.w	80101b2 <_dtoa_r+0x8ca>
 80100b0:	461a      	mov	r2, r3
 80100b2:	4601      	mov	r1, r0
 80100b4:	4620      	mov	r0, r4
 80100b6:	f000 fcbf 	bl	8010a38 <__pow5mult>
 80100ba:	9b07      	ldr	r3, [sp, #28]
 80100bc:	2b01      	cmp	r3, #1
 80100be:	4606      	mov	r6, r0
 80100c0:	dd7a      	ble.n	80101b8 <_dtoa_r+0x8d0>
 80100c2:	f04f 0800 	mov.w	r8, #0
 80100c6:	6933      	ldr	r3, [r6, #16]
 80100c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80100cc:	6918      	ldr	r0, [r3, #16]
 80100ce:	f000 fba5 	bl	801081c <__hi0bits>
 80100d2:	f1c0 0020 	rsb	r0, r0, #32
 80100d6:	9b06      	ldr	r3, [sp, #24]
 80100d8:	4418      	add	r0, r3
 80100da:	f010 001f 	ands.w	r0, r0, #31
 80100de:	f000 8094 	beq.w	801020a <_dtoa_r+0x922>
 80100e2:	f1c0 0320 	rsb	r3, r0, #32
 80100e6:	2b04      	cmp	r3, #4
 80100e8:	f340 8085 	ble.w	80101f6 <_dtoa_r+0x90e>
 80100ec:	9b05      	ldr	r3, [sp, #20]
 80100ee:	f1c0 001c 	rsb	r0, r0, #28
 80100f2:	4403      	add	r3, r0
 80100f4:	9305      	str	r3, [sp, #20]
 80100f6:	9b06      	ldr	r3, [sp, #24]
 80100f8:	4403      	add	r3, r0
 80100fa:	4405      	add	r5, r0
 80100fc:	9306      	str	r3, [sp, #24]
 80100fe:	9b05      	ldr	r3, [sp, #20]
 8010100:	2b00      	cmp	r3, #0
 8010102:	dd05      	ble.n	8010110 <_dtoa_r+0x828>
 8010104:	4651      	mov	r1, sl
 8010106:	461a      	mov	r2, r3
 8010108:	4620      	mov	r0, r4
 801010a:	f000 fcef 	bl	8010aec <__lshift>
 801010e:	4682      	mov	sl, r0
 8010110:	9b06      	ldr	r3, [sp, #24]
 8010112:	2b00      	cmp	r3, #0
 8010114:	dd05      	ble.n	8010122 <_dtoa_r+0x83a>
 8010116:	4631      	mov	r1, r6
 8010118:	461a      	mov	r2, r3
 801011a:	4620      	mov	r0, r4
 801011c:	f000 fce6 	bl	8010aec <__lshift>
 8010120:	4606      	mov	r6, r0
 8010122:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010124:	2b00      	cmp	r3, #0
 8010126:	d072      	beq.n	801020e <_dtoa_r+0x926>
 8010128:	4631      	mov	r1, r6
 801012a:	4650      	mov	r0, sl
 801012c:	f000 fd4a 	bl	8010bc4 <__mcmp>
 8010130:	2800      	cmp	r0, #0
 8010132:	da6c      	bge.n	801020e <_dtoa_r+0x926>
 8010134:	2300      	movs	r3, #0
 8010136:	4651      	mov	r1, sl
 8010138:	220a      	movs	r2, #10
 801013a:	4620      	mov	r0, r4
 801013c:	f000 fb28 	bl	8010790 <__multadd>
 8010140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010142:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010146:	4682      	mov	sl, r0
 8010148:	2b00      	cmp	r3, #0
 801014a:	f000 81b0 	beq.w	80104ae <_dtoa_r+0xbc6>
 801014e:	2300      	movs	r3, #0
 8010150:	4639      	mov	r1, r7
 8010152:	220a      	movs	r2, #10
 8010154:	4620      	mov	r0, r4
 8010156:	f000 fb1b 	bl	8010790 <__multadd>
 801015a:	9b01      	ldr	r3, [sp, #4]
 801015c:	2b00      	cmp	r3, #0
 801015e:	4607      	mov	r7, r0
 8010160:	f300 8096 	bgt.w	8010290 <_dtoa_r+0x9a8>
 8010164:	9b07      	ldr	r3, [sp, #28]
 8010166:	2b02      	cmp	r3, #2
 8010168:	dc59      	bgt.n	801021e <_dtoa_r+0x936>
 801016a:	e091      	b.n	8010290 <_dtoa_r+0x9a8>
 801016c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801016e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010172:	e758      	b.n	8010026 <_dtoa_r+0x73e>
 8010174:	9b04      	ldr	r3, [sp, #16]
 8010176:	1e5e      	subs	r6, r3, #1
 8010178:	9b08      	ldr	r3, [sp, #32]
 801017a:	42b3      	cmp	r3, r6
 801017c:	bfbf      	itttt	lt
 801017e:	9b08      	ldrlt	r3, [sp, #32]
 8010180:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8010182:	9608      	strlt	r6, [sp, #32]
 8010184:	1af3      	sublt	r3, r6, r3
 8010186:	bfb4      	ite	lt
 8010188:	18d2      	addlt	r2, r2, r3
 801018a:	1b9e      	subge	r6, r3, r6
 801018c:	9b04      	ldr	r3, [sp, #16]
 801018e:	bfbc      	itt	lt
 8010190:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8010192:	2600      	movlt	r6, #0
 8010194:	2b00      	cmp	r3, #0
 8010196:	bfb7      	itett	lt
 8010198:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801019c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80101a0:	1a9d      	sublt	r5, r3, r2
 80101a2:	2300      	movlt	r3, #0
 80101a4:	e741      	b.n	801002a <_dtoa_r+0x742>
 80101a6:	9e08      	ldr	r6, [sp, #32]
 80101a8:	9d05      	ldr	r5, [sp, #20]
 80101aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80101ac:	e748      	b.n	8010040 <_dtoa_r+0x758>
 80101ae:	9a08      	ldr	r2, [sp, #32]
 80101b0:	e770      	b.n	8010094 <_dtoa_r+0x7ac>
 80101b2:	9b07      	ldr	r3, [sp, #28]
 80101b4:	2b01      	cmp	r3, #1
 80101b6:	dc19      	bgt.n	80101ec <_dtoa_r+0x904>
 80101b8:	9b02      	ldr	r3, [sp, #8]
 80101ba:	b9bb      	cbnz	r3, 80101ec <_dtoa_r+0x904>
 80101bc:	9b03      	ldr	r3, [sp, #12]
 80101be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80101c2:	b99b      	cbnz	r3, 80101ec <_dtoa_r+0x904>
 80101c4:	9b03      	ldr	r3, [sp, #12]
 80101c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80101ca:	0d1b      	lsrs	r3, r3, #20
 80101cc:	051b      	lsls	r3, r3, #20
 80101ce:	b183      	cbz	r3, 80101f2 <_dtoa_r+0x90a>
 80101d0:	9b05      	ldr	r3, [sp, #20]
 80101d2:	3301      	adds	r3, #1
 80101d4:	9305      	str	r3, [sp, #20]
 80101d6:	9b06      	ldr	r3, [sp, #24]
 80101d8:	3301      	adds	r3, #1
 80101da:	9306      	str	r3, [sp, #24]
 80101dc:	f04f 0801 	mov.w	r8, #1
 80101e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	f47f af6f 	bne.w	80100c6 <_dtoa_r+0x7de>
 80101e8:	2001      	movs	r0, #1
 80101ea:	e774      	b.n	80100d6 <_dtoa_r+0x7ee>
 80101ec:	f04f 0800 	mov.w	r8, #0
 80101f0:	e7f6      	b.n	80101e0 <_dtoa_r+0x8f8>
 80101f2:	4698      	mov	r8, r3
 80101f4:	e7f4      	b.n	80101e0 <_dtoa_r+0x8f8>
 80101f6:	d082      	beq.n	80100fe <_dtoa_r+0x816>
 80101f8:	9a05      	ldr	r2, [sp, #20]
 80101fa:	331c      	adds	r3, #28
 80101fc:	441a      	add	r2, r3
 80101fe:	9205      	str	r2, [sp, #20]
 8010200:	9a06      	ldr	r2, [sp, #24]
 8010202:	441a      	add	r2, r3
 8010204:	441d      	add	r5, r3
 8010206:	9206      	str	r2, [sp, #24]
 8010208:	e779      	b.n	80100fe <_dtoa_r+0x816>
 801020a:	4603      	mov	r3, r0
 801020c:	e7f4      	b.n	80101f8 <_dtoa_r+0x910>
 801020e:	9b04      	ldr	r3, [sp, #16]
 8010210:	2b00      	cmp	r3, #0
 8010212:	dc37      	bgt.n	8010284 <_dtoa_r+0x99c>
 8010214:	9b07      	ldr	r3, [sp, #28]
 8010216:	2b02      	cmp	r3, #2
 8010218:	dd34      	ble.n	8010284 <_dtoa_r+0x99c>
 801021a:	9b04      	ldr	r3, [sp, #16]
 801021c:	9301      	str	r3, [sp, #4]
 801021e:	9b01      	ldr	r3, [sp, #4]
 8010220:	b963      	cbnz	r3, 801023c <_dtoa_r+0x954>
 8010222:	4631      	mov	r1, r6
 8010224:	2205      	movs	r2, #5
 8010226:	4620      	mov	r0, r4
 8010228:	f000 fab2 	bl	8010790 <__multadd>
 801022c:	4601      	mov	r1, r0
 801022e:	4606      	mov	r6, r0
 8010230:	4650      	mov	r0, sl
 8010232:	f000 fcc7 	bl	8010bc4 <__mcmp>
 8010236:	2800      	cmp	r0, #0
 8010238:	f73f adbb 	bgt.w	800fdb2 <_dtoa_r+0x4ca>
 801023c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801023e:	9d00      	ldr	r5, [sp, #0]
 8010240:	ea6f 0b03 	mvn.w	fp, r3
 8010244:	f04f 0800 	mov.w	r8, #0
 8010248:	4631      	mov	r1, r6
 801024a:	4620      	mov	r0, r4
 801024c:	f000 fa7e 	bl	801074c <_Bfree>
 8010250:	2f00      	cmp	r7, #0
 8010252:	f43f aeab 	beq.w	800ffac <_dtoa_r+0x6c4>
 8010256:	f1b8 0f00 	cmp.w	r8, #0
 801025a:	d005      	beq.n	8010268 <_dtoa_r+0x980>
 801025c:	45b8      	cmp	r8, r7
 801025e:	d003      	beq.n	8010268 <_dtoa_r+0x980>
 8010260:	4641      	mov	r1, r8
 8010262:	4620      	mov	r0, r4
 8010264:	f000 fa72 	bl	801074c <_Bfree>
 8010268:	4639      	mov	r1, r7
 801026a:	4620      	mov	r0, r4
 801026c:	f000 fa6e 	bl	801074c <_Bfree>
 8010270:	e69c      	b.n	800ffac <_dtoa_r+0x6c4>
 8010272:	2600      	movs	r6, #0
 8010274:	4637      	mov	r7, r6
 8010276:	e7e1      	b.n	801023c <_dtoa_r+0x954>
 8010278:	46bb      	mov	fp, r7
 801027a:	4637      	mov	r7, r6
 801027c:	e599      	b.n	800fdb2 <_dtoa_r+0x4ca>
 801027e:	bf00      	nop
 8010280:	40240000 	.word	0x40240000
 8010284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010286:	2b00      	cmp	r3, #0
 8010288:	f000 80c8 	beq.w	801041c <_dtoa_r+0xb34>
 801028c:	9b04      	ldr	r3, [sp, #16]
 801028e:	9301      	str	r3, [sp, #4]
 8010290:	2d00      	cmp	r5, #0
 8010292:	dd05      	ble.n	80102a0 <_dtoa_r+0x9b8>
 8010294:	4639      	mov	r1, r7
 8010296:	462a      	mov	r2, r5
 8010298:	4620      	mov	r0, r4
 801029a:	f000 fc27 	bl	8010aec <__lshift>
 801029e:	4607      	mov	r7, r0
 80102a0:	f1b8 0f00 	cmp.w	r8, #0
 80102a4:	d05b      	beq.n	801035e <_dtoa_r+0xa76>
 80102a6:	6879      	ldr	r1, [r7, #4]
 80102a8:	4620      	mov	r0, r4
 80102aa:	f000 fa0f 	bl	80106cc <_Balloc>
 80102ae:	4605      	mov	r5, r0
 80102b0:	b928      	cbnz	r0, 80102be <_dtoa_r+0x9d6>
 80102b2:	4b83      	ldr	r3, [pc, #524]	; (80104c0 <_dtoa_r+0xbd8>)
 80102b4:	4602      	mov	r2, r0
 80102b6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80102ba:	f7ff bb2e 	b.w	800f91a <_dtoa_r+0x32>
 80102be:	693a      	ldr	r2, [r7, #16]
 80102c0:	3202      	adds	r2, #2
 80102c2:	0092      	lsls	r2, r2, #2
 80102c4:	f107 010c 	add.w	r1, r7, #12
 80102c8:	300c      	adds	r0, #12
 80102ca:	f7ff fa77 	bl	800f7bc <memcpy>
 80102ce:	2201      	movs	r2, #1
 80102d0:	4629      	mov	r1, r5
 80102d2:	4620      	mov	r0, r4
 80102d4:	f000 fc0a 	bl	8010aec <__lshift>
 80102d8:	9b00      	ldr	r3, [sp, #0]
 80102da:	3301      	adds	r3, #1
 80102dc:	9304      	str	r3, [sp, #16]
 80102de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80102e2:	4413      	add	r3, r2
 80102e4:	9308      	str	r3, [sp, #32]
 80102e6:	9b02      	ldr	r3, [sp, #8]
 80102e8:	f003 0301 	and.w	r3, r3, #1
 80102ec:	46b8      	mov	r8, r7
 80102ee:	9306      	str	r3, [sp, #24]
 80102f0:	4607      	mov	r7, r0
 80102f2:	9b04      	ldr	r3, [sp, #16]
 80102f4:	4631      	mov	r1, r6
 80102f6:	3b01      	subs	r3, #1
 80102f8:	4650      	mov	r0, sl
 80102fa:	9301      	str	r3, [sp, #4]
 80102fc:	f7ff fa6c 	bl	800f7d8 <quorem>
 8010300:	4641      	mov	r1, r8
 8010302:	9002      	str	r0, [sp, #8]
 8010304:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010308:	4650      	mov	r0, sl
 801030a:	f000 fc5b 	bl	8010bc4 <__mcmp>
 801030e:	463a      	mov	r2, r7
 8010310:	9005      	str	r0, [sp, #20]
 8010312:	4631      	mov	r1, r6
 8010314:	4620      	mov	r0, r4
 8010316:	f000 fc71 	bl	8010bfc <__mdiff>
 801031a:	68c2      	ldr	r2, [r0, #12]
 801031c:	4605      	mov	r5, r0
 801031e:	bb02      	cbnz	r2, 8010362 <_dtoa_r+0xa7a>
 8010320:	4601      	mov	r1, r0
 8010322:	4650      	mov	r0, sl
 8010324:	f000 fc4e 	bl	8010bc4 <__mcmp>
 8010328:	4602      	mov	r2, r0
 801032a:	4629      	mov	r1, r5
 801032c:	4620      	mov	r0, r4
 801032e:	9209      	str	r2, [sp, #36]	; 0x24
 8010330:	f000 fa0c 	bl	801074c <_Bfree>
 8010334:	9b07      	ldr	r3, [sp, #28]
 8010336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010338:	9d04      	ldr	r5, [sp, #16]
 801033a:	ea43 0102 	orr.w	r1, r3, r2
 801033e:	9b06      	ldr	r3, [sp, #24]
 8010340:	4319      	orrs	r1, r3
 8010342:	d110      	bne.n	8010366 <_dtoa_r+0xa7e>
 8010344:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010348:	d029      	beq.n	801039e <_dtoa_r+0xab6>
 801034a:	9b05      	ldr	r3, [sp, #20]
 801034c:	2b00      	cmp	r3, #0
 801034e:	dd02      	ble.n	8010356 <_dtoa_r+0xa6e>
 8010350:	9b02      	ldr	r3, [sp, #8]
 8010352:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8010356:	9b01      	ldr	r3, [sp, #4]
 8010358:	f883 9000 	strb.w	r9, [r3]
 801035c:	e774      	b.n	8010248 <_dtoa_r+0x960>
 801035e:	4638      	mov	r0, r7
 8010360:	e7ba      	b.n	80102d8 <_dtoa_r+0x9f0>
 8010362:	2201      	movs	r2, #1
 8010364:	e7e1      	b.n	801032a <_dtoa_r+0xa42>
 8010366:	9b05      	ldr	r3, [sp, #20]
 8010368:	2b00      	cmp	r3, #0
 801036a:	db04      	blt.n	8010376 <_dtoa_r+0xa8e>
 801036c:	9907      	ldr	r1, [sp, #28]
 801036e:	430b      	orrs	r3, r1
 8010370:	9906      	ldr	r1, [sp, #24]
 8010372:	430b      	orrs	r3, r1
 8010374:	d120      	bne.n	80103b8 <_dtoa_r+0xad0>
 8010376:	2a00      	cmp	r2, #0
 8010378:	dded      	ble.n	8010356 <_dtoa_r+0xa6e>
 801037a:	4651      	mov	r1, sl
 801037c:	2201      	movs	r2, #1
 801037e:	4620      	mov	r0, r4
 8010380:	f000 fbb4 	bl	8010aec <__lshift>
 8010384:	4631      	mov	r1, r6
 8010386:	4682      	mov	sl, r0
 8010388:	f000 fc1c 	bl	8010bc4 <__mcmp>
 801038c:	2800      	cmp	r0, #0
 801038e:	dc03      	bgt.n	8010398 <_dtoa_r+0xab0>
 8010390:	d1e1      	bne.n	8010356 <_dtoa_r+0xa6e>
 8010392:	f019 0f01 	tst.w	r9, #1
 8010396:	d0de      	beq.n	8010356 <_dtoa_r+0xa6e>
 8010398:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801039c:	d1d8      	bne.n	8010350 <_dtoa_r+0xa68>
 801039e:	9a01      	ldr	r2, [sp, #4]
 80103a0:	2339      	movs	r3, #57	; 0x39
 80103a2:	7013      	strb	r3, [r2, #0]
 80103a4:	462b      	mov	r3, r5
 80103a6:	461d      	mov	r5, r3
 80103a8:	3b01      	subs	r3, #1
 80103aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80103ae:	2a39      	cmp	r2, #57	; 0x39
 80103b0:	d06c      	beq.n	801048c <_dtoa_r+0xba4>
 80103b2:	3201      	adds	r2, #1
 80103b4:	701a      	strb	r2, [r3, #0]
 80103b6:	e747      	b.n	8010248 <_dtoa_r+0x960>
 80103b8:	2a00      	cmp	r2, #0
 80103ba:	dd07      	ble.n	80103cc <_dtoa_r+0xae4>
 80103bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80103c0:	d0ed      	beq.n	801039e <_dtoa_r+0xab6>
 80103c2:	9a01      	ldr	r2, [sp, #4]
 80103c4:	f109 0301 	add.w	r3, r9, #1
 80103c8:	7013      	strb	r3, [r2, #0]
 80103ca:	e73d      	b.n	8010248 <_dtoa_r+0x960>
 80103cc:	9b04      	ldr	r3, [sp, #16]
 80103ce:	9a08      	ldr	r2, [sp, #32]
 80103d0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80103d4:	4293      	cmp	r3, r2
 80103d6:	d043      	beq.n	8010460 <_dtoa_r+0xb78>
 80103d8:	4651      	mov	r1, sl
 80103da:	2300      	movs	r3, #0
 80103dc:	220a      	movs	r2, #10
 80103de:	4620      	mov	r0, r4
 80103e0:	f000 f9d6 	bl	8010790 <__multadd>
 80103e4:	45b8      	cmp	r8, r7
 80103e6:	4682      	mov	sl, r0
 80103e8:	f04f 0300 	mov.w	r3, #0
 80103ec:	f04f 020a 	mov.w	r2, #10
 80103f0:	4641      	mov	r1, r8
 80103f2:	4620      	mov	r0, r4
 80103f4:	d107      	bne.n	8010406 <_dtoa_r+0xb1e>
 80103f6:	f000 f9cb 	bl	8010790 <__multadd>
 80103fa:	4680      	mov	r8, r0
 80103fc:	4607      	mov	r7, r0
 80103fe:	9b04      	ldr	r3, [sp, #16]
 8010400:	3301      	adds	r3, #1
 8010402:	9304      	str	r3, [sp, #16]
 8010404:	e775      	b.n	80102f2 <_dtoa_r+0xa0a>
 8010406:	f000 f9c3 	bl	8010790 <__multadd>
 801040a:	4639      	mov	r1, r7
 801040c:	4680      	mov	r8, r0
 801040e:	2300      	movs	r3, #0
 8010410:	220a      	movs	r2, #10
 8010412:	4620      	mov	r0, r4
 8010414:	f000 f9bc 	bl	8010790 <__multadd>
 8010418:	4607      	mov	r7, r0
 801041a:	e7f0      	b.n	80103fe <_dtoa_r+0xb16>
 801041c:	9b04      	ldr	r3, [sp, #16]
 801041e:	9301      	str	r3, [sp, #4]
 8010420:	9d00      	ldr	r5, [sp, #0]
 8010422:	4631      	mov	r1, r6
 8010424:	4650      	mov	r0, sl
 8010426:	f7ff f9d7 	bl	800f7d8 <quorem>
 801042a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801042e:	9b00      	ldr	r3, [sp, #0]
 8010430:	f805 9b01 	strb.w	r9, [r5], #1
 8010434:	1aea      	subs	r2, r5, r3
 8010436:	9b01      	ldr	r3, [sp, #4]
 8010438:	4293      	cmp	r3, r2
 801043a:	dd07      	ble.n	801044c <_dtoa_r+0xb64>
 801043c:	4651      	mov	r1, sl
 801043e:	2300      	movs	r3, #0
 8010440:	220a      	movs	r2, #10
 8010442:	4620      	mov	r0, r4
 8010444:	f000 f9a4 	bl	8010790 <__multadd>
 8010448:	4682      	mov	sl, r0
 801044a:	e7ea      	b.n	8010422 <_dtoa_r+0xb3a>
 801044c:	9b01      	ldr	r3, [sp, #4]
 801044e:	2b00      	cmp	r3, #0
 8010450:	bfc8      	it	gt
 8010452:	461d      	movgt	r5, r3
 8010454:	9b00      	ldr	r3, [sp, #0]
 8010456:	bfd8      	it	le
 8010458:	2501      	movle	r5, #1
 801045a:	441d      	add	r5, r3
 801045c:	f04f 0800 	mov.w	r8, #0
 8010460:	4651      	mov	r1, sl
 8010462:	2201      	movs	r2, #1
 8010464:	4620      	mov	r0, r4
 8010466:	f000 fb41 	bl	8010aec <__lshift>
 801046a:	4631      	mov	r1, r6
 801046c:	4682      	mov	sl, r0
 801046e:	f000 fba9 	bl	8010bc4 <__mcmp>
 8010472:	2800      	cmp	r0, #0
 8010474:	dc96      	bgt.n	80103a4 <_dtoa_r+0xabc>
 8010476:	d102      	bne.n	801047e <_dtoa_r+0xb96>
 8010478:	f019 0f01 	tst.w	r9, #1
 801047c:	d192      	bne.n	80103a4 <_dtoa_r+0xabc>
 801047e:	462b      	mov	r3, r5
 8010480:	461d      	mov	r5, r3
 8010482:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010486:	2a30      	cmp	r2, #48	; 0x30
 8010488:	d0fa      	beq.n	8010480 <_dtoa_r+0xb98>
 801048a:	e6dd      	b.n	8010248 <_dtoa_r+0x960>
 801048c:	9a00      	ldr	r2, [sp, #0]
 801048e:	429a      	cmp	r2, r3
 8010490:	d189      	bne.n	80103a6 <_dtoa_r+0xabe>
 8010492:	f10b 0b01 	add.w	fp, fp, #1
 8010496:	2331      	movs	r3, #49	; 0x31
 8010498:	e796      	b.n	80103c8 <_dtoa_r+0xae0>
 801049a:	4b0a      	ldr	r3, [pc, #40]	; (80104c4 <_dtoa_r+0xbdc>)
 801049c:	f7ff ba99 	b.w	800f9d2 <_dtoa_r+0xea>
 80104a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	f47f aa6d 	bne.w	800f982 <_dtoa_r+0x9a>
 80104a8:	4b07      	ldr	r3, [pc, #28]	; (80104c8 <_dtoa_r+0xbe0>)
 80104aa:	f7ff ba92 	b.w	800f9d2 <_dtoa_r+0xea>
 80104ae:	9b01      	ldr	r3, [sp, #4]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	dcb5      	bgt.n	8010420 <_dtoa_r+0xb38>
 80104b4:	9b07      	ldr	r3, [sp, #28]
 80104b6:	2b02      	cmp	r3, #2
 80104b8:	f73f aeb1 	bgt.w	801021e <_dtoa_r+0x936>
 80104bc:	e7b0      	b.n	8010420 <_dtoa_r+0xb38>
 80104be:	bf00      	nop
 80104c0:	08011eb4 	.word	0x08011eb4
 80104c4:	08011e14 	.word	0x08011e14
 80104c8:	08011e38 	.word	0x08011e38

080104cc <_free_r>:
 80104cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80104ce:	2900      	cmp	r1, #0
 80104d0:	d044      	beq.n	801055c <_free_r+0x90>
 80104d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80104d6:	9001      	str	r0, [sp, #4]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	f1a1 0404 	sub.w	r4, r1, #4
 80104de:	bfb8      	it	lt
 80104e0:	18e4      	addlt	r4, r4, r3
 80104e2:	f000 f8e7 	bl	80106b4 <__malloc_lock>
 80104e6:	4a1e      	ldr	r2, [pc, #120]	; (8010560 <_free_r+0x94>)
 80104e8:	9801      	ldr	r0, [sp, #4]
 80104ea:	6813      	ldr	r3, [r2, #0]
 80104ec:	b933      	cbnz	r3, 80104fc <_free_r+0x30>
 80104ee:	6063      	str	r3, [r4, #4]
 80104f0:	6014      	str	r4, [r2, #0]
 80104f2:	b003      	add	sp, #12
 80104f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80104f8:	f000 b8e2 	b.w	80106c0 <__malloc_unlock>
 80104fc:	42a3      	cmp	r3, r4
 80104fe:	d908      	bls.n	8010512 <_free_r+0x46>
 8010500:	6825      	ldr	r5, [r4, #0]
 8010502:	1961      	adds	r1, r4, r5
 8010504:	428b      	cmp	r3, r1
 8010506:	bf01      	itttt	eq
 8010508:	6819      	ldreq	r1, [r3, #0]
 801050a:	685b      	ldreq	r3, [r3, #4]
 801050c:	1949      	addeq	r1, r1, r5
 801050e:	6021      	streq	r1, [r4, #0]
 8010510:	e7ed      	b.n	80104ee <_free_r+0x22>
 8010512:	461a      	mov	r2, r3
 8010514:	685b      	ldr	r3, [r3, #4]
 8010516:	b10b      	cbz	r3, 801051c <_free_r+0x50>
 8010518:	42a3      	cmp	r3, r4
 801051a:	d9fa      	bls.n	8010512 <_free_r+0x46>
 801051c:	6811      	ldr	r1, [r2, #0]
 801051e:	1855      	adds	r5, r2, r1
 8010520:	42a5      	cmp	r5, r4
 8010522:	d10b      	bne.n	801053c <_free_r+0x70>
 8010524:	6824      	ldr	r4, [r4, #0]
 8010526:	4421      	add	r1, r4
 8010528:	1854      	adds	r4, r2, r1
 801052a:	42a3      	cmp	r3, r4
 801052c:	6011      	str	r1, [r2, #0]
 801052e:	d1e0      	bne.n	80104f2 <_free_r+0x26>
 8010530:	681c      	ldr	r4, [r3, #0]
 8010532:	685b      	ldr	r3, [r3, #4]
 8010534:	6053      	str	r3, [r2, #4]
 8010536:	440c      	add	r4, r1
 8010538:	6014      	str	r4, [r2, #0]
 801053a:	e7da      	b.n	80104f2 <_free_r+0x26>
 801053c:	d902      	bls.n	8010544 <_free_r+0x78>
 801053e:	230c      	movs	r3, #12
 8010540:	6003      	str	r3, [r0, #0]
 8010542:	e7d6      	b.n	80104f2 <_free_r+0x26>
 8010544:	6825      	ldr	r5, [r4, #0]
 8010546:	1961      	adds	r1, r4, r5
 8010548:	428b      	cmp	r3, r1
 801054a:	bf04      	itt	eq
 801054c:	6819      	ldreq	r1, [r3, #0]
 801054e:	685b      	ldreq	r3, [r3, #4]
 8010550:	6063      	str	r3, [r4, #4]
 8010552:	bf04      	itt	eq
 8010554:	1949      	addeq	r1, r1, r5
 8010556:	6021      	streq	r1, [r4, #0]
 8010558:	6054      	str	r4, [r2, #4]
 801055a:	e7ca      	b.n	80104f2 <_free_r+0x26>
 801055c:	b003      	add	sp, #12
 801055e:	bd30      	pop	{r4, r5, pc}
 8010560:	20005980 	.word	0x20005980

08010564 <malloc>:
 8010564:	4b02      	ldr	r3, [pc, #8]	; (8010570 <malloc+0xc>)
 8010566:	4601      	mov	r1, r0
 8010568:	6818      	ldr	r0, [r3, #0]
 801056a:	f000 b823 	b.w	80105b4 <_malloc_r>
 801056e:	bf00      	nop
 8010570:	200001f0 	.word	0x200001f0

08010574 <sbrk_aligned>:
 8010574:	b570      	push	{r4, r5, r6, lr}
 8010576:	4e0e      	ldr	r6, [pc, #56]	; (80105b0 <sbrk_aligned+0x3c>)
 8010578:	460c      	mov	r4, r1
 801057a:	6831      	ldr	r1, [r6, #0]
 801057c:	4605      	mov	r5, r0
 801057e:	b911      	cbnz	r1, 8010586 <sbrk_aligned+0x12>
 8010580:	f000 fe96 	bl	80112b0 <_sbrk_r>
 8010584:	6030      	str	r0, [r6, #0]
 8010586:	4621      	mov	r1, r4
 8010588:	4628      	mov	r0, r5
 801058a:	f000 fe91 	bl	80112b0 <_sbrk_r>
 801058e:	1c43      	adds	r3, r0, #1
 8010590:	d00a      	beq.n	80105a8 <sbrk_aligned+0x34>
 8010592:	1cc4      	adds	r4, r0, #3
 8010594:	f024 0403 	bic.w	r4, r4, #3
 8010598:	42a0      	cmp	r0, r4
 801059a:	d007      	beq.n	80105ac <sbrk_aligned+0x38>
 801059c:	1a21      	subs	r1, r4, r0
 801059e:	4628      	mov	r0, r5
 80105a0:	f000 fe86 	bl	80112b0 <_sbrk_r>
 80105a4:	3001      	adds	r0, #1
 80105a6:	d101      	bne.n	80105ac <sbrk_aligned+0x38>
 80105a8:	f04f 34ff 	mov.w	r4, #4294967295
 80105ac:	4620      	mov	r0, r4
 80105ae:	bd70      	pop	{r4, r5, r6, pc}
 80105b0:	20005984 	.word	0x20005984

080105b4 <_malloc_r>:
 80105b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105b8:	1ccd      	adds	r5, r1, #3
 80105ba:	f025 0503 	bic.w	r5, r5, #3
 80105be:	3508      	adds	r5, #8
 80105c0:	2d0c      	cmp	r5, #12
 80105c2:	bf38      	it	cc
 80105c4:	250c      	movcc	r5, #12
 80105c6:	2d00      	cmp	r5, #0
 80105c8:	4607      	mov	r7, r0
 80105ca:	db01      	blt.n	80105d0 <_malloc_r+0x1c>
 80105cc:	42a9      	cmp	r1, r5
 80105ce:	d905      	bls.n	80105dc <_malloc_r+0x28>
 80105d0:	230c      	movs	r3, #12
 80105d2:	603b      	str	r3, [r7, #0]
 80105d4:	2600      	movs	r6, #0
 80105d6:	4630      	mov	r0, r6
 80105d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80106b0 <_malloc_r+0xfc>
 80105e0:	f000 f868 	bl	80106b4 <__malloc_lock>
 80105e4:	f8d8 3000 	ldr.w	r3, [r8]
 80105e8:	461c      	mov	r4, r3
 80105ea:	bb5c      	cbnz	r4, 8010644 <_malloc_r+0x90>
 80105ec:	4629      	mov	r1, r5
 80105ee:	4638      	mov	r0, r7
 80105f0:	f7ff ffc0 	bl	8010574 <sbrk_aligned>
 80105f4:	1c43      	adds	r3, r0, #1
 80105f6:	4604      	mov	r4, r0
 80105f8:	d155      	bne.n	80106a6 <_malloc_r+0xf2>
 80105fa:	f8d8 4000 	ldr.w	r4, [r8]
 80105fe:	4626      	mov	r6, r4
 8010600:	2e00      	cmp	r6, #0
 8010602:	d145      	bne.n	8010690 <_malloc_r+0xdc>
 8010604:	2c00      	cmp	r4, #0
 8010606:	d048      	beq.n	801069a <_malloc_r+0xe6>
 8010608:	6823      	ldr	r3, [r4, #0]
 801060a:	4631      	mov	r1, r6
 801060c:	4638      	mov	r0, r7
 801060e:	eb04 0903 	add.w	r9, r4, r3
 8010612:	f000 fe4d 	bl	80112b0 <_sbrk_r>
 8010616:	4581      	cmp	r9, r0
 8010618:	d13f      	bne.n	801069a <_malloc_r+0xe6>
 801061a:	6821      	ldr	r1, [r4, #0]
 801061c:	1a6d      	subs	r5, r5, r1
 801061e:	4629      	mov	r1, r5
 8010620:	4638      	mov	r0, r7
 8010622:	f7ff ffa7 	bl	8010574 <sbrk_aligned>
 8010626:	3001      	adds	r0, #1
 8010628:	d037      	beq.n	801069a <_malloc_r+0xe6>
 801062a:	6823      	ldr	r3, [r4, #0]
 801062c:	442b      	add	r3, r5
 801062e:	6023      	str	r3, [r4, #0]
 8010630:	f8d8 3000 	ldr.w	r3, [r8]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d038      	beq.n	80106aa <_malloc_r+0xf6>
 8010638:	685a      	ldr	r2, [r3, #4]
 801063a:	42a2      	cmp	r2, r4
 801063c:	d12b      	bne.n	8010696 <_malloc_r+0xe2>
 801063e:	2200      	movs	r2, #0
 8010640:	605a      	str	r2, [r3, #4]
 8010642:	e00f      	b.n	8010664 <_malloc_r+0xb0>
 8010644:	6822      	ldr	r2, [r4, #0]
 8010646:	1b52      	subs	r2, r2, r5
 8010648:	d41f      	bmi.n	801068a <_malloc_r+0xd6>
 801064a:	2a0b      	cmp	r2, #11
 801064c:	d917      	bls.n	801067e <_malloc_r+0xca>
 801064e:	1961      	adds	r1, r4, r5
 8010650:	42a3      	cmp	r3, r4
 8010652:	6025      	str	r5, [r4, #0]
 8010654:	bf18      	it	ne
 8010656:	6059      	strne	r1, [r3, #4]
 8010658:	6863      	ldr	r3, [r4, #4]
 801065a:	bf08      	it	eq
 801065c:	f8c8 1000 	streq.w	r1, [r8]
 8010660:	5162      	str	r2, [r4, r5]
 8010662:	604b      	str	r3, [r1, #4]
 8010664:	4638      	mov	r0, r7
 8010666:	f104 060b 	add.w	r6, r4, #11
 801066a:	f000 f829 	bl	80106c0 <__malloc_unlock>
 801066e:	f026 0607 	bic.w	r6, r6, #7
 8010672:	1d23      	adds	r3, r4, #4
 8010674:	1af2      	subs	r2, r6, r3
 8010676:	d0ae      	beq.n	80105d6 <_malloc_r+0x22>
 8010678:	1b9b      	subs	r3, r3, r6
 801067a:	50a3      	str	r3, [r4, r2]
 801067c:	e7ab      	b.n	80105d6 <_malloc_r+0x22>
 801067e:	42a3      	cmp	r3, r4
 8010680:	6862      	ldr	r2, [r4, #4]
 8010682:	d1dd      	bne.n	8010640 <_malloc_r+0x8c>
 8010684:	f8c8 2000 	str.w	r2, [r8]
 8010688:	e7ec      	b.n	8010664 <_malloc_r+0xb0>
 801068a:	4623      	mov	r3, r4
 801068c:	6864      	ldr	r4, [r4, #4]
 801068e:	e7ac      	b.n	80105ea <_malloc_r+0x36>
 8010690:	4634      	mov	r4, r6
 8010692:	6876      	ldr	r6, [r6, #4]
 8010694:	e7b4      	b.n	8010600 <_malloc_r+0x4c>
 8010696:	4613      	mov	r3, r2
 8010698:	e7cc      	b.n	8010634 <_malloc_r+0x80>
 801069a:	230c      	movs	r3, #12
 801069c:	603b      	str	r3, [r7, #0]
 801069e:	4638      	mov	r0, r7
 80106a0:	f000 f80e 	bl	80106c0 <__malloc_unlock>
 80106a4:	e797      	b.n	80105d6 <_malloc_r+0x22>
 80106a6:	6025      	str	r5, [r4, #0]
 80106a8:	e7dc      	b.n	8010664 <_malloc_r+0xb0>
 80106aa:	605b      	str	r3, [r3, #4]
 80106ac:	deff      	udf	#255	; 0xff
 80106ae:	bf00      	nop
 80106b0:	20005980 	.word	0x20005980

080106b4 <__malloc_lock>:
 80106b4:	4801      	ldr	r0, [pc, #4]	; (80106bc <__malloc_lock+0x8>)
 80106b6:	f7ff b87f 	b.w	800f7b8 <__retarget_lock_acquire_recursive>
 80106ba:	bf00      	nop
 80106bc:	2000597c 	.word	0x2000597c

080106c0 <__malloc_unlock>:
 80106c0:	4801      	ldr	r0, [pc, #4]	; (80106c8 <__malloc_unlock+0x8>)
 80106c2:	f7ff b87a 	b.w	800f7ba <__retarget_lock_release_recursive>
 80106c6:	bf00      	nop
 80106c8:	2000597c 	.word	0x2000597c

080106cc <_Balloc>:
 80106cc:	b570      	push	{r4, r5, r6, lr}
 80106ce:	69c6      	ldr	r6, [r0, #28]
 80106d0:	4604      	mov	r4, r0
 80106d2:	460d      	mov	r5, r1
 80106d4:	b976      	cbnz	r6, 80106f4 <_Balloc+0x28>
 80106d6:	2010      	movs	r0, #16
 80106d8:	f7ff ff44 	bl	8010564 <malloc>
 80106dc:	4602      	mov	r2, r0
 80106de:	61e0      	str	r0, [r4, #28]
 80106e0:	b920      	cbnz	r0, 80106ec <_Balloc+0x20>
 80106e2:	4b18      	ldr	r3, [pc, #96]	; (8010744 <_Balloc+0x78>)
 80106e4:	4818      	ldr	r0, [pc, #96]	; (8010748 <_Balloc+0x7c>)
 80106e6:	216b      	movs	r1, #107	; 0x6b
 80106e8:	f000 fdf2 	bl	80112d0 <__assert_func>
 80106ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80106f0:	6006      	str	r6, [r0, #0]
 80106f2:	60c6      	str	r6, [r0, #12]
 80106f4:	69e6      	ldr	r6, [r4, #28]
 80106f6:	68f3      	ldr	r3, [r6, #12]
 80106f8:	b183      	cbz	r3, 801071c <_Balloc+0x50>
 80106fa:	69e3      	ldr	r3, [r4, #28]
 80106fc:	68db      	ldr	r3, [r3, #12]
 80106fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010702:	b9b8      	cbnz	r0, 8010734 <_Balloc+0x68>
 8010704:	2101      	movs	r1, #1
 8010706:	fa01 f605 	lsl.w	r6, r1, r5
 801070a:	1d72      	adds	r2, r6, #5
 801070c:	0092      	lsls	r2, r2, #2
 801070e:	4620      	mov	r0, r4
 8010710:	f000 fdfc 	bl	801130c <_calloc_r>
 8010714:	b160      	cbz	r0, 8010730 <_Balloc+0x64>
 8010716:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801071a:	e00e      	b.n	801073a <_Balloc+0x6e>
 801071c:	2221      	movs	r2, #33	; 0x21
 801071e:	2104      	movs	r1, #4
 8010720:	4620      	mov	r0, r4
 8010722:	f000 fdf3 	bl	801130c <_calloc_r>
 8010726:	69e3      	ldr	r3, [r4, #28]
 8010728:	60f0      	str	r0, [r6, #12]
 801072a:	68db      	ldr	r3, [r3, #12]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d1e4      	bne.n	80106fa <_Balloc+0x2e>
 8010730:	2000      	movs	r0, #0
 8010732:	bd70      	pop	{r4, r5, r6, pc}
 8010734:	6802      	ldr	r2, [r0, #0]
 8010736:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801073a:	2300      	movs	r3, #0
 801073c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010740:	e7f7      	b.n	8010732 <_Balloc+0x66>
 8010742:	bf00      	nop
 8010744:	08011e45 	.word	0x08011e45
 8010748:	08011ec5 	.word	0x08011ec5

0801074c <_Bfree>:
 801074c:	b570      	push	{r4, r5, r6, lr}
 801074e:	69c6      	ldr	r6, [r0, #28]
 8010750:	4605      	mov	r5, r0
 8010752:	460c      	mov	r4, r1
 8010754:	b976      	cbnz	r6, 8010774 <_Bfree+0x28>
 8010756:	2010      	movs	r0, #16
 8010758:	f7ff ff04 	bl	8010564 <malloc>
 801075c:	4602      	mov	r2, r0
 801075e:	61e8      	str	r0, [r5, #28]
 8010760:	b920      	cbnz	r0, 801076c <_Bfree+0x20>
 8010762:	4b09      	ldr	r3, [pc, #36]	; (8010788 <_Bfree+0x3c>)
 8010764:	4809      	ldr	r0, [pc, #36]	; (801078c <_Bfree+0x40>)
 8010766:	218f      	movs	r1, #143	; 0x8f
 8010768:	f000 fdb2 	bl	80112d0 <__assert_func>
 801076c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010770:	6006      	str	r6, [r0, #0]
 8010772:	60c6      	str	r6, [r0, #12]
 8010774:	b13c      	cbz	r4, 8010786 <_Bfree+0x3a>
 8010776:	69eb      	ldr	r3, [r5, #28]
 8010778:	6862      	ldr	r2, [r4, #4]
 801077a:	68db      	ldr	r3, [r3, #12]
 801077c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010780:	6021      	str	r1, [r4, #0]
 8010782:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010786:	bd70      	pop	{r4, r5, r6, pc}
 8010788:	08011e45 	.word	0x08011e45
 801078c:	08011ec5 	.word	0x08011ec5

08010790 <__multadd>:
 8010790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010794:	690d      	ldr	r5, [r1, #16]
 8010796:	4607      	mov	r7, r0
 8010798:	460c      	mov	r4, r1
 801079a:	461e      	mov	r6, r3
 801079c:	f101 0c14 	add.w	ip, r1, #20
 80107a0:	2000      	movs	r0, #0
 80107a2:	f8dc 3000 	ldr.w	r3, [ip]
 80107a6:	b299      	uxth	r1, r3
 80107a8:	fb02 6101 	mla	r1, r2, r1, r6
 80107ac:	0c1e      	lsrs	r6, r3, #16
 80107ae:	0c0b      	lsrs	r3, r1, #16
 80107b0:	fb02 3306 	mla	r3, r2, r6, r3
 80107b4:	b289      	uxth	r1, r1
 80107b6:	3001      	adds	r0, #1
 80107b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80107bc:	4285      	cmp	r5, r0
 80107be:	f84c 1b04 	str.w	r1, [ip], #4
 80107c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80107c6:	dcec      	bgt.n	80107a2 <__multadd+0x12>
 80107c8:	b30e      	cbz	r6, 801080e <__multadd+0x7e>
 80107ca:	68a3      	ldr	r3, [r4, #8]
 80107cc:	42ab      	cmp	r3, r5
 80107ce:	dc19      	bgt.n	8010804 <__multadd+0x74>
 80107d0:	6861      	ldr	r1, [r4, #4]
 80107d2:	4638      	mov	r0, r7
 80107d4:	3101      	adds	r1, #1
 80107d6:	f7ff ff79 	bl	80106cc <_Balloc>
 80107da:	4680      	mov	r8, r0
 80107dc:	b928      	cbnz	r0, 80107ea <__multadd+0x5a>
 80107de:	4602      	mov	r2, r0
 80107e0:	4b0c      	ldr	r3, [pc, #48]	; (8010814 <__multadd+0x84>)
 80107e2:	480d      	ldr	r0, [pc, #52]	; (8010818 <__multadd+0x88>)
 80107e4:	21ba      	movs	r1, #186	; 0xba
 80107e6:	f000 fd73 	bl	80112d0 <__assert_func>
 80107ea:	6922      	ldr	r2, [r4, #16]
 80107ec:	3202      	adds	r2, #2
 80107ee:	f104 010c 	add.w	r1, r4, #12
 80107f2:	0092      	lsls	r2, r2, #2
 80107f4:	300c      	adds	r0, #12
 80107f6:	f7fe ffe1 	bl	800f7bc <memcpy>
 80107fa:	4621      	mov	r1, r4
 80107fc:	4638      	mov	r0, r7
 80107fe:	f7ff ffa5 	bl	801074c <_Bfree>
 8010802:	4644      	mov	r4, r8
 8010804:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010808:	3501      	adds	r5, #1
 801080a:	615e      	str	r6, [r3, #20]
 801080c:	6125      	str	r5, [r4, #16]
 801080e:	4620      	mov	r0, r4
 8010810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010814:	08011eb4 	.word	0x08011eb4
 8010818:	08011ec5 	.word	0x08011ec5

0801081c <__hi0bits>:
 801081c:	0c03      	lsrs	r3, r0, #16
 801081e:	041b      	lsls	r3, r3, #16
 8010820:	b9d3      	cbnz	r3, 8010858 <__hi0bits+0x3c>
 8010822:	0400      	lsls	r0, r0, #16
 8010824:	2310      	movs	r3, #16
 8010826:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801082a:	bf04      	itt	eq
 801082c:	0200      	lsleq	r0, r0, #8
 801082e:	3308      	addeq	r3, #8
 8010830:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010834:	bf04      	itt	eq
 8010836:	0100      	lsleq	r0, r0, #4
 8010838:	3304      	addeq	r3, #4
 801083a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801083e:	bf04      	itt	eq
 8010840:	0080      	lsleq	r0, r0, #2
 8010842:	3302      	addeq	r3, #2
 8010844:	2800      	cmp	r0, #0
 8010846:	db05      	blt.n	8010854 <__hi0bits+0x38>
 8010848:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801084c:	f103 0301 	add.w	r3, r3, #1
 8010850:	bf08      	it	eq
 8010852:	2320      	moveq	r3, #32
 8010854:	4618      	mov	r0, r3
 8010856:	4770      	bx	lr
 8010858:	2300      	movs	r3, #0
 801085a:	e7e4      	b.n	8010826 <__hi0bits+0xa>

0801085c <__lo0bits>:
 801085c:	6803      	ldr	r3, [r0, #0]
 801085e:	f013 0207 	ands.w	r2, r3, #7
 8010862:	d00c      	beq.n	801087e <__lo0bits+0x22>
 8010864:	07d9      	lsls	r1, r3, #31
 8010866:	d422      	bmi.n	80108ae <__lo0bits+0x52>
 8010868:	079a      	lsls	r2, r3, #30
 801086a:	bf49      	itett	mi
 801086c:	085b      	lsrmi	r3, r3, #1
 801086e:	089b      	lsrpl	r3, r3, #2
 8010870:	6003      	strmi	r3, [r0, #0]
 8010872:	2201      	movmi	r2, #1
 8010874:	bf5c      	itt	pl
 8010876:	6003      	strpl	r3, [r0, #0]
 8010878:	2202      	movpl	r2, #2
 801087a:	4610      	mov	r0, r2
 801087c:	4770      	bx	lr
 801087e:	b299      	uxth	r1, r3
 8010880:	b909      	cbnz	r1, 8010886 <__lo0bits+0x2a>
 8010882:	0c1b      	lsrs	r3, r3, #16
 8010884:	2210      	movs	r2, #16
 8010886:	b2d9      	uxtb	r1, r3
 8010888:	b909      	cbnz	r1, 801088e <__lo0bits+0x32>
 801088a:	3208      	adds	r2, #8
 801088c:	0a1b      	lsrs	r3, r3, #8
 801088e:	0719      	lsls	r1, r3, #28
 8010890:	bf04      	itt	eq
 8010892:	091b      	lsreq	r3, r3, #4
 8010894:	3204      	addeq	r2, #4
 8010896:	0799      	lsls	r1, r3, #30
 8010898:	bf04      	itt	eq
 801089a:	089b      	lsreq	r3, r3, #2
 801089c:	3202      	addeq	r2, #2
 801089e:	07d9      	lsls	r1, r3, #31
 80108a0:	d403      	bmi.n	80108aa <__lo0bits+0x4e>
 80108a2:	085b      	lsrs	r3, r3, #1
 80108a4:	f102 0201 	add.w	r2, r2, #1
 80108a8:	d003      	beq.n	80108b2 <__lo0bits+0x56>
 80108aa:	6003      	str	r3, [r0, #0]
 80108ac:	e7e5      	b.n	801087a <__lo0bits+0x1e>
 80108ae:	2200      	movs	r2, #0
 80108b0:	e7e3      	b.n	801087a <__lo0bits+0x1e>
 80108b2:	2220      	movs	r2, #32
 80108b4:	e7e1      	b.n	801087a <__lo0bits+0x1e>
	...

080108b8 <__i2b>:
 80108b8:	b510      	push	{r4, lr}
 80108ba:	460c      	mov	r4, r1
 80108bc:	2101      	movs	r1, #1
 80108be:	f7ff ff05 	bl	80106cc <_Balloc>
 80108c2:	4602      	mov	r2, r0
 80108c4:	b928      	cbnz	r0, 80108d2 <__i2b+0x1a>
 80108c6:	4b05      	ldr	r3, [pc, #20]	; (80108dc <__i2b+0x24>)
 80108c8:	4805      	ldr	r0, [pc, #20]	; (80108e0 <__i2b+0x28>)
 80108ca:	f240 1145 	movw	r1, #325	; 0x145
 80108ce:	f000 fcff 	bl	80112d0 <__assert_func>
 80108d2:	2301      	movs	r3, #1
 80108d4:	6144      	str	r4, [r0, #20]
 80108d6:	6103      	str	r3, [r0, #16]
 80108d8:	bd10      	pop	{r4, pc}
 80108da:	bf00      	nop
 80108dc:	08011eb4 	.word	0x08011eb4
 80108e0:	08011ec5 	.word	0x08011ec5

080108e4 <__multiply>:
 80108e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108e8:	4691      	mov	r9, r2
 80108ea:	690a      	ldr	r2, [r1, #16]
 80108ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80108f0:	429a      	cmp	r2, r3
 80108f2:	bfb8      	it	lt
 80108f4:	460b      	movlt	r3, r1
 80108f6:	460c      	mov	r4, r1
 80108f8:	bfbc      	itt	lt
 80108fa:	464c      	movlt	r4, r9
 80108fc:	4699      	movlt	r9, r3
 80108fe:	6927      	ldr	r7, [r4, #16]
 8010900:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010904:	68a3      	ldr	r3, [r4, #8]
 8010906:	6861      	ldr	r1, [r4, #4]
 8010908:	eb07 060a 	add.w	r6, r7, sl
 801090c:	42b3      	cmp	r3, r6
 801090e:	b085      	sub	sp, #20
 8010910:	bfb8      	it	lt
 8010912:	3101      	addlt	r1, #1
 8010914:	f7ff feda 	bl	80106cc <_Balloc>
 8010918:	b930      	cbnz	r0, 8010928 <__multiply+0x44>
 801091a:	4602      	mov	r2, r0
 801091c:	4b44      	ldr	r3, [pc, #272]	; (8010a30 <__multiply+0x14c>)
 801091e:	4845      	ldr	r0, [pc, #276]	; (8010a34 <__multiply+0x150>)
 8010920:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010924:	f000 fcd4 	bl	80112d0 <__assert_func>
 8010928:	f100 0514 	add.w	r5, r0, #20
 801092c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010930:	462b      	mov	r3, r5
 8010932:	2200      	movs	r2, #0
 8010934:	4543      	cmp	r3, r8
 8010936:	d321      	bcc.n	801097c <__multiply+0x98>
 8010938:	f104 0314 	add.w	r3, r4, #20
 801093c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010940:	f109 0314 	add.w	r3, r9, #20
 8010944:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010948:	9202      	str	r2, [sp, #8]
 801094a:	1b3a      	subs	r2, r7, r4
 801094c:	3a15      	subs	r2, #21
 801094e:	f022 0203 	bic.w	r2, r2, #3
 8010952:	3204      	adds	r2, #4
 8010954:	f104 0115 	add.w	r1, r4, #21
 8010958:	428f      	cmp	r7, r1
 801095a:	bf38      	it	cc
 801095c:	2204      	movcc	r2, #4
 801095e:	9201      	str	r2, [sp, #4]
 8010960:	9a02      	ldr	r2, [sp, #8]
 8010962:	9303      	str	r3, [sp, #12]
 8010964:	429a      	cmp	r2, r3
 8010966:	d80c      	bhi.n	8010982 <__multiply+0x9e>
 8010968:	2e00      	cmp	r6, #0
 801096a:	dd03      	ble.n	8010974 <__multiply+0x90>
 801096c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010970:	2b00      	cmp	r3, #0
 8010972:	d05b      	beq.n	8010a2c <__multiply+0x148>
 8010974:	6106      	str	r6, [r0, #16]
 8010976:	b005      	add	sp, #20
 8010978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801097c:	f843 2b04 	str.w	r2, [r3], #4
 8010980:	e7d8      	b.n	8010934 <__multiply+0x50>
 8010982:	f8b3 a000 	ldrh.w	sl, [r3]
 8010986:	f1ba 0f00 	cmp.w	sl, #0
 801098a:	d024      	beq.n	80109d6 <__multiply+0xf2>
 801098c:	f104 0e14 	add.w	lr, r4, #20
 8010990:	46a9      	mov	r9, r5
 8010992:	f04f 0c00 	mov.w	ip, #0
 8010996:	f85e 2b04 	ldr.w	r2, [lr], #4
 801099a:	f8d9 1000 	ldr.w	r1, [r9]
 801099e:	fa1f fb82 	uxth.w	fp, r2
 80109a2:	b289      	uxth	r1, r1
 80109a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80109a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80109ac:	f8d9 2000 	ldr.w	r2, [r9]
 80109b0:	4461      	add	r1, ip
 80109b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80109b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80109ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80109be:	b289      	uxth	r1, r1
 80109c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80109c4:	4577      	cmp	r7, lr
 80109c6:	f849 1b04 	str.w	r1, [r9], #4
 80109ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80109ce:	d8e2      	bhi.n	8010996 <__multiply+0xb2>
 80109d0:	9a01      	ldr	r2, [sp, #4]
 80109d2:	f845 c002 	str.w	ip, [r5, r2]
 80109d6:	9a03      	ldr	r2, [sp, #12]
 80109d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80109dc:	3304      	adds	r3, #4
 80109de:	f1b9 0f00 	cmp.w	r9, #0
 80109e2:	d021      	beq.n	8010a28 <__multiply+0x144>
 80109e4:	6829      	ldr	r1, [r5, #0]
 80109e6:	f104 0c14 	add.w	ip, r4, #20
 80109ea:	46ae      	mov	lr, r5
 80109ec:	f04f 0a00 	mov.w	sl, #0
 80109f0:	f8bc b000 	ldrh.w	fp, [ip]
 80109f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80109f8:	fb09 220b 	mla	r2, r9, fp, r2
 80109fc:	4452      	add	r2, sl
 80109fe:	b289      	uxth	r1, r1
 8010a00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010a04:	f84e 1b04 	str.w	r1, [lr], #4
 8010a08:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010a0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010a10:	f8be 1000 	ldrh.w	r1, [lr]
 8010a14:	fb09 110a 	mla	r1, r9, sl, r1
 8010a18:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010a1c:	4567      	cmp	r7, ip
 8010a1e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010a22:	d8e5      	bhi.n	80109f0 <__multiply+0x10c>
 8010a24:	9a01      	ldr	r2, [sp, #4]
 8010a26:	50a9      	str	r1, [r5, r2]
 8010a28:	3504      	adds	r5, #4
 8010a2a:	e799      	b.n	8010960 <__multiply+0x7c>
 8010a2c:	3e01      	subs	r6, #1
 8010a2e:	e79b      	b.n	8010968 <__multiply+0x84>
 8010a30:	08011eb4 	.word	0x08011eb4
 8010a34:	08011ec5 	.word	0x08011ec5

08010a38 <__pow5mult>:
 8010a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a3c:	4615      	mov	r5, r2
 8010a3e:	f012 0203 	ands.w	r2, r2, #3
 8010a42:	4606      	mov	r6, r0
 8010a44:	460f      	mov	r7, r1
 8010a46:	d007      	beq.n	8010a58 <__pow5mult+0x20>
 8010a48:	4c25      	ldr	r4, [pc, #148]	; (8010ae0 <__pow5mult+0xa8>)
 8010a4a:	3a01      	subs	r2, #1
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010a52:	f7ff fe9d 	bl	8010790 <__multadd>
 8010a56:	4607      	mov	r7, r0
 8010a58:	10ad      	asrs	r5, r5, #2
 8010a5a:	d03d      	beq.n	8010ad8 <__pow5mult+0xa0>
 8010a5c:	69f4      	ldr	r4, [r6, #28]
 8010a5e:	b97c      	cbnz	r4, 8010a80 <__pow5mult+0x48>
 8010a60:	2010      	movs	r0, #16
 8010a62:	f7ff fd7f 	bl	8010564 <malloc>
 8010a66:	4602      	mov	r2, r0
 8010a68:	61f0      	str	r0, [r6, #28]
 8010a6a:	b928      	cbnz	r0, 8010a78 <__pow5mult+0x40>
 8010a6c:	4b1d      	ldr	r3, [pc, #116]	; (8010ae4 <__pow5mult+0xac>)
 8010a6e:	481e      	ldr	r0, [pc, #120]	; (8010ae8 <__pow5mult+0xb0>)
 8010a70:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010a74:	f000 fc2c 	bl	80112d0 <__assert_func>
 8010a78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010a7c:	6004      	str	r4, [r0, #0]
 8010a7e:	60c4      	str	r4, [r0, #12]
 8010a80:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010a84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010a88:	b94c      	cbnz	r4, 8010a9e <__pow5mult+0x66>
 8010a8a:	f240 2171 	movw	r1, #625	; 0x271
 8010a8e:	4630      	mov	r0, r6
 8010a90:	f7ff ff12 	bl	80108b8 <__i2b>
 8010a94:	2300      	movs	r3, #0
 8010a96:	f8c8 0008 	str.w	r0, [r8, #8]
 8010a9a:	4604      	mov	r4, r0
 8010a9c:	6003      	str	r3, [r0, #0]
 8010a9e:	f04f 0900 	mov.w	r9, #0
 8010aa2:	07eb      	lsls	r3, r5, #31
 8010aa4:	d50a      	bpl.n	8010abc <__pow5mult+0x84>
 8010aa6:	4639      	mov	r1, r7
 8010aa8:	4622      	mov	r2, r4
 8010aaa:	4630      	mov	r0, r6
 8010aac:	f7ff ff1a 	bl	80108e4 <__multiply>
 8010ab0:	4639      	mov	r1, r7
 8010ab2:	4680      	mov	r8, r0
 8010ab4:	4630      	mov	r0, r6
 8010ab6:	f7ff fe49 	bl	801074c <_Bfree>
 8010aba:	4647      	mov	r7, r8
 8010abc:	106d      	asrs	r5, r5, #1
 8010abe:	d00b      	beq.n	8010ad8 <__pow5mult+0xa0>
 8010ac0:	6820      	ldr	r0, [r4, #0]
 8010ac2:	b938      	cbnz	r0, 8010ad4 <__pow5mult+0x9c>
 8010ac4:	4622      	mov	r2, r4
 8010ac6:	4621      	mov	r1, r4
 8010ac8:	4630      	mov	r0, r6
 8010aca:	f7ff ff0b 	bl	80108e4 <__multiply>
 8010ace:	6020      	str	r0, [r4, #0]
 8010ad0:	f8c0 9000 	str.w	r9, [r0]
 8010ad4:	4604      	mov	r4, r0
 8010ad6:	e7e4      	b.n	8010aa2 <__pow5mult+0x6a>
 8010ad8:	4638      	mov	r0, r7
 8010ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ade:	bf00      	nop
 8010ae0:	08012010 	.word	0x08012010
 8010ae4:	08011e45 	.word	0x08011e45
 8010ae8:	08011ec5 	.word	0x08011ec5

08010aec <__lshift>:
 8010aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010af0:	460c      	mov	r4, r1
 8010af2:	6849      	ldr	r1, [r1, #4]
 8010af4:	6923      	ldr	r3, [r4, #16]
 8010af6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010afa:	68a3      	ldr	r3, [r4, #8]
 8010afc:	4607      	mov	r7, r0
 8010afe:	4691      	mov	r9, r2
 8010b00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010b04:	f108 0601 	add.w	r6, r8, #1
 8010b08:	42b3      	cmp	r3, r6
 8010b0a:	db0b      	blt.n	8010b24 <__lshift+0x38>
 8010b0c:	4638      	mov	r0, r7
 8010b0e:	f7ff fddd 	bl	80106cc <_Balloc>
 8010b12:	4605      	mov	r5, r0
 8010b14:	b948      	cbnz	r0, 8010b2a <__lshift+0x3e>
 8010b16:	4602      	mov	r2, r0
 8010b18:	4b28      	ldr	r3, [pc, #160]	; (8010bbc <__lshift+0xd0>)
 8010b1a:	4829      	ldr	r0, [pc, #164]	; (8010bc0 <__lshift+0xd4>)
 8010b1c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010b20:	f000 fbd6 	bl	80112d0 <__assert_func>
 8010b24:	3101      	adds	r1, #1
 8010b26:	005b      	lsls	r3, r3, #1
 8010b28:	e7ee      	b.n	8010b08 <__lshift+0x1c>
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	f100 0114 	add.w	r1, r0, #20
 8010b30:	f100 0210 	add.w	r2, r0, #16
 8010b34:	4618      	mov	r0, r3
 8010b36:	4553      	cmp	r3, sl
 8010b38:	db33      	blt.n	8010ba2 <__lshift+0xb6>
 8010b3a:	6920      	ldr	r0, [r4, #16]
 8010b3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010b40:	f104 0314 	add.w	r3, r4, #20
 8010b44:	f019 091f 	ands.w	r9, r9, #31
 8010b48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010b4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010b50:	d02b      	beq.n	8010baa <__lshift+0xbe>
 8010b52:	f1c9 0e20 	rsb	lr, r9, #32
 8010b56:	468a      	mov	sl, r1
 8010b58:	2200      	movs	r2, #0
 8010b5a:	6818      	ldr	r0, [r3, #0]
 8010b5c:	fa00 f009 	lsl.w	r0, r0, r9
 8010b60:	4310      	orrs	r0, r2
 8010b62:	f84a 0b04 	str.w	r0, [sl], #4
 8010b66:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b6a:	459c      	cmp	ip, r3
 8010b6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010b70:	d8f3      	bhi.n	8010b5a <__lshift+0x6e>
 8010b72:	ebac 0304 	sub.w	r3, ip, r4
 8010b76:	3b15      	subs	r3, #21
 8010b78:	f023 0303 	bic.w	r3, r3, #3
 8010b7c:	3304      	adds	r3, #4
 8010b7e:	f104 0015 	add.w	r0, r4, #21
 8010b82:	4584      	cmp	ip, r0
 8010b84:	bf38      	it	cc
 8010b86:	2304      	movcc	r3, #4
 8010b88:	50ca      	str	r2, [r1, r3]
 8010b8a:	b10a      	cbz	r2, 8010b90 <__lshift+0xa4>
 8010b8c:	f108 0602 	add.w	r6, r8, #2
 8010b90:	3e01      	subs	r6, #1
 8010b92:	4638      	mov	r0, r7
 8010b94:	612e      	str	r6, [r5, #16]
 8010b96:	4621      	mov	r1, r4
 8010b98:	f7ff fdd8 	bl	801074c <_Bfree>
 8010b9c:	4628      	mov	r0, r5
 8010b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ba2:	f842 0f04 	str.w	r0, [r2, #4]!
 8010ba6:	3301      	adds	r3, #1
 8010ba8:	e7c5      	b.n	8010b36 <__lshift+0x4a>
 8010baa:	3904      	subs	r1, #4
 8010bac:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8010bb4:	459c      	cmp	ip, r3
 8010bb6:	d8f9      	bhi.n	8010bac <__lshift+0xc0>
 8010bb8:	e7ea      	b.n	8010b90 <__lshift+0xa4>
 8010bba:	bf00      	nop
 8010bbc:	08011eb4 	.word	0x08011eb4
 8010bc0:	08011ec5 	.word	0x08011ec5

08010bc4 <__mcmp>:
 8010bc4:	b530      	push	{r4, r5, lr}
 8010bc6:	6902      	ldr	r2, [r0, #16]
 8010bc8:	690c      	ldr	r4, [r1, #16]
 8010bca:	1b12      	subs	r2, r2, r4
 8010bcc:	d10e      	bne.n	8010bec <__mcmp+0x28>
 8010bce:	f100 0314 	add.w	r3, r0, #20
 8010bd2:	3114      	adds	r1, #20
 8010bd4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010bd8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010bdc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010be0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010be4:	42a5      	cmp	r5, r4
 8010be6:	d003      	beq.n	8010bf0 <__mcmp+0x2c>
 8010be8:	d305      	bcc.n	8010bf6 <__mcmp+0x32>
 8010bea:	2201      	movs	r2, #1
 8010bec:	4610      	mov	r0, r2
 8010bee:	bd30      	pop	{r4, r5, pc}
 8010bf0:	4283      	cmp	r3, r0
 8010bf2:	d3f3      	bcc.n	8010bdc <__mcmp+0x18>
 8010bf4:	e7fa      	b.n	8010bec <__mcmp+0x28>
 8010bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8010bfa:	e7f7      	b.n	8010bec <__mcmp+0x28>

08010bfc <__mdiff>:
 8010bfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c00:	460c      	mov	r4, r1
 8010c02:	4606      	mov	r6, r0
 8010c04:	4611      	mov	r1, r2
 8010c06:	4620      	mov	r0, r4
 8010c08:	4690      	mov	r8, r2
 8010c0a:	f7ff ffdb 	bl	8010bc4 <__mcmp>
 8010c0e:	1e05      	subs	r5, r0, #0
 8010c10:	d110      	bne.n	8010c34 <__mdiff+0x38>
 8010c12:	4629      	mov	r1, r5
 8010c14:	4630      	mov	r0, r6
 8010c16:	f7ff fd59 	bl	80106cc <_Balloc>
 8010c1a:	b930      	cbnz	r0, 8010c2a <__mdiff+0x2e>
 8010c1c:	4b3a      	ldr	r3, [pc, #232]	; (8010d08 <__mdiff+0x10c>)
 8010c1e:	4602      	mov	r2, r0
 8010c20:	f240 2137 	movw	r1, #567	; 0x237
 8010c24:	4839      	ldr	r0, [pc, #228]	; (8010d0c <__mdiff+0x110>)
 8010c26:	f000 fb53 	bl	80112d0 <__assert_func>
 8010c2a:	2301      	movs	r3, #1
 8010c2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010c30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c34:	bfa4      	itt	ge
 8010c36:	4643      	movge	r3, r8
 8010c38:	46a0      	movge	r8, r4
 8010c3a:	4630      	mov	r0, r6
 8010c3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010c40:	bfa6      	itte	ge
 8010c42:	461c      	movge	r4, r3
 8010c44:	2500      	movge	r5, #0
 8010c46:	2501      	movlt	r5, #1
 8010c48:	f7ff fd40 	bl	80106cc <_Balloc>
 8010c4c:	b920      	cbnz	r0, 8010c58 <__mdiff+0x5c>
 8010c4e:	4b2e      	ldr	r3, [pc, #184]	; (8010d08 <__mdiff+0x10c>)
 8010c50:	4602      	mov	r2, r0
 8010c52:	f240 2145 	movw	r1, #581	; 0x245
 8010c56:	e7e5      	b.n	8010c24 <__mdiff+0x28>
 8010c58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010c5c:	6926      	ldr	r6, [r4, #16]
 8010c5e:	60c5      	str	r5, [r0, #12]
 8010c60:	f104 0914 	add.w	r9, r4, #20
 8010c64:	f108 0514 	add.w	r5, r8, #20
 8010c68:	f100 0e14 	add.w	lr, r0, #20
 8010c6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010c70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010c74:	f108 0210 	add.w	r2, r8, #16
 8010c78:	46f2      	mov	sl, lr
 8010c7a:	2100      	movs	r1, #0
 8010c7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8010c80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010c84:	fa11 f88b 	uxtah	r8, r1, fp
 8010c88:	b299      	uxth	r1, r3
 8010c8a:	0c1b      	lsrs	r3, r3, #16
 8010c8c:	eba8 0801 	sub.w	r8, r8, r1
 8010c90:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010c94:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010c98:	fa1f f888 	uxth.w	r8, r8
 8010c9c:	1419      	asrs	r1, r3, #16
 8010c9e:	454e      	cmp	r6, r9
 8010ca0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010ca4:	f84a 3b04 	str.w	r3, [sl], #4
 8010ca8:	d8e8      	bhi.n	8010c7c <__mdiff+0x80>
 8010caa:	1b33      	subs	r3, r6, r4
 8010cac:	3b15      	subs	r3, #21
 8010cae:	f023 0303 	bic.w	r3, r3, #3
 8010cb2:	3304      	adds	r3, #4
 8010cb4:	3415      	adds	r4, #21
 8010cb6:	42a6      	cmp	r6, r4
 8010cb8:	bf38      	it	cc
 8010cba:	2304      	movcc	r3, #4
 8010cbc:	441d      	add	r5, r3
 8010cbe:	4473      	add	r3, lr
 8010cc0:	469e      	mov	lr, r3
 8010cc2:	462e      	mov	r6, r5
 8010cc4:	4566      	cmp	r6, ip
 8010cc6:	d30e      	bcc.n	8010ce6 <__mdiff+0xea>
 8010cc8:	f10c 0203 	add.w	r2, ip, #3
 8010ccc:	1b52      	subs	r2, r2, r5
 8010cce:	f022 0203 	bic.w	r2, r2, #3
 8010cd2:	3d03      	subs	r5, #3
 8010cd4:	45ac      	cmp	ip, r5
 8010cd6:	bf38      	it	cc
 8010cd8:	2200      	movcc	r2, #0
 8010cda:	4413      	add	r3, r2
 8010cdc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010ce0:	b17a      	cbz	r2, 8010d02 <__mdiff+0x106>
 8010ce2:	6107      	str	r7, [r0, #16]
 8010ce4:	e7a4      	b.n	8010c30 <__mdiff+0x34>
 8010ce6:	f856 8b04 	ldr.w	r8, [r6], #4
 8010cea:	fa11 f288 	uxtah	r2, r1, r8
 8010cee:	1414      	asrs	r4, r2, #16
 8010cf0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010cf4:	b292      	uxth	r2, r2
 8010cf6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010cfa:	f84e 2b04 	str.w	r2, [lr], #4
 8010cfe:	1421      	asrs	r1, r4, #16
 8010d00:	e7e0      	b.n	8010cc4 <__mdiff+0xc8>
 8010d02:	3f01      	subs	r7, #1
 8010d04:	e7ea      	b.n	8010cdc <__mdiff+0xe0>
 8010d06:	bf00      	nop
 8010d08:	08011eb4 	.word	0x08011eb4
 8010d0c:	08011ec5 	.word	0x08011ec5

08010d10 <__d2b>:
 8010d10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010d14:	460f      	mov	r7, r1
 8010d16:	2101      	movs	r1, #1
 8010d18:	ec59 8b10 	vmov	r8, r9, d0
 8010d1c:	4616      	mov	r6, r2
 8010d1e:	f7ff fcd5 	bl	80106cc <_Balloc>
 8010d22:	4604      	mov	r4, r0
 8010d24:	b930      	cbnz	r0, 8010d34 <__d2b+0x24>
 8010d26:	4602      	mov	r2, r0
 8010d28:	4b24      	ldr	r3, [pc, #144]	; (8010dbc <__d2b+0xac>)
 8010d2a:	4825      	ldr	r0, [pc, #148]	; (8010dc0 <__d2b+0xb0>)
 8010d2c:	f240 310f 	movw	r1, #783	; 0x30f
 8010d30:	f000 face 	bl	80112d0 <__assert_func>
 8010d34:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010d38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010d3c:	bb2d      	cbnz	r5, 8010d8a <__d2b+0x7a>
 8010d3e:	9301      	str	r3, [sp, #4]
 8010d40:	f1b8 0300 	subs.w	r3, r8, #0
 8010d44:	d026      	beq.n	8010d94 <__d2b+0x84>
 8010d46:	4668      	mov	r0, sp
 8010d48:	9300      	str	r3, [sp, #0]
 8010d4a:	f7ff fd87 	bl	801085c <__lo0bits>
 8010d4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010d52:	b1e8      	cbz	r0, 8010d90 <__d2b+0x80>
 8010d54:	f1c0 0320 	rsb	r3, r0, #32
 8010d58:	fa02 f303 	lsl.w	r3, r2, r3
 8010d5c:	430b      	orrs	r3, r1
 8010d5e:	40c2      	lsrs	r2, r0
 8010d60:	6163      	str	r3, [r4, #20]
 8010d62:	9201      	str	r2, [sp, #4]
 8010d64:	9b01      	ldr	r3, [sp, #4]
 8010d66:	61a3      	str	r3, [r4, #24]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	bf14      	ite	ne
 8010d6c:	2202      	movne	r2, #2
 8010d6e:	2201      	moveq	r2, #1
 8010d70:	6122      	str	r2, [r4, #16]
 8010d72:	b1bd      	cbz	r5, 8010da4 <__d2b+0x94>
 8010d74:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010d78:	4405      	add	r5, r0
 8010d7a:	603d      	str	r5, [r7, #0]
 8010d7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010d80:	6030      	str	r0, [r6, #0]
 8010d82:	4620      	mov	r0, r4
 8010d84:	b003      	add	sp, #12
 8010d86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010d8e:	e7d6      	b.n	8010d3e <__d2b+0x2e>
 8010d90:	6161      	str	r1, [r4, #20]
 8010d92:	e7e7      	b.n	8010d64 <__d2b+0x54>
 8010d94:	a801      	add	r0, sp, #4
 8010d96:	f7ff fd61 	bl	801085c <__lo0bits>
 8010d9a:	9b01      	ldr	r3, [sp, #4]
 8010d9c:	6163      	str	r3, [r4, #20]
 8010d9e:	3020      	adds	r0, #32
 8010da0:	2201      	movs	r2, #1
 8010da2:	e7e5      	b.n	8010d70 <__d2b+0x60>
 8010da4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010da8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010dac:	6038      	str	r0, [r7, #0]
 8010dae:	6918      	ldr	r0, [r3, #16]
 8010db0:	f7ff fd34 	bl	801081c <__hi0bits>
 8010db4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010db8:	e7e2      	b.n	8010d80 <__d2b+0x70>
 8010dba:	bf00      	nop
 8010dbc:	08011eb4 	.word	0x08011eb4
 8010dc0:	08011ec5 	.word	0x08011ec5

08010dc4 <__sfputc_r>:
 8010dc4:	6893      	ldr	r3, [r2, #8]
 8010dc6:	3b01      	subs	r3, #1
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	b410      	push	{r4}
 8010dcc:	6093      	str	r3, [r2, #8]
 8010dce:	da08      	bge.n	8010de2 <__sfputc_r+0x1e>
 8010dd0:	6994      	ldr	r4, [r2, #24]
 8010dd2:	42a3      	cmp	r3, r4
 8010dd4:	db01      	blt.n	8010dda <__sfputc_r+0x16>
 8010dd6:	290a      	cmp	r1, #10
 8010dd8:	d103      	bne.n	8010de2 <__sfputc_r+0x1e>
 8010dda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010dde:	f7fe bb84 	b.w	800f4ea <__swbuf_r>
 8010de2:	6813      	ldr	r3, [r2, #0]
 8010de4:	1c58      	adds	r0, r3, #1
 8010de6:	6010      	str	r0, [r2, #0]
 8010de8:	7019      	strb	r1, [r3, #0]
 8010dea:	4608      	mov	r0, r1
 8010dec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010df0:	4770      	bx	lr

08010df2 <__sfputs_r>:
 8010df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010df4:	4606      	mov	r6, r0
 8010df6:	460f      	mov	r7, r1
 8010df8:	4614      	mov	r4, r2
 8010dfa:	18d5      	adds	r5, r2, r3
 8010dfc:	42ac      	cmp	r4, r5
 8010dfe:	d101      	bne.n	8010e04 <__sfputs_r+0x12>
 8010e00:	2000      	movs	r0, #0
 8010e02:	e007      	b.n	8010e14 <__sfputs_r+0x22>
 8010e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e08:	463a      	mov	r2, r7
 8010e0a:	4630      	mov	r0, r6
 8010e0c:	f7ff ffda 	bl	8010dc4 <__sfputc_r>
 8010e10:	1c43      	adds	r3, r0, #1
 8010e12:	d1f3      	bne.n	8010dfc <__sfputs_r+0xa>
 8010e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010e18 <_vfiprintf_r>:
 8010e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e1c:	460d      	mov	r5, r1
 8010e1e:	b09d      	sub	sp, #116	; 0x74
 8010e20:	4614      	mov	r4, r2
 8010e22:	4698      	mov	r8, r3
 8010e24:	4606      	mov	r6, r0
 8010e26:	b118      	cbz	r0, 8010e30 <_vfiprintf_r+0x18>
 8010e28:	6a03      	ldr	r3, [r0, #32]
 8010e2a:	b90b      	cbnz	r3, 8010e30 <_vfiprintf_r+0x18>
 8010e2c:	f7fe fa76 	bl	800f31c <__sinit>
 8010e30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e32:	07d9      	lsls	r1, r3, #31
 8010e34:	d405      	bmi.n	8010e42 <_vfiprintf_r+0x2a>
 8010e36:	89ab      	ldrh	r3, [r5, #12]
 8010e38:	059a      	lsls	r2, r3, #22
 8010e3a:	d402      	bmi.n	8010e42 <_vfiprintf_r+0x2a>
 8010e3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e3e:	f7fe fcbb 	bl	800f7b8 <__retarget_lock_acquire_recursive>
 8010e42:	89ab      	ldrh	r3, [r5, #12]
 8010e44:	071b      	lsls	r3, r3, #28
 8010e46:	d501      	bpl.n	8010e4c <_vfiprintf_r+0x34>
 8010e48:	692b      	ldr	r3, [r5, #16]
 8010e4a:	b99b      	cbnz	r3, 8010e74 <_vfiprintf_r+0x5c>
 8010e4c:	4629      	mov	r1, r5
 8010e4e:	4630      	mov	r0, r6
 8010e50:	f7fe fb88 	bl	800f564 <__swsetup_r>
 8010e54:	b170      	cbz	r0, 8010e74 <_vfiprintf_r+0x5c>
 8010e56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e58:	07dc      	lsls	r4, r3, #31
 8010e5a:	d504      	bpl.n	8010e66 <_vfiprintf_r+0x4e>
 8010e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8010e60:	b01d      	add	sp, #116	; 0x74
 8010e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e66:	89ab      	ldrh	r3, [r5, #12]
 8010e68:	0598      	lsls	r0, r3, #22
 8010e6a:	d4f7      	bmi.n	8010e5c <_vfiprintf_r+0x44>
 8010e6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e6e:	f7fe fca4 	bl	800f7ba <__retarget_lock_release_recursive>
 8010e72:	e7f3      	b.n	8010e5c <_vfiprintf_r+0x44>
 8010e74:	2300      	movs	r3, #0
 8010e76:	9309      	str	r3, [sp, #36]	; 0x24
 8010e78:	2320      	movs	r3, #32
 8010e7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010e7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e82:	2330      	movs	r3, #48	; 0x30
 8010e84:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011038 <_vfiprintf_r+0x220>
 8010e88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010e8c:	f04f 0901 	mov.w	r9, #1
 8010e90:	4623      	mov	r3, r4
 8010e92:	469a      	mov	sl, r3
 8010e94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e98:	b10a      	cbz	r2, 8010e9e <_vfiprintf_r+0x86>
 8010e9a:	2a25      	cmp	r2, #37	; 0x25
 8010e9c:	d1f9      	bne.n	8010e92 <_vfiprintf_r+0x7a>
 8010e9e:	ebba 0b04 	subs.w	fp, sl, r4
 8010ea2:	d00b      	beq.n	8010ebc <_vfiprintf_r+0xa4>
 8010ea4:	465b      	mov	r3, fp
 8010ea6:	4622      	mov	r2, r4
 8010ea8:	4629      	mov	r1, r5
 8010eaa:	4630      	mov	r0, r6
 8010eac:	f7ff ffa1 	bl	8010df2 <__sfputs_r>
 8010eb0:	3001      	adds	r0, #1
 8010eb2:	f000 80a9 	beq.w	8011008 <_vfiprintf_r+0x1f0>
 8010eb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010eb8:	445a      	add	r2, fp
 8010eba:	9209      	str	r2, [sp, #36]	; 0x24
 8010ebc:	f89a 3000 	ldrb.w	r3, [sl]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	f000 80a1 	beq.w	8011008 <_vfiprintf_r+0x1f0>
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8010ecc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ed0:	f10a 0a01 	add.w	sl, sl, #1
 8010ed4:	9304      	str	r3, [sp, #16]
 8010ed6:	9307      	str	r3, [sp, #28]
 8010ed8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010edc:	931a      	str	r3, [sp, #104]	; 0x68
 8010ede:	4654      	mov	r4, sl
 8010ee0:	2205      	movs	r2, #5
 8010ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ee6:	4854      	ldr	r0, [pc, #336]	; (8011038 <_vfiprintf_r+0x220>)
 8010ee8:	f7ef f972 	bl	80001d0 <memchr>
 8010eec:	9a04      	ldr	r2, [sp, #16]
 8010eee:	b9d8      	cbnz	r0, 8010f28 <_vfiprintf_r+0x110>
 8010ef0:	06d1      	lsls	r1, r2, #27
 8010ef2:	bf44      	itt	mi
 8010ef4:	2320      	movmi	r3, #32
 8010ef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010efa:	0713      	lsls	r3, r2, #28
 8010efc:	bf44      	itt	mi
 8010efe:	232b      	movmi	r3, #43	; 0x2b
 8010f00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f04:	f89a 3000 	ldrb.w	r3, [sl]
 8010f08:	2b2a      	cmp	r3, #42	; 0x2a
 8010f0a:	d015      	beq.n	8010f38 <_vfiprintf_r+0x120>
 8010f0c:	9a07      	ldr	r2, [sp, #28]
 8010f0e:	4654      	mov	r4, sl
 8010f10:	2000      	movs	r0, #0
 8010f12:	f04f 0c0a 	mov.w	ip, #10
 8010f16:	4621      	mov	r1, r4
 8010f18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f1c:	3b30      	subs	r3, #48	; 0x30
 8010f1e:	2b09      	cmp	r3, #9
 8010f20:	d94d      	bls.n	8010fbe <_vfiprintf_r+0x1a6>
 8010f22:	b1b0      	cbz	r0, 8010f52 <_vfiprintf_r+0x13a>
 8010f24:	9207      	str	r2, [sp, #28]
 8010f26:	e014      	b.n	8010f52 <_vfiprintf_r+0x13a>
 8010f28:	eba0 0308 	sub.w	r3, r0, r8
 8010f2c:	fa09 f303 	lsl.w	r3, r9, r3
 8010f30:	4313      	orrs	r3, r2
 8010f32:	9304      	str	r3, [sp, #16]
 8010f34:	46a2      	mov	sl, r4
 8010f36:	e7d2      	b.n	8010ede <_vfiprintf_r+0xc6>
 8010f38:	9b03      	ldr	r3, [sp, #12]
 8010f3a:	1d19      	adds	r1, r3, #4
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	9103      	str	r1, [sp, #12]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	bfbb      	ittet	lt
 8010f44:	425b      	neglt	r3, r3
 8010f46:	f042 0202 	orrlt.w	r2, r2, #2
 8010f4a:	9307      	strge	r3, [sp, #28]
 8010f4c:	9307      	strlt	r3, [sp, #28]
 8010f4e:	bfb8      	it	lt
 8010f50:	9204      	strlt	r2, [sp, #16]
 8010f52:	7823      	ldrb	r3, [r4, #0]
 8010f54:	2b2e      	cmp	r3, #46	; 0x2e
 8010f56:	d10c      	bne.n	8010f72 <_vfiprintf_r+0x15a>
 8010f58:	7863      	ldrb	r3, [r4, #1]
 8010f5a:	2b2a      	cmp	r3, #42	; 0x2a
 8010f5c:	d134      	bne.n	8010fc8 <_vfiprintf_r+0x1b0>
 8010f5e:	9b03      	ldr	r3, [sp, #12]
 8010f60:	1d1a      	adds	r2, r3, #4
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	9203      	str	r2, [sp, #12]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	bfb8      	it	lt
 8010f6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8010f6e:	3402      	adds	r4, #2
 8010f70:	9305      	str	r3, [sp, #20]
 8010f72:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011048 <_vfiprintf_r+0x230>
 8010f76:	7821      	ldrb	r1, [r4, #0]
 8010f78:	2203      	movs	r2, #3
 8010f7a:	4650      	mov	r0, sl
 8010f7c:	f7ef f928 	bl	80001d0 <memchr>
 8010f80:	b138      	cbz	r0, 8010f92 <_vfiprintf_r+0x17a>
 8010f82:	9b04      	ldr	r3, [sp, #16]
 8010f84:	eba0 000a 	sub.w	r0, r0, sl
 8010f88:	2240      	movs	r2, #64	; 0x40
 8010f8a:	4082      	lsls	r2, r0
 8010f8c:	4313      	orrs	r3, r2
 8010f8e:	3401      	adds	r4, #1
 8010f90:	9304      	str	r3, [sp, #16]
 8010f92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f96:	4829      	ldr	r0, [pc, #164]	; (801103c <_vfiprintf_r+0x224>)
 8010f98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010f9c:	2206      	movs	r2, #6
 8010f9e:	f7ef f917 	bl	80001d0 <memchr>
 8010fa2:	2800      	cmp	r0, #0
 8010fa4:	d03f      	beq.n	8011026 <_vfiprintf_r+0x20e>
 8010fa6:	4b26      	ldr	r3, [pc, #152]	; (8011040 <_vfiprintf_r+0x228>)
 8010fa8:	bb1b      	cbnz	r3, 8010ff2 <_vfiprintf_r+0x1da>
 8010faa:	9b03      	ldr	r3, [sp, #12]
 8010fac:	3307      	adds	r3, #7
 8010fae:	f023 0307 	bic.w	r3, r3, #7
 8010fb2:	3308      	adds	r3, #8
 8010fb4:	9303      	str	r3, [sp, #12]
 8010fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fb8:	443b      	add	r3, r7
 8010fba:	9309      	str	r3, [sp, #36]	; 0x24
 8010fbc:	e768      	b.n	8010e90 <_vfiprintf_r+0x78>
 8010fbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8010fc2:	460c      	mov	r4, r1
 8010fc4:	2001      	movs	r0, #1
 8010fc6:	e7a6      	b.n	8010f16 <_vfiprintf_r+0xfe>
 8010fc8:	2300      	movs	r3, #0
 8010fca:	3401      	adds	r4, #1
 8010fcc:	9305      	str	r3, [sp, #20]
 8010fce:	4619      	mov	r1, r3
 8010fd0:	f04f 0c0a 	mov.w	ip, #10
 8010fd4:	4620      	mov	r0, r4
 8010fd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010fda:	3a30      	subs	r2, #48	; 0x30
 8010fdc:	2a09      	cmp	r2, #9
 8010fde:	d903      	bls.n	8010fe8 <_vfiprintf_r+0x1d0>
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d0c6      	beq.n	8010f72 <_vfiprintf_r+0x15a>
 8010fe4:	9105      	str	r1, [sp, #20]
 8010fe6:	e7c4      	b.n	8010f72 <_vfiprintf_r+0x15a>
 8010fe8:	fb0c 2101 	mla	r1, ip, r1, r2
 8010fec:	4604      	mov	r4, r0
 8010fee:	2301      	movs	r3, #1
 8010ff0:	e7f0      	b.n	8010fd4 <_vfiprintf_r+0x1bc>
 8010ff2:	ab03      	add	r3, sp, #12
 8010ff4:	9300      	str	r3, [sp, #0]
 8010ff6:	462a      	mov	r2, r5
 8010ff8:	4b12      	ldr	r3, [pc, #72]	; (8011044 <_vfiprintf_r+0x22c>)
 8010ffa:	a904      	add	r1, sp, #16
 8010ffc:	4630      	mov	r0, r6
 8010ffe:	f7fd fd4d 	bl	800ea9c <_printf_float>
 8011002:	4607      	mov	r7, r0
 8011004:	1c78      	adds	r0, r7, #1
 8011006:	d1d6      	bne.n	8010fb6 <_vfiprintf_r+0x19e>
 8011008:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801100a:	07d9      	lsls	r1, r3, #31
 801100c:	d405      	bmi.n	801101a <_vfiprintf_r+0x202>
 801100e:	89ab      	ldrh	r3, [r5, #12]
 8011010:	059a      	lsls	r2, r3, #22
 8011012:	d402      	bmi.n	801101a <_vfiprintf_r+0x202>
 8011014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011016:	f7fe fbd0 	bl	800f7ba <__retarget_lock_release_recursive>
 801101a:	89ab      	ldrh	r3, [r5, #12]
 801101c:	065b      	lsls	r3, r3, #25
 801101e:	f53f af1d 	bmi.w	8010e5c <_vfiprintf_r+0x44>
 8011022:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011024:	e71c      	b.n	8010e60 <_vfiprintf_r+0x48>
 8011026:	ab03      	add	r3, sp, #12
 8011028:	9300      	str	r3, [sp, #0]
 801102a:	462a      	mov	r2, r5
 801102c:	4b05      	ldr	r3, [pc, #20]	; (8011044 <_vfiprintf_r+0x22c>)
 801102e:	a904      	add	r1, sp, #16
 8011030:	4630      	mov	r0, r6
 8011032:	f7fd ffd7 	bl	800efe4 <_printf_i>
 8011036:	e7e4      	b.n	8011002 <_vfiprintf_r+0x1ea>
 8011038:	0801201c 	.word	0x0801201c
 801103c:	08012026 	.word	0x08012026
 8011040:	0800ea9d 	.word	0x0800ea9d
 8011044:	08010df3 	.word	0x08010df3
 8011048:	08012022 	.word	0x08012022

0801104c <__sflush_r>:
 801104c:	898a      	ldrh	r2, [r1, #12]
 801104e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011052:	4605      	mov	r5, r0
 8011054:	0710      	lsls	r0, r2, #28
 8011056:	460c      	mov	r4, r1
 8011058:	d458      	bmi.n	801110c <__sflush_r+0xc0>
 801105a:	684b      	ldr	r3, [r1, #4]
 801105c:	2b00      	cmp	r3, #0
 801105e:	dc05      	bgt.n	801106c <__sflush_r+0x20>
 8011060:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011062:	2b00      	cmp	r3, #0
 8011064:	dc02      	bgt.n	801106c <__sflush_r+0x20>
 8011066:	2000      	movs	r0, #0
 8011068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801106c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801106e:	2e00      	cmp	r6, #0
 8011070:	d0f9      	beq.n	8011066 <__sflush_r+0x1a>
 8011072:	2300      	movs	r3, #0
 8011074:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011078:	682f      	ldr	r7, [r5, #0]
 801107a:	6a21      	ldr	r1, [r4, #32]
 801107c:	602b      	str	r3, [r5, #0]
 801107e:	d032      	beq.n	80110e6 <__sflush_r+0x9a>
 8011080:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011082:	89a3      	ldrh	r3, [r4, #12]
 8011084:	075a      	lsls	r2, r3, #29
 8011086:	d505      	bpl.n	8011094 <__sflush_r+0x48>
 8011088:	6863      	ldr	r3, [r4, #4]
 801108a:	1ac0      	subs	r0, r0, r3
 801108c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801108e:	b10b      	cbz	r3, 8011094 <__sflush_r+0x48>
 8011090:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011092:	1ac0      	subs	r0, r0, r3
 8011094:	2300      	movs	r3, #0
 8011096:	4602      	mov	r2, r0
 8011098:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801109a:	6a21      	ldr	r1, [r4, #32]
 801109c:	4628      	mov	r0, r5
 801109e:	47b0      	blx	r6
 80110a0:	1c43      	adds	r3, r0, #1
 80110a2:	89a3      	ldrh	r3, [r4, #12]
 80110a4:	d106      	bne.n	80110b4 <__sflush_r+0x68>
 80110a6:	6829      	ldr	r1, [r5, #0]
 80110a8:	291d      	cmp	r1, #29
 80110aa:	d82b      	bhi.n	8011104 <__sflush_r+0xb8>
 80110ac:	4a29      	ldr	r2, [pc, #164]	; (8011154 <__sflush_r+0x108>)
 80110ae:	410a      	asrs	r2, r1
 80110b0:	07d6      	lsls	r6, r2, #31
 80110b2:	d427      	bmi.n	8011104 <__sflush_r+0xb8>
 80110b4:	2200      	movs	r2, #0
 80110b6:	6062      	str	r2, [r4, #4]
 80110b8:	04d9      	lsls	r1, r3, #19
 80110ba:	6922      	ldr	r2, [r4, #16]
 80110bc:	6022      	str	r2, [r4, #0]
 80110be:	d504      	bpl.n	80110ca <__sflush_r+0x7e>
 80110c0:	1c42      	adds	r2, r0, #1
 80110c2:	d101      	bne.n	80110c8 <__sflush_r+0x7c>
 80110c4:	682b      	ldr	r3, [r5, #0]
 80110c6:	b903      	cbnz	r3, 80110ca <__sflush_r+0x7e>
 80110c8:	6560      	str	r0, [r4, #84]	; 0x54
 80110ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110cc:	602f      	str	r7, [r5, #0]
 80110ce:	2900      	cmp	r1, #0
 80110d0:	d0c9      	beq.n	8011066 <__sflush_r+0x1a>
 80110d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110d6:	4299      	cmp	r1, r3
 80110d8:	d002      	beq.n	80110e0 <__sflush_r+0x94>
 80110da:	4628      	mov	r0, r5
 80110dc:	f7ff f9f6 	bl	80104cc <_free_r>
 80110e0:	2000      	movs	r0, #0
 80110e2:	6360      	str	r0, [r4, #52]	; 0x34
 80110e4:	e7c0      	b.n	8011068 <__sflush_r+0x1c>
 80110e6:	2301      	movs	r3, #1
 80110e8:	4628      	mov	r0, r5
 80110ea:	47b0      	blx	r6
 80110ec:	1c41      	adds	r1, r0, #1
 80110ee:	d1c8      	bne.n	8011082 <__sflush_r+0x36>
 80110f0:	682b      	ldr	r3, [r5, #0]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d0c5      	beq.n	8011082 <__sflush_r+0x36>
 80110f6:	2b1d      	cmp	r3, #29
 80110f8:	d001      	beq.n	80110fe <__sflush_r+0xb2>
 80110fa:	2b16      	cmp	r3, #22
 80110fc:	d101      	bne.n	8011102 <__sflush_r+0xb6>
 80110fe:	602f      	str	r7, [r5, #0]
 8011100:	e7b1      	b.n	8011066 <__sflush_r+0x1a>
 8011102:	89a3      	ldrh	r3, [r4, #12]
 8011104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011108:	81a3      	strh	r3, [r4, #12]
 801110a:	e7ad      	b.n	8011068 <__sflush_r+0x1c>
 801110c:	690f      	ldr	r7, [r1, #16]
 801110e:	2f00      	cmp	r7, #0
 8011110:	d0a9      	beq.n	8011066 <__sflush_r+0x1a>
 8011112:	0793      	lsls	r3, r2, #30
 8011114:	680e      	ldr	r6, [r1, #0]
 8011116:	bf08      	it	eq
 8011118:	694b      	ldreq	r3, [r1, #20]
 801111a:	600f      	str	r7, [r1, #0]
 801111c:	bf18      	it	ne
 801111e:	2300      	movne	r3, #0
 8011120:	eba6 0807 	sub.w	r8, r6, r7
 8011124:	608b      	str	r3, [r1, #8]
 8011126:	f1b8 0f00 	cmp.w	r8, #0
 801112a:	dd9c      	ble.n	8011066 <__sflush_r+0x1a>
 801112c:	6a21      	ldr	r1, [r4, #32]
 801112e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011130:	4643      	mov	r3, r8
 8011132:	463a      	mov	r2, r7
 8011134:	4628      	mov	r0, r5
 8011136:	47b0      	blx	r6
 8011138:	2800      	cmp	r0, #0
 801113a:	dc06      	bgt.n	801114a <__sflush_r+0xfe>
 801113c:	89a3      	ldrh	r3, [r4, #12]
 801113e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011142:	81a3      	strh	r3, [r4, #12]
 8011144:	f04f 30ff 	mov.w	r0, #4294967295
 8011148:	e78e      	b.n	8011068 <__sflush_r+0x1c>
 801114a:	4407      	add	r7, r0
 801114c:	eba8 0800 	sub.w	r8, r8, r0
 8011150:	e7e9      	b.n	8011126 <__sflush_r+0xda>
 8011152:	bf00      	nop
 8011154:	dfbffffe 	.word	0xdfbffffe

08011158 <_fflush_r>:
 8011158:	b538      	push	{r3, r4, r5, lr}
 801115a:	690b      	ldr	r3, [r1, #16]
 801115c:	4605      	mov	r5, r0
 801115e:	460c      	mov	r4, r1
 8011160:	b913      	cbnz	r3, 8011168 <_fflush_r+0x10>
 8011162:	2500      	movs	r5, #0
 8011164:	4628      	mov	r0, r5
 8011166:	bd38      	pop	{r3, r4, r5, pc}
 8011168:	b118      	cbz	r0, 8011172 <_fflush_r+0x1a>
 801116a:	6a03      	ldr	r3, [r0, #32]
 801116c:	b90b      	cbnz	r3, 8011172 <_fflush_r+0x1a>
 801116e:	f7fe f8d5 	bl	800f31c <__sinit>
 8011172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d0f3      	beq.n	8011162 <_fflush_r+0xa>
 801117a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801117c:	07d0      	lsls	r0, r2, #31
 801117e:	d404      	bmi.n	801118a <_fflush_r+0x32>
 8011180:	0599      	lsls	r1, r3, #22
 8011182:	d402      	bmi.n	801118a <_fflush_r+0x32>
 8011184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011186:	f7fe fb17 	bl	800f7b8 <__retarget_lock_acquire_recursive>
 801118a:	4628      	mov	r0, r5
 801118c:	4621      	mov	r1, r4
 801118e:	f7ff ff5d 	bl	801104c <__sflush_r>
 8011192:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011194:	07da      	lsls	r2, r3, #31
 8011196:	4605      	mov	r5, r0
 8011198:	d4e4      	bmi.n	8011164 <_fflush_r+0xc>
 801119a:	89a3      	ldrh	r3, [r4, #12]
 801119c:	059b      	lsls	r3, r3, #22
 801119e:	d4e1      	bmi.n	8011164 <_fflush_r+0xc>
 80111a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80111a2:	f7fe fb0a 	bl	800f7ba <__retarget_lock_release_recursive>
 80111a6:	e7dd      	b.n	8011164 <_fflush_r+0xc>

080111a8 <__swhatbuf_r>:
 80111a8:	b570      	push	{r4, r5, r6, lr}
 80111aa:	460c      	mov	r4, r1
 80111ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111b0:	2900      	cmp	r1, #0
 80111b2:	b096      	sub	sp, #88	; 0x58
 80111b4:	4615      	mov	r5, r2
 80111b6:	461e      	mov	r6, r3
 80111b8:	da0d      	bge.n	80111d6 <__swhatbuf_r+0x2e>
 80111ba:	89a3      	ldrh	r3, [r4, #12]
 80111bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80111c0:	f04f 0100 	mov.w	r1, #0
 80111c4:	bf0c      	ite	eq
 80111c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80111ca:	2340      	movne	r3, #64	; 0x40
 80111cc:	2000      	movs	r0, #0
 80111ce:	6031      	str	r1, [r6, #0]
 80111d0:	602b      	str	r3, [r5, #0]
 80111d2:	b016      	add	sp, #88	; 0x58
 80111d4:	bd70      	pop	{r4, r5, r6, pc}
 80111d6:	466a      	mov	r2, sp
 80111d8:	f000 f848 	bl	801126c <_fstat_r>
 80111dc:	2800      	cmp	r0, #0
 80111de:	dbec      	blt.n	80111ba <__swhatbuf_r+0x12>
 80111e0:	9901      	ldr	r1, [sp, #4]
 80111e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80111e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80111ea:	4259      	negs	r1, r3
 80111ec:	4159      	adcs	r1, r3
 80111ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80111f2:	e7eb      	b.n	80111cc <__swhatbuf_r+0x24>

080111f4 <__smakebuf_r>:
 80111f4:	898b      	ldrh	r3, [r1, #12]
 80111f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80111f8:	079d      	lsls	r5, r3, #30
 80111fa:	4606      	mov	r6, r0
 80111fc:	460c      	mov	r4, r1
 80111fe:	d507      	bpl.n	8011210 <__smakebuf_r+0x1c>
 8011200:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011204:	6023      	str	r3, [r4, #0]
 8011206:	6123      	str	r3, [r4, #16]
 8011208:	2301      	movs	r3, #1
 801120a:	6163      	str	r3, [r4, #20]
 801120c:	b002      	add	sp, #8
 801120e:	bd70      	pop	{r4, r5, r6, pc}
 8011210:	ab01      	add	r3, sp, #4
 8011212:	466a      	mov	r2, sp
 8011214:	f7ff ffc8 	bl	80111a8 <__swhatbuf_r>
 8011218:	9900      	ldr	r1, [sp, #0]
 801121a:	4605      	mov	r5, r0
 801121c:	4630      	mov	r0, r6
 801121e:	f7ff f9c9 	bl	80105b4 <_malloc_r>
 8011222:	b948      	cbnz	r0, 8011238 <__smakebuf_r+0x44>
 8011224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011228:	059a      	lsls	r2, r3, #22
 801122a:	d4ef      	bmi.n	801120c <__smakebuf_r+0x18>
 801122c:	f023 0303 	bic.w	r3, r3, #3
 8011230:	f043 0302 	orr.w	r3, r3, #2
 8011234:	81a3      	strh	r3, [r4, #12]
 8011236:	e7e3      	b.n	8011200 <__smakebuf_r+0xc>
 8011238:	89a3      	ldrh	r3, [r4, #12]
 801123a:	6020      	str	r0, [r4, #0]
 801123c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011240:	81a3      	strh	r3, [r4, #12]
 8011242:	9b00      	ldr	r3, [sp, #0]
 8011244:	6163      	str	r3, [r4, #20]
 8011246:	9b01      	ldr	r3, [sp, #4]
 8011248:	6120      	str	r0, [r4, #16]
 801124a:	b15b      	cbz	r3, 8011264 <__smakebuf_r+0x70>
 801124c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011250:	4630      	mov	r0, r6
 8011252:	f000 f81d 	bl	8011290 <_isatty_r>
 8011256:	b128      	cbz	r0, 8011264 <__smakebuf_r+0x70>
 8011258:	89a3      	ldrh	r3, [r4, #12]
 801125a:	f023 0303 	bic.w	r3, r3, #3
 801125e:	f043 0301 	orr.w	r3, r3, #1
 8011262:	81a3      	strh	r3, [r4, #12]
 8011264:	89a3      	ldrh	r3, [r4, #12]
 8011266:	431d      	orrs	r5, r3
 8011268:	81a5      	strh	r5, [r4, #12]
 801126a:	e7cf      	b.n	801120c <__smakebuf_r+0x18>

0801126c <_fstat_r>:
 801126c:	b538      	push	{r3, r4, r5, lr}
 801126e:	4d07      	ldr	r5, [pc, #28]	; (801128c <_fstat_r+0x20>)
 8011270:	2300      	movs	r3, #0
 8011272:	4604      	mov	r4, r0
 8011274:	4608      	mov	r0, r1
 8011276:	4611      	mov	r1, r2
 8011278:	602b      	str	r3, [r5, #0]
 801127a:	f7f1 fbdc 	bl	8002a36 <_fstat>
 801127e:	1c43      	adds	r3, r0, #1
 8011280:	d102      	bne.n	8011288 <_fstat_r+0x1c>
 8011282:	682b      	ldr	r3, [r5, #0]
 8011284:	b103      	cbz	r3, 8011288 <_fstat_r+0x1c>
 8011286:	6023      	str	r3, [r4, #0]
 8011288:	bd38      	pop	{r3, r4, r5, pc}
 801128a:	bf00      	nop
 801128c:	20005978 	.word	0x20005978

08011290 <_isatty_r>:
 8011290:	b538      	push	{r3, r4, r5, lr}
 8011292:	4d06      	ldr	r5, [pc, #24]	; (80112ac <_isatty_r+0x1c>)
 8011294:	2300      	movs	r3, #0
 8011296:	4604      	mov	r4, r0
 8011298:	4608      	mov	r0, r1
 801129a:	602b      	str	r3, [r5, #0]
 801129c:	f7f1 fbdb 	bl	8002a56 <_isatty>
 80112a0:	1c43      	adds	r3, r0, #1
 80112a2:	d102      	bne.n	80112aa <_isatty_r+0x1a>
 80112a4:	682b      	ldr	r3, [r5, #0]
 80112a6:	b103      	cbz	r3, 80112aa <_isatty_r+0x1a>
 80112a8:	6023      	str	r3, [r4, #0]
 80112aa:	bd38      	pop	{r3, r4, r5, pc}
 80112ac:	20005978 	.word	0x20005978

080112b0 <_sbrk_r>:
 80112b0:	b538      	push	{r3, r4, r5, lr}
 80112b2:	4d06      	ldr	r5, [pc, #24]	; (80112cc <_sbrk_r+0x1c>)
 80112b4:	2300      	movs	r3, #0
 80112b6:	4604      	mov	r4, r0
 80112b8:	4608      	mov	r0, r1
 80112ba:	602b      	str	r3, [r5, #0]
 80112bc:	f7f1 fbe4 	bl	8002a88 <_sbrk>
 80112c0:	1c43      	adds	r3, r0, #1
 80112c2:	d102      	bne.n	80112ca <_sbrk_r+0x1a>
 80112c4:	682b      	ldr	r3, [r5, #0]
 80112c6:	b103      	cbz	r3, 80112ca <_sbrk_r+0x1a>
 80112c8:	6023      	str	r3, [r4, #0]
 80112ca:	bd38      	pop	{r3, r4, r5, pc}
 80112cc:	20005978 	.word	0x20005978

080112d0 <__assert_func>:
 80112d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80112d2:	4614      	mov	r4, r2
 80112d4:	461a      	mov	r2, r3
 80112d6:	4b09      	ldr	r3, [pc, #36]	; (80112fc <__assert_func+0x2c>)
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	4605      	mov	r5, r0
 80112dc:	68d8      	ldr	r0, [r3, #12]
 80112de:	b14c      	cbz	r4, 80112f4 <__assert_func+0x24>
 80112e0:	4b07      	ldr	r3, [pc, #28]	; (8011300 <__assert_func+0x30>)
 80112e2:	9100      	str	r1, [sp, #0]
 80112e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80112e8:	4906      	ldr	r1, [pc, #24]	; (8011304 <__assert_func+0x34>)
 80112ea:	462b      	mov	r3, r5
 80112ec:	f000 f844 	bl	8011378 <fiprintf>
 80112f0:	f000 f854 	bl	801139c <abort>
 80112f4:	4b04      	ldr	r3, [pc, #16]	; (8011308 <__assert_func+0x38>)
 80112f6:	461c      	mov	r4, r3
 80112f8:	e7f3      	b.n	80112e2 <__assert_func+0x12>
 80112fa:	bf00      	nop
 80112fc:	200001f0 	.word	0x200001f0
 8011300:	08012037 	.word	0x08012037
 8011304:	08012044 	.word	0x08012044
 8011308:	08012072 	.word	0x08012072

0801130c <_calloc_r>:
 801130c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801130e:	fba1 2402 	umull	r2, r4, r1, r2
 8011312:	b94c      	cbnz	r4, 8011328 <_calloc_r+0x1c>
 8011314:	4611      	mov	r1, r2
 8011316:	9201      	str	r2, [sp, #4]
 8011318:	f7ff f94c 	bl	80105b4 <_malloc_r>
 801131c:	9a01      	ldr	r2, [sp, #4]
 801131e:	4605      	mov	r5, r0
 8011320:	b930      	cbnz	r0, 8011330 <_calloc_r+0x24>
 8011322:	4628      	mov	r0, r5
 8011324:	b003      	add	sp, #12
 8011326:	bd30      	pop	{r4, r5, pc}
 8011328:	220c      	movs	r2, #12
 801132a:	6002      	str	r2, [r0, #0]
 801132c:	2500      	movs	r5, #0
 801132e:	e7f8      	b.n	8011322 <_calloc_r+0x16>
 8011330:	4621      	mov	r1, r4
 8011332:	f7fe f96f 	bl	800f614 <memset>
 8011336:	e7f4      	b.n	8011322 <_calloc_r+0x16>

08011338 <__ascii_mbtowc>:
 8011338:	b082      	sub	sp, #8
 801133a:	b901      	cbnz	r1, 801133e <__ascii_mbtowc+0x6>
 801133c:	a901      	add	r1, sp, #4
 801133e:	b142      	cbz	r2, 8011352 <__ascii_mbtowc+0x1a>
 8011340:	b14b      	cbz	r3, 8011356 <__ascii_mbtowc+0x1e>
 8011342:	7813      	ldrb	r3, [r2, #0]
 8011344:	600b      	str	r3, [r1, #0]
 8011346:	7812      	ldrb	r2, [r2, #0]
 8011348:	1e10      	subs	r0, r2, #0
 801134a:	bf18      	it	ne
 801134c:	2001      	movne	r0, #1
 801134e:	b002      	add	sp, #8
 8011350:	4770      	bx	lr
 8011352:	4610      	mov	r0, r2
 8011354:	e7fb      	b.n	801134e <__ascii_mbtowc+0x16>
 8011356:	f06f 0001 	mvn.w	r0, #1
 801135a:	e7f8      	b.n	801134e <__ascii_mbtowc+0x16>

0801135c <__ascii_wctomb>:
 801135c:	b149      	cbz	r1, 8011372 <__ascii_wctomb+0x16>
 801135e:	2aff      	cmp	r2, #255	; 0xff
 8011360:	bf85      	ittet	hi
 8011362:	238a      	movhi	r3, #138	; 0x8a
 8011364:	6003      	strhi	r3, [r0, #0]
 8011366:	700a      	strbls	r2, [r1, #0]
 8011368:	f04f 30ff 	movhi.w	r0, #4294967295
 801136c:	bf98      	it	ls
 801136e:	2001      	movls	r0, #1
 8011370:	4770      	bx	lr
 8011372:	4608      	mov	r0, r1
 8011374:	4770      	bx	lr
	...

08011378 <fiprintf>:
 8011378:	b40e      	push	{r1, r2, r3}
 801137a:	b503      	push	{r0, r1, lr}
 801137c:	4601      	mov	r1, r0
 801137e:	ab03      	add	r3, sp, #12
 8011380:	4805      	ldr	r0, [pc, #20]	; (8011398 <fiprintf+0x20>)
 8011382:	f853 2b04 	ldr.w	r2, [r3], #4
 8011386:	6800      	ldr	r0, [r0, #0]
 8011388:	9301      	str	r3, [sp, #4]
 801138a:	f7ff fd45 	bl	8010e18 <_vfiprintf_r>
 801138e:	b002      	add	sp, #8
 8011390:	f85d eb04 	ldr.w	lr, [sp], #4
 8011394:	b003      	add	sp, #12
 8011396:	4770      	bx	lr
 8011398:	200001f0 	.word	0x200001f0

0801139c <abort>:
 801139c:	b508      	push	{r3, lr}
 801139e:	2006      	movs	r0, #6
 80113a0:	f000 f82c 	bl	80113fc <raise>
 80113a4:	2001      	movs	r0, #1
 80113a6:	f7f1 faf7 	bl	8002998 <_exit>

080113aa <_raise_r>:
 80113aa:	291f      	cmp	r1, #31
 80113ac:	b538      	push	{r3, r4, r5, lr}
 80113ae:	4604      	mov	r4, r0
 80113b0:	460d      	mov	r5, r1
 80113b2:	d904      	bls.n	80113be <_raise_r+0x14>
 80113b4:	2316      	movs	r3, #22
 80113b6:	6003      	str	r3, [r0, #0]
 80113b8:	f04f 30ff 	mov.w	r0, #4294967295
 80113bc:	bd38      	pop	{r3, r4, r5, pc}
 80113be:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80113c0:	b112      	cbz	r2, 80113c8 <_raise_r+0x1e>
 80113c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80113c6:	b94b      	cbnz	r3, 80113dc <_raise_r+0x32>
 80113c8:	4620      	mov	r0, r4
 80113ca:	f000 f831 	bl	8011430 <_getpid_r>
 80113ce:	462a      	mov	r2, r5
 80113d0:	4601      	mov	r1, r0
 80113d2:	4620      	mov	r0, r4
 80113d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113d8:	f000 b818 	b.w	801140c <_kill_r>
 80113dc:	2b01      	cmp	r3, #1
 80113de:	d00a      	beq.n	80113f6 <_raise_r+0x4c>
 80113e0:	1c59      	adds	r1, r3, #1
 80113e2:	d103      	bne.n	80113ec <_raise_r+0x42>
 80113e4:	2316      	movs	r3, #22
 80113e6:	6003      	str	r3, [r0, #0]
 80113e8:	2001      	movs	r0, #1
 80113ea:	e7e7      	b.n	80113bc <_raise_r+0x12>
 80113ec:	2400      	movs	r4, #0
 80113ee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80113f2:	4628      	mov	r0, r5
 80113f4:	4798      	blx	r3
 80113f6:	2000      	movs	r0, #0
 80113f8:	e7e0      	b.n	80113bc <_raise_r+0x12>
	...

080113fc <raise>:
 80113fc:	4b02      	ldr	r3, [pc, #8]	; (8011408 <raise+0xc>)
 80113fe:	4601      	mov	r1, r0
 8011400:	6818      	ldr	r0, [r3, #0]
 8011402:	f7ff bfd2 	b.w	80113aa <_raise_r>
 8011406:	bf00      	nop
 8011408:	200001f0 	.word	0x200001f0

0801140c <_kill_r>:
 801140c:	b538      	push	{r3, r4, r5, lr}
 801140e:	4d07      	ldr	r5, [pc, #28]	; (801142c <_kill_r+0x20>)
 8011410:	2300      	movs	r3, #0
 8011412:	4604      	mov	r4, r0
 8011414:	4608      	mov	r0, r1
 8011416:	4611      	mov	r1, r2
 8011418:	602b      	str	r3, [r5, #0]
 801141a:	f7f1 faad 	bl	8002978 <_kill>
 801141e:	1c43      	adds	r3, r0, #1
 8011420:	d102      	bne.n	8011428 <_kill_r+0x1c>
 8011422:	682b      	ldr	r3, [r5, #0]
 8011424:	b103      	cbz	r3, 8011428 <_kill_r+0x1c>
 8011426:	6023      	str	r3, [r4, #0]
 8011428:	bd38      	pop	{r3, r4, r5, pc}
 801142a:	bf00      	nop
 801142c:	20005978 	.word	0x20005978

08011430 <_getpid_r>:
 8011430:	f7f1 ba9a 	b.w	8002968 <_getpid>

08011434 <_init>:
 8011434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011436:	bf00      	nop
 8011438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801143a:	bc08      	pop	{r3}
 801143c:	469e      	mov	lr, r3
 801143e:	4770      	bx	lr

08011440 <_fini>:
 8011440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011442:	bf00      	nop
 8011444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011446:	bc08      	pop	{r3}
 8011448:	469e      	mov	lr, r3
 801144a:	4770      	bx	lr
