
MotorCtrlSys_STM32F407ZET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000119e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dfc  08011b78  08011b78  00021b78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012974  08012974  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08012974  08012974  00022974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801297c  0801297c  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801297c  0801297c  0002297c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012980  08012980  00022980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08012984  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e8  2**0
                  CONTENTS
 10 .bss          0000554c  200001e8  200001e8  000301e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005734  20005734  000301e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028e16  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000057f2  00000000  00000000  0005902e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f70  00000000  00000000  0005e820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d30  00000000  00000000  00060790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b5cf  00000000  00000000  000624c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a4af  00000000  00000000  0008da8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eed30  00000000  00000000  000b7f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a6c6e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000923c  00000000  00000000  001a6cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011b5c 	.word	0x08011b5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08011b5c 	.word	0x08011b5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ebe:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <MX_ADC1_Init+0x98>)
 8000ec0:	4a21      	ldr	r2, [pc, #132]	; (8000f48 <MX_ADC1_Init+0x9c>)
 8000ec2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <MX_ADC1_Init+0x98>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eca:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <MX_ADC1_Init+0x98>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <MX_ADC1_Init+0x98>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <MX_ADC1_Init+0x98>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000edc:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <MX_ADC1_Init+0x98>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ee4:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <MX_ADC1_Init+0x98>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eea:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <MX_ADC1_Init+0x98>)
 8000eec:	4a17      	ldr	r2, [pc, #92]	; (8000f4c <MX_ADC1_Init+0xa0>)
 8000eee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ef0:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <MX_ADC1_Init+0x98>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <MX_ADC1_Init+0x98>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <MX_ADC1_Init+0x98>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <MX_ADC1_Init+0x98>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f0a:	480e      	ldr	r0, [pc, #56]	; (8000f44 <MX_ADC1_Init+0x98>)
 8000f0c:	f005 fe82 	bl	8006c14 <HAL_ADC_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f16:	f001 fbb9 	bl	800268c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f1a:	230a      	movs	r3, #10
 8000f1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000f22:	2301      	movs	r3, #1
 8000f24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f26:	463b      	mov	r3, r7
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4806      	ldr	r0, [pc, #24]	; (8000f44 <MX_ADC1_Init+0x98>)
 8000f2c:	f005 feb6 	bl	8006c9c <HAL_ADC_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f36:	f001 fba9 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000204 	.word	0x20000204
 8000f48:	40012000 	.word	0x40012000
 8000f4c:	0f000001 	.word	0x0f000001

08000f50 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f56:	463b      	mov	r3, r7
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000f62:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <MX_ADC2_Init+0x98>)
 8000f64:	4a21      	ldr	r2, [pc, #132]	; (8000fec <MX_ADC2_Init+0x9c>)
 8000f66:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f68:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <MX_ADC2_Init+0x98>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f6e:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <MX_ADC2_Init+0x98>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000f74:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <MX_ADC2_Init+0x98>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <MX_ADC2_Init+0x98>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <MX_ADC2_Init+0x98>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f88:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <MX_ADC2_Init+0x98>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f8e:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <MX_ADC2_Init+0x98>)
 8000f90:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <MX_ADC2_Init+0xa0>)
 8000f92:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <MX_ADC2_Init+0x98>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <MX_ADC2_Init+0x98>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <MX_ADC2_Init+0x98>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <MX_ADC2_Init+0x98>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fae:	480e      	ldr	r0, [pc, #56]	; (8000fe8 <MX_ADC2_Init+0x98>)
 8000fb0:	f005 fe30 	bl	8006c14 <HAL_ADC_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000fba:	f001 fb67 	bl	800268c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000fbe:	230c      	movs	r3, #12
 8000fc0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fca:	463b      	mov	r3, r7
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4806      	ldr	r0, [pc, #24]	; (8000fe8 <MX_ADC2_Init+0x98>)
 8000fd0:	f005 fe64 	bl	8006c9c <HAL_ADC_ConfigChannel>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000fda:	f001 fb57 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	2000024c 	.word	0x2000024c
 8000fec:	40012100 	.word	0x40012100
 8000ff0:	0f000001 	.word	0x0f000001

08000ff4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08c      	sub	sp, #48	; 0x30
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a2e      	ldr	r2, [pc, #184]	; (80010cc <HAL_ADC_MspInit+0xd8>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d128      	bne.n	8001068 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
 800101a:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <HAL_ADC_MspInit+0xdc>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	4a2c      	ldr	r2, [pc, #176]	; (80010d0 <HAL_ADC_MspInit+0xdc>)
 8001020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001024:	6453      	str	r3, [r2, #68]	; 0x44
 8001026:	4b2a      	ldr	r3, [pc, #168]	; (80010d0 <HAL_ADC_MspInit+0xdc>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102e:	61bb      	str	r3, [r7, #24]
 8001030:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <HAL_ADC_MspInit+0xdc>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a25      	ldr	r2, [pc, #148]	; (80010d0 <HAL_ADC_MspInit+0xdc>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b23      	ldr	r3, [pc, #140]	; (80010d0 <HAL_ADC_MspInit+0xdc>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = VM6_SensA_ADC_Pin|VM6_SensB_ADC_Pin;
 800104e:	2303      	movs	r3, #3
 8001050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001052:	2303      	movs	r3, #3
 8001054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	4619      	mov	r1, r3
 8001060:	481c      	ldr	r0, [pc, #112]	; (80010d4 <HAL_ADC_MspInit+0xe0>)
 8001062:	f006 fe81 	bl	8007d68 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001066:	e02c      	b.n	80010c2 <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a1a      	ldr	r2, [pc, #104]	; (80010d8 <HAL_ADC_MspInit+0xe4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d127      	bne.n	80010c2 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <HAL_ADC_MspInit+0xdc>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	4a15      	ldr	r2, [pc, #84]	; (80010d0 <HAL_ADC_MspInit+0xdc>)
 800107c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001080:	6453      	str	r3, [r2, #68]	; 0x44
 8001082:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <HAL_ADC_MspInit+0xdc>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <HAL_ADC_MspInit+0xdc>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <HAL_ADC_MspInit+0xdc>)
 8001098:	f043 0304 	orr.w	r3, r3, #4
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <HAL_ADC_MspInit+0xdc>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0304 	and.w	r3, r3, #4
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VM8_SensA_ADC_Pin|VM8_SensB_ADC_Pin;
 80010aa:	230c      	movs	r3, #12
 80010ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ae:	2303      	movs	r3, #3
 80010b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	4619      	mov	r1, r3
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <HAL_ADC_MspInit+0xe0>)
 80010be:	f006 fe53 	bl	8007d68 <HAL_GPIO_Init>
}
 80010c2:	bf00      	nop
 80010c4:	3730      	adds	r7, #48	; 0x30
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40012000 	.word	0x40012000
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40020800 	.word	0x40020800
 80010d8:	40012100 	.word	0x40012100

080010dc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80010e0:	4b16      	ldr	r3, [pc, #88]	; (800113c <MX_CAN1_Init+0x60>)
 80010e2:	4a17      	ldr	r2, [pc, #92]	; (8001140 <MX_CAN1_Init+0x64>)
 80010e4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <MX_CAN1_Init+0x60>)
 80010e8:	2210      	movs	r2, #16
 80010ea:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <MX_CAN1_Init+0x60>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <MX_CAN1_Init+0x60>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <MX_CAN1_Init+0x60>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <MX_CAN1_Init+0x60>)
 8001100:	2200      	movs	r2, #0
 8001102:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001104:	4b0d      	ldr	r3, [pc, #52]	; (800113c <MX_CAN1_Init+0x60>)
 8001106:	2200      	movs	r2, #0
 8001108:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_CAN1_Init+0x60>)
 800110c:	2200      	movs	r2, #0
 800110e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <MX_CAN1_Init+0x60>)
 8001112:	2200      	movs	r2, #0
 8001114:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_CAN1_Init+0x60>)
 8001118:	2200      	movs	r2, #0
 800111a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800111c:	4b07      	ldr	r3, [pc, #28]	; (800113c <MX_CAN1_Init+0x60>)
 800111e:	2200      	movs	r2, #0
 8001120:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <MX_CAN1_Init+0x60>)
 8001124:	2200      	movs	r2, #0
 8001126:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <MX_CAN1_Init+0x60>)
 800112a:	f005 ffd5 	bl	80070d8 <HAL_CAN_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001134:	f001 faaa 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000294 	.word	0x20000294
 8001140:	40006400 	.word	0x40006400

08001144 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a19      	ldr	r2, [pc, #100]	; (80011c8 <HAL_CAN_MspInit+0x84>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d12c      	bne.n	80011c0 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <HAL_CAN_MspInit+0x88>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	4a17      	ldr	r2, [pc, #92]	; (80011cc <HAL_CAN_MspInit+0x88>)
 8001170:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001174:	6413      	str	r3, [r2, #64]	; 0x40
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <HAL_CAN_MspInit+0x88>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HAL_CAN_MspInit+0x88>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a10      	ldr	r2, [pc, #64]	; (80011cc <HAL_CAN_MspInit+0x88>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <HAL_CAN_MspInit+0x88>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800119e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80011b0:	2309      	movs	r3, #9
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4619      	mov	r1, r3
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <HAL_CAN_MspInit+0x8c>)
 80011bc:	f006 fdd4 	bl	8007d68 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80011c0:	bf00      	nop
 80011c2:	3728      	adds	r7, #40	; 0x28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40006400 	.word	0x40006400
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020000 	.word	0x40020000

080011d4 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011da:	463b      	mov	r3, r7
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_DAC_Init+0x4c>)
 80011e4:	4a0f      	ldr	r2, [pc, #60]	; (8001224 <MX_DAC_Init+0x50>)
 80011e6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011e8:	480d      	ldr	r0, [pc, #52]	; (8001220 <MX_DAC_Init+0x4c>)
 80011ea:	f006 f953 	bl	8007494 <HAL_DAC_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011f4:	f001 fa4a 	bl	800268c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001200:	463b      	mov	r3, r7
 8001202:	2200      	movs	r2, #0
 8001204:	4619      	mov	r1, r3
 8001206:	4806      	ldr	r0, [pc, #24]	; (8001220 <MX_DAC_Init+0x4c>)
 8001208:	f006 f9ca 	bl	80075a0 <HAL_DAC_ConfigChannel>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001212:	f001 fa3b 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200002bc 	.word	0x200002bc
 8001224:	40007400 	.word	0x40007400

08001228 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	; 0x28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a1b      	ldr	r2, [pc, #108]	; (80012b4 <HAL_DAC_MspInit+0x8c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d12f      	bne.n	80012aa <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <HAL_DAC_MspInit+0x90>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	4a19      	ldr	r2, [pc, #100]	; (80012b8 <HAL_DAC_MspInit+0x90>)
 8001254:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001258:	6413      	str	r3, [r2, #64]	; 0x40
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <HAL_DAC_MspInit+0x90>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <HAL_DAC_MspInit+0x90>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <HAL_DAC_MspInit+0x90>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <HAL_DAC_MspInit+0x90>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001282:	2310      	movs	r3, #16
 8001284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001286:	2303      	movs	r3, #3
 8001288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	4809      	ldr	r0, [pc, #36]	; (80012bc <HAL_DAC_MspInit+0x94>)
 8001296:	f006 fd67 	bl	8007d68 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 7, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2107      	movs	r1, #7
 800129e:	2036      	movs	r0, #54	; 0x36
 80012a0:	f006 f8ce 	bl	8007440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012a4:	2036      	movs	r0, #54	; 0x36
 80012a6:	f006 f8e7 	bl	8007478 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80012aa:	bf00      	nop
 80012ac:	3728      	adds	r7, #40	; 0x28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40007400 	.word	0x40007400
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020000 	.word	0x40020000

080012c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_DMA_Init+0x3c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a0b      	ldr	r2, [pc, #44]	; (80012fc <MX_DMA_Init+0x3c>)
 80012d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_DMA_Init+0x3c>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 7, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2107      	movs	r1, #7
 80012e6:	200d      	movs	r0, #13
 80012e8:	f006 f8aa 	bl	8007440 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80012ec:	200d      	movs	r0, #13
 80012ee:	f006 f8c3 	bl	8007478 <HAL_NVIC_EnableIRQ>

}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800

08001300 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001304:	4a10      	ldr	r2, [pc, #64]	; (8001348 <MX_FREERTOS_Init+0x48>)
 8001306:	2100      	movs	r1, #0
 8001308:	4810      	ldr	r0, [pc, #64]	; (800134c <MX_FREERTOS_Init+0x4c>)
 800130a:	f00b f8b7 	bl	800c47c <osThreadNew>
 800130e:	4603      	mov	r3, r0
 8001310:	4a0f      	ldr	r2, [pc, #60]	; (8001350 <MX_FREERTOS_Init+0x50>)
 8001312:	6013      	str	r3, [r2, #0]

  /* creation of messageTask */
  messageTaskHandle = osThreadNew(StartmessageTask, NULL, &messageTask_attributes);
 8001314:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <MX_FREERTOS_Init+0x54>)
 8001316:	2100      	movs	r1, #0
 8001318:	480f      	ldr	r0, [pc, #60]	; (8001358 <MX_FREERTOS_Init+0x58>)
 800131a:	f00b f8af 	bl	800c47c <osThreadNew>
 800131e:	4603      	mov	r3, r0
 8001320:	4a0e      	ldr	r2, [pc, #56]	; (800135c <MX_FREERTOS_Init+0x5c>)
 8001322:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8001324:	4a0e      	ldr	r2, [pc, #56]	; (8001360 <MX_FREERTOS_Init+0x60>)
 8001326:	2100      	movs	r1, #0
 8001328:	480e      	ldr	r0, [pc, #56]	; (8001364 <MX_FREERTOS_Init+0x64>)
 800132a:	f00b f8a7 	bl	800c47c <osThreadNew>
 800132e:	4603      	mov	r3, r0
 8001330:	4a0d      	ldr	r2, [pc, #52]	; (8001368 <MX_FREERTOS_Init+0x68>)
 8001332:	6013      	str	r3, [r2, #0]

  /* creation of DetectionTask */
  DetectionTaskHandle = osThreadNew(StartDetectionTask, NULL, &DetectionTask_attributes);
 8001334:	4a0d      	ldr	r2, [pc, #52]	; (800136c <MX_FREERTOS_Init+0x6c>)
 8001336:	2100      	movs	r1, #0
 8001338:	480d      	ldr	r0, [pc, #52]	; (8001370 <MX_FREERTOS_Init+0x70>)
 800133a:	f00b f89f 	bl	800c47c <osThreadNew>
 800133e:	4603      	mov	r3, r0
 8001340:	4a0c      	ldr	r2, [pc, #48]	; (8001374 <MX_FREERTOS_Init+0x74>)
 8001342:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	080124e8 	.word	0x080124e8
 800134c:	08001379 	.word	0x08001379
 8001350:	200002d0 	.word	0x200002d0
 8001354:	0801250c 	.word	0x0801250c
 8001358:	08006175 	.word	0x08006175
 800135c:	200002d4 	.word	0x200002d4
 8001360:	08012530 	.word	0x08012530
 8001364:	08006541 	.word	0x08006541
 8001368:	200002d8 	.word	0x200002d8
 800136c:	08012554 	.word	0x08012554
 8001370:	08001399 	.word	0x08001399
 8001374:	200002dc 	.word	0x200002dc

08001378 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  LED_Heart_Toggle();
 8001380:	2120      	movs	r1, #32
 8001382:	4804      	ldr	r0, [pc, #16]	; (8001394 <StartDefaultTask+0x1c>)
 8001384:	f006 febd 	bl	8008102 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8001388:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800138c:	f00b f908 	bl	800c5a0 <osDelay>
	  LED_Heart_Toggle();
 8001390:	e7f6      	b.n	8001380 <StartDefaultTask+0x8>
 8001392:	bf00      	nop
 8001394:	40021800 	.word	0x40021800

08001398 <StartDetectionTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDetectionTask */
__weak void StartDetectionTask(void *argument)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDetectionTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 80013a0:	f242 7010 	movw	r0, #10000	; 0x2710
 80013a4:	f00b f8fc 	bl	800c5a0 <osDelay>
 80013a8:	e7fa      	b.n	80013a0 <StartDetectionTask+0x8>
	...

080013ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08e      	sub	sp, #56	; 0x38
 80013b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
 80013c6:	4bb5      	ldr	r3, [pc, #724]	; (800169c <MX_GPIO_Init+0x2f0>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4ab4      	ldr	r2, [pc, #720]	; (800169c <MX_GPIO_Init+0x2f0>)
 80013cc:	f043 0310 	orr.w	r3, r3, #16
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4bb2      	ldr	r3, [pc, #712]	; (800169c <MX_GPIO_Init+0x2f0>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	623b      	str	r3, [r7, #32]
 80013dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
 80013e2:	4bae      	ldr	r3, [pc, #696]	; (800169c <MX_GPIO_Init+0x2f0>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4aad      	ldr	r2, [pc, #692]	; (800169c <MX_GPIO_Init+0x2f0>)
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4bab      	ldr	r3, [pc, #684]	; (800169c <MX_GPIO_Init+0x2f0>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0304 	and.w	r3, r3, #4
 80013f6:	61fb      	str	r3, [r7, #28]
 80013f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	61bb      	str	r3, [r7, #24]
 80013fe:	4ba7      	ldr	r3, [pc, #668]	; (800169c <MX_GPIO_Init+0x2f0>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4aa6      	ldr	r2, [pc, #664]	; (800169c <MX_GPIO_Init+0x2f0>)
 8001404:	f043 0320 	orr.w	r3, r3, #32
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4ba4      	ldr	r3, [pc, #656]	; (800169c <MX_GPIO_Init+0x2f0>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0320 	and.w	r3, r3, #32
 8001412:	61bb      	str	r3, [r7, #24]
 8001414:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	4ba0      	ldr	r3, [pc, #640]	; (800169c <MX_GPIO_Init+0x2f0>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a9f      	ldr	r2, [pc, #636]	; (800169c <MX_GPIO_Init+0x2f0>)
 8001420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b9d      	ldr	r3, [pc, #628]	; (800169c <MX_GPIO_Init+0x2f0>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	4b99      	ldr	r3, [pc, #612]	; (800169c <MX_GPIO_Init+0x2f0>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a98      	ldr	r2, [pc, #608]	; (800169c <MX_GPIO_Init+0x2f0>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b96      	ldr	r3, [pc, #600]	; (800169c <MX_GPIO_Init+0x2f0>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	4b92      	ldr	r3, [pc, #584]	; (800169c <MX_GPIO_Init+0x2f0>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a91      	ldr	r2, [pc, #580]	; (800169c <MX_GPIO_Init+0x2f0>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b8f      	ldr	r3, [pc, #572]	; (800169c <MX_GPIO_Init+0x2f0>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	4b8b      	ldr	r3, [pc, #556]	; (800169c <MX_GPIO_Init+0x2f0>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a8a      	ldr	r2, [pc, #552]	; (800169c <MX_GPIO_Init+0x2f0>)
 8001474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b88      	ldr	r3, [pc, #544]	; (800169c <MX_GPIO_Init+0x2f0>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	4b84      	ldr	r3, [pc, #528]	; (800169c <MX_GPIO_Init+0x2f0>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a83      	ldr	r2, [pc, #524]	; (800169c <MX_GPIO_Init+0x2f0>)
 8001490:	f043 0308 	orr.w	r3, r3, #8
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b81      	ldr	r3, [pc, #516]	; (800169c <MX_GPIO_Init+0x2f0>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VM4_Step_Pin|VM4_Dir_Pin|VM6_IN1_Pin|VM6_IN2_Pin
 80014a2:	2200      	movs	r2, #0
 80014a4:	f248 31f6 	movw	r1, #33782	; 0x83f6
 80014a8:	487d      	ldr	r0, [pc, #500]	; (80016a0 <MX_GPIO_Init+0x2f4>)
 80014aa:	f006 fe11 	bl	80080d0 <HAL_GPIO_WritePin>
                          |VM6_EnA_Pin|VM5_EnB_Pin|VM5_EnA_Pin|BEEP_Pin
                          |VM3_Dir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VM4_En_Pin|VM3_En_Pin, GPIO_PIN_SET);
 80014ae:	2201      	movs	r2, #1
 80014b0:	2109      	movs	r1, #9
 80014b2:	487b      	ldr	r0, [pc, #492]	; (80016a0 <MX_GPIO_Init+0x2f4>)
 80014b4:	f006 fe0c 	bl	80080d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, FDCshutdown_Pin|OUT6_Pin|OUT5_Pin|OUT4_Pin
 80014b8:	2200      	movs	r2, #0
 80014ba:	f24e 71e8 	movw	r1, #59368	; 0xe7e8
 80014be:	4879      	ldr	r0, [pc, #484]	; (80016a4 <MX_GPIO_Init+0x2f8>)
 80014c0:	f006 fe06 	bl	80080d0 <HAL_GPIO_WritePin>
                          |OUT3_Pin|OUT2_Pin|OUT1_Pin|VM8_EnB_Pin
                          |VM8_EnA_Pin|VM7_EnB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VM8_IN3_Pin|VM8_IN4_Pin, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	210c      	movs	r1, #12
 80014c8:	4877      	ldr	r0, [pc, #476]	; (80016a8 <MX_GPIO_Init+0x2fc>)
 80014ca:	f006 fe01 	bl	80080d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VM7_IN3_Pin|VM7_IN4_Pin|VM7_IN1_Pin|VM7_IN2_Pin
 80014ce:	2200      	movs	r2, #0
 80014d0:	f64f 716b 	movw	r1, #65387	; 0xff6b
 80014d4:	4875      	ldr	r0, [pc, #468]	; (80016ac <MX_GPIO_Init+0x300>)
 80014d6:	f006 fdfb 	bl	80080d0 <HAL_GPIO_WritePin>
                          |VM5_IN1_Pin|VM5_IN2_Pin|VM5_IN3_Pin|VM5_IN4_Pin
                          |VM1_Step_Pin|VM1_Dir_Pin|VM2_Step_Pin|VM2_Dir_Pin
                          |VM3_Step_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, VM7_EnA_Pin|VM6_EnB_Pin|LED_Heart_Pin, GPIO_PIN_RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	2123      	movs	r1, #35	; 0x23
 80014de:	4874      	ldr	r0, [pc, #464]	; (80016b0 <MX_GPIO_Init+0x304>)
 80014e0:	f006 fdf6 	bl	80080d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, VM8_IN1_Pin|VM8_IN2_Pin, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80014ea:	4872      	ldr	r0, [pc, #456]	; (80016b4 <MX_GPIO_Init+0x308>)
 80014ec:	f006 fdf0 	bl	80080d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED2_Pin|LED1_Pin|LED0_Pin, GPIO_PIN_SET);
 80014f0:	2201      	movs	r2, #1
 80014f2:	211c      	movs	r1, #28
 80014f4:	486e      	ldr	r0, [pc, #440]	; (80016b0 <MX_GPIO_Init+0x304>)
 80014f6:	f006 fdeb 	bl	80080d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VM6_IN3_Pin|VM6_IN4_Pin, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001500:	486d      	ldr	r0, [pc, #436]	; (80016b8 <MX_GPIO_Init+0x30c>)
 8001502:	f006 fde5 	bl	80080d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VM1_En_Pin|VM2_En_Pin, GPIO_PIN_SET);
 8001506:	2201      	movs	r2, #1
 8001508:	2190      	movs	r1, #144	; 0x90
 800150a:	4868      	ldr	r0, [pc, #416]	; (80016ac <MX_GPIO_Init+0x300>)
 800150c:	f006 fde0 	bl	80080d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VM4_Step_Pin;
 8001510:	2304      	movs	r3, #4
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001514:	2301      	movs	r3, #1
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(VM4_Step_GPIO_Port, &GPIO_InitStruct);
 8001520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001524:	4619      	mov	r1, r3
 8001526:	485e      	ldr	r0, [pc, #376]	; (80016a0 <MX_GPIO_Init+0x2f4>)
 8001528:	f006 fc1e 	bl	8007d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = VM4_En_Pin|VM4_Dir_Pin|BEEP_Pin|VM3_En_Pin
 800152c:	f248 031b 	movw	r3, #32795	; 0x801b
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
                          |VM3_Dir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2301      	movs	r3, #1
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800153e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001542:	4619      	mov	r1, r3
 8001544:	4856      	ldr	r0, [pc, #344]	; (80016a0 <MX_GPIO_Init+0x2f4>)
 8001546:	f006 fc0f 	bl	8007d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = VM6_IN1_Pin|VM6_IN2_Pin;
 800154a:	2360      	movs	r3, #96	; 0x60
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	2301      	movs	r3, #1
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001556:	2302      	movs	r3, #2
 8001558:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800155a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155e:	4619      	mov	r1, r3
 8001560:	484f      	ldr	r0, [pc, #316]	; (80016a0 <MX_GPIO_Init+0x2f4>)
 8001562:	f006 fc01 	bl	8007d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FDCINTB_Pin;
 8001566:	2304      	movs	r3, #4
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156a:	2300      	movs	r3, #0
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(FDCINTB_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001576:	4619      	mov	r1, r3
 8001578:	484a      	ldr	r0, [pc, #296]	; (80016a4 <MX_GPIO_Init+0x2f8>)
 800157a:	f006 fbf5 	bl	8007d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FDCshutdown_Pin;
 800157e:	2308      	movs	r3, #8
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001582:	2301      	movs	r3, #1
 8001584:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FDCshutdown_GPIO_Port, &GPIO_InitStruct);
 800158e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001592:	4619      	mov	r1, r3
 8001594:	4843      	ldr	r0, [pc, #268]	; (80016a4 <MX_GPIO_Init+0x2f8>)
 8001596:	f006 fbe7 	bl	8007d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = OUT6_Pin|OUT5_Pin|OUT4_Pin|OUT3_Pin
 800159a:	f24e 73e0 	movw	r3, #59360	; 0xe7e0
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT2_Pin|OUT1_Pin|VM8_EnB_Pin|VM8_EnA_Pin
                          |VM7_EnB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a0:	2301      	movs	r3, #1
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015a4:	2302      	movs	r3, #2
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b0:	4619      	mov	r1, r3
 80015b2:	483c      	ldr	r0, [pc, #240]	; (80016a4 <MX_GPIO_Init+0x2f8>)
 80015b4:	f006 fbd8 	bl	8007d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Liquid_Detect_Pin;
 80015b8:	2301      	movs	r3, #1
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80015bc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015c2:	2301      	movs	r3, #1
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Liquid_Detect_GPIO_Port, &GPIO_InitStruct);
 80015c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ca:	4619      	mov	r1, r3
 80015cc:	4836      	ldr	r0, [pc, #216]	; (80016a8 <MX_GPIO_Init+0x2fc>)
 80015ce:	f006 fbcb 	bl	8007d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VM8_IN3_Pin|VM8_IN4_Pin;
 80015d2:	230c      	movs	r3, #12
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d6:	2301      	movs	r3, #1
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015de:	2302      	movs	r3, #2
 80015e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e6:	4619      	mov	r1, r3
 80015e8:	482f      	ldr	r0, [pc, #188]	; (80016a8 <MX_GPIO_Init+0x2fc>)
 80015ea:	f006 fbbd 	bl	8007d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Encoder3_Z_Pin|Encoder4_Z_Pin;
 80015ee:	2330      	movs	r3, #48	; 0x30
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fe:	4619      	mov	r1, r3
 8001600:	482d      	ldr	r0, [pc, #180]	; (80016b8 <MX_GPIO_Init+0x30c>)
 8001602:	f006 fbb1 	bl	8007d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = VM7_IN3_Pin|VM7_IN4_Pin|VM7_IN1_Pin|VM7_IN2_Pin
 8001606:	f64f 4303 	movw	r3, #64515	; 0xfc03
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
                          |VM5_IN1_Pin|VM5_IN2_Pin|VM5_IN3_Pin|VM5_IN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160c:	2301      	movs	r3, #1
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001614:	2302      	movs	r3, #2
 8001616:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161c:	4619      	mov	r1, r3
 800161e:	4823      	ldr	r0, [pc, #140]	; (80016ac <MX_GPIO_Init+0x300>)
 8001620:	f006 fba2 	bl	8007d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = VM7_EnA_Pin|VM6_EnB_Pin;
 8001624:	2303      	movs	r3, #3
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001628:	2301      	movs	r3, #1
 800162a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800162c:	2302      	movs	r3, #2
 800162e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001638:	4619      	mov	r1, r3
 800163a:	481d      	ldr	r0, [pc, #116]	; (80016b0 <MX_GPIO_Init+0x304>)
 800163c:	f006 fb94 	bl	8007d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VM6_EnA_Pin|VM5_EnB_Pin|VM5_EnA_Pin;
 8001640:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001646:	2301      	movs	r3, #1
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800164a:	2302      	movs	r3, #2
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	2300      	movs	r3, #0
 8001650:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001656:	4619      	mov	r1, r3
 8001658:	4811      	ldr	r0, [pc, #68]	; (80016a0 <MX_GPIO_Init+0x2f4>)
 800165a:	f006 fb85 	bl	8007d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encoder2_Z_Pin;
 800165e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001664:	2300      	movs	r3, #0
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Encoder2_Z_GPIO_Port, &GPIO_InitStruct);
 800166c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001670:	4619      	mov	r1, r3
 8001672:	4810      	ldr	r0, [pc, #64]	; (80016b4 <MX_GPIO_Init+0x308>)
 8001674:	f006 fb78 	bl	8007d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = VM8_IN1_Pin|VM8_IN2_Pin;
 8001678:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167e:	2301      	movs	r3, #1
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001686:	2302      	movs	r3, #2
 8001688:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800168a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168e:	4619      	mov	r1, r3
 8001690:	4808      	ldr	r0, [pc, #32]	; (80016b4 <MX_GPIO_Init+0x308>)
 8001692:	f006 fb69 	bl	8007d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|LED0_Pin|LED_Heart_Pin;
 8001696:	233c      	movs	r3, #60	; 0x3c
 8001698:	e010      	b.n	80016bc <MX_GPIO_Init+0x310>
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40021400 	.word	0x40021400
 80016a8:	40020000 	.word	0x40020000
 80016ac:	40020400 	.word	0x40020400
 80016b0:	40021800 	.word	0x40021800
 80016b4:	40020c00 	.word	0x40020c00
 80016b8:	40020800 	.word	0x40020800
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016be:	2301      	movs	r3, #1
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ce:	4619      	mov	r1, r3
 80016d0:	4848      	ldr	r0, [pc, #288]	; (80017f4 <MX_GPIO_Init+0x448>)
 80016d2:	f006 fb49 	bl	8007d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin|KEY2_Pin;
 80016d6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016dc:	2300      	movs	r3, #0
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e0:	2301      	movs	r3, #1
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e8:	4619      	mov	r1, r3
 80016ea:	4842      	ldr	r0, [pc, #264]	; (80017f4 <MX_GPIO_Init+0x448>)
 80016ec:	f006 fb3c 	bl	8007d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VM6_IN3_Pin|VM6_IN4_Pin;
 80016f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f6:	2301      	movs	r3, #1
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016fe:	2302      	movs	r3, #2
 8001700:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001706:	4619      	mov	r1, r3
 8001708:	483b      	ldr	r0, [pc, #236]	; (80017f8 <MX_GPIO_Init+0x44c>)
 800170a:	f006 fb2d 	bl	8007d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Encoder1_Z_Pin;
 800170e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001714:	2300      	movs	r3, #0
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Encoder1_Z_GPIO_Port, &GPIO_InitStruct);
 800171c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001720:	4619      	mov	r1, r3
 8001722:	4836      	ldr	r0, [pc, #216]	; (80017fc <MX_GPIO_Init+0x450>)
 8001724:	f006 fb20 	bl	8007d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = OPT_IN1_Pin|OPT_IN2_Pin|OPT_IN3_Pin|OPT_IN4_Pin
 8001728:	23f8      	movs	r3, #248	; 0xf8
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
                          |OPT_IN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800172c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001730:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173a:	4619      	mov	r1, r3
 800173c:	4830      	ldr	r0, [pc, #192]	; (8001800 <MX_GPIO_Init+0x454>)
 800173e:	f006 fb13 	bl	8007d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OPT_IN6_Pin|OPT_IN7_Pin|OPT_IN8_Pin|OPT_IN9_Pin
 8001742:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
                          |OPT_IN10_Pin|OPT_IN11_Pin|OPT_IN12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001748:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800174c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001756:	4619      	mov	r1, r3
 8001758:	4826      	ldr	r0, [pc, #152]	; (80017f4 <MX_GPIO_Init+0x448>)
 800175a:	f006 fb05 	bl	8007d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = VM1_Step_Pin|VM2_Step_Pin|VM3_Step_Pin;
 800175e:	f44f 7312 	mov.w	r3, #584	; 0x248
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001764:	2301      	movs	r3, #1
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001774:	4619      	mov	r1, r3
 8001776:	4823      	ldr	r0, [pc, #140]	; (8001804 <MX_GPIO_Init+0x458>)
 8001778:	f006 faf6 	bl	8007d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = VM1_En_Pin|VM1_Dir_Pin|VM2_En_Pin|VM2_Dir_Pin;
 800177c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001782:	2301      	movs	r3, #1
 8001784:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001792:	4619      	mov	r1, r3
 8001794:	481b      	ldr	r0, [pc, #108]	; (8001804 <MX_GPIO_Init+0x458>)
 8001796:	f006 fae7 	bl	8007d68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2105      	movs	r1, #5
 800179e:	2006      	movs	r0, #6
 80017a0:	f005 fe4e 	bl	8007440 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80017a4:	2006      	movs	r0, #6
 80017a6:	f005 fe67 	bl	8007478 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2105      	movs	r1, #5
 80017ae:	2009      	movs	r0, #9
 80017b0:	f005 fe46 	bl	8007440 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80017b4:	2009      	movs	r0, #9
 80017b6:	f005 fe5f 	bl	8007478 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2105      	movs	r1, #5
 80017be:	200a      	movs	r0, #10
 80017c0:	f005 fe3e 	bl	8007440 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80017c4:	200a      	movs	r0, #10
 80017c6:	f005 fe57 	bl	8007478 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2105      	movs	r1, #5
 80017ce:	2017      	movs	r0, #23
 80017d0:	f005 fe36 	bl	8007440 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017d4:	2017      	movs	r0, #23
 80017d6:	f005 fe4f 	bl	8007478 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2105      	movs	r1, #5
 80017de:	2028      	movs	r0, #40	; 0x28
 80017e0:	f005 fe2e 	bl	8007440 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017e4:	2028      	movs	r0, #40	; 0x28
 80017e6:	f005 fe47 	bl	8007478 <HAL_NVIC_EnableIRQ>

}
 80017ea:	bf00      	nop
 80017ec:	3738      	adds	r7, #56	; 0x38
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40021800 	.word	0x40021800
 80017f8:	40020800 	.word	0x40020800
 80017fc:	40020000 	.word	0x40020000
 8001800:	40020c00 	.word	0x40020c00
 8001804:	40020400 	.word	0x40020400

08001808 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	80fb      	strh	r3, [r7, #6]
    switch(GPIO_Pin)
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001818:	f000 8098 	beq.w	800194c <HAL_GPIO_EXTI_Callback+0x144>
 800181c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001820:	f300 80aa 	bgt.w	8001978 <HAL_GPIO_EXTI_Callback+0x170>
 8001824:	2b80      	cmp	r3, #128	; 0x80
 8001826:	f000 8086 	beq.w	8001936 <HAL_GPIO_EXTI_Callback+0x12e>
 800182a:	2b80      	cmp	r3, #128	; 0x80
 800182c:	f300 80a4 	bgt.w	8001978 <HAL_GPIO_EXTI_Callback+0x170>
 8001830:	2b20      	cmp	r3, #32
 8001832:	dc49      	bgt.n	80018c8 <HAL_GPIO_EXTI_Callback+0xc0>
 8001834:	2b00      	cmp	r3, #0
 8001836:	f340 809f 	ble.w	8001978 <HAL_GPIO_EXTI_Callback+0x170>
 800183a:	3b01      	subs	r3, #1
 800183c:	2b1f      	cmp	r3, #31
 800183e:	f200 809b 	bhi.w	8001978 <HAL_GPIO_EXTI_Callback+0x170>
 8001842:	a201      	add	r2, pc, #4	; (adr r2, 8001848 <HAL_GPIO_EXTI_Callback+0x40>)
 8001844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001848:	080018cf 	.word	0x080018cf
 800184c:	08001979 	.word	0x08001979
 8001850:	08001979 	.word	0x08001979
 8001854:	08001979 	.word	0x08001979
 8001858:	08001979 	.word	0x08001979
 800185c:	08001979 	.word	0x08001979
 8001860:	08001979 	.word	0x08001979
 8001864:	080018d5 	.word	0x080018d5
 8001868:	08001979 	.word	0x08001979
 800186c:	08001979 	.word	0x08001979
 8001870:	08001979 	.word	0x08001979
 8001874:	08001979 	.word	0x08001979
 8001878:	08001979 	.word	0x08001979
 800187c:	08001979 	.word	0x08001979
 8001880:	08001979 	.word	0x08001979
 8001884:	080018f5 	.word	0x080018f5
 8001888:	08001979 	.word	0x08001979
 800188c:	08001979 	.word	0x08001979
 8001890:	08001979 	.word	0x08001979
 8001894:	08001979 	.word	0x08001979
 8001898:	08001979 	.word	0x08001979
 800189c:	08001979 	.word	0x08001979
 80018a0:	08001979 	.word	0x08001979
 80018a4:	08001979 	.word	0x08001979
 80018a8:	08001979 	.word	0x08001979
 80018ac:	08001979 	.word	0x08001979
 80018b0:	08001979 	.word	0x08001979
 80018b4:	08001979 	.word	0x08001979
 80018b8:	08001979 	.word	0x08001979
 80018bc:	08001979 	.word	0x08001979
 80018c0:	08001979 	.word	0x08001979
 80018c4:	0800190b 	.word	0x0800190b
 80018c8:	2b40      	cmp	r3, #64	; 0x40
 80018ca:	d029      	beq.n	8001920 <HAL_GPIO_EXTI_Callback+0x118>
        		 ;
        	}
            break;
#endif
    }
}
 80018cc:	e054      	b.n	8001978 <HAL_GPIO_EXTI_Callback+0x170>
        	if (Liquid_Detect_GPIO_Port->IDR & Liquid_Detect_Pin){ 	// if Rising edge trigger
 80018ce:	4b2d      	ldr	r3, [pc, #180]	; (8001984 <HAL_GPIO_EXTI_Callback+0x17c>)
 80018d0:	691b      	ldr	r3, [r3, #16]
            break;
 80018d2:	e051      	b.n	8001978 <HAL_GPIO_EXTI_Callback+0x170>
        	if (OPT_IN1_GPIO_Port->IDR & OPT_IN1_Pin){ 	// if Rising edge trigger
 80018d4:	4b2c      	ldr	r3, [pc, #176]	; (8001988 <HAL_GPIO_EXTI_Callback+0x180>)
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d140      	bne.n	8001962 <HAL_GPIO_EXTI_Callback+0x15a>
        		if(Motor[1].MotorDirection == 0){
 80018e0:	4b2a      	ldr	r3, [pc, #168]	; (800198c <HAL_GPIO_EXTI_Callback+0x184>)
 80018e2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d13b      	bne.n	8001962 <HAL_GPIO_EXTI_Callback+0x15a>
        			Motor[1].StepPosition =0 ;
 80018ea:	4b28      	ldr	r3, [pc, #160]	; (800198c <HAL_GPIO_EXTI_Callback+0x184>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            break;
 80018f2:	e036      	b.n	8001962 <HAL_GPIO_EXTI_Callback+0x15a>
        	if (OPT_IN2_GPIO_Port->IDR & OPT_IN2_Pin){ 	// if Rising edge trigger
 80018f4:	4b24      	ldr	r3, [pc, #144]	; (8001988 <HAL_GPIO_EXTI_Callback+0x180>)
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	f003 0310 	and.w	r3, r3, #16
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d132      	bne.n	8001966 <HAL_GPIO_EXTI_Callback+0x15e>
        		Motor[2].StepPosition =0 ;
 8001900:	4b22      	ldr	r3, [pc, #136]	; (800198c <HAL_GPIO_EXTI_Callback+0x184>)
 8001902:	2200      	movs	r2, #0
 8001904:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
        	break;
 8001908:	e02d      	b.n	8001966 <HAL_GPIO_EXTI_Callback+0x15e>
        	if (OPT_IN3_GPIO_Port->IDR & OPT_IN3_Pin) { 	// if Rising edge trigger
 800190a:	4b1f      	ldr	r3, [pc, #124]	; (8001988 <HAL_GPIO_EXTI_Callback+0x180>)
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	f003 0320 	and.w	r3, r3, #32
 8001912:	2b00      	cmp	r3, #0
 8001914:	d129      	bne.n	800196a <HAL_GPIO_EXTI_Callback+0x162>
        		Motor[3].StepPosition =0 ;
 8001916:	4b1d      	ldr	r3, [pc, #116]	; (800198c <HAL_GPIO_EXTI_Callback+0x184>)
 8001918:	2200      	movs	r2, #0
 800191a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        	break;
 800191e:	e024      	b.n	800196a <HAL_GPIO_EXTI_Callback+0x162>
        	if (OPT_IN4_GPIO_Port->IDR & OPT_IN4_Pin) { 	// if Rising edge trigger
 8001920:	4b19      	ldr	r3, [pc, #100]	; (8001988 <HAL_GPIO_EXTI_Callback+0x180>)
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001928:	2b00      	cmp	r3, #0
 800192a:	d020      	beq.n	800196e <HAL_GPIO_EXTI_Callback+0x166>
        		Motor[4].StepPosition =0 ;
 800192c:	4b17      	ldr	r3, [pc, #92]	; (800198c <HAL_GPIO_EXTI_Callback+0x184>)
 800192e:	2200      	movs	r2, #0
 8001930:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
            break;
 8001934:	e01b      	b.n	800196e <HAL_GPIO_EXTI_Callback+0x166>
        	if (OPT_IN5_GPIO_Port->IDR & OPT_IN5_Pin) { 	// if Rising edge trigger
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <HAL_GPIO_EXTI_Callback+0x180>)
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800193e:	2b00      	cmp	r3, #0
 8001940:	d117      	bne.n	8001972 <HAL_GPIO_EXTI_Callback+0x16a>
        		Motor[5].StepPosition =0 ;
 8001942:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_GPIO_EXTI_Callback+0x184>)
 8001944:	2200      	movs	r2, #0
 8001946:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
            break;
 800194a:	e012      	b.n	8001972 <HAL_GPIO_EXTI_Callback+0x16a>
        	if (OPT_IN6_GPIO_Port->IDR & OPT_IN6_Pin) { 	// if Rising edge trigger
 800194c:	4b10      	ldr	r3, [pc, #64]	; (8001990 <HAL_GPIO_EXTI_Callback+0x188>)
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001954:	2b00      	cmp	r3, #0
 8001956:	d10e      	bne.n	8001976 <HAL_GPIO_EXTI_Callback+0x16e>
        		Motor[6].StepPosition =0 ;
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <HAL_GPIO_EXTI_Callback+0x184>)
 800195a:	2200      	movs	r2, #0
 800195c:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
            break;
 8001960:	e009      	b.n	8001976 <HAL_GPIO_EXTI_Callback+0x16e>
            break;
 8001962:	bf00      	nop
 8001964:	e008      	b.n	8001978 <HAL_GPIO_EXTI_Callback+0x170>
        	break;
 8001966:	bf00      	nop
 8001968:	e006      	b.n	8001978 <HAL_GPIO_EXTI_Callback+0x170>
        	break;
 800196a:	bf00      	nop
 800196c:	e004      	b.n	8001978 <HAL_GPIO_EXTI_Callback+0x170>
            break;
 800196e:	bf00      	nop
 8001970:	e002      	b.n	8001978 <HAL_GPIO_EXTI_Callback+0x170>
            break;
 8001972:	bf00      	nop
 8001974:	e000      	b.n	8001978 <HAL_GPIO_EXTI_Callback+0x170>
            break;
 8001976:	bf00      	nop
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	40020000 	.word	0x40020000
 8001988:	40020c00 	.word	0x40020c00
 800198c:	200008a8 	.word	0x200008a8
 8001990:	40021800 	.word	0x40021800

08001994 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c2_rx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <MX_I2C2_Init+0x50>)
 800199a:	4a13      	ldr	r2, [pc, #76]	; (80019e8 <MX_I2C2_Init+0x54>)
 800199c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800199e:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <MX_I2C2_Init+0x50>)
 80019a0:	4a12      	ldr	r2, [pc, #72]	; (80019ec <MX_I2C2_Init+0x58>)
 80019a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019a4:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <MX_I2C2_Init+0x50>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <MX_I2C2_Init+0x50>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <MX_I2C2_Init+0x50>)
 80019b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019b6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019b8:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <MX_I2C2_Init+0x50>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <MX_I2C2_Init+0x50>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019c4:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <MX_I2C2_Init+0x50>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <MX_I2C2_Init+0x50>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019d0:	4804      	ldr	r0, [pc, #16]	; (80019e4 <MX_I2C2_Init+0x50>)
 80019d2:	f006 fbc9 	bl	8008168 <HAL_I2C_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80019dc:	f000 fe56 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	200002e0 	.word	0x200002e0
 80019e8:	40005800 	.word	0x40005800
 80019ec:	000186a0 	.word	0x000186a0

080019f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	; 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a39      	ldr	r2, [pc, #228]	; (8001af4 <HAL_I2C_MspInit+0x104>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d16b      	bne.n	8001aea <HAL_I2C_MspInit+0xfa>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	4b38      	ldr	r3, [pc, #224]	; (8001af8 <HAL_I2C_MspInit+0x108>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a37      	ldr	r2, [pc, #220]	; (8001af8 <HAL_I2C_MspInit+0x108>)
 8001a1c:	f043 0320 	orr.w	r3, r3, #32
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b35      	ldr	r3, [pc, #212]	; (8001af8 <HAL_I2C_MspInit+0x108>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0320 	and.w	r3, r3, #32
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a32:	2312      	movs	r3, #18
 8001a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a3e:	2304      	movs	r3, #4
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a42:	f107 0314 	add.w	r3, r7, #20
 8001a46:	4619      	mov	r1, r3
 8001a48:	482c      	ldr	r0, [pc, #176]	; (8001afc <HAL_I2C_MspInit+0x10c>)
 8001a4a:	f006 f98d 	bl	8007d68 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b29      	ldr	r3, [pc, #164]	; (8001af8 <HAL_I2C_MspInit+0x108>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	4a28      	ldr	r2, [pc, #160]	; (8001af8 <HAL_I2C_MspInit+0x108>)
 8001a58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5e:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <HAL_I2C_MspInit+0x108>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8001a6a:	4b25      	ldr	r3, [pc, #148]	; (8001b00 <HAL_I2C_MspInit+0x110>)
 8001a6c:	4a25      	ldr	r2, [pc, #148]	; (8001b04 <HAL_I2C_MspInit+0x114>)
 8001a6e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001a70:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <HAL_I2C_MspInit+0x110>)
 8001a72:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001a76:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a78:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <HAL_I2C_MspInit+0x110>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a7e:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <HAL_I2C_MspInit+0x110>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a84:	4b1e      	ldr	r3, [pc, #120]	; (8001b00 <HAL_I2C_MspInit+0x110>)
 8001a86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a8a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a8c:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <HAL_I2C_MspInit+0x110>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a92:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <HAL_I2C_MspInit+0x110>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_CIRCULAR;
 8001a98:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <HAL_I2C_MspInit+0x110>)
 8001a9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a9e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001aa0:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <HAL_I2C_MspInit+0x110>)
 8001aa2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001aa6:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aa8:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <HAL_I2C_MspInit+0x110>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001aae:	4814      	ldr	r0, [pc, #80]	; (8001b00 <HAL_I2C_MspInit+0x110>)
 8001ab0:	f005 fdd0 	bl	8007654 <HAL_DMA_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8001aba:	f000 fde7 	bl	800268c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a0f      	ldr	r2, [pc, #60]	; (8001b00 <HAL_I2C_MspInit+0x110>)
 8001ac2:	639a      	str	r2, [r3, #56]	; 0x38
 8001ac4:	4a0e      	ldr	r2, [pc, #56]	; (8001b00 <HAL_I2C_MspInit+0x110>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2105      	movs	r1, #5
 8001ace:	2021      	movs	r0, #33	; 0x21
 8001ad0:	f005 fcb6 	bl	8007440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001ad4:	2021      	movs	r0, #33	; 0x21
 8001ad6:	f005 fccf 	bl	8007478 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2105      	movs	r1, #5
 8001ade:	2022      	movs	r0, #34	; 0x22
 8001ae0:	f005 fcae 	bl	8007440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001ae4:	2022      	movs	r0, #34	; 0x22
 8001ae6:	f005 fcc7 	bl	8007478 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001aea:	bf00      	nop
 8001aec:	3728      	adds	r7, #40	; 0x28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40005800 	.word	0x40005800
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40021400 	.word	0x40021400
 8001b00:	20000334 	.word	0x20000334
 8001b04:	40026040 	.word	0x40026040

08001b08 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch,1,HAL_MAX_DELAY);
 8001b10:	1d39      	adds	r1, r7, #4
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295
 8001b16:	2201      	movs	r2, #1
 8001b18:	4803      	ldr	r0, [pc, #12]	; (8001b28 <__io_putchar+0x20>)
 8001b1a:	f009 fbb2 	bl	800b282 <HAL_UART_Transmit>
    return ch;
 8001b1e:	687b      	ldr	r3, [r7, #4]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000864 	.word	0x20000864

08001b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b30:	f005 f80a 	bl	8006b48 <HAL_Init>
  /* USER CODE BEGIN Init */
  //HAL_Delay(6000);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b34:	f000 f836 	bl	8001ba4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 8001b38:	f7ff fc38 	bl	80013ac <MX_GPIO_Init>
  MX_DMA_Init();
 8001b3c:	f7ff fbc0 	bl	80012c0 <MX_DMA_Init>
  MX_CAN1_Init();
 8001b40:	f7ff facc 	bl	80010dc <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8001b44:	f001 fc6a 	bl	800341c <MX_USART1_UART_Init>
  MX_DAC_Init();
 8001b48:	f7ff fb44 	bl	80011d4 <MX_DAC_Init>
  MX_TIM2_Init();
 8001b4c:	f000 fff6 	bl	8002b3c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b50:	f001 f848 	bl	8002be4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b54:	f001 f89a 	bl	8002c8c <MX_TIM4_Init>
  MX_UART4_Init();
 8001b58:	f001 fc06 	bl	8003368 <MX_UART4_Init>
  MX_UART5_Init();
 8001b5c:	f001 fc2e 	bl	80033bc <MX_UART5_Init>
  MX_USART3_UART_Init();
 8001b60:	f001 fc86 	bl	8003470 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001b64:	f7ff f9a2 	bl	8000eac <MX_ADC1_Init>
  MX_ADC2_Init();
 8001b68:	f7ff f9f2 	bl	8000f50 <MX_ADC2_Init>
  MX_I2C2_Init();
 8001b6c:	f7ff ff12 	bl	8001994 <MX_I2C2_Init>
  MX_TIM10_Init();
 8001b70:	f001 f980 	bl	8002e74 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001b74:	f001 f9a0 	bl	8002eb8 <MX_TIM11_Init>
  MX_TIM13_Init();
 8001b78:	f001 f9f8 	bl	8002f6c <MX_TIM13_Init>
  MX_TIM14_Init();
 8001b7c:	f001 fa18 	bl	8002fb0 <MX_TIM14_Init>
  MX_TIM9_Init();
 8001b80:	f001 f940 	bl	8002e04 <MX_TIM9_Init>
  MX_TIM7_Init();
 8001b84:	f001 f90a 	bl	8002d9c <MX_TIM7_Init>
  MX_TIM6_Init();
 8001b88:	f001 f8d4 	bl	8002d34 <MX_TIM6_Init>
  MX_TIM12_Init();
 8001b8c:	f001 f9b6 	bl	8002efc <MX_TIM12_Init>
  MX_TIM7_Init();
  MX_TIM6_Init();
  MX_TIM12_Init();
  /* USER CODE BEGIN 2 */
#endif
  ALL_Motors_Disable();
 8001b90:	f002 f858 	bl	8003c44 <ALL_Motors_Disable>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001b94:	f00a fc28 	bl	800c3e8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001b98:	f7ff fbb2 	bl	8001300 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001b9c:	f00a fc48 	bl	800c430 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <main+0x74>
	...

08001ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b094      	sub	sp, #80	; 0x50
 8001ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001baa:	f107 0320 	add.w	r3, r7, #32
 8001bae:	2230      	movs	r2, #48	; 0x30
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f00d fac3 	bl	800f13e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb8:	f107 030c 	add.w	r3, r7, #12
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <SystemClock_Config+0xcc>)
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	4a27      	ldr	r2, [pc, #156]	; (8001c70 <SystemClock_Config+0xcc>)
 8001bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd8:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <SystemClock_Config+0xcc>)
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be4:	2300      	movs	r3, #0
 8001be6:	607b      	str	r3, [r7, #4]
 8001be8:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <SystemClock_Config+0xd0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a21      	ldr	r2, [pc, #132]	; (8001c74 <SystemClock_Config+0xd0>)
 8001bee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <SystemClock_Config+0xd0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c00:	2301      	movs	r3, #1
 8001c02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c14:	2304      	movs	r3, #4
 8001c16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001c18:	23a0      	movs	r3, #160	; 0xa0
 8001c1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c20:	2304      	movs	r3, #4
 8001c22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c24:	f107 0320 	add.w	r3, r7, #32
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f008 f8bd 	bl	8009da8 <HAL_RCC_OscConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c34:	f000 fd2a 	bl	800268c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c38:	230f      	movs	r3, #15
 8001c3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c44:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001c4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c50:	f107 030c 	add.w	r3, r7, #12
 8001c54:	2105      	movs	r1, #5
 8001c56:	4618      	mov	r0, r3
 8001c58:	f008 fb1e 	bl	800a298 <HAL_RCC_ClockConfig>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c62:	f000 fd13 	bl	800268c <Error_Handler>
  }
}
 8001c66:	bf00      	nop
 8001c68:	3750      	adds	r7, #80	; 0x50
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40007000 	.word	0x40007000

08001c78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a9d      	ldr	r2, [pc, #628]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d101      	bne.n	8001c8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c8a:	f004 ff7f 	bl	8006b8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

	if (htim->Instance == TIM9) {	// 计时器周期为0.1ms
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a9b      	ldr	r2, [pc, #620]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d125      	bne.n	8001ce4 <HAL_TIM_PeriodElapsedCallback+0x6c>
		uart_reieve_timeoutCount++;
 8001c98:	4b9a      	ldr	r3, [pc, #616]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	4a99      	ldr	r2, [pc, #612]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001ca0:	6013      	str	r3, [r2, #0]
		if( (USART_RX_STA&0x8000) || (USART_RX_STA==0) ){	// 判断串口接收超时
 8001ca2:	4b99      	ldr	r3, [pc, #612]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	b21b      	sxth	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	db03      	blt.n	8001cb4 <HAL_TIM_PeriodElapsedCallback+0x3c>
 8001cac:	4b96      	ldr	r3, [pc, #600]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d106      	bne.n	8001cc2 <HAL_TIM_PeriodElapsedCallback+0x4a>
			uart_reieve_timeoutCount = 0;
 8001cb4:	4b93      	ldr	r3, [pc, #588]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim9);
 8001cba:	4894      	ldr	r0, [pc, #592]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001cbc:	f008 fdfe 	bl	800a8bc <HAL_TIM_Base_Stop_IT>
 8001cc0:	e010      	b.n	8001ce4 <HAL_TIM_PeriodElapsedCallback+0x6c>
		}
		else{
			if(uart_reieve_timeoutCount > 1000){
 8001cc2:	4b90      	ldr	r3, [pc, #576]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cca:	d90b      	bls.n	8001ce4 <HAL_TIM_PeriodElapsedCallback+0x6c>
				printf("[WRONG] Data Input Timeout ! \r\n");
 8001ccc:	4890      	ldr	r0, [pc, #576]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001cce:	f00d ffc3 	bl	800fc58 <puts>
				uart_reieve_timeoutCount = 0;
 8001cd2:	4b8c      	ldr	r3, [pc, #560]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
				USART_RX_STA = 0;
 8001cd8:	4b8b      	ldr	r3, [pc, #556]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	801a      	strh	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim9);
 8001cde:	488b      	ldr	r0, [pc, #556]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001ce0:	f008 fdec 	bl	800a8bc <HAL_TIM_Base_Stop_IT>
			}
		}
	}

	if (htim->Instance == TIM10)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a8a      	ldr	r2, [pc, #552]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	f040 80c1 	bne.w	8001e72 <HAL_TIM_PeriodElapsedCallback+0x1fa>
	{
			timecount_TIM10++;
 8001cf0:	4b89      	ldr	r3, [pc, #548]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	4a88      	ldr	r2, [pc, #544]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001cf8:	6013      	str	r3, [r2, #0]
			AccelDecelcount_TIM10++;
 8001cfa:	4b88      	ldr	r3, [pc, #544]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	4a86      	ldr	r2, [pc, #536]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001d02:	6013      	str	r3, [r2, #0]
			if(timecount_TIM10 <= Pluse_High)
 8001d04:	4b84      	ldr	r3, [pc, #528]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4b85      	ldr	r3, [pc, #532]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d805      	bhi.n	8001d1c <HAL_TIM_PeriodElapsedCallback+0xa4>
			{
				Motorpluse1_High();
 8001d10:	2201      	movs	r2, #1
 8001d12:	2108      	movs	r1, #8
 8001d14:	4883      	ldr	r0, [pc, #524]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001d16:	f006 f9db 	bl	80080d0 <HAL_GPIO_WritePin>
 8001d1a:	e00a      	b.n	8001d32 <HAL_TIM_PeriodElapsedCallback+0xba>
			}
			else if(timecount_TIM10 > Pluse_High)
 8001d1c:	4b7e      	ldr	r3, [pc, #504]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b7f      	ldr	r3, [pc, #508]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d904      	bls.n	8001d32 <HAL_TIM_PeriodElapsedCallback+0xba>
			{
				Motorpluse1_Low();
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2108      	movs	r1, #8
 8001d2c:	487d      	ldr	r0, [pc, #500]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001d2e:	f006 f9cf 	bl	80080d0 <HAL_GPIO_WritePin>
			}
			if(timecount_TIM10 >= Motor[1].StepperSpeedTMR)
 8001d32:	4b7d      	ldr	r3, [pc, #500]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d34:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8001d38:	4b77      	ldr	r3, [pc, #476]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d843      	bhi.n	8001dc8 <HAL_TIM_PeriodElapsedCallback+0x150>
			{
				timecount_TIM10 = 0 ;
 8001d40:	4b75      	ldr	r3, [pc, #468]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
				Motor[1].NumberofSteps--;
 8001d46:	4b78      	ldr	r3, [pc, #480]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d48:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	4a76      	ldr	r2, [pc, #472]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d50:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
				if (Motor[1].MotorDirection == 1){
 8001d54:	4b74      	ldr	r3, [pc, #464]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d56:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d11c      	bne.n	8001d98 <HAL_TIM_PeriodElapsedCallback+0x120>
					Motor[1].StepPosition++;
 8001d5e:	4b72      	ldr	r3, [pc, #456]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d64:	3301      	adds	r3, #1
 8001d66:	4a70      	ldr	r2, [pc, #448]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					if (Motor[1].StepPosition >= Motor[1].StepsInOneCircle){
 8001d6c:	4b6e      	ldr	r3, [pc, #440]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d72:	461a      	mov	r2, r3
 8001d74:	4b6c      	ldr	r3, [pc, #432]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d324      	bcc.n	8001dc8 <HAL_TIM_PeriodElapsedCallback+0x150>
						Motor[1].StepPosition = Motor[1].StepPosition - Motor[1].StepsInOneCircle ;
 8001d7e:	4b6a      	ldr	r3, [pc, #424]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d84:	461a      	mov	r2, r3
 8001d86:	4b68      	ldr	r3, [pc, #416]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4b65      	ldr	r3, [pc, #404]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8001d96:	e017      	b.n	8001dc8 <HAL_TIM_PeriodElapsedCallback+0x150>
					}
				}
				else{
					Motor[1].StepPosition--;
 8001d98:	4b63      	ldr	r3, [pc, #396]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	4a61      	ldr	r2, [pc, #388]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001da2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					if (Motor[1].StepPosition < 0){
 8001da6:	4b60      	ldr	r3, [pc, #384]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	da0b      	bge.n	8001dc8 <HAL_TIM_PeriodElapsedCallback+0x150>
						Motor[1].StepPosition = Motor[1].StepPosition + Motor[1].StepsInOneCircle ;
 8001db0:	4b5d      	ldr	r3, [pc, #372]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001db6:	461a      	mov	r2, r3
 8001db8:	4b5b      	ldr	r3, [pc, #364]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001dba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dbe:	4413      	add	r3, r2
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b59      	ldr	r3, [pc, #356]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001dc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}
				}
			}
			if(Motor[1].StepPosition == Motor[1].TargetPosition)
 8001dc8:	4b57      	ldr	r3, [pc, #348]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001dca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001dce:	4b56      	ldr	r3, [pc, #344]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d10e      	bne.n	8001df6 <HAL_TIM_PeriodElapsedCallback+0x17e>
			{
				Motor[1].Status = 0;
 8001dd8:	4b53      	ldr	r3, [pc, #332]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
				printf("---Motor1 Steps Position:%ld---\r\n",Motor[1].StepPosition);
 8001de0:	4b51      	ldr	r3, [pc, #324]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de6:	4619      	mov	r1, r3
 8001de8:	4850      	ldr	r0, [pc, #320]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001dea:	f00d feaf 	bl	800fb4c <iprintf>
				HAL_TIM_Base_Stop_IT(&htim10);
 8001dee:	4850      	ldr	r0, [pc, #320]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001df0:	f008 fd64 	bl	800a8bc <HAL_TIM_Base_Stop_IT>
 8001df4:	e00b      	b.n	8001e0e <HAL_TIM_PeriodElapsedCallback+0x196>
			}
			else if (Motor[1].NumberofSteps <= 0){
 8001df6:	4b4c      	ldr	r3, [pc, #304]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001df8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d106      	bne.n	8001e0e <HAL_TIM_PeriodElapsedCallback+0x196>
				Motor[1].Status = 0;
 8001e00:	4b49      	ldr	r3, [pc, #292]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
				//printf("[WRONG]Motor1 Goto Target Position Failed!---Current_Position:%ld---\r\n",Motor[1].StepPosition);
				HAL_TIM_Base_Stop_IT(&htim10);
 8001e08:	4849      	ldr	r0, [pc, #292]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001e0a:	f008 fd57 	bl	800a8bc <HAL_TIM_Base_Stop_IT>
			}

			if (Motor[1].NumberofSteps > Motor[1].NumberofSteps_StopAccel)  // if.. begin Acceleration
 8001e0e:	4b46      	ldr	r3, [pc, #280]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001e10:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001e14:	4b44      	ldr	r3, [pc, #272]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001e16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d910      	bls.n	8001e40 <HAL_TIM_PeriodElapsedCallback+0x1c8>
			{
				if(AccelDecelcount_TIM10 >= Motor[1].AccelerationTimeTMR)
 8001e1e:	4b42      	ldr	r3, [pc, #264]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001e20:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001e24:	4b3d      	ldr	r3, [pc, #244]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	f200 841b 	bhi.w	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
				{
					AccelDecelcount_TIM10=0;
 8001e2e:	4b3b      	ldr	r3, [pc, #236]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
					AccelDecel(ACCEL,&Motor[1]);
 8001e34:	493f      	ldr	r1, [pc, #252]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001e36:	2001      	movs	r0, #1
 8001e38:	f001 ffe2 	bl	8003e00 <AccelDecel>
			}
	}
#endif

  /* USER CODE END Callback 1 */
}
 8001e3c:	f000 bc12 	b.w	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
			else if (Motor[1].NumberofSteps < Motor[1].NumberofSteps_BeginDecel)  // if.. begin Deceleration
 8001e40:	4b39      	ldr	r3, [pc, #228]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001e42:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001e46:	4b38      	ldr	r3, [pc, #224]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001e48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	f080 8409 	bcs.w	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
				if(AccelDecelcount_TIM10 >= Motor[1].DecelerationTimeTMR)
 8001e52:	4b35      	ldr	r3, [pc, #212]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001e54:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001e58:	4b30      	ldr	r3, [pc, #192]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	f200 8401 	bhi.w	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
					AccelDecelcount_TIM10=0;
 8001e62:	4b2e      	ldr	r3, [pc, #184]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
					AccelDecel(DECEL,&Motor[1]);
 8001e68:	4932      	ldr	r1, [pc, #200]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001e6a:	2002      	movs	r0, #2
 8001e6c:	f001 ffc8 	bl	8003e00 <AccelDecel>
}
 8001e70:	e3f8      	b.n	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
	else if (htim->Instance == TIM11)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a30      	ldr	r2, [pc, #192]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	f040 80be 	bne.w	8001ffa <HAL_TIM_PeriodElapsedCallback+0x382>
			timecount_TIM11++;
 8001e7e:	4b2f      	ldr	r3, [pc, #188]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	3301      	adds	r3, #1
 8001e84:	4a2d      	ldr	r2, [pc, #180]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e86:	6013      	str	r3, [r2, #0]
			AccelDecelcount_TIM11++;
 8001e88:	4b2d      	ldr	r3, [pc, #180]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	4a2c      	ldr	r2, [pc, #176]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001e90:	6013      	str	r3, [r2, #0]
			if(timecount_TIM11 <= Pluse_High)
 8001e92:	4b2a      	ldr	r3, [pc, #168]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	4b22      	ldr	r3, [pc, #136]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d805      	bhi.n	8001eaa <HAL_TIM_PeriodElapsedCallback+0x232>
				Motorpluse2_High();
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	2140      	movs	r1, #64	; 0x40
 8001ea2:	4820      	ldr	r0, [pc, #128]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001ea4:	f006 f914 	bl	80080d0 <HAL_GPIO_WritePin>
 8001ea8:	e00a      	b.n	8001ec0 <HAL_TIM_PeriodElapsedCallback+0x248>
			else if(timecount_TIM11 > Pluse_High)
 8001eaa:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d904      	bls.n	8001ec0 <HAL_TIM_PeriodElapsedCallback+0x248>
				Motorpluse2_Low();
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2140      	movs	r1, #64	; 0x40
 8001eba:	481a      	ldr	r0, [pc, #104]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001ebc:	f006 f908 	bl	80080d0 <HAL_GPIO_WritePin>
			if(timecount_TIM11 >= Motor[2].StepperSpeedTMR)
 8001ec0:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001ec2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001ec6:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d841      	bhi.n	8001f52 <HAL_TIM_PeriodElapsedCallback+0x2da>
				timecount_TIM11 = 0 ;
 8001ece:	4b1b      	ldr	r3, [pc, #108]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
				Motor[2].NumberofSteps--;
 8001ed4:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001ed6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001eda:	3b01      	subs	r3, #1
 8001edc:	4a12      	ldr	r2, [pc, #72]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001ede:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
				if (Motor[2].MotorDirection == 1){
 8001ee2:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001ee4:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d12b      	bne.n	8001f44 <HAL_TIM_PeriodElapsedCallback+0x2cc>
					Motor[2].StepPosition++;
 8001eec:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001eee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	4a0c      	ldr	r2, [pc, #48]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001ef6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001efa:	e02a      	b.n	8001f52 <HAL_TIM_PeriodElapsedCallback+0x2da>
 8001efc:	40010000 	.word	0x40010000
 8001f00:	40014000 	.word	0x40014000
 8001f04:	20000394 	.word	0x20000394
 8001f08:	20000794 	.word	0x20000794
 8001f0c:	2000057c 	.word	0x2000057c
 8001f10:	08011bac 	.word	0x08011bac
 8001f14:	40014400 	.word	0x40014400
 8001f18:	20000398 	.word	0x20000398
 8001f1c:	2000039c 	.word	0x2000039c
 8001f20:	20000000 	.word	0x20000000
 8001f24:	40020400 	.word	0x40020400
 8001f28:	200008a8 	.word	0x200008a8
 8001f2c:	08011bcc 	.word	0x08011bcc
 8001f30:	200005c4 	.word	0x200005c4
 8001f34:	20000908 	.word	0x20000908
 8001f38:	40014800 	.word	0x40014800
 8001f3c:	200003a0 	.word	0x200003a0
 8001f40:	200003a4 	.word	0x200003a4
					Motor[2].StepPosition--;
 8001f44:	4ba0      	ldr	r3, [pc, #640]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001f46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	4a9e      	ldr	r2, [pc, #632]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001f4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
			if(Motor[2].StepPosition == Motor[2].TargetPosition){
 8001f52:	4b9d      	ldr	r3, [pc, #628]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001f54:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001f58:	4b9b      	ldr	r3, [pc, #620]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001f5a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d10e      	bne.n	8001f80 <HAL_TIM_PeriodElapsedCallback+0x308>
				Motor[2].Status = 0;
 8001f62:	4b99      	ldr	r3, [pc, #612]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				printf("---Motor2 Steps Position:%ld---\r\n",Motor[2].StepPosition);
 8001f6a:	4b97      	ldr	r3, [pc, #604]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001f6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f70:	4619      	mov	r1, r3
 8001f72:	4896      	ldr	r0, [pc, #600]	; (80021cc <HAL_TIM_PeriodElapsedCallback+0x554>)
 8001f74:	f00d fdea 	bl	800fb4c <iprintf>
				HAL_TIM_Base_Stop_IT(&htim11);
 8001f78:	4895      	ldr	r0, [pc, #596]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8001f7a:	f008 fc9f 	bl	800a8bc <HAL_TIM_Base_Stop_IT>
 8001f7e:	e00b      	b.n	8001f98 <HAL_TIM_PeriodElapsedCallback+0x320>
			else if (Motor[2].NumberofSteps <= 0){
 8001f80:	4b91      	ldr	r3, [pc, #580]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001f82:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d106      	bne.n	8001f98 <HAL_TIM_PeriodElapsedCallback+0x320>
				Motor[2].Status = 0;
 8001f8a:	4b8f      	ldr	r3, [pc, #572]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				HAL_TIM_Base_Stop_IT(&htim11);
 8001f92:	488f      	ldr	r0, [pc, #572]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8001f94:	f008 fc92 	bl	800a8bc <HAL_TIM_Base_Stop_IT>
			if (Motor[2].NumberofSteps > Motor[2].NumberofSteps_StopAccel)
 8001f98:	4b8b      	ldr	r3, [pc, #556]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001f9a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001f9e:	4b8a      	ldr	r3, [pc, #552]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001fa0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d90f      	bls.n	8001fc8 <HAL_TIM_PeriodElapsedCallback+0x350>
				if(AccelDecelcount_TIM11 >= Motor[2].AccelerationTimeTMR)
 8001fa8:	4b87      	ldr	r3, [pc, #540]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001faa:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8001fae:	4b89      	ldr	r3, [pc, #548]	; (80021d4 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	f200 8356 	bhi.w	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
					AccelDecelcount_TIM11=0;
 8001fb8:	4b86      	ldr	r3, [pc, #536]	; (80021d4 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
					AccelDecel(ACCEL,&Motor[2]);
 8001fbe:	4986      	ldr	r1, [pc, #536]	; (80021d8 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	f001 ff1d 	bl	8003e00 <AccelDecel>
}
 8001fc6:	e34d      	b.n	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
			else if (Motor[2].NumberofSteps < Motor[2].NumberofSteps_BeginDecel)
 8001fc8:	4b7f      	ldr	r3, [pc, #508]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001fca:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001fce:	4b7e      	ldr	r3, [pc, #504]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001fd0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	f080 8345 	bcs.w	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
				if(AccelDecelcount_TIM11 >= Motor[2].DecelerationTimeTMR)
 8001fda:	4b7b      	ldr	r3, [pc, #492]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001fdc:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8001fe0:	4b7c      	ldr	r3, [pc, #496]	; (80021d4 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	f200 833d 	bhi.w	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
					AccelDecelcount_TIM11=0;
 8001fea:	4b7a      	ldr	r3, [pc, #488]	; (80021d4 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
					AccelDecel(DECEL,&Motor[2]);
 8001ff0:	4979      	ldr	r1, [pc, #484]	; (80021d8 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001ff2:	2002      	movs	r0, #2
 8001ff4:	f001 ff04 	bl	8003e00 <AccelDecel>
}
 8001ff8:	e334      	b.n	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
	else if (htim->Instance == TIM13)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a77      	ldr	r2, [pc, #476]	; (80021dc <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002000:	4293      	cmp	r3, r2
 8002002:	f040 809c 	bne.w	800213e <HAL_TIM_PeriodElapsedCallback+0x4c6>
			timecount_TIM13++;
 8002006:	4b76      	ldr	r3, [pc, #472]	; (80021e0 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	3301      	adds	r3, #1
 800200c:	4a74      	ldr	r2, [pc, #464]	; (80021e0 <HAL_TIM_PeriodElapsedCallback+0x568>)
 800200e:	6013      	str	r3, [r2, #0]
			AccelDecelcount_TIM13++;
 8002010:	4b74      	ldr	r3, [pc, #464]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	3301      	adds	r3, #1
 8002016:	4a73      	ldr	r2, [pc, #460]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8002018:	6013      	str	r3, [r2, #0]
				if(timecount_TIM13 <= Pluse_High){
 800201a:	4b71      	ldr	r3, [pc, #452]	; (80021e0 <HAL_TIM_PeriodElapsedCallback+0x568>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	4b72      	ldr	r3, [pc, #456]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d806      	bhi.n	8002034 <HAL_TIM_PeriodElapsedCallback+0x3bc>
					Motorpluse3_High();
 8002026:	2201      	movs	r2, #1
 8002028:	f44f 7100 	mov.w	r1, #512	; 0x200
 800202c:	486f      	ldr	r0, [pc, #444]	; (80021ec <HAL_TIM_PeriodElapsedCallback+0x574>)
 800202e:	f006 f84f 	bl	80080d0 <HAL_GPIO_WritePin>
 8002032:	e00b      	b.n	800204c <HAL_TIM_PeriodElapsedCallback+0x3d4>
				else if(timecount_TIM13 > Pluse_High){
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b6b      	ldr	r3, [pc, #428]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0x570>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d905      	bls.n	800204c <HAL_TIM_PeriodElapsedCallback+0x3d4>
					Motorpluse3_Low();
 8002040:	2200      	movs	r2, #0
 8002042:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002046:	4869      	ldr	r0, [pc, #420]	; (80021ec <HAL_TIM_PeriodElapsedCallback+0x574>)
 8002048:	f006 f842 	bl	80080d0 <HAL_GPIO_WritePin>
				if(timecount_TIM13 >= Motor[3].StepperSpeedTMR){
 800204c:	4b5e      	ldr	r3, [pc, #376]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 800204e:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8002052:	4b63      	ldr	r3, [pc, #396]	; (80021e0 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d81d      	bhi.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x41e>
					timecount_TIM13 = 0 ;
 800205a:	4b61      	ldr	r3, [pc, #388]	; (80021e0 <HAL_TIM_PeriodElapsedCallback+0x568>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
					Motor[3].NumberofSteps--;
 8002060:	4b59      	ldr	r3, [pc, #356]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002062:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002066:	3b01      	subs	r3, #1
 8002068:	4a57      	ldr	r2, [pc, #348]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 800206a:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
					if (Motor[3].MotorDirection == 1){
 800206e:	4b56      	ldr	r3, [pc, #344]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002070:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8002074:	2b01      	cmp	r3, #1
 8002076:	d107      	bne.n	8002088 <HAL_TIM_PeriodElapsedCallback+0x410>
						Motor[3].StepPosition++;
 8002078:	4b53      	ldr	r3, [pc, #332]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 800207a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800207e:	3301      	adds	r3, #1
 8002080:	4a51      	ldr	r2, [pc, #324]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002082:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002086:	e006      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x41e>
						Motor[3].StepPosition--;
 8002088:	4b4f      	ldr	r3, [pc, #316]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 800208a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800208e:	3b01      	subs	r3, #1
 8002090:	4a4d      	ldr	r2, [pc, #308]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002092:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
				if(Motor[3].StepPosition == Motor[3].TargetPosition){
 8002096:	4b4c      	ldr	r3, [pc, #304]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002098:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 800209c:	4b4a      	ldr	r3, [pc, #296]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 800209e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d10e      	bne.n	80020c4 <HAL_TIM_PeriodElapsedCallback+0x44c>
					Motor[3].Status = 0;
 80020a6:	4b48      	ldr	r3, [pc, #288]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
					printf("---Motor3 Steps Position:%ld---\r\n",Motor[3].StepPosition);
 80020ae:	4b46      	ldr	r3, [pc, #280]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80020b0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80020b4:	4619      	mov	r1, r3
 80020b6:	484e      	ldr	r0, [pc, #312]	; (80021f0 <HAL_TIM_PeriodElapsedCallback+0x578>)
 80020b8:	f00d fd48 	bl	800fb4c <iprintf>
					HAL_TIM_Base_Stop_IT(&htim13);
 80020bc:	484d      	ldr	r0, [pc, #308]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80020be:	f008 fbfd 	bl	800a8bc <HAL_TIM_Base_Stop_IT>
 80020c2:	e00b      	b.n	80020dc <HAL_TIM_PeriodElapsedCallback+0x464>
				else if (Motor[3].NumberofSteps <= 0){
 80020c4:	4b40      	ldr	r3, [pc, #256]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80020c6:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d106      	bne.n	80020dc <HAL_TIM_PeriodElapsedCallback+0x464>
					Motor[3].Status = 0;
 80020ce:	4b3e      	ldr	r3, [pc, #248]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
					HAL_TIM_Base_Stop_IT(&htim13);
 80020d6:	4847      	ldr	r0, [pc, #284]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80020d8:	f008 fbf0 	bl	800a8bc <HAL_TIM_Base_Stop_IT>
				if (Motor[3].NumberofSteps > Motor[3].NumberofSteps_StopAccel){
 80020dc:	4b3a      	ldr	r3, [pc, #232]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80020de:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 80020e2:	4b39      	ldr	r3, [pc, #228]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80020e4:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d90f      	bls.n	800210c <HAL_TIM_PeriodElapsedCallback+0x494>
					if(AccelDecelcount_TIM13 >= Motor[3].AccelerationTimeTMR){
 80020ec:	4b36      	ldr	r3, [pc, #216]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80020ee:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 80020f2:	4b3c      	ldr	r3, [pc, #240]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	f200 82b4 	bhi.w	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
						AccelDecelcount_TIM13=0;
 80020fc:	4b39      	ldr	r3, [pc, #228]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
						AccelDecel(ACCEL,&Motor[3]);
 8002102:	493d      	ldr	r1, [pc, #244]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8002104:	2001      	movs	r0, #1
 8002106:	f001 fe7b 	bl	8003e00 <AccelDecel>
}
 800210a:	e2ab      	b.n	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
				else if (Motor[3].NumberofSteps < Motor[3].NumberofSteps_BeginDecel){
 800210c:	4b2e      	ldr	r3, [pc, #184]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 800210e:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 8002112:	4b2d      	ldr	r3, [pc, #180]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002114:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8002118:	429a      	cmp	r2, r3
 800211a:	f080 82a3 	bcs.w	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
					if(AccelDecelcount_TIM13 >= Motor[3].DecelerationTimeTMR){
 800211e:	4b2a      	ldr	r3, [pc, #168]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002120:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8002124:	4b2f      	ldr	r3, [pc, #188]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	f200 829b 	bhi.w	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
						AccelDecelcount_TIM13=0;
 800212e:	4b2d      	ldr	r3, [pc, #180]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
						AccelDecel(DECEL,&Motor[3]);
 8002134:	4930      	ldr	r1, [pc, #192]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8002136:	2002      	movs	r0, #2
 8002138:	f001 fe62 	bl	8003e00 <AccelDecel>
}
 800213c:	e292      	b.n	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
	else if (htim->Instance == TIM14)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a2e      	ldr	r2, [pc, #184]	; (80021fc <HAL_TIM_PeriodElapsedCallback+0x584>)
 8002144:	4293      	cmp	r3, r2
 8002146:	f040 80b5 	bne.w	80022b4 <HAL_TIM_PeriodElapsedCallback+0x63c>
			timecount_TIM14++;
 800214a:	4b2d      	ldr	r3, [pc, #180]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x588>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	3301      	adds	r3, #1
 8002150:	4a2b      	ldr	r2, [pc, #172]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8002152:	6013      	str	r3, [r2, #0]
			AccelDecelcount_TIM14++;
 8002154:	4b2b      	ldr	r3, [pc, #172]	; (8002204 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	3301      	adds	r3, #1
 800215a:	4a2a      	ldr	r2, [pc, #168]	; (8002204 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 800215c:	6013      	str	r3, [r2, #0]
			if(timecount_TIM14 <= Pluse_High)
 800215e:	4b28      	ldr	r3, [pc, #160]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	4b21      	ldr	r3, [pc, #132]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d805      	bhi.n	8002176 <HAL_TIM_PeriodElapsedCallback+0x4fe>
				Motorpluse4_High();
 800216a:	2201      	movs	r2, #1
 800216c:	2104      	movs	r1, #4
 800216e:	4826      	ldr	r0, [pc, #152]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8002170:	f005 ffae 	bl	80080d0 <HAL_GPIO_WritePin>
 8002174:	e00a      	b.n	800218c <HAL_TIM_PeriodElapsedCallback+0x514>
			else if(timecount_TIM14 > Pluse_High)
 8002176:	4b22      	ldr	r3, [pc, #136]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0x570>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d904      	bls.n	800218c <HAL_TIM_PeriodElapsedCallback+0x514>
				Motorpluse4_Low();
 8002182:	2200      	movs	r2, #0
 8002184:	2104      	movs	r1, #4
 8002186:	4820      	ldr	r0, [pc, #128]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8002188:	f005 ffa2 	bl	80080d0 <HAL_GPIO_WritePin>
			if(timecount_TIM14 >= Motor[4].StepperSpeedTMR)
 800218c:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 800218e:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8002192:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d83f      	bhi.n	800221a <HAL_TIM_PeriodElapsedCallback+0x5a2>
				timecount_TIM14 = 0 ;
 800219a:	4b19      	ldr	r3, [pc, #100]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x588>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
				Motor[4].NumberofSteps--;
 80021a0:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80021a2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80021a6:	3b01      	subs	r3, #1
 80021a8:	4a07      	ldr	r2, [pc, #28]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80021aa:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
				if (Motor[4].MotorDirection == 1){
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80021b0:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d129      	bne.n	800220c <HAL_TIM_PeriodElapsedCallback+0x594>
					Motor[4].StepPosition++;
 80021b8:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80021ba:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 80021be:	3301      	adds	r3, #1
 80021c0:	4a01      	ldr	r2, [pc, #4]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80021c2:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
 80021c6:	e028      	b.n	800221a <HAL_TIM_PeriodElapsedCallback+0x5a2>
 80021c8:	200008a8 	.word	0x200008a8
 80021cc:	08011bf0 	.word	0x08011bf0
 80021d0:	2000060c 	.word	0x2000060c
 80021d4:	200003a4 	.word	0x200003a4
 80021d8:	20000968 	.word	0x20000968
 80021dc:	40001c00 	.word	0x40001c00
 80021e0:	200003a8 	.word	0x200003a8
 80021e4:	200003ac 	.word	0x200003ac
 80021e8:	20000000 	.word	0x20000000
 80021ec:	40020400 	.word	0x40020400
 80021f0:	08011c14 	.word	0x08011c14
 80021f4:	2000069c 	.word	0x2000069c
 80021f8:	200009c8 	.word	0x200009c8
 80021fc:	40002000 	.word	0x40002000
 8002200:	200003b0 	.word	0x200003b0
 8002204:	200003b4 	.word	0x200003b4
 8002208:	40021000 	.word	0x40021000
					Motor[4].StepPosition--;
 800220c:	4b9b      	ldr	r3, [pc, #620]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 800220e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8002212:	3b01      	subs	r3, #1
 8002214:	4a99      	ldr	r2, [pc, #612]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 8002216:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
			if(Motor[4].StepPosition == Motor[4].TargetPosition)
 800221a:	4b98      	ldr	r3, [pc, #608]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 800221c:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 8002220:	4b96      	ldr	r3, [pc, #600]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 8002222:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002226:	429a      	cmp	r2, r3
 8002228:	d107      	bne.n	800223a <HAL_TIM_PeriodElapsedCallback+0x5c2>
				Motor[4].Status = 0;
 800222a:	4b94      	ldr	r3, [pc, #592]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 800222c:	2200      	movs	r2, #0
 800222e:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
				HAL_TIM_Base_Stop_IT(&htim14);
 8002232:	4893      	ldr	r0, [pc, #588]	; (8002480 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8002234:	f008 fb42 	bl	800a8bc <HAL_TIM_Base_Stop_IT>
 8002238:	e00b      	b.n	8002252 <HAL_TIM_PeriodElapsedCallback+0x5da>
			else if (Motor[4].NumberofSteps <= 0){
 800223a:	4b90      	ldr	r3, [pc, #576]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 800223c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8002240:	2b00      	cmp	r3, #0
 8002242:	d106      	bne.n	8002252 <HAL_TIM_PeriodElapsedCallback+0x5da>
				Motor[4].Status = 0;
 8002244:	4b8d      	ldr	r3, [pc, #564]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 8002246:	2200      	movs	r2, #0
 8002248:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
				HAL_TIM_Base_Stop_IT(&htim14);
 800224c:	488c      	ldr	r0, [pc, #560]	; (8002480 <HAL_TIM_PeriodElapsedCallback+0x808>)
 800224e:	f008 fb35 	bl	800a8bc <HAL_TIM_Base_Stop_IT>
			if (Motor[4].NumberofSteps > Motor[4].NumberofSteps_StopAccel)
 8002252:	4b8a      	ldr	r3, [pc, #552]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 8002254:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 8002258:	4b88      	ldr	r3, [pc, #544]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 800225a:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800225e:	429a      	cmp	r2, r3
 8002260:	d90f      	bls.n	8002282 <HAL_TIM_PeriodElapsedCallback+0x60a>
				if(AccelDecelcount_TIM14 >= Motor[4].AccelerationTimeTMR)
 8002262:	4b86      	ldr	r3, [pc, #536]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 8002264:	f8d3 21d8 	ldr.w	r2, [r3, #472]	; 0x1d8
 8002268:	4b86      	ldr	r3, [pc, #536]	; (8002484 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	f200 81f9 	bhi.w	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
					AccelDecelcount_TIM14=0;
 8002272:	4b84      	ldr	r3, [pc, #528]	; (8002484 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
					AccelDecel(ACCEL,&Motor[4]);
 8002278:	4983      	ldr	r1, [pc, #524]	; (8002488 <HAL_TIM_PeriodElapsedCallback+0x810>)
 800227a:	2001      	movs	r0, #1
 800227c:	f001 fdc0 	bl	8003e00 <AccelDecel>
}
 8002280:	e1f0      	b.n	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
			else if (Motor[4].NumberofSteps < Motor[4].NumberofSteps_BeginDecel)
 8002282:	4b7e      	ldr	r3, [pc, #504]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 8002284:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 8002288:	4b7c      	ldr	r3, [pc, #496]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 800228a:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800228e:	429a      	cmp	r2, r3
 8002290:	f080 81e8 	bcs.w	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
				if(AccelDecelcount_TIM14 >= Motor[4].DecelerationTimeTMR)
 8002294:	4b79      	ldr	r3, [pc, #484]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 8002296:	f8d3 21dc 	ldr.w	r2, [r3, #476]	; 0x1dc
 800229a:	4b7a      	ldr	r3, [pc, #488]	; (8002484 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	f200 81e0 	bhi.w	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
					AccelDecelcount_TIM14=0;
 80022a4:	4b77      	ldr	r3, [pc, #476]	; (8002484 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
					AccelDecel(DECEL,&Motor[4]);
 80022aa:	4977      	ldr	r1, [pc, #476]	; (8002488 <HAL_TIM_PeriodElapsedCallback+0x810>)
 80022ac:	2002      	movs	r0, #2
 80022ae:	f001 fda7 	bl	8003e00 <AccelDecel>
}
 80022b2:	e1d7      	b.n	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
	else if (htim->Instance == TIM6)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a74      	ldr	r2, [pc, #464]	; (800248c <HAL_TIM_PeriodElapsedCallback+0x814>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	f040 80f4 	bne.w	80024a8 <HAL_TIM_PeriodElapsedCallback+0x830>
			timecount_TIM6++;
 80022c0:	4b73      	ldr	r3, [pc, #460]	; (8002490 <HAL_TIM_PeriodElapsedCallback+0x818>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	3301      	adds	r3, #1
 80022c6:	4a72      	ldr	r2, [pc, #456]	; (8002490 <HAL_TIM_PeriodElapsedCallback+0x818>)
 80022c8:	6013      	str	r3, [r2, #0]
			AccelDecelcount_TIM6++;
 80022ca:	4b72      	ldr	r3, [pc, #456]	; (8002494 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	3301      	adds	r3, #1
 80022d0:	4a70      	ldr	r2, [pc, #448]	; (8002494 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 80022d2:	6013      	str	r3, [r2, #0]
			if(timecount_TIM6 >= Motor[5].StepperSpeedTMR)
 80022d4:	4b69      	ldr	r3, [pc, #420]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 80022d6:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 80022da:	4b6d      	ldr	r3, [pc, #436]	; (8002490 <HAL_TIM_PeriodElapsedCallback+0x818>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d873      	bhi.n	80023ca <HAL_TIM_PeriodElapsedCallback+0x752>
				timecount_TIM6 = 0 ;
 80022e2:	4b6b      	ldr	r3, [pc, #428]	; (8002490 <HAL_TIM_PeriodElapsedCallback+0x818>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
				if (Motor[5].MotorDirection == 1){
 80022e8:	4b64      	ldr	r3, [pc, #400]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 80022ea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d128      	bne.n	8002344 <HAL_TIM_PeriodElapsedCallback+0x6cc>
					switch ( Motor5_State )
 80022f2:	4b69      	ldr	r3, [pc, #420]	; (8002498 <HAL_TIM_PeriodElapsedCallback+0x820>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	2b03      	cmp	r3, #3
 80022fa:	d84b      	bhi.n	8002394 <HAL_TIM_PeriodElapsedCallback+0x71c>
 80022fc:	a201      	add	r2, pc, #4	; (adr r2, 8002304 <HAL_TIM_PeriodElapsedCallback+0x68c>)
 80022fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002302:	bf00      	nop
 8002304:	08002315 	.word	0x08002315
 8002308:	08002321 	.word	0x08002321
 800230c:	0800232d 	.word	0x0800232d
 8002310:	08002339 	.word	0x08002339
						Motor5_AB();
 8002314:	f001 fb6a 	bl	80039ec <Motor5_AB>
						Motor5_State = 2 ;
 8002318:	4b5f      	ldr	r3, [pc, #380]	; (8002498 <HAL_TIM_PeriodElapsedCallback+0x820>)
 800231a:	2202      	movs	r2, #2
 800231c:	701a      	strb	r2, [r3, #0]
						break;
 800231e:	e039      	b.n	8002394 <HAL_TIM_PeriodElapsedCallback+0x71c>
						Motor5_Ab();
 8002320:	f001 fbbe 	bl	8003aa0 <Motor5_Ab>
						Motor5_State = 3 ;
 8002324:	4b5c      	ldr	r3, [pc, #368]	; (8002498 <HAL_TIM_PeriodElapsedCallback+0x820>)
 8002326:	2203      	movs	r2, #3
 8002328:	701a      	strb	r2, [r3, #0]
						break;
 800232a:	e033      	b.n	8002394 <HAL_TIM_PeriodElapsedCallback+0x71c>
						Motor5_ab();
 800232c:	f001 fb9a 	bl	8003a64 <Motor5_ab>
						Motor5_State = 4 ;
 8002330:	4b59      	ldr	r3, [pc, #356]	; (8002498 <HAL_TIM_PeriodElapsedCallback+0x820>)
 8002332:	2204      	movs	r2, #4
 8002334:	701a      	strb	r2, [r3, #0]
						break;
 8002336:	e02d      	b.n	8002394 <HAL_TIM_PeriodElapsedCallback+0x71c>
						Motor5_aB();
 8002338:	f001 fb76 	bl	8003a28 <Motor5_aB>
						Motor5_State = 1 ;
 800233c:	4b56      	ldr	r3, [pc, #344]	; (8002498 <HAL_TIM_PeriodElapsedCallback+0x820>)
 800233e:	2201      	movs	r2, #1
 8002340:	701a      	strb	r2, [r3, #0]
						break;
 8002342:	e027      	b.n	8002394 <HAL_TIM_PeriodElapsedCallback+0x71c>
					switch ( Motor5_State )
 8002344:	4b54      	ldr	r3, [pc, #336]	; (8002498 <HAL_TIM_PeriodElapsedCallback+0x820>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	3b01      	subs	r3, #1
 800234a:	2b03      	cmp	r3, #3
 800234c:	d822      	bhi.n	8002394 <HAL_TIM_PeriodElapsedCallback+0x71c>
 800234e:	a201      	add	r2, pc, #4	; (adr r2, 8002354 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8002350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002354:	08002365 	.word	0x08002365
 8002358:	08002371 	.word	0x08002371
 800235c:	0800237d 	.word	0x0800237d
 8002360:	08002389 	.word	0x08002389
						Motor5_AB();
 8002364:	f001 fb42 	bl	80039ec <Motor5_AB>
						Motor5_State = 2 ;
 8002368:	4b4b      	ldr	r3, [pc, #300]	; (8002498 <HAL_TIM_PeriodElapsedCallback+0x820>)
 800236a:	2202      	movs	r2, #2
 800236c:	701a      	strb	r2, [r3, #0]
						break;
 800236e:	e011      	b.n	8002394 <HAL_TIM_PeriodElapsedCallback+0x71c>
						Motor5_aB();
 8002370:	f001 fb5a 	bl	8003a28 <Motor5_aB>
						Motor5_State = 3 ;
 8002374:	4b48      	ldr	r3, [pc, #288]	; (8002498 <HAL_TIM_PeriodElapsedCallback+0x820>)
 8002376:	2203      	movs	r2, #3
 8002378:	701a      	strb	r2, [r3, #0]
						break;
 800237a:	e00b      	b.n	8002394 <HAL_TIM_PeriodElapsedCallback+0x71c>
						Motor5_ab();
 800237c:	f001 fb72 	bl	8003a64 <Motor5_ab>
						Motor5_State = 4 ;
 8002380:	4b45      	ldr	r3, [pc, #276]	; (8002498 <HAL_TIM_PeriodElapsedCallback+0x820>)
 8002382:	2204      	movs	r2, #4
 8002384:	701a      	strb	r2, [r3, #0]
						break;
 8002386:	e005      	b.n	8002394 <HAL_TIM_PeriodElapsedCallback+0x71c>
						Motor5_Ab();
 8002388:	f001 fb8a 	bl	8003aa0 <Motor5_Ab>
						Motor5_State = 1 ;
 800238c:	4b42      	ldr	r3, [pc, #264]	; (8002498 <HAL_TIM_PeriodElapsedCallback+0x820>)
 800238e:	2201      	movs	r2, #1
 8002390:	701a      	strb	r2, [r3, #0]
						break;
 8002392:	bf00      	nop
				Motor[5].NumberofSteps--;
 8002394:	4b39      	ldr	r3, [pc, #228]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 8002396:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800239a:	3b01      	subs	r3, #1
 800239c:	4a37      	ldr	r2, [pc, #220]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 800239e:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
				if (Motor[5].MotorDirection == 1){
 80023a2:	4b36      	ldr	r3, [pc, #216]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 80023a4:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d107      	bne.n	80023bc <HAL_TIM_PeriodElapsedCallback+0x744>
					Motor[5].StepPosition++;
 80023ac:	4b33      	ldr	r3, [pc, #204]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 80023ae:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80023b2:	3301      	adds	r3, #1
 80023b4:	4a31      	ldr	r2, [pc, #196]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 80023b6:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
 80023ba:	e006      	b.n	80023ca <HAL_TIM_PeriodElapsedCallback+0x752>
					Motor[5].StepPosition--;
 80023bc:	4b2f      	ldr	r3, [pc, #188]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 80023be:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80023c2:	3b01      	subs	r3, #1
 80023c4:	4a2d      	ldr	r2, [pc, #180]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 80023c6:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
			if(Motor[5].StepPosition == Motor[5].TargetPosition){
 80023ca:	4b2c      	ldr	r3, [pc, #176]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 80023cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80023d0:	4b2a      	ldr	r3, [pc, #168]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 80023d2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d110      	bne.n	80023fc <HAL_TIM_PeriodElapsedCallback+0x784>
				Motor[5].Status = 0;
 80023da:	4b28      	ldr	r3, [pc, #160]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
				Motor5_Release();
 80023e2:	f001 fb7b 	bl	8003adc <Motor5_Release>
				printf("---Motor5 Steps Position:%ld---\r\n",Motor[5].StepPosition);
 80023e6:	4b25      	ldr	r3, [pc, #148]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 80023e8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80023ec:	4619      	mov	r1, r3
 80023ee:	482b      	ldr	r0, [pc, #172]	; (800249c <HAL_TIM_PeriodElapsedCallback+0x824>)
 80023f0:	f00d fbac 	bl	800fb4c <iprintf>
				HAL_TIM_Base_Stop_IT(&htim6);
 80023f4:	482a      	ldr	r0, [pc, #168]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0x828>)
 80023f6:	f008 fa61 	bl	800a8bc <HAL_TIM_Base_Stop_IT>
 80023fa:	e00d      	b.n	8002418 <HAL_TIM_PeriodElapsedCallback+0x7a0>
			else if (Motor[5].NumberofSteps <= 0){
 80023fc:	4b1f      	ldr	r3, [pc, #124]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 80023fe:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8002402:	2b00      	cmp	r3, #0
 8002404:	d108      	bne.n	8002418 <HAL_TIM_PeriodElapsedCallback+0x7a0>
				Motor[5].Status = 0;
 8002406:	4b1d      	ldr	r3, [pc, #116]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
				Motor5_Release();
 800240e:	f001 fb65 	bl	8003adc <Motor5_Release>
				HAL_TIM_Base_Stop_IT(&htim6);
 8002412:	4823      	ldr	r0, [pc, #140]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8002414:	f008 fa52 	bl	800a8bc <HAL_TIM_Base_Stop_IT>
			if (Motor[5].NumberofSteps > Motor[5].NumberofSteps_StopAccel){
 8002418:	4b18      	ldr	r3, [pc, #96]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 800241a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800241e:	4b17      	ldr	r3, [pc, #92]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 8002420:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8002424:	429a      	cmp	r2, r3
 8002426:	d90f      	bls.n	8002448 <HAL_TIM_PeriodElapsedCallback+0x7d0>
				if(AccelDecelcount_TIM6 >= Motor[5].AccelerationTimeTMR){
 8002428:	4b14      	ldr	r3, [pc, #80]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 800242a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800242e:	4b19      	ldr	r3, [pc, #100]	; (8002494 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	f200 8116 	bhi.w	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
					AccelDecelcount_TIM6=0;
 8002438:	4b16      	ldr	r3, [pc, #88]	; (8002494 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
					AccelDecel(ACCEL,&Motor[5]);
 800243e:	4919      	ldr	r1, [pc, #100]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8002440:	2001      	movs	r0, #1
 8002442:	f001 fcdd 	bl	8003e00 <AccelDecel>
}
 8002446:	e10d      	b.n	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
			else if (Motor[5].NumberofSteps < Motor[5].NumberofSteps_BeginDecel){
 8002448:	4b0c      	ldr	r3, [pc, #48]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 800244a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800244e:	4b0b      	ldr	r3, [pc, #44]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 8002450:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8002454:	429a      	cmp	r2, r3
 8002456:	f080 8105 	bcs.w	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
				if(AccelDecelcount_TIM6 >= Motor[5].DecelerationTimeTMR){
 800245a:	4b08      	ldr	r3, [pc, #32]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x804>)
 800245c:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8002460:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	f200 80fd 	bhi.w	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
					AccelDecelcount_TIM6=0;
 800246a:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
					AccelDecel(DECEL,&Motor[5]);
 8002470:	490c      	ldr	r1, [pc, #48]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8002472:	2002      	movs	r0, #2
 8002474:	f001 fcc4 	bl	8003e00 <AccelDecel>
}
 8002478:	e0f4      	b.n	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
 800247a:	bf00      	nop
 800247c:	200008a8 	.word	0x200008a8
 8002480:	200006e4 	.word	0x200006e4
 8002484:	200003b4 	.word	0x200003b4
 8002488:	20000a28 	.word	0x20000a28
 800248c:	40001000 	.word	0x40001000
 8002490:	200003b8 	.word	0x200003b8
 8002494:	200003bc 	.word	0x200003bc
 8002498:	20000004 	.word	0x20000004
 800249c:	08011c38 	.word	0x08011c38
 80024a0:	200004ec 	.word	0x200004ec
 80024a4:	20000a88 	.word	0x20000a88
	else if (htim->Instance == TIM7)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a6f      	ldr	r2, [pc, #444]	; (800266c <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	f040 80d8 	bne.w	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
			timecount_TIM7++;
 80024b4:	4b6e      	ldr	r3, [pc, #440]	; (8002670 <HAL_TIM_PeriodElapsedCallback+0x9f8>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	3301      	adds	r3, #1
 80024ba:	4a6d      	ldr	r2, [pc, #436]	; (8002670 <HAL_TIM_PeriodElapsedCallback+0x9f8>)
 80024bc:	6013      	str	r3, [r2, #0]
			AccelDecelcount_TIM7++;
 80024be:	4b6d      	ldr	r3, [pc, #436]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x9fc>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	3301      	adds	r3, #1
 80024c4:	4a6b      	ldr	r2, [pc, #428]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x9fc>)
 80024c6:	6013      	str	r3, [r2, #0]
			if(timecount_TIM7 >= Motor[6].StepperSpeedTMR)
 80024c8:	4b6b      	ldr	r3, [pc, #428]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 80024ca:	f8d3 2288 	ldr.w	r2, [r3, #648]	; 0x288
 80024ce:	4b68      	ldr	r3, [pc, #416]	; (8002670 <HAL_TIM_PeriodElapsedCallback+0x9f8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d872      	bhi.n	80025bc <HAL_TIM_PeriodElapsedCallback+0x944>
				timecount_TIM7 = 0 ;
 80024d6:	4b66      	ldr	r3, [pc, #408]	; (8002670 <HAL_TIM_PeriodElapsedCallback+0x9f8>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
				Motor[6].NumberofSteps--;
 80024dc:	4b66      	ldr	r3, [pc, #408]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 80024de:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80024e2:	3b01      	subs	r3, #1
 80024e4:	4a64      	ldr	r2, [pc, #400]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 80024e6:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c
				if (Motor[6].MotorDirection == 1){
 80024ea:	4b63      	ldr	r3, [pc, #396]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 80024ec:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d127      	bne.n	8002544 <HAL_TIM_PeriodElapsedCallback+0x8cc>
					switch ( Motor6_State )
 80024f4:	4b61      	ldr	r3, [pc, #388]	; (800267c <HAL_TIM_PeriodElapsedCallback+0xa04>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	3b01      	subs	r3, #1
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d84a      	bhi.n	8002594 <HAL_TIM_PeriodElapsedCallback+0x91c>
 80024fe:	a201      	add	r2, pc, #4	; (adr r2, 8002504 <HAL_TIM_PeriodElapsedCallback+0x88c>)
 8002500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002504:	08002515 	.word	0x08002515
 8002508:	08002521 	.word	0x08002521
 800250c:	0800252d 	.word	0x0800252d
 8002510:	08002539 	.word	0x08002539
						Motor6_AB();
 8002514:	f001 fb00 	bl	8003b18 <Motor6_AB>
						Motor6_State = 2 ;
 8002518:	4b58      	ldr	r3, [pc, #352]	; (800267c <HAL_TIM_PeriodElapsedCallback+0xa04>)
 800251a:	2202      	movs	r2, #2
 800251c:	701a      	strb	r2, [r3, #0]
						break;
 800251e:	e039      	b.n	8002594 <HAL_TIM_PeriodElapsedCallback+0x91c>
						Motor6_Ab();
 8002520:	f001 fb54 	bl	8003bcc <Motor6_Ab>
						Motor6_State = 3 ;
 8002524:	4b55      	ldr	r3, [pc, #340]	; (800267c <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8002526:	2203      	movs	r2, #3
 8002528:	701a      	strb	r2, [r3, #0]
						break;
 800252a:	e033      	b.n	8002594 <HAL_TIM_PeriodElapsedCallback+0x91c>
						Motor6_ab();
 800252c:	f001 fb30 	bl	8003b90 <Motor6_ab>
						Motor6_State = 4 ;
 8002530:	4b52      	ldr	r3, [pc, #328]	; (800267c <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8002532:	2204      	movs	r2, #4
 8002534:	701a      	strb	r2, [r3, #0]
						break;
 8002536:	e02d      	b.n	8002594 <HAL_TIM_PeriodElapsedCallback+0x91c>
						Motor6_aB();
 8002538:	f001 fb0c 	bl	8003b54 <Motor6_aB>
						Motor6_State = 1 ;
 800253c:	4b4f      	ldr	r3, [pc, #316]	; (800267c <HAL_TIM_PeriodElapsedCallback+0xa04>)
 800253e:	2201      	movs	r2, #1
 8002540:	701a      	strb	r2, [r3, #0]
						break;
 8002542:	e027      	b.n	8002594 <HAL_TIM_PeriodElapsedCallback+0x91c>
					switch ( Motor6_State )
 8002544:	4b4d      	ldr	r3, [pc, #308]	; (800267c <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	3b01      	subs	r3, #1
 800254a:	2b03      	cmp	r3, #3
 800254c:	d822      	bhi.n	8002594 <HAL_TIM_PeriodElapsedCallback+0x91c>
 800254e:	a201      	add	r2, pc, #4	; (adr r2, 8002554 <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 8002550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002554:	08002565 	.word	0x08002565
 8002558:	08002571 	.word	0x08002571
 800255c:	0800257d 	.word	0x0800257d
 8002560:	08002589 	.word	0x08002589
						Motor6_AB();
 8002564:	f001 fad8 	bl	8003b18 <Motor6_AB>
						Motor6_State = 2 ;
 8002568:	4b44      	ldr	r3, [pc, #272]	; (800267c <HAL_TIM_PeriodElapsedCallback+0xa04>)
 800256a:	2202      	movs	r2, #2
 800256c:	701a      	strb	r2, [r3, #0]
						break;
 800256e:	e011      	b.n	8002594 <HAL_TIM_PeriodElapsedCallback+0x91c>
						Motor6_aB();
 8002570:	f001 faf0 	bl	8003b54 <Motor6_aB>
						Motor6_State = 3 ;
 8002574:	4b41      	ldr	r3, [pc, #260]	; (800267c <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8002576:	2203      	movs	r2, #3
 8002578:	701a      	strb	r2, [r3, #0]
						break;
 800257a:	e00b      	b.n	8002594 <HAL_TIM_PeriodElapsedCallback+0x91c>
						Motor6_ab();
 800257c:	f001 fb08 	bl	8003b90 <Motor6_ab>
						Motor6_State = 4 ;
 8002580:	4b3e      	ldr	r3, [pc, #248]	; (800267c <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8002582:	2204      	movs	r2, #4
 8002584:	701a      	strb	r2, [r3, #0]
						break;
 8002586:	e005      	b.n	8002594 <HAL_TIM_PeriodElapsedCallback+0x91c>
						Motor6_Ab();
 8002588:	f001 fb20 	bl	8003bcc <Motor6_Ab>
						Motor6_State = 1 ;
 800258c:	4b3b      	ldr	r3, [pc, #236]	; (800267c <HAL_TIM_PeriodElapsedCallback+0xa04>)
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
						break;
 8002592:	bf00      	nop
				if (Motor[6].MotorDirection == 1){
 8002594:	4b38      	ldr	r3, [pc, #224]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 8002596:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800259a:	2b01      	cmp	r3, #1
 800259c:	d107      	bne.n	80025ae <HAL_TIM_PeriodElapsedCallback+0x936>
					Motor[6].StepPosition++;
 800259e:	4b36      	ldr	r3, [pc, #216]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 80025a0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80025a4:	3301      	adds	r3, #1
 80025a6:	4a34      	ldr	r2, [pc, #208]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 80025a8:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
 80025ac:	e006      	b.n	80025bc <HAL_TIM_PeriodElapsedCallback+0x944>
					Motor[6].StepPosition--;
 80025ae:	4b32      	ldr	r3, [pc, #200]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 80025b0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80025b4:	3b01      	subs	r3, #1
 80025b6:	4a30      	ldr	r2, [pc, #192]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 80025b8:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
			if(Motor[6].StepPosition == Motor[6].TargetPosition){
 80025bc:	4b2e      	ldr	r3, [pc, #184]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 80025be:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80025c2:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 80025c4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d110      	bne.n	80025ee <HAL_TIM_PeriodElapsedCallback+0x976>
				Motor[6].Status = 0;
 80025cc:	4b2a      	ldr	r3, [pc, #168]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
				Motor6_Release();
 80025d4:	f001 fb18 	bl	8003c08 <Motor6_Release>
				printf("---Motor[6] Steps Position:%ld---\r\n",Motor[6].StepPosition);
 80025d8:	4b27      	ldr	r3, [pc, #156]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 80025da:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80025de:	4619      	mov	r1, r3
 80025e0:	4827      	ldr	r0, [pc, #156]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0xa08>)
 80025e2:	f00d fab3 	bl	800fb4c <iprintf>
				HAL_TIM_Base_Stop_IT(&htim7);
 80025e6:	4827      	ldr	r0, [pc, #156]	; (8002684 <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 80025e8:	f008 f968 	bl	800a8bc <HAL_TIM_Base_Stop_IT>
 80025ec:	e00d      	b.n	800260a <HAL_TIM_PeriodElapsedCallback+0x992>
			else if (Motor[6].NumberofSteps <= 0){
 80025ee:	4b22      	ldr	r3, [pc, #136]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 80025f0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d108      	bne.n	800260a <HAL_TIM_PeriodElapsedCallback+0x992>
				Motor[6].Status = 0;
 80025f8:	4b1f      	ldr	r3, [pc, #124]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
				Motor6_Release();
 8002600:	f001 fb02 	bl	8003c08 <Motor6_Release>
				HAL_TIM_Base_Stop_IT(&htim7);
 8002604:	481f      	ldr	r0, [pc, #124]	; (8002684 <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 8002606:	f008 f959 	bl	800a8bc <HAL_TIM_Base_Stop_IT>
			if (Motor[6].NumberofSteps > Motor[6].NumberofSteps_StopAccel){
 800260a:	4b1b      	ldr	r3, [pc, #108]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 800260c:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
 8002610:	4b19      	ldr	r3, [pc, #100]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 8002612:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8002616:	429a      	cmp	r2, r3
 8002618:	d90e      	bls.n	8002638 <HAL_TIM_PeriodElapsedCallback+0x9c0>
				if(AccelDecelcount_TIM7 >= Motor[6].AccelerationTimeTMR){
 800261a:	4b17      	ldr	r3, [pc, #92]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 800261c:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
 8002620:	4b14      	ldr	r3, [pc, #80]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x9fc>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d81d      	bhi.n	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
					AccelDecelcount_TIM7=0;
 8002628:	4b12      	ldr	r3, [pc, #72]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x9fc>)
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
					AccelDecel(ACCEL,&Motor[6]);
 800262e:	4916      	ldr	r1, [pc, #88]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 8002630:	2001      	movs	r0, #1
 8002632:	f001 fbe5 	bl	8003e00 <AccelDecel>
}
 8002636:	e015      	b.n	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
			else if (Motor[6].NumberofSteps < Motor[6].NumberofSteps_BeginDecel){
 8002638:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 800263a:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
 800263e:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 8002640:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8002644:	429a      	cmp	r2, r3
 8002646:	d20d      	bcs.n	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
				if(AccelDecelcount_TIM7 >= Motor[6].DecelerationTimeTMR){
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 800264a:	f8d3 229c 	ldr.w	r2, [r3, #668]	; 0x29c
 800264e:	4b09      	ldr	r3, [pc, #36]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x9fc>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d806      	bhi.n	8002664 <HAL_TIM_PeriodElapsedCallback+0x9ec>
					AccelDecelcount_TIM7=0;
 8002656:	4b07      	ldr	r3, [pc, #28]	; (8002674 <HAL_TIM_PeriodElapsedCallback+0x9fc>)
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
					AccelDecel(DECEL,&Motor[6]);
 800265c:	490a      	ldr	r1, [pc, #40]	; (8002688 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 800265e:	2002      	movs	r0, #2
 8002660:	f001 fbce 	bl	8003e00 <AccelDecel>
}
 8002664:	bf00      	nop
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40001400 	.word	0x40001400
 8002670:	200003c0 	.word	0x200003c0
 8002674:	200003c4 	.word	0x200003c4
 8002678:	200008a8 	.word	0x200008a8
 800267c:	20000005 	.word	0x20000005
 8002680:	08011c5c 	.word	0x08011c5c
 8002684:	20000534 	.word	0x20000534
 8002688:	20000ae8 	.word	0x20000ae8

0800268c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002690:	b672      	cpsid	i
}
 8002692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002694:	e7fe      	b.n	8002694 <Error_Handler+0x8>
	...

08002698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	607b      	str	r3, [r7, #4]
 80026a2:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_MspInit+0x54>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	4a11      	ldr	r2, [pc, #68]	; (80026ec <HAL_MspInit+0x54>)
 80026a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ac:	6453      	str	r3, [r2, #68]	; 0x44
 80026ae:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <HAL_MspInit+0x54>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b6:	607b      	str	r3, [r7, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	603b      	str	r3, [r7, #0]
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_MspInit+0x54>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	4a0a      	ldr	r2, [pc, #40]	; (80026ec <HAL_MspInit+0x54>)
 80026c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ca:	4b08      	ldr	r3, [pc, #32]	; (80026ec <HAL_MspInit+0x54>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d2:	603b      	str	r3, [r7, #0]
 80026d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026d6:	2200      	movs	r2, #0
 80026d8:	210f      	movs	r1, #15
 80026da:	f06f 0001 	mvn.w	r0, #1
 80026de:	f004 feaf 	bl	8007440 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800

080026f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08c      	sub	sp, #48	; 0x30
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002700:	2200      	movs	r2, #0
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	2019      	movs	r0, #25
 8002706:	f004 fe9b 	bl	8007440 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800270a:	2019      	movs	r0, #25
 800270c:	f004 feb4 	bl	8007478 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	4b1f      	ldr	r3, [pc, #124]	; (8002794 <HAL_InitTick+0xa4>)
 8002716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002718:	4a1e      	ldr	r2, [pc, #120]	; (8002794 <HAL_InitTick+0xa4>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	6453      	str	r3, [r2, #68]	; 0x44
 8002720:	4b1c      	ldr	r3, [pc, #112]	; (8002794 <HAL_InitTick+0xa4>)
 8002722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800272c:	f107 0210 	add.w	r2, r7, #16
 8002730:	f107 0314 	add.w	r3, r7, #20
 8002734:	4611      	mov	r1, r2
 8002736:	4618      	mov	r0, r3
 8002738:	f007 ffce 	bl	800a6d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800273c:	f007 ffb8 	bl	800a6b0 <HAL_RCC_GetPCLK2Freq>
 8002740:	4603      	mov	r3, r0
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002748:	4a13      	ldr	r2, [pc, #76]	; (8002798 <HAL_InitTick+0xa8>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	0c9b      	lsrs	r3, r3, #18
 8002750:	3b01      	subs	r3, #1
 8002752:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002754:	4b11      	ldr	r3, [pc, #68]	; (800279c <HAL_InitTick+0xac>)
 8002756:	4a12      	ldr	r2, [pc, #72]	; (80027a0 <HAL_InitTick+0xb0>)
 8002758:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800275a:	4b10      	ldr	r3, [pc, #64]	; (800279c <HAL_InitTick+0xac>)
 800275c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002760:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002762:	4a0e      	ldr	r2, [pc, #56]	; (800279c <HAL_InitTick+0xac>)
 8002764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002766:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002768:	4b0c      	ldr	r3, [pc, #48]	; (800279c <HAL_InitTick+0xac>)
 800276a:	2200      	movs	r2, #0
 800276c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800276e:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_InitTick+0xac>)
 8002770:	2200      	movs	r2, #0
 8002772:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002774:	4809      	ldr	r0, [pc, #36]	; (800279c <HAL_InitTick+0xac>)
 8002776:	f007 ffe1 	bl	800a73c <HAL_TIM_Base_Init>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d104      	bne.n	800278a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002780:	4806      	ldr	r0, [pc, #24]	; (800279c <HAL_InitTick+0xac>)
 8002782:	f008 f82b 	bl	800a7dc <HAL_TIM_Base_Start_IT>
 8002786:	4603      	mov	r3, r0
 8002788:	e000      	b.n	800278c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
}
 800278c:	4618      	mov	r0, r3
 800278e:	3730      	adds	r7, #48	; 0x30
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40023800 	.word	0x40023800
 8002798:	431bde83 	.word	0x431bde83
 800279c:	200003c8 	.word	0x200003c8
 80027a0:	40010000 	.word	0x40010000

080027a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027a8:	e7fe      	b.n	80027a8 <NMI_Handler+0x4>

080027aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027aa:	b480      	push	{r7}
 80027ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ae:	e7fe      	b.n	80027ae <HardFault_Handler+0x4>

080027b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027b4:	e7fe      	b.n	80027b4 <MemManage_Handler+0x4>

080027b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027b6:	b480      	push	{r7}
 80027b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027ba:	e7fe      	b.n	80027ba <BusFault_Handler+0x4>

080027bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027c0:	e7fe      	b.n	80027c0 <UsageFault_Handler+0x4>

080027c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027c2:	b480      	push	{r7}
 80027c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027c6:	bf00      	nop
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Liquid_Detect_Pin);
 80027d4:	2001      	movs	r0, #1
 80027d6:	f005 fcaf 	bl	8008138 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}

080027de <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPT_IN1_Pin);
 80027e2:	2008      	movs	r0, #8
 80027e4:	f005 fca8 	bl	8008138 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80027e8:	bf00      	nop
 80027ea:	bd80      	pop	{r7, pc}

080027ec <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPT_IN2_Pin);
 80027f0:	2010      	movs	r0, #16
 80027f2:	f005 fca1 	bl	8008138 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8002800:	4802      	ldr	r0, [pc, #8]	; (800280c <DMA1_Stream2_IRQHandler+0x10>)
 8002802:	f005 f867 	bl	80078d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000334 	.word	0x20000334

08002810 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPT_IN3_Pin);
 8002814:	2020      	movs	r0, #32
 8002816:	f005 fc8f 	bl	8008138 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN4_Pin);
 800281a:	2040      	movs	r0, #64	; 0x40
 800281c:	f005 fc8c 	bl	8008138 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN5_Pin);
 8002820:	2080      	movs	r0, #128	; 0x80
 8002822:	f005 fc89 	bl	8008138 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN6_Pin);
 8002826:	f44f 7000 	mov.w	r0, #512	; 0x200
 800282a:	f005 fc85 	bl	8008138 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002838:	4802      	ldr	r0, [pc, #8]	; (8002844 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800283a:	f008 f914 	bl	800aa66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	2000057c 	.word	0x2000057c

08002848 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800284c:	4803      	ldr	r0, [pc, #12]	; (800285c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800284e:	f008 f90a 	bl	800aa66 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002852:	4803      	ldr	r0, [pc, #12]	; (8002860 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002854:	f008 f907 	bl	800aa66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002858:	bf00      	nop
 800285a:	bd80      	pop	{r7, pc}
 800285c:	200003c8 	.word	0x200003c8
 8002860:	200005c4 	.word	0x200005c4

08002864 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002868:	4802      	ldr	r0, [pc, #8]	; (8002874 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800286a:	f008 f8fc 	bl	800aa66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	2000060c 	.word	0x2000060c

08002878 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
#ifdef JiaYangZhen_EncoderMode
	Motor[3].StepPosition = Encoder3_0position_number - (__HAL_TIM_GET_COUNTER(&htim3)) ;
#endif

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800287c:	4802      	ldr	r0, [pc, #8]	; (8002888 <TIM3_IRQHandler+0x10>)
 800287e:	f008 f8f2 	bl	800aa66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	2000045c 	.word	0x2000045c

0800288c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
#ifdef JiaYangZhen_EncoderMode
	Motor[2].StepPosition = __HAL_TIM_GET_COUNTER(&htim4) - Encoder2_0position_number ;
#endif

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002890:	4802      	ldr	r0, [pc, #8]	; (800289c <TIM4_IRQHandler+0x10>)
 8002892:	f008 f8e8 	bl	800aa66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	200004a4 	.word	0x200004a4

080028a0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80028a4:	4802      	ldr	r0, [pc, #8]	; (80028b0 <I2C2_EV_IRQHandler+0x10>)
 80028a6:	f005 fda3 	bl	80083f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	200002e0 	.word	0x200002e0

080028b4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80028b8:	4802      	ldr	r0, [pc, #8]	; (80028c4 <I2C2_ER_IRQHandler+0x10>)
 80028ba:	f005 ff0a 	bl	80086d2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	200002e0 	.word	0x200002e0

080028c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OPT_IN7_Pin);
 80028cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80028d0:	f005 fc32 	bl	8008138 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN8_Pin);
 80028d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80028d8:	f005 fc2e 	bl	8008138 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN9_Pin);
 80028dc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80028e0:	f005 fc2a 	bl	8008138 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN10_Pin);
 80028e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80028e8:	f005 fc26 	bl	8008138 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN11_Pin);
 80028ec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80028f0:	f005 fc22 	bl	8008138 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OPT_IN12_Pin);
 80028f4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80028f8:	f005 fc1e 	bl	8008138 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80028fc:	bf00      	nop
 80028fe:	bd80      	pop	{r7, pc}

08002900 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002904:	4802      	ldr	r0, [pc, #8]	; (8002910 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8002906:	f008 f8ae 	bl	800aa66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000654 	.word	0x20000654

08002914 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002918:	4802      	ldr	r0, [pc, #8]	; (8002924 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800291a:	f008 f8a4 	bl	800aa66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	2000069c 	.word	0x2000069c

08002928 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800292c:	4802      	ldr	r0, [pc, #8]	; (8002938 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800292e:	f008 f89a 	bl	800aa66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	200006e4 	.word	0x200006e4

0800293c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002940:	4804      	ldr	r0, [pc, #16]	; (8002954 <UART5_IRQHandler+0x18>)
 8002942:	f008 fda5 	bl	800b490 <HAL_UART_IRQHandler>
//  while(HAL_UART_Receive_IT(&huart5, (uint8_t *)aRxBuffer, 1) != HAL_OK)	//每次中断处理完成之后，重新开启中断并设置RxXferCount 1
//  {
//	 timeout++; 	//超时处理
//	 if(timeout>HAL_MAX_DELAY) break;
//  }
  	HAL_UART_Receive_IT(&huart5, (uint8_t *)aRxBuffer, 1);
 8002946:	2201      	movs	r2, #1
 8002948:	4903      	ldr	r1, [pc, #12]	; (8002958 <UART5_IRQHandler+0x1c>)
 800294a:	4802      	ldr	r0, [pc, #8]	; (8002954 <UART5_IRQHandler+0x18>)
 800294c:	f008 fd70 	bl	800b430 <HAL_UART_Receive_IT>

  /* USER CODE END UART5_IRQn 1 */
}
 8002950:	bf00      	nop
 8002952:	bd80      	pop	{r7, pc}
 8002954:	200007dc 	.word	0x200007dc
 8002958:	2000072c 	.word	0x2000072c

0800295c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002960:	4803      	ldr	r0, [pc, #12]	; (8002970 <TIM6_DAC_IRQHandler+0x14>)
 8002962:	f004 fdb9 	bl	80074d8 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002966:	4803      	ldr	r0, [pc, #12]	; (8002974 <TIM6_DAC_IRQHandler+0x18>)
 8002968:	f008 f87d 	bl	800aa66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800296c:	bf00      	nop
 800296e:	bd80      	pop	{r7, pc}
 8002970:	200002bc 	.word	0x200002bc
 8002974:	200004ec 	.word	0x200004ec

08002978 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800297c:	4802      	ldr	r0, [pc, #8]	; (8002988 <TIM7_IRQHandler+0x10>)
 800297e:	f008 f872 	bl	800aa66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20000534 	.word	0x20000534

0800298c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
	return 1;
 8002990:	2301      	movs	r3, #1
}
 8002992:	4618      	mov	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <_kill>:

int _kill(int pid, int sig)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80029a6:	f00c fa99 	bl	800eedc <__errno>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2216      	movs	r2, #22
 80029ae:	601a      	str	r2, [r3, #0]
	return -1;
 80029b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <_exit>:

void _exit (int status)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80029c4:	f04f 31ff 	mov.w	r1, #4294967295
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff ffe7 	bl	800299c <_kill>
	while (1) {}		/* Make sure we hang here */
 80029ce:	e7fe      	b.n	80029ce <_exit+0x12>

080029d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	e00a      	b.n	80029f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029e2:	f3af 8000 	nop.w
 80029e6:	4601      	mov	r1, r0
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	60ba      	str	r2, [r7, #8]
 80029ee:	b2ca      	uxtb	r2, r1
 80029f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	3301      	adds	r3, #1
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	dbf0      	blt.n	80029e2 <_read+0x12>
	}

return len;
 8002a00:	687b      	ldr	r3, [r7, #4]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b086      	sub	sp, #24
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a16:	2300      	movs	r3, #0
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	e009      	b.n	8002a30 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	60ba      	str	r2, [r7, #8]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff f86f 	bl	8001b08 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	dbf1      	blt.n	8002a1c <_write+0x12>
	}
	return len;
 8002a38:	687b      	ldr	r3, [r7, #4]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <_close>:

int _close(int file)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
	return -1;
 8002a4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a6a:	605a      	str	r2, [r3, #4]
	return 0;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <_isatty>:

int _isatty(int file)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
	return 1;
 8002a82:	2301      	movs	r3, #1
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
	return 0;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ab4:	4a14      	ldr	r2, [pc, #80]	; (8002b08 <_sbrk+0x5c>)
 8002ab6:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <_sbrk+0x60>)
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ac0:	4b13      	ldr	r3, [pc, #76]	; (8002b10 <_sbrk+0x64>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d102      	bne.n	8002ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ac8:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <_sbrk+0x64>)
 8002aca:	4a12      	ldr	r2, [pc, #72]	; (8002b14 <_sbrk+0x68>)
 8002acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ace:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <_sbrk+0x64>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d207      	bcs.n	8002aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002adc:	f00c f9fe 	bl	800eedc <__errno>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	220c      	movs	r2, #12
 8002ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aea:	e009      	b.n	8002b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002aec:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <_sbrk+0x64>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002af2:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <_sbrk+0x64>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4413      	add	r3, r2
 8002afa:	4a05      	ldr	r2, [pc, #20]	; (8002b10 <_sbrk+0x64>)
 8002afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002afe:	68fb      	ldr	r3, [r7, #12]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	20020000 	.word	0x20020000
 8002b0c:	00000400 	.word	0x00000400
 8002b10:	20000410 	.word	0x20000410
 8002b14:	20005738 	.word	0x20005738

08002b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <SystemInit+0x20>)
 8002b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b22:	4a05      	ldr	r2, [pc, #20]	; (8002b38 <SystemInit+0x20>)
 8002b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <MX_TIM2_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08c      	sub	sp, #48	; 0x30
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b42:	f107 030c 	add.w	r3, r7, #12
 8002b46:	2224      	movs	r2, #36	; 0x24
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f00c faf7 	bl	800f13e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b50:	1d3b      	adds	r3, r7, #4
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b58:	4b21      	ldr	r3, [pc, #132]	; (8002be0 <MX_TIM2_Init+0xa4>)
 8002b5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8002b60:	4b1f      	ldr	r3, [pc, #124]	; (8002be0 <MX_TIM2_Init+0xa4>)
 8002b62:	2203      	movs	r2, #3
 8002b64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b66:	4b1e      	ldr	r3, [pc, #120]	; (8002be0 <MX_TIM2_Init+0xa4>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002b6c:	4b1c      	ldr	r3, [pc, #112]	; (8002be0 <MX_TIM2_Init+0xa4>)
 8002b6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b74:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <MX_TIM2_Init+0xa4>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b7a:	4b19      	ldr	r3, [pc, #100]	; (8002be0 <MX_TIM2_Init+0xa4>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002b80:	2301      	movs	r3, #1
 8002b82:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b84:	2300      	movs	r3, #0
 8002b86:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b94:	2300      	movs	r3, #0
 8002b96:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002ba4:	f107 030c 	add.w	r3, r7, #12
 8002ba8:	4619      	mov	r1, r3
 8002baa:	480d      	ldr	r0, [pc, #52]	; (8002be0 <MX_TIM2_Init+0xa4>)
 8002bac:	f007 feb5 	bl	800a91a <HAL_TIM_Encoder_Init>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002bb6:	f7ff fd69 	bl	800268c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bc2:	1d3b      	adds	r3, r7, #4
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4806      	ldr	r0, [pc, #24]	; (8002be0 <MX_TIM2_Init+0xa4>)
 8002bc8:	f008 fa7e 	bl	800b0c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002bd2:	f7ff fd5b 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002bd6:	bf00      	nop
 8002bd8:	3730      	adds	r7, #48	; 0x30
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20000414 	.word	0x20000414

08002be4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08c      	sub	sp, #48	; 0x30
 8002be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002bea:	f107 030c 	add.w	r3, r7, #12
 8002bee:	2224      	movs	r2, #36	; 0x24
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f00c faa3 	bl	800f13e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bf8:	1d3b      	adds	r3, r7, #4
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c00:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <MX_TIM3_Init+0xa0>)
 8002c02:	4a21      	ldr	r2, [pc, #132]	; (8002c88 <MX_TIM3_Init+0xa4>)
 8002c04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8002c06:	4b1f      	ldr	r3, [pc, #124]	; (8002c84 <MX_TIM3_Init+0xa0>)
 8002c08:	2203      	movs	r2, #3
 8002c0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c0c:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <MX_TIM3_Init+0xa0>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002c12:	4b1c      	ldr	r3, [pc, #112]	; (8002c84 <MX_TIM3_Init+0xa0>)
 8002c14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c1a:	4b1a      	ldr	r3, [pc, #104]	; (8002c84 <MX_TIM3_Init+0xa0>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c20:	4b18      	ldr	r3, [pc, #96]	; (8002c84 <MX_TIM3_Init+0xa0>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002c26:	2303      	movs	r3, #3
 8002c28:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002c36:	230f      	movs	r3, #15
 8002c38:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c42:	2300      	movs	r3, #0
 8002c44:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002c46:	230f      	movs	r3, #15
 8002c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002c4a:	f107 030c 	add.w	r3, r7, #12
 8002c4e:	4619      	mov	r1, r3
 8002c50:	480c      	ldr	r0, [pc, #48]	; (8002c84 <MX_TIM3_Init+0xa0>)
 8002c52:	f007 fe62 	bl	800a91a <HAL_TIM_Encoder_Init>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002c5c:	f7ff fd16 	bl	800268c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c60:	2300      	movs	r3, #0
 8002c62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c64:	2300      	movs	r3, #0
 8002c66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c68:	1d3b      	adds	r3, r7, #4
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4805      	ldr	r0, [pc, #20]	; (8002c84 <MX_TIM3_Init+0xa0>)
 8002c6e:	f008 fa2b 	bl	800b0c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002c78:	f7ff fd08 	bl	800268c <Error_Handler>
#ifdef JiaYangZhen_EncoderMode
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
#endif
  /* USER CODE END TIM3_Init 2 */

}
 8002c7c:	bf00      	nop
 8002c7e:	3730      	adds	r7, #48	; 0x30
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	2000045c 	.word	0x2000045c
 8002c88:	40000400 	.word	0x40000400

08002c8c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08c      	sub	sp, #48	; 0x30
 8002c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002c92:	f107 030c 	add.w	r3, r7, #12
 8002c96:	2224      	movs	r2, #36	; 0x24
 8002c98:	2100      	movs	r1, #0
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f00c fa4f 	bl	800f13e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ca0:	1d3b      	adds	r3, r7, #4
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ca8:	4b20      	ldr	r3, [pc, #128]	; (8002d2c <MX_TIM4_Init+0xa0>)
 8002caa:	4a21      	ldr	r2, [pc, #132]	; (8002d30 <MX_TIM4_Init+0xa4>)
 8002cac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 8002cae:	4b1f      	ldr	r3, [pc, #124]	; (8002d2c <MX_TIM4_Init+0xa0>)
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb4:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <MX_TIM4_Init+0xa0>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002cba:	4b1c      	ldr	r3, [pc, #112]	; (8002d2c <MX_TIM4_Init+0xa0>)
 8002cbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cc0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cc2:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <MX_TIM4_Init+0xa0>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cc8:	4b18      	ldr	r3, [pc, #96]	; (8002d2c <MX_TIM4_Init+0xa0>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002cde:	230f      	movs	r3, #15
 8002ce0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002cea:	2300      	movs	r3, #0
 8002cec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002cee:	230f      	movs	r3, #15
 8002cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002cf2:	f107 030c 	add.w	r3, r7, #12
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	480c      	ldr	r0, [pc, #48]	; (8002d2c <MX_TIM4_Init+0xa0>)
 8002cfa:	f007 fe0e 	bl	800a91a <HAL_TIM_Encoder_Init>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002d04:	f7ff fcc2 	bl	800268c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d10:	1d3b      	adds	r3, r7, #4
 8002d12:	4619      	mov	r1, r3
 8002d14:	4805      	ldr	r0, [pc, #20]	; (8002d2c <MX_TIM4_Init+0xa0>)
 8002d16:	f008 f9d7 	bl	800b0c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002d20:	f7ff fcb4 	bl	800268c <Error_Handler>
#ifdef JiaYangZhen_EncoderMode
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
#endif
  /* USER CODE END TIM4_Init 2 */

}
 8002d24:	bf00      	nop
 8002d26:	3730      	adds	r7, #48	; 0x30
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	200004a4 	.word	0x200004a4
 8002d30:	40000800 	.word	0x40000800

08002d34 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d3a:	463b      	mov	r3, r7
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002d42:	4b14      	ldr	r3, [pc, #80]	; (8002d94 <MX_TIM6_Init+0x60>)
 8002d44:	4a14      	ldr	r2, [pc, #80]	; (8002d98 <MX_TIM6_Init+0x64>)
 8002d46:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 8002d48:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <MX_TIM6_Init+0x60>)
 8002d4a:	224f      	movs	r2, #79	; 0x4f
 8002d4c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d4e:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <MX_TIM6_Init+0x60>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8002d54:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <MX_TIM6_Init+0x60>)
 8002d56:	2209      	movs	r2, #9
 8002d58:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d5a:	4b0e      	ldr	r3, [pc, #56]	; (8002d94 <MX_TIM6_Init+0x60>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002d60:	480c      	ldr	r0, [pc, #48]	; (8002d94 <MX_TIM6_Init+0x60>)
 8002d62:	f007 fceb 	bl	800a73c <HAL_TIM_Base_Init>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8002d6c:	f7ff fc8e 	bl	800268c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d70:	2300      	movs	r3, #0
 8002d72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d74:	2300      	movs	r3, #0
 8002d76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002d78:	463b      	mov	r3, r7
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4805      	ldr	r0, [pc, #20]	; (8002d94 <MX_TIM6_Init+0x60>)
 8002d7e:	f008 f9a3 	bl	800b0c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8002d88:	f7ff fc80 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002d8c:	bf00      	nop
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	200004ec 	.word	0x200004ec
 8002d98:	40001000 	.word	0x40001000

08002d9c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002da2:	463b      	mov	r3, r7
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002daa:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <MX_TIM7_Init+0x60>)
 8002dac:	4a14      	ldr	r2, [pc, #80]	; (8002e00 <MX_TIM7_Init+0x64>)
 8002dae:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 79;
 8002db0:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <MX_TIM7_Init+0x60>)
 8002db2:	224f      	movs	r2, #79	; 0x4f
 8002db4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002db6:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <MX_TIM7_Init+0x60>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <MX_TIM7_Init+0x60>)
 8002dbe:	2209      	movs	r2, #9
 8002dc0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <MX_TIM7_Init+0x60>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002dc8:	480c      	ldr	r0, [pc, #48]	; (8002dfc <MX_TIM7_Init+0x60>)
 8002dca:	f007 fcb7 	bl	800a73c <HAL_TIM_Base_Init>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8002dd4:	f7ff fc5a 	bl	800268c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002de0:	463b      	mov	r3, r7
 8002de2:	4619      	mov	r1, r3
 8002de4:	4805      	ldr	r0, [pc, #20]	; (8002dfc <MX_TIM7_Init+0x60>)
 8002de6:	f008 f96f 	bl	800b0c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8002df0:	f7ff fc4c 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002df4:	bf00      	nop
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20000534 	.word	0x20000534
 8002e00:	40001400 	.word	0x40001400

08002e04 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e0a:	463b      	mov	r3, r7
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002e16:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <MX_TIM9_Init+0x68>)
 8002e18:	4a15      	ldr	r2, [pc, #84]	; (8002e70 <MX_TIM9_Init+0x6c>)
 8002e1a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 79;
 8002e1c:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <MX_TIM9_Init+0x68>)
 8002e1e:	224f      	movs	r2, #79	; 0x4f
 8002e20:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e22:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <MX_TIM9_Init+0x68>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 99;
 8002e28:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <MX_TIM9_Init+0x68>)
 8002e2a:	2263      	movs	r2, #99	; 0x63
 8002e2c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e2e:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <MX_TIM9_Init+0x68>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e34:	4b0d      	ldr	r3, [pc, #52]	; (8002e6c <MX_TIM9_Init+0x68>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002e3a:	480c      	ldr	r0, [pc, #48]	; (8002e6c <MX_TIM9_Init+0x68>)
 8002e3c:	f007 fc7e 	bl	800a73c <HAL_TIM_Base_Init>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <MX_TIM9_Init+0x46>
  {
    Error_Handler();
 8002e46:	f7ff fc21 	bl	800268c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e4e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002e50:	463b      	mov	r3, r7
 8002e52:	4619      	mov	r1, r3
 8002e54:	4805      	ldr	r0, [pc, #20]	; (8002e6c <MX_TIM9_Init+0x68>)
 8002e56:	f007 ff0e 	bl	800ac76 <HAL_TIM_ConfigClockSource>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <MX_TIM9_Init+0x60>
  {
    Error_Handler();
 8002e60:	f7ff fc14 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002e64:	bf00      	nop
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	2000057c 	.word	0x2000057c
 8002e70:	40014000 	.word	0x40014000

08002e74 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002e78:	4b0d      	ldr	r3, [pc, #52]	; (8002eb0 <MX_TIM10_Init+0x3c>)
 8002e7a:	4a0e      	ldr	r2, [pc, #56]	; (8002eb4 <MX_TIM10_Init+0x40>)
 8002e7c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 79;
 8002e7e:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <MX_TIM10_Init+0x3c>)
 8002e80:	224f      	movs	r2, #79	; 0x4f
 8002e82:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e84:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <MX_TIM10_Init+0x3c>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9;
 8002e8a:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <MX_TIM10_Init+0x3c>)
 8002e8c:	2209      	movs	r2, #9
 8002e8e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e90:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <MX_TIM10_Init+0x3c>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e96:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <MX_TIM10_Init+0x3c>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002e9c:	4804      	ldr	r0, [pc, #16]	; (8002eb0 <MX_TIM10_Init+0x3c>)
 8002e9e:	f007 fc4d 	bl	800a73c <HAL_TIM_Base_Init>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 8002ea8:	f7ff fbf0 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002eac:	bf00      	nop
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	200005c4 	.word	0x200005c4
 8002eb4:	40014400 	.word	0x40014400

08002eb8 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002ebc:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <MX_TIM11_Init+0x3c>)
 8002ebe:	4a0e      	ldr	r2, [pc, #56]	; (8002ef8 <MX_TIM11_Init+0x40>)
 8002ec0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 79;
 8002ec2:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <MX_TIM11_Init+0x3c>)
 8002ec4:	224f      	movs	r2, #79	; 0x4f
 8002ec6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ec8:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <MX_TIM11_Init+0x3c>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9;
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <MX_TIM11_Init+0x3c>)
 8002ed0:	2209      	movs	r2, #9
 8002ed2:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ed4:	4b07      	ldr	r3, [pc, #28]	; (8002ef4 <MX_TIM11_Init+0x3c>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eda:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <MX_TIM11_Init+0x3c>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002ee0:	4804      	ldr	r0, [pc, #16]	; (8002ef4 <MX_TIM11_Init+0x3c>)
 8002ee2:	f007 fc2b 	bl	800a73c <HAL_TIM_Base_Init>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 8002eec:	f7ff fbce 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002ef0:	bf00      	nop
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	2000060c 	.word	0x2000060c
 8002ef8:	40014800 	.word	0x40014800

08002efc <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f02:	463b      	mov	r3, r7
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002f0e:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <MX_TIM12_Init+0x68>)
 8002f10:	4a15      	ldr	r2, [pc, #84]	; (8002f68 <MX_TIM12_Init+0x6c>)
 8002f12:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 79;
 8002f14:	4b13      	ldr	r3, [pc, #76]	; (8002f64 <MX_TIM12_Init+0x68>)
 8002f16:	224f      	movs	r2, #79	; 0x4f
 8002f18:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f1a:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <MX_TIM12_Init+0x68>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 9;
 8002f20:	4b10      	ldr	r3, [pc, #64]	; (8002f64 <MX_TIM12_Init+0x68>)
 8002f22:	2209      	movs	r2, #9
 8002f24:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f26:	4b0f      	ldr	r3, [pc, #60]	; (8002f64 <MX_TIM12_Init+0x68>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f2c:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <MX_TIM12_Init+0x68>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002f32:	480c      	ldr	r0, [pc, #48]	; (8002f64 <MX_TIM12_Init+0x68>)
 8002f34:	f007 fc02 	bl	800a73c <HAL_TIM_Base_Init>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_TIM12_Init+0x46>
  {
    Error_Handler();
 8002f3e:	f7ff fba5 	bl	800268c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f46:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002f48:	463b      	mov	r3, r7
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4805      	ldr	r0, [pc, #20]	; (8002f64 <MX_TIM12_Init+0x68>)
 8002f4e:	f007 fe92 	bl	800ac76 <HAL_TIM_ConfigClockSource>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <MX_TIM12_Init+0x60>
  {
    Error_Handler();
 8002f58:	f7ff fb98 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8002f5c:	bf00      	nop
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	20000654 	.word	0x20000654
 8002f68:	40001800 	.word	0x40001800

08002f6c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002f70:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <MX_TIM13_Init+0x3c>)
 8002f72:	4a0e      	ldr	r2, [pc, #56]	; (8002fac <MX_TIM13_Init+0x40>)
 8002f74:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 79;
 8002f76:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <MX_TIM13_Init+0x3c>)
 8002f78:	224f      	movs	r2, #79	; 0x4f
 8002f7a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <MX_TIM13_Init+0x3c>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9;
 8002f82:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <MX_TIM13_Init+0x3c>)
 8002f84:	2209      	movs	r2, #9
 8002f86:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f88:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <MX_TIM13_Init+0x3c>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f8e:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <MX_TIM13_Init+0x3c>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002f94:	4804      	ldr	r0, [pc, #16]	; (8002fa8 <MX_TIM13_Init+0x3c>)
 8002f96:	f007 fbd1 	bl	800a73c <HAL_TIM_Base_Init>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <MX_TIM13_Init+0x38>
  {
    Error_Handler();
 8002fa0:	f7ff fb74 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002fa4:	bf00      	nop
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	2000069c 	.word	0x2000069c
 8002fac:	40001c00 	.word	0x40001c00

08002fb0 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002fb4:	4b0d      	ldr	r3, [pc, #52]	; (8002fec <MX_TIM14_Init+0x3c>)
 8002fb6:	4a0e      	ldr	r2, [pc, #56]	; (8002ff0 <MX_TIM14_Init+0x40>)
 8002fb8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 79;
 8002fba:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <MX_TIM14_Init+0x3c>)
 8002fbc:	224f      	movs	r2, #79	; 0x4f
 8002fbe:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <MX_TIM14_Init+0x3c>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9;
 8002fc6:	4b09      	ldr	r3, [pc, #36]	; (8002fec <MX_TIM14_Init+0x3c>)
 8002fc8:	2209      	movs	r2, #9
 8002fca:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fcc:	4b07      	ldr	r3, [pc, #28]	; (8002fec <MX_TIM14_Init+0x3c>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fd2:	4b06      	ldr	r3, [pc, #24]	; (8002fec <MX_TIM14_Init+0x3c>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002fd8:	4804      	ldr	r0, [pc, #16]	; (8002fec <MX_TIM14_Init+0x3c>)
 8002fda:	f007 fbaf 	bl	800a73c <HAL_TIM_Base_Init>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8002fe4:	f7ff fb52 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002fe8:	bf00      	nop
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	200006e4 	.word	0x200006e4
 8002ff0:	40002000 	.word	0x40002000

08002ff4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08e      	sub	sp, #56	; 0x38
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	609a      	str	r2, [r3, #8]
 8003008:	60da      	str	r2, [r3, #12]
 800300a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003014:	d12c      	bne.n	8003070 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	623b      	str	r3, [r7, #32]
 800301a:	4b51      	ldr	r3, [pc, #324]	; (8003160 <HAL_TIM_Encoder_MspInit+0x16c>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	4a50      	ldr	r2, [pc, #320]	; (8003160 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6413      	str	r3, [r2, #64]	; 0x40
 8003026:	4b4e      	ldr	r3, [pc, #312]	; (8003160 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	623b      	str	r3, [r7, #32]
 8003030:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
 8003036:	4b4a      	ldr	r3, [pc, #296]	; (8003160 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	4a49      	ldr	r2, [pc, #292]	; (8003160 <HAL_TIM_Encoder_MspInit+0x16c>)
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	6313      	str	r3, [r2, #48]	; 0x30
 8003042:	4b47      	ldr	r3, [pc, #284]	; (8003160 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	61fb      	str	r3, [r7, #28]
 800304c:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Encoder4_B_Pin|Encoder4_A_Pin;
 800304e:	2322      	movs	r3, #34	; 0x22
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003052:	2302      	movs	r3, #2
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003056:	2300      	movs	r3, #0
 8003058:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305a:	2300      	movs	r3, #0
 800305c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800305e:	2301      	movs	r3, #1
 8003060:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003066:	4619      	mov	r1, r3
 8003068:	483e      	ldr	r0, [pc, #248]	; (8003164 <HAL_TIM_Encoder_MspInit+0x170>)
 800306a:	f004 fe7d 	bl	8007d68 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800306e:	e073      	b.n	8003158 <HAL_TIM_Encoder_MspInit+0x164>
  else if(tim_encoderHandle->Instance==TIM3)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a3c      	ldr	r2, [pc, #240]	; (8003168 <HAL_TIM_Encoder_MspInit+0x174>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d134      	bne.n	80030e4 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800307a:	2300      	movs	r3, #0
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	4b38      	ldr	r3, [pc, #224]	; (8003160 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	4a37      	ldr	r2, [pc, #220]	; (8003160 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003084:	f043 0302 	orr.w	r3, r3, #2
 8003088:	6413      	str	r3, [r2, #64]	; 0x40
 800308a:	4b35      	ldr	r3, [pc, #212]	; (8003160 <HAL_TIM_Encoder_MspInit+0x16c>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	61bb      	str	r3, [r7, #24]
 8003094:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	4b31      	ldr	r3, [pc, #196]	; (8003160 <HAL_TIM_Encoder_MspInit+0x16c>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	4a30      	ldr	r2, [pc, #192]	; (8003160 <HAL_TIM_Encoder_MspInit+0x16c>)
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	6313      	str	r3, [r2, #48]	; 0x30
 80030a6:	4b2e      	ldr	r3, [pc, #184]	; (8003160 <HAL_TIM_Encoder_MspInit+0x16c>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Encoder3_A_Pin|Encoder3_B_Pin;
 80030b2:	23c0      	movs	r3, #192	; 0xc0
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b6:	2302      	movs	r3, #2
 80030b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ba:	2300      	movs	r3, #0
 80030bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030be:	2300      	movs	r3, #0
 80030c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030c2:	2302      	movs	r3, #2
 80030c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ca:	4619      	mov	r1, r3
 80030cc:	4825      	ldr	r0, [pc, #148]	; (8003164 <HAL_TIM_Encoder_MspInit+0x170>)
 80030ce:	f004 fe4b 	bl	8007d68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80030d2:	2200      	movs	r2, #0
 80030d4:	2105      	movs	r1, #5
 80030d6:	201d      	movs	r0, #29
 80030d8:	f004 f9b2 	bl	8007440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80030dc:	201d      	movs	r0, #29
 80030de:	f004 f9cb 	bl	8007478 <HAL_NVIC_EnableIRQ>
}
 80030e2:	e039      	b.n	8003158 <HAL_TIM_Encoder_MspInit+0x164>
  else if(tim_encoderHandle->Instance==TIM4)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a20      	ldr	r2, [pc, #128]	; (800316c <HAL_TIM_Encoder_MspInit+0x178>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d134      	bne.n	8003158 <HAL_TIM_Encoder_MspInit+0x164>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	4b1b      	ldr	r3, [pc, #108]	; (8003160 <HAL_TIM_Encoder_MspInit+0x16c>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	4a1a      	ldr	r2, [pc, #104]	; (8003160 <HAL_TIM_Encoder_MspInit+0x16c>)
 80030f8:	f043 0304 	orr.w	r3, r3, #4
 80030fc:	6413      	str	r3, [r2, #64]	; 0x40
 80030fe:	4b18      	ldr	r3, [pc, #96]	; (8003160 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	4b14      	ldr	r3, [pc, #80]	; (8003160 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	4a13      	ldr	r2, [pc, #76]	; (8003160 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003114:	f043 0308 	orr.w	r3, r3, #8
 8003118:	6313      	str	r3, [r2, #48]	; 0x30
 800311a:	4b11      	ldr	r3, [pc, #68]	; (8003160 <HAL_TIM_Encoder_MspInit+0x16c>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 8003126:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800312a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312c:	2302      	movs	r3, #2
 800312e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003130:	2300      	movs	r3, #0
 8003132:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003134:	2300      	movs	r3, #0
 8003136:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003138:	2302      	movs	r3, #2
 800313a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800313c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003140:	4619      	mov	r1, r3
 8003142:	480b      	ldr	r0, [pc, #44]	; (8003170 <HAL_TIM_Encoder_MspInit+0x17c>)
 8003144:	f004 fe10 	bl	8007d68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003148:	2200      	movs	r2, #0
 800314a:	2105      	movs	r1, #5
 800314c:	201e      	movs	r0, #30
 800314e:	f004 f977 	bl	8007440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003152:	201e      	movs	r0, #30
 8003154:	f004 f990 	bl	8007478 <HAL_NVIC_EnableIRQ>
}
 8003158:	bf00      	nop
 800315a:	3738      	adds	r7, #56	; 0x38
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40023800 	.word	0x40023800
 8003164:	40020000 	.word	0x40020000
 8003168:	40000400 	.word	0x40000400
 800316c:	40000800 	.word	0x40000800
 8003170:	40020c00 	.word	0x40020c00

08003174 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08a      	sub	sp, #40	; 0x28
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a70      	ldr	r2, [pc, #448]	; (8003344 <HAL_TIM_Base_MspInit+0x1d0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d116      	bne.n	80031b4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
 800318a:	4b6f      	ldr	r3, [pc, #444]	; (8003348 <HAL_TIM_Base_MspInit+0x1d4>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	4a6e      	ldr	r2, [pc, #440]	; (8003348 <HAL_TIM_Base_MspInit+0x1d4>)
 8003190:	f043 0310 	orr.w	r3, r3, #16
 8003194:	6413      	str	r3, [r2, #64]	; 0x40
 8003196:	4b6c      	ldr	r3, [pc, #432]	; (8003348 <HAL_TIM_Base_MspInit+0x1d4>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f003 0310 	and.w	r3, r3, #16
 800319e:	627b      	str	r3, [r7, #36]	; 0x24
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 7, 0);
 80031a2:	2200      	movs	r2, #0
 80031a4:	2107      	movs	r1, #7
 80031a6:	2036      	movs	r0, #54	; 0x36
 80031a8:	f004 f94a 	bl	8007440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80031ac:	2036      	movs	r0, #54	; 0x36
 80031ae:	f004 f963 	bl	8007478 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80031b2:	e0c2      	b.n	800333a <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM7)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a64      	ldr	r2, [pc, #400]	; (800334c <HAL_TIM_Base_MspInit+0x1d8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d116      	bne.n	80031ec <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	623b      	str	r3, [r7, #32]
 80031c2:	4b61      	ldr	r3, [pc, #388]	; (8003348 <HAL_TIM_Base_MspInit+0x1d4>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	4a60      	ldr	r2, [pc, #384]	; (8003348 <HAL_TIM_Base_MspInit+0x1d4>)
 80031c8:	f043 0320 	orr.w	r3, r3, #32
 80031cc:	6413      	str	r3, [r2, #64]	; 0x40
 80031ce:	4b5e      	ldr	r3, [pc, #376]	; (8003348 <HAL_TIM_Base_MspInit+0x1d4>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f003 0320 	and.w	r3, r3, #32
 80031d6:	623b      	str	r3, [r7, #32]
 80031d8:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM7_IRQn, 6, 0);
 80031da:	2200      	movs	r2, #0
 80031dc:	2106      	movs	r1, #6
 80031de:	2037      	movs	r0, #55	; 0x37
 80031e0:	f004 f92e 	bl	8007440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80031e4:	2037      	movs	r0, #55	; 0x37
 80031e6:	f004 f947 	bl	8007478 <HAL_NVIC_EnableIRQ>
}
 80031ea:	e0a6      	b.n	800333a <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM9)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a57      	ldr	r2, [pc, #348]	; (8003350 <HAL_TIM_Base_MspInit+0x1dc>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d116      	bne.n	8003224 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
 80031fa:	4b53      	ldr	r3, [pc, #332]	; (8003348 <HAL_TIM_Base_MspInit+0x1d4>)
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	4a52      	ldr	r2, [pc, #328]	; (8003348 <HAL_TIM_Base_MspInit+0x1d4>)
 8003200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003204:	6453      	str	r3, [r2, #68]	; 0x44
 8003206:	4b50      	ldr	r3, [pc, #320]	; (8003348 <HAL_TIM_Base_MspInit+0x1d4>)
 8003208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800320e:	61fb      	str	r3, [r7, #28]
 8003210:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8003212:	2200      	movs	r2, #0
 8003214:	2105      	movs	r1, #5
 8003216:	2018      	movs	r0, #24
 8003218:	f004 f912 	bl	8007440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800321c:	2018      	movs	r0, #24
 800321e:	f004 f92b 	bl	8007478 <HAL_NVIC_EnableIRQ>
}
 8003222:	e08a      	b.n	800333a <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM10)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a4a      	ldr	r2, [pc, #296]	; (8003354 <HAL_TIM_Base_MspInit+0x1e0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d116      	bne.n	800325c <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800322e:	2300      	movs	r3, #0
 8003230:	61bb      	str	r3, [r7, #24]
 8003232:	4b45      	ldr	r3, [pc, #276]	; (8003348 <HAL_TIM_Base_MspInit+0x1d4>)
 8003234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003236:	4a44      	ldr	r2, [pc, #272]	; (8003348 <HAL_TIM_Base_MspInit+0x1d4>)
 8003238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800323c:	6453      	str	r3, [r2, #68]	; 0x44
 800323e:	4b42      	ldr	r3, [pc, #264]	; (8003348 <HAL_TIM_Base_MspInit+0x1d4>)
 8003240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003246:	61bb      	str	r3, [r7, #24]
 8003248:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800324a:	2200      	movs	r2, #0
 800324c:	2105      	movs	r1, #5
 800324e:	2019      	movs	r0, #25
 8003250:	f004 f8f6 	bl	8007440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003254:	2019      	movs	r0, #25
 8003256:	f004 f90f 	bl	8007478 <HAL_NVIC_EnableIRQ>
}
 800325a:	e06e      	b.n	800333a <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM11)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a3d      	ldr	r2, [pc, #244]	; (8003358 <HAL_TIM_Base_MspInit+0x1e4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d116      	bne.n	8003294 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	4b37      	ldr	r3, [pc, #220]	; (8003348 <HAL_TIM_Base_MspInit+0x1d4>)
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	4a36      	ldr	r2, [pc, #216]	; (8003348 <HAL_TIM_Base_MspInit+0x1d4>)
 8003270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003274:	6453      	str	r3, [r2, #68]	; 0x44
 8003276:	4b34      	ldr	r3, [pc, #208]	; (8003348 <HAL_TIM_Base_MspInit+0x1d4>)
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8003282:	2200      	movs	r2, #0
 8003284:	2105      	movs	r1, #5
 8003286:	201a      	movs	r0, #26
 8003288:	f004 f8da 	bl	8007440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800328c:	201a      	movs	r0, #26
 800328e:	f004 f8f3 	bl	8007478 <HAL_NVIC_EnableIRQ>
}
 8003292:	e052      	b.n	800333a <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM12)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a30      	ldr	r2, [pc, #192]	; (800335c <HAL_TIM_Base_MspInit+0x1e8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d116      	bne.n	80032cc <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	613b      	str	r3, [r7, #16]
 80032a2:	4b29      	ldr	r3, [pc, #164]	; (8003348 <HAL_TIM_Base_MspInit+0x1d4>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	4a28      	ldr	r2, [pc, #160]	; (8003348 <HAL_TIM_Base_MspInit+0x1d4>)
 80032a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ac:	6413      	str	r3, [r2, #64]	; 0x40
 80032ae:	4b26      	ldr	r3, [pc, #152]	; (8003348 <HAL_TIM_Base_MspInit+0x1d4>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b6:	613b      	str	r3, [r7, #16]
 80032b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 80032ba:	2200      	movs	r2, #0
 80032bc:	2105      	movs	r1, #5
 80032be:	202b      	movs	r0, #43	; 0x2b
 80032c0:	f004 f8be 	bl	8007440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80032c4:	202b      	movs	r0, #43	; 0x2b
 80032c6:	f004 f8d7 	bl	8007478 <HAL_NVIC_EnableIRQ>
}
 80032ca:	e036      	b.n	800333a <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM13)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a23      	ldr	r2, [pc, #140]	; (8003360 <HAL_TIM_Base_MspInit+0x1ec>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d116      	bne.n	8003304 <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <HAL_TIM_Base_MspInit+0x1d4>)
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	4a1a      	ldr	r2, [pc, #104]	; (8003348 <HAL_TIM_Base_MspInit+0x1d4>)
 80032e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e4:	6413      	str	r3, [r2, #64]	; 0x40
 80032e6:	4b18      	ldr	r3, [pc, #96]	; (8003348 <HAL_TIM_Base_MspInit+0x1d4>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 80032f2:	2200      	movs	r2, #0
 80032f4:	2105      	movs	r1, #5
 80032f6:	202c      	movs	r0, #44	; 0x2c
 80032f8:	f004 f8a2 	bl	8007440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80032fc:	202c      	movs	r0, #44	; 0x2c
 80032fe:	f004 f8bb 	bl	8007478 <HAL_NVIC_EnableIRQ>
}
 8003302:	e01a      	b.n	800333a <HAL_TIM_Base_MspInit+0x1c6>
  else if(tim_baseHandle->Instance==TIM14)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a16      	ldr	r2, [pc, #88]	; (8003364 <HAL_TIM_Base_MspInit+0x1f0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d115      	bne.n	800333a <HAL_TIM_Base_MspInit+0x1c6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800330e:	2300      	movs	r3, #0
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	4b0d      	ldr	r3, [pc, #52]	; (8003348 <HAL_TIM_Base_MspInit+0x1d4>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	4a0c      	ldr	r2, [pc, #48]	; (8003348 <HAL_TIM_Base_MspInit+0x1d4>)
 8003318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800331c:	6413      	str	r3, [r2, #64]	; 0x40
 800331e:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <HAL_TIM_Base_MspInit+0x1d4>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 800332a:	2200      	movs	r2, #0
 800332c:	2105      	movs	r1, #5
 800332e:	202d      	movs	r0, #45	; 0x2d
 8003330:	f004 f886 	bl	8007440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003334:	202d      	movs	r0, #45	; 0x2d
 8003336:	f004 f89f 	bl	8007478 <HAL_NVIC_EnableIRQ>
}
 800333a:	bf00      	nop
 800333c:	3728      	adds	r7, #40	; 0x28
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40001000 	.word	0x40001000
 8003348:	40023800 	.word	0x40023800
 800334c:	40001400 	.word	0x40001400
 8003350:	40014000 	.word	0x40014000
 8003354:	40014400 	.word	0x40014400
 8003358:	40014800 	.word	0x40014800
 800335c:	40001800 	.word	0x40001800
 8003360:	40001c00 	.word	0x40001c00
 8003364:	40002000 	.word	0x40002000

08003368 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800336c:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <MX_UART4_Init+0x4c>)
 800336e:	4a12      	ldr	r2, [pc, #72]	; (80033b8 <MX_UART4_Init+0x50>)
 8003370:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003372:	4b10      	ldr	r3, [pc, #64]	; (80033b4 <MX_UART4_Init+0x4c>)
 8003374:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003378:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800337a:	4b0e      	ldr	r3, [pc, #56]	; (80033b4 <MX_UART4_Init+0x4c>)
 800337c:	2200      	movs	r2, #0
 800337e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003380:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <MX_UART4_Init+0x4c>)
 8003382:	2200      	movs	r2, #0
 8003384:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003386:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <MX_UART4_Init+0x4c>)
 8003388:	2200      	movs	r2, #0
 800338a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800338c:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <MX_UART4_Init+0x4c>)
 800338e:	220c      	movs	r2, #12
 8003390:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003392:	4b08      	ldr	r3, [pc, #32]	; (80033b4 <MX_UART4_Init+0x4c>)
 8003394:	2200      	movs	r2, #0
 8003396:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <MX_UART4_Init+0x4c>)
 800339a:	2200      	movs	r2, #0
 800339c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800339e:	4805      	ldr	r0, [pc, #20]	; (80033b4 <MX_UART4_Init+0x4c>)
 80033a0:	f007 ff22 	bl	800b1e8 <HAL_UART_Init>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80033aa:	f7ff f96f 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80033ae:	bf00      	nop
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20000798 	.word	0x20000798
 80033b8:	40004c00 	.word	0x40004c00

080033bc <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */
#ifndef DushuModule
  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80033c0:	4b13      	ldr	r3, [pc, #76]	; (8003410 <MX_UART5_Init+0x54>)
 80033c2:	4a14      	ldr	r2, [pc, #80]	; (8003414 <MX_UART5_Init+0x58>)
 80033c4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80033c6:	4b12      	ldr	r3, [pc, #72]	; (8003410 <MX_UART5_Init+0x54>)
 80033c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033cc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80033ce:	4b10      	ldr	r3, [pc, #64]	; (8003410 <MX_UART5_Init+0x54>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80033d4:	4b0e      	ldr	r3, [pc, #56]	; (8003410 <MX_UART5_Init+0x54>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80033da:	4b0d      	ldr	r3, [pc, #52]	; (8003410 <MX_UART5_Init+0x54>)
 80033dc:	2200      	movs	r2, #0
 80033de:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <MX_UART5_Init+0x54>)
 80033e2:	220c      	movs	r2, #12
 80033e4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033e6:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <MX_UART5_Init+0x54>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80033ec:	4b08      	ldr	r3, [pc, #32]	; (8003410 <MX_UART5_Init+0x54>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80033f2:	4807      	ldr	r0, [pc, #28]	; (8003410 <MX_UART5_Init+0x54>)
 80033f4:	f007 fef8 	bl	800b1e8 <HAL_UART_Init>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80033fe:	f7ff f945 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
  HAL_UART_Receive_IT(&huart5, (uint8_t *)aRxBuffer, 1);
 8003402:	2201      	movs	r2, #1
 8003404:	4904      	ldr	r1, [pc, #16]	; (8003418 <MX_UART5_Init+0x5c>)
 8003406:	4802      	ldr	r0, [pc, #8]	; (8003410 <MX_UART5_Init+0x54>)
 8003408:	f008 f812 	bl	800b430 <HAL_UART_Receive_IT>
  }
  HAL_UART_Receive_IT(&huart5, (uint8_t *)aRxBuffer, 1);	//接收中断：标志位UART_IT_RXNE，并且设置接收缓冲以及接收缓冲接收最大数据量
#endif
  /* USER CODE END UART5_Init 2 */

}
 800340c:	bf00      	nop
 800340e:	bd80      	pop	{r7, pc}
 8003410:	200007dc 	.word	0x200007dc
 8003414:	40005000 	.word	0x40005000
 8003418:	2000072c 	.word	0x2000072c

0800341c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003420:	4b11      	ldr	r3, [pc, #68]	; (8003468 <MX_USART1_UART_Init+0x4c>)
 8003422:	4a12      	ldr	r2, [pc, #72]	; (800346c <MX_USART1_UART_Init+0x50>)
 8003424:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003426:	4b10      	ldr	r3, [pc, #64]	; (8003468 <MX_USART1_UART_Init+0x4c>)
 8003428:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800342c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800342e:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <MX_USART1_UART_Init+0x4c>)
 8003430:	2200      	movs	r2, #0
 8003432:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003434:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <MX_USART1_UART_Init+0x4c>)
 8003436:	2200      	movs	r2, #0
 8003438:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800343a:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <MX_USART1_UART_Init+0x4c>)
 800343c:	2200      	movs	r2, #0
 800343e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003440:	4b09      	ldr	r3, [pc, #36]	; (8003468 <MX_USART1_UART_Init+0x4c>)
 8003442:	220c      	movs	r2, #12
 8003444:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003446:	4b08      	ldr	r3, [pc, #32]	; (8003468 <MX_USART1_UART_Init+0x4c>)
 8003448:	2200      	movs	r2, #0
 800344a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800344c:	4b06      	ldr	r3, [pc, #24]	; (8003468 <MX_USART1_UART_Init+0x4c>)
 800344e:	2200      	movs	r2, #0
 8003450:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003452:	4805      	ldr	r0, [pc, #20]	; (8003468 <MX_USART1_UART_Init+0x4c>)
 8003454:	f007 fec8 	bl	800b1e8 <HAL_UART_Init>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800345e:	f7ff f915 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20000820 	.word	0x20000820
 800346c:	40011000 	.word	0x40011000

08003470 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003474:	4b11      	ldr	r3, [pc, #68]	; (80034bc <MX_USART3_UART_Init+0x4c>)
 8003476:	4a12      	ldr	r2, [pc, #72]	; (80034c0 <MX_USART3_UART_Init+0x50>)
 8003478:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800347a:	4b10      	ldr	r3, [pc, #64]	; (80034bc <MX_USART3_UART_Init+0x4c>)
 800347c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003480:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003482:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <MX_USART3_UART_Init+0x4c>)
 8003484:	2200      	movs	r2, #0
 8003486:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003488:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <MX_USART3_UART_Init+0x4c>)
 800348a:	2200      	movs	r2, #0
 800348c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800348e:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <MX_USART3_UART_Init+0x4c>)
 8003490:	2200      	movs	r2, #0
 8003492:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003494:	4b09      	ldr	r3, [pc, #36]	; (80034bc <MX_USART3_UART_Init+0x4c>)
 8003496:	220c      	movs	r2, #12
 8003498:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800349a:	4b08      	ldr	r3, [pc, #32]	; (80034bc <MX_USART3_UART_Init+0x4c>)
 800349c:	2200      	movs	r2, #0
 800349e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80034a0:	4b06      	ldr	r3, [pc, #24]	; (80034bc <MX_USART3_UART_Init+0x4c>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80034a6:	4805      	ldr	r0, [pc, #20]	; (80034bc <MX_USART3_UART_Init+0x4c>)
 80034a8:	f007 fe9e 	bl	800b1e8 <HAL_UART_Init>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80034b2:	f7ff f8eb 	bl	800268c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80034b6:	bf00      	nop
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	20000864 	.word	0x20000864
 80034c0:	40004800 	.word	0x40004800

080034c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b090      	sub	sp, #64	; 0x40
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	605a      	str	r2, [r3, #4]
 80034d6:	609a      	str	r2, [r3, #8]
 80034d8:	60da      	str	r2, [r3, #12]
 80034da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a79      	ldr	r2, [pc, #484]	; (80036c8 <HAL_UART_MspInit+0x204>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d12d      	bne.n	8003542 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ea:	4b78      	ldr	r3, [pc, #480]	; (80036cc <HAL_UART_MspInit+0x208>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	4a77      	ldr	r2, [pc, #476]	; (80036cc <HAL_UART_MspInit+0x208>)
 80034f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80034f4:	6413      	str	r3, [r2, #64]	; 0x40
 80034f6:	4b75      	ldr	r3, [pc, #468]	; (80036cc <HAL_UART_MspInit+0x208>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003500:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
 8003506:	4b71      	ldr	r3, [pc, #452]	; (80036cc <HAL_UART_MspInit+0x208>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	4a70      	ldr	r2, [pc, #448]	; (80036cc <HAL_UART_MspInit+0x208>)
 800350c:	f043 0304 	orr.w	r3, r3, #4
 8003510:	6313      	str	r3, [r2, #48]	; 0x30
 8003512:	4b6e      	ldr	r3, [pc, #440]	; (80036cc <HAL_UART_MspInit+0x208>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800351e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003522:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003524:	2302      	movs	r3, #2
 8003526:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003528:	2300      	movs	r3, #0
 800352a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800352c:	2303      	movs	r3, #3
 800352e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003530:	2308      	movs	r3, #8
 8003532:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003534:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003538:	4619      	mov	r1, r3
 800353a:	4865      	ldr	r0, [pc, #404]	; (80036d0 <HAL_UART_MspInit+0x20c>)
 800353c:	f004 fc14 	bl	8007d68 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003540:	e0bd      	b.n	80036be <HAL_UART_MspInit+0x1fa>
  else if(uartHandle->Instance==UART5)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a63      	ldr	r2, [pc, #396]	; (80036d4 <HAL_UART_MspInit+0x210>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d153      	bne.n	80035f4 <HAL_UART_MspInit+0x130>
    __HAL_RCC_UART5_CLK_ENABLE();
 800354c:	2300      	movs	r3, #0
 800354e:	623b      	str	r3, [r7, #32]
 8003550:	4b5e      	ldr	r3, [pc, #376]	; (80036cc <HAL_UART_MspInit+0x208>)
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	4a5d      	ldr	r2, [pc, #372]	; (80036cc <HAL_UART_MspInit+0x208>)
 8003556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800355a:	6413      	str	r3, [r2, #64]	; 0x40
 800355c:	4b5b      	ldr	r3, [pc, #364]	; (80036cc <HAL_UART_MspInit+0x208>)
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003564:	623b      	str	r3, [r7, #32]
 8003566:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003568:	2300      	movs	r3, #0
 800356a:	61fb      	str	r3, [r7, #28]
 800356c:	4b57      	ldr	r3, [pc, #348]	; (80036cc <HAL_UART_MspInit+0x208>)
 800356e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003570:	4a56      	ldr	r2, [pc, #344]	; (80036cc <HAL_UART_MspInit+0x208>)
 8003572:	f043 0304 	orr.w	r3, r3, #4
 8003576:	6313      	str	r3, [r2, #48]	; 0x30
 8003578:	4b54      	ldr	r3, [pc, #336]	; (80036cc <HAL_UART_MspInit+0x208>)
 800357a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	61fb      	str	r3, [r7, #28]
 8003582:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003584:	2300      	movs	r3, #0
 8003586:	61bb      	str	r3, [r7, #24]
 8003588:	4b50      	ldr	r3, [pc, #320]	; (80036cc <HAL_UART_MspInit+0x208>)
 800358a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358c:	4a4f      	ldr	r2, [pc, #316]	; (80036cc <HAL_UART_MspInit+0x208>)
 800358e:	f043 0308 	orr.w	r3, r3, #8
 8003592:	6313      	str	r3, [r2, #48]	; 0x30
 8003594:	4b4d      	ldr	r3, [pc, #308]	; (80036cc <HAL_UART_MspInit+0x208>)
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80035a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a6:	2302      	movs	r3, #2
 80035a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ae:	2303      	movs	r3, #3
 80035b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80035b2:	2308      	movs	r3, #8
 80035b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035ba:	4619      	mov	r1, r3
 80035bc:	4844      	ldr	r0, [pc, #272]	; (80036d0 <HAL_UART_MspInit+0x20c>)
 80035be:	f004 fbd3 	bl	8007d68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80035c2:	2304      	movs	r3, #4
 80035c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c6:	2302      	movs	r3, #2
 80035c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ce:	2303      	movs	r3, #3
 80035d0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80035d2:	2308      	movs	r3, #8
 80035d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035da:	4619      	mov	r1, r3
 80035dc:	483e      	ldr	r0, [pc, #248]	; (80036d8 <HAL_UART_MspInit+0x214>)
 80035de:	f004 fbc3 	bl	8007d68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 9, 0);
 80035e2:	2200      	movs	r2, #0
 80035e4:	2109      	movs	r1, #9
 80035e6:	2035      	movs	r0, #53	; 0x35
 80035e8:	f003 ff2a 	bl	8007440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80035ec:	2035      	movs	r0, #53	; 0x35
 80035ee:	f003 ff43 	bl	8007478 <HAL_NVIC_EnableIRQ>
}
 80035f2:	e064      	b.n	80036be <HAL_UART_MspInit+0x1fa>
  else if(uartHandle->Instance==USART1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a38      	ldr	r2, [pc, #224]	; (80036dc <HAL_UART_MspInit+0x218>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d12d      	bne.n	800365a <HAL_UART_MspInit+0x196>
    __HAL_RCC_USART1_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	617b      	str	r3, [r7, #20]
 8003602:	4b32      	ldr	r3, [pc, #200]	; (80036cc <HAL_UART_MspInit+0x208>)
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	4a31      	ldr	r2, [pc, #196]	; (80036cc <HAL_UART_MspInit+0x208>)
 8003608:	f043 0310 	orr.w	r3, r3, #16
 800360c:	6453      	str	r3, [r2, #68]	; 0x44
 800360e:	4b2f      	ldr	r3, [pc, #188]	; (80036cc <HAL_UART_MspInit+0x208>)
 8003610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003612:	f003 0310 	and.w	r3, r3, #16
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	4b2b      	ldr	r3, [pc, #172]	; (80036cc <HAL_UART_MspInit+0x208>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	4a2a      	ldr	r2, [pc, #168]	; (80036cc <HAL_UART_MspInit+0x208>)
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	6313      	str	r3, [r2, #48]	; 0x30
 800362a:	4b28      	ldr	r3, [pc, #160]	; (80036cc <HAL_UART_MspInit+0x208>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003636:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800363a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363c:	2302      	movs	r3, #2
 800363e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003640:	2300      	movs	r3, #0
 8003642:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003644:	2303      	movs	r3, #3
 8003646:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003648:	2307      	movs	r3, #7
 800364a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800364c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003650:	4619      	mov	r1, r3
 8003652:	4823      	ldr	r0, [pc, #140]	; (80036e0 <HAL_UART_MspInit+0x21c>)
 8003654:	f004 fb88 	bl	8007d68 <HAL_GPIO_Init>
}
 8003658:	e031      	b.n	80036be <HAL_UART_MspInit+0x1fa>
  else if(uartHandle->Instance==USART3)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a21      	ldr	r2, [pc, #132]	; (80036e4 <HAL_UART_MspInit+0x220>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d12c      	bne.n	80036be <HAL_UART_MspInit+0x1fa>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003664:	2300      	movs	r3, #0
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	4b18      	ldr	r3, [pc, #96]	; (80036cc <HAL_UART_MspInit+0x208>)
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	4a17      	ldr	r2, [pc, #92]	; (80036cc <HAL_UART_MspInit+0x208>)
 800366e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003672:	6413      	str	r3, [r2, #64]	; 0x40
 8003674:	4b15      	ldr	r3, [pc, #84]	; (80036cc <HAL_UART_MspInit+0x208>)
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003680:	2300      	movs	r3, #0
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	4b11      	ldr	r3, [pc, #68]	; (80036cc <HAL_UART_MspInit+0x208>)
 8003686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003688:	4a10      	ldr	r2, [pc, #64]	; (80036cc <HAL_UART_MspInit+0x208>)
 800368a:	f043 0308 	orr.w	r3, r3, #8
 800368e:	6313      	str	r3, [r2, #48]	; 0x30
 8003690:	4b0e      	ldr	r3, [pc, #56]	; (80036cc <HAL_UART_MspInit+0x208>)
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800369c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80036a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a2:	2302      	movs	r3, #2
 80036a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036aa:	2303      	movs	r3, #3
 80036ac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036ae:	2307      	movs	r3, #7
 80036b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036b6:	4619      	mov	r1, r3
 80036b8:	4807      	ldr	r0, [pc, #28]	; (80036d8 <HAL_UART_MspInit+0x214>)
 80036ba:	f004 fb55 	bl	8007d68 <HAL_GPIO_Init>
}
 80036be:	bf00      	nop
 80036c0:	3740      	adds	r7, #64	; 0x40
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40004c00 	.word	0x40004c00
 80036cc:	40023800 	.word	0x40023800
 80036d0:	40020800 	.word	0x40020800
 80036d4:	40005000 	.word	0x40005000
 80036d8:	40020c00 	.word	0x40020c00
 80036dc:	40011000 	.word	0x40011000
 80036e0:	40020000 	.word	0x40020000
 80036e4:	40004800 	.word	0x40004800

080036e8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */

#ifndef DushuModule
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
	if(huart->Instance==UART5)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a2e      	ldr	r2, [pc, #184]	; (80037b0 <HAL_UART_RxCpltCallback+0xc8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d155      	bne.n	80037a6 <HAL_UART_RxCpltCallback+0xbe>
	{
		if ( USART_RX_STA&0x8000 ){		// 判断是否已经完成接收(bit15-1则已接收完成)
 80036fa:	4b2e      	ldr	r3, [pc, #184]	; (80037b4 <HAL_UART_RxCpltCallback+0xcc>)
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	b21b      	sxth	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	db50      	blt.n	80037a6 <HAL_UART_RxCpltCallback+0xbe>
			;							// 如果完成接收数据接收且尚未处理，则不接受后续data
		}
		else{
			if( USART_RX_STA&0x4000 ){		// 判断是否已收到起始位
 8003704:	4b2b      	ldr	r3, [pc, #172]	; (80037b4 <HAL_UART_RxCpltCallback+0xcc>)
 8003706:	881b      	ldrh	r3, [r3, #0]
 8003708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d02a      	beq.n	8003766 <HAL_UART_RxCpltCallback+0x7e>
				if( aRxBuffer[0]==0x55 ){	// 判断是否已收到结束位
 8003710:	4b29      	ldr	r3, [pc, #164]	; (80037b8 <HAL_UART_RxCpltCallback+0xd0>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	2b55      	cmp	r3, #85	; 0x55
 8003716:	d117      	bne.n	8003748 <HAL_UART_RxCpltCallback+0x60>
					USART_RX_STA|=0x8000;
 8003718:	4b26      	ldr	r3, [pc, #152]	; (80037b4 <HAL_UART_RxCpltCallback+0xcc>)
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003720:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003724:	b29a      	uxth	r2, r3
 8003726:	4b23      	ldr	r3, [pc, #140]	; (80037b4 <HAL_UART_RxCpltCallback+0xcc>)
 8003728:	801a      	strh	r2, [r3, #0]
					USART5_RX_BUF[USART_RX_STA&0X3FFF]=aRxBuffer[0] ;
 800372a:	4b22      	ldr	r3, [pc, #136]	; (80037b4 <HAL_UART_RxCpltCallback+0xcc>)
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003732:	4a21      	ldr	r2, [pc, #132]	; (80037b8 <HAL_UART_RxCpltCallback+0xd0>)
 8003734:	7811      	ldrb	r1, [r2, #0]
 8003736:	4a21      	ldr	r2, [pc, #132]	; (80037bc <HAL_UART_RxCpltCallback+0xd4>)
 8003738:	54d1      	strb	r1, [r2, r3]
					USART_RX_STA++;
 800373a:	4b1e      	ldr	r3, [pc, #120]	; (80037b4 <HAL_UART_RxCpltCallback+0xcc>)
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	3301      	adds	r3, #1
 8003740:	b29a      	uxth	r2, r3
 8003742:	4b1c      	ldr	r3, [pc, #112]	; (80037b4 <HAL_UART_RxCpltCallback+0xcc>)
 8003744:	801a      	strh	r2, [r3, #0]
					USART_RX_STA=0;
				}
			}
		}
	}
}
 8003746:	e02e      	b.n	80037a6 <HAL_UART_RxCpltCallback+0xbe>
					USART5_RX_BUF[USART_RX_STA&0X3FFF]=aRxBuffer[0] ;
 8003748:	4b1a      	ldr	r3, [pc, #104]	; (80037b4 <HAL_UART_RxCpltCallback+0xcc>)
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003750:	4a19      	ldr	r2, [pc, #100]	; (80037b8 <HAL_UART_RxCpltCallback+0xd0>)
 8003752:	7811      	ldrb	r1, [r2, #0]
 8003754:	4a19      	ldr	r2, [pc, #100]	; (80037bc <HAL_UART_RxCpltCallback+0xd4>)
 8003756:	54d1      	strb	r1, [r2, r3]
					USART_RX_STA++;
 8003758:	4b16      	ldr	r3, [pc, #88]	; (80037b4 <HAL_UART_RxCpltCallback+0xcc>)
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	3301      	adds	r3, #1
 800375e:	b29a      	uxth	r2, r3
 8003760:	4b14      	ldr	r3, [pc, #80]	; (80037b4 <HAL_UART_RxCpltCallback+0xcc>)
 8003762:	801a      	strh	r2, [r3, #0]
}
 8003764:	e01f      	b.n	80037a6 <HAL_UART_RxCpltCallback+0xbe>
				if(aRxBuffer[0]==0xAA){
 8003766:	4b14      	ldr	r3, [pc, #80]	; (80037b8 <HAL_UART_RxCpltCallback+0xd0>)
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	2baa      	cmp	r3, #170	; 0xaa
 800376c:	d118      	bne.n	80037a0 <HAL_UART_RxCpltCallback+0xb8>
					USART_RX_STA|=0x4000;
 800376e:	4b11      	ldr	r3, [pc, #68]	; (80037b4 <HAL_UART_RxCpltCallback+0xcc>)
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003776:	b29a      	uxth	r2, r3
 8003778:	4b0e      	ldr	r3, [pc, #56]	; (80037b4 <HAL_UART_RxCpltCallback+0xcc>)
 800377a:	801a      	strh	r2, [r3, #0]
					USART5_RX_BUF[USART_RX_STA&0X3FFF]=aRxBuffer[0] ;
 800377c:	4b0d      	ldr	r3, [pc, #52]	; (80037b4 <HAL_UART_RxCpltCallback+0xcc>)
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003784:	4a0c      	ldr	r2, [pc, #48]	; (80037b8 <HAL_UART_RxCpltCallback+0xd0>)
 8003786:	7811      	ldrb	r1, [r2, #0]
 8003788:	4a0c      	ldr	r2, [pc, #48]	; (80037bc <HAL_UART_RxCpltCallback+0xd4>)
 800378a:	54d1      	strb	r1, [r2, r3]
					USART_RX_STA++;
 800378c:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <HAL_UART_RxCpltCallback+0xcc>)
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	3301      	adds	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	4b07      	ldr	r3, [pc, #28]	; (80037b4 <HAL_UART_RxCpltCallback+0xcc>)
 8003796:	801a      	strh	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(&htim9);
 8003798:	4809      	ldr	r0, [pc, #36]	; (80037c0 <HAL_UART_RxCpltCallback+0xd8>)
 800379a:	f007 f81f 	bl	800a7dc <HAL_TIM_Base_Start_IT>
}
 800379e:	e002      	b.n	80037a6 <HAL_UART_RxCpltCallback+0xbe>
					USART_RX_STA=0;
 80037a0:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <HAL_UART_RxCpltCallback+0xcc>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	801a      	strh	r2, [r3, #0]
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40005000 	.word	0x40005000
 80037b4:	20000794 	.word	0x20000794
 80037b8:	2000072c 	.word	0x2000072c
 80037bc:	20000730 	.word	0x20000730
 80037c0:	2000057c 	.word	0x2000057c

080037c4 <Motor_Data_Init>:
#include "stdlib.h"

struct MotorDefine Motor[10];

void Motor_Data_Init(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
	Motor[3].decelerationRate = 6000;
#endif

#ifdef DuoTongDao
	/*  Motor2: 多通道垂直方向28步进电机，编码器为1000P/R */
		Motor[2].MotorNumber = 2;
 80037c8:	4b78      	ldr	r3, [pc, #480]	; (80039ac <Motor_Data_Init+0x1e8>)
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
		Motor[2].Status = 0,
 80037d0:	4b76      	ldr	r3, [pc, #472]	; (80039ac <Motor_Data_Init+0x1e8>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
		Motor[2].htim_x = &htim11,
 80037d8:	4b74      	ldr	r3, [pc, #464]	; (80039ac <Motor_Data_Init+0x1e8>)
 80037da:	4a75      	ldr	r2, [pc, #468]	; (80039b0 <Motor_Data_Init+0x1ec>)
 80037dc:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
		//机械参数
		Motor[2].deceleration_ratio = 1;
 80037e0:	4b72      	ldr	r3, [pc, #456]	; (80039ac <Motor_Data_Init+0x1e8>)
 80037e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80037e6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		Motor[2].step_angle = 1.8;
 80037ea:	4b70      	ldr	r3, [pc, #448]	; (80039ac <Motor_Data_Init+0x1e8>)
 80037ec:	4a71      	ldr	r2, [pc, #452]	; (80039b4 <Motor_Data_Init+0x1f0>)
 80037ee:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		Motor[2].mircro_steps = 32;
 80037f2:	4b6e      	ldr	r3, [pc, #440]	; (80039ac <Motor_Data_Init+0x1e8>)
 80037f4:	2220      	movs	r2, #32
 80037f6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		Motor[2].MaxSpeedInRads= 6;
 80037fa:	4b6c      	ldr	r3, [pc, #432]	; (80039ac <Motor_Data_Init+0x1e8>)
 80037fc:	4a6e      	ldr	r2, [pc, #440]	; (80039b8 <Motor_Data_Init+0x1f4>)
 80037fe:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		//Motor[2].Encoder_PulsePerRad = 1000;
		//设定默认速度参数，以下为实测优化后结果，可以通过参数控制模式修改
		Motor[2].StartupSpeedInRads = 2;
 8003802:	4b6a      	ldr	r3, [pc, #424]	; (80039ac <Motor_Data_Init+0x1e8>)
 8003804:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003808:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		Motor[2].DesiredSpeedInRads = 4.5;
 800380c:	4b67      	ldr	r3, [pc, #412]	; (80039ac <Motor_Data_Init+0x1e8>)
 800380e:	4a6b      	ldr	r2, [pc, #428]	; (80039bc <Motor_Data_Init+0x1f8>)
 8003810:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		Motor[2].accelerationRate = 20000;
 8003814:	4b65      	ldr	r3, [pc, #404]	; (80039ac <Motor_Data_Init+0x1e8>)
 8003816:	f644 6220 	movw	r2, #20000	; 0x4e20
 800381a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		Motor[2].decelerationRate = 20000;
 800381e:	4b63      	ldr	r3, [pc, #396]	; (80039ac <Motor_Data_Init+0x1e8>)
 8003820:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003824:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

	/*  Motor3: 水平方向步进电机  */
		Motor[3].MotorNumber = 3;
 8003828:	4b60      	ldr	r3, [pc, #384]	; (80039ac <Motor_Data_Init+0x1e8>)
 800382a:	2203      	movs	r2, #3
 800382c:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
		Motor[3].Status = 0,
 8003830:	4b5e      	ldr	r3, [pc, #376]	; (80039ac <Motor_Data_Init+0x1e8>)
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
		Motor[3].htim_x = &htim13,
 8003838:	4b5c      	ldr	r3, [pc, #368]	; (80039ac <Motor_Data_Init+0x1e8>)
 800383a:	4a61      	ldr	r2, [pc, #388]	; (80039c0 <Motor_Data_Init+0x1fc>)
 800383c:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
		//机械参数
		Motor[3].deceleration_ratio = 1;
 8003840:	4b5a      	ldr	r3, [pc, #360]	; (80039ac <Motor_Data_Init+0x1e8>)
 8003842:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003846:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		Motor[3].step_angle = 1.8;
 800384a:	4b58      	ldr	r3, [pc, #352]	; (80039ac <Motor_Data_Init+0x1e8>)
 800384c:	4a59      	ldr	r2, [pc, #356]	; (80039b4 <Motor_Data_Init+0x1f0>)
 800384e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		Motor[3].mircro_steps = 32;
 8003852:	4b56      	ldr	r3, [pc, #344]	; (80039ac <Motor_Data_Init+0x1e8>)
 8003854:	2220      	movs	r2, #32
 8003856:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
		Motor[3].MaxSpeedInRads= 6;
 800385a:	4b54      	ldr	r3, [pc, #336]	; (80039ac <Motor_Data_Init+0x1e8>)
 800385c:	4a56      	ldr	r2, [pc, #344]	; (80039b8 <Motor_Data_Init+0x1f4>)
 800385e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		//设定默认速度参数，以下为实测优化后结果，可以通过参数控制模式修改
		Motor[3].StartupSpeedInRads = 2;
 8003862:	4b52      	ldr	r3, [pc, #328]	; (80039ac <Motor_Data_Init+0x1e8>)
 8003864:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003868:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
		Motor[3].DesiredSpeedInRads = 5;
 800386c:	4b4f      	ldr	r3, [pc, #316]	; (80039ac <Motor_Data_Init+0x1e8>)
 800386e:	4a55      	ldr	r2, [pc, #340]	; (80039c4 <Motor_Data_Init+0x200>)
 8003870:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		Motor[3].accelerationRate = 60000;
 8003874:	4b4d      	ldr	r3, [pc, #308]	; (80039ac <Motor_Data_Init+0x1e8>)
 8003876:	f64e 2260 	movw	r2, #60000	; 0xea60
 800387a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		Motor[3].decelerationRate = 60000;
 800387e:	4b4b      	ldr	r3, [pc, #300]	; (80039ac <Motor_Data_Init+0x1e8>)
 8003880:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003884:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

	/*  Motor5 : 试剂条暂存电机   */
		Motor[5].MotorNumber = 5;
 8003888:	4b48      	ldr	r3, [pc, #288]	; (80039ac <Motor_Data_Init+0x1e8>)
 800388a:	2205      	movs	r2, #5
 800388c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
		Motor[5].Status = 0,
 8003890:	4b46      	ldr	r3, [pc, #280]	; (80039ac <Motor_Data_Init+0x1e8>)
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
		Motor[5].htim_x = &htim6,
 8003898:	4b44      	ldr	r3, [pc, #272]	; (80039ac <Motor_Data_Init+0x1e8>)
 800389a:	4a4b      	ldr	r2, [pc, #300]	; (80039c8 <Motor_Data_Init+0x204>)
 800389c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
		//机械参数
		Motor[5].deceleration_ratio = 20;	//实际减速比为100，方便指令控制改为20
 80038a0:	4b42      	ldr	r3, [pc, #264]	; (80039ac <Motor_Data_Init+0x1e8>)
 80038a2:	4a4a      	ldr	r2, [pc, #296]	; (80039cc <Motor_Data_Init+0x208>)
 80038a4:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
		Motor[5].step_angle = 18;
 80038a8:	4b40      	ldr	r3, [pc, #256]	; (80039ac <Motor_Data_Init+0x1e8>)
 80038aa:	4a49      	ldr	r2, [pc, #292]	; (80039d0 <Motor_Data_Init+0x20c>)
 80038ac:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
		Motor[5].mircro_steps = 1;
 80038b0:	4b3e      	ldr	r3, [pc, #248]	; (80039ac <Motor_Data_Init+0x1e8>)
 80038b2:	2201      	movs	r2, #1
 80038b4:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
		Motor[5].MaxSpeedInRads= 3;
 80038b8:	4b3c      	ldr	r3, [pc, #240]	; (80039ac <Motor_Data_Init+0x1e8>)
 80038ba:	4a46      	ldr	r2, [pc, #280]	; (80039d4 <Motor_Data_Init+0x210>)
 80038bc:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
		//设定默认速度参数，以下为实测优化后结果，可以通过参数控制模式修改
		Motor[5].StartupSpeedInRads = 1.5;
 80038c0:	4b3a      	ldr	r3, [pc, #232]	; (80039ac <Motor_Data_Init+0x1e8>)
 80038c2:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80038c6:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
		Motor[5].DesiredSpeedInRads = 1.8;
 80038ca:	4b38      	ldr	r3, [pc, #224]	; (80039ac <Motor_Data_Init+0x1e8>)
 80038cc:	4a39      	ldr	r2, [pc, #228]	; (80039b4 <Motor_Data_Init+0x1f0>)
 80038ce:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		Motor[5].accelerationRate = 8000;
 80038d2:	4b36      	ldr	r3, [pc, #216]	; (80039ac <Motor_Data_Init+0x1e8>)
 80038d4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80038d8:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
		Motor[5].decelerationRate = 8000;
 80038dc:	4b33      	ldr	r3, [pc, #204]	; (80039ac <Motor_Data_Init+0x1e8>)
 80038de:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80038e2:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc

	/*  Motor6 : 推杆旋转电机   */
		Motor[6].MotorNumber = 6;
 80038e6:	4b31      	ldr	r3, [pc, #196]	; (80039ac <Motor_Data_Init+0x1e8>)
 80038e8:	2206      	movs	r2, #6
 80038ea:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
		Motor[6].Status = 0,
 80038ee:	4b2f      	ldr	r3, [pc, #188]	; (80039ac <Motor_Data_Init+0x1e8>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
		Motor[6].htim_x = &htim7,
 80038f6:	4b2d      	ldr	r3, [pc, #180]	; (80039ac <Motor_Data_Init+0x1e8>)
 80038f8:	4a37      	ldr	r2, [pc, #220]	; (80039d8 <Motor_Data_Init+0x214>)
 80038fa:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
		//机械参数
		Motor[6].deceleration_ratio = 20;	//实际减速比为100，方便指令控制改为20
 80038fe:	4b2b      	ldr	r3, [pc, #172]	; (80039ac <Motor_Data_Init+0x1e8>)
 8003900:	4a32      	ldr	r2, [pc, #200]	; (80039cc <Motor_Data_Init+0x208>)
 8003902:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
		Motor[6].step_angle = 18;
 8003906:	4b29      	ldr	r3, [pc, #164]	; (80039ac <Motor_Data_Init+0x1e8>)
 8003908:	4a31      	ldr	r2, [pc, #196]	; (80039d0 <Motor_Data_Init+0x20c>)
 800390a:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
		Motor[6].mircro_steps = 1;
 800390e:	4b27      	ldr	r3, [pc, #156]	; (80039ac <Motor_Data_Init+0x1e8>)
 8003910:	2201      	movs	r2, #1
 8003912:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
		Motor[6].MaxSpeedInRads= 3;
 8003916:	4b25      	ldr	r3, [pc, #148]	; (80039ac <Motor_Data_Init+0x1e8>)
 8003918:	4a2e      	ldr	r2, [pc, #184]	; (80039d4 <Motor_Data_Init+0x210>)
 800391a:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
		//设定默认速度参数，以下为实测优化后结果，可以通过参数控制模式修改
		Motor[6].StartupSpeedInRads = 1.6;
 800391e:	4b23      	ldr	r3, [pc, #140]	; (80039ac <Motor_Data_Init+0x1e8>)
 8003920:	4a2e      	ldr	r2, [pc, #184]	; (80039dc <Motor_Data_Init+0x218>)
 8003922:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
		Motor[6].DesiredSpeedInRads = 2;
 8003926:	4b21      	ldr	r3, [pc, #132]	; (80039ac <Motor_Data_Init+0x1e8>)
 8003928:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800392c:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
		Motor[6].accelerationRate = 8000;
 8003930:	4b1e      	ldr	r3, [pc, #120]	; (80039ac <Motor_Data_Init+0x1e8>)
 8003932:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003936:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
		Motor[6].decelerationRate = 8000;
 800393a:	4b1c      	ldr	r3, [pc, #112]	; (80039ac <Motor_Data_Init+0x1e8>)
 800393c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003940:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
#endif

/*  Motor4 : 柱塞泵，负责注液（也可以抽液），最大排量1000uL，总行程10rads（2000步），每步0.5uL  */
		Motor[4].MotorNumber = 4;
 8003944:	4b19      	ldr	r3, [pc, #100]	; (80039ac <Motor_Data_Init+0x1e8>)
 8003946:	2204      	movs	r2, #4
 8003948:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
		Motor[4].Status = 0,
 800394c:	4b17      	ldr	r3, [pc, #92]	; (80039ac <Motor_Data_Init+0x1e8>)
 800394e:	2200      	movs	r2, #0
 8003950:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
		Motor[4].htim_x = &htim14,
 8003954:	4b15      	ldr	r3, [pc, #84]	; (80039ac <Motor_Data_Init+0x1e8>)
 8003956:	4a22      	ldr	r2, [pc, #136]	; (80039e0 <Motor_Data_Init+0x21c>)
 8003958:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		//机械参数
		Motor[4].deceleration_ratio = 1;
 800395c:	4b13      	ldr	r3, [pc, #76]	; (80039ac <Motor_Data_Init+0x1e8>)
 800395e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003962:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		Motor[4].step_angle = 1.8;
 8003966:	4b11      	ldr	r3, [pc, #68]	; (80039ac <Motor_Data_Init+0x1e8>)
 8003968:	4a12      	ldr	r2, [pc, #72]	; (80039b4 <Motor_Data_Init+0x1f0>)
 800396a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
		Motor[4].mircro_steps = 16;
 800396e:	4b0f      	ldr	r3, [pc, #60]	; (80039ac <Motor_Data_Init+0x1e8>)
 8003970:	2210      	movs	r2, #16
 8003972:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		Motor[4].MaxSpeedInRads= 13;
 8003976:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <Motor_Data_Init+0x1e8>)
 8003978:	4a1a      	ldr	r2, [pc, #104]	; (80039e4 <Motor_Data_Init+0x220>)
 800397a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
		//设定默认速度参数，以下为实测优化后结果，可以通过参数控制模式修改
		Motor[4].StartupSpeedInRads = 5;
 800397e:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <Motor_Data_Init+0x1e8>)
 8003980:	4a10      	ldr	r2, [pc, #64]	; (80039c4 <Motor_Data_Init+0x200>)
 8003982:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
		Motor[4].DesiredSpeedInRads = 10;
 8003986:	4b09      	ldr	r3, [pc, #36]	; (80039ac <Motor_Data_Init+0x1e8>)
 8003988:	4a17      	ldr	r2, [pc, #92]	; (80039e8 <Motor_Data_Init+0x224>)
 800398a:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
		Motor[4].accelerationRate = 20000;
 800398e:	4b07      	ldr	r3, [pc, #28]	; (80039ac <Motor_Data_Init+0x1e8>)
 8003990:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003994:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
		Motor[4].decelerationRate = 10000;
 8003998:	4b04      	ldr	r3, [pc, #16]	; (80039ac <Motor_Data_Init+0x1e8>)
 800399a:	f242 7210 	movw	r2, #10000	; 0x2710
 800399e:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	Motor[6].StartupSpeedInRads = 20;
	Motor[6].DesiredSpeedInRads = 30;
	Motor[6].accelerationRate = 30000;
	Motor[6].decelerationRate = 20000;
#endif
}
 80039a2:	bf00      	nop
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	200008a8 	.word	0x200008a8
 80039b0:	2000060c 	.word	0x2000060c
 80039b4:	3fe66666 	.word	0x3fe66666
 80039b8:	40c00000 	.word	0x40c00000
 80039bc:	40900000 	.word	0x40900000
 80039c0:	2000069c 	.word	0x2000069c
 80039c4:	40a00000 	.word	0x40a00000
 80039c8:	200004ec 	.word	0x200004ec
 80039cc:	41a00000 	.word	0x41a00000
 80039d0:	41900000 	.word	0x41900000
 80039d4:	40400000 	.word	0x40400000
 80039d8:	20000534 	.word	0x20000534
 80039dc:	3fcccccd 	.word	0x3fcccccd
 80039e0:	200006e4 	.word	0x200006e4
 80039e4:	41500000 	.word	0x41500000
 80039e8:	41200000 	.word	0x41200000

080039ec <Motor5_AB>:



void Motor5_AB(void) // 电机5状态1
{VM5_IN1_H();	VM5_IN2_L();	VM5_IN3_H()	;	VM5_IN4_L();}
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	2201      	movs	r2, #1
 80039f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039f6:	480b      	ldr	r0, [pc, #44]	; (8003a24 <Motor5_AB+0x38>)
 80039f8:	f004 fb6a 	bl	80080d0 <HAL_GPIO_WritePin>
 80039fc:	2200      	movs	r2, #0
 80039fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a02:	4808      	ldr	r0, [pc, #32]	; (8003a24 <Motor5_AB+0x38>)
 8003a04:	f004 fb64 	bl	80080d0 <HAL_GPIO_WritePin>
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a0e:	4805      	ldr	r0, [pc, #20]	; (8003a24 <Motor5_AB+0x38>)
 8003a10:	f004 fb5e 	bl	80080d0 <HAL_GPIO_WritePin>
 8003a14:	2200      	movs	r2, #0
 8003a16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a1a:	4802      	ldr	r0, [pc, #8]	; (8003a24 <Motor5_AB+0x38>)
 8003a1c:	f004 fb58 	bl	80080d0 <HAL_GPIO_WritePin>
 8003a20:	bf00      	nop
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40020400 	.word	0x40020400

08003a28 <Motor5_aB>:
void Motor5_aB(void) // 电机5状态2
{VM5_IN1_L();	VM5_IN2_H();	VM5_IN3_H()	;	VM5_IN4_L();}
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a32:	480b      	ldr	r0, [pc, #44]	; (8003a60 <Motor5_aB+0x38>)
 8003a34:	f004 fb4c 	bl	80080d0 <HAL_GPIO_WritePin>
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a3e:	4808      	ldr	r0, [pc, #32]	; (8003a60 <Motor5_aB+0x38>)
 8003a40:	f004 fb46 	bl	80080d0 <HAL_GPIO_WritePin>
 8003a44:	2201      	movs	r2, #1
 8003a46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a4a:	4805      	ldr	r0, [pc, #20]	; (8003a60 <Motor5_aB+0x38>)
 8003a4c:	f004 fb40 	bl	80080d0 <HAL_GPIO_WritePin>
 8003a50:	2200      	movs	r2, #0
 8003a52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a56:	4802      	ldr	r0, [pc, #8]	; (8003a60 <Motor5_aB+0x38>)
 8003a58:	f004 fb3a 	bl	80080d0 <HAL_GPIO_WritePin>
 8003a5c:	bf00      	nop
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40020400 	.word	0x40020400

08003a64 <Motor5_ab>:
void Motor5_ab(void) // 电机5状态3
{VM5_IN1_L();	VM5_IN2_H();	VM5_IN3_L()	;	VM5_IN4_H();}
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a6e:	480b      	ldr	r0, [pc, #44]	; (8003a9c <Motor5_ab+0x38>)
 8003a70:	f004 fb2e 	bl	80080d0 <HAL_GPIO_WritePin>
 8003a74:	2201      	movs	r2, #1
 8003a76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a7a:	4808      	ldr	r0, [pc, #32]	; (8003a9c <Motor5_ab+0x38>)
 8003a7c:	f004 fb28 	bl	80080d0 <HAL_GPIO_WritePin>
 8003a80:	2200      	movs	r2, #0
 8003a82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a86:	4805      	ldr	r0, [pc, #20]	; (8003a9c <Motor5_ab+0x38>)
 8003a88:	f004 fb22 	bl	80080d0 <HAL_GPIO_WritePin>
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a92:	4802      	ldr	r0, [pc, #8]	; (8003a9c <Motor5_ab+0x38>)
 8003a94:	f004 fb1c 	bl	80080d0 <HAL_GPIO_WritePin>
 8003a98:	bf00      	nop
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40020400 	.word	0x40020400

08003aa0 <Motor5_Ab>:
void Motor5_Ab(void) // 电机5状态4
{VM5_IN1_H();	VM5_IN2_L();	VM5_IN3_L()	;	VM5_IN4_H();}
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003aaa:	480b      	ldr	r0, [pc, #44]	; (8003ad8 <Motor5_Ab+0x38>)
 8003aac:	f004 fb10 	bl	80080d0 <HAL_GPIO_WritePin>
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ab6:	4808      	ldr	r0, [pc, #32]	; (8003ad8 <Motor5_Ab+0x38>)
 8003ab8:	f004 fb0a 	bl	80080d0 <HAL_GPIO_WritePin>
 8003abc:	2200      	movs	r2, #0
 8003abe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003ac2:	4805      	ldr	r0, [pc, #20]	; (8003ad8 <Motor5_Ab+0x38>)
 8003ac4:	f004 fb04 	bl	80080d0 <HAL_GPIO_WritePin>
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ace:	4802      	ldr	r0, [pc, #8]	; (8003ad8 <Motor5_Ab+0x38>)
 8003ad0:	f004 fafe 	bl	80080d0 <HAL_GPIO_WritePin>
 8003ad4:	bf00      	nop
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40020400 	.word	0x40020400

08003adc <Motor5_Release>:
void Motor5_Release(void) // 电机5释放锁定
{VM5_IN1_L();	VM5_IN2_L();	VM5_IN3_L()	;	VM5_IN4_L();}
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ae6:	480b      	ldr	r0, [pc, #44]	; (8003b14 <Motor5_Release+0x38>)
 8003ae8:	f004 faf2 	bl	80080d0 <HAL_GPIO_WritePin>
 8003aec:	2200      	movs	r2, #0
 8003aee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003af2:	4808      	ldr	r0, [pc, #32]	; (8003b14 <Motor5_Release+0x38>)
 8003af4:	f004 faec 	bl	80080d0 <HAL_GPIO_WritePin>
 8003af8:	2200      	movs	r2, #0
 8003afa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003afe:	4805      	ldr	r0, [pc, #20]	; (8003b14 <Motor5_Release+0x38>)
 8003b00:	f004 fae6 	bl	80080d0 <HAL_GPIO_WritePin>
 8003b04:	2200      	movs	r2, #0
 8003b06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b0a:	4802      	ldr	r0, [pc, #8]	; (8003b14 <Motor5_Release+0x38>)
 8003b0c:	f004 fae0 	bl	80080d0 <HAL_GPIO_WritePin>
 8003b10:	bf00      	nop
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40020400 	.word	0x40020400

08003b18 <Motor6_AB>:

void Motor6_AB(void) // 电机6状态1
{VM6_IN1_H();	VM6_IN2_L();	VM6_IN3_H()	;	VM6_IN4_L();}
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	2120      	movs	r1, #32
 8003b20:	480a      	ldr	r0, [pc, #40]	; (8003b4c <Motor6_AB+0x34>)
 8003b22:	f004 fad5 	bl	80080d0 <HAL_GPIO_WritePin>
 8003b26:	2200      	movs	r2, #0
 8003b28:	2140      	movs	r1, #64	; 0x40
 8003b2a:	4808      	ldr	r0, [pc, #32]	; (8003b4c <Motor6_AB+0x34>)
 8003b2c:	f004 fad0 	bl	80080d0 <HAL_GPIO_WritePin>
 8003b30:	2201      	movs	r2, #1
 8003b32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b36:	4806      	ldr	r0, [pc, #24]	; (8003b50 <Motor6_AB+0x38>)
 8003b38:	f004 faca 	bl	80080d0 <HAL_GPIO_WritePin>
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b42:	4803      	ldr	r0, [pc, #12]	; (8003b50 <Motor6_AB+0x38>)
 8003b44:	f004 fac4 	bl	80080d0 <HAL_GPIO_WritePin>
 8003b48:	bf00      	nop
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	40020800 	.word	0x40020800

08003b54 <Motor6_aB>:
void Motor6_aB(void) // 电机6状态2
{VM6_IN1_L();	VM6_IN2_H();	VM6_IN3_H()	;	VM6_IN4_L();}
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	2200      	movs	r2, #0
 8003b5a:	2120      	movs	r1, #32
 8003b5c:	480a      	ldr	r0, [pc, #40]	; (8003b88 <Motor6_aB+0x34>)
 8003b5e:	f004 fab7 	bl	80080d0 <HAL_GPIO_WritePin>
 8003b62:	2201      	movs	r2, #1
 8003b64:	2140      	movs	r1, #64	; 0x40
 8003b66:	4808      	ldr	r0, [pc, #32]	; (8003b88 <Motor6_aB+0x34>)
 8003b68:	f004 fab2 	bl	80080d0 <HAL_GPIO_WritePin>
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b72:	4806      	ldr	r0, [pc, #24]	; (8003b8c <Motor6_aB+0x38>)
 8003b74:	f004 faac 	bl	80080d0 <HAL_GPIO_WritePin>
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b7e:	4803      	ldr	r0, [pc, #12]	; (8003b8c <Motor6_aB+0x38>)
 8003b80:	f004 faa6 	bl	80080d0 <HAL_GPIO_WritePin>
 8003b84:	bf00      	nop
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	40020800 	.word	0x40020800

08003b90 <Motor6_ab>:
void Motor6_ab(void) // 电机6状态3
{VM6_IN1_L();	VM6_IN2_H();	VM6_IN3_L()	;	VM6_IN4_H();}
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	2200      	movs	r2, #0
 8003b96:	2120      	movs	r1, #32
 8003b98:	480a      	ldr	r0, [pc, #40]	; (8003bc4 <Motor6_ab+0x34>)
 8003b9a:	f004 fa99 	bl	80080d0 <HAL_GPIO_WritePin>
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	2140      	movs	r1, #64	; 0x40
 8003ba2:	4808      	ldr	r0, [pc, #32]	; (8003bc4 <Motor6_ab+0x34>)
 8003ba4:	f004 fa94 	bl	80080d0 <HAL_GPIO_WritePin>
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bae:	4806      	ldr	r0, [pc, #24]	; (8003bc8 <Motor6_ab+0x38>)
 8003bb0:	f004 fa8e 	bl	80080d0 <HAL_GPIO_WritePin>
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003bba:	4803      	ldr	r0, [pc, #12]	; (8003bc8 <Motor6_ab+0x38>)
 8003bbc:	f004 fa88 	bl	80080d0 <HAL_GPIO_WritePin>
 8003bc0:	bf00      	nop
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	40020800 	.word	0x40020800

08003bcc <Motor6_Ab>:
void Motor6_Ab(void) // 电机6状态4
{VM6_IN1_H();	VM6_IN2_L();	VM6_IN3_L()	;	VM6_IN4_H();}
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	2120      	movs	r1, #32
 8003bd4:	480a      	ldr	r0, [pc, #40]	; (8003c00 <Motor6_Ab+0x34>)
 8003bd6:	f004 fa7b 	bl	80080d0 <HAL_GPIO_WritePin>
 8003bda:	2200      	movs	r2, #0
 8003bdc:	2140      	movs	r1, #64	; 0x40
 8003bde:	4808      	ldr	r0, [pc, #32]	; (8003c00 <Motor6_Ab+0x34>)
 8003be0:	f004 fa76 	bl	80080d0 <HAL_GPIO_WritePin>
 8003be4:	2200      	movs	r2, #0
 8003be6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bea:	4806      	ldr	r0, [pc, #24]	; (8003c04 <Motor6_Ab+0x38>)
 8003bec:	f004 fa70 	bl	80080d0 <HAL_GPIO_WritePin>
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003bf6:	4803      	ldr	r0, [pc, #12]	; (8003c04 <Motor6_Ab+0x38>)
 8003bf8:	f004 fa6a 	bl	80080d0 <HAL_GPIO_WritePin>
 8003bfc:	bf00      	nop
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40021000 	.word	0x40021000
 8003c04:	40020800 	.word	0x40020800

08003c08 <Motor6_Release>:
void Motor6_A_release(void)
{VM6_IN1_L();	VM6_IN2_L();}
void Motor6_B_release(void)
{VM6_IN3_L();	VM6_IN4_L();}
void Motor6_Release(void) // 电机6释放锁定
{VM6_IN1_L();	VM6_IN2_L();	VM6_IN3_L()	;	VM6_IN4_L();}
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	2120      	movs	r1, #32
 8003c10:	480a      	ldr	r0, [pc, #40]	; (8003c3c <Motor6_Release+0x34>)
 8003c12:	f004 fa5d 	bl	80080d0 <HAL_GPIO_WritePin>
 8003c16:	2200      	movs	r2, #0
 8003c18:	2140      	movs	r1, #64	; 0x40
 8003c1a:	4808      	ldr	r0, [pc, #32]	; (8003c3c <Motor6_Release+0x34>)
 8003c1c:	f004 fa58 	bl	80080d0 <HAL_GPIO_WritePin>
 8003c20:	2200      	movs	r2, #0
 8003c22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c26:	4806      	ldr	r0, [pc, #24]	; (8003c40 <Motor6_Release+0x38>)
 8003c28:	f004 fa52 	bl	80080d0 <HAL_GPIO_WritePin>
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c32:	4803      	ldr	r0, [pc, #12]	; (8003c40 <Motor6_Release+0x38>)
 8003c34:	f004 fa4c 	bl	80080d0 <HAL_GPIO_WritePin>
 8003c38:	bf00      	nop
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	40020800 	.word	0x40020800

08003c44 <ALL_Motors_Disable>:
	printf("DecelerationTimeTMR:%ld\r\n",a->DecelerationTimeTMR);
	printf("********************\r\n");
}

void ALL_Motors_Disable(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
	Motor1_Disable();	Motor2_Disable();	Motor3_Disable();	Motor4_Disable();
 8003c48:	2201      	movs	r2, #1
 8003c4a:	2110      	movs	r1, #16
 8003c4c:	4857      	ldr	r0, [pc, #348]	; (8003dac <ALL_Motors_Disable+0x168>)
 8003c4e:	f004 fa3f 	bl	80080d0 <HAL_GPIO_WritePin>
 8003c52:	2201      	movs	r2, #1
 8003c54:	2180      	movs	r1, #128	; 0x80
 8003c56:	4855      	ldr	r0, [pc, #340]	; (8003dac <ALL_Motors_Disable+0x168>)
 8003c58:	f004 fa3a 	bl	80080d0 <HAL_GPIO_WritePin>
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	2101      	movs	r1, #1
 8003c60:	4853      	ldr	r0, [pc, #332]	; (8003db0 <ALL_Motors_Disable+0x16c>)
 8003c62:	f004 fa35 	bl	80080d0 <HAL_GPIO_WritePin>
 8003c66:	2201      	movs	r2, #1
 8003c68:	2108      	movs	r1, #8
 8003c6a:	4851      	ldr	r0, [pc, #324]	; (8003db0 <ALL_Motors_Disable+0x16c>)
 8003c6c:	f004 fa30 	bl	80080d0 <HAL_GPIO_WritePin>
	VM5_Disable_A();	VM5_Disable_B();	VM6_Disable_A();	VM6_Disable_B();
 8003c70:	2200      	movs	r2, #0
 8003c72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c76:	484e      	ldr	r0, [pc, #312]	; (8003db0 <ALL_Motors_Disable+0x16c>)
 8003c78:	f004 fa2a 	bl	80080d0 <HAL_GPIO_WritePin>
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c82:	484b      	ldr	r0, [pc, #300]	; (8003db0 <ALL_Motors_Disable+0x16c>)
 8003c84:	f004 fa24 	bl	80080d0 <HAL_GPIO_WritePin>
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2180      	movs	r1, #128	; 0x80
 8003c8c:	4848      	ldr	r0, [pc, #288]	; (8003db0 <ALL_Motors_Disable+0x16c>)
 8003c8e:	f004 fa1f 	bl	80080d0 <HAL_GPIO_WritePin>
 8003c92:	2200      	movs	r2, #0
 8003c94:	2102      	movs	r1, #2
 8003c96:	4847      	ldr	r0, [pc, #284]	; (8003db4 <ALL_Motors_Disable+0x170>)
 8003c98:	f004 fa1a 	bl	80080d0 <HAL_GPIO_WritePin>
	VM7_Disable_A();	VM7_Disable_B();	VM8_Disable_A();	VM8_Disable_B();
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	4844      	ldr	r0, [pc, #272]	; (8003db4 <ALL_Motors_Disable+0x170>)
 8003ca2:	f004 fa15 	bl	80080d0 <HAL_GPIO_WritePin>
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cac:	4842      	ldr	r0, [pc, #264]	; (8003db8 <ALL_Motors_Disable+0x174>)
 8003cae:	f004 fa0f 	bl	80080d0 <HAL_GPIO_WritePin>
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003cb8:	483f      	ldr	r0, [pc, #252]	; (8003db8 <ALL_Motors_Disable+0x174>)
 8003cba:	f004 fa09 	bl	80080d0 <HAL_GPIO_WritePin>
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cc4:	483c      	ldr	r0, [pc, #240]	; (8003db8 <ALL_Motors_Disable+0x174>)
 8003cc6:	f004 fa03 	bl	80080d0 <HAL_GPIO_WritePin>
	Motorpluse1_Low();	Motorpluse2_Low();	Motorpluse3_Low();	Motorpluse4_Low();
 8003cca:	2200      	movs	r2, #0
 8003ccc:	2108      	movs	r1, #8
 8003cce:	4837      	ldr	r0, [pc, #220]	; (8003dac <ALL_Motors_Disable+0x168>)
 8003cd0:	f004 f9fe 	bl	80080d0 <HAL_GPIO_WritePin>
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2140      	movs	r1, #64	; 0x40
 8003cd8:	4834      	ldr	r0, [pc, #208]	; (8003dac <ALL_Motors_Disable+0x168>)
 8003cda:	f004 f9f9 	bl	80080d0 <HAL_GPIO_WritePin>
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ce4:	4831      	ldr	r0, [pc, #196]	; (8003dac <ALL_Motors_Disable+0x168>)
 8003ce6:	f004 f9f3 	bl	80080d0 <HAL_GPIO_WritePin>
 8003cea:	2200      	movs	r2, #0
 8003cec:	2104      	movs	r1, #4
 8003cee:	4830      	ldr	r0, [pc, #192]	; (8003db0 <ALL_Motors_Disable+0x16c>)
 8003cf0:	f004 f9ee 	bl	80080d0 <HAL_GPIO_WritePin>
	VM5_IN1_L();	VM5_IN2_L();	VM5_IN3_L();	VM5_IN4_L();
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cfa:	482c      	ldr	r0, [pc, #176]	; (8003dac <ALL_Motors_Disable+0x168>)
 8003cfc:	f004 f9e8 	bl	80080d0 <HAL_GPIO_WritePin>
 8003d00:	2200      	movs	r2, #0
 8003d02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d06:	4829      	ldr	r0, [pc, #164]	; (8003dac <ALL_Motors_Disable+0x168>)
 8003d08:	f004 f9e2 	bl	80080d0 <HAL_GPIO_WritePin>
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d12:	4826      	ldr	r0, [pc, #152]	; (8003dac <ALL_Motors_Disable+0x168>)
 8003d14:	f004 f9dc 	bl	80080d0 <HAL_GPIO_WritePin>
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d1e:	4823      	ldr	r0, [pc, #140]	; (8003dac <ALL_Motors_Disable+0x168>)
 8003d20:	f004 f9d6 	bl	80080d0 <HAL_GPIO_WritePin>
	VM6_IN1_L();	VM6_IN2_L();	VM6_IN3_L();	VM6_IN4_L();
 8003d24:	2200      	movs	r2, #0
 8003d26:	2120      	movs	r1, #32
 8003d28:	4821      	ldr	r0, [pc, #132]	; (8003db0 <ALL_Motors_Disable+0x16c>)
 8003d2a:	f004 f9d1 	bl	80080d0 <HAL_GPIO_WritePin>
 8003d2e:	2200      	movs	r2, #0
 8003d30:	2140      	movs	r1, #64	; 0x40
 8003d32:	481f      	ldr	r0, [pc, #124]	; (8003db0 <ALL_Motors_Disable+0x16c>)
 8003d34:	f004 f9cc 	bl	80080d0 <HAL_GPIO_WritePin>
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d3e:	481f      	ldr	r0, [pc, #124]	; (8003dbc <ALL_Motors_Disable+0x178>)
 8003d40:	f004 f9c6 	bl	80080d0 <HAL_GPIO_WritePin>
 8003d44:	2200      	movs	r2, #0
 8003d46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d4a:	481c      	ldr	r0, [pc, #112]	; (8003dbc <ALL_Motors_Disable+0x178>)
 8003d4c:	f004 f9c0 	bl	80080d0 <HAL_GPIO_WritePin>
	VM7_IN1_L();	VM7_IN2_L();	VM7_IN3_L();	VM7_IN4_L();
 8003d50:	2200      	movs	r2, #0
 8003d52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d56:	4815      	ldr	r0, [pc, #84]	; (8003dac <ALL_Motors_Disable+0x168>)
 8003d58:	f004 f9ba 	bl	80080d0 <HAL_GPIO_WritePin>
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d62:	4812      	ldr	r0, [pc, #72]	; (8003dac <ALL_Motors_Disable+0x168>)
 8003d64:	f004 f9b4 	bl	80080d0 <HAL_GPIO_WritePin>
 8003d68:	2200      	movs	r2, #0
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	480f      	ldr	r0, [pc, #60]	; (8003dac <ALL_Motors_Disable+0x168>)
 8003d6e:	f004 f9af 	bl	80080d0 <HAL_GPIO_WritePin>
 8003d72:	2200      	movs	r2, #0
 8003d74:	2102      	movs	r1, #2
 8003d76:	480d      	ldr	r0, [pc, #52]	; (8003dac <ALL_Motors_Disable+0x168>)
 8003d78:	f004 f9aa 	bl	80080d0 <HAL_GPIO_WritePin>
	VM8_IN1_L();	VM8_IN2_L();	VM8_IN3_L();	VM8_IN4_L();
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d82:	480f      	ldr	r0, [pc, #60]	; (8003dc0 <ALL_Motors_Disable+0x17c>)
 8003d84:	f004 f9a4 	bl	80080d0 <HAL_GPIO_WritePin>
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d8e:	480c      	ldr	r0, [pc, #48]	; (8003dc0 <ALL_Motors_Disable+0x17c>)
 8003d90:	f004 f99e 	bl	80080d0 <HAL_GPIO_WritePin>
 8003d94:	2200      	movs	r2, #0
 8003d96:	2104      	movs	r1, #4
 8003d98:	480a      	ldr	r0, [pc, #40]	; (8003dc4 <ALL_Motors_Disable+0x180>)
 8003d9a:	f004 f999 	bl	80080d0 <HAL_GPIO_WritePin>
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2108      	movs	r1, #8
 8003da2:	4808      	ldr	r0, [pc, #32]	; (8003dc4 <ALL_Motors_Disable+0x180>)
 8003da4:	f004 f994 	bl	80080d0 <HAL_GPIO_WritePin>
}
 8003da8:	bf00      	nop
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40020400 	.word	0x40020400
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40021800 	.word	0x40021800
 8003db8:	40021400 	.word	0x40021400
 8003dbc:	40020800 	.word	0x40020800
 8003dc0:	40020c00 	.word	0x40020c00
 8003dc4:	40020000 	.word	0x40020000

08003dc8 <AccelDecelTimeCompute>:
	printf("Reseting Motors Result:0x%x ...\r\n",Motor_Init_Result);
	return Motor_Init_Result;
}

uint32_t AccelDecelTimeCompute(uint32_t AccelDecelRate)  //根据输入的加减速率，计算加减速计时器的TMR
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
	uint32_t temp_AccelDecelTimeTMR;
	if(AccelDecelRate > MOTORTIM_TMR){
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a09      	ldr	r2, [pc, #36]	; (8003df8 <AccelDecelTimeCompute+0x30>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d905      	bls.n	8003de4 <AccelDecelTimeCompute+0x1c>
		printf("[WRONG]AccelDecel Rate Oversize!\r\n"); //如果加减速超过MOTORTIM_TMR（100000Hz/s），判断过快报错
 8003dd8:	4808      	ldr	r0, [pc, #32]	; (8003dfc <AccelDecelTimeCompute+0x34>)
 8003dda:	f00b ff3d 	bl	800fc58 <puts>
		return 10000;  // 返回一个较大的加速度增量10kHz
 8003dde:	f242 7310 	movw	r3, #10000	; 0x2710
 8003de2:	e005      	b.n	8003df0 <AccelDecelTimeCompute+0x28>
	}
	temp_AccelDecelTimeTMR = MOTORTIM_TMR / AccelDecelRate ;  // 计算对应的加减速计时器TMR
 8003de4:	4a04      	ldr	r2, [pc, #16]	; (8003df8 <AccelDecelTimeCompute+0x30>)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dec:	60fb      	str	r3, [r7, #12]
	return temp_AccelDecelTimeTMR;
 8003dee:	68fb      	ldr	r3, [r7, #12]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	000186a0 	.word	0x000186a0
 8003dfc:	08011f20 	.word	0x08011f20

08003e00 <AccelDecel>:

void AccelDecel(uint32_t AccelDecelState,struct MotorDefine *a)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
	switch (AccelDecelState){
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d022      	beq.n	8003e56 <AccelDecel+0x56>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d839      	bhi.n	8003e8a <AccelDecel+0x8a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d035      	beq.n	8003e88 <AccelDecel+0x88>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d000      	beq.n	8003e24 <AccelDecel+0x24>
			a->ActualSpeedInHz = a->StartupSpeedInHz;
			AccelDecelState = 0;
		}
		a->StepperSpeedTMR = MOTORTIM_TMR / a->ActualSpeedInHz;
	}
}
 8003e22:	e032      	b.n	8003e8a <AccelDecel+0x8a>
		a->ActualSpeedInHz ++ ;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e28:	1c5a      	adds	r2, r3, #1
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	641a      	str	r2, [r3, #64]	; 0x40
		if (a->ActualSpeedInHz >= a->DesiredSpeedInHz){
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d305      	bcc.n	8003e46 <AccelDecel+0x46>
			a->ActualSpeedInHz = a->DesiredSpeedInHz;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	641a      	str	r2, [r3, #64]	; 0x40
			AccelDecelState = 0;
 8003e42:	2300      	movs	r3, #0
 8003e44:	607b      	str	r3, [r7, #4]
		a->StepperSpeedTMR = MOTORTIM_TMR / a->ActualSpeedInHz;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	4a13      	ldr	r2, [pc, #76]	; (8003e98 <AccelDecel+0x98>)
 8003e4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	649a      	str	r2, [r3, #72]	; 0x48
	break;
 8003e54:	e019      	b.n	8003e8a <AccelDecel+0x8a>
		a->ActualSpeedInHz -- ;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	1e5a      	subs	r2, r3, #1
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	641a      	str	r2, [r3, #64]	; 0x40
		if (a->ActualSpeedInHz <= a->StartupSpeedInHz){
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d805      	bhi.n	8003e78 <AccelDecel+0x78>
			a->ActualSpeedInHz = a->StartupSpeedInHz;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	641a      	str	r2, [r3, #64]	; 0x40
			AccelDecelState = 0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	607b      	str	r3, [r7, #4]
		a->StepperSpeedTMR = MOTORTIM_TMR / a->ActualSpeedInHz;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7c:	4a06      	ldr	r2, [pc, #24]	; (8003e98 <AccelDecel+0x98>)
 8003e7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003e86:	e000      	b.n	8003e8a <AccelDecel+0x8a>
	break;
 8003e88:	bf00      	nop
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	000186a0 	.word	0x000186a0

08003e9c <Motor_AccelDecel_waveCalculate>:

void Motor_AccelDecel_waveCalculate(struct MotorDefine *a)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
	uint32_t DesiredNumberofSteptoAccel ;
	uint32_t DesiredNumberofSteptoDecel ;
	float DesiredAccellTimeInSeconds ;
	float DesiredDecellTimeInSeconds ;

	a->AccelerationTimeTMR = AccelDecelTimeCompute(a->accelerationRate);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff ff8d 	bl	8003dc8 <AccelDecelTimeCompute>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	659a      	str	r2, [r3, #88]	; 0x58
	a->DecelerationTimeTMR = AccelDecelTimeCompute(a->decelerationRate);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff ff85 	bl	8003dc8 <AccelDecelTimeCompute>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	65da      	str	r2, [r3, #92]	; 0x5c

	DesiredAccellTimeInSeconds = ((float)a->DesiredSpeedInHz-a->StartupSpeedInHz) / a->accelerationRate;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec8:	ee07 3a90 	vmov	s15, r3
 8003ecc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed4:	ee07 3a90 	vmov	s15, r3
 8003ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003edc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	ee07 3a90 	vmov	s15, r3
 8003ee8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003eec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ef0:	edc7 7a05 	vstr	s15, [r7, #20]
	DesiredDecellTimeInSeconds = ((float)a->DesiredSpeedInHz-a->StartupSpeedInHz) / a->decelerationRate;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef8:	ee07 3a90 	vmov	s15, r3
 8003efc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f04:	ee07 3a90 	vmov	s15, r3
 8003f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f0c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	ee07 3a90 	vmov	s15, r3
 8003f18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f20:	edc7 7a04 	vstr	s15, [r7, #16]
	DesiredNumberofSteptoAccel =  DesiredAccellTimeInSeconds * (a->DesiredSpeedInHz-a->StartupSpeedInHz) /2 + a->StartupSpeedInHz*DesiredAccellTimeInSeconds; //对速度曲线求积分，理论计算完成加速需要的步数
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	ee07 3a90 	vmov	s15, r3
 8003f32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f36:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f3e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003f42:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4a:	ee07 3a90 	vmov	s15, r3
 8003f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f52:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f62:	ee17 3a90 	vmov	r3, s15
 8003f66:	60fb      	str	r3, [r7, #12]
	DesiredNumberofSteptoDecel =  DesiredDecellTimeInSeconds * (a->DesiredSpeedInHz-a->StartupSpeedInHz) /2 + a->StartupSpeedInHz*DesiredDecellTimeInSeconds ; //对速度曲线求积分，理论计算完成减速需要的步数
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	ee07 3a90 	vmov	s15, r3
 8003f76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f82:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003f86:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8e:	ee07 3a90 	vmov	s15, r3
 8003f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f96:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fa6:	ee17 3a90 	vmov	r3, s15
 8003faa:	60bb      	str	r3, [r7, #8]

	if ( (DesiredNumberofSteptoAccel + DesiredNumberofSteptoDecel) <= a->NumberofSteps ) //如果加减速需要的步数和，小于总步数，则进行完整加减速
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	441a      	add	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d809      	bhi.n	8003fce <Motor_AccelDecel_waveCalculate+0x132>
	{
		a->NumberofSteps_StopAccel = a->NumberofSteps - DesiredNumberofSteptoAccel ;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	1ad2      	subs	r2, r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	651a      	str	r2, [r3, #80]	; 0x50
		a->NumberofSteps_BeginDecel =  DesiredNumberofSteptoDecel ;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	655a      	str	r2, [r3, #84]	; 0x54
 8003fcc:	e010      	b.n	8003ff0 <Motor_AccelDecel_waveCalculate+0x154>
	}
	else  // 如果行进距离不能完成完整的加减速曲线，则前1/3加速，后1/3减速
	{
		a->NumberofSteps_StopAccel = a->NumberofSteps /3*2 ;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd2:	4a0d      	ldr	r2, [pc, #52]	; (8004008 <Motor_AccelDecel_waveCalculate+0x16c>)
 8003fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd8:	085b      	lsrs	r3, r3, #1
 8003fda:	005a      	lsls	r2, r3, #1
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	651a      	str	r2, [r3, #80]	; 0x50
		a->NumberofSteps_BeginDecel = a->NumberofSteps /3 ;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe4:	4a08      	ldr	r2, [pc, #32]	; (8004008 <Motor_AccelDecel_waveCalculate+0x16c>)
 8003fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fea:	085a      	lsrs	r2, r3, #1
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	655a      	str	r2, [r3, #84]	; 0x54
	}
	if ( a->MotorNumber == 4 ){		// 电机4柱塞泵，防止注液时挂液，取消减速使电机高速注液
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d102      	bne.n	8004000 <Motor_AccelDecel_waveCalculate+0x164>
		a->NumberofSteps_BeginDecel = 0 ;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	655a      	str	r2, [r3, #84]	; 0x54
	}
}
 8004000:	bf00      	nop
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	aaaaaaab 	.word	0xaaaaaaab

0800400c <MotorDirection_SetUp>:

void MotorDirection_SetUp(struct MotorDefine *a)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
	if (a->MotorNumber == 1){
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3020 	ldrb.w	r3, [r3, #32]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d110      	bne.n	8004040 <MotorDirection_SetUp+0x34>
		if(a->MotorDirection == 1){
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004024:	2b01      	cmp	r3, #1
 8004026:	d105      	bne.n	8004034 <MotorDirection_SetUp+0x28>
			Motor1_Nreset_direction;
 8004028:	2200      	movs	r2, #0
 800402a:	2120      	movs	r1, #32
 800402c:	4828      	ldr	r0, [pc, #160]	; (80040d0 <MotorDirection_SetUp+0xc4>)
 800402e:	f004 f84f 	bl	80080d0 <HAL_GPIO_WritePin>
		else{
			Motor4_reset_direction;
		}
	}

}
 8004032:	e048      	b.n	80040c6 <MotorDirection_SetUp+0xba>
			Motor1_reset_direction;
 8004034:	2201      	movs	r2, #1
 8004036:	2120      	movs	r1, #32
 8004038:	4825      	ldr	r0, [pc, #148]	; (80040d0 <MotorDirection_SetUp+0xc4>)
 800403a:	f004 f849 	bl	80080d0 <HAL_GPIO_WritePin>
}
 800403e:	e042      	b.n	80040c6 <MotorDirection_SetUp+0xba>
	else if (a->MotorNumber == 2){
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d112      	bne.n	8004070 <MotorDirection_SetUp+0x64>
		if(a->MotorDirection == 1){
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004050:	2b01      	cmp	r3, #1
 8004052:	d106      	bne.n	8004062 <MotorDirection_SetUp+0x56>
			Motor2_Nreset_direction;
 8004054:	2201      	movs	r2, #1
 8004056:	f44f 7180 	mov.w	r1, #256	; 0x100
 800405a:	481d      	ldr	r0, [pc, #116]	; (80040d0 <MotorDirection_SetUp+0xc4>)
 800405c:	f004 f838 	bl	80080d0 <HAL_GPIO_WritePin>
}
 8004060:	e031      	b.n	80040c6 <MotorDirection_SetUp+0xba>
			Motor2_reset_direction;
 8004062:	2200      	movs	r2, #0
 8004064:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004068:	4819      	ldr	r0, [pc, #100]	; (80040d0 <MotorDirection_SetUp+0xc4>)
 800406a:	f004 f831 	bl	80080d0 <HAL_GPIO_WritePin>
}
 800406e:	e02a      	b.n	80040c6 <MotorDirection_SetUp+0xba>
	else if (a->MotorNumber == 3){
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004076:	2b03      	cmp	r3, #3
 8004078:	d110      	bne.n	800409c <MotorDirection_SetUp+0x90>
		if(a->MotorDirection == 1){
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004080:	2b01      	cmp	r3, #1
 8004082:	d105      	bne.n	8004090 <MotorDirection_SetUp+0x84>
			Motor3_Nreset_direction;
 8004084:	2200      	movs	r2, #0
 8004086:	2102      	movs	r1, #2
 8004088:	4812      	ldr	r0, [pc, #72]	; (80040d4 <MotorDirection_SetUp+0xc8>)
 800408a:	f004 f821 	bl	80080d0 <HAL_GPIO_WritePin>
}
 800408e:	e01a      	b.n	80040c6 <MotorDirection_SetUp+0xba>
			Motor3_reset_direction;
 8004090:	2201      	movs	r2, #1
 8004092:	2102      	movs	r1, #2
 8004094:	480f      	ldr	r0, [pc, #60]	; (80040d4 <MotorDirection_SetUp+0xc8>)
 8004096:	f004 f81b 	bl	80080d0 <HAL_GPIO_WritePin>
}
 800409a:	e014      	b.n	80040c6 <MotorDirection_SetUp+0xba>
	else if (a->MotorNumber == 4){
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d10f      	bne.n	80040c6 <MotorDirection_SetUp+0xba>
		if(a->MotorDirection == 1){
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d105      	bne.n	80040bc <MotorDirection_SetUp+0xb0>
			Motor4_Nreset_direction;
 80040b0:	2200      	movs	r2, #0
 80040b2:	2110      	movs	r1, #16
 80040b4:	4807      	ldr	r0, [pc, #28]	; (80040d4 <MotorDirection_SetUp+0xc8>)
 80040b6:	f004 f80b 	bl	80080d0 <HAL_GPIO_WritePin>
}
 80040ba:	e004      	b.n	80040c6 <MotorDirection_SetUp+0xba>
			Motor4_reset_direction;
 80040bc:	2201      	movs	r2, #1
 80040be:	2110      	movs	r1, #16
 80040c0:	4804      	ldr	r0, [pc, #16]	; (80040d4 <MotorDirection_SetUp+0xc8>)
 80040c2:	f004 f805 	bl	80080d0 <HAL_GPIO_WritePin>
}
 80040c6:	bf00      	nop
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	40020400 	.word	0x40020400
 80040d4:	40021000 	.word	0x40021000

080040d8 <MotorMove_steps>:

/*            *****************    0x40-0b01000000 电机参数控制模式 ：  ******************
根据协议，通过USART5进行出串口通讯，输入步进电机的【编号、方向、速度、距离、启动速度、加减速频率】电机运动参数
***特别注意： 调试模式如果增加打印信息，在连续执行函数时，会造成10-20ms的延时，***/
void MotorMove_steps(struct MotorDefine *temp)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
	if (Motor[temp->MotorNumber].Status == 1){
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040e6:	4619      	mov	r1, r3
 80040e8:	4a47      	ldr	r2, [pc, #284]	; (8004208 <MotorMove_steps+0x130>)
 80040ea:	460b      	mov	r3, r1
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	440b      	add	r3, r1
 80040f0:	015b      	lsls	r3, r3, #5
 80040f2:	4413      	add	r3, r2
 80040f4:	3330      	adds	r3, #48	; 0x30
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d110      	bne.n	800411e <MotorMove_steps+0x46>
		printf("[WRONG] Motor Moved Failed,Motor%d is busy!\r\n",Motor[temp->MotorNumber].MotorNumber);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004102:	4619      	mov	r1, r3
 8004104:	4a40      	ldr	r2, [pc, #256]	; (8004208 <MotorMove_steps+0x130>)
 8004106:	460b      	mov	r3, r1
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	440b      	add	r3, r1
 800410c:	015b      	lsls	r3, r3, #5
 800410e:	4413      	add	r3, r2
 8004110:	3320      	adds	r3, #32
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	4619      	mov	r1, r3
 8004116:	483d      	ldr	r0, [pc, #244]	; (800420c <MotorMove_steps+0x134>)
 8004118:	f00b fd18 	bl	800fb4c <iprintf>
		return ;
 800411c:	e19c      	b.n	8004458 <MotorMove_steps+0x380>
	}
	else {
		Motor[temp->MotorNumber].Status = 1 ;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004124:	4619      	mov	r1, r3
 8004126:	4a38      	ldr	r2, [pc, #224]	; (8004208 <MotorMove_steps+0x130>)
 8004128:	460b      	mov	r3, r1
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	440b      	add	r3, r1
 800412e:	015b      	lsls	r3, r3, #5
 8004130:	4413      	add	r3, r2
 8004132:	3330      	adds	r3, #48	; 0x30
 8004134:	2201      	movs	r2, #1
 8004136:	701a      	strb	r2, [r3, #0]
	}

	temp->deceleration_ratio = Motor[temp->MotorNumber].deceleration_ratio ;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800413e:	4619      	mov	r1, r3
 8004140:	4a31      	ldr	r2, [pc, #196]	; (8004208 <MotorMove_steps+0x130>)
 8004142:	460b      	mov	r3, r1
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	440b      	add	r3, r1
 8004148:	015b      	lsls	r3, r3, #5
 800414a:	4413      	add	r3, r2
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	601a      	str	r2, [r3, #0]
	temp->step_angle = Motor[temp->MotorNumber].step_angle ;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004158:	4619      	mov	r1, r3
 800415a:	4a2b      	ldr	r2, [pc, #172]	; (8004208 <MotorMove_steps+0x130>)
 800415c:	460b      	mov	r3, r1
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	440b      	add	r3, r1
 8004162:	015b      	lsls	r3, r3, #5
 8004164:	4413      	add	r3, r2
 8004166:	3304      	adds	r3, #4
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	605a      	str	r2, [r3, #4]
	temp->mircro_steps = Motor[temp->MotorNumber].mircro_steps ;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004174:	4619      	mov	r1, r3
 8004176:	4a24      	ldr	r2, [pc, #144]	; (8004208 <MotorMove_steps+0x130>)
 8004178:	460b      	mov	r3, r1
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	440b      	add	r3, r1
 800417e:	015b      	lsls	r3, r3, #5
 8004180:	4413      	add	r3, r2
 8004182:	3308      	adds	r3, #8
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	609a      	str	r2, [r3, #8]
	temp->MaxSpeedInRads = Motor[temp->MotorNumber].MaxSpeedInRads ;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004190:	4619      	mov	r1, r3
 8004192:	4a1d      	ldr	r2, [pc, #116]	; (8004208 <MotorMove_steps+0x130>)
 8004194:	460b      	mov	r3, r1
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	440b      	add	r3, r1
 800419a:	015b      	lsls	r3, r3, #5
 800419c:	4413      	add	r3, r2
 800419e:	330c      	adds	r3, #12
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	60da      	str	r2, [r3, #12]
	temp->htim_x = Motor[temp->MotorNumber].htim_x ;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041ac:	4619      	mov	r1, r3
 80041ae:	4a16      	ldr	r2, [pc, #88]	; (8004208 <MotorMove_steps+0x130>)
 80041b0:	460b      	mov	r3, r1
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	440b      	add	r3, r1
 80041b6:	015b      	lsls	r3, r3, #5
 80041b8:	4413      	add	r3, r2
 80041ba:	3334      	adds	r3, #52	; 0x34
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	635a      	str	r2, [r3, #52]	; 0x34

	if(temp->DesiredSpeedInRads > temp->MaxSpeedInRads)  // 判断电机设置速度是否超过最大转速
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	ed93 7a05 	vldr	s14, [r3, #20]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80041ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d6:	dd1f      	ble.n	8004218 <MotorMove_steps+0x140>
	{
		printf("[WRONG] Setup Speed faster than max speed:%.2f rad/s !\r\n",temp->MaxSpeedInRads);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fc f9b3 	bl	8000548 <__aeabi_f2d>
 80041e2:	4602      	mov	r2, r0
 80041e4:	460b      	mov	r3, r1
 80041e6:	480a      	ldr	r0, [pc, #40]	; (8004210 <MotorMove_steps+0x138>)
 80041e8:	f00b fcb0 	bl	800fb4c <iprintf>
		Motor[temp->MotorNumber].Status = 0 ;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041f2:	4619      	mov	r1, r3
 80041f4:	4a04      	ldr	r2, [pc, #16]	; (8004208 <MotorMove_steps+0x130>)
 80041f6:	460b      	mov	r3, r1
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	440b      	add	r3, r1
 80041fc:	015b      	lsls	r3, r3, #5
 80041fe:	4413      	add	r3, r2
 8004200:	3330      	adds	r3, #48	; 0x30
 8004202:	2200      	movs	r2, #0
 8004204:	701a      	strb	r2, [r3, #0]
		return ;
 8004206:	e127      	b.n	8004458 <MotorMove_steps+0x380>
 8004208:	200008a8 	.word	0x200008a8
 800420c:	08011f44 	.word	0x08011f44
 8004210:	08011f74 	.word	0x08011f74
 8004214:	43b40000 	.word	0x43b40000
	}

	// 计算： 单圈步数、启动速度、目标速度、行进步数、加减速时间
	temp->StepsInOneCircle = (360 / temp->step_angle) * temp->deceleration_ratio * temp->mircro_steps;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	edd3 7a01 	vldr	s15, [r3, #4]
 800421e:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8004214 <MotorMove_steps+0x13c>
 8004222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	edd3 7a00 	vldr	s15, [r3]
 800422c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	ee07 3a90 	vmov	s15, r3
 8004238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800423c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004240:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004244:	ee17 2a90 	vmov	r2, s15
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	639a      	str	r2, [r3, #56]	; 0x38
	temp->StartupSpeedInHz = temp->StepsInOneCircle * temp->StartupSpeedInRads ;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004250:	ee07 3a90 	vmov	s15, r3
 8004254:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	edd3 7a04 	vldr	s15, [r3, #16]
 800425e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004266:	ee17 2a90 	vmov	r2, s15
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	63da      	str	r2, [r3, #60]	; 0x3c
	temp->ActualSpeedInHz = temp->StartupSpeedInHz;						// 设定初始实际频率为启动频率
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	641a      	str	r2, [r3, #64]	; 0x40
	temp->DesiredSpeedInHz = temp->StepsInOneCircle * temp->DesiredSpeedInRads ;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427a:	ee07 3a90 	vmov	s15, r3
 800427e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	edd3 7a05 	vldr	s15, [r3, #20]
 8004288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800428c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004290:	ee17 2a90 	vmov	r2, s15
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	645a      	str	r2, [r3, #68]	; 0x44
	temp->StepperSpeedTMR = MOTORTIM_TMR / temp->ActualSpeedInHz;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	4a70      	ldr	r2, [pc, #448]	; (8004460 <MotorMove_steps+0x388>)
 800429e:	fbb2 f2f3 	udiv	r2, r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	649a      	str	r2, [r3, #72]	; 0x48
	temp->NumberofSteps = temp->NumberofRads * temp->StepsInOneCircle ;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b0:	ee07 3a90 	vmov	s15, r3
 80042b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042c0:	ee17 2a90 	vmov	r2, s15
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	64da      	str	r2, [r3, #76]	; 0x4c

	Motor_AccelDecel_waveCalculate(temp);  // 计算电机加减速曲线
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7ff fde7 	bl	8003e9c <Motor_AccelDecel_waveCalculate>

	Motor[temp->MotorNumber].StepsInOneCircle = temp->StepsInOneCircle ;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042d4:	4618      	mov	r0, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042da:	4962      	ldr	r1, [pc, #392]	; (8004464 <MotorMove_steps+0x38c>)
 80042dc:	4603      	mov	r3, r0
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	4403      	add	r3, r0
 80042e2:	015b      	lsls	r3, r3, #5
 80042e4:	440b      	add	r3, r1
 80042e6:	3338      	adds	r3, #56	; 0x38
 80042e8:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].StartupSpeedInHz = temp->StartupSpeedInHz ;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042f0:	4618      	mov	r0, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042f6:	495b      	ldr	r1, [pc, #364]	; (8004464 <MotorMove_steps+0x38c>)
 80042f8:	4603      	mov	r3, r0
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	4403      	add	r3, r0
 80042fe:	015b      	lsls	r3, r3, #5
 8004300:	440b      	add	r3, r1
 8004302:	333c      	adds	r3, #60	; 0x3c
 8004304:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].ActualSpeedInHz = temp->ActualSpeedInHz ;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 3020 	ldrb.w	r3, [r3, #32]
 800430c:	4618      	mov	r0, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004312:	4954      	ldr	r1, [pc, #336]	; (8004464 <MotorMove_steps+0x38c>)
 8004314:	4603      	mov	r3, r0
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	4403      	add	r3, r0
 800431a:	015b      	lsls	r3, r3, #5
 800431c:	440b      	add	r3, r1
 800431e:	3340      	adds	r3, #64	; 0x40
 8004320:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].DesiredSpeedInHz = temp->DesiredSpeedInHz ;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004328:	4618      	mov	r0, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800432e:	494d      	ldr	r1, [pc, #308]	; (8004464 <MotorMove_steps+0x38c>)
 8004330:	4603      	mov	r3, r0
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	4403      	add	r3, r0
 8004336:	015b      	lsls	r3, r3, #5
 8004338:	440b      	add	r3, r1
 800433a:	3344      	adds	r3, #68	; 0x44
 800433c:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].StepperSpeedTMR = temp->StepperSpeedTMR ;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004344:	4618      	mov	r0, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800434a:	4946      	ldr	r1, [pc, #280]	; (8004464 <MotorMove_steps+0x38c>)
 800434c:	4603      	mov	r3, r0
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	4403      	add	r3, r0
 8004352:	015b      	lsls	r3, r3, #5
 8004354:	440b      	add	r3, r1
 8004356:	3348      	adds	r3, #72	; 0x48
 8004358:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].NumberofSteps = temp->NumberofSteps ;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004360:	4618      	mov	r0, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004366:	493f      	ldr	r1, [pc, #252]	; (8004464 <MotorMove_steps+0x38c>)
 8004368:	4603      	mov	r3, r0
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	4403      	add	r3, r0
 800436e:	015b      	lsls	r3, r3, #5
 8004370:	440b      	add	r3, r1
 8004372:	334c      	adds	r3, #76	; 0x4c
 8004374:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].MotorDirection = temp->MotorDirection ;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 3020 	ldrb.w	r3, [r3, #32]
 800437c:	4619      	mov	r1, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
 8004384:	4a37      	ldr	r2, [pc, #220]	; (8004464 <MotorMove_steps+0x38c>)
 8004386:	460b      	mov	r3, r1
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	440b      	add	r3, r1
 800438c:	015b      	lsls	r3, r3, #5
 800438e:	4413      	add	r3, r2
 8004390:	3321      	adds	r3, #33	; 0x21
 8004392:	4602      	mov	r2, r0
 8004394:	701a      	strb	r2, [r3, #0]
	Motor[temp->MotorNumber].NumberofSteps_StopAccel = temp->NumberofSteps_StopAccel ;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 3020 	ldrb.w	r3, [r3, #32]
 800439c:	4618      	mov	r0, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043a2:	4930      	ldr	r1, [pc, #192]	; (8004464 <MotorMove_steps+0x38c>)
 80043a4:	4603      	mov	r3, r0
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	4403      	add	r3, r0
 80043aa:	015b      	lsls	r3, r3, #5
 80043ac:	440b      	add	r3, r1
 80043ae:	3350      	adds	r3, #80	; 0x50
 80043b0:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].NumberofSteps_BeginDecel = temp->NumberofSteps_BeginDecel ;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043b8:	4618      	mov	r0, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043be:	4929      	ldr	r1, [pc, #164]	; (8004464 <MotorMove_steps+0x38c>)
 80043c0:	4603      	mov	r3, r0
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	4403      	add	r3, r0
 80043c6:	015b      	lsls	r3, r3, #5
 80043c8:	440b      	add	r3, r1
 80043ca:	3354      	adds	r3, #84	; 0x54
 80043cc:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].AccelerationTimeTMR = temp->AccelerationTimeTMR ;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043d4:	4618      	mov	r0, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80043da:	4922      	ldr	r1, [pc, #136]	; (8004464 <MotorMove_steps+0x38c>)
 80043dc:	4603      	mov	r3, r0
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	4403      	add	r3, r0
 80043e2:	015b      	lsls	r3, r3, #5
 80043e4:	440b      	add	r3, r1
 80043e6:	3358      	adds	r3, #88	; 0x58
 80043e8:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].DecelerationTimeTMR = temp->DecelerationTimeTMR ;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043f0:	4618      	mov	r0, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043f6:	491b      	ldr	r1, [pc, #108]	; (8004464 <MotorMove_steps+0x38c>)
 80043f8:	4603      	mov	r3, r0
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	4403      	add	r3, r0
 80043fe:	015b      	lsls	r3, r3, #5
 8004400:	440b      	add	r3, r1
 8004402:	335c      	adds	r3, #92	; 0x5c
 8004404:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].TargetPosition = -16777200 ; //暂时设置目标位置为无法达到的值，参数控制模式用步进数控制中断停止
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 3020 	ldrb.w	r3, [r3, #32]
 800440c:	4619      	mov	r1, r3
 800440e:	4a15      	ldr	r2, [pc, #84]	; (8004464 <MotorMove_steps+0x38c>)
 8004410:	460b      	mov	r3, r1
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	440b      	add	r3, r1
 8004416:	015b      	lsls	r3, r3, #5
 8004418:	4413      	add	r3, r2
 800441a:	332c      	adds	r3, #44	; 0x2c
 800441c:	4a12      	ldr	r2, [pc, #72]	; (8004468 <MotorMove_steps+0x390>)
 800441e:	601a      	str	r2, [r3, #0]

	MotorDirection_SetUp(&Motor[temp->MotorNumber]) ;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004426:	461a      	mov	r2, r3
 8004428:	4613      	mov	r3, r2
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	4413      	add	r3, r2
 800442e:	015b      	lsls	r3, r3, #5
 8004430:	4a0c      	ldr	r2, [pc, #48]	; (8004464 <MotorMove_steps+0x38c>)
 8004432:	4413      	add	r3, r2
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff fde9 	bl	800400c <MotorDirection_SetUp>
	HAL_TIM_Base_Start_IT(Motor[temp->MotorNumber].htim_x);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004440:	4619      	mov	r1, r3
 8004442:	4a08      	ldr	r2, [pc, #32]	; (8004464 <MotorMove_steps+0x38c>)
 8004444:	460b      	mov	r3, r1
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	440b      	add	r3, r1
 800444a:	015b      	lsls	r3, r3, #5
 800444c:	4413      	add	r3, r2
 800444e:	3334      	adds	r3, #52	; 0x34
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f006 f9c2 	bl	800a7dc <HAL_TIM_Base_Start_IT>
}
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	000186a0 	.word	0x000186a0
 8004464:	200008a8 	.word	0x200008a8
 8004468:	ff000010 	.word	0xff000010

0800446c <MotorMove_position>:

/*            *****************    0x80-0b10000000 电机位置控制模式 ：  ******************
根据协议，通过USART5进行出串口通讯，输入步进电机的 【地址+目标位置】 即可，使用程序本身的电机参数控制运动
***特别注意： 调试模式如果增加打印信息，在连续执行函数时，会造成10-20ms的延时，***/
void MotorMove_position(struct MotorDefine *temp  , int32_t targer_position)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
	if (Motor[temp->MotorNumber].Status == 1){
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 3020 	ldrb.w	r3, [r3, #32]
 800447c:	4619      	mov	r1, r3
 800447e:	4acf      	ldr	r2, [pc, #828]	; (80047bc <MotorMove_position+0x350>)
 8004480:	460b      	mov	r3, r1
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	440b      	add	r3, r1
 8004486:	015b      	lsls	r3, r3, #5
 8004488:	4413      	add	r3, r2
 800448a:	3330      	adds	r3, #48	; 0x30
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d110      	bne.n	80044b4 <MotorMove_position+0x48>
		printf("[WRONG] Position Set Failed,Motor%d is busy!\r\n",Motor[temp->MotorNumber].MotorNumber);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004498:	4619      	mov	r1, r3
 800449a:	4ac8      	ldr	r2, [pc, #800]	; (80047bc <MotorMove_position+0x350>)
 800449c:	460b      	mov	r3, r1
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	440b      	add	r3, r1
 80044a2:	015b      	lsls	r3, r3, #5
 80044a4:	4413      	add	r3, r2
 80044a6:	3320      	adds	r3, #32
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	4619      	mov	r1, r3
 80044ac:	48c4      	ldr	r0, [pc, #784]	; (80047c0 <MotorMove_position+0x354>)
 80044ae:	f00b fb4d 	bl	800fb4c <iprintf>
		return ;
 80044b2:	e2fb      	b.n	8004aac <MotorMove_position+0x640>
	}
	else {
		Motor[temp->MotorNumber].Status = 1 ;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044ba:	4619      	mov	r1, r3
 80044bc:	4abf      	ldr	r2, [pc, #764]	; (80047bc <MotorMove_position+0x350>)
 80044be:	460b      	mov	r3, r1
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	440b      	add	r3, r1
 80044c4:	015b      	lsls	r3, r3, #5
 80044c6:	4413      	add	r3, r2
 80044c8:	3330      	adds	r3, #48	; 0x30
 80044ca:	2201      	movs	r2, #1
 80044cc:	701a      	strb	r2, [r3, #0]
	}

	Motor[temp->MotorNumber].StepsInOneCircle = (360 / Motor[temp->MotorNumber].step_angle) * Motor[temp->MotorNumber].deceleration_ratio * Motor[temp->MotorNumber].mircro_steps;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044d4:	4619      	mov	r1, r3
 80044d6:	4ab9      	ldr	r2, [pc, #740]	; (80047bc <MotorMove_position+0x350>)
 80044d8:	460b      	mov	r3, r1
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	440b      	add	r3, r1
 80044de:	015b      	lsls	r3, r3, #5
 80044e0:	4413      	add	r3, r2
 80044e2:	3304      	adds	r3, #4
 80044e4:	edd3 7a00 	vldr	s15, [r3]
 80044e8:	eddf 6ab6 	vldr	s13, [pc, #728]	; 80047c4 <MotorMove_position+0x358>
 80044ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044f6:	4619      	mov	r1, r3
 80044f8:	4ab0      	ldr	r2, [pc, #704]	; (80047bc <MotorMove_position+0x350>)
 80044fa:	460b      	mov	r3, r1
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	440b      	add	r3, r1
 8004500:	015b      	lsls	r3, r3, #5
 8004502:	4413      	add	r3, r2
 8004504:	edd3 7a00 	vldr	s15, [r3]
 8004508:	ee27 7a27 	vmul.f32	s14, s14, s15
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004512:	4619      	mov	r1, r3
 8004514:	4aa9      	ldr	r2, [pc, #676]	; (80047bc <MotorMove_position+0x350>)
 8004516:	460b      	mov	r3, r1
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	440b      	add	r3, r1
 800451c:	015b      	lsls	r3, r3, #5
 800451e:	4413      	add	r3, r2
 8004520:	3308      	adds	r3, #8
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	ee07 3a90 	vmov	s15, r3
 8004528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800452c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004536:	4619      	mov	r1, r3
 8004538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800453c:	ee17 0a90 	vmov	r0, s15
 8004540:	4a9e      	ldr	r2, [pc, #632]	; (80047bc <MotorMove_position+0x350>)
 8004542:	460b      	mov	r3, r1
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	440b      	add	r3, r1
 8004548:	015b      	lsls	r3, r3, #5
 800454a:	4413      	add	r3, r2
 800454c:	3338      	adds	r3, #56	; 0x38
 800454e:	6018      	str	r0, [r3, #0]
	Motor[temp->MotorNumber].StartupSpeedInHz = Motor[temp->MotorNumber].StepsInOneCircle * Motor[temp->MotorNumber].StartupSpeedInRads ;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004556:	4619      	mov	r1, r3
 8004558:	4a98      	ldr	r2, [pc, #608]	; (80047bc <MotorMove_position+0x350>)
 800455a:	460b      	mov	r3, r1
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	440b      	add	r3, r1
 8004560:	015b      	lsls	r3, r3, #5
 8004562:	4413      	add	r3, r2
 8004564:	3338      	adds	r3, #56	; 0x38
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	ee07 3a90 	vmov	s15, r3
 800456c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004576:	4619      	mov	r1, r3
 8004578:	4a90      	ldr	r2, [pc, #576]	; (80047bc <MotorMove_position+0x350>)
 800457a:	460b      	mov	r3, r1
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	440b      	add	r3, r1
 8004580:	015b      	lsls	r3, r3, #5
 8004582:	4413      	add	r3, r2
 8004584:	3310      	adds	r3, #16
 8004586:	edd3 7a00 	vldr	s15, [r3]
 800458a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004594:	4619      	mov	r1, r3
 8004596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800459a:	ee17 0a90 	vmov	r0, s15
 800459e:	4a87      	ldr	r2, [pc, #540]	; (80047bc <MotorMove_position+0x350>)
 80045a0:	460b      	mov	r3, r1
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	440b      	add	r3, r1
 80045a6:	015b      	lsls	r3, r3, #5
 80045a8:	4413      	add	r3, r2
 80045aa:	333c      	adds	r3, #60	; 0x3c
 80045ac:	6018      	str	r0, [r3, #0]
	Motor[temp->MotorNumber].ActualSpeedInHz = Motor[temp->MotorNumber].StartupSpeedInHz;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045b4:	4619      	mov	r1, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045bc:	4618      	mov	r0, r3
 80045be:	4a7f      	ldr	r2, [pc, #508]	; (80047bc <MotorMove_position+0x350>)
 80045c0:	460b      	mov	r3, r1
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	440b      	add	r3, r1
 80045c6:	015b      	lsls	r3, r3, #5
 80045c8:	4413      	add	r3, r2
 80045ca:	333c      	adds	r3, #60	; 0x3c
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	497b      	ldr	r1, [pc, #492]	; (80047bc <MotorMove_position+0x350>)
 80045d0:	4603      	mov	r3, r0
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	4403      	add	r3, r0
 80045d6:	015b      	lsls	r3, r3, #5
 80045d8:	440b      	add	r3, r1
 80045da:	3340      	adds	r3, #64	; 0x40
 80045dc:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].DesiredSpeedInHz = Motor[temp->MotorNumber].StepsInOneCircle * Motor[temp->MotorNumber].DesiredSpeedInRads ;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045e4:	4619      	mov	r1, r3
 80045e6:	4a75      	ldr	r2, [pc, #468]	; (80047bc <MotorMove_position+0x350>)
 80045e8:	460b      	mov	r3, r1
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	440b      	add	r3, r1
 80045ee:	015b      	lsls	r3, r3, #5
 80045f0:	4413      	add	r3, r2
 80045f2:	3338      	adds	r3, #56	; 0x38
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004604:	4619      	mov	r1, r3
 8004606:	4a6d      	ldr	r2, [pc, #436]	; (80047bc <MotorMove_position+0x350>)
 8004608:	460b      	mov	r3, r1
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	440b      	add	r3, r1
 800460e:	015b      	lsls	r3, r3, #5
 8004610:	4413      	add	r3, r2
 8004612:	3314      	adds	r3, #20
 8004614:	edd3 7a00 	vldr	s15, [r3]
 8004618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004622:	4619      	mov	r1, r3
 8004624:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004628:	ee17 0a90 	vmov	r0, s15
 800462c:	4a63      	ldr	r2, [pc, #396]	; (80047bc <MotorMove_position+0x350>)
 800462e:	460b      	mov	r3, r1
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	440b      	add	r3, r1
 8004634:	015b      	lsls	r3, r3, #5
 8004636:	4413      	add	r3, r2
 8004638:	3344      	adds	r3, #68	; 0x44
 800463a:	6018      	str	r0, [r3, #0]
	Motor[temp->MotorNumber].StepperSpeedTMR = MOTORTIM_TMR / Motor[temp->MotorNumber].ActualSpeedInHz;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004642:	4619      	mov	r1, r3
 8004644:	4a5d      	ldr	r2, [pc, #372]	; (80047bc <MotorMove_position+0x350>)
 8004646:	460b      	mov	r3, r1
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	440b      	add	r3, r1
 800464c:	015b      	lsls	r3, r3, #5
 800464e:	4413      	add	r3, r2
 8004650:	3340      	adds	r3, #64	; 0x40
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	f892 2020 	ldrb.w	r2, [r2, #32]
 800465a:	4610      	mov	r0, r2
 800465c:	4a5a      	ldr	r2, [pc, #360]	; (80047c8 <MotorMove_position+0x35c>)
 800465e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004662:	4956      	ldr	r1, [pc, #344]	; (80047bc <MotorMove_position+0x350>)
 8004664:	4603      	mov	r3, r0
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	4403      	add	r3, r0
 800466a:	015b      	lsls	r3, r3, #5
 800466c:	440b      	add	r3, r1
 800466e:	3348      	adds	r3, #72	; 0x48
 8004670:	601a      	str	r2, [r3, #0]

	Motor[temp->MotorNumber].TargetPosition = targer_position ;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004678:	4619      	mov	r1, r3
 800467a:	4a50      	ldr	r2, [pc, #320]	; (80047bc <MotorMove_position+0x350>)
 800467c:	460b      	mov	r3, r1
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	440b      	add	r3, r1
 8004682:	015b      	lsls	r3, r3, #5
 8004684:	4413      	add	r3, r2
 8004686:	332c      	adds	r3, #44	; 0x2c
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].NumberofSteps = abs(Motor[temp->MotorNumber].TargetPosition  -  Motor[temp->MotorNumber].StepPosition) ;//计算总步数
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004692:	4619      	mov	r1, r3
 8004694:	4a49      	ldr	r2, [pc, #292]	; (80047bc <MotorMove_position+0x350>)
 8004696:	460b      	mov	r3, r1
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	440b      	add	r3, r1
 800469c:	015b      	lsls	r3, r3, #5
 800469e:	4413      	add	r3, r2
 80046a0:	332c      	adds	r3, #44	; 0x2c
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046aa:	4618      	mov	r0, r3
 80046ac:	4943      	ldr	r1, [pc, #268]	; (80047bc <MotorMove_position+0x350>)
 80046ae:	4603      	mov	r3, r0
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	4403      	add	r3, r0
 80046b4:	015b      	lsls	r3, r3, #5
 80046b6:	440b      	add	r3, r1
 80046b8:	3328      	adds	r3, #40	; 0x28
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80046c2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046cc:	4619      	mov	r1, r3
 80046ce:	4610      	mov	r0, r2
 80046d0:	4a3a      	ldr	r2, [pc, #232]	; (80047bc <MotorMove_position+0x350>)
 80046d2:	460b      	mov	r3, r1
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	440b      	add	r3, r1
 80046d8:	015b      	lsls	r3, r3, #5
 80046da:	4413      	add	r3, r2
 80046dc:	334c      	adds	r3, #76	; 0x4c
 80046de:	6018      	str	r0, [r3, #0]
	if (Motor[temp->MotorNumber].TargetPosition == Motor[temp->MotorNumber].StepPosition){
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046e6:	4619      	mov	r1, r3
 80046e8:	4a34      	ldr	r2, [pc, #208]	; (80047bc <MotorMove_position+0x350>)
 80046ea:	460b      	mov	r3, r1
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	440b      	add	r3, r1
 80046f0:	015b      	lsls	r3, r3, #5
 80046f2:	4413      	add	r3, r2
 80046f4:	332c      	adds	r3, #44	; 0x2c
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046fe:	4618      	mov	r0, r3
 8004700:	492e      	ldr	r1, [pc, #184]	; (80047bc <MotorMove_position+0x350>)
 8004702:	4603      	mov	r3, r0
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	4403      	add	r3, r0
 8004708:	015b      	lsls	r3, r3, #5
 800470a:	440b      	add	r3, r1
 800470c:	3328      	adds	r3, #40	; 0x28
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d12b      	bne.n	800476c <MotorMove_position+0x300>
		Motor[temp->MotorNumber].Status = 0 ;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 3020 	ldrb.w	r3, [r3, #32]
 800471a:	4619      	mov	r1, r3
 800471c:	4a27      	ldr	r2, [pc, #156]	; (80047bc <MotorMove_position+0x350>)
 800471e:	460b      	mov	r3, r1
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	440b      	add	r3, r1
 8004724:	015b      	lsls	r3, r3, #5
 8004726:	4413      	add	r3, r2
 8004728:	3330      	adds	r3, #48	; 0x30
 800472a:	2200      	movs	r2, #0
 800472c:	701a      	strb	r2, [r3, #0]
		printf("---KEEP---Motor%d Steps Position:%ld---\r\n",Motor[temp->MotorNumber].MotorNumber,Motor[temp->MotorNumber].StepPosition);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004734:	4619      	mov	r1, r3
 8004736:	4a21      	ldr	r2, [pc, #132]	; (80047bc <MotorMove_position+0x350>)
 8004738:	460b      	mov	r3, r1
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	440b      	add	r3, r1
 800473e:	015b      	lsls	r3, r3, #5
 8004740:	4413      	add	r3, r2
 8004742:	3320      	adds	r3, #32
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	4618      	mov	r0, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800474e:	4619      	mov	r1, r3
 8004750:	4a1a      	ldr	r2, [pc, #104]	; (80047bc <MotorMove_position+0x350>)
 8004752:	460b      	mov	r3, r1
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	440b      	add	r3, r1
 8004758:	015b      	lsls	r3, r3, #5
 800475a:	4413      	add	r3, r2
 800475c:	3328      	adds	r3, #40	; 0x28
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	461a      	mov	r2, r3
 8004762:	4601      	mov	r1, r0
 8004764:	4819      	ldr	r0, [pc, #100]	; (80047cc <MotorMove_position+0x360>)
 8004766:	f00b f9f1 	bl	800fb4c <iprintf>
		return ;
 800476a:	e19f      	b.n	8004aac <MotorMove_position+0x640>
	}
	else if (Motor[temp->MotorNumber].TargetPosition > Motor[temp->MotorNumber].StepPosition ){
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004772:	4619      	mov	r1, r3
 8004774:	4a11      	ldr	r2, [pc, #68]	; (80047bc <MotorMove_position+0x350>)
 8004776:	460b      	mov	r3, r1
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	440b      	add	r3, r1
 800477c:	015b      	lsls	r3, r3, #5
 800477e:	4413      	add	r3, r2
 8004780:	332c      	adds	r3, #44	; 0x2c
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 3020 	ldrb.w	r3, [r3, #32]
 800478a:	4618      	mov	r0, r3
 800478c:	490b      	ldr	r1, [pc, #44]	; (80047bc <MotorMove_position+0x350>)
 800478e:	4603      	mov	r3, r0
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	4403      	add	r3, r0
 8004794:	015b      	lsls	r3, r3, #5
 8004796:	440b      	add	r3, r1
 8004798:	3328      	adds	r3, #40	; 0x28
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	429a      	cmp	r2, r3
 800479e:	dd17      	ble.n	80047d0 <MotorMove_position+0x364>
		Motor[temp->MotorNumber].MotorDirection = 1 ;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047a6:	4619      	mov	r1, r3
 80047a8:	4a04      	ldr	r2, [pc, #16]	; (80047bc <MotorMove_position+0x350>)
 80047aa:	460b      	mov	r3, r1
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	440b      	add	r3, r1
 80047b0:	015b      	lsls	r3, r3, #5
 80047b2:	4413      	add	r3, r2
 80047b4:	3321      	adds	r3, #33	; 0x21
 80047b6:	2201      	movs	r2, #1
 80047b8:	701a      	strb	r2, [r3, #0]
 80047ba:	e016      	b.n	80047ea <MotorMove_position+0x37e>
 80047bc:	200008a8 	.word	0x200008a8
 80047c0:	08011fb0 	.word	0x08011fb0
 80047c4:	43b40000 	.word	0x43b40000
 80047c8:	000186a0 	.word	0x000186a0
 80047cc:	08011fe0 	.word	0x08011fe0
	}
	else{
		Motor[temp->MotorNumber].MotorDirection = 0 ;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047d6:	4619      	mov	r1, r3
 80047d8:	4ab6      	ldr	r2, [pc, #728]	; (8004ab4 <MotorMove_position+0x648>)
 80047da:	460b      	mov	r3, r1
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	440b      	add	r3, r1
 80047e0:	015b      	lsls	r3, r3, #5
 80047e2:	4413      	add	r3, r2
 80047e4:	3321      	adds	r3, #33	; 0x21
 80047e6:	2200      	movs	r2, #0
 80047e8:	701a      	strb	r2, [r3, #0]
	}

	Motor_AccelDecel_waveCalculate(&Motor[temp->MotorNumber]);  // 计算电机加减速曲线
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047f0:	461a      	mov	r2, r3
 80047f2:	4613      	mov	r3, r2
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	4413      	add	r3, r2
 80047f8:	015b      	lsls	r3, r3, #5
 80047fa:	4aae      	ldr	r2, [pc, #696]	; (8004ab4 <MotorMove_position+0x648>)
 80047fc:	4413      	add	r3, r2
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff fb4c 	bl	8003e9c <Motor_AccelDecel_waveCalculate>

	if (Motor[temp->MotorNumber].MotorNumber == 1)   // Motor1为传送带形式步进电机，非丝杆直线电机，方向控制和直线电机不一样
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 3020 	ldrb.w	r3, [r3, #32]
 800480a:	4619      	mov	r1, r3
 800480c:	4aa9      	ldr	r2, [pc, #676]	; (8004ab4 <MotorMove_position+0x648>)
 800480e:	460b      	mov	r3, r1
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	440b      	add	r3, r1
 8004814:	015b      	lsls	r3, r3, #5
 8004816:	4413      	add	r3, r2
 8004818:	3320      	adds	r3, #32
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b01      	cmp	r3, #1
 800481e:	f040 8101 	bne.w	8004a24 <MotorMove_position+0x5b8>
	{
		Motor[temp->MotorNumber].NumberofSteps = Motor[temp->MotorNumber].NumberofSteps % Motor[temp->MotorNumber].StepsInOneCircle ;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004828:	4619      	mov	r1, r3
 800482a:	4aa2      	ldr	r2, [pc, #648]	; (8004ab4 <MotorMove_position+0x648>)
 800482c:	460b      	mov	r3, r1
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	440b      	add	r3, r1
 8004832:	015b      	lsls	r3, r3, #5
 8004834:	4413      	add	r3, r2
 8004836:	334c      	adds	r3, #76	; 0x4c
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004840:	4618      	mov	r0, r3
 8004842:	499c      	ldr	r1, [pc, #624]	; (8004ab4 <MotorMove_position+0x648>)
 8004844:	4603      	mov	r3, r0
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	4403      	add	r3, r0
 800484a:	015b      	lsls	r3, r3, #5
 800484c:	440b      	add	r3, r1
 800484e:	3338      	adds	r3, #56	; 0x38
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	f891 1020 	ldrb.w	r1, [r1, #32]
 8004858:	4608      	mov	r0, r1
 800485a:	fbb2 f1f3 	udiv	r1, r2, r3
 800485e:	fb01 f303 	mul.w	r3, r1, r3
 8004862:	1ad2      	subs	r2, r2, r3
 8004864:	4993      	ldr	r1, [pc, #588]	; (8004ab4 <MotorMove_position+0x648>)
 8004866:	4603      	mov	r3, r0
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	4403      	add	r3, r0
 800486c:	015b      	lsls	r3, r3, #5
 800486e:	440b      	add	r3, r1
 8004870:	334c      	adds	r3, #76	; 0x4c
 8004872:	601a      	str	r2, [r3, #0]
		Motor[temp->MotorNumber].TargetPosition = Motor[temp->MotorNumber].TargetPosition % Motor[temp->MotorNumber].StepsInOneCircle ;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 3020 	ldrb.w	r3, [r3, #32]
 800487a:	4619      	mov	r1, r3
 800487c:	4a8d      	ldr	r2, [pc, #564]	; (8004ab4 <MotorMove_position+0x648>)
 800487e:	460b      	mov	r3, r1
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	440b      	add	r3, r1
 8004884:	015b      	lsls	r3, r3, #5
 8004886:	4413      	add	r3, r2
 8004888:	332c      	adds	r3, #44	; 0x2c
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	461a      	mov	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004894:	4618      	mov	r0, r3
 8004896:	4987      	ldr	r1, [pc, #540]	; (8004ab4 <MotorMove_position+0x648>)
 8004898:	4603      	mov	r3, r0
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	4403      	add	r3, r0
 800489e:	015b      	lsls	r3, r3, #5
 80048a0:	440b      	add	r3, r1
 80048a2:	3338      	adds	r3, #56	; 0x38
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	fbb2 f1f3 	udiv	r1, r2, r3
 80048aa:	fb01 f303 	mul.w	r3, r1, r3
 80048ae:	1ad2      	subs	r2, r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048b6:	4619      	mov	r1, r3
 80048b8:	4610      	mov	r0, r2
 80048ba:	4a7e      	ldr	r2, [pc, #504]	; (8004ab4 <MotorMove_position+0x648>)
 80048bc:	460b      	mov	r3, r1
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	440b      	add	r3, r1
 80048c2:	015b      	lsls	r3, r3, #5
 80048c4:	4413      	add	r3, r2
 80048c6:	332c      	adds	r3, #44	; 0x2c
 80048c8:	6018      	str	r0, [r3, #0]
		if( Motor[temp->MotorNumber].NumberofSteps <= (Motor[temp->MotorNumber].StepsInOneCircle/2) ){  //如果计算出的步数小于半圈，则按照既定计算方向及进行
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048d0:	4619      	mov	r1, r3
 80048d2:	4a78      	ldr	r2, [pc, #480]	; (8004ab4 <MotorMove_position+0x648>)
 80048d4:	460b      	mov	r3, r1
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	440b      	add	r3, r1
 80048da:	015b      	lsls	r3, r3, #5
 80048dc:	4413      	add	r3, r2
 80048de:	334c      	adds	r3, #76	; 0x4c
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048e8:	4618      	mov	r0, r3
 80048ea:	4972      	ldr	r1, [pc, #456]	; (8004ab4 <MotorMove_position+0x648>)
 80048ec:	4603      	mov	r3, r0
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	4403      	add	r3, r0
 80048f2:	015b      	lsls	r3, r3, #5
 80048f4:	440b      	add	r3, r1
 80048f6:	3338      	adds	r3, #56	; 0x38
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	085b      	lsrs	r3, r3, #1
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d826      	bhi.n	800494e <MotorMove_position+0x4e2>
			Motor_AccelDecel_waveCalculate(&Motor[temp->MotorNumber]);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004906:	461a      	mov	r2, r3
 8004908:	4613      	mov	r3, r2
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	4413      	add	r3, r2
 800490e:	015b      	lsls	r3, r3, #5
 8004910:	4a68      	ldr	r2, [pc, #416]	; (8004ab4 <MotorMove_position+0x648>)
 8004912:	4413      	add	r3, r2
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff fac1 	bl	8003e9c <Motor_AccelDecel_waveCalculate>
			if(Motor[temp->MotorNumber].MotorDirection == 1){
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004920:	4619      	mov	r1, r3
 8004922:	4a64      	ldr	r2, [pc, #400]	; (8004ab4 <MotorMove_position+0x648>)
 8004924:	460b      	mov	r3, r1
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	440b      	add	r3, r1
 800492a:	015b      	lsls	r3, r3, #5
 800492c:	4413      	add	r3, r2
 800492e:	3321      	adds	r3, #33	; 0x21
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d105      	bne.n	8004942 <MotorMove_position+0x4d6>
				Motor1_Nreset_direction;
 8004936:	2200      	movs	r2, #0
 8004938:	2120      	movs	r1, #32
 800493a:	485f      	ldr	r0, [pc, #380]	; (8004ab8 <MotorMove_position+0x64c>)
 800493c:	f003 fbc8 	bl	80080d0 <HAL_GPIO_WritePin>
 8004940:	e07d      	b.n	8004a3e <MotorMove_position+0x5d2>
			}
			else{
				Motor1_reset_direction;
 8004942:	2201      	movs	r2, #1
 8004944:	2120      	movs	r1, #32
 8004946:	485c      	ldr	r0, [pc, #368]	; (8004ab8 <MotorMove_position+0x64c>)
 8004948:	f003 fbc2 	bl	80080d0 <HAL_GPIO_WritePin>
 800494c:	e077      	b.n	8004a3e <MotorMove_position+0x5d2>
			}
		}
		else{
			Motor[temp->MotorNumber].NumberofSteps = abs (Motor[temp->MotorNumber].StepsInOneCircle - Motor[temp->MotorNumber].NumberofSteps);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004954:	4619      	mov	r1, r3
 8004956:	4a57      	ldr	r2, [pc, #348]	; (8004ab4 <MotorMove_position+0x648>)
 8004958:	460b      	mov	r3, r1
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	440b      	add	r3, r1
 800495e:	015b      	lsls	r3, r3, #5
 8004960:	4413      	add	r3, r2
 8004962:	3338      	adds	r3, #56	; 0x38
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 3020 	ldrb.w	r3, [r3, #32]
 800496c:	4618      	mov	r0, r3
 800496e:	4951      	ldr	r1, [pc, #324]	; (8004ab4 <MotorMove_position+0x648>)
 8004970:	4603      	mov	r3, r0
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	4403      	add	r3, r0
 8004976:	015b      	lsls	r3, r3, #5
 8004978:	440b      	add	r3, r1
 800497a:	334c      	adds	r3, #76	; 0x4c
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004984:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800498e:	4619      	mov	r1, r3
 8004990:	4610      	mov	r0, r2
 8004992:	4a48      	ldr	r2, [pc, #288]	; (8004ab4 <MotorMove_position+0x648>)
 8004994:	460b      	mov	r3, r1
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	440b      	add	r3, r1
 800499a:	015b      	lsls	r3, r3, #5
 800499c:	4413      	add	r3, r2
 800499e:	334c      	adds	r3, #76	; 0x4c
 80049a0:	6018      	str	r0, [r3, #0]
			Motor_AccelDecel_waveCalculate(&Motor[temp->MotorNumber]);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049a8:	461a      	mov	r2, r3
 80049aa:	4613      	mov	r3, r2
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	4413      	add	r3, r2
 80049b0:	015b      	lsls	r3, r3, #5
 80049b2:	4a40      	ldr	r2, [pc, #256]	; (8004ab4 <MotorMove_position+0x648>)
 80049b4:	4413      	add	r3, r2
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7ff fa70 	bl	8003e9c <Motor_AccelDecel_waveCalculate>
			if(Motor[temp->MotorNumber].MotorDirection == 1){
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049c2:	4619      	mov	r1, r3
 80049c4:	4a3b      	ldr	r2, [pc, #236]	; (8004ab4 <MotorMove_position+0x648>)
 80049c6:	460b      	mov	r3, r1
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	440b      	add	r3, r1
 80049cc:	015b      	lsls	r3, r3, #5
 80049ce:	4413      	add	r3, r2
 80049d0:	3321      	adds	r3, #33	; 0x21
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d112      	bne.n	80049fe <MotorMove_position+0x592>
				Motor[temp->MotorNumber].MotorDirection = 0;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049de:	4619      	mov	r1, r3
 80049e0:	4a34      	ldr	r2, [pc, #208]	; (8004ab4 <MotorMove_position+0x648>)
 80049e2:	460b      	mov	r3, r1
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	440b      	add	r3, r1
 80049e8:	015b      	lsls	r3, r3, #5
 80049ea:	4413      	add	r3, r2
 80049ec:	3321      	adds	r3, #33	; 0x21
 80049ee:	2200      	movs	r2, #0
 80049f0:	701a      	strb	r2, [r3, #0]
				Motor1_reset_direction;
 80049f2:	2201      	movs	r2, #1
 80049f4:	2120      	movs	r1, #32
 80049f6:	4830      	ldr	r0, [pc, #192]	; (8004ab8 <MotorMove_position+0x64c>)
 80049f8:	f003 fb6a 	bl	80080d0 <HAL_GPIO_WritePin>
 80049fc:	e01f      	b.n	8004a3e <MotorMove_position+0x5d2>
			}
			else{
				Motor[temp->MotorNumber].MotorDirection = 1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a04:	4619      	mov	r1, r3
 8004a06:	4a2b      	ldr	r2, [pc, #172]	; (8004ab4 <MotorMove_position+0x648>)
 8004a08:	460b      	mov	r3, r1
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	440b      	add	r3, r1
 8004a0e:	015b      	lsls	r3, r3, #5
 8004a10:	4413      	add	r3, r2
 8004a12:	3321      	adds	r3, #33	; 0x21
 8004a14:	2201      	movs	r2, #1
 8004a16:	701a      	strb	r2, [r3, #0]
				Motor1_Nreset_direction;
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2120      	movs	r1, #32
 8004a1c:	4826      	ldr	r0, [pc, #152]	; (8004ab8 <MotorMove_position+0x64c>)
 8004a1e:	f003 fb57 	bl	80080d0 <HAL_GPIO_WritePin>
 8004a22:	e00c      	b.n	8004a3e <MotorMove_position+0x5d2>
			}
		}
	}
	else{
		MotorDirection_SetUp(&Motor[temp->MotorNumber]) ;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	4413      	add	r3, r2
 8004a32:	015b      	lsls	r3, r3, #5
 8004a34:	4a1f      	ldr	r2, [pc, #124]	; (8004ab4 <MotorMove_position+0x648>)
 8004a36:	4413      	add	r3, r2
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7ff fae7 	bl	800400c <MotorDirection_SetUp>
	}
	//位置控制情况下，允许总步数多走10步，如果仍没有到达目标位置，则判定超时失败
	Motor[temp->MotorNumber].NumberofSteps = Motor[temp->MotorNumber].NumberofSteps + 5*Motor[temp->MotorNumber].mircro_steps;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a44:	4619      	mov	r1, r3
 8004a46:	4a1b      	ldr	r2, [pc, #108]	; (8004ab4 <MotorMove_position+0x648>)
 8004a48:	460b      	mov	r3, r1
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	440b      	add	r3, r1
 8004a4e:	015b      	lsls	r3, r3, #5
 8004a50:	4413      	add	r3, r2
 8004a52:	334c      	adds	r3, #76	; 0x4c
 8004a54:	6819      	ldr	r1, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	4a15      	ldr	r2, [pc, #84]	; (8004ab4 <MotorMove_position+0x648>)
 8004a60:	4603      	mov	r3, r0
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	4403      	add	r3, r0
 8004a66:	015b      	lsls	r3, r3, #5
 8004a68:	4413      	add	r3, r2
 8004a6a:	3308      	adds	r3, #8
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004a7a:	4610      	mov	r0, r2
 8004a7c:	18ca      	adds	r2, r1, r3
 8004a7e:	490d      	ldr	r1, [pc, #52]	; (8004ab4 <MotorMove_position+0x648>)
 8004a80:	4603      	mov	r3, r0
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	4403      	add	r3, r0
 8004a86:	015b      	lsls	r3, r3, #5
 8004a88:	440b      	add	r3, r1
 8004a8a:	334c      	adds	r3, #76	; 0x4c
 8004a8c:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(Motor[temp->MotorNumber].htim_x);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a94:	4619      	mov	r1, r3
 8004a96:	4a07      	ldr	r2, [pc, #28]	; (8004ab4 <MotorMove_position+0x648>)
 8004a98:	460b      	mov	r3, r1
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	440b      	add	r3, r1
 8004a9e:	015b      	lsls	r3, r3, #5
 8004aa0:	4413      	add	r3, r2
 8004aa2:	3334      	adds	r3, #52	; 0x34
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f005 fe98 	bl	800a7dc <HAL_TIM_Base_Start_IT>
}
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	200008a8 	.word	0x200008a8
 8004ab8:	40020400 	.word	0x40020400

08004abc <MotorMove_position_lowspeed>:

void MotorMove_position_lowspeed(struct MotorDefine *temp  , int32_t targer_position)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
	if (Motor[temp->MotorNumber].Status == 1){
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004acc:	4619      	mov	r1, r3
 8004ace:	4ab8      	ldr	r2, [pc, #736]	; (8004db0 <MotorMove_position_lowspeed+0x2f4>)
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	440b      	add	r3, r1
 8004ad6:	015b      	lsls	r3, r3, #5
 8004ad8:	4413      	add	r3, r2
 8004ada:	3330      	adds	r3, #48	; 0x30
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d110      	bne.n	8004b04 <MotorMove_position_lowspeed+0x48>
		printf("[WRONG] Position Set Failed,Motor%d is busy!\r\n",Motor[temp->MotorNumber].MotorNumber);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4ab1      	ldr	r2, [pc, #708]	; (8004db0 <MotorMove_position_lowspeed+0x2f4>)
 8004aec:	460b      	mov	r3, r1
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	440b      	add	r3, r1
 8004af2:	015b      	lsls	r3, r3, #5
 8004af4:	4413      	add	r3, r2
 8004af6:	3320      	adds	r3, #32
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	4619      	mov	r1, r3
 8004afc:	48ad      	ldr	r0, [pc, #692]	; (8004db4 <MotorMove_position_lowspeed+0x2f8>)
 8004afe:	f00b f825 	bl	800fb4c <iprintf>
		return ;
 8004b02:	e2bd      	b.n	8005080 <MotorMove_position_lowspeed+0x5c4>
	}
	else {
		Motor[temp->MotorNumber].Status = 1 ;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4aa8      	ldr	r2, [pc, #672]	; (8004db0 <MotorMove_position_lowspeed+0x2f4>)
 8004b0e:	460b      	mov	r3, r1
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	440b      	add	r3, r1
 8004b14:	015b      	lsls	r3, r3, #5
 8004b16:	4413      	add	r3, r2
 8004b18:	3330      	adds	r3, #48	; 0x30
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	701a      	strb	r2, [r3, #0]
	}

	Motor[temp->MotorNumber].StepsInOneCircle = (360 / Motor[temp->MotorNumber].step_angle) * Motor[temp->MotorNumber].deceleration_ratio * Motor[temp->MotorNumber].mircro_steps;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b24:	4619      	mov	r1, r3
 8004b26:	4aa2      	ldr	r2, [pc, #648]	; (8004db0 <MotorMove_position_lowspeed+0x2f4>)
 8004b28:	460b      	mov	r3, r1
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	440b      	add	r3, r1
 8004b2e:	015b      	lsls	r3, r3, #5
 8004b30:	4413      	add	r3, r2
 8004b32:	3304      	adds	r3, #4
 8004b34:	edd3 7a00 	vldr	s15, [r3]
 8004b38:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8004db8 <MotorMove_position_lowspeed+0x2fc>
 8004b3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b46:	4619      	mov	r1, r3
 8004b48:	4a99      	ldr	r2, [pc, #612]	; (8004db0 <MotorMove_position_lowspeed+0x2f4>)
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	440b      	add	r3, r1
 8004b50:	015b      	lsls	r3, r3, #5
 8004b52:	4413      	add	r3, r2
 8004b54:	edd3 7a00 	vldr	s15, [r3]
 8004b58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b62:	4619      	mov	r1, r3
 8004b64:	4a92      	ldr	r2, [pc, #584]	; (8004db0 <MotorMove_position_lowspeed+0x2f4>)
 8004b66:	460b      	mov	r3, r1
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	440b      	add	r3, r1
 8004b6c:	015b      	lsls	r3, r3, #5
 8004b6e:	4413      	add	r3, r2
 8004b70:	3308      	adds	r3, #8
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	ee07 3a90 	vmov	s15, r3
 8004b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b86:	4619      	mov	r1, r3
 8004b88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b8c:	ee17 0a90 	vmov	r0, s15
 8004b90:	4a87      	ldr	r2, [pc, #540]	; (8004db0 <MotorMove_position_lowspeed+0x2f4>)
 8004b92:	460b      	mov	r3, r1
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	440b      	add	r3, r1
 8004b98:	015b      	lsls	r3, r3, #5
 8004b9a:	4413      	add	r3, r2
 8004b9c:	3338      	adds	r3, #56	; 0x38
 8004b9e:	6018      	str	r0, [r3, #0]
	Motor[temp->MotorNumber].StartupSpeedInHz = Motor[temp->MotorNumber].StepsInOneCircle * Motor[temp->MotorNumber].StartupSpeedInRads ;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	4a81      	ldr	r2, [pc, #516]	; (8004db0 <MotorMove_position_lowspeed+0x2f4>)
 8004baa:	460b      	mov	r3, r1
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	440b      	add	r3, r1
 8004bb0:	015b      	lsls	r3, r3, #5
 8004bb2:	4413      	add	r3, r2
 8004bb4:	3338      	adds	r3, #56	; 0x38
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	ee07 3a90 	vmov	s15, r3
 8004bbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	4a79      	ldr	r2, [pc, #484]	; (8004db0 <MotorMove_position_lowspeed+0x2f4>)
 8004bca:	460b      	mov	r3, r1
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	440b      	add	r3, r1
 8004bd0:	015b      	lsls	r3, r3, #5
 8004bd2:	4413      	add	r3, r2
 8004bd4:	3310      	adds	r3, #16
 8004bd6:	edd3 7a00 	vldr	s15, [r3]
 8004bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004be4:	4619      	mov	r1, r3
 8004be6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bea:	ee17 0a90 	vmov	r0, s15
 8004bee:	4a70      	ldr	r2, [pc, #448]	; (8004db0 <MotorMove_position_lowspeed+0x2f4>)
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	440b      	add	r3, r1
 8004bf6:	015b      	lsls	r3, r3, #5
 8004bf8:	4413      	add	r3, r2
 8004bfa:	333c      	adds	r3, #60	; 0x3c
 8004bfc:	6018      	str	r0, [r3, #0]
	Motor[temp->MotorNumber].ActualSpeedInHz = Motor[temp->MotorNumber].StartupSpeedInHz;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c04:	4619      	mov	r1, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	4a68      	ldr	r2, [pc, #416]	; (8004db0 <MotorMove_position_lowspeed+0x2f4>)
 8004c10:	460b      	mov	r3, r1
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	440b      	add	r3, r1
 8004c16:	015b      	lsls	r3, r3, #5
 8004c18:	4413      	add	r3, r2
 8004c1a:	333c      	adds	r3, #60	; 0x3c
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	4964      	ldr	r1, [pc, #400]	; (8004db0 <MotorMove_position_lowspeed+0x2f4>)
 8004c20:	4603      	mov	r3, r0
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	4403      	add	r3, r0
 8004c26:	015b      	lsls	r3, r3, #5
 8004c28:	440b      	add	r3, r1
 8004c2a:	3340      	adds	r3, #64	; 0x40
 8004c2c:	601a      	str	r2, [r3, #0]
	//Motor[temp->MotorNumber].DesiredSpeedInHz = Motor[temp->MotorNumber].StepsInOneCircle * Motor[temp->MotorNumber].DesiredSpeedInRads ;
	Motor[temp->MotorNumber].StepperSpeedTMR = MOTORTIM_TMR / Motor[temp->MotorNumber].ActualSpeedInHz;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c34:	4619      	mov	r1, r3
 8004c36:	4a5e      	ldr	r2, [pc, #376]	; (8004db0 <MotorMove_position_lowspeed+0x2f4>)
 8004c38:	460b      	mov	r3, r1
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	440b      	add	r3, r1
 8004c3e:	015b      	lsls	r3, r3, #5
 8004c40:	4413      	add	r3, r2
 8004c42:	3340      	adds	r3, #64	; 0x40
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	4a5b      	ldr	r2, [pc, #364]	; (8004dbc <MotorMove_position_lowspeed+0x300>)
 8004c50:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c54:	4956      	ldr	r1, [pc, #344]	; (8004db0 <MotorMove_position_lowspeed+0x2f4>)
 8004c56:	4603      	mov	r3, r0
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	4403      	add	r3, r0
 8004c5c:	015b      	lsls	r3, r3, #5
 8004c5e:	440b      	add	r3, r1
 8004c60:	3348      	adds	r3, #72	; 0x48
 8004c62:	601a      	str	r2, [r3, #0]

	Motor[temp->MotorNumber].TargetPosition = targer_position ;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4a50      	ldr	r2, [pc, #320]	; (8004db0 <MotorMove_position_lowspeed+0x2f4>)
 8004c6e:	460b      	mov	r3, r1
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	440b      	add	r3, r1
 8004c74:	015b      	lsls	r3, r3, #5
 8004c76:	4413      	add	r3, r2
 8004c78:	332c      	adds	r3, #44	; 0x2c
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].NumberofSteps = abs(Motor[temp->MotorNumber].TargetPosition  -  Motor[temp->MotorNumber].StepPosition) ;//计算总步数
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c84:	4619      	mov	r1, r3
 8004c86:	4a4a      	ldr	r2, [pc, #296]	; (8004db0 <MotorMove_position_lowspeed+0x2f4>)
 8004c88:	460b      	mov	r3, r1
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	440b      	add	r3, r1
 8004c8e:	015b      	lsls	r3, r3, #5
 8004c90:	4413      	add	r3, r2
 8004c92:	332c      	adds	r3, #44	; 0x2c
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	4944      	ldr	r1, [pc, #272]	; (8004db0 <MotorMove_position_lowspeed+0x2f4>)
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	4403      	add	r3, r0
 8004ca6:	015b      	lsls	r3, r3, #5
 8004ca8:	440b      	add	r3, r1
 8004caa:	3328      	adds	r3, #40	; 0x28
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004cb4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	4a3b      	ldr	r2, [pc, #236]	; (8004db0 <MotorMove_position_lowspeed+0x2f4>)
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	440b      	add	r3, r1
 8004cca:	015b      	lsls	r3, r3, #5
 8004ccc:	4413      	add	r3, r2
 8004cce:	334c      	adds	r3, #76	; 0x4c
 8004cd0:	6018      	str	r0, [r3, #0]
	if (Motor[temp->MotorNumber].TargetPosition == Motor[temp->MotorNumber].StepPosition){
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4a35      	ldr	r2, [pc, #212]	; (8004db0 <MotorMove_position_lowspeed+0x2f4>)
 8004cdc:	460b      	mov	r3, r1
 8004cde:	005b      	lsls	r3, r3, #1
 8004ce0:	440b      	add	r3, r1
 8004ce2:	015b      	lsls	r3, r3, #5
 8004ce4:	4413      	add	r3, r2
 8004ce6:	332c      	adds	r3, #44	; 0x2c
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	492f      	ldr	r1, [pc, #188]	; (8004db0 <MotorMove_position_lowspeed+0x2f4>)
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	4403      	add	r3, r0
 8004cfa:	015b      	lsls	r3, r3, #5
 8004cfc:	440b      	add	r3, r1
 8004cfe:	3328      	adds	r3, #40	; 0x28
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d12b      	bne.n	8004d5e <MotorMove_position_lowspeed+0x2a2>
		Motor[temp->MotorNumber].Status = 0 ;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4a28      	ldr	r2, [pc, #160]	; (8004db0 <MotorMove_position_lowspeed+0x2f4>)
 8004d10:	460b      	mov	r3, r1
 8004d12:	005b      	lsls	r3, r3, #1
 8004d14:	440b      	add	r3, r1
 8004d16:	015b      	lsls	r3, r3, #5
 8004d18:	4413      	add	r3, r2
 8004d1a:	3330      	adds	r3, #48	; 0x30
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	701a      	strb	r2, [r3, #0]
		printf("---KEEP---Motor%d Steps Position:%ld---\r\n",Motor[temp->MotorNumber].MotorNumber,Motor[temp->MotorNumber].StepPosition);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d26:	4619      	mov	r1, r3
 8004d28:	4a21      	ldr	r2, [pc, #132]	; (8004db0 <MotorMove_position_lowspeed+0x2f4>)
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	440b      	add	r3, r1
 8004d30:	015b      	lsls	r3, r3, #5
 8004d32:	4413      	add	r3, r2
 8004d34:	3320      	adds	r3, #32
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d40:	4619      	mov	r1, r3
 8004d42:	4a1b      	ldr	r2, [pc, #108]	; (8004db0 <MotorMove_position_lowspeed+0x2f4>)
 8004d44:	460b      	mov	r3, r1
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	440b      	add	r3, r1
 8004d4a:	015b      	lsls	r3, r3, #5
 8004d4c:	4413      	add	r3, r2
 8004d4e:	3328      	adds	r3, #40	; 0x28
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	461a      	mov	r2, r3
 8004d54:	4601      	mov	r1, r0
 8004d56:	481a      	ldr	r0, [pc, #104]	; (8004dc0 <MotorMove_position_lowspeed+0x304>)
 8004d58:	f00a fef8 	bl	800fb4c <iprintf>
		return ;
 8004d5c:	e190      	b.n	8005080 <MotorMove_position_lowspeed+0x5c4>
	}
	else if (Motor[temp->MotorNumber].TargetPosition > Motor[temp->MotorNumber].StepPosition ){
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d64:	4619      	mov	r1, r3
 8004d66:	4a12      	ldr	r2, [pc, #72]	; (8004db0 <MotorMove_position_lowspeed+0x2f4>)
 8004d68:	460b      	mov	r3, r1
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	440b      	add	r3, r1
 8004d6e:	015b      	lsls	r3, r3, #5
 8004d70:	4413      	add	r3, r2
 8004d72:	332c      	adds	r3, #44	; 0x2c
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	490c      	ldr	r1, [pc, #48]	; (8004db0 <MotorMove_position_lowspeed+0x2f4>)
 8004d80:	4603      	mov	r3, r0
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	4403      	add	r3, r0
 8004d86:	015b      	lsls	r3, r3, #5
 8004d88:	440b      	add	r3, r1
 8004d8a:	3328      	adds	r3, #40	; 0x28
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	dd18      	ble.n	8004dc4 <MotorMove_position_lowspeed+0x308>
		Motor[temp->MotorNumber].MotorDirection = 1 ;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d98:	4619      	mov	r1, r3
 8004d9a:	4a05      	ldr	r2, [pc, #20]	; (8004db0 <MotorMove_position_lowspeed+0x2f4>)
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	440b      	add	r3, r1
 8004da2:	015b      	lsls	r3, r3, #5
 8004da4:	4413      	add	r3, r2
 8004da6:	3321      	adds	r3, #33	; 0x21
 8004da8:	2201      	movs	r2, #1
 8004daa:	701a      	strb	r2, [r3, #0]
 8004dac:	e017      	b.n	8004dde <MotorMove_position_lowspeed+0x322>
 8004dae:	bf00      	nop
 8004db0:	200008a8 	.word	0x200008a8
 8004db4:	08011fb0 	.word	0x08011fb0
 8004db8:	43b40000 	.word	0x43b40000
 8004dbc:	000186a0 	.word	0x000186a0
 8004dc0:	08011fe0 	.word	0x08011fe0
	}
	else{
		Motor[temp->MotorNumber].MotorDirection = 0 ;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dca:	4619      	mov	r1, r3
 8004dcc:	4aae      	ldr	r2, [pc, #696]	; (8005088 <MotorMove_position_lowspeed+0x5cc>)
 8004dce:	460b      	mov	r3, r1
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	440b      	add	r3, r1
 8004dd4:	015b      	lsls	r3, r3, #5
 8004dd6:	4413      	add	r3, r2
 8004dd8:	3321      	adds	r3, #33	; 0x21
 8004dda:	2200      	movs	r2, #0
 8004ddc:	701a      	strb	r2, [r3, #0]
	}

	//Motor_AccelDecel_waveCalculate(&Motor[temp->MotorNumber]);  // 计算电机加减速曲线
	Motor[temp->MotorNumber].NumberofSteps_StopAccel = Motor[temp->MotorNumber].NumberofSteps;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004de4:	4619      	mov	r1, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dec:	4618      	mov	r0, r3
 8004dee:	4aa6      	ldr	r2, [pc, #664]	; (8005088 <MotorMove_position_lowspeed+0x5cc>)
 8004df0:	460b      	mov	r3, r1
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	440b      	add	r3, r1
 8004df6:	015b      	lsls	r3, r3, #5
 8004df8:	4413      	add	r3, r2
 8004dfa:	334c      	adds	r3, #76	; 0x4c
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	49a2      	ldr	r1, [pc, #648]	; (8005088 <MotorMove_position_lowspeed+0x5cc>)
 8004e00:	4603      	mov	r3, r0
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	4403      	add	r3, r0
 8004e06:	015b      	lsls	r3, r3, #5
 8004e08:	440b      	add	r3, r1
 8004e0a:	3350      	adds	r3, #80	; 0x50
 8004e0c:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].NumberofSteps_BeginDecel = 0;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e14:	4619      	mov	r1, r3
 8004e16:	4a9c      	ldr	r2, [pc, #624]	; (8005088 <MotorMove_position_lowspeed+0x5cc>)
 8004e18:	460b      	mov	r3, r1
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	440b      	add	r3, r1
 8004e1e:	015b      	lsls	r3, r3, #5
 8004e20:	4413      	add	r3, r2
 8004e22:	3354      	adds	r3, #84	; 0x54
 8004e24:	2200      	movs	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]

	if (Motor[temp->MotorNumber].MotorNumber == 1)   // Motor1为传送带形式步进电机，非丝杆直线电机，方向控制和直线电机不一样
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4a95      	ldr	r2, [pc, #596]	; (8005088 <MotorMove_position_lowspeed+0x5cc>)
 8004e32:	460b      	mov	r3, r1
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	440b      	add	r3, r1
 8004e38:	015b      	lsls	r3, r3, #5
 8004e3a:	4413      	add	r3, r2
 8004e3c:	3320      	adds	r3, #32
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	f040 8101 	bne.w	8005048 <MotorMove_position_lowspeed+0x58c>
	{
		Motor[temp->MotorNumber].NumberofSteps = Motor[temp->MotorNumber].NumberofSteps % Motor[temp->MotorNumber].StepsInOneCircle ;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4a8e      	ldr	r2, [pc, #568]	; (8005088 <MotorMove_position_lowspeed+0x5cc>)
 8004e50:	460b      	mov	r3, r1
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	440b      	add	r3, r1
 8004e56:	015b      	lsls	r3, r3, #5
 8004e58:	4413      	add	r3, r2
 8004e5a:	334c      	adds	r3, #76	; 0x4c
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e64:	4618      	mov	r0, r3
 8004e66:	4988      	ldr	r1, [pc, #544]	; (8005088 <MotorMove_position_lowspeed+0x5cc>)
 8004e68:	4603      	mov	r3, r0
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	4403      	add	r3, r0
 8004e6e:	015b      	lsls	r3, r3, #5
 8004e70:	440b      	add	r3, r1
 8004e72:	3338      	adds	r3, #56	; 0x38
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6879      	ldr	r1, [r7, #4]
 8004e78:	f891 1020 	ldrb.w	r1, [r1, #32]
 8004e7c:	4608      	mov	r0, r1
 8004e7e:	fbb2 f1f3 	udiv	r1, r2, r3
 8004e82:	fb01 f303 	mul.w	r3, r1, r3
 8004e86:	1ad2      	subs	r2, r2, r3
 8004e88:	497f      	ldr	r1, [pc, #508]	; (8005088 <MotorMove_position_lowspeed+0x5cc>)
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	4403      	add	r3, r0
 8004e90:	015b      	lsls	r3, r3, #5
 8004e92:	440b      	add	r3, r1
 8004e94:	334c      	adds	r3, #76	; 0x4c
 8004e96:	601a      	str	r2, [r3, #0]
		Motor[temp->MotorNumber].TargetPosition = Motor[temp->MotorNumber].TargetPosition % Motor[temp->MotorNumber].StepsInOneCircle ;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4a79      	ldr	r2, [pc, #484]	; (8005088 <MotorMove_position_lowspeed+0x5cc>)
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	440b      	add	r3, r1
 8004ea8:	015b      	lsls	r3, r3, #5
 8004eaa:	4413      	add	r3, r2
 8004eac:	332c      	adds	r3, #44	; 0x2c
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	4973      	ldr	r1, [pc, #460]	; (8005088 <MotorMove_position_lowspeed+0x5cc>)
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	4403      	add	r3, r0
 8004ec2:	015b      	lsls	r3, r3, #5
 8004ec4:	440b      	add	r3, r1
 8004ec6:	3338      	adds	r3, #56	; 0x38
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	fbb2 f1f3 	udiv	r1, r2, r3
 8004ece:	fb01 f303 	mul.w	r3, r1, r3
 8004ed2:	1ad2      	subs	r2, r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004eda:	4619      	mov	r1, r3
 8004edc:	4610      	mov	r0, r2
 8004ede:	4a6a      	ldr	r2, [pc, #424]	; (8005088 <MotorMove_position_lowspeed+0x5cc>)
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	440b      	add	r3, r1
 8004ee6:	015b      	lsls	r3, r3, #5
 8004ee8:	4413      	add	r3, r2
 8004eea:	332c      	adds	r3, #44	; 0x2c
 8004eec:	6018      	str	r0, [r3, #0]
		if( Motor[temp->MotorNumber].NumberofSteps <= (Motor[temp->MotorNumber].StepsInOneCircle/2) ){  //如果计算出的步数小于半圈，则按照既定计算方向及进行
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	4a64      	ldr	r2, [pc, #400]	; (8005088 <MotorMove_position_lowspeed+0x5cc>)
 8004ef8:	460b      	mov	r3, r1
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	440b      	add	r3, r1
 8004efe:	015b      	lsls	r3, r3, #5
 8004f00:	4413      	add	r3, r2
 8004f02:	334c      	adds	r3, #76	; 0x4c
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	495e      	ldr	r1, [pc, #376]	; (8005088 <MotorMove_position_lowspeed+0x5cc>)
 8004f10:	4603      	mov	r3, r0
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	4403      	add	r3, r0
 8004f16:	015b      	lsls	r3, r3, #5
 8004f18:	440b      	add	r3, r1
 8004f1a:	3338      	adds	r3, #56	; 0x38
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	085b      	lsrs	r3, r3, #1
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d826      	bhi.n	8004f72 <MotorMove_position_lowspeed+0x4b6>
			Motor_AccelDecel_waveCalculate(&Motor[temp->MotorNumber]);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	4413      	add	r3, r2
 8004f32:	015b      	lsls	r3, r3, #5
 8004f34:	4a54      	ldr	r2, [pc, #336]	; (8005088 <MotorMove_position_lowspeed+0x5cc>)
 8004f36:	4413      	add	r3, r2
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7fe ffaf 	bl	8003e9c <Motor_AccelDecel_waveCalculate>
			if(Motor[temp->MotorNumber].MotorDirection == 1){
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f44:	4619      	mov	r1, r3
 8004f46:	4a50      	ldr	r2, [pc, #320]	; (8005088 <MotorMove_position_lowspeed+0x5cc>)
 8004f48:	460b      	mov	r3, r1
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	440b      	add	r3, r1
 8004f4e:	015b      	lsls	r3, r3, #5
 8004f50:	4413      	add	r3, r2
 8004f52:	3321      	adds	r3, #33	; 0x21
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d105      	bne.n	8004f66 <MotorMove_position_lowspeed+0x4aa>
				Motor1_Nreset_direction;
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	2120      	movs	r1, #32
 8004f5e:	484b      	ldr	r0, [pc, #300]	; (800508c <MotorMove_position_lowspeed+0x5d0>)
 8004f60:	f003 f8b6 	bl	80080d0 <HAL_GPIO_WritePin>
 8004f64:	e07d      	b.n	8005062 <MotorMove_position_lowspeed+0x5a6>
			}
			else{
				Motor1_reset_direction;
 8004f66:	2201      	movs	r2, #1
 8004f68:	2120      	movs	r1, #32
 8004f6a:	4848      	ldr	r0, [pc, #288]	; (800508c <MotorMove_position_lowspeed+0x5d0>)
 8004f6c:	f003 f8b0 	bl	80080d0 <HAL_GPIO_WritePin>
 8004f70:	e077      	b.n	8005062 <MotorMove_position_lowspeed+0x5a6>
			}
		}
		else{
			Motor[temp->MotorNumber].NumberofSteps = abs (Motor[temp->MotorNumber].StepsInOneCircle - Motor[temp->MotorNumber].NumberofSteps);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4a43      	ldr	r2, [pc, #268]	; (8005088 <MotorMove_position_lowspeed+0x5cc>)
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	440b      	add	r3, r1
 8004f82:	015b      	lsls	r3, r3, #5
 8004f84:	4413      	add	r3, r2
 8004f86:	3338      	adds	r3, #56	; 0x38
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f90:	4618      	mov	r0, r3
 8004f92:	493d      	ldr	r1, [pc, #244]	; (8005088 <MotorMove_position_lowspeed+0x5cc>)
 8004f94:	4603      	mov	r3, r0
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	4403      	add	r3, r0
 8004f9a:	015b      	lsls	r3, r3, #5
 8004f9c:	440b      	add	r3, r1
 8004f9e:	334c      	adds	r3, #76	; 0x4c
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004fa8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	4a34      	ldr	r2, [pc, #208]	; (8005088 <MotorMove_position_lowspeed+0x5cc>)
 8004fb8:	460b      	mov	r3, r1
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	440b      	add	r3, r1
 8004fbe:	015b      	lsls	r3, r3, #5
 8004fc0:	4413      	add	r3, r2
 8004fc2:	334c      	adds	r3, #76	; 0x4c
 8004fc4:	6018      	str	r0, [r3, #0]
			Motor_AccelDecel_waveCalculate(&Motor[temp->MotorNumber]);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fcc:	461a      	mov	r2, r3
 8004fce:	4613      	mov	r3, r2
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	4413      	add	r3, r2
 8004fd4:	015b      	lsls	r3, r3, #5
 8004fd6:	4a2c      	ldr	r2, [pc, #176]	; (8005088 <MotorMove_position_lowspeed+0x5cc>)
 8004fd8:	4413      	add	r3, r2
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fe ff5e 	bl	8003e9c <Motor_AccelDecel_waveCalculate>
			if(Motor[temp->MotorNumber].MotorDirection == 1){
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4a27      	ldr	r2, [pc, #156]	; (8005088 <MotorMove_position_lowspeed+0x5cc>)
 8004fea:	460b      	mov	r3, r1
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	440b      	add	r3, r1
 8004ff0:	015b      	lsls	r3, r3, #5
 8004ff2:	4413      	add	r3, r2
 8004ff4:	3321      	adds	r3, #33	; 0x21
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d112      	bne.n	8005022 <MotorMove_position_lowspeed+0x566>
				Motor[temp->MotorNumber].MotorDirection = 0;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005002:	4619      	mov	r1, r3
 8005004:	4a20      	ldr	r2, [pc, #128]	; (8005088 <MotorMove_position_lowspeed+0x5cc>)
 8005006:	460b      	mov	r3, r1
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	440b      	add	r3, r1
 800500c:	015b      	lsls	r3, r3, #5
 800500e:	4413      	add	r3, r2
 8005010:	3321      	adds	r3, #33	; 0x21
 8005012:	2200      	movs	r2, #0
 8005014:	701a      	strb	r2, [r3, #0]
				Motor1_reset_direction;
 8005016:	2201      	movs	r2, #1
 8005018:	2120      	movs	r1, #32
 800501a:	481c      	ldr	r0, [pc, #112]	; (800508c <MotorMove_position_lowspeed+0x5d0>)
 800501c:	f003 f858 	bl	80080d0 <HAL_GPIO_WritePin>
 8005020:	e01f      	b.n	8005062 <MotorMove_position_lowspeed+0x5a6>
			}
			else{
				Motor[temp->MotorNumber].MotorDirection = 1;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005028:	4619      	mov	r1, r3
 800502a:	4a17      	ldr	r2, [pc, #92]	; (8005088 <MotorMove_position_lowspeed+0x5cc>)
 800502c:	460b      	mov	r3, r1
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	440b      	add	r3, r1
 8005032:	015b      	lsls	r3, r3, #5
 8005034:	4413      	add	r3, r2
 8005036:	3321      	adds	r3, #33	; 0x21
 8005038:	2201      	movs	r2, #1
 800503a:	701a      	strb	r2, [r3, #0]
				Motor1_Nreset_direction;
 800503c:	2200      	movs	r2, #0
 800503e:	2120      	movs	r1, #32
 8005040:	4812      	ldr	r0, [pc, #72]	; (800508c <MotorMove_position_lowspeed+0x5d0>)
 8005042:	f003 f845 	bl	80080d0 <HAL_GPIO_WritePin>
 8005046:	e00c      	b.n	8005062 <MotorMove_position_lowspeed+0x5a6>
			}
		}
	}
	else{
		MotorDirection_SetUp(&Motor[temp->MotorNumber]) ;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800504e:	461a      	mov	r2, r3
 8005050:	4613      	mov	r3, r2
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	4413      	add	r3, r2
 8005056:	015b      	lsls	r3, r3, #5
 8005058:	4a0b      	ldr	r2, [pc, #44]	; (8005088 <MotorMove_position_lowspeed+0x5cc>)
 800505a:	4413      	add	r3, r2
 800505c:	4618      	mov	r0, r3
 800505e:	f7fe ffd5 	bl	800400c <MotorDirection_SetUp>
	}
	HAL_TIM_Base_Start_IT(Motor[temp->MotorNumber].htim_x);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005068:	4619      	mov	r1, r3
 800506a:	4a07      	ldr	r2, [pc, #28]	; (8005088 <MotorMove_position_lowspeed+0x5cc>)
 800506c:	460b      	mov	r3, r1
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	440b      	add	r3, r1
 8005072:	015b      	lsls	r3, r3, #5
 8005074:	4413      	add	r3, r2
 8005076:	3334      	adds	r3, #52	; 0x34
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f005 fbae 	bl	800a7dc <HAL_TIM_Base_Start_IT>
}
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	200008a8 	.word	0x200008a8
 800508c:	40020400 	.word	0x40020400

08005090 <MotorRun_LowSpeed>:
	HAL_TIM_Base_Start_IT(Motor[temp->MotorNumber].htim_x);
}
#endif

void MotorRun_LowSpeed(struct MotorDefine *temp)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
	if (Motor[temp->MotorNumber].Status == 1){
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800509e:	4619      	mov	r1, r3
 80050a0:	4aad      	ldr	r2, [pc, #692]	; (8005358 <MotorRun_LowSpeed+0x2c8>)
 80050a2:	460b      	mov	r3, r1
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	440b      	add	r3, r1
 80050a8:	015b      	lsls	r3, r3, #5
 80050aa:	4413      	add	r3, r2
 80050ac:	3330      	adds	r3, #48	; 0x30
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d110      	bne.n	80050d6 <MotorRun_LowSpeed+0x46>
		printf("[WRONG]MotorRun_LowSpeed Failed,Motor%d is busy!\r\n",Motor[temp->MotorNumber].MotorNumber);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050ba:	4619      	mov	r1, r3
 80050bc:	4aa6      	ldr	r2, [pc, #664]	; (8005358 <MotorRun_LowSpeed+0x2c8>)
 80050be:	460b      	mov	r3, r1
 80050c0:	005b      	lsls	r3, r3, #1
 80050c2:	440b      	add	r3, r1
 80050c4:	015b      	lsls	r3, r3, #5
 80050c6:	4413      	add	r3, r2
 80050c8:	3320      	adds	r3, #32
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	4619      	mov	r1, r3
 80050ce:	48a3      	ldr	r0, [pc, #652]	; (800535c <MotorRun_LowSpeed+0x2cc>)
 80050d0:	f00a fd3c 	bl	800fb4c <iprintf>
		return ;
 80050d4:	e13c      	b.n	8005350 <MotorRun_LowSpeed+0x2c0>
	}
	else {
		Motor[temp->MotorNumber].Status = 1 ;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050dc:	4619      	mov	r1, r3
 80050de:	4a9e      	ldr	r2, [pc, #632]	; (8005358 <MotorRun_LowSpeed+0x2c8>)
 80050e0:	460b      	mov	r3, r1
 80050e2:	005b      	lsls	r3, r3, #1
 80050e4:	440b      	add	r3, r1
 80050e6:	015b      	lsls	r3, r3, #5
 80050e8:	4413      	add	r3, r2
 80050ea:	3330      	adds	r3, #48	; 0x30
 80050ec:	2201      	movs	r2, #1
 80050ee:	701a      	strb	r2, [r3, #0]
	}

	temp->deceleration_ratio = Motor[temp->MotorNumber].deceleration_ratio ;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050f6:	4619      	mov	r1, r3
 80050f8:	4a97      	ldr	r2, [pc, #604]	; (8005358 <MotorRun_LowSpeed+0x2c8>)
 80050fa:	460b      	mov	r3, r1
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	440b      	add	r3, r1
 8005100:	015b      	lsls	r3, r3, #5
 8005102:	4413      	add	r3, r2
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	601a      	str	r2, [r3, #0]
	temp->step_angle = Motor[temp->MotorNumber].step_angle ;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005110:	4619      	mov	r1, r3
 8005112:	4a91      	ldr	r2, [pc, #580]	; (8005358 <MotorRun_LowSpeed+0x2c8>)
 8005114:	460b      	mov	r3, r1
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	440b      	add	r3, r1
 800511a:	015b      	lsls	r3, r3, #5
 800511c:	4413      	add	r3, r2
 800511e:	3304      	adds	r3, #4
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	605a      	str	r2, [r3, #4]
	temp->mircro_steps = Motor[temp->MotorNumber].mircro_steps ;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 3020 	ldrb.w	r3, [r3, #32]
 800512c:	4619      	mov	r1, r3
 800512e:	4a8a      	ldr	r2, [pc, #552]	; (8005358 <MotorRun_LowSpeed+0x2c8>)
 8005130:	460b      	mov	r3, r1
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	440b      	add	r3, r1
 8005136:	015b      	lsls	r3, r3, #5
 8005138:	4413      	add	r3, r2
 800513a:	3308      	adds	r3, #8
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	609a      	str	r2, [r3, #8]
	temp->MaxSpeedInRads = Motor[temp->MotorNumber].MaxSpeedInRads ;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005148:	4619      	mov	r1, r3
 800514a:	4a83      	ldr	r2, [pc, #524]	; (8005358 <MotorRun_LowSpeed+0x2c8>)
 800514c:	460b      	mov	r3, r1
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	440b      	add	r3, r1
 8005152:	015b      	lsls	r3, r3, #5
 8005154:	4413      	add	r3, r2
 8005156:	330c      	adds	r3, #12
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	60da      	str	r2, [r3, #12]
	temp->htim_x = Motor[temp->MotorNumber].htim_x ;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005164:	4619      	mov	r1, r3
 8005166:	4a7c      	ldr	r2, [pc, #496]	; (8005358 <MotorRun_LowSpeed+0x2c8>)
 8005168:	460b      	mov	r3, r1
 800516a:	005b      	lsls	r3, r3, #1
 800516c:	440b      	add	r3, r1
 800516e:	015b      	lsls	r3, r3, #5
 8005170:	4413      	add	r3, r2
 8005172:	3334      	adds	r3, #52	; 0x34
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	635a      	str	r2, [r3, #52]	; 0x34

	// 计算： 单圈步数、启动速度、目标速度、行进步数、加减速时间
	temp->StepsInOneCircle = (360 / temp->step_angle) * temp->deceleration_ratio * temp->mircro_steps;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005180:	eddf 6a77 	vldr	s13, [pc, #476]	; 8005360 <MotorRun_LowSpeed+0x2d0>
 8005184:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	edd3 7a00 	vldr	s15, [r3]
 800518e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051a6:	ee17 2a90 	vmov	r2, s15
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	639a      	str	r2, [r3, #56]	; 0x38
	temp->StartupSpeedInHz = temp->StepsInOneCircle * temp->StartupSpeedInRads ;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b2:	ee07 3a90 	vmov	s15, r3
 80051b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80051c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051c8:	ee17 2a90 	vmov	r2, s15
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	63da      	str	r2, [r3, #60]	; 0x3c
	temp->StepperSpeedTMR = MOTORTIM_TMR / temp->StartupSpeedInHz;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d4:	4a63      	ldr	r2, [pc, #396]	; (8005364 <MotorRun_LowSpeed+0x2d4>)
 80051d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	649a      	str	r2, [r3, #72]	; 0x48
	temp->NumberofSteps = temp->NumberofRads * temp->StepsInOneCircle ;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	ee07 3a90 	vmov	s15, r3
 80051ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051f8:	ee17 2a90 	vmov	r2, s15
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	64da      	str	r2, [r3, #76]	; 0x4c

	//不进行加减速，电机保持最小速度运行
	Motor[temp->MotorNumber].NumberofSteps_StopAccel = temp->NumberofSteps;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005206:	4618      	mov	r0, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800520c:	4952      	ldr	r1, [pc, #328]	; (8005358 <MotorRun_LowSpeed+0x2c8>)
 800520e:	4603      	mov	r3, r0
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	4403      	add	r3, r0
 8005214:	015b      	lsls	r3, r3, #5
 8005216:	440b      	add	r3, r1
 8005218:	3350      	adds	r3, #80	; 0x50
 800521a:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].NumberofSteps_BeginDecel = 0;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005222:	4619      	mov	r1, r3
 8005224:	4a4c      	ldr	r2, [pc, #304]	; (8005358 <MotorRun_LowSpeed+0x2c8>)
 8005226:	460b      	mov	r3, r1
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	440b      	add	r3, r1
 800522c:	015b      	lsls	r3, r3, #5
 800522e:	4413      	add	r3, r2
 8005230:	3354      	adds	r3, #84	; 0x54
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]

	Motor[temp->MotorNumber].StepsInOneCircle = temp->StepsInOneCircle ;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3020 	ldrb.w	r3, [r3, #32]
 800523c:	4618      	mov	r0, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005242:	4945      	ldr	r1, [pc, #276]	; (8005358 <MotorRun_LowSpeed+0x2c8>)
 8005244:	4603      	mov	r3, r0
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	4403      	add	r3, r0
 800524a:	015b      	lsls	r3, r3, #5
 800524c:	440b      	add	r3, r1
 800524e:	3338      	adds	r3, #56	; 0x38
 8005250:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].StartupSpeedInHz = temp->StartupSpeedInHz ;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005258:	4618      	mov	r0, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800525e:	493e      	ldr	r1, [pc, #248]	; (8005358 <MotorRun_LowSpeed+0x2c8>)
 8005260:	4603      	mov	r3, r0
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	4403      	add	r3, r0
 8005266:	015b      	lsls	r3, r3, #5
 8005268:	440b      	add	r3, r1
 800526a:	333c      	adds	r3, #60	; 0x3c
 800526c:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].StepperSpeedTMR = temp->StepperSpeedTMR ;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005274:	4618      	mov	r0, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800527a:	4937      	ldr	r1, [pc, #220]	; (8005358 <MotorRun_LowSpeed+0x2c8>)
 800527c:	4603      	mov	r3, r0
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	4403      	add	r3, r0
 8005282:	015b      	lsls	r3, r3, #5
 8005284:	440b      	add	r3, r1
 8005286:	3348      	adds	r3, #72	; 0x48
 8005288:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].NumberofSteps = temp->NumberofSteps ;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005290:	4618      	mov	r0, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005296:	4930      	ldr	r1, [pc, #192]	; (8005358 <MotorRun_LowSpeed+0x2c8>)
 8005298:	4603      	mov	r3, r0
 800529a:	005b      	lsls	r3, r3, #1
 800529c:	4403      	add	r3, r0
 800529e:	015b      	lsls	r3, r3, #5
 80052a0:	440b      	add	r3, r1
 80052a2:	334c      	adds	r3, #76	; 0x4c
 80052a4:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].MotorDirection = temp->MotorDirection ;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052ac:	4619      	mov	r1, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
 80052b4:	4a28      	ldr	r2, [pc, #160]	; (8005358 <MotorRun_LowSpeed+0x2c8>)
 80052b6:	460b      	mov	r3, r1
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	440b      	add	r3, r1
 80052bc:	015b      	lsls	r3, r3, #5
 80052be:	4413      	add	r3, r2
 80052c0:	3321      	adds	r3, #33	; 0x21
 80052c2:	4602      	mov	r2, r0
 80052c4:	701a      	strb	r2, [r3, #0]
	Motor[temp->MotorNumber].AccelerationTimeTMR = 10000 ;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052cc:	4619      	mov	r1, r3
 80052ce:	4a22      	ldr	r2, [pc, #136]	; (8005358 <MotorRun_LowSpeed+0x2c8>)
 80052d0:	460b      	mov	r3, r1
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	440b      	add	r3, r1
 80052d6:	015b      	lsls	r3, r3, #5
 80052d8:	4413      	add	r3, r2
 80052da:	3358      	adds	r3, #88	; 0x58
 80052dc:	f242 7210 	movw	r2, #10000	; 0x2710
 80052e0:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].DecelerationTimeTMR = 10000 ;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052e8:	4619      	mov	r1, r3
 80052ea:	4a1b      	ldr	r2, [pc, #108]	; (8005358 <MotorRun_LowSpeed+0x2c8>)
 80052ec:	460b      	mov	r3, r1
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	440b      	add	r3, r1
 80052f2:	015b      	lsls	r3, r3, #5
 80052f4:	4413      	add	r3, r2
 80052f6:	335c      	adds	r3, #92	; 0x5c
 80052f8:	f242 7210 	movw	r2, #10000	; 0x2710
 80052fc:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].TargetPosition = -16777200 ; //暂时设置目标位置为无法达到的值，参数控制模式用步进数控制中断停止
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005304:	4619      	mov	r1, r3
 8005306:	4a14      	ldr	r2, [pc, #80]	; (8005358 <MotorRun_LowSpeed+0x2c8>)
 8005308:	460b      	mov	r3, r1
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	440b      	add	r3, r1
 800530e:	015b      	lsls	r3, r3, #5
 8005310:	4413      	add	r3, r2
 8005312:	332c      	adds	r3, #44	; 0x2c
 8005314:	4a14      	ldr	r2, [pc, #80]	; (8005368 <MotorRun_LowSpeed+0x2d8>)
 8005316:	601a      	str	r2, [r3, #0]

	MotorDirection_SetUp(&Motor[temp->MotorNumber]) ;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800531e:	461a      	mov	r2, r3
 8005320:	4613      	mov	r3, r2
 8005322:	005b      	lsls	r3, r3, #1
 8005324:	4413      	add	r3, r2
 8005326:	015b      	lsls	r3, r3, #5
 8005328:	4a0b      	ldr	r2, [pc, #44]	; (8005358 <MotorRun_LowSpeed+0x2c8>)
 800532a:	4413      	add	r3, r2
 800532c:	4618      	mov	r0, r3
 800532e:	f7fe fe6d 	bl	800400c <MotorDirection_SetUp>
	HAL_TIM_Base_Start_IT(Motor[temp->MotorNumber].htim_x);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005338:	4619      	mov	r1, r3
 800533a:	4a07      	ldr	r2, [pc, #28]	; (8005358 <MotorRun_LowSpeed+0x2c8>)
 800533c:	460b      	mov	r3, r1
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	440b      	add	r3, r1
 8005342:	015b      	lsls	r3, r3, #5
 8005344:	4413      	add	r3, r2
 8005346:	3334      	adds	r3, #52	; 0x34
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4618      	mov	r0, r3
 800534c:	f005 fa46 	bl	800a7dc <HAL_TIM_Base_Start_IT>
}
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	200008a8 	.word	0x200008a8
 800535c:	0801200c 	.word	0x0801200c
 8005360:	43b40000 	.word	0x43b40000
 8005364:	000186a0 	.word	0x000186a0
 8005368:	ff000010 	.word	0xff000010

0800536c <Motor_Reset>:
/*            *****************    0x20-0b00100000 电机复位 ：  ****************** */
// 根据协议，通过USART5进行出串口通讯，输入步进电机的 【地址】 即可，使用程序优化配置好的电机参数对电机进行复位（需要配合0位开关）
// 返回值： SUCCESS-1-完成，正在运行  FAIL-0
// 方案：控制电机运动上限圈数为10转，过程中如果触发0位信号则停止运动。如果电机初始位置已经触发0位信号，则反方向运动一小段时间，再找0位
uint8_t Motor_Reset(struct MotorDefine *temp)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b08e      	sub	sp, #56	; 0x38
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
	if (Motor[temp->MotorNumber].Status == 1){
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 3020 	ldrb.w	r3, [r3, #32]
 800537a:	4619      	mov	r1, r3
 800537c:	4ab8      	ldr	r2, [pc, #736]	; (8005660 <Motor_Reset+0x2f4>)
 800537e:	460b      	mov	r3, r1
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	440b      	add	r3, r1
 8005384:	015b      	lsls	r3, r3, #5
 8005386:	4413      	add	r3, r2
 8005388:	3330      	adds	r3, #48	; 0x30
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d108      	bne.n	80053a2 <Motor_Reset+0x36>
		printf("[WRONG] Reset Failed,Motor%d is busy!\r\n",temp->MotorNumber);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005396:	4619      	mov	r1, r3
 8005398:	48b2      	ldr	r0, [pc, #712]	; (8005664 <Motor_Reset+0x2f8>)
 800539a:	f00a fbd7 	bl	800fb4c <iprintf>
		return FAIL;
 800539e:	2300      	movs	r3, #0
 80053a0:	e3cf      	b.n	8005b42 <Motor_Reset+0x7d6>
	}
	*temp = Motor[temp->MotorNumber];
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053a8:	4619      	mov	r1, r3
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	4aac      	ldr	r2, [pc, #688]	; (8005660 <Motor_Reset+0x2f4>)
 80053ae:	460b      	mov	r3, r1
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	440b      	add	r3, r1
 80053b4:	015b      	lsls	r3, r3, #5
 80053b6:	4413      	add	r3, r2
 80053b8:	4619      	mov	r1, r3
 80053ba:	2360      	movs	r3, #96	; 0x60
 80053bc:	461a      	mov	r2, r3
 80053be:	f009 feb0 	bl	800f122 <memcpy>

	temp->NumberofRads = 30;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4aa8      	ldr	r2, [pc, #672]	; (8005668 <Motor_Reset+0x2fc>)
 80053c6:	625a      	str	r2, [r3, #36]	; 0x24

	if (temp->MotorNumber == 1){
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	f040 8093 	bne.w	80054fa <Motor_Reset+0x18e>
		if ( Motor1_reset_OPTstatus ){
 80053d4:	2108      	movs	r1, #8
 80053d6:	48a5      	ldr	r0, [pc, #660]	; (800566c <Motor_Reset+0x300>)
 80053d8:	f002 fe62 	bl	80080a0 <HAL_GPIO_ReadPin>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d140      	bne.n	8005464 <Motor_Reset+0xf8>
			temp->MotorDirection = 1 ;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7ff fe50 	bl	8005090 <MotorRun_LowSpeed>
			HAL_Delay(MotorResetDelay);
 80053f0:	2078      	movs	r0, #120	; 0x78
 80053f2:	f001 fbeb 	bl	8006bcc <HAL_Delay>
			for(uint32_t i=0 ; Motor1_reset_OPTstatus ; i++){
 80053f6:	2300      	movs	r3, #0
 80053f8:	637b      	str	r3, [r7, #52]	; 0x34
 80053fa:	e01f      	b.n	800543c <Motor_Reset+0xd0>
				if(i>500) {
 80053fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005402:	d915      	bls.n	8005430 <Motor_Reset+0xc4>
					printf("[WRONG] Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 3020 	ldrb.w	r3, [r3, #32]
 800540a:	4619      	mov	r1, r3
 800540c:	4898      	ldr	r0, [pc, #608]	; (8005670 <Motor_Reset+0x304>)
 800540e:	f00a fb9d 	bl	800fb4c <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005418:	4619      	mov	r1, r3
 800541a:	4a91      	ldr	r2, [pc, #580]	; (8005660 <Motor_Reset+0x2f4>)
 800541c:	460b      	mov	r3, r1
 800541e:	005b      	lsls	r3, r3, #1
 8005420:	440b      	add	r3, r1
 8005422:	015b      	lsls	r3, r3, #5
 8005424:	4413      	add	r3, r2
 8005426:	334c      	adds	r3, #76	; 0x4c
 8005428:	2202      	movs	r2, #2
 800542a:	601a      	str	r2, [r3, #0]
					return FAIL;
 800542c:	2300      	movs	r3, #0
 800542e:	e388      	b.n	8005b42 <Motor_Reset+0x7d6>
				}
				else {HAL_Delay(1);}
 8005430:	2001      	movs	r0, #1
 8005432:	f001 fbcb 	bl	8006bcc <HAL_Delay>
			for(uint32_t i=0 ; Motor1_reset_OPTstatus ; i++){
 8005436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005438:	3301      	adds	r3, #1
 800543a:	637b      	str	r3, [r7, #52]	; 0x34
 800543c:	2108      	movs	r1, #8
 800543e:	488b      	ldr	r0, [pc, #556]	; (800566c <Motor_Reset+0x300>)
 8005440:	f002 fe2e 	bl	80080a0 <HAL_GPIO_ReadPin>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d0d8      	beq.n	80053fc <Motor_Reset+0x90>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005450:	4619      	mov	r1, r3
 8005452:	4a83      	ldr	r2, [pc, #524]	; (8005660 <Motor_Reset+0x2f4>)
 8005454:	460b      	mov	r3, r1
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	440b      	add	r3, r1
 800545a:	015b      	lsls	r3, r3, #5
 800545c:	4413      	add	r3, r2
 800545e:	334c      	adds	r3, #76	; 0x4c
 8005460:	2202      	movs	r2, #2
 8005462:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(MotorResetDelay);
 8005464:	2078      	movs	r0, #120	; 0x78
 8005466:	f001 fbb1 	bl	8006bcc <HAL_Delay>
		if (Motor1_Nreset_OPTstatus){
 800546a:	2108      	movs	r1, #8
 800546c:	487f      	ldr	r0, [pc, #508]	; (800566c <Motor_Reset+0x300>)
 800546e:	f002 fe17 	bl	80080a0 <HAL_GPIO_ReadPin>
 8005472:	4603      	mov	r3, r0
 8005474:	2b01      	cmp	r3, #1
 8005476:	d140      	bne.n	80054fa <Motor_Reset+0x18e>
			temp->MotorDirection = 0 ;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7ff fe05 	bl	8005090 <MotorRun_LowSpeed>
			for(uint32_t i=0 ; Motor1_Nreset_OPTstatus ; i++){
 8005486:	2300      	movs	r3, #0
 8005488:	633b      	str	r3, [r7, #48]	; 0x30
 800548a:	e020      	b.n	80054ce <Motor_Reset+0x162>
				if(i>5000) {
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005492:	4293      	cmp	r3, r2
 8005494:	d915      	bls.n	80054c2 <Motor_Reset+0x156>
					printf("[WRONG] Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 3020 	ldrb.w	r3, [r3, #32]
 800549c:	4619      	mov	r1, r3
 800549e:	4874      	ldr	r0, [pc, #464]	; (8005670 <Motor_Reset+0x304>)
 80054a0:	f00a fb54 	bl	800fb4c <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054aa:	4619      	mov	r1, r3
 80054ac:	4a6c      	ldr	r2, [pc, #432]	; (8005660 <Motor_Reset+0x2f4>)
 80054ae:	460b      	mov	r3, r1
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	440b      	add	r3, r1
 80054b4:	015b      	lsls	r3, r3, #5
 80054b6:	4413      	add	r3, r2
 80054b8:	334c      	adds	r3, #76	; 0x4c
 80054ba:	2202      	movs	r2, #2
 80054bc:	601a      	str	r2, [r3, #0]
					return FAIL;
 80054be:	2300      	movs	r3, #0
 80054c0:	e33f      	b.n	8005b42 <Motor_Reset+0x7d6>
				}
				else {HAL_Delay(1);}
 80054c2:	2001      	movs	r0, #1
 80054c4:	f001 fb82 	bl	8006bcc <HAL_Delay>
			for(uint32_t i=0 ; Motor1_Nreset_OPTstatus ; i++){
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	3301      	adds	r3, #1
 80054cc:	633b      	str	r3, [r7, #48]	; 0x30
 80054ce:	2108      	movs	r1, #8
 80054d0:	4866      	ldr	r0, [pc, #408]	; (800566c <Motor_Reset+0x300>)
 80054d2:	f002 fde5 	bl	80080a0 <HAL_GPIO_ReadPin>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d0d7      	beq.n	800548c <Motor_Reset+0x120>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054e2:	4619      	mov	r1, r3
 80054e4:	4a5e      	ldr	r2, [pc, #376]	; (8005660 <Motor_Reset+0x2f4>)
 80054e6:	460b      	mov	r3, r1
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	440b      	add	r3, r1
 80054ec:	015b      	lsls	r3, r3, #5
 80054ee:	4413      	add	r3, r2
 80054f0:	334c      	adds	r3, #76	; 0x4c
 80054f2:	2202      	movs	r2, #2
 80054f4:	601a      	str	r2, [r3, #0]
			return SUCCESS;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e323      	b.n	8005b42 <Motor_Reset+0x7d6>
		}
	}

	if (temp->MotorNumber == 2){
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005500:	2b02      	cmp	r3, #2
 8005502:	f040 8093 	bne.w	800562c <Motor_Reset+0x2c0>
		if ( Motor2_reset_OPTstatus ){
 8005506:	2110      	movs	r1, #16
 8005508:	4858      	ldr	r0, [pc, #352]	; (800566c <Motor_Reset+0x300>)
 800550a:	f002 fdc9 	bl	80080a0 <HAL_GPIO_ReadPin>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d140      	bne.n	8005596 <Motor_Reset+0x22a>
			temp->MotorDirection = 1 ;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7ff fdb7 	bl	8005090 <MotorRun_LowSpeed>
			HAL_Delay(MotorResetDelay);
 8005522:	2078      	movs	r0, #120	; 0x78
 8005524:	f001 fb52 	bl	8006bcc <HAL_Delay>
			for(uint32_t i=0 ; Motor2_reset_OPTstatus ; i++){
 8005528:	2300      	movs	r3, #0
 800552a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800552c:	e01f      	b.n	800556e <Motor_Reset+0x202>
				if(i>500) {
 800552e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005530:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005534:	d915      	bls.n	8005562 <Motor_Reset+0x1f6>
					printf("[WRONG] Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 3020 	ldrb.w	r3, [r3, #32]
 800553c:	4619      	mov	r1, r3
 800553e:	484c      	ldr	r0, [pc, #304]	; (8005670 <Motor_Reset+0x304>)
 8005540:	f00a fb04 	bl	800fb4c <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 3020 	ldrb.w	r3, [r3, #32]
 800554a:	4619      	mov	r1, r3
 800554c:	4a44      	ldr	r2, [pc, #272]	; (8005660 <Motor_Reset+0x2f4>)
 800554e:	460b      	mov	r3, r1
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	440b      	add	r3, r1
 8005554:	015b      	lsls	r3, r3, #5
 8005556:	4413      	add	r3, r2
 8005558:	334c      	adds	r3, #76	; 0x4c
 800555a:	2202      	movs	r2, #2
 800555c:	601a      	str	r2, [r3, #0]
					return FAIL;
 800555e:	2300      	movs	r3, #0
 8005560:	e2ef      	b.n	8005b42 <Motor_Reset+0x7d6>
				}
				else {HAL_Delay(1);}
 8005562:	2001      	movs	r0, #1
 8005564:	f001 fb32 	bl	8006bcc <HAL_Delay>
			for(uint32_t i=0 ; Motor2_reset_OPTstatus ; i++){
 8005568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556a:	3301      	adds	r3, #1
 800556c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800556e:	2110      	movs	r1, #16
 8005570:	483e      	ldr	r0, [pc, #248]	; (800566c <Motor_Reset+0x300>)
 8005572:	f002 fd95 	bl	80080a0 <HAL_GPIO_ReadPin>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d0d8      	beq.n	800552e <Motor_Reset+0x1c2>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005582:	4619      	mov	r1, r3
 8005584:	4a36      	ldr	r2, [pc, #216]	; (8005660 <Motor_Reset+0x2f4>)
 8005586:	460b      	mov	r3, r1
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	440b      	add	r3, r1
 800558c:	015b      	lsls	r3, r3, #5
 800558e:	4413      	add	r3, r2
 8005590:	334c      	adds	r3, #76	; 0x4c
 8005592:	2202      	movs	r2, #2
 8005594:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(MotorResetDelay);
 8005596:	2078      	movs	r0, #120	; 0x78
 8005598:	f001 fb18 	bl	8006bcc <HAL_Delay>
		if (Motor2_Nreset_OPTstatus){
 800559c:	2110      	movs	r1, #16
 800559e:	4833      	ldr	r0, [pc, #204]	; (800566c <Motor_Reset+0x300>)
 80055a0:	f002 fd7e 	bl	80080a0 <HAL_GPIO_ReadPin>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d140      	bne.n	800562c <Motor_Reset+0x2c0>
			temp->MotorDirection = 0 ;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7ff fd6c 	bl	8005090 <MotorRun_LowSpeed>
			for(uint32_t i=0 ; Motor2_Nreset_OPTstatus ; i++){
 80055b8:	2300      	movs	r3, #0
 80055ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80055bc:	e020      	b.n	8005600 <Motor_Reset+0x294>
				if(i>5000) {
 80055be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d915      	bls.n	80055f4 <Motor_Reset+0x288>
					printf("[WRONG]Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055ce:	4619      	mov	r1, r3
 80055d0:	4828      	ldr	r0, [pc, #160]	; (8005674 <Motor_Reset+0x308>)
 80055d2:	f00a fabb 	bl	800fb4c <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055dc:	4619      	mov	r1, r3
 80055de:	4a20      	ldr	r2, [pc, #128]	; (8005660 <Motor_Reset+0x2f4>)
 80055e0:	460b      	mov	r3, r1
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	440b      	add	r3, r1
 80055e6:	015b      	lsls	r3, r3, #5
 80055e8:	4413      	add	r3, r2
 80055ea:	334c      	adds	r3, #76	; 0x4c
 80055ec:	2202      	movs	r2, #2
 80055ee:	601a      	str	r2, [r3, #0]
					return FAIL;
 80055f0:	2300      	movs	r3, #0
 80055f2:	e2a6      	b.n	8005b42 <Motor_Reset+0x7d6>
				}
				else {HAL_Delay(1);}
 80055f4:	2001      	movs	r0, #1
 80055f6:	f001 fae9 	bl	8006bcc <HAL_Delay>
			for(uint32_t i=0 ; Motor2_Nreset_OPTstatus ; i++){
 80055fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fc:	3301      	adds	r3, #1
 80055fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005600:	2110      	movs	r1, #16
 8005602:	481a      	ldr	r0, [pc, #104]	; (800566c <Motor_Reset+0x300>)
 8005604:	f002 fd4c 	bl	80080a0 <HAL_GPIO_ReadPin>
 8005608:	4603      	mov	r3, r0
 800560a:	2b01      	cmp	r3, #1
 800560c:	d0d7      	beq.n	80055be <Motor_Reset+0x252>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005614:	4619      	mov	r1, r3
 8005616:	4a12      	ldr	r2, [pc, #72]	; (8005660 <Motor_Reset+0x2f4>)
 8005618:	460b      	mov	r3, r1
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	440b      	add	r3, r1
 800561e:	015b      	lsls	r3, r3, #5
 8005620:	4413      	add	r3, r2
 8005622:	334c      	adds	r3, #76	; 0x4c
 8005624:	2202      	movs	r2, #2
 8005626:	601a      	str	r2, [r3, #0]
			return SUCCESS;
 8005628:	2301      	movs	r3, #1
 800562a:	e28a      	b.n	8005b42 <Motor_Reset+0x7d6>
		}
	}

	if (temp->MotorNumber == 3){
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005632:	2b03      	cmp	r3, #3
 8005634:	f040 809f 	bne.w	8005776 <Motor_Reset+0x40a>
		if ( Motor3_reset_OPTstatus ){
 8005638:	2120      	movs	r1, #32
 800563a:	480c      	ldr	r0, [pc, #48]	; (800566c <Motor_Reset+0x300>)
 800563c:	f002 fd30 	bl	80080a0 <HAL_GPIO_ReadPin>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d14c      	bne.n	80056e0 <Motor_Reset+0x374>
			temp->MotorDirection = 1 ;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff fd1e 	bl	8005090 <MotorRun_LowSpeed>
			HAL_Delay(MotorResetDelay);
 8005654:	2078      	movs	r0, #120	; 0x78
 8005656:	f001 fab9 	bl	8006bcc <HAL_Delay>
			for(uint32_t i=0 ; Motor3_reset_OPTstatus ; i++){
 800565a:	2300      	movs	r3, #0
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
 800565e:	e02b      	b.n	80056b8 <Motor_Reset+0x34c>
 8005660:	200008a8 	.word	0x200008a8
 8005664:	08012040 	.word	0x08012040
 8005668:	41f00000 	.word	0x41f00000
 800566c:	40020c00 	.word	0x40020c00
 8005670:	08012068 	.word	0x08012068
 8005674:	08012094 	.word	0x08012094
				if(i>500) {
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800567e:	d915      	bls.n	80056ac <Motor_Reset+0x340>
					printf("[WRONG] Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005686:	4619      	mov	r1, r3
 8005688:	48bb      	ldr	r0, [pc, #748]	; (8005978 <Motor_Reset+0x60c>)
 800568a:	f00a fa5f 	bl	800fb4c <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005694:	4619      	mov	r1, r3
 8005696:	4ab9      	ldr	r2, [pc, #740]	; (800597c <Motor_Reset+0x610>)
 8005698:	460b      	mov	r3, r1
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	440b      	add	r3, r1
 800569e:	015b      	lsls	r3, r3, #5
 80056a0:	4413      	add	r3, r2
 80056a2:	334c      	adds	r3, #76	; 0x4c
 80056a4:	2202      	movs	r2, #2
 80056a6:	601a      	str	r2, [r3, #0]
					return FAIL;
 80056a8:	2300      	movs	r3, #0
 80056aa:	e24a      	b.n	8005b42 <Motor_Reset+0x7d6>
				}
				else {HAL_Delay(1);}
 80056ac:	2001      	movs	r0, #1
 80056ae:	f001 fa8d 	bl	8006bcc <HAL_Delay>
			for(uint32_t i=0 ; Motor3_reset_OPTstatus ; i++){
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	3301      	adds	r3, #1
 80056b6:	627b      	str	r3, [r7, #36]	; 0x24
 80056b8:	2120      	movs	r1, #32
 80056ba:	48b1      	ldr	r0, [pc, #708]	; (8005980 <Motor_Reset+0x614>)
 80056bc:	f002 fcf0 	bl	80080a0 <HAL_GPIO_ReadPin>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0d8      	beq.n	8005678 <Motor_Reset+0x30c>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056cc:	4619      	mov	r1, r3
 80056ce:	4aab      	ldr	r2, [pc, #684]	; (800597c <Motor_Reset+0x610>)
 80056d0:	460b      	mov	r3, r1
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	440b      	add	r3, r1
 80056d6:	015b      	lsls	r3, r3, #5
 80056d8:	4413      	add	r3, r2
 80056da:	334c      	adds	r3, #76	; 0x4c
 80056dc:	2202      	movs	r2, #2
 80056de:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(MotorResetDelay);
 80056e0:	2078      	movs	r0, #120	; 0x78
 80056e2:	f001 fa73 	bl	8006bcc <HAL_Delay>
		if (Motor3_Nreset_OPTstatus){
 80056e6:	2120      	movs	r1, #32
 80056e8:	48a5      	ldr	r0, [pc, #660]	; (8005980 <Motor_Reset+0x614>)
 80056ea:	f002 fcd9 	bl	80080a0 <HAL_GPIO_ReadPin>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d140      	bne.n	8005776 <Motor_Reset+0x40a>
			temp->MotorDirection = 0 ;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7ff fcc7 	bl	8005090 <MotorRun_LowSpeed>
			for(uint32_t i=0 ; Motor3_Nreset_OPTstatus ; i++){
 8005702:	2300      	movs	r3, #0
 8005704:	623b      	str	r3, [r7, #32]
 8005706:	e020      	b.n	800574a <Motor_Reset+0x3de>
				if(i>12000) {
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800570e:	4293      	cmp	r3, r2
 8005710:	d915      	bls.n	800573e <Motor_Reset+0x3d2>
					printf("[WRONG] Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005718:	4619      	mov	r1, r3
 800571a:	4897      	ldr	r0, [pc, #604]	; (8005978 <Motor_Reset+0x60c>)
 800571c:	f00a fa16 	bl	800fb4c <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005726:	4619      	mov	r1, r3
 8005728:	4a94      	ldr	r2, [pc, #592]	; (800597c <Motor_Reset+0x610>)
 800572a:	460b      	mov	r3, r1
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	440b      	add	r3, r1
 8005730:	015b      	lsls	r3, r3, #5
 8005732:	4413      	add	r3, r2
 8005734:	334c      	adds	r3, #76	; 0x4c
 8005736:	2202      	movs	r2, #2
 8005738:	601a      	str	r2, [r3, #0]
					return FAIL;
 800573a:	2300      	movs	r3, #0
 800573c:	e201      	b.n	8005b42 <Motor_Reset+0x7d6>
				}
				else {HAL_Delay(1);}
 800573e:	2001      	movs	r0, #1
 8005740:	f001 fa44 	bl	8006bcc <HAL_Delay>
			for(uint32_t i=0 ; Motor3_Nreset_OPTstatus ; i++){
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	3301      	adds	r3, #1
 8005748:	623b      	str	r3, [r7, #32]
 800574a:	2120      	movs	r1, #32
 800574c:	488c      	ldr	r0, [pc, #560]	; (8005980 <Motor_Reset+0x614>)
 800574e:	f002 fca7 	bl	80080a0 <HAL_GPIO_ReadPin>
 8005752:	4603      	mov	r3, r0
 8005754:	2b01      	cmp	r3, #1
 8005756:	d0d7      	beq.n	8005708 <Motor_Reset+0x39c>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800575e:	4619      	mov	r1, r3
 8005760:	4a86      	ldr	r2, [pc, #536]	; (800597c <Motor_Reset+0x610>)
 8005762:	460b      	mov	r3, r1
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	440b      	add	r3, r1
 8005768:	015b      	lsls	r3, r3, #5
 800576a:	4413      	add	r3, r2
 800576c:	334c      	adds	r3, #76	; 0x4c
 800576e:	2202      	movs	r2, #2
 8005770:	601a      	str	r2, [r3, #0]
			return SUCCESS;
 8005772:	2301      	movs	r3, #1
 8005774:	e1e5      	b.n	8005b42 <Motor_Reset+0x7d6>
		}
	}

	if (temp->MotorNumber == 4){
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 3020 	ldrb.w	r3, [r3, #32]
 800577c:	2b04      	cmp	r3, #4
 800577e:	f040 8098 	bne.w	80058b2 <Motor_Reset+0x546>
		if ( Motor4_reset_OPTstatus ){
 8005782:	2140      	movs	r1, #64	; 0x40
 8005784:	487e      	ldr	r0, [pc, #504]	; (8005980 <Motor_Reset+0x614>)
 8005786:	f002 fc8b 	bl	80080a0 <HAL_GPIO_ReadPin>
 800578a:	4603      	mov	r3, r0
 800578c:	2b01      	cmp	r3, #1
 800578e:	d143      	bne.n	8005818 <Motor_Reset+0x4ac>
			temp->MotorDirection = 1 ;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp->NumberofRads = 10 ;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a7a      	ldr	r2, [pc, #488]	; (8005984 <Motor_Reset+0x618>)
 800579c:	625a      	str	r2, [r3, #36]	; 0x24
			MotorMove_steps(temp);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7fe fc9a 	bl	80040d8 <MotorMove_steps>
			HAL_Delay(MotorResetDelay);
 80057a4:	2078      	movs	r0, #120	; 0x78
 80057a6:	f001 fa11 	bl	8006bcc <HAL_Delay>
			for(uint32_t i=0 ; Motor4_reset_OPTstatus ; i++){
 80057aa:	2300      	movs	r3, #0
 80057ac:	61fb      	str	r3, [r7, #28]
 80057ae:	e01f      	b.n	80057f0 <Motor_Reset+0x484>
				if(i>500) {
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80057b6:	d915      	bls.n	80057e4 <Motor_Reset+0x478>
					printf("[WRONG] Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057be:	4619      	mov	r1, r3
 80057c0:	486d      	ldr	r0, [pc, #436]	; (8005978 <Motor_Reset+0x60c>)
 80057c2:	f00a f9c3 	bl	800fb4c <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057cc:	4619      	mov	r1, r3
 80057ce:	4a6b      	ldr	r2, [pc, #428]	; (800597c <Motor_Reset+0x610>)
 80057d0:	460b      	mov	r3, r1
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	440b      	add	r3, r1
 80057d6:	015b      	lsls	r3, r3, #5
 80057d8:	4413      	add	r3, r2
 80057da:	334c      	adds	r3, #76	; 0x4c
 80057dc:	2202      	movs	r2, #2
 80057de:	601a      	str	r2, [r3, #0]
					return FAIL;
 80057e0:	2300      	movs	r3, #0
 80057e2:	e1ae      	b.n	8005b42 <Motor_Reset+0x7d6>
				}
				else {HAL_Delay(1);}
 80057e4:	2001      	movs	r0, #1
 80057e6:	f001 f9f1 	bl	8006bcc <HAL_Delay>
			for(uint32_t i=0 ; Motor4_reset_OPTstatus ; i++){
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	3301      	adds	r3, #1
 80057ee:	61fb      	str	r3, [r7, #28]
 80057f0:	2140      	movs	r1, #64	; 0x40
 80057f2:	4863      	ldr	r0, [pc, #396]	; (8005980 <Motor_Reset+0x614>)
 80057f4:	f002 fc54 	bl	80080a0 <HAL_GPIO_ReadPin>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d0d8      	beq.n	80057b0 <Motor_Reset+0x444>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005804:	4619      	mov	r1, r3
 8005806:	4a5d      	ldr	r2, [pc, #372]	; (800597c <Motor_Reset+0x610>)
 8005808:	460b      	mov	r3, r1
 800580a:	005b      	lsls	r3, r3, #1
 800580c:	440b      	add	r3, r1
 800580e:	015b      	lsls	r3, r3, #5
 8005810:	4413      	add	r3, r2
 8005812:	334c      	adds	r3, #76	; 0x4c
 8005814:	2202      	movs	r2, #2
 8005816:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(MotorResetDelay);
 8005818:	2078      	movs	r0, #120	; 0x78
 800581a:	f001 f9d7 	bl	8006bcc <HAL_Delay>
		if (Motor4_Nreset_OPTstatus){
 800581e:	2140      	movs	r1, #64	; 0x40
 8005820:	4857      	ldr	r0, [pc, #348]	; (8005980 <Motor_Reset+0x614>)
 8005822:	f002 fc3d 	bl	80080a0 <HAL_GPIO_ReadPin>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d142      	bne.n	80058b2 <Motor_Reset+0x546>
			temp->MotorDirection = 0 ;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp->NumberofRads = 10 ;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a53      	ldr	r2, [pc, #332]	; (8005984 <Motor_Reset+0x618>)
 8005838:	625a      	str	r2, [r3, #36]	; 0x24
			MotorMove_steps(temp);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7fe fc4c 	bl	80040d8 <MotorMove_steps>
			for(uint32_t i=0 ; Motor4_Nreset_OPTstatus ; i++){
 8005840:	2300      	movs	r3, #0
 8005842:	61bb      	str	r3, [r7, #24]
 8005844:	e01f      	b.n	8005886 <Motor_Reset+0x51a>
				if(i>8000) {
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800584c:	d915      	bls.n	800587a <Motor_Reset+0x50e>
					printf("[WRONG] Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005854:	4619      	mov	r1, r3
 8005856:	4848      	ldr	r0, [pc, #288]	; (8005978 <Motor_Reset+0x60c>)
 8005858:	f00a f978 	bl	800fb4c <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005862:	4619      	mov	r1, r3
 8005864:	4a45      	ldr	r2, [pc, #276]	; (800597c <Motor_Reset+0x610>)
 8005866:	460b      	mov	r3, r1
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	440b      	add	r3, r1
 800586c:	015b      	lsls	r3, r3, #5
 800586e:	4413      	add	r3, r2
 8005870:	334c      	adds	r3, #76	; 0x4c
 8005872:	2202      	movs	r2, #2
 8005874:	601a      	str	r2, [r3, #0]
					return FAIL;
 8005876:	2300      	movs	r3, #0
 8005878:	e163      	b.n	8005b42 <Motor_Reset+0x7d6>
				}
				else {HAL_Delay(1);}
 800587a:	2001      	movs	r0, #1
 800587c:	f001 f9a6 	bl	8006bcc <HAL_Delay>
			for(uint32_t i=0 ; Motor4_Nreset_OPTstatus ; i++){
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	3301      	adds	r3, #1
 8005884:	61bb      	str	r3, [r7, #24]
 8005886:	2140      	movs	r1, #64	; 0x40
 8005888:	483d      	ldr	r0, [pc, #244]	; (8005980 <Motor_Reset+0x614>)
 800588a:	f002 fc09 	bl	80080a0 <HAL_GPIO_ReadPin>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0d8      	beq.n	8005846 <Motor_Reset+0x4da>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 3020 	ldrb.w	r3, [r3, #32]
 800589a:	4619      	mov	r1, r3
 800589c:	4a37      	ldr	r2, [pc, #220]	; (800597c <Motor_Reset+0x610>)
 800589e:	460b      	mov	r3, r1
 80058a0:	005b      	lsls	r3, r3, #1
 80058a2:	440b      	add	r3, r1
 80058a4:	015b      	lsls	r3, r3, #5
 80058a6:	4413      	add	r3, r2
 80058a8:	334c      	adds	r3, #76	; 0x4c
 80058aa:	2202      	movs	r2, #2
 80058ac:	601a      	str	r2, [r3, #0]
			return SUCCESS;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e147      	b.n	8005b42 <Motor_Reset+0x7d6>
		}
	}

	if (temp->MotorNumber == 5){
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058b8:	2b05      	cmp	r3, #5
 80058ba:	f040 809e 	bne.w	80059fa <Motor_Reset+0x68e>
		if ( Motor5_reset_OPTstatus ){
 80058be:	2180      	movs	r1, #128	; 0x80
 80058c0:	482f      	ldr	r0, [pc, #188]	; (8005980 <Motor_Reset+0x614>)
 80058c2:	f002 fbed 	bl	80080a0 <HAL_GPIO_ReadPin>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d140      	bne.n	800594e <Motor_Reset+0x5e2>
			temp->MotorDirection = 1 ;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7ff fbdb 	bl	8005090 <MotorRun_LowSpeed>
			HAL_Delay(MotorResetDelay);
 80058da:	2078      	movs	r0, #120	; 0x78
 80058dc:	f001 f976 	bl	8006bcc <HAL_Delay>
			for(uint32_t i=0 ; Motor5_reset_OPTstatus ; i++){
 80058e0:	2300      	movs	r3, #0
 80058e2:	617b      	str	r3, [r7, #20]
 80058e4:	e01f      	b.n	8005926 <Motor_Reset+0x5ba>
				if(i>500) {
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80058ec:	d915      	bls.n	800591a <Motor_Reset+0x5ae>
					printf("[WRONG]Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058f4:	4619      	mov	r1, r3
 80058f6:	4824      	ldr	r0, [pc, #144]	; (8005988 <Motor_Reset+0x61c>)
 80058f8:	f00a f928 	bl	800fb4c <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005902:	4619      	mov	r1, r3
 8005904:	4a1d      	ldr	r2, [pc, #116]	; (800597c <Motor_Reset+0x610>)
 8005906:	460b      	mov	r3, r1
 8005908:	005b      	lsls	r3, r3, #1
 800590a:	440b      	add	r3, r1
 800590c:	015b      	lsls	r3, r3, #5
 800590e:	4413      	add	r3, r2
 8005910:	334c      	adds	r3, #76	; 0x4c
 8005912:	2202      	movs	r2, #2
 8005914:	601a      	str	r2, [r3, #0]
					return FAIL;
 8005916:	2300      	movs	r3, #0
 8005918:	e113      	b.n	8005b42 <Motor_Reset+0x7d6>
				}
				else {HAL_Delay(1);}
 800591a:	2001      	movs	r0, #1
 800591c:	f001 f956 	bl	8006bcc <HAL_Delay>
			for(uint32_t i=0 ; Motor5_reset_OPTstatus ; i++){
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	3301      	adds	r3, #1
 8005924:	617b      	str	r3, [r7, #20]
 8005926:	2180      	movs	r1, #128	; 0x80
 8005928:	4815      	ldr	r0, [pc, #84]	; (8005980 <Motor_Reset+0x614>)
 800592a:	f002 fbb9 	bl	80080a0 <HAL_GPIO_ReadPin>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d0d8      	beq.n	80058e6 <Motor_Reset+0x57a>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 3020 	ldrb.w	r3, [r3, #32]
 800593a:	4619      	mov	r1, r3
 800593c:	4a0f      	ldr	r2, [pc, #60]	; (800597c <Motor_Reset+0x610>)
 800593e:	460b      	mov	r3, r1
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	440b      	add	r3, r1
 8005944:	015b      	lsls	r3, r3, #5
 8005946:	4413      	add	r3, r2
 8005948:	334c      	adds	r3, #76	; 0x4c
 800594a:	2202      	movs	r2, #2
 800594c:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(MotorResetDelay);
 800594e:	2078      	movs	r0, #120	; 0x78
 8005950:	f001 f93c 	bl	8006bcc <HAL_Delay>
		if (Motor5_Nreset_OPTstatus){
 8005954:	2180      	movs	r1, #128	; 0x80
 8005956:	480a      	ldr	r0, [pc, #40]	; (8005980 <Motor_Reset+0x614>)
 8005958:	f002 fba2 	bl	80080a0 <HAL_GPIO_ReadPin>
 800595c:	4603      	mov	r3, r0
 800595e:	2b01      	cmp	r3, #1
 8005960:	d14b      	bne.n	80059fa <Motor_Reset+0x68e>
			temp->MotorDirection = 0 ;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			MotorRun_LowSpeed(temp);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7ff fb90 	bl	8005090 <MotorRun_LowSpeed>
			for(uint32_t i=0 ; Motor5_Nreset_OPTstatus ; i++){
 8005970:	2300      	movs	r3, #0
 8005972:	613b      	str	r3, [r7, #16]
 8005974:	e02b      	b.n	80059ce <Motor_Reset+0x662>
 8005976:	bf00      	nop
 8005978:	08012068 	.word	0x08012068
 800597c:	200008a8 	.word	0x200008a8
 8005980:	40020c00 	.word	0x40020c00
 8005984:	41200000 	.word	0x41200000
 8005988:	08012094 	.word	0x08012094
				if(i>5000) {
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005992:	4293      	cmp	r3, r2
 8005994:	d915      	bls.n	80059c2 <Motor_Reset+0x656>
					printf("[WRONG]Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 3020 	ldrb.w	r3, [r3, #32]
 800599c:	4619      	mov	r1, r3
 800599e:	486b      	ldr	r0, [pc, #428]	; (8005b4c <Motor_Reset+0x7e0>)
 80059a0:	f00a f8d4 	bl	800fb4c <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059aa:	4619      	mov	r1, r3
 80059ac:	4a68      	ldr	r2, [pc, #416]	; (8005b50 <Motor_Reset+0x7e4>)
 80059ae:	460b      	mov	r3, r1
 80059b0:	005b      	lsls	r3, r3, #1
 80059b2:	440b      	add	r3, r1
 80059b4:	015b      	lsls	r3, r3, #5
 80059b6:	4413      	add	r3, r2
 80059b8:	334c      	adds	r3, #76	; 0x4c
 80059ba:	2202      	movs	r2, #2
 80059bc:	601a      	str	r2, [r3, #0]
					return FAIL;
 80059be:	2300      	movs	r3, #0
 80059c0:	e0bf      	b.n	8005b42 <Motor_Reset+0x7d6>
				}
				else {HAL_Delay(1);}
 80059c2:	2001      	movs	r0, #1
 80059c4:	f001 f902 	bl	8006bcc <HAL_Delay>
			for(uint32_t i=0 ; Motor5_Nreset_OPTstatus ; i++){
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	3301      	adds	r3, #1
 80059cc:	613b      	str	r3, [r7, #16]
 80059ce:	2180      	movs	r1, #128	; 0x80
 80059d0:	4860      	ldr	r0, [pc, #384]	; (8005b54 <Motor_Reset+0x7e8>)
 80059d2:	f002 fb65 	bl	80080a0 <HAL_GPIO_ReadPin>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d0d7      	beq.n	800598c <Motor_Reset+0x620>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059e2:	4619      	mov	r1, r3
 80059e4:	4a5a      	ldr	r2, [pc, #360]	; (8005b50 <Motor_Reset+0x7e4>)
 80059e6:	460b      	mov	r3, r1
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	440b      	add	r3, r1
 80059ec:	015b      	lsls	r3, r3, #5
 80059ee:	4413      	add	r3, r2
 80059f0:	334c      	adds	r3, #76	; 0x4c
 80059f2:	2202      	movs	r2, #2
 80059f4:	601a      	str	r2, [r3, #0]
			return SUCCESS;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e0a3      	b.n	8005b42 <Motor_Reset+0x7d6>
		}
	}

	if (temp->MotorNumber == 6){
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a00:	2b06      	cmp	r3, #6
 8005a02:	f040 809d 	bne.w	8005b40 <Motor_Reset+0x7d4>
		if ( Motor6_reset_OPTstatus ){
 8005a06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a0a:	4853      	ldr	r0, [pc, #332]	; (8005b58 <Motor_Reset+0x7ec>)
 8005a0c:	f002 fb48 	bl	80080a0 <HAL_GPIO_ReadPin>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d144      	bne.n	8005aa0 <Motor_Reset+0x734>
			temp->MotorDirection = 1 ;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp->NumberofRads = 10 ;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a4e      	ldr	r2, [pc, #312]	; (8005b5c <Motor_Reset+0x7f0>)
 8005a22:	625a      	str	r2, [r3, #36]	; 0x24
			MotorRun_LowSpeed(temp);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f7ff fb33 	bl	8005090 <MotorRun_LowSpeed>
			HAL_Delay(MotorResetDelay);
 8005a2a:	2078      	movs	r0, #120	; 0x78
 8005a2c:	f001 f8ce 	bl	8006bcc <HAL_Delay>
			for(uint32_t i=0 ; Motor6_reset_OPTstatus ; i++){
 8005a30:	2300      	movs	r3, #0
 8005a32:	60fb      	str	r3, [r7, #12]
 8005a34:	e01f      	b.n	8005a76 <Motor_Reset+0x70a>
				if(i>500) {
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005a3c:	d915      	bls.n	8005a6a <Motor_Reset+0x6fe>
					printf("[WRONG]1Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a44:	4619      	mov	r1, r3
 8005a46:	4846      	ldr	r0, [pc, #280]	; (8005b60 <Motor_Reset+0x7f4>)
 8005a48:	f00a f880 	bl	800fb4c <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a52:	4619      	mov	r1, r3
 8005a54:	4a3e      	ldr	r2, [pc, #248]	; (8005b50 <Motor_Reset+0x7e4>)
 8005a56:	460b      	mov	r3, r1
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	440b      	add	r3, r1
 8005a5c:	015b      	lsls	r3, r3, #5
 8005a5e:	4413      	add	r3, r2
 8005a60:	334c      	adds	r3, #76	; 0x4c
 8005a62:	2202      	movs	r2, #2
 8005a64:	601a      	str	r2, [r3, #0]
					return FAIL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	e06b      	b.n	8005b42 <Motor_Reset+0x7d6>
				}
				else {HAL_Delay(1);}
 8005a6a:	2001      	movs	r0, #1
 8005a6c:	f001 f8ae 	bl	8006bcc <HAL_Delay>
			for(uint32_t i=0 ; Motor6_reset_OPTstatus ; i++){
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	3301      	adds	r3, #1
 8005a74:	60fb      	str	r3, [r7, #12]
 8005a76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a7a:	4837      	ldr	r0, [pc, #220]	; (8005b58 <Motor_Reset+0x7ec>)
 8005a7c:	f002 fb10 	bl	80080a0 <HAL_GPIO_ReadPin>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0d7      	beq.n	8005a36 <Motor_Reset+0x6ca>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4a30      	ldr	r2, [pc, #192]	; (8005b50 <Motor_Reset+0x7e4>)
 8005a90:	460b      	mov	r3, r1
 8005a92:	005b      	lsls	r3, r3, #1
 8005a94:	440b      	add	r3, r1
 8005a96:	015b      	lsls	r3, r3, #5
 8005a98:	4413      	add	r3, r2
 8005a9a:	334c      	adds	r3, #76	; 0x4c
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(MotorResetDelay);
 8005aa0:	2078      	movs	r0, #120	; 0x78
 8005aa2:	f001 f893 	bl	8006bcc <HAL_Delay>
		if (Motor6_Nreset_OPTstatus){
 8005aa6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005aaa:	482b      	ldr	r0, [pc, #172]	; (8005b58 <Motor_Reset+0x7ec>)
 8005aac:	f002 faf8 	bl	80080a0 <HAL_GPIO_ReadPin>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d144      	bne.n	8005b40 <Motor_Reset+0x7d4>
			temp->MotorDirection = 0 ;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp->NumberofRads = 50 ;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a28      	ldr	r2, [pc, #160]	; (8005b64 <Motor_Reset+0x7f8>)
 8005ac2:	625a      	str	r2, [r3, #36]	; 0x24
			MotorRun_LowSpeed(temp);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7ff fae3 	bl	8005090 <MotorRun_LowSpeed>
			for(uint32_t i=0 ; Motor6_Nreset_OPTstatus ; i++){
 8005aca:	2300      	movs	r3, #0
 8005acc:	60bb      	str	r3, [r7, #8]
 8005ace:	e020      	b.n	8005b12 <Motor_Reset+0x7a6>
				if(i>5000) {
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d915      	bls.n	8005b06 <Motor_Reset+0x79a>
					printf("[WRONG]2Overtime! Reset Motor%d Failed!\r\n",temp->MotorNumber);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	4821      	ldr	r0, [pc, #132]	; (8005b68 <Motor_Reset+0x7fc>)
 8005ae4:	f00a f832 	bl	800fb4c <iprintf>
					Motor[temp->MotorNumber].NumberofSteps = 2;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005aee:	4619      	mov	r1, r3
 8005af0:	4a17      	ldr	r2, [pc, #92]	; (8005b50 <Motor_Reset+0x7e4>)
 8005af2:	460b      	mov	r3, r1
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	440b      	add	r3, r1
 8005af8:	015b      	lsls	r3, r3, #5
 8005afa:	4413      	add	r3, r2
 8005afc:	334c      	adds	r3, #76	; 0x4c
 8005afe:	2202      	movs	r2, #2
 8005b00:	601a      	str	r2, [r3, #0]
					return FAIL;
 8005b02:	2300      	movs	r3, #0
 8005b04:	e01d      	b.n	8005b42 <Motor_Reset+0x7d6>
				}
				else {HAL_Delay(1);}
 8005b06:	2001      	movs	r0, #1
 8005b08:	f001 f860 	bl	8006bcc <HAL_Delay>
			for(uint32_t i=0 ; Motor6_Nreset_OPTstatus ; i++){
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	60bb      	str	r3, [r7, #8]
 8005b12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b16:	4810      	ldr	r0, [pc, #64]	; (8005b58 <Motor_Reset+0x7ec>)
 8005b18:	f002 fac2 	bl	80080a0 <HAL_GPIO_ReadPin>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d0d6      	beq.n	8005ad0 <Motor_Reset+0x764>
			}
			Motor[temp->MotorNumber].NumberofSteps = 2;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4a09      	ldr	r2, [pc, #36]	; (8005b50 <Motor_Reset+0x7e4>)
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	440b      	add	r3, r1
 8005b32:	015b      	lsls	r3, r3, #5
 8005b34:	4413      	add	r3, r2
 8005b36:	334c      	adds	r3, #76	; 0x4c
 8005b38:	2202      	movs	r2, #2
 8005b3a:	601a      	str	r2, [r3, #0]
			return SUCCESS;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e000      	b.n	8005b42 <Motor_Reset+0x7d6>
		}
	}


	return FAIL;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3738      	adds	r7, #56	; 0x38
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	08012094 	.word	0x08012094
 8005b50:	200008a8 	.word	0x200008a8
 8005b54:	40020c00 	.word	0x40020c00
 8005b58:	40021800 	.word	0x40021800
 8005b5c:	41200000 	.word	0x41200000
 8005b60:	080120c0 	.word	0x080120c0
 8005b64:	42480000 	.word	0x42480000
 8005b68:	080120ec 	.word	0x080120ec

08005b6c <DC_Motor_ON>:

/*            *****************    0x10-0b00010000 直流电机控制模式 ：  ******************
根据协议，通过USART5进行出串口通讯，输入直流电机的【编号、AB相、占空比】参数
Status - 0x02 代表A相使能，0x01代表B相使能。同一个电机的AB相占空比一致 ***/
void DC_Motor_ON(struct MotorDefine *temp ,char x, uint32_t Duty_Cycle)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	460b      	mov	r3, r1
 8005b76:	607a      	str	r2, [r7, #4]
 8005b78:	72fb      	strb	r3, [r7, #11]
	if ( x == 'A' ){
 8005b7a:	7afb      	ldrb	r3, [r7, #11]
 8005b7c:	2b41      	cmp	r3, #65	; 0x41
 8005b7e:	d13d      	bne.n	8005bfc <DC_Motor_ON+0x90>
		Motor[temp->MotorNumber].Status = Motor[temp->MotorNumber].Status | 0b00000010 ;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b86:	4619      	mov	r1, r3
 8005b88:	4a5c      	ldr	r2, [pc, #368]	; (8005cfc <DC_Motor_ON+0x190>)
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	005b      	lsls	r3, r3, #1
 8005b8e:	440b      	add	r3, r1
 8005b90:	015b      	lsls	r3, r3, #5
 8005b92:	4413      	add	r3, r2
 8005b94:	3330      	adds	r3, #48	; 0x30
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	f043 0302 	orr.w	r3, r3, #2
 8005ba4:	b2d8      	uxtb	r0, r3
 8005ba6:	4a55      	ldr	r2, [pc, #340]	; (8005cfc <DC_Motor_ON+0x190>)
 8005ba8:	460b      	mov	r3, r1
 8005baa:	005b      	lsls	r3, r3, #1
 8005bac:	440b      	add	r3, r1
 8005bae:	015b      	lsls	r3, r3, #5
 8005bb0:	4413      	add	r3, r2
 8005bb2:	3330      	adds	r3, #48	; 0x30
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	701a      	strb	r2, [r3, #0]
		if ( temp->MotorNumber == 6 ){
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bbe:	2b06      	cmp	r3, #6
 8005bc0:	d105      	bne.n	8005bce <DC_Motor_ON+0x62>
			VM6_Enable_A();
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	2180      	movs	r1, #128	; 0x80
 8005bc6:	484e      	ldr	r0, [pc, #312]	; (8005d00 <DC_Motor_ON+0x194>)
 8005bc8:	f002 fa82 	bl	80080d0 <HAL_GPIO_WritePin>
 8005bcc:	e057      	b.n	8005c7e <DC_Motor_ON+0x112>
		}
		else if ( temp->MotorNumber == 7 ){
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bd4:	2b07      	cmp	r3, #7
 8005bd6:	d105      	bne.n	8005be4 <DC_Motor_ON+0x78>
			VM7_Enable_A();
 8005bd8:	2201      	movs	r2, #1
 8005bda:	2101      	movs	r1, #1
 8005bdc:	4849      	ldr	r0, [pc, #292]	; (8005d04 <DC_Motor_ON+0x198>)
 8005bde:	f002 fa77 	bl	80080d0 <HAL_GPIO_WritePin>
 8005be2:	e04c      	b.n	8005c7e <DC_Motor_ON+0x112>
		}
		else if ( temp->MotorNumber == 8 ){
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bea:	2b08      	cmp	r3, #8
 8005bec:	d147      	bne.n	8005c7e <DC_Motor_ON+0x112>
			VM8_Enable_A();
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005bf4:	4844      	ldr	r0, [pc, #272]	; (8005d08 <DC_Motor_ON+0x19c>)
 8005bf6:	f002 fa6b 	bl	80080d0 <HAL_GPIO_WritePin>
 8005bfa:	e040      	b.n	8005c7e <DC_Motor_ON+0x112>
		}
	}
	else if ( x == 'B' ){
 8005bfc:	7afb      	ldrb	r3, [r7, #11]
 8005bfe:	2b42      	cmp	r3, #66	; 0x42
 8005c00:	d13d      	bne.n	8005c7e <DC_Motor_ON+0x112>
		Motor[temp->MotorNumber].Status = Motor[temp->MotorNumber].Status | 0b00000001 ;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4a3c      	ldr	r2, [pc, #240]	; (8005cfc <DC_Motor_ON+0x190>)
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	440b      	add	r3, r1
 8005c12:	015b      	lsls	r3, r3, #5
 8005c14:	4413      	add	r3, r2
 8005c16:	3330      	adds	r3, #48	; 0x30
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005c20:	4611      	mov	r1, r2
 8005c22:	f043 0301 	orr.w	r3, r3, #1
 8005c26:	b2d8      	uxtb	r0, r3
 8005c28:	4a34      	ldr	r2, [pc, #208]	; (8005cfc <DC_Motor_ON+0x190>)
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	440b      	add	r3, r1
 8005c30:	015b      	lsls	r3, r3, #5
 8005c32:	4413      	add	r3, r2
 8005c34:	3330      	adds	r3, #48	; 0x30
 8005c36:	4602      	mov	r2, r0
 8005c38:	701a      	strb	r2, [r3, #0]
		if ( temp->MotorNumber == 6 ){
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c40:	2b06      	cmp	r3, #6
 8005c42:	d105      	bne.n	8005c50 <DC_Motor_ON+0xe4>
			VM6_Enable_B();
 8005c44:	2201      	movs	r2, #1
 8005c46:	2102      	movs	r1, #2
 8005c48:	482e      	ldr	r0, [pc, #184]	; (8005d04 <DC_Motor_ON+0x198>)
 8005c4a:	f002 fa41 	bl	80080d0 <HAL_GPIO_WritePin>
 8005c4e:	e016      	b.n	8005c7e <DC_Motor_ON+0x112>
		}
		else if ( temp->MotorNumber == 7 ){
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c56:	2b07      	cmp	r3, #7
 8005c58:	d106      	bne.n	8005c68 <DC_Motor_ON+0xfc>
			VM7_Enable_B();
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c60:	4829      	ldr	r0, [pc, #164]	; (8005d08 <DC_Motor_ON+0x19c>)
 8005c62:	f002 fa35 	bl	80080d0 <HAL_GPIO_WritePin>
 8005c66:	e00a      	b.n	8005c7e <DC_Motor_ON+0x112>
		}
		else if ( temp->MotorNumber == 8 ){
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c6e:	2b08      	cmp	r3, #8
 8005c70:	d105      	bne.n	8005c7e <DC_Motor_ON+0x112>
			VM8_Enable_B();
 8005c72:	2201      	movs	r2, #1
 8005c74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c78:	4823      	ldr	r0, [pc, #140]	; (8005d08 <DC_Motor_ON+0x19c>)
 8005c7a:	f002 fa29 	bl	80080d0 <HAL_GPIO_WritePin>
		}
	}

	Motor[temp->MotorNumber].NumberofSteps_StopAccel = Duty_Cycle;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c84:	4619      	mov	r1, r3
 8005c86:	4a1d      	ldr	r2, [pc, #116]	; (8005cfc <DC_Motor_ON+0x190>)
 8005c88:	460b      	mov	r3, r1
 8005c8a:	005b      	lsls	r3, r3, #1
 8005c8c:	440b      	add	r3, r1
 8005c8e:	015b      	lsls	r3, r3, #5
 8005c90:	4413      	add	r3, r2
 8005c92:	3350      	adds	r3, #80	; 0x50
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	601a      	str	r2, [r3, #0]
	Motor[temp->MotorNumber].AccelerationTimeTMR = Duty_Cycle * Motor[temp->MotorNumber].StepperSpeedTMR / 100 ;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	4a16      	ldr	r2, [pc, #88]	; (8005cfc <DC_Motor_ON+0x190>)
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	440b      	add	r3, r1
 8005ca8:	015b      	lsls	r3, r3, #5
 8005caa:	4413      	add	r3, r2
 8005cac:	3348      	adds	r3, #72	; 0x48
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	fb02 f303 	mul.w	r3, r2, r3
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005cbc:	4610      	mov	r0, r2
 8005cbe:	4a13      	ldr	r2, [pc, #76]	; (8005d0c <DC_Motor_ON+0x1a0>)
 8005cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc4:	095a      	lsrs	r2, r3, #5
 8005cc6:	490d      	ldr	r1, [pc, #52]	; (8005cfc <DC_Motor_ON+0x190>)
 8005cc8:	4603      	mov	r3, r0
 8005cca:	005b      	lsls	r3, r3, #1
 8005ccc:	4403      	add	r3, r0
 8005cce:	015b      	lsls	r3, r3, #5
 8005cd0:	440b      	add	r3, r1
 8005cd2:	3358      	adds	r3, #88	; 0x58
 8005cd4:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(Motor[temp->MotorNumber].htim_x);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4a07      	ldr	r2, [pc, #28]	; (8005cfc <DC_Motor_ON+0x190>)
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	440b      	add	r3, r1
 8005ce6:	015b      	lsls	r3, r3, #5
 8005ce8:	4413      	add	r3, r2
 8005cea:	3334      	adds	r3, #52	; 0x34
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f004 fd74 	bl	800a7dc <HAL_TIM_Base_Start_IT>
}
 8005cf4:	bf00      	nop
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	200008a8 	.word	0x200008a8
 8005d00:	40021000 	.word	0x40021000
 8005d04:	40021800 	.word	0x40021800
 8005d08:	40021400 	.word	0x40021400
 8005d0c:	51eb851f 	.word	0x51eb851f

08005d10 <DC_Motor_OFF>:

void DC_Motor_OFF(struct MotorDefine *temp ,char x)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	70fb      	strb	r3, [r7, #3]
	if ( x == 'A' ){
 8005d1c:	78fb      	ldrb	r3, [r7, #3]
 8005d1e:	2b41      	cmp	r3, #65	; 0x41
 8005d20:	d13d      	bne.n	8005d9e <DC_Motor_OFF+0x8e>
		Motor[temp->MotorNumber].Status = Motor[temp->MotorNumber].Status & 0b11111101 ;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d28:	4619      	mov	r1, r3
 8005d2a:	4a4e      	ldr	r2, [pc, #312]	; (8005e64 <DC_Motor_OFF+0x154>)
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	440b      	add	r3, r1
 8005d32:	015b      	lsls	r3, r3, #5
 8005d34:	4413      	add	r3, r2
 8005d36:	3330      	adds	r3, #48	; 0x30
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005d40:	4611      	mov	r1, r2
 8005d42:	f023 0302 	bic.w	r3, r3, #2
 8005d46:	b2d8      	uxtb	r0, r3
 8005d48:	4a46      	ldr	r2, [pc, #280]	; (8005e64 <DC_Motor_OFF+0x154>)
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	440b      	add	r3, r1
 8005d50:	015b      	lsls	r3, r3, #5
 8005d52:	4413      	add	r3, r2
 8005d54:	3330      	adds	r3, #48	; 0x30
 8005d56:	4602      	mov	r2, r0
 8005d58:	701a      	strb	r2, [r3, #0]
		if ( temp->MotorNumber == 6 ){
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d60:	2b06      	cmp	r3, #6
 8005d62:	d105      	bne.n	8005d70 <DC_Motor_OFF+0x60>
			VM6_Disable_A();
 8005d64:	2200      	movs	r2, #0
 8005d66:	2180      	movs	r1, #128	; 0x80
 8005d68:	483f      	ldr	r0, [pc, #252]	; (8005e68 <DC_Motor_OFF+0x158>)
 8005d6a:	f002 f9b1 	bl	80080d0 <HAL_GPIO_WritePin>
 8005d6e:	e057      	b.n	8005e20 <DC_Motor_OFF+0x110>
		}
		else if ( temp->MotorNumber == 7 ){
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d76:	2b07      	cmp	r3, #7
 8005d78:	d105      	bne.n	8005d86 <DC_Motor_OFF+0x76>
			VM7_Disable_A();
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	483b      	ldr	r0, [pc, #236]	; (8005e6c <DC_Motor_OFF+0x15c>)
 8005d80:	f002 f9a6 	bl	80080d0 <HAL_GPIO_WritePin>
 8005d84:	e04c      	b.n	8005e20 <DC_Motor_OFF+0x110>
		}
		else if ( temp->MotorNumber == 8 ){
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d8c:	2b08      	cmp	r3, #8
 8005d8e:	d147      	bne.n	8005e20 <DC_Motor_OFF+0x110>
			VM8_Disable_A();
 8005d90:	2200      	movs	r2, #0
 8005d92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d96:	4836      	ldr	r0, [pc, #216]	; (8005e70 <DC_Motor_OFF+0x160>)
 8005d98:	f002 f99a 	bl	80080d0 <HAL_GPIO_WritePin>
 8005d9c:	e040      	b.n	8005e20 <DC_Motor_OFF+0x110>
		}
	}
	else if ( x == 'B' ){
 8005d9e:	78fb      	ldrb	r3, [r7, #3]
 8005da0:	2b42      	cmp	r3, #66	; 0x42
 8005da2:	d13d      	bne.n	8005e20 <DC_Motor_OFF+0x110>
		Motor[temp->MotorNumber].Status = Motor[temp->MotorNumber].Status & 0b11111110 ;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005daa:	4619      	mov	r1, r3
 8005dac:	4a2d      	ldr	r2, [pc, #180]	; (8005e64 <DC_Motor_OFF+0x154>)
 8005dae:	460b      	mov	r3, r1
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	440b      	add	r3, r1
 8005db4:	015b      	lsls	r3, r3, #5
 8005db6:	4413      	add	r3, r2
 8005db8:	3330      	adds	r3, #48	; 0x30
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	f023 0301 	bic.w	r3, r3, #1
 8005dc8:	b2d8      	uxtb	r0, r3
 8005dca:	4a26      	ldr	r2, [pc, #152]	; (8005e64 <DC_Motor_OFF+0x154>)
 8005dcc:	460b      	mov	r3, r1
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	440b      	add	r3, r1
 8005dd2:	015b      	lsls	r3, r3, #5
 8005dd4:	4413      	add	r3, r2
 8005dd6:	3330      	adds	r3, #48	; 0x30
 8005dd8:	4602      	mov	r2, r0
 8005dda:	701a      	strb	r2, [r3, #0]
		if ( temp->MotorNumber == 6 ){
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005de2:	2b06      	cmp	r3, #6
 8005de4:	d105      	bne.n	8005df2 <DC_Motor_OFF+0xe2>
			VM6_Disable_B();
 8005de6:	2200      	movs	r2, #0
 8005de8:	2102      	movs	r1, #2
 8005dea:	4820      	ldr	r0, [pc, #128]	; (8005e6c <DC_Motor_OFF+0x15c>)
 8005dec:	f002 f970 	bl	80080d0 <HAL_GPIO_WritePin>
 8005df0:	e016      	b.n	8005e20 <DC_Motor_OFF+0x110>
		}
		else if ( temp->MotorNumber == 7 ){
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005df8:	2b07      	cmp	r3, #7
 8005dfa:	d106      	bne.n	8005e0a <DC_Motor_OFF+0xfa>
			VM7_Disable_B();
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e02:	481b      	ldr	r0, [pc, #108]	; (8005e70 <DC_Motor_OFF+0x160>)
 8005e04:	f002 f964 	bl	80080d0 <HAL_GPIO_WritePin>
 8005e08:	e00a      	b.n	8005e20 <DC_Motor_OFF+0x110>
		}
		else if ( temp->MotorNumber == 8 ){
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d105      	bne.n	8005e20 <DC_Motor_OFF+0x110>
			VM8_Disable_B();
 8005e14:	2200      	movs	r2, #0
 8005e16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e1a:	4815      	ldr	r0, [pc, #84]	; (8005e70 <DC_Motor_OFF+0x160>)
 8005e1c:	f002 f958 	bl	80080d0 <HAL_GPIO_WritePin>
		}
	}

	if ( Motor[6].Status | Motor[7].Status | Motor[8].Status ){;}
 8005e20:	4b10      	ldr	r3, [pc, #64]	; (8005e64 <DC_Motor_OFF+0x154>)
 8005e22:	f893 2270 	ldrb.w	r2, [r3, #624]	; 0x270
 8005e26:	4b0f      	ldr	r3, [pc, #60]	; (8005e64 <DC_Motor_OFF+0x154>)
 8005e28:	f893 32d0 	ldrb.w	r3, [r3, #720]	; 0x2d0
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	b2da      	uxtb	r2, r3
 8005e30:	4b0c      	ldr	r3, [pc, #48]	; (8005e64 <DC_Motor_OFF+0x154>)
 8005e32:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8005e36:	4313      	orrs	r3, r2
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10e      	bne.n	8005e5c <DC_Motor_OFF+0x14c>
	else{
		HAL_TIM_Base_Stop_IT(Motor[temp->MotorNumber].htim_x);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e44:	4619      	mov	r1, r3
 8005e46:	4a07      	ldr	r2, [pc, #28]	; (8005e64 <DC_Motor_OFF+0x154>)
 8005e48:	460b      	mov	r3, r1
 8005e4a:	005b      	lsls	r3, r3, #1
 8005e4c:	440b      	add	r3, r1
 8005e4e:	015b      	lsls	r3, r3, #5
 8005e50:	4413      	add	r3, r2
 8005e52:	3334      	adds	r3, #52	; 0x34
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f004 fd30 	bl	800a8bc <HAL_TIM_Base_Stop_IT>
	}
}
 8005e5c:	bf00      	nop
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	200008a8 	.word	0x200008a8
 8005e68:	40021000 	.word	0x40021000
 8005e6c:	40021800 	.word	0x40021800
 8005e70:	40021400 	.word	0x40021400

08005e74 <DuoTongDao_Position_Init>:
#define VP_first_place 126071 ;
#define VP_gap  18082
uint32_t VPMark[8] ={0};
struct DuoTongDao_SetPositionData data_V0 ;
void DuoTongDao_Position_Init(void)
{
 8005e74:	b480      	push	{r7}
 8005e76:	af00      	add	r7, sp, #0
	VPMark[0] = VP_first_place;		//bot
 8005e78:	4b2a      	ldr	r3, [pc, #168]	; (8005f24 <DuoTongDao_Position_Init+0xb0>)
 8005e7a:	4a2b      	ldr	r2, [pc, #172]	; (8005f28 <DuoTongDao_Position_Init+0xb4>)
 8005e7c:	601a      	str	r2, [r3, #0]
	VPMark[1] = VPMark[0] - VP_gap;
 8005e7e:	4b29      	ldr	r3, [pc, #164]	; (8005f24 <DuoTongDao_Position_Init+0xb0>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f5a3 438d 	sub.w	r3, r3, #18048	; 0x4680
 8005e86:	3b22      	subs	r3, #34	; 0x22
 8005e88:	4a26      	ldr	r2, [pc, #152]	; (8005f24 <DuoTongDao_Position_Init+0xb0>)
 8005e8a:	6053      	str	r3, [r2, #4]
	VPMark[2] = VPMark[1] - VP_gap;
 8005e8c:	4b25      	ldr	r3, [pc, #148]	; (8005f24 <DuoTongDao_Position_Init+0xb0>)
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f5a3 438d 	sub.w	r3, r3, #18048	; 0x4680
 8005e94:	3b22      	subs	r3, #34	; 0x22
 8005e96:	4a23      	ldr	r2, [pc, #140]	; (8005f24 <DuoTongDao_Position_Init+0xb0>)
 8005e98:	6093      	str	r3, [r2, #8]
	VPMark[3] = VPMark[2] - VP_gap;
 8005e9a:	4b22      	ldr	r3, [pc, #136]	; (8005f24 <DuoTongDao_Position_Init+0xb0>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f5a3 438d 	sub.w	r3, r3, #18048	; 0x4680
 8005ea2:	3b22      	subs	r3, #34	; 0x22
 8005ea4:	4a1f      	ldr	r2, [pc, #124]	; (8005f24 <DuoTongDao_Position_Init+0xb0>)
 8005ea6:	60d3      	str	r3, [r2, #12]
	VPMark[4] = VPMark[3] - VP_gap;
 8005ea8:	4b1e      	ldr	r3, [pc, #120]	; (8005f24 <DuoTongDao_Position_Init+0xb0>)
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f5a3 438d 	sub.w	r3, r3, #18048	; 0x4680
 8005eb0:	3b22      	subs	r3, #34	; 0x22
 8005eb2:	4a1c      	ldr	r2, [pc, #112]	; (8005f24 <DuoTongDao_Position_Init+0xb0>)
 8005eb4:	6113      	str	r3, [r2, #16]
	VPMark[5] = VPMark[4] - VP_gap;
 8005eb6:	4b1b      	ldr	r3, [pc, #108]	; (8005f24 <DuoTongDao_Position_Init+0xb0>)
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	f5a3 438d 	sub.w	r3, r3, #18048	; 0x4680
 8005ebe:	3b22      	subs	r3, #34	; 0x22
 8005ec0:	4a18      	ldr	r2, [pc, #96]	; (8005f24 <DuoTongDao_Position_Init+0xb0>)
 8005ec2:	6153      	str	r3, [r2, #20]
	VPMark[6] = VPMark[5] - VP_gap;
 8005ec4:	4b17      	ldr	r3, [pc, #92]	; (8005f24 <DuoTongDao_Position_Init+0xb0>)
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	f5a3 438d 	sub.w	r3, r3, #18048	; 0x4680
 8005ecc:	3b22      	subs	r3, #34	; 0x22
 8005ece:	4a15      	ldr	r2, [pc, #84]	; (8005f24 <DuoTongDao_Position_Init+0xb0>)
 8005ed0:	6193      	str	r3, [r2, #24]
	VPMark[7] = VPMark[6] - VP_gap;
 8005ed2:	4b14      	ldr	r3, [pc, #80]	; (8005f24 <DuoTongDao_Position_Init+0xb0>)
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	f5a3 438d 	sub.w	r3, r3, #18048	; 0x4680
 8005eda:	3b22      	subs	r3, #34	; 0x22
 8005edc:	4a11      	ldr	r2, [pc, #68]	; (8005f24 <DuoTongDao_Position_Init+0xb0>)
 8005ede:	61d3      	str	r3, [r2, #28]

	data_V0.Position_motor6_PushRod_reset = -16 ;
 8005ee0:	4b12      	ldr	r3, [pc, #72]	; (8005f2c <DuoTongDao_Position_Init+0xb8>)
 8005ee2:	f06f 020f 	mvn.w	r2, #15
 8005ee6:	601a      	str	r2, [r3, #0]
	data_V0.Position_motor6_PushRod_push = 496 ;
 8005ee8:	4b10      	ldr	r3, [pc, #64]	; (8005f2c <DuoTongDao_Position_Init+0xb8>)
 8005eea:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8005eee:	605a      	str	r2, [r3, #4]

	data_V0.Position_motor5_internal = -160 ;
 8005ef0:	4b0e      	ldr	r3, [pc, #56]	; (8005f2c <DuoTongDao_Position_Init+0xb8>)
 8005ef2:	f06f 029f 	mvn.w	r2, #159	; 0x9f
 8005ef6:	609a      	str	r2, [r3, #8]
	data_V0.Position_motor5_external = 960 ;
 8005ef8:	4b0c      	ldr	r3, [pc, #48]	; (8005f2c <DuoTongDao_Position_Init+0xb8>)
 8005efa:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8005efe:	60da      	str	r2, [r3, #12]

	data_V0.Position_motor3_reset = -512 ;
 8005f00:	4b0a      	ldr	r3, [pc, #40]	; (8005f2c <DuoTongDao_Position_Init+0xb8>)
 8005f02:	4a0b      	ldr	r2, [pc, #44]	; (8005f30 <DuoTongDao_Position_Init+0xbc>)
 8005f04:	61da      	str	r2, [r3, #28]
	data_V0.Position_motor3_detect =  52224;
 8005f06:	4b09      	ldr	r3, [pc, #36]	; (8005f2c <DuoTongDao_Position_Init+0xb8>)
 8005f08:	f44f 424c 	mov.w	r2, #52224	; 0xcc00
 8005f0c:	619a      	str	r2, [r3, #24]
	data_V0.Position_motor3_storage =  87808;
 8005f0e:	4b07      	ldr	r3, [pc, #28]	; (8005f2c <DuoTongDao_Position_Init+0xb8>)
 8005f10:	4a08      	ldr	r2, [pc, #32]	; (8005f34 <DuoTongDao_Position_Init+0xc0>)
 8005f12:	615a      	str	r2, [r3, #20]
	data_V0.Position_motor3_external = 125840 ;
 8005f14:	4b05      	ldr	r3, [pc, #20]	; (8005f2c <DuoTongDao_Position_Init+0xb8>)
 8005f16:	4a08      	ldr	r2, [pc, #32]	; (8005f38 <DuoTongDao_Position_Init+0xc4>)
 8005f18:	611a      	str	r2, [r3, #16]
}
 8005f1a:	bf00      	nop
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	20000c68 	.word	0x20000c68
 8005f28:	0001ec77 	.word	0x0001ec77
 8005f2c:	20000c88 	.word	0x20000c88
 8005f30:	fffffe00 	.word	0xfffffe00
 8005f34:	00015700 	.word	0x00015700
 8005f38:	0001eb90 	.word	0x0001eb90

08005f3c <deal_buffer_motorCtrl_data>:

#ifndef DushuModule
struct MotorDefine Motor_Temp ;

void deal_buffer_motorCtrl_data(struct MotorDefine *a)
{
 8005f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f40:	b08a      	sub	sp, #40	; 0x28
 8005f42:	af08      	add	r7, sp, #32
 8005f44:	6078      	str	r0, [r7, #4]
	a->MotorNumber = USART5_RX_BUF[1];
 8005f46:	4b44      	ldr	r3, [pc, #272]	; (8006058 <deal_buffer_motorCtrl_data+0x11c>)
 8005f48:	785a      	ldrb	r2, [r3, #1]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f883 2020 	strb.w	r2, [r3, #32]

	if ( USART5_RX_BUF[3] & 0b10000000 )  // 0x80
 8005f50:	4b41      	ldr	r3, [pc, #260]	; (8006058 <deal_buffer_motorCtrl_data+0x11c>)
 8005f52:	78db      	ldrb	r3, [r3, #3]
 8005f54:	b25b      	sxtb	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	da04      	bge.n	8005f64 <deal_buffer_motorCtrl_data+0x28>
	{
		a->MotorDirection = 1 ;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005f62:	e009      	b.n	8005f78 <deal_buffer_motorCtrl_data+0x3c>
	}
	else if (USART5_RX_BUF[3] & 0b01000000)	// 0x40
 8005f64:	4b3c      	ldr	r3, [pc, #240]	; (8006058 <deal_buffer_motorCtrl_data+0x11c>)
 8005f66:	78db      	ldrb	r3, [r3, #3]
 8005f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <deal_buffer_motorCtrl_data+0x3c>
	{
		a->MotorDirection = 0 ;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	//a->DesiredSpeedInRads =  (float)USART5_RX_BUF[4] / 10;
	a->DesiredSpeedInRads =  (float)USART5_RX_BUF[4] ;
 8005f78:	4b37      	ldr	r3, [pc, #220]	; (8006058 <deal_buffer_motorCtrl_data+0x11c>)
 8005f7a:	791b      	ldrb	r3, [r3, #4]
 8005f7c:	ee07 3a90 	vmov	s15, r3
 8005f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	edc3 7a05 	vstr	s15, [r3, #20]
	a->NumberofRads = (float)USART5_RX_BUF[5] + (float)USART5_RX_BUF[6] / 100 ;
 8005f8a:	4b33      	ldr	r3, [pc, #204]	; (8006058 <deal_buffer_motorCtrl_data+0x11c>)
 8005f8c:	795b      	ldrb	r3, [r3, #5]
 8005f8e:	ee07 3a90 	vmov	s15, r3
 8005f92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f96:	4b30      	ldr	r3, [pc, #192]	; (8006058 <deal_buffer_motorCtrl_data+0x11c>)
 8005f98:	799b      	ldrb	r3, [r3, #6]
 8005f9a:	ee07 3a90 	vmov	s15, r3
 8005f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa2:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800605c <deal_buffer_motorCtrl_data+0x120>
 8005fa6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	//a->StartupSpeedInRads = (float)USART5_RX_BUF[7] / 10 ;
	a->StartupSpeedInRads =  (float)USART5_RX_BUF[7] ;
 8005fb4:	4b28      	ldr	r3, [pc, #160]	; (8006058 <deal_buffer_motorCtrl_data+0x11c>)
 8005fb6:	79db      	ldrb	r3, [r3, #7]
 8005fb8:	ee07 3a90 	vmov	s15, r3
 8005fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	edc3 7a04 	vstr	s15, [r3, #16]
	a->accelerationRate = USART5_RX_BUF[8] * 100 ;
 8005fc6:	4b24      	ldr	r3, [pc, #144]	; (8006058 <deal_buffer_motorCtrl_data+0x11c>)
 8005fc8:	7a1b      	ldrb	r3, [r3, #8]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	2364      	movs	r3, #100	; 0x64
 8005fce:	fb02 f303 	mul.w	r3, r2, r3
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	619a      	str	r2, [r3, #24]
	a->decelerationRate = USART5_RX_BUF[9] * 100 ;
 8005fd8:	4b1f      	ldr	r3, [pc, #124]	; (8006058 <deal_buffer_motorCtrl_data+0x11c>)
 8005fda:	7a5b      	ldrb	r3, [r3, #9]
 8005fdc:	461a      	mov	r2, r3
 8005fde:	2364      	movs	r3, #100	; 0x64
 8005fe0:	fb02 f303 	mul.w	r3, r2, r3
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	61da      	str	r2, [r3, #28]

	printf("\r\nInput Information:\r\n");
 8005fea:	481d      	ldr	r0, [pc, #116]	; (8006060 <deal_buffer_motorCtrl_data+0x124>)
 8005fec:	f009 fe34 	bl	800fc58 <puts>
	printf("  MotorNumber:%d  MotorDirection:%d\r\n  DesiredSpeedInRads:%.2f\r\n  NumberofRads:%.2f\r\n  StartupSpeedInRads:%.2f\r\n  accelerationRate:%ld /Hz\r\n  decelerationRate:%ld /Hz\r\n"
	,a->MotorNumber,a->MotorDirection,a->DesiredSpeedInRads,a->NumberofRads,a->StartupSpeedInRads,a->accelerationRate,a->decelerationRate);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 3020 	ldrb.w	r3, [r3, #32]
	printf("  MotorNumber:%d  MotorDirection:%d\r\n  DesiredSpeedInRads:%.2f\r\n  NumberofRads:%.2f\r\n  StartupSpeedInRads:%.2f\r\n  accelerationRate:%ld /Hz\r\n  decelerationRate:%ld /Hz\r\n"
 8005ff6:	461e      	mov	r6, r3
	,a->MotorNumber,a->MotorDirection,a->DesiredSpeedInRads,a->NumberofRads,a->StartupSpeedInRads,a->accelerationRate,a->decelerationRate);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
	printf("  MotorNumber:%d  MotorDirection:%d\r\n  DesiredSpeedInRads:%.2f\r\n  NumberofRads:%.2f\r\n  StartupSpeedInRads:%.2f\r\n  accelerationRate:%ld /Hz\r\n  decelerationRate:%ld /Hz\r\n"
 8005ffe:	469a      	mov	sl, r3
	,a->MotorNumber,a->MotorDirection,a->DesiredSpeedInRads,a->NumberofRads,a->StartupSpeedInRads,a->accelerationRate,a->decelerationRate);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	695b      	ldr	r3, [r3, #20]
	printf("  MotorNumber:%d  MotorDirection:%d\r\n  DesiredSpeedInRads:%.2f\r\n  NumberofRads:%.2f\r\n  StartupSpeedInRads:%.2f\r\n  accelerationRate:%ld /Hz\r\n  decelerationRate:%ld /Hz\r\n"
 8006004:	4618      	mov	r0, r3
 8006006:	f7fa fa9f 	bl	8000548 <__aeabi_f2d>
 800600a:	4604      	mov	r4, r0
 800600c:	460d      	mov	r5, r1
	,a->MotorNumber,a->MotorDirection,a->DesiredSpeedInRads,a->NumberofRads,a->StartupSpeedInRads,a->accelerationRate,a->decelerationRate);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	printf("  MotorNumber:%d  MotorDirection:%d\r\n  DesiredSpeedInRads:%.2f\r\n  NumberofRads:%.2f\r\n  StartupSpeedInRads:%.2f\r\n  accelerationRate:%ld /Hz\r\n  decelerationRate:%ld /Hz\r\n"
 8006012:	4618      	mov	r0, r3
 8006014:	f7fa fa98 	bl	8000548 <__aeabi_f2d>
 8006018:	4680      	mov	r8, r0
 800601a:	4689      	mov	r9, r1
	,a->MotorNumber,a->MotorDirection,a->DesiredSpeedInRads,a->NumberofRads,a->StartupSpeedInRads,a->accelerationRate,a->decelerationRate);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	691b      	ldr	r3, [r3, #16]
	printf("  MotorNumber:%d  MotorDirection:%d\r\n  DesiredSpeedInRads:%.2f\r\n  NumberofRads:%.2f\r\n  StartupSpeedInRads:%.2f\r\n  accelerationRate:%ld /Hz\r\n  decelerationRate:%ld /Hz\r\n"
 8006020:	4618      	mov	r0, r3
 8006022:	f7fa fa91 	bl	8000548 <__aeabi_f2d>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	6879      	ldr	r1, [r7, #4]
 800602c:	6989      	ldr	r1, [r1, #24]
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	69c0      	ldr	r0, [r0, #28]
 8006032:	9007      	str	r0, [sp, #28]
 8006034:	9106      	str	r1, [sp, #24]
 8006036:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800603a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800603e:	e9cd 4500 	strd	r4, r5, [sp]
 8006042:	4652      	mov	r2, sl
 8006044:	4631      	mov	r1, r6
 8006046:	4807      	ldr	r0, [pc, #28]	; (8006064 <deal_buffer_motorCtrl_data+0x128>)
 8006048:	f009 fd80 	bl	800fb4c <iprintf>
}
 800604c:	bf00      	nop
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006056:	bf00      	nop
 8006058:	20000730 	.word	0x20000730
 800605c:	42c80000 	.word	0x42c80000
 8006060:	08012154 	.word	0x08012154
 8006064:	0801216c 	.word	0x0801216c

08006068 <deal_buffer_motorCtrl_position>:


void deal_buffer_motorCtrl_position(struct MotorDefine *a)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
	a->MotorNumber = USART5_RX_BUF[1];
 8006070:	4b1b      	ldr	r3, [pc, #108]	; (80060e0 <deal_buffer_motorCtrl_position+0x78>)
 8006072:	785a      	ldrb	r2, [r3, #1]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f883 2020 	strb.w	r2, [r3, #32]
	if ( USART5_RX_BUF[4] == 1){
 800607a:	4b19      	ldr	r3, [pc, #100]	; (80060e0 <deal_buffer_motorCtrl_position+0x78>)
 800607c:	791b      	ldrb	r3, [r3, #4]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d10d      	bne.n	800609e <deal_buffer_motorCtrl_position+0x36>
		a->TargetPosition = USART5_RX_BUF[7] + USART5_RX_BUF[6] * 16*16 + USART5_RX_BUF[5] * 16*16*16*16 ;
 8006082:	4b17      	ldr	r3, [pc, #92]	; (80060e0 <deal_buffer_motorCtrl_position+0x78>)
 8006084:	79db      	ldrb	r3, [r3, #7]
 8006086:	461a      	mov	r2, r3
 8006088:	4b15      	ldr	r3, [pc, #84]	; (80060e0 <deal_buffer_motorCtrl_position+0x78>)
 800608a:	799b      	ldrb	r3, [r3, #6]
 800608c:	021b      	lsls	r3, r3, #8
 800608e:	441a      	add	r2, r3
 8006090:	4b13      	ldr	r3, [pc, #76]	; (80060e0 <deal_buffer_motorCtrl_position+0x78>)
 8006092:	795b      	ldrb	r3, [r3, #5]
 8006094:	041b      	lsls	r3, r3, #16
 8006096:	441a      	add	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	62da      	str	r2, [r3, #44]	; 0x2c
 800609c:	e011      	b.n	80060c2 <deal_buffer_motorCtrl_position+0x5a>
	}
	else if ( USART5_RX_BUF[4] == 0){
 800609e:	4b10      	ldr	r3, [pc, #64]	; (80060e0 <deal_buffer_motorCtrl_position+0x78>)
 80060a0:	791b      	ldrb	r3, [r3, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10d      	bne.n	80060c2 <deal_buffer_motorCtrl_position+0x5a>
		a->TargetPosition = - (USART5_RX_BUF[7] + USART5_RX_BUF[6] * 16*16 + USART5_RX_BUF[5] * 16*16*16*16) ;
 80060a6:	4b0e      	ldr	r3, [pc, #56]	; (80060e0 <deal_buffer_motorCtrl_position+0x78>)
 80060a8:	79db      	ldrb	r3, [r3, #7]
 80060aa:	461a      	mov	r2, r3
 80060ac:	4b0c      	ldr	r3, [pc, #48]	; (80060e0 <deal_buffer_motorCtrl_position+0x78>)
 80060ae:	799b      	ldrb	r3, [r3, #6]
 80060b0:	021b      	lsls	r3, r3, #8
 80060b2:	441a      	add	r2, r3
 80060b4:	4b0a      	ldr	r3, [pc, #40]	; (80060e0 <deal_buffer_motorCtrl_position+0x78>)
 80060b6:	795b      	ldrb	r3, [r3, #5]
 80060b8:	041b      	lsls	r3, r3, #16
 80060ba:	4413      	add	r3, r2
 80060bc:	425a      	negs	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	printf("\r\nInput Information: Motor%d goes to TargetPosition:%ld\r\n",a->MotorNumber,a->TargetPosition);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060c8:	4619      	mov	r1, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ce:	461a      	mov	r2, r3
 80060d0:	4804      	ldr	r0, [pc, #16]	; (80060e4 <deal_buffer_motorCtrl_position+0x7c>)
 80060d2:	f009 fd3b 	bl	800fb4c <iprintf>
}
 80060d6:	bf00      	nop
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20000730 	.word	0x20000730
 80060e4:	08012218 	.word	0x08012218

080060e8 <deal_buffer_motorCtrl_reset>:

void deal_buffer_motorCtrl_reset(struct MotorDefine *a)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
	a->MotorNumber = USART5_RX_BUF[1];
 80060f0:	4b07      	ldr	r3, [pc, #28]	; (8006110 <deal_buffer_motorCtrl_reset+0x28>)
 80060f2:	785a      	ldrb	r2, [r3, #1]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f883 2020 	strb.w	r2, [r3, #32]

	printf("\r\nInput Information: Reset Motor%d\r\n",a->MotorNumber);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006100:	4619      	mov	r1, r3
 8006102:	4804      	ldr	r0, [pc, #16]	; (8006114 <deal_buffer_motorCtrl_reset+0x2c>)
 8006104:	f009 fd22 	bl	800fb4c <iprintf>
}
 8006108:	bf00      	nop
 800610a:	3708      	adds	r7, #8
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	20000730 	.word	0x20000730
 8006114:	08012254 	.word	0x08012254

08006118 <deal_buffer_DCmotorCtrl>:

void deal_buffer_DCmotorCtrl(struct MotorDefine *a)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
	a->MotorNumber = USART5_RX_BUF[1];
 8006120:	4b11      	ldr	r3, [pc, #68]	; (8006168 <deal_buffer_DCmotorCtrl+0x50>)
 8006122:	785a      	ldrb	r2, [r3, #1]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f883 2020 	strb.w	r2, [r3, #32]
	a->NumberofSteps_StopAccel = USART5_RX_BUF[6];
 800612a:	4b0f      	ldr	r3, [pc, #60]	; (8006168 <deal_buffer_DCmotorCtrl+0x50>)
 800612c:	799b      	ldrb	r3, [r3, #6]
 800612e:	461a      	mov	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	651a      	str	r2, [r3, #80]	; 0x50
	if (USART5_RX_BUF[4] == 0x00 ){
 8006134:	4b0c      	ldr	r3, [pc, #48]	; (8006168 <deal_buffer_DCmotorCtrl+0x50>)
 8006136:	791b      	ldrb	r3, [r3, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d107      	bne.n	800614c <deal_buffer_DCmotorCtrl+0x34>
		printf("\r\nInput Information: DC Motor%d STOP! \r\n",a->MotorNumber);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006142:	4619      	mov	r1, r3
 8006144:	4809      	ldr	r0, [pc, #36]	; (800616c <deal_buffer_DCmotorCtrl+0x54>)
 8006146:	f009 fd01 	bl	800fb4c <iprintf>
	}
	else{
		printf("\r\nInput Information: DC Motor%d Run,Duty Cycle: %ld percent\r\n",a->MotorNumber,a->NumberofSteps_StopAccel);
	}
}
 800614a:	e009      	b.n	8006160 <deal_buffer_DCmotorCtrl+0x48>
		printf("\r\nInput Information: DC Motor%d Run,Duty Cycle: %ld percent\r\n",a->MotorNumber,a->NumberofSteps_StopAccel);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006152:	4619      	mov	r1, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006158:	461a      	mov	r2, r3
 800615a:	4805      	ldr	r0, [pc, #20]	; (8006170 <deal_buffer_DCmotorCtrl+0x58>)
 800615c:	f009 fcf6 	bl	800fb4c <iprintf>
}
 8006160:	bf00      	nop
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	20000730 	.word	0x20000730
 800616c:	0801227c 	.word	0x0801227c
 8006170:	080122a8 	.word	0x080122a8

08006174 <StartmessageTask>:

void StartmessageTask(void *argument)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
	osDelay(20);
 800617c:	2014      	movs	r0, #20
 800617e:	f006 fa0f 	bl	800c5a0 <osDelay>
	uint8_t len = 0;
 8006182:	2300      	movs	r3, #0
 8006184:	73fb      	strb	r3, [r7, #15]
	printf("messageTask starts! \r\n");
 8006186:	4849      	ldr	r0, [pc, #292]	; (80062ac <StartmessageTask+0x138>)
 8006188:	f009 fd66 	bl	800fc58 <puts>

	for(;;){
		osDelay(1);
 800618c:	2001      	movs	r0, #1
 800618e:	f006 fa07 	bl	800c5a0 <osDelay>
	    if(USART_RX_STA&0x8000)
 8006192:	4b47      	ldr	r3, [pc, #284]	; (80062b0 <StartmessageTask+0x13c>)
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	b21b      	sxth	r3, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	f280 8084 	bge.w	80062a6 <StartmessageTask+0x132>
		{
	    	len=USART_RX_STA&0x3fff;
 800619e:	4b44      	ldr	r3, [pc, #272]	; (80062b0 <StartmessageTask+0x13c>)
 80061a0:	881b      	ldrh	r3, [r3, #0]
 80061a2:	73fb      	strb	r3, [r7, #15]

			switch ( USART5_RX_BUF[2] )
 80061a4:	4b43      	ldr	r3, [pc, #268]	; (80062b4 <StartmessageTask+0x140>)
 80061a6:	789b      	ldrb	r3, [r3, #2]
 80061a8:	2b80      	cmp	r3, #128	; 0x80
 80061aa:	d00e      	beq.n	80061ca <StartmessageTask+0x56>
 80061ac:	2b80      	cmp	r3, #128	; 0x80
 80061ae:	dced      	bgt.n	800618c <StartmessageTask+0x18>
 80061b0:	2b40      	cmp	r3, #64	; 0x40
 80061b2:	d01d      	beq.n	80061f0 <StartmessageTask+0x7c>
 80061b4:	2b40      	cmp	r3, #64	; 0x40
 80061b6:	dce9      	bgt.n	800618c <StartmessageTask+0x18>
 80061b8:	2b20      	cmp	r3, #32
 80061ba:	d023      	beq.n	8006204 <StartmessageTask+0x90>
 80061bc:	2b20      	cmp	r3, #32
 80061be:	dce5      	bgt.n	800618c <StartmessageTask+0x18>
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d05d      	beq.n	8006280 <StartmessageTask+0x10c>
 80061c4:	2b10      	cmp	r3, #16
 80061c6:	d027      	beq.n	8006218 <StartmessageTask+0xa4>
 80061c8:	e06e      	b.n	80062a8 <StartmessageTask+0x134>
			{
			/***   电机控制-位置模式 ，16进制0x80  ***/
			case 0b10000000:
				deal_buffer_motorCtrl_position(&Motor_Temp);
 80061ca:	483b      	ldr	r0, [pc, #236]	; (80062b8 <StartmessageTask+0x144>)
 80061cc:	f7ff ff4c 	bl	8006068 <deal_buffer_motorCtrl_position>
				if (USART5_RX_BUF[3] & 0b00000001){			// 不带编码器模式
 80061d0:	4b38      	ldr	r3, [pc, #224]	; (80062b4 <StartmessageTask+0x140>)
 80061d2:	78db      	ldrb	r3, [r3, #3]
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d005      	beq.n	80061e8 <StartmessageTask+0x74>
					MotorMove_position(&Motor_Temp,Motor_Temp.TargetPosition);
 80061dc:	4b36      	ldr	r3, [pc, #216]	; (80062b8 <StartmessageTask+0x144>)
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e0:	4619      	mov	r1, r3
 80061e2:	4835      	ldr	r0, [pc, #212]	; (80062b8 <StartmessageTask+0x144>)
 80061e4:	f7fe f942 	bl	800446c <MotorMove_position>
#ifdef JiaYangZhen_EncoderMode
				else if (USART5_RX_BUF[3] & 0b00000010){	// 带编码器模式
					MotorMove_position_Enocder(&Motor_Temp,Motor_Temp.TargetPosition);
				}
#endif
				USART_RX_STA=0;
 80061e8:	4b31      	ldr	r3, [pc, #196]	; (80062b0 <StartmessageTask+0x13c>)
 80061ea:	2200      	movs	r2, #0
 80061ec:	801a      	strh	r2, [r3, #0]
			break;
 80061ee:	e05b      	b.n	80062a8 <StartmessageTask+0x134>

			/***   电机控制-参数模式 ，16进制0x40  ***/
			case 0b01000000:
				deal_buffer_motorCtrl_data(&Motor_Temp);
 80061f0:	4831      	ldr	r0, [pc, #196]	; (80062b8 <StartmessageTask+0x144>)
 80061f2:	f7ff fea3 	bl	8005f3c <deal_buffer_motorCtrl_data>
				MotorMove_steps(&Motor_Temp);
 80061f6:	4830      	ldr	r0, [pc, #192]	; (80062b8 <StartmessageTask+0x144>)
 80061f8:	f7fd ff6e 	bl	80040d8 <MotorMove_steps>
				USART_RX_STA=0;
 80061fc:	4b2c      	ldr	r3, [pc, #176]	; (80062b0 <StartmessageTask+0x13c>)
 80061fe:	2200      	movs	r2, #0
 8006200:	801a      	strh	r2, [r3, #0]
			break;
 8006202:	e051      	b.n	80062a8 <StartmessageTask+0x134>

			/***   电机控制-复位 ，16进制0x20  ***/
			case 0b00100000:
				deal_buffer_motorCtrl_reset(&Motor_Temp);
 8006204:	482c      	ldr	r0, [pc, #176]	; (80062b8 <StartmessageTask+0x144>)
 8006206:	f7ff ff6f 	bl	80060e8 <deal_buffer_motorCtrl_reset>
				Motor_Reset(&Motor_Temp);
 800620a:	482b      	ldr	r0, [pc, #172]	; (80062b8 <StartmessageTask+0x144>)
 800620c:	f7ff f8ae 	bl	800536c <Motor_Reset>
				USART_RX_STA=0;
 8006210:	4b27      	ldr	r3, [pc, #156]	; (80062b0 <StartmessageTask+0x13c>)
 8006212:	2200      	movs	r2, #0
 8006214:	801a      	strh	r2, [r3, #0]
			break;
 8006216:	e047      	b.n	80062a8 <StartmessageTask+0x134>

			/***   直流电机控制 0x10  ***/
			case 0b00010000:
				deal_buffer_DCmotorCtrl(&Motor_Temp);
 8006218:	4827      	ldr	r0, [pc, #156]	; (80062b8 <StartmessageTask+0x144>)
 800621a:	f7ff ff7d 	bl	8006118 <deal_buffer_DCmotorCtrl>
				if (USART5_RX_BUF[4] == 0x00 ){
 800621e:	4b25      	ldr	r3, [pc, #148]	; (80062b4 <StartmessageTask+0x140>)
 8006220:	791b      	ldrb	r3, [r3, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d111      	bne.n	800624a <StartmessageTask+0xd6>
					if( USART5_RX_BUF[5] == 0x02 ){
 8006226:	4b23      	ldr	r3, [pc, #140]	; (80062b4 <StartmessageTask+0x140>)
 8006228:	795b      	ldrb	r3, [r3, #5]
 800622a:	2b02      	cmp	r3, #2
 800622c:	d104      	bne.n	8006238 <StartmessageTask+0xc4>
						DC_Motor_OFF(&Motor_Temp,'A');
 800622e:	2141      	movs	r1, #65	; 0x41
 8006230:	4821      	ldr	r0, [pc, #132]	; (80062b8 <StartmessageTask+0x144>)
 8006232:	f7ff fd6d 	bl	8005d10 <DC_Motor_OFF>
 8006236:	e01f      	b.n	8006278 <StartmessageTask+0x104>
					}
					else if( USART5_RX_BUF[5] == 0x01 ){
 8006238:	4b1e      	ldr	r3, [pc, #120]	; (80062b4 <StartmessageTask+0x140>)
 800623a:	795b      	ldrb	r3, [r3, #5]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d11b      	bne.n	8006278 <StartmessageTask+0x104>
						DC_Motor_OFF(&Motor_Temp,'B');
 8006240:	2142      	movs	r1, #66	; 0x42
 8006242:	481d      	ldr	r0, [pc, #116]	; (80062b8 <StartmessageTask+0x144>)
 8006244:	f7ff fd64 	bl	8005d10 <DC_Motor_OFF>
 8006248:	e016      	b.n	8006278 <StartmessageTask+0x104>
					}
				}
				else{
					if( USART5_RX_BUF[5] == 0x02 ){
 800624a:	4b1a      	ldr	r3, [pc, #104]	; (80062b4 <StartmessageTask+0x140>)
 800624c:	795b      	ldrb	r3, [r3, #5]
 800624e:	2b02      	cmp	r3, #2
 8006250:	d107      	bne.n	8006262 <StartmessageTask+0xee>
						DC_Motor_ON(&Motor_Temp,'A',USART5_RX_BUF[6]);
 8006252:	4b18      	ldr	r3, [pc, #96]	; (80062b4 <StartmessageTask+0x140>)
 8006254:	799b      	ldrb	r3, [r3, #6]
 8006256:	461a      	mov	r2, r3
 8006258:	2141      	movs	r1, #65	; 0x41
 800625a:	4817      	ldr	r0, [pc, #92]	; (80062b8 <StartmessageTask+0x144>)
 800625c:	f7ff fc86 	bl	8005b6c <DC_Motor_ON>
 8006260:	e00a      	b.n	8006278 <StartmessageTask+0x104>
					}
					else if( USART5_RX_BUF[5] == 0x01 ){
 8006262:	4b14      	ldr	r3, [pc, #80]	; (80062b4 <StartmessageTask+0x140>)
 8006264:	795b      	ldrb	r3, [r3, #5]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d106      	bne.n	8006278 <StartmessageTask+0x104>
						DC_Motor_ON(&Motor_Temp,'B',USART5_RX_BUF[6]);
 800626a:	4b12      	ldr	r3, [pc, #72]	; (80062b4 <StartmessageTask+0x140>)
 800626c:	799b      	ldrb	r3, [r3, #6]
 800626e:	461a      	mov	r2, r3
 8006270:	2142      	movs	r1, #66	; 0x42
 8006272:	4811      	ldr	r0, [pc, #68]	; (80062b8 <StartmessageTask+0x144>)
 8006274:	f7ff fc7a 	bl	8005b6c <DC_Motor_ON>
					}
				}
				USART_RX_STA=0;
 8006278:	4b0d      	ldr	r3, [pc, #52]	; (80062b0 <StartmessageTask+0x13c>)
 800627a:	2200      	movs	r2, #0
 800627c:	801a      	strh	r2, [r3, #0]
			break;
 800627e:	e013      	b.n	80062a8 <StartmessageTask+0x134>

			/***   打印回传接收到的协议数据  0x01  ***/
			case 0b00000001:
				HAL_UART_Transmit_IT(&huart5, USART5_RX_BUF,len);
 8006280:	7bfb      	ldrb	r3, [r7, #15]
 8006282:	b29b      	uxth	r3, r3
 8006284:	461a      	mov	r2, r3
 8006286:	490b      	ldr	r1, [pc, #44]	; (80062b4 <StartmessageTask+0x140>)
 8006288:	480c      	ldr	r0, [pc, #48]	; (80062bc <StartmessageTask+0x148>)
 800628a:	f005 f88c 	bl	800b3a6 <HAL_UART_Transmit_IT>
				while(__HAL_UART_GET_FLAG(&huart5,UART_FLAG_TC)!=SET);
 800628e:	bf00      	nop
 8006290:	4b0a      	ldr	r3, [pc, #40]	; (80062bc <StartmessageTask+0x148>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629a:	2b40      	cmp	r3, #64	; 0x40
 800629c:	d1f8      	bne.n	8006290 <StartmessageTask+0x11c>
				USART_RX_STA=0;
 800629e:	4b04      	ldr	r3, [pc, #16]	; (80062b0 <StartmessageTask+0x13c>)
 80062a0:	2200      	movs	r2, #0
 80062a2:	801a      	strh	r2, [r3, #0]
			break;
 80062a4:	e000      	b.n	80062a8 <StartmessageTask+0x134>

			}
		}
 80062a6:	bf00      	nop
		osDelay(1);
 80062a8:	e770      	b.n	800618c <StartmessageTask+0x18>
 80062aa:	bf00      	nop
 80062ac:	080122e8 	.word	0x080122e8
 80062b0:	20000794 	.word	0x20000794
 80062b4:	20000730 	.word	0x20000730
 80062b8:	20000ca8 	.word	0x20000ca8
 80062bc:	200007dc 	.word	0x200007dc

080062c0 <DTD_Motors_Init>:


#ifdef DuoTongDao

uint8_t DTD_Motors_Init(void)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	af00      	add	r7, sp, #0
	printf("DTD Reseting Motors:3-5-6-2 ...\r\n");
 80062c4:	4858      	ldr	r0, [pc, #352]	; (8006428 <DTD_Motors_Init+0x168>)
 80062c6:	f009 fcc7 	bl	800fc58 <puts>

	Motor3_Enable();	// reset motor3 and goto external side
 80062ca:	2200      	movs	r2, #0
 80062cc:	2101      	movs	r1, #1
 80062ce:	4857      	ldr	r0, [pc, #348]	; (800642c <DTD_Motors_Init+0x16c>)
 80062d0:	f001 fefe 	bl	80080d0 <HAL_GPIO_WritePin>
	if ( !(Motor_Reset(&Motor[3])) ){
 80062d4:	4856      	ldr	r0, [pc, #344]	; (8006430 <DTD_Motors_Init+0x170>)
 80062d6:	f7ff f849 	bl	800536c <Motor_Reset>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d109      	bne.n	80062f4 <DTD_Motors_Init+0x34>
		Motor3_Disable();
 80062e0:	2201      	movs	r2, #1
 80062e2:	2101      	movs	r1, #1
 80062e4:	4851      	ldr	r0, [pc, #324]	; (800642c <DTD_Motors_Init+0x16c>)
 80062e6:	f001 fef3 	bl	80080d0 <HAL_GPIO_WritePin>
		printf("[WRONG!]Motor3 reset failed! ...\r\n");\
 80062ea:	4852      	ldr	r0, [pc, #328]	; (8006434 <DTD_Motors_Init+0x174>)
 80062ec:	f009 fcb4 	bl	800fc58 <puts>
		return FAIL ;
 80062f0:	2300      	movs	r3, #0
 80062f2:	e096      	b.n	8006422 <DTD_Motors_Init+0x162>
	}
	HAL_Delay(200);
 80062f4:	20c8      	movs	r0, #200	; 0xc8
 80062f6:	f000 fc69 	bl	8006bcc <HAL_Delay>
	MotorMove_position(&Motor[3],data_V0.Position_motor3_external);
 80062fa:	4b4f      	ldr	r3, [pc, #316]	; (8006438 <DTD_Motors_Init+0x178>)
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	4619      	mov	r1, r3
 8006300:	484b      	ldr	r0, [pc, #300]	; (8006430 <DTD_Motors_Init+0x170>)
 8006302:	f7fe f8b3 	bl	800446c <MotorMove_position>
	HAL_Delay(200);
 8006306:	20c8      	movs	r0, #200	; 0xc8
 8006308:	f000 fc60 	bl	8006bcc <HAL_Delay>
	while(Motor[3].Status){
 800630c:	e002      	b.n	8006314 <DTD_Motors_Init+0x54>
		HAL_Delay(100);
 800630e:	2064      	movs	r0, #100	; 0x64
 8006310:	f000 fc5c 	bl	8006bcc <HAL_Delay>
	while(Motor[3].Status){
 8006314:	4b49      	ldr	r3, [pc, #292]	; (800643c <DTD_Motors_Init+0x17c>)
 8006316:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1f7      	bne.n	800630e <DTD_Motors_Init+0x4e>
	}

	VM5_Enable_A();	VM5_Enable_B();	// reset motor5 and goto external side
 800631e:	2201      	movs	r2, #1
 8006320:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006324:	4841      	ldr	r0, [pc, #260]	; (800642c <DTD_Motors_Init+0x16c>)
 8006326:	f001 fed3 	bl	80080d0 <HAL_GPIO_WritePin>
 800632a:	2201      	movs	r2, #1
 800632c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006330:	483e      	ldr	r0, [pc, #248]	; (800642c <DTD_Motors_Init+0x16c>)
 8006332:	f001 fecd 	bl	80080d0 <HAL_GPIO_WritePin>
	if ( !(Motor_Reset(&Motor[5])) ){
 8006336:	4842      	ldr	r0, [pc, #264]	; (8006440 <DTD_Motors_Init+0x180>)
 8006338:	f7ff f818 	bl	800536c <Motor_Reset>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d110      	bne.n	8006364 <DTD_Motors_Init+0xa4>
		VM5_Disable_A(); VM5_Disable_B();
 8006342:	2200      	movs	r2, #0
 8006344:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006348:	4838      	ldr	r0, [pc, #224]	; (800642c <DTD_Motors_Init+0x16c>)
 800634a:	f001 fec1 	bl	80080d0 <HAL_GPIO_WritePin>
 800634e:	2200      	movs	r2, #0
 8006350:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006354:	4835      	ldr	r0, [pc, #212]	; (800642c <DTD_Motors_Init+0x16c>)
 8006356:	f001 febb 	bl	80080d0 <HAL_GPIO_WritePin>
		printf("[WRONG!]Motor5 reset failed! ...\r\n");\
 800635a:	483a      	ldr	r0, [pc, #232]	; (8006444 <DTD_Motors_Init+0x184>)
 800635c:	f009 fc7c 	bl	800fc58 <puts>
		return FAIL ;
 8006360:	2300      	movs	r3, #0
 8006362:	e05e      	b.n	8006422 <DTD_Motors_Init+0x162>
	}

	VM6_Enable_A();	VM6_Enable_B();	// reset motor6
 8006364:	2201      	movs	r2, #1
 8006366:	2180      	movs	r1, #128	; 0x80
 8006368:	4830      	ldr	r0, [pc, #192]	; (800642c <DTD_Motors_Init+0x16c>)
 800636a:	f001 feb1 	bl	80080d0 <HAL_GPIO_WritePin>
 800636e:	2201      	movs	r2, #1
 8006370:	2102      	movs	r1, #2
 8006372:	4835      	ldr	r0, [pc, #212]	; (8006448 <DTD_Motors_Init+0x188>)
 8006374:	f001 feac 	bl	80080d0 <HAL_GPIO_WritePin>
	if ( !(Motor_Reset(&Motor[6])) ){
 8006378:	4834      	ldr	r0, [pc, #208]	; (800644c <DTD_Motors_Init+0x18c>)
 800637a:	f7fe fff7 	bl	800536c <Motor_Reset>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10e      	bne.n	80063a2 <DTD_Motors_Init+0xe2>
		VM6_Disable_A(); VM6_Disable_B();
 8006384:	2200      	movs	r2, #0
 8006386:	2180      	movs	r1, #128	; 0x80
 8006388:	4828      	ldr	r0, [pc, #160]	; (800642c <DTD_Motors_Init+0x16c>)
 800638a:	f001 fea1 	bl	80080d0 <HAL_GPIO_WritePin>
 800638e:	2200      	movs	r2, #0
 8006390:	2102      	movs	r1, #2
 8006392:	482d      	ldr	r0, [pc, #180]	; (8006448 <DTD_Motors_Init+0x188>)
 8006394:	f001 fe9c 	bl	80080d0 <HAL_GPIO_WritePin>
		printf("[WRONG!]Motor6 reset failed! ...\r\n");\
 8006398:	482d      	ldr	r0, [pc, #180]	; (8006450 <DTD_Motors_Init+0x190>)
 800639a:	f009 fc5d 	bl	800fc58 <puts>
		return FAIL ;
 800639e:	2300      	movs	r3, #0
 80063a0:	e03f      	b.n	8006422 <DTD_Motors_Init+0x162>
	}

	HAL_Delay(200);
 80063a2:	20c8      	movs	r0, #200	; 0xc8
 80063a4:	f000 fc12 	bl	8006bcc <HAL_Delay>
	MotorMove_position(&Motor[5],data_V0.Position_motor5_external);
 80063a8:	4b23      	ldr	r3, [pc, #140]	; (8006438 <DTD_Motors_Init+0x178>)
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	4619      	mov	r1, r3
 80063ae:	4824      	ldr	r0, [pc, #144]	; (8006440 <DTD_Motors_Init+0x180>)
 80063b0:	f7fe f85c 	bl	800446c <MotorMove_position>
	HAL_Delay(200);
 80063b4:	20c8      	movs	r0, #200	; 0xc8
 80063b6:	f000 fc09 	bl	8006bcc <HAL_Delay>
	while(Motor[5].Status){
 80063ba:	e002      	b.n	80063c2 <DTD_Motors_Init+0x102>
		HAL_Delay(100);
 80063bc:	2064      	movs	r0, #100	; 0x64
 80063be:	f000 fc05 	bl	8006bcc <HAL_Delay>
	while(Motor[5].Status){
 80063c2:	4b1e      	ldr	r3, [pc, #120]	; (800643c <DTD_Motors_Init+0x17c>)
 80063c4:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1f7      	bne.n	80063bc <DTD_Motors_Init+0xfc>
	}


	Motor2_Enable();	// reset motor2 and goto top one
 80063cc:	2200      	movs	r2, #0
 80063ce:	2180      	movs	r1, #128	; 0x80
 80063d0:	4820      	ldr	r0, [pc, #128]	; (8006454 <DTD_Motors_Init+0x194>)
 80063d2:	f001 fe7d 	bl	80080d0 <HAL_GPIO_WritePin>
	if ( !(Motor_Reset(&Motor[2])) ){
 80063d6:	4820      	ldr	r0, [pc, #128]	; (8006458 <DTD_Motors_Init+0x198>)
 80063d8:	f7fe ffc8 	bl	800536c <Motor_Reset>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d109      	bne.n	80063f6 <DTD_Motors_Init+0x136>
		Motor2_Disable();
 80063e2:	2201      	movs	r2, #1
 80063e4:	2180      	movs	r1, #128	; 0x80
 80063e6:	481b      	ldr	r0, [pc, #108]	; (8006454 <DTD_Motors_Init+0x194>)
 80063e8:	f001 fe72 	bl	80080d0 <HAL_GPIO_WritePin>
		printf("[WRONG!]Motor2 reset failed! ...\r\n");\
 80063ec:	481b      	ldr	r0, [pc, #108]	; (800645c <DTD_Motors_Init+0x19c>)
 80063ee:	f009 fc33 	bl	800fc58 <puts>
		return FAIL ;
 80063f2:	2300      	movs	r3, #0
 80063f4:	e015      	b.n	8006422 <DTD_Motors_Init+0x162>
	}
	HAL_Delay(200);
 80063f6:	20c8      	movs	r0, #200	; 0xc8
 80063f8:	f000 fbe8 	bl	8006bcc <HAL_Delay>
	MotorMove_position(&Motor[2],VPMark[6]);
 80063fc:	4b18      	ldr	r3, [pc, #96]	; (8006460 <DTD_Motors_Init+0x1a0>)
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	4619      	mov	r1, r3
 8006402:	4815      	ldr	r0, [pc, #84]	; (8006458 <DTD_Motors_Init+0x198>)
 8006404:	f7fe f832 	bl	800446c <MotorMove_position>
	HAL_Delay(200);
 8006408:	20c8      	movs	r0, #200	; 0xc8
 800640a:	f000 fbdf 	bl	8006bcc <HAL_Delay>
	while(Motor[2].Status){
 800640e:	e002      	b.n	8006416 <DTD_Motors_Init+0x156>
		HAL_Delay(100);
 8006410:	2064      	movs	r0, #100	; 0x64
 8006412:	f000 fbdb 	bl	8006bcc <HAL_Delay>
	while(Motor[2].Status){
 8006416:	4b09      	ldr	r3, [pc, #36]	; (800643c <DTD_Motors_Init+0x17c>)
 8006418:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1f7      	bne.n	8006410 <DTD_Motors_Init+0x150>
	}

	return SUCCESS ;
 8006420:	2301      	movs	r3, #1
}
 8006422:	4618      	mov	r0, r3
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	08012300 	.word	0x08012300
 800642c:	40021000 	.word	0x40021000
 8006430:	200009c8 	.word	0x200009c8
 8006434:	08012324 	.word	0x08012324
 8006438:	20000c88 	.word	0x20000c88
 800643c:	200008a8 	.word	0x200008a8
 8006440:	20000a88 	.word	0x20000a88
 8006444:	08012348 	.word	0x08012348
 8006448:	40021800 	.word	0x40021800
 800644c:	20000ae8 	.word	0x20000ae8
 8006450:	0801236c 	.word	0x0801236c
 8006454:	40020400 	.word	0x40020400
 8006458:	20000968 	.word	0x20000968
 800645c:	08012390 	.word	0x08012390
 8006460:	20000c68 	.word	0x20000c68

08006464 <DTD_All_Motors_Idle>:

uint8_t DTD_All_Motors_Idle(void)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	af00      	add	r7, sp, #0
	osDelay(100);
 8006468:	2064      	movs	r0, #100	; 0x64
 800646a:	f006 f899 	bl	800c5a0 <osDelay>
	if ( (!Motor[5].Status) & (!Motor[6].Status) & (!Motor[3].Status) & (!Motor[2].Status) ){
 800646e:	4b0c      	ldr	r3, [pc, #48]	; (80064a0 <DTD_All_Motors_Idle+0x3c>)
 8006470:	f893 2210 	ldrb.w	r2, [r3, #528]	; 0x210
 8006474:	4b0a      	ldr	r3, [pc, #40]	; (80064a0 <DTD_All_Motors_Idle+0x3c>)
 8006476:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 800647a:	4313      	orrs	r3, r2
 800647c:	b2da      	uxtb	r2, r3
 800647e:	4b08      	ldr	r3, [pc, #32]	; (80064a0 <DTD_All_Motors_Idle+0x3c>)
 8006480:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8006484:	4313      	orrs	r3, r2
 8006486:	b2da      	uxtb	r2, r3
 8006488:	4b05      	ldr	r3, [pc, #20]	; (80064a0 <DTD_All_Motors_Idle+0x3c>)
 800648a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800648e:	4313      	orrs	r3, r2
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <DTD_All_Motors_Idle+0x36>
		return 1 ;
 8006496:	2301      	movs	r3, #1
 8006498:	e000      	b.n	800649c <DTD_All_Motors_Idle+0x38>
	}
	else{
		return 0 ;
 800649a:	2300      	movs	r3, #0
	}
}
 800649c:	4618      	mov	r0, r3
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	200008a8 	.word	0x200008a8

080064a4 <DTD_Motors_Standby_State>:

uint8_t DTD_Motors_Standby_State(void)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 80064a8:	2064      	movs	r0, #100	; 0x64
 80064aa:	f000 fb8f 	bl	8006bcc <HAL_Delay>
	MotorMove_position(&Motor[3],data_V0.Position_motor3_external);
 80064ae:	4b1f      	ldr	r3, [pc, #124]	; (800652c <DTD_Motors_Standby_State+0x88>)
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	4619      	mov	r1, r3
 80064b4:	481e      	ldr	r0, [pc, #120]	; (8006530 <DTD_Motors_Standby_State+0x8c>)
 80064b6:	f7fd ffd9 	bl	800446c <MotorMove_position>
	HAL_Delay(100);
 80064ba:	2064      	movs	r0, #100	; 0x64
 80064bc:	f000 fb86 	bl	8006bcc <HAL_Delay>
	while(Motor[3].Status){
 80064c0:	e002      	b.n	80064c8 <DTD_Motors_Standby_State+0x24>
		HAL_Delay(100);
 80064c2:	2064      	movs	r0, #100	; 0x64
 80064c4:	f000 fb82 	bl	8006bcc <HAL_Delay>
	while(Motor[3].Status){
 80064c8:	4b1a      	ldr	r3, [pc, #104]	; (8006534 <DTD_Motors_Standby_State+0x90>)
 80064ca:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1f7      	bne.n	80064c2 <DTD_Motors_Standby_State+0x1e>
	}

	HAL_Delay(100);
 80064d2:	2064      	movs	r0, #100	; 0x64
 80064d4:	f000 fb7a 	bl	8006bcc <HAL_Delay>
	MotorMove_position(&Motor[6],data_V0.Position_motor6_PushRod_reset);
 80064d8:	4b14      	ldr	r3, [pc, #80]	; (800652c <DTD_Motors_Standby_State+0x88>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4619      	mov	r1, r3
 80064de:	4816      	ldr	r0, [pc, #88]	; (8006538 <DTD_Motors_Standby_State+0x94>)
 80064e0:	f7fd ffc4 	bl	800446c <MotorMove_position>
	HAL_Delay(100);
 80064e4:	2064      	movs	r0, #100	; 0x64
 80064e6:	f000 fb71 	bl	8006bcc <HAL_Delay>
	while(Motor[6].Status){
 80064ea:	e002      	b.n	80064f2 <DTD_Motors_Standby_State+0x4e>
		HAL_Delay(100);
 80064ec:	2064      	movs	r0, #100	; 0x64
 80064ee:	f000 fb6d 	bl	8006bcc <HAL_Delay>
	while(Motor[6].Status){
 80064f2:	4b10      	ldr	r3, [pc, #64]	; (8006534 <DTD_Motors_Standby_State+0x90>)
 80064f4:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1f7      	bne.n	80064ec <DTD_Motors_Standby_State+0x48>
	}

	HAL_Delay(100);
 80064fc:	2064      	movs	r0, #100	; 0x64
 80064fe:	f000 fb65 	bl	8006bcc <HAL_Delay>
	MotorMove_position(&Motor[5],data_V0.Position_motor5_external);
 8006502:	4b0a      	ldr	r3, [pc, #40]	; (800652c <DTD_Motors_Standby_State+0x88>)
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	4619      	mov	r1, r3
 8006508:	480c      	ldr	r0, [pc, #48]	; (800653c <DTD_Motors_Standby_State+0x98>)
 800650a:	f7fd ffaf 	bl	800446c <MotorMove_position>
	HAL_Delay(100);
 800650e:	2064      	movs	r0, #100	; 0x64
 8006510:	f000 fb5c 	bl	8006bcc <HAL_Delay>
	while(Motor[5].Status){
 8006514:	e002      	b.n	800651c <DTD_Motors_Standby_State+0x78>
		HAL_Delay(100);
 8006516:	2064      	movs	r0, #100	; 0x64
 8006518:	f000 fb58 	bl	8006bcc <HAL_Delay>
	while(Motor[5].Status){
 800651c:	4b05      	ldr	r3, [pc, #20]	; (8006534 <DTD_Motors_Standby_State+0x90>)
 800651e:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1f7      	bne.n	8006516 <DTD_Motors_Standby_State+0x72>
	}
	return SUCCESS;
 8006526:	2301      	movs	r3, #1
}
 8006528:	4618      	mov	r0, r3
 800652a:	bd80      	pop	{r7, pc}
 800652c:	20000c88 	.word	0x20000c88
 8006530:	200009c8 	.word	0x200009c8
 8006534:	200008a8 	.word	0x200008a8
 8006538:	20000ae8 	.word	0x20000ae8
 800653c:	20000a88 	.word	0x20000a88

08006540 <StartTask03>:

uint8_t 	DTD_StripIn_State = 0 ;
uint32_t 	DTD_CNT_i;

void StartTask03(void *argument)
{
 8006540:	b590      	push	{r4, r7, lr}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
	osDelay(10);
 8006548:	200a      	movs	r0, #10
 800654a:	f006 f829 	bl	800c5a0 <osDelay>
	printf("myTask03 starts! \r\n");
 800654e:	48be      	ldr	r0, [pc, #760]	; (8006848 <StartTask03+0x308>)
 8006550:	f009 fb82 	bl	800fc58 <puts>

	Motor_Data_Init();
 8006554:	f7fd f936 	bl	80037c4 <Motor_Data_Init>
	DuoTongDao_Position_Init();
 8006558:	f7ff fc8c 	bl	8005e74 <DuoTongDao_Position_Init>
	osDelay(300);
 800655c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006560:	f006 f81e 	bl	800c5a0 <osDelay>
	if ( DTD_Motors_Init() ){
 8006564:	f7ff feac 	bl	80062c0 <DTD_Motors_Init>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d006      	beq.n	800657c <StartTask03+0x3c>
		printf("Motors Initialization Completed! \r\n");
 800656e:	48b7      	ldr	r0, [pc, #732]	; (800684c <StartTask03+0x30c>)
 8006570:	f009 fb72 	bl	800fc58 <puts>
		myTask03_Status = INITPASSSTATE;
 8006574:	4bb6      	ldr	r3, [pc, #728]	; (8006850 <StartTask03+0x310>)
 8006576:	2263      	movs	r2, #99	; 0x63
 8006578:	701a      	strb	r2, [r3, #0]
 800657a:	e002      	b.n	8006582 <StartTask03+0x42>
	}
	else{
		myTask03_Status = INITFAILSTATE;
 800657c:	4bb4      	ldr	r3, [pc, #720]	; (8006850 <StartTask03+0x310>)
 800657e:	2264      	movs	r2, #100	; 0x64
 8006580:	701a      	strb	r2, [r3, #0]
//	Motor3_Enable();
//	VM5_Enable_A();	VM5_Enable_B();
//	VM6_Enable_A();	VM6_Enable_B();
//	myTask03_Status = INITPASSSTATE;

	uint8_t temp_n = 0 ;
 8006582:	2300      	movs	r3, #0
 8006584:	73fb      	strb	r3, [r7, #15]

	for(;;)
	{
		osDelay(1);
 8006586:	2001      	movs	r0, #1
 8006588:	f006 f80a 	bl	800c5a0 <osDelay>
		switch (myTask03_Status)
 800658c:	4bb0      	ldr	r3, [pc, #704]	; (8006850 <StartTask03+0x310>)
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	2b82      	cmp	r3, #130	; 0x82
 8006592:	f000 8278 	beq.w	8006a86 <StartTask03+0x546>
 8006596:	2b82      	cmp	r3, #130	; 0x82
 8006598:	dcf5      	bgt.n	8006586 <StartTask03+0x46>
 800659a:	2b64      	cmp	r3, #100	; 0x64
 800659c:	f000 8277 	beq.w	8006a8e <StartTask03+0x54e>
 80065a0:	2b64      	cmp	r3, #100	; 0x64
 80065a2:	dcf0      	bgt.n	8006586 <StartTask03+0x46>
 80065a4:	2b1b      	cmp	r3, #27
 80065a6:	dc2b      	bgt.n	8006600 <StartTask03+0xc0>
 80065a8:	2b0a      	cmp	r3, #10
 80065aa:	dbec      	blt.n	8006586 <StartTask03+0x46>
 80065ac:	3b0a      	subs	r3, #10
 80065ae:	2b11      	cmp	r3, #17
 80065b0:	d8e9      	bhi.n	8006586 <StartTask03+0x46>
 80065b2:	a201      	add	r2, pc, #4	; (adr r2, 80065b8 <StartTask03+0x78>)
 80065b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b8:	080066f5 	.word	0x080066f5
 80065bc:	08006587 	.word	0x08006587
 80065c0:	08006587 	.word	0x08006587
 80065c4:	08006587 	.word	0x08006587
 80065c8:	08006587 	.word	0x08006587
 80065cc:	08006587 	.word	0x08006587
 80065d0:	08006587 	.word	0x08006587
 80065d4:	08006587 	.word	0x08006587
 80065d8:	08006587 	.word	0x08006587
 80065dc:	08006587 	.word	0x08006587
 80065e0:	08006733 	.word	0x08006733
 80065e4:	0800675f 	.word	0x0800675f
 80065e8:	08006997 	.word	0x08006997
 80065ec:	080069bd 	.word	0x080069bd
 80065f0:	080069e1 	.word	0x080069e1
 80065f4:	08006a0d 	.word	0x08006a0d
 80065f8:	08006a39 	.word	0x08006a39
 80065fc:	08006a65 	.word	0x08006a65
 8006600:	2b63      	cmp	r3, #99	; 0x63
 8006602:	d1c0      	bne.n	8006586 <StartTask03+0x46>
		{
		case INITPASSSTATE:
			osDelay(10);
 8006604:	200a      	movs	r0, #10
 8006606:	f005 ffcb 	bl	800c5a0 <osDelay>
			if(KEY0_Pressed())
 800660a:	2140      	movs	r1, #64	; 0x40
 800660c:	4891      	ldr	r0, [pc, #580]	; (8006854 <StartTask03+0x314>)
 800660e:	f001 fd47 	bl	80080a0 <HAL_GPIO_ReadPin>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d11d      	bne.n	8006654 <StartTask03+0x114>
			{
				osDelay(20);
 8006618:	2014      	movs	r0, #20
 800661a:	f005 ffc1 	bl	800c5a0 <osDelay>
				if(KEY0_Pressed())
 800661e:	2140      	movs	r1, #64	; 0x40
 8006620:	488c      	ldr	r0, [pc, #560]	; (8006854 <StartTask03+0x314>)
 8006622:	f001 fd3d 	bl	80080a0 <HAL_GPIO_ReadPin>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d113      	bne.n	8006654 <StartTask03+0x114>
				{
					osDelay(20);
 800662c:	2014      	movs	r0, #20
 800662e:	f005 ffb7 	bl	800c5a0 <osDelay>
					while (KEY0_Pressed()){osDelay(1);}
 8006632:	e002      	b.n	800663a <StartTask03+0xfa>
 8006634:	2001      	movs	r0, #1
 8006636:	f005 ffb3 	bl	800c5a0 <osDelay>
 800663a:	2140      	movs	r1, #64	; 0x40
 800663c:	4885      	ldr	r0, [pc, #532]	; (8006854 <StartTask03+0x314>)
 800663e:	f001 fd2f 	bl	80080a0 <HAL_GPIO_ReadPin>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d0f5      	beq.n	8006634 <StartTask03+0xf4>
					myTask03_Status = 10;
 8006648:	4b81      	ldr	r3, [pc, #516]	; (8006850 <StartTask03+0x310>)
 800664a:	220a      	movs	r2, #10
 800664c:	701a      	strb	r2, [r3, #0]
					printf("Key0 pressed!\r\n");
 800664e:	4882      	ldr	r0, [pc, #520]	; (8006858 <StartTask03+0x318>)
 8006650:	f009 fb02 	bl	800fc58 <puts>
				}
			}
			if(KEY1_Pressed())
 8006654:	2180      	movs	r1, #128	; 0x80
 8006656:	487f      	ldr	r0, [pc, #508]	; (8006854 <StartTask03+0x314>)
 8006658:	f001 fd22 	bl	80080a0 <HAL_GPIO_ReadPin>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d11d      	bne.n	800669e <StartTask03+0x15e>
			{
				osDelay(20);
 8006662:	2014      	movs	r0, #20
 8006664:	f005 ff9c 	bl	800c5a0 <osDelay>
				if(KEY1_Pressed())
 8006668:	2180      	movs	r1, #128	; 0x80
 800666a:	487a      	ldr	r0, [pc, #488]	; (8006854 <StartTask03+0x314>)
 800666c:	f001 fd18 	bl	80080a0 <HAL_GPIO_ReadPin>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d113      	bne.n	800669e <StartTask03+0x15e>
				{
					osDelay(20);
 8006676:	2014      	movs	r0, #20
 8006678:	f005 ff92 	bl	800c5a0 <osDelay>
					while (KEY1_Pressed()){osDelay(1);}
 800667c:	e002      	b.n	8006684 <StartTask03+0x144>
 800667e:	2001      	movs	r0, #1
 8006680:	f005 ff8e 	bl	800c5a0 <osDelay>
 8006684:	2180      	movs	r1, #128	; 0x80
 8006686:	4873      	ldr	r0, [pc, #460]	; (8006854 <StartTask03+0x314>)
 8006688:	f001 fd0a 	bl	80080a0 <HAL_GPIO_ReadPin>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d0f5      	beq.n	800667e <StartTask03+0x13e>
					myTask03_Status = 20;
 8006692:	4b6f      	ldr	r3, [pc, #444]	; (8006850 <StartTask03+0x310>)
 8006694:	2214      	movs	r2, #20
 8006696:	701a      	strb	r2, [r3, #0]
					printf("Key1 pressed!\r\n");
 8006698:	4870      	ldr	r0, [pc, #448]	; (800685c <StartTask03+0x31c>)
 800669a:	f009 fadd 	bl	800fc58 <puts>
				}
			}
			if(KEY2_Pressed())
 800669e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066a2:	486c      	ldr	r0, [pc, #432]	; (8006854 <StartTask03+0x314>)
 80066a4:	f001 fcfc 	bl	80080a0 <HAL_GPIO_ReadPin>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f040 81f7 	bne.w	8006a9e <StartTask03+0x55e>
			{
				osDelay(20);
 80066b0:	2014      	movs	r0, #20
 80066b2:	f005 ff75 	bl	800c5a0 <osDelay>
				if(KEY2_Pressed())
 80066b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066ba:	4866      	ldr	r0, [pc, #408]	; (8006854 <StartTask03+0x314>)
 80066bc:	f001 fcf0 	bl	80080a0 <HAL_GPIO_ReadPin>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f040 81eb 	bne.w	8006a9e <StartTask03+0x55e>
				{
					osDelay(20);
 80066c8:	2014      	movs	r0, #20
 80066ca:	f005 ff69 	bl	800c5a0 <osDelay>
					while (KEY2_Pressed()){osDelay(1);}
 80066ce:	e002      	b.n	80066d6 <StartTask03+0x196>
 80066d0:	2001      	movs	r0, #1
 80066d2:	f005 ff65 	bl	800c5a0 <osDelay>
 80066d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066da:	485e      	ldr	r0, [pc, #376]	; (8006854 <StartTask03+0x314>)
 80066dc:	f001 fce0 	bl	80080a0 <HAL_GPIO_ReadPin>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d0f4      	beq.n	80066d0 <StartTask03+0x190>
					myTask03_Status = 130;
 80066e6:	4b5a      	ldr	r3, [pc, #360]	; (8006850 <StartTask03+0x310>)
 80066e8:	2282      	movs	r2, #130	; 0x82
 80066ea:	701a      	strb	r2, [r3, #0]
					printf("Key2 pressed!\r\n");
 80066ec:	485c      	ldr	r0, [pc, #368]	; (8006860 <StartTask03+0x320>)
 80066ee:	f009 fab3 	bl	800fc58 <puts>
				}
			}
			break;
 80066f2:	e1d4      	b.n	8006a9e <StartTask03+0x55e>

		case 10:
			osDelay(300);
 80066f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80066f8:	f005 ff52 	bl	800c5a0 <osDelay>
			if (Motor[2].Status == 0){
 80066fc:	4b59      	ldr	r3, [pc, #356]	; (8006864 <StartTask03+0x324>)
 80066fe:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8006702:	2b00      	cmp	r3, #0
 8006704:	f040 81cd 	bne.w	8006aa2 <StartTask03+0x562>
				MotorMove_position(&Motor[2],VPMark[temp_n]);
 8006708:	7bfb      	ldrb	r3, [r7, #15]
 800670a:	4a57      	ldr	r2, [pc, #348]	; (8006868 <StartTask03+0x328>)
 800670c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006710:	4619      	mov	r1, r3
 8006712:	4856      	ldr	r0, [pc, #344]	; (800686c <StartTask03+0x32c>)
 8006714:	f7fd feaa 	bl	800446c <MotorMove_position>
				if(temp_n >= 7)
 8006718:	7bfb      	ldrb	r3, [r7, #15]
 800671a:	2b06      	cmp	r3, #6
 800671c:	d902      	bls.n	8006724 <StartTask03+0x1e4>
					temp_n =  0 ;
 800671e:	2300      	movs	r3, #0
 8006720:	73fb      	strb	r3, [r7, #15]
 8006722:	e002      	b.n	800672a <StartTask03+0x1ea>
				else
					temp_n = temp_n +1 ;
 8006724:	7bfb      	ldrb	r3, [r7, #15]
 8006726:	3301      	adds	r3, #1
 8006728:	73fb      	strb	r3, [r7, #15]
				myTask03_Status=INITPASSSTATE;
 800672a:	4b49      	ldr	r3, [pc, #292]	; (8006850 <StartTask03+0x310>)
 800672c:	2263      	movs	r2, #99	; 0x63
 800672e:	701a      	strb	r2, [r3, #0]
			}
		break;
 8006730:	e1b7      	b.n	8006aa2 <StartTask03+0x562>

		case 20:	//行进到准备姿态，持续检测试剂条插入
			osDelay(1);
 8006732:	2001      	movs	r0, #1
 8006734:	f005 ff34 	bl	800c5a0 <osDelay>
			if(DTD_All_Motors_Idle()){
 8006738:	f7ff fe94 	bl	8006464 <DTD_All_Motors_Idle>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 81b1 	beq.w	8006aa6 <StartTask03+0x566>
				if (DTD_Motors_Standby_State()) {
 8006744:	f7ff feae 	bl	80064a4 <DTD_Motors_Standby_State>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	f000 81ab 	beq.w	8006aa6 <StartTask03+0x566>
					printf("DTD in Standby state,waiting strip in. \r\n");
 8006750:	4847      	ldr	r0, [pc, #284]	; (8006870 <StartTask03+0x330>)
 8006752:	f009 fa81 	bl	800fc58 <puts>
					myTask03_Status = 21;
 8006756:	4b3e      	ldr	r3, [pc, #248]	; (8006850 <StartTask03+0x310>)
 8006758:	2215      	movs	r2, #21
 800675a:	701a      	strb	r2, [r3, #0]
				}
			}
		break;
 800675c:	e1a3      	b.n	8006aa6 <StartTask03+0x566>

		case 21:
			osDelay(1);
 800675e:	2001      	movs	r0, #1
 8006760:	f005 ff1e 	bl	800c5a0 <osDelay>
			switch(DTD_StripIn_State)
 8006764:	4b43      	ldr	r3, [pc, #268]	; (8006874 <StartTask03+0x334>)
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	2b03      	cmp	r3, #3
 800676a:	f200 819e 	bhi.w	8006aaa <StartTask03+0x56a>
 800676e:	a201      	add	r2, pc, #4	; (adr r2, 8006774 <StartTask03+0x234>)
 8006770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006774:	08006785 	.word	0x08006785
 8006778:	0800681d 	.word	0x0800681d
 800677c:	080068ed 	.word	0x080068ed
 8006780:	0800696f 	.word	0x0800696f
			{
				case 0:
					if ( (Strip_Triggerd)&&(Strip_UnBlocked) ){
 8006784:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006788:	4832      	ldr	r0, [pc, #200]	; (8006854 <StartTask03+0x314>)
 800678a:	f001 fc89 	bl	80080a0 <HAL_GPIO_ReadPin>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	f040 80fa 	bne.w	800698a <StartTask03+0x44a>
 8006796:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800679a:	482e      	ldr	r0, [pc, #184]	; (8006854 <StartTask03+0x314>)
 800679c:	f001 fc80 	bl	80080a0 <HAL_GPIO_ReadPin>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	f040 80f1 	bne.w	800698a <StartTask03+0x44a>
						for( DTD_CNT_i=0 ; (Strip_Triggerd)&(Strip_UnBlocked) ; DTD_CNT_i++){
 80067a8:	4b33      	ldr	r3, [pc, #204]	; (8006878 <StartTask03+0x338>)
 80067aa:	2200      	movs	r2, #0
 80067ac:	601a      	str	r2, [r3, #0]
 80067ae:	e007      	b.n	80067c0 <StartTask03+0x280>
							HAL_Delay(1);
 80067b0:	2001      	movs	r0, #1
 80067b2:	f000 fa0b 	bl	8006bcc <HAL_Delay>
						for( DTD_CNT_i=0 ; (Strip_Triggerd)&(Strip_UnBlocked) ; DTD_CNT_i++){
 80067b6:	4b30      	ldr	r3, [pc, #192]	; (8006878 <StartTask03+0x338>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3301      	adds	r3, #1
 80067bc:	4a2e      	ldr	r2, [pc, #184]	; (8006878 <StartTask03+0x338>)
 80067be:	6013      	str	r3, [r2, #0]
 80067c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067c4:	4823      	ldr	r0, [pc, #140]	; (8006854 <StartTask03+0x314>)
 80067c6:	f001 fc6b 	bl	80080a0 <HAL_GPIO_ReadPin>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	bf0c      	ite	eq
 80067d0:	2301      	moveq	r3, #1
 80067d2:	2300      	movne	r3, #0
 80067d4:	b2dc      	uxtb	r4, r3
 80067d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80067da:	481e      	ldr	r0, [pc, #120]	; (8006854 <StartTask03+0x314>)
 80067dc:	f001 fc60 	bl	80080a0 <HAL_GPIO_ReadPin>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	bf0c      	ite	eq
 80067e6:	2301      	moveq	r3, #1
 80067e8:	2300      	movne	r3, #0
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	4023      	ands	r3, r4
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1dd      	bne.n	80067b0 <StartTask03+0x270>
						}
						if(DTD_CNT_i > 200){
 80067f4:	4b20      	ldr	r3, [pc, #128]	; (8006878 <StartTask03+0x338>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2bc8      	cmp	r3, #200	; 0xc8
 80067fa:	d903      	bls.n	8006804 <StartTask03+0x2c4>
							DTD_StripIn_State = 1 ;
 80067fc:	4b1d      	ldr	r3, [pc, #116]	; (8006874 <StartTask03+0x334>)
 80067fe:	2201      	movs	r2, #1
 8006800:	701a      	strb	r2, [r3, #0]
 8006802:	e002      	b.n	800680a <StartTask03+0x2ca>
						}
						else{
							DTD_StripIn_State = 0 ;
 8006804:	4b1b      	ldr	r3, [pc, #108]	; (8006874 <StartTask03+0x334>)
 8006806:	2200      	movs	r2, #0
 8006808:	701a      	strb	r2, [r3, #0]
						}
						printf("DTD_CNT_i=%ld  ; DTD_StripIn_State=%d   \r\n ", DTD_CNT_i,DTD_StripIn_State);
 800680a:	4b1b      	ldr	r3, [pc, #108]	; (8006878 <StartTask03+0x338>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a19      	ldr	r2, [pc, #100]	; (8006874 <StartTask03+0x334>)
 8006810:	7812      	ldrb	r2, [r2, #0]
 8006812:	4619      	mov	r1, r3
 8006814:	4819      	ldr	r0, [pc, #100]	; (800687c <StartTask03+0x33c>)
 8006816:	f009 f999 	bl	800fb4c <iprintf>
					}
				break;
 800681a:	e0b6      	b.n	800698a <StartTask03+0x44a>

				case 1:
					if ( (Strip_Triggerd)&&(Strip_Blocked) ){
 800681c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006820:	480c      	ldr	r0, [pc, #48]	; (8006854 <StartTask03+0x314>)
 8006822:	f001 fc3d 	bl	80080a0 <HAL_GPIO_ReadPin>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	f040 80b0 	bne.w	800698e <StartTask03+0x44e>
 800682e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006832:	4808      	ldr	r0, [pc, #32]	; (8006854 <StartTask03+0x314>)
 8006834:	f001 fc34 	bl	80080a0 <HAL_GPIO_ReadPin>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	f040 80a7 	bne.w	800698e <StartTask03+0x44e>
						for( DTD_CNT_i=0 ; (Strip_Triggerd)&(Strip_Blocked) ; DTD_CNT_i++){
 8006840:	4b0d      	ldr	r3, [pc, #52]	; (8006878 <StartTask03+0x338>)
 8006842:	2200      	movs	r2, #0
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	e023      	b.n	8006890 <StartTask03+0x350>
 8006848:	080123b4 	.word	0x080123b4
 800684c:	080123c8 	.word	0x080123c8
 8006850:	20000d08 	.word	0x20000d08
 8006854:	40021800 	.word	0x40021800
 8006858:	080123ec 	.word	0x080123ec
 800685c:	080123fc 	.word	0x080123fc
 8006860:	0801240c 	.word	0x0801240c
 8006864:	200008a8 	.word	0x200008a8
 8006868:	20000c68 	.word	0x20000c68
 800686c:	20000968 	.word	0x20000968
 8006870:	0801241c 	.word	0x0801241c
 8006874:	20000d09 	.word	0x20000d09
 8006878:	20000d0c 	.word	0x20000d0c
 800687c:	08012448 	.word	0x08012448
							HAL_Delay(1);
 8006880:	2001      	movs	r0, #1
 8006882:	f000 f9a3 	bl	8006bcc <HAL_Delay>
						for( DTD_CNT_i=0 ; (Strip_Triggerd)&(Strip_Blocked) ; DTD_CNT_i++){
 8006886:	4b90      	ldr	r3, [pc, #576]	; (8006ac8 <StartTask03+0x588>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3301      	adds	r3, #1
 800688c:	4a8e      	ldr	r2, [pc, #568]	; (8006ac8 <StartTask03+0x588>)
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006894:	488d      	ldr	r0, [pc, #564]	; (8006acc <StartTask03+0x58c>)
 8006896:	f001 fc03 	bl	80080a0 <HAL_GPIO_ReadPin>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	bf0c      	ite	eq
 80068a0:	2301      	moveq	r3, #1
 80068a2:	2300      	movne	r3, #0
 80068a4:	b2dc      	uxtb	r4, r3
 80068a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80068aa:	4888      	ldr	r0, [pc, #544]	; (8006acc <StartTask03+0x58c>)
 80068ac:	f001 fbf8 	bl	80080a0 <HAL_GPIO_ReadPin>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	bf0c      	ite	eq
 80068b6:	2301      	moveq	r3, #1
 80068b8:	2300      	movne	r3, #0
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	4023      	ands	r3, r4
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1dd      	bne.n	8006880 <StartTask03+0x340>
						}
						if(DTD_CNT_i > 100){
 80068c4:	4b80      	ldr	r3, [pc, #512]	; (8006ac8 <StartTask03+0x588>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b64      	cmp	r3, #100	; 0x64
 80068ca:	d903      	bls.n	80068d4 <StartTask03+0x394>
							DTD_StripIn_State = 2 ;
 80068cc:	4b80      	ldr	r3, [pc, #512]	; (8006ad0 <StartTask03+0x590>)
 80068ce:	2202      	movs	r2, #2
 80068d0:	701a      	strb	r2, [r3, #0]
 80068d2:	e002      	b.n	80068da <StartTask03+0x39a>
						}
						else{
							DTD_StripIn_State = 0 ;
 80068d4:	4b7e      	ldr	r3, [pc, #504]	; (8006ad0 <StartTask03+0x590>)
 80068d6:	2200      	movs	r2, #0
 80068d8:	701a      	strb	r2, [r3, #0]
						}
						printf("DTD_CNT_i=%ld  ; DTD_StripIn_State=%d   \r\n ", DTD_CNT_i,DTD_StripIn_State);
 80068da:	4b7b      	ldr	r3, [pc, #492]	; (8006ac8 <StartTask03+0x588>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a7c      	ldr	r2, [pc, #496]	; (8006ad0 <StartTask03+0x590>)
 80068e0:	7812      	ldrb	r2, [r2, #0]
 80068e2:	4619      	mov	r1, r3
 80068e4:	487b      	ldr	r0, [pc, #492]	; (8006ad4 <StartTask03+0x594>)
 80068e6:	f009 f931 	bl	800fb4c <iprintf>
					}
				break;
 80068ea:	e050      	b.n	800698e <StartTask03+0x44e>

				case 2:
					if ( (Strip_UnTriggerd)&&(Strip_Blocked) ){
 80068ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80068f0:	4876      	ldr	r0, [pc, #472]	; (8006acc <StartTask03+0x58c>)
 80068f2:	f001 fbd5 	bl	80080a0 <HAL_GPIO_ReadPin>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d14a      	bne.n	8006992 <StartTask03+0x452>
 80068fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006900:	4872      	ldr	r0, [pc, #456]	; (8006acc <StartTask03+0x58c>)
 8006902:	f001 fbcd 	bl	80080a0 <HAL_GPIO_ReadPin>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d142      	bne.n	8006992 <StartTask03+0x452>
						for( DTD_CNT_i=0 ; (Strip_UnTriggerd)&(Strip_Blocked) ; DTD_CNT_i++){
 800690c:	4b6e      	ldr	r3, [pc, #440]	; (8006ac8 <StartTask03+0x588>)
 800690e:	2200      	movs	r2, #0
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	e011      	b.n	8006938 <StartTask03+0x3f8>
							HAL_Delay(1);
 8006914:	2001      	movs	r0, #1
 8006916:	f000 f959 	bl	8006bcc <HAL_Delay>
							if(DTD_CNT_i > 1000){
 800691a:	4b6b      	ldr	r3, [pc, #428]	; (8006ac8 <StartTask03+0x588>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006922:	d904      	bls.n	800692e <StartTask03+0x3ee>
								DTD_StripIn_State = 3 ;
 8006924:	4b6a      	ldr	r3, [pc, #424]	; (8006ad0 <StartTask03+0x590>)
 8006926:	2203      	movs	r2, #3
 8006928:	701a      	strb	r2, [r3, #0]
								break;
 800692a:	bf00      	nop
							}
						}
					}
				break;
 800692c:	e031      	b.n	8006992 <StartTask03+0x452>
						for( DTD_CNT_i=0 ; (Strip_UnTriggerd)&(Strip_Blocked) ; DTD_CNT_i++){
 800692e:	4b66      	ldr	r3, [pc, #408]	; (8006ac8 <StartTask03+0x588>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	3301      	adds	r3, #1
 8006934:	4a64      	ldr	r2, [pc, #400]	; (8006ac8 <StartTask03+0x588>)
 8006936:	6013      	str	r3, [r2, #0]
 8006938:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800693c:	4863      	ldr	r0, [pc, #396]	; (8006acc <StartTask03+0x58c>)
 800693e:	f001 fbaf 	bl	80080a0 <HAL_GPIO_ReadPin>
 8006942:	4603      	mov	r3, r0
 8006944:	2b01      	cmp	r3, #1
 8006946:	bf0c      	ite	eq
 8006948:	2301      	moveq	r3, #1
 800694a:	2300      	movne	r3, #0
 800694c:	b2dc      	uxtb	r4, r3
 800694e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006952:	485e      	ldr	r0, [pc, #376]	; (8006acc <StartTask03+0x58c>)
 8006954:	f001 fba4 	bl	80080a0 <HAL_GPIO_ReadPin>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	bf0c      	ite	eq
 800695e:	2301      	moveq	r3, #1
 8006960:	2300      	movne	r3, #0
 8006962:	b2db      	uxtb	r3, r3
 8006964:	4023      	ands	r3, r4
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1d3      	bne.n	8006914 <StartTask03+0x3d4>
				break;
 800696c:	e011      	b.n	8006992 <StartTask03+0x452>

				case 3:
					printf("Strip inserted! Begin to detect... \r\n");
 800696e:	485a      	ldr	r0, [pc, #360]	; (8006ad8 <StartTask03+0x598>)
 8006970:	f009 f972 	bl	800fc58 <puts>
					DTD_StripIn_State = 0 ;
 8006974:	4b56      	ldr	r3, [pc, #344]	; (8006ad0 <StartTask03+0x590>)
 8006976:	2200      	movs	r2, #0
 8006978:	701a      	strb	r2, [r3, #0]
					myTask03_Status = 22;
 800697a:	4b58      	ldr	r3, [pc, #352]	; (8006adc <StartTask03+0x59c>)
 800697c:	2216      	movs	r2, #22
 800697e:	701a      	strb	r2, [r3, #0]
					osDelay(500);
 8006980:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006984:	f005 fe0c 	bl	800c5a0 <osDelay>
				break;
 8006988:	e004      	b.n	8006994 <StartTask03+0x454>
				break;
 800698a:	bf00      	nop
 800698c:	e08d      	b.n	8006aaa <StartTask03+0x56a>
				break;
 800698e:	bf00      	nop
 8006990:	e08b      	b.n	8006aaa <StartTask03+0x56a>
				break;
 8006992:	bf00      	nop

			}
		break;
 8006994:	e089      	b.n	8006aaa <StartTask03+0x56a>

		case 22:
			osDelay(1);
 8006996:	2001      	movs	r0, #1
 8006998:	f005 fe02 	bl	800c5a0 <osDelay>
			if( DTD_All_Motors_Idle() ){
 800699c:	f7ff fd62 	bl	8006464 <DTD_All_Motors_Idle>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f000 8083 	beq.w	8006aae <StartTask03+0x56e>
				MotorMove_position(&Motor[5],data_V0.Position_motor5_internal);
 80069a8:	4b4d      	ldr	r3, [pc, #308]	; (8006ae0 <StartTask03+0x5a0>)
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	4619      	mov	r1, r3
 80069ae:	484d      	ldr	r0, [pc, #308]	; (8006ae4 <StartTask03+0x5a4>)
 80069b0:	f7fd fd5c 	bl	800446c <MotorMove_position>
				myTask03_Status = 23;
 80069b4:	4b49      	ldr	r3, [pc, #292]	; (8006adc <StartTask03+0x59c>)
 80069b6:	2217      	movs	r2, #23
 80069b8:	701a      	strb	r2, [r3, #0]
			}
		break;
 80069ba:	e078      	b.n	8006aae <StartTask03+0x56e>

		case 23:
			osDelay(1);
 80069bc:	2001      	movs	r0, #1
 80069be:	f005 fdef 	bl	800c5a0 <osDelay>
			if( DTD_All_Motors_Idle() ){
 80069c2:	f7ff fd4f 	bl	8006464 <DTD_All_Motors_Idle>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d072      	beq.n	8006ab2 <StartTask03+0x572>
				MotorMove_position(&Motor[6],data_V0.Position_motor6_PushRod_push);
 80069cc:	4b44      	ldr	r3, [pc, #272]	; (8006ae0 <StartTask03+0x5a0>)
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	4619      	mov	r1, r3
 80069d2:	4845      	ldr	r0, [pc, #276]	; (8006ae8 <StartTask03+0x5a8>)
 80069d4:	f7fd fd4a 	bl	800446c <MotorMove_position>
				myTask03_Status = 24;
 80069d8:	4b40      	ldr	r3, [pc, #256]	; (8006adc <StartTask03+0x59c>)
 80069da:	2218      	movs	r2, #24
 80069dc:	701a      	strb	r2, [r3, #0]
			}
		break;
 80069de:	e068      	b.n	8006ab2 <StartTask03+0x572>

		case 24:
			osDelay(1);
 80069e0:	2001      	movs	r0, #1
 80069e2:	f005 fddd 	bl	800c5a0 <osDelay>
			if( DTD_All_Motors_Idle() ){
 80069e6:	f7ff fd3d 	bl	8006464 <DTD_All_Motors_Idle>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d062      	beq.n	8006ab6 <StartTask03+0x576>
				osDelay(800);
 80069f0:	f44f 7048 	mov.w	r0, #800	; 0x320
 80069f4:	f005 fdd4 	bl	800c5a0 <osDelay>
				MotorMove_position(&Motor[3],data_V0.Position_motor3_storage);
 80069f8:	4b39      	ldr	r3, [pc, #228]	; (8006ae0 <StartTask03+0x5a0>)
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	4619      	mov	r1, r3
 80069fe:	483b      	ldr	r0, [pc, #236]	; (8006aec <StartTask03+0x5ac>)
 8006a00:	f7fd fd34 	bl	800446c <MotorMove_position>
				myTask03_Status = 25;
 8006a04:	4b35      	ldr	r3, [pc, #212]	; (8006adc <StartTask03+0x59c>)
 8006a06:	2219      	movs	r2, #25
 8006a08:	701a      	strb	r2, [r3, #0]
			}
		break;
 8006a0a:	e054      	b.n	8006ab6 <StartTask03+0x576>

		case 25:
			osDelay(1);
 8006a0c:	2001      	movs	r0, #1
 8006a0e:	f005 fdc7 	bl	800c5a0 <osDelay>
			if( DTD_All_Motors_Idle() ){
 8006a12:	f7ff fd27 	bl	8006464 <DTD_All_Motors_Idle>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d04e      	beq.n	8006aba <StartTask03+0x57a>
				osDelay(800);
 8006a1c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8006a20:	f005 fdbe 	bl	800c5a0 <osDelay>
				MotorMove_position(&Motor[3],data_V0.Position_motor3_detect);
 8006a24:	4b2e      	ldr	r3, [pc, #184]	; (8006ae0 <StartTask03+0x5a0>)
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	4619      	mov	r1, r3
 8006a2a:	4830      	ldr	r0, [pc, #192]	; (8006aec <StartTask03+0x5ac>)
 8006a2c:	f7fd fd1e 	bl	800446c <MotorMove_position>
				myTask03_Status = 26;
 8006a30:	4b2a      	ldr	r3, [pc, #168]	; (8006adc <StartTask03+0x59c>)
 8006a32:	221a      	movs	r2, #26
 8006a34:	701a      	strb	r2, [r3, #0]
			}
		break;
 8006a36:	e040      	b.n	8006aba <StartTask03+0x57a>

		case 26:
			osDelay(1);
 8006a38:	2001      	movs	r0, #1
 8006a3a:	f005 fdb1 	bl	800c5a0 <osDelay>
			if( DTD_All_Motors_Idle() ){
 8006a3e:	f7ff fd11 	bl	8006464 <DTD_All_Motors_Idle>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d03a      	beq.n	8006abe <StartTask03+0x57e>
				osDelay(1000);
 8006a48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006a4c:	f005 fda8 	bl	800c5a0 <osDelay>
				MotorMove_position_lowspeed(&Motor[3],data_V0.Position_motor3_reset);
 8006a50:	4b23      	ldr	r3, [pc, #140]	; (8006ae0 <StartTask03+0x5a0>)
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	4619      	mov	r1, r3
 8006a56:	4825      	ldr	r0, [pc, #148]	; (8006aec <StartTask03+0x5ac>)
 8006a58:	f7fe f830 	bl	8004abc <MotorMove_position_lowspeed>
				myTask03_Status = 27;
 8006a5c:	4b1f      	ldr	r3, [pc, #124]	; (8006adc <StartTask03+0x59c>)
 8006a5e:	221b      	movs	r2, #27
 8006a60:	701a      	strb	r2, [r3, #0]
			}
		break;
 8006a62:	e02c      	b.n	8006abe <StartTask03+0x57e>

		case 27:
			osDelay(1);
 8006a64:	2001      	movs	r0, #1
 8006a66:	f005 fd9b 	bl	800c5a0 <osDelay>
			if(DTD_All_Motors_Idle()){
 8006a6a:	f7ff fcfb 	bl	8006464 <DTD_All_Motors_Idle>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d026      	beq.n	8006ac2 <StartTask03+0x582>
				if (DTD_Motors_Standby_State()) {
 8006a74:	f7ff fd16 	bl	80064a4 <DTD_Motors_Standby_State>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d021      	beq.n	8006ac2 <StartTask03+0x582>
					myTask03_Status = 21;
 8006a7e:	4b17      	ldr	r3, [pc, #92]	; (8006adc <StartTask03+0x59c>)
 8006a80:	2215      	movs	r2, #21
 8006a82:	701a      	strb	r2, [r3, #0]
				}
			}
		break;
 8006a84:	e01d      	b.n	8006ac2 <StartTask03+0x582>




		case 130:	//老化测试
			myTask03_Status = INITPASSSTATE;
 8006a86:	4b15      	ldr	r3, [pc, #84]	; (8006adc <StartTask03+0x59c>)
 8006a88:	2263      	movs	r2, #99	; 0x63
 8006a8a:	701a      	strb	r2, [r3, #0]
		break;
 8006a8c:	e01a      	b.n	8006ac4 <StartTask03+0x584>


		case INITFAILSTATE:
			printf("[WRONG]Motors Initialization FAILED!Please Check!\r\n");
 8006a8e:	4818      	ldr	r0, [pc, #96]	; (8006af0 <StartTask03+0x5b0>)
 8006a90:	f009 f8e2 	bl	800fc58 <puts>
			osDelay(10000);
 8006a94:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a98:	f005 fd82 	bl	800c5a0 <osDelay>
			break;
 8006a9c:	e012      	b.n	8006ac4 <StartTask03+0x584>
			break;
 8006a9e:	bf00      	nop
 8006aa0:	e571      	b.n	8006586 <StartTask03+0x46>
		break;
 8006aa2:	bf00      	nop
 8006aa4:	e56f      	b.n	8006586 <StartTask03+0x46>
		break;
 8006aa6:	bf00      	nop
 8006aa8:	e56d      	b.n	8006586 <StartTask03+0x46>
		break;
 8006aaa:	bf00      	nop
 8006aac:	e56b      	b.n	8006586 <StartTask03+0x46>
		break;
 8006aae:	bf00      	nop
 8006ab0:	e569      	b.n	8006586 <StartTask03+0x46>
		break;
 8006ab2:	bf00      	nop
 8006ab4:	e567      	b.n	8006586 <StartTask03+0x46>
		break;
 8006ab6:	bf00      	nop
 8006ab8:	e565      	b.n	8006586 <StartTask03+0x46>
		break;
 8006aba:	bf00      	nop
 8006abc:	e563      	b.n	8006586 <StartTask03+0x46>
		break;
 8006abe:	bf00      	nop
 8006ac0:	e561      	b.n	8006586 <StartTask03+0x46>
		break;
 8006ac2:	bf00      	nop
		osDelay(1);
 8006ac4:	e55f      	b.n	8006586 <StartTask03+0x46>
 8006ac6:	bf00      	nop
 8006ac8:	20000d0c 	.word	0x20000d0c
 8006acc:	40021800 	.word	0x40021800
 8006ad0:	20000d09 	.word	0x20000d09
 8006ad4:	08012448 	.word	0x08012448
 8006ad8:	08012474 	.word	0x08012474
 8006adc:	20000d08 	.word	0x20000d08
 8006ae0:	20000c88 	.word	0x20000c88
 8006ae4:	20000a88 	.word	0x20000a88
 8006ae8:	20000ae8 	.word	0x20000ae8
 8006aec:	200009c8 	.word	0x200009c8
 8006af0:	0801249c 	.word	0x0801249c

08006af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006af4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006b2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006af8:	480d      	ldr	r0, [pc, #52]	; (8006b30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006afa:	490e      	ldr	r1, [pc, #56]	; (8006b34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006afc:	4a0e      	ldr	r2, [pc, #56]	; (8006b38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006b00:	e002      	b.n	8006b08 <LoopCopyDataInit>

08006b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006b06:	3304      	adds	r3, #4

08006b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006b0c:	d3f9      	bcc.n	8006b02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006b0e:	4a0b      	ldr	r2, [pc, #44]	; (8006b3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006b10:	4c0b      	ldr	r4, [pc, #44]	; (8006b40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006b14:	e001      	b.n	8006b1a <LoopFillZerobss>

08006b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006b18:	3204      	adds	r2, #4

08006b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006b1c:	d3fb      	bcc.n	8006b16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006b1e:	f7fb fffb 	bl	8002b18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006b22:	f008 fad7 	bl	800f0d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006b26:	f7fb f801 	bl	8001b2c <main>
  bx  lr    
 8006b2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006b2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006b34:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8006b38:	08012984 	.word	0x08012984
  ldr r2, =_sbss
 8006b3c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8006b40:	20005734 	.word	0x20005734

08006b44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006b44:	e7fe      	b.n	8006b44 <ADC_IRQHandler>
	...

08006b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006b4c:	4b0e      	ldr	r3, [pc, #56]	; (8006b88 <HAL_Init+0x40>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a0d      	ldr	r2, [pc, #52]	; (8006b88 <HAL_Init+0x40>)
 8006b52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006b58:	4b0b      	ldr	r3, [pc, #44]	; (8006b88 <HAL_Init+0x40>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a0a      	ldr	r2, [pc, #40]	; (8006b88 <HAL_Init+0x40>)
 8006b5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006b64:	4b08      	ldr	r3, [pc, #32]	; (8006b88 <HAL_Init+0x40>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a07      	ldr	r2, [pc, #28]	; (8006b88 <HAL_Init+0x40>)
 8006b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b70:	2003      	movs	r0, #3
 8006b72:	f000 fc5a 	bl	800742a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006b76:	2005      	movs	r0, #5
 8006b78:	f7fb fdba 	bl	80026f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006b7c:	f7fb fd8c 	bl	8002698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	40023c00 	.word	0x40023c00

08006b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006b90:	4b06      	ldr	r3, [pc, #24]	; (8006bac <HAL_IncTick+0x20>)
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	461a      	mov	r2, r3
 8006b96:	4b06      	ldr	r3, [pc, #24]	; (8006bb0 <HAL_IncTick+0x24>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	4a04      	ldr	r2, [pc, #16]	; (8006bb0 <HAL_IncTick+0x24>)
 8006b9e:	6013      	str	r3, [r2, #0]
}
 8006ba0:	bf00      	nop
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	20000010 	.word	0x20000010
 8006bb0:	20000d10 	.word	0x20000d10

08006bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8006bb8:	4b03      	ldr	r3, [pc, #12]	; (8006bc8 <HAL_GetTick+0x14>)
 8006bba:	681b      	ldr	r3, [r3, #0]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	20000d10 	.word	0x20000d10

08006bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006bd4:	f7ff ffee 	bl	8006bb4 <HAL_GetTick>
 8006bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be4:	d005      	beq.n	8006bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006be6:	4b0a      	ldr	r3, [pc, #40]	; (8006c10 <HAL_Delay+0x44>)
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	461a      	mov	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4413      	add	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006bf2:	bf00      	nop
 8006bf4:	f7ff ffde 	bl	8006bb4 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d8f7      	bhi.n	8006bf4 <HAL_Delay+0x28>
  {
  }
}
 8006c04:	bf00      	nop
 8006c06:	bf00      	nop
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	20000010 	.word	0x20000010

08006c14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e033      	b.n	8006c92 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d109      	bne.n	8006c46 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7fa f9de 	bl	8000ff4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4a:	f003 0310 	and.w	r3, r3, #16
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d118      	bne.n	8006c84 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c56:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006c5a:	f023 0302 	bic.w	r3, r3, #2
 8006c5e:	f043 0202 	orr.w	r2, r3, #2
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f93a 	bl	8006ee0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c76:	f023 0303 	bic.w	r3, r3, #3
 8006c7a:	f043 0201 	orr.w	r2, r3, #1
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	641a      	str	r2, [r3, #64]	; 0x40
 8006c82:	e001      	b.n	8006c88 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
	...

08006c9c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d101      	bne.n	8006cb8 <HAL_ADC_ConfigChannel+0x1c>
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	e105      	b.n	8006ec4 <HAL_ADC_ConfigChannel+0x228>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b09      	cmp	r3, #9
 8006cc6:	d925      	bls.n	8006d14 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68d9      	ldr	r1, [r3, #12]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	005b      	lsls	r3, r3, #1
 8006cda:	4413      	add	r3, r2
 8006cdc:	3b1e      	subs	r3, #30
 8006cde:	2207      	movs	r2, #7
 8006ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce4:	43da      	mvns	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	400a      	ands	r2, r1
 8006cec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68d9      	ldr	r1, [r3, #12]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	689a      	ldr	r2, [r3, #8]
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	4618      	mov	r0, r3
 8006d00:	4603      	mov	r3, r0
 8006d02:	005b      	lsls	r3, r3, #1
 8006d04:	4403      	add	r3, r0
 8006d06:	3b1e      	subs	r3, #30
 8006d08:	409a      	lsls	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	60da      	str	r2, [r3, #12]
 8006d12:	e022      	b.n	8006d5a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6919      	ldr	r1, [r3, #16]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	461a      	mov	r2, r3
 8006d22:	4613      	mov	r3, r2
 8006d24:	005b      	lsls	r3, r3, #1
 8006d26:	4413      	add	r3, r2
 8006d28:	2207      	movs	r2, #7
 8006d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d2e:	43da      	mvns	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	400a      	ands	r2, r1
 8006d36:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6919      	ldr	r1, [r3, #16]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	689a      	ldr	r2, [r3, #8]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	4618      	mov	r0, r3
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	005b      	lsls	r3, r3, #1
 8006d4e:	4403      	add	r3, r0
 8006d50:	409a      	lsls	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	2b06      	cmp	r3, #6
 8006d60:	d824      	bhi.n	8006dac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	685a      	ldr	r2, [r3, #4]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	3b05      	subs	r3, #5
 8006d74:	221f      	movs	r2, #31
 8006d76:	fa02 f303 	lsl.w	r3, r2, r3
 8006d7a:	43da      	mvns	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	400a      	ands	r2, r1
 8006d82:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	4618      	mov	r0, r3
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	4613      	mov	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	3b05      	subs	r3, #5
 8006d9e:	fa00 f203 	lsl.w	r2, r0, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	635a      	str	r2, [r3, #52]	; 0x34
 8006daa:	e04c      	b.n	8006e46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	2b0c      	cmp	r3, #12
 8006db2:	d824      	bhi.n	8006dfe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	685a      	ldr	r2, [r3, #4]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	3b23      	subs	r3, #35	; 0x23
 8006dc6:	221f      	movs	r2, #31
 8006dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dcc:	43da      	mvns	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	400a      	ands	r2, r1
 8006dd4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	4618      	mov	r0, r3
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	685a      	ldr	r2, [r3, #4]
 8006de8:	4613      	mov	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	3b23      	subs	r3, #35	; 0x23
 8006df0:	fa00 f203 	lsl.w	r2, r0, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	631a      	str	r2, [r3, #48]	; 0x30
 8006dfc:	e023      	b.n	8006e46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	3b41      	subs	r3, #65	; 0x41
 8006e10:	221f      	movs	r2, #31
 8006e12:	fa02 f303 	lsl.w	r3, r2, r3
 8006e16:	43da      	mvns	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	400a      	ands	r2, r1
 8006e1e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	4613      	mov	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4413      	add	r3, r2
 8006e38:	3b41      	subs	r3, #65	; 0x41
 8006e3a:	fa00 f203 	lsl.w	r2, r0, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006e46:	4b22      	ldr	r3, [pc, #136]	; (8006ed0 <HAL_ADC_ConfigChannel+0x234>)
 8006e48:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a21      	ldr	r2, [pc, #132]	; (8006ed4 <HAL_ADC_ConfigChannel+0x238>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d109      	bne.n	8006e68 <HAL_ADC_ConfigChannel+0x1cc>
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2b12      	cmp	r3, #18
 8006e5a:	d105      	bne.n	8006e68 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a19      	ldr	r2, [pc, #100]	; (8006ed4 <HAL_ADC_ConfigChannel+0x238>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d123      	bne.n	8006eba <HAL_ADC_ConfigChannel+0x21e>
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b10      	cmp	r3, #16
 8006e78:	d003      	beq.n	8006e82 <HAL_ADC_ConfigChannel+0x1e6>
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b11      	cmp	r3, #17
 8006e80:	d11b      	bne.n	8006eba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2b10      	cmp	r3, #16
 8006e94:	d111      	bne.n	8006eba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006e96:	4b10      	ldr	r3, [pc, #64]	; (8006ed8 <HAL_ADC_ConfigChannel+0x23c>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a10      	ldr	r2, [pc, #64]	; (8006edc <HAL_ADC_ConfigChannel+0x240>)
 8006e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea0:	0c9a      	lsrs	r2, r3, #18
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4413      	add	r3, r2
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006eac:	e002      	b.n	8006eb4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1f9      	bne.n	8006eae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr
 8006ed0:	40012300 	.word	0x40012300
 8006ed4:	40012000 	.word	0x40012000
 8006ed8:	20000008 	.word	0x20000008
 8006edc:	431bde83 	.word	0x431bde83

08006ee0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ee8:	4b79      	ldr	r3, [pc, #484]	; (80070d0 <ADC_Init+0x1f0>)
 8006eea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	431a      	orrs	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	685a      	ldr	r2, [r3, #4]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	6859      	ldr	r1, [r3, #4]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	021a      	lsls	r2, r3, #8
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685a      	ldr	r2, [r3, #4]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006f38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	6859      	ldr	r1, [r3, #4]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	689a      	ldr	r2, [r3, #8]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	430a      	orrs	r2, r1
 8006f4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	689a      	ldr	r2, [r3, #8]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6899      	ldr	r1, [r3, #8]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f72:	4a58      	ldr	r2, [pc, #352]	; (80070d4 <ADC_Init+0x1f4>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d022      	beq.n	8006fbe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	689a      	ldr	r2, [r3, #8]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006f86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6899      	ldr	r1, [r3, #8]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006fa8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	6899      	ldr	r1, [r3, #8]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	609a      	str	r2, [r3, #8]
 8006fbc:	e00f      	b.n	8006fde <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689a      	ldr	r2, [r3, #8]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006fcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	689a      	ldr	r2, [r3, #8]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006fdc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	689a      	ldr	r2, [r3, #8]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f022 0202 	bic.w	r2, r2, #2
 8006fec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	6899      	ldr	r1, [r3, #8]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	7e1b      	ldrb	r3, [r3, #24]
 8006ff8:	005a      	lsls	r2, r3, #1
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	430a      	orrs	r2, r1
 8007000:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d01b      	beq.n	8007044 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800701a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	685a      	ldr	r2, [r3, #4]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800702a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6859      	ldr	r1, [r3, #4]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007036:	3b01      	subs	r3, #1
 8007038:	035a      	lsls	r2, r3, #13
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	430a      	orrs	r2, r1
 8007040:	605a      	str	r2, [r3, #4]
 8007042:	e007      	b.n	8007054 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007052:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007062:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	69db      	ldr	r3, [r3, #28]
 800706e:	3b01      	subs	r3, #1
 8007070:	051a      	lsls	r2, r3, #20
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	430a      	orrs	r2, r1
 8007078:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	689a      	ldr	r2, [r3, #8]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007088:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	6899      	ldr	r1, [r3, #8]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007096:	025a      	lsls	r2, r3, #9
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	430a      	orrs	r2, r1
 800709e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689a      	ldr	r2, [r3, #8]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	6899      	ldr	r1, [r3, #8]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	029a      	lsls	r2, r3, #10
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	430a      	orrs	r2, r1
 80070c2:	609a      	str	r2, [r3, #8]
}
 80070c4:	bf00      	nop
 80070c6:	3714      	adds	r7, #20
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr
 80070d0:	40012300 	.word	0x40012300
 80070d4:	0f000001 	.word	0x0f000001

080070d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e0ed      	b.n	80072c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d102      	bne.n	80070fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7fa f824 	bl	8001144 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f042 0201 	orr.w	r2, r2, #1
 800710a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800710c:	f7ff fd52 	bl	8006bb4 <HAL_GetTick>
 8007110:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007112:	e012      	b.n	800713a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007114:	f7ff fd4e 	bl	8006bb4 <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	2b0a      	cmp	r3, #10
 8007120:	d90b      	bls.n	800713a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007126:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2205      	movs	r2, #5
 8007132:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e0c5      	b.n	80072c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	2b00      	cmp	r3, #0
 8007146:	d0e5      	beq.n	8007114 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f022 0202 	bic.w	r2, r2, #2
 8007156:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007158:	f7ff fd2c 	bl	8006bb4 <HAL_GetTick>
 800715c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800715e:	e012      	b.n	8007186 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007160:	f7ff fd28 	bl	8006bb4 <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	2b0a      	cmp	r3, #10
 800716c:	d90b      	bls.n	8007186 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007172:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2205      	movs	r2, #5
 800717e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e09f      	b.n	80072c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	f003 0302 	and.w	r3, r3, #2
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1e5      	bne.n	8007160 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	7e1b      	ldrb	r3, [r3, #24]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d108      	bne.n	80071ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80071aa:	601a      	str	r2, [r3, #0]
 80071ac:	e007      	b.n	80071be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	7e5b      	ldrb	r3, [r3, #25]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d108      	bne.n	80071d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071d4:	601a      	str	r2, [r3, #0]
 80071d6:	e007      	b.n	80071e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	7e9b      	ldrb	r3, [r3, #26]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d108      	bne.n	8007202 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f042 0220 	orr.w	r2, r2, #32
 80071fe:	601a      	str	r2, [r3, #0]
 8007200:	e007      	b.n	8007212 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f022 0220 	bic.w	r2, r2, #32
 8007210:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	7edb      	ldrb	r3, [r3, #27]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d108      	bne.n	800722c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 0210 	bic.w	r2, r2, #16
 8007228:	601a      	str	r2, [r3, #0]
 800722a:	e007      	b.n	800723c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f042 0210 	orr.w	r2, r2, #16
 800723a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	7f1b      	ldrb	r3, [r3, #28]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d108      	bne.n	8007256 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f042 0208 	orr.w	r2, r2, #8
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	e007      	b.n	8007266 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f022 0208 	bic.w	r2, r2, #8
 8007264:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	7f5b      	ldrb	r3, [r3, #29]
 800726a:	2b01      	cmp	r3, #1
 800726c:	d108      	bne.n	8007280 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f042 0204 	orr.w	r2, r2, #4
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	e007      	b.n	8007290 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f022 0204 	bic.w	r2, r2, #4
 800728e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	689a      	ldr	r2, [r3, #8]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	431a      	orrs	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	431a      	orrs	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	695b      	ldr	r3, [r3, #20]
 80072a4:	ea42 0103 	orr.w	r1, r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	1e5a      	subs	r2, r3, #1
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	430a      	orrs	r2, r1
 80072b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
	...

080072d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f003 0307 	and.w	r3, r3, #7
 80072de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80072e0:	4b0c      	ldr	r3, [pc, #48]	; (8007314 <__NVIC_SetPriorityGrouping+0x44>)
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80072ec:	4013      	ands	r3, r2
 80072ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80072f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80072fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007302:	4a04      	ldr	r2, [pc, #16]	; (8007314 <__NVIC_SetPriorityGrouping+0x44>)
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	60d3      	str	r3, [r2, #12]
}
 8007308:	bf00      	nop
 800730a:	3714      	adds	r7, #20
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr
 8007314:	e000ed00 	.word	0xe000ed00

08007318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007318:	b480      	push	{r7}
 800731a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800731c:	4b04      	ldr	r3, [pc, #16]	; (8007330 <__NVIC_GetPriorityGrouping+0x18>)
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	0a1b      	lsrs	r3, r3, #8
 8007322:	f003 0307 	and.w	r3, r3, #7
}
 8007326:	4618      	mov	r0, r3
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr
 8007330:	e000ed00 	.word	0xe000ed00

08007334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	4603      	mov	r3, r0
 800733c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800733e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007342:	2b00      	cmp	r3, #0
 8007344:	db0b      	blt.n	800735e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007346:	79fb      	ldrb	r3, [r7, #7]
 8007348:	f003 021f 	and.w	r2, r3, #31
 800734c:	4907      	ldr	r1, [pc, #28]	; (800736c <__NVIC_EnableIRQ+0x38>)
 800734e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007352:	095b      	lsrs	r3, r3, #5
 8007354:	2001      	movs	r0, #1
 8007356:	fa00 f202 	lsl.w	r2, r0, r2
 800735a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800735e:	bf00      	nop
 8007360:	370c      	adds	r7, #12
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	e000e100 	.word	0xe000e100

08007370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	4603      	mov	r3, r0
 8007378:	6039      	str	r1, [r7, #0]
 800737a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800737c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007380:	2b00      	cmp	r3, #0
 8007382:	db0a      	blt.n	800739a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	b2da      	uxtb	r2, r3
 8007388:	490c      	ldr	r1, [pc, #48]	; (80073bc <__NVIC_SetPriority+0x4c>)
 800738a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800738e:	0112      	lsls	r2, r2, #4
 8007390:	b2d2      	uxtb	r2, r2
 8007392:	440b      	add	r3, r1
 8007394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007398:	e00a      	b.n	80073b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	b2da      	uxtb	r2, r3
 800739e:	4908      	ldr	r1, [pc, #32]	; (80073c0 <__NVIC_SetPriority+0x50>)
 80073a0:	79fb      	ldrb	r3, [r7, #7]
 80073a2:	f003 030f 	and.w	r3, r3, #15
 80073a6:	3b04      	subs	r3, #4
 80073a8:	0112      	lsls	r2, r2, #4
 80073aa:	b2d2      	uxtb	r2, r2
 80073ac:	440b      	add	r3, r1
 80073ae:	761a      	strb	r2, [r3, #24]
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	e000e100 	.word	0xe000e100
 80073c0:	e000ed00 	.word	0xe000ed00

080073c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b089      	sub	sp, #36	; 0x24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f003 0307 	and.w	r3, r3, #7
 80073d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	f1c3 0307 	rsb	r3, r3, #7
 80073de:	2b04      	cmp	r3, #4
 80073e0:	bf28      	it	cs
 80073e2:	2304      	movcs	r3, #4
 80073e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	3304      	adds	r3, #4
 80073ea:	2b06      	cmp	r3, #6
 80073ec:	d902      	bls.n	80073f4 <NVIC_EncodePriority+0x30>
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	3b03      	subs	r3, #3
 80073f2:	e000      	b.n	80073f6 <NVIC_EncodePriority+0x32>
 80073f4:	2300      	movs	r3, #0
 80073f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073f8:	f04f 32ff 	mov.w	r2, #4294967295
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007402:	43da      	mvns	r2, r3
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	401a      	ands	r2, r3
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800740c:	f04f 31ff 	mov.w	r1, #4294967295
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	fa01 f303 	lsl.w	r3, r1, r3
 8007416:	43d9      	mvns	r1, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800741c:	4313      	orrs	r3, r2
         );
}
 800741e:	4618      	mov	r0, r3
 8007420:	3724      	adds	r7, #36	; 0x24
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b082      	sub	sp, #8
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7ff ff4c 	bl	80072d0 <__NVIC_SetPriorityGrouping>
}
 8007438:	bf00      	nop
 800743a:	3708      	adds	r7, #8
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007440:	b580      	push	{r7, lr}
 8007442:	b086      	sub	sp, #24
 8007444:	af00      	add	r7, sp, #0
 8007446:	4603      	mov	r3, r0
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
 800744c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800744e:	2300      	movs	r3, #0
 8007450:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007452:	f7ff ff61 	bl	8007318 <__NVIC_GetPriorityGrouping>
 8007456:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	68b9      	ldr	r1, [r7, #8]
 800745c:	6978      	ldr	r0, [r7, #20]
 800745e:	f7ff ffb1 	bl	80073c4 <NVIC_EncodePriority>
 8007462:	4602      	mov	r2, r0
 8007464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007468:	4611      	mov	r1, r2
 800746a:	4618      	mov	r0, r3
 800746c:	f7ff ff80 	bl	8007370 <__NVIC_SetPriority>
}
 8007470:	bf00      	nop
 8007472:	3718      	adds	r7, #24
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	4603      	mov	r3, r0
 8007480:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007486:	4618      	mov	r0, r3
 8007488:	f7ff ff54 	bl	8007334 <__NVIC_EnableIRQ>
}
 800748c:	bf00      	nop
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d101      	bne.n	80074a6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e014      	b.n	80074d0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	791b      	ldrb	r3, [r3, #4]
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d105      	bne.n	80074bc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7f9 feb6 	bl	8001228 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2202      	movs	r2, #2
 80074c0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3708      	adds	r7, #8
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ee:	d120      	bne.n	8007532 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074fe:	d118      	bne.n	8007532 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2204      	movs	r2, #4
 8007504:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	f043 0201 	orr.w	r2, r3, #1
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800751a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800752a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f82d 	bl	800758c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800753c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007540:	d120      	bne.n	8007584 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007548:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800754c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007550:	d118      	bne.n	8007584 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2204      	movs	r2, #4
 8007556:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	f043 0202 	orr.w	r2, r3, #2
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800756c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800757c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f85d 	bl	800763e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8007584:	bf00      	nop
 8007586:	3708      	adds	r7, #8
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8007594:	bf00      	nop
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b087      	sub	sp, #28
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	795b      	ldrb	r3, [r3, #5]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d101      	bne.n	80075b8 <HAL_DAC_ConfigChannel+0x18>
 80075b4:	2302      	movs	r3, #2
 80075b6:	e03c      	b.n	8007632 <HAL_DAC_ConfigChannel+0x92>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2201      	movs	r2, #1
 80075bc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2202      	movs	r2, #2
 80075c2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f003 0310 	and.w	r3, r3, #16
 80075d2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80075d6:	fa02 f303 	lsl.w	r3, r2, r3
 80075da:	43db      	mvns	r3, r3
 80075dc:	697a      	ldr	r2, [r7, #20]
 80075de:	4013      	ands	r3, r2
 80075e0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f003 0310 	and.w	r3, r3, #16
 80075f4:	693a      	ldr	r2, [r7, #16]
 80075f6:	fa02 f303 	lsl.w	r3, r2, r3
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	697a      	ldr	r2, [r7, #20]
 8007606:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6819      	ldr	r1, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f003 0310 	and.w	r3, r3, #16
 8007614:	22c0      	movs	r2, #192	; 0xc0
 8007616:	fa02 f303 	lsl.w	r3, r2, r3
 800761a:	43da      	mvns	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	400a      	ands	r2, r1
 8007622:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2201      	movs	r2, #1
 8007628:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	371c      	adds	r7, #28
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800763e:	b480      	push	{r7}
 8007640:	b083      	sub	sp, #12
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8007646:	bf00      	nop
 8007648:	370c      	adds	r7, #12
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
	...

08007654 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800765c:	2300      	movs	r3, #0
 800765e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007660:	f7ff faa8 	bl	8006bb4 <HAL_GetTick>
 8007664:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d101      	bne.n	8007670 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e099      	b.n	80077a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2202      	movs	r2, #2
 8007674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f022 0201 	bic.w	r2, r2, #1
 800768e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007690:	e00f      	b.n	80076b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007692:	f7ff fa8f 	bl	8006bb4 <HAL_GetTick>
 8007696:	4602      	mov	r2, r0
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	1ad3      	subs	r3, r2, r3
 800769c:	2b05      	cmp	r3, #5
 800769e:	d908      	bls.n	80076b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2220      	movs	r2, #32
 80076a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2203      	movs	r2, #3
 80076aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e078      	b.n	80077a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1e8      	bne.n	8007692 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	4b38      	ldr	r3, [pc, #224]	; (80077ac <HAL_DMA_Init+0x158>)
 80076cc:	4013      	ands	r3, r2
 80076ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685a      	ldr	r2, [r3, #4]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80076de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a1b      	ldr	r3, [r3, #32]
 80076fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	4313      	orrs	r3, r2
 8007702:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007708:	2b04      	cmp	r3, #4
 800770a:	d107      	bne.n	800771c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007714:	4313      	orrs	r3, r2
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	4313      	orrs	r3, r2
 800771a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	697a      	ldr	r2, [r7, #20]
 8007722:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	f023 0307 	bic.w	r3, r3, #7
 8007732:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007738:	697a      	ldr	r2, [r7, #20]
 800773a:	4313      	orrs	r3, r2
 800773c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007742:	2b04      	cmp	r3, #4
 8007744:	d117      	bne.n	8007776 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	4313      	orrs	r3, r2
 800774e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00e      	beq.n	8007776 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fa89 	bl	8007c70 <DMA_CheckFifoParam>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d008      	beq.n	8007776 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2240      	movs	r2, #64	; 0x40
 8007768:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007772:	2301      	movs	r3, #1
 8007774:	e016      	b.n	80077a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fa40 	bl	8007c04 <DMA_CalcBaseAndBitshift>
 8007784:	4603      	mov	r3, r0
 8007786:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800778c:	223f      	movs	r2, #63	; 0x3f
 800778e:	409a      	lsls	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3718      	adds	r7, #24
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	f010803f 	.word	0xf010803f

080077b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80077be:	f7ff f9f9 	bl	8006bb4 <HAL_GetTick>
 80077c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d008      	beq.n	80077e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2280      	movs	r2, #128	; 0x80
 80077d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e052      	b.n	8007888 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f022 0216 	bic.w	r2, r2, #22
 80077f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	695a      	ldr	r2, [r3, #20]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007800:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007806:	2b00      	cmp	r3, #0
 8007808:	d103      	bne.n	8007812 <HAL_DMA_Abort+0x62>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800780e:	2b00      	cmp	r3, #0
 8007810:	d007      	beq.n	8007822 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f022 0208 	bic.w	r2, r2, #8
 8007820:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f022 0201 	bic.w	r2, r2, #1
 8007830:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007832:	e013      	b.n	800785c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007834:	f7ff f9be 	bl	8006bb4 <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	2b05      	cmp	r3, #5
 8007840:	d90c      	bls.n	800785c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2220      	movs	r2, #32
 8007846:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2203      	movs	r2, #3
 800784c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007858:	2303      	movs	r3, #3
 800785a:	e015      	b.n	8007888 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1e4      	bne.n	8007834 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800786e:	223f      	movs	r2, #63	; 0x3f
 8007870:	409a      	lsls	r2, r3
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d004      	beq.n	80078ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2280      	movs	r2, #128	; 0x80
 80078a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e00c      	b.n	80078c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2205      	movs	r2, #5
 80078b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f022 0201 	bic.w	r2, r2, #1
 80078c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80078dc:	2300      	movs	r3, #0
 80078de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80078e0:	4b8e      	ldr	r3, [pc, #568]	; (8007b1c <HAL_DMA_IRQHandler+0x248>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a8e      	ldr	r2, [pc, #568]	; (8007b20 <HAL_DMA_IRQHandler+0x24c>)
 80078e6:	fba2 2303 	umull	r2, r3, r2, r3
 80078ea:	0a9b      	lsrs	r3, r3, #10
 80078ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078fe:	2208      	movs	r2, #8
 8007900:	409a      	lsls	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	4013      	ands	r3, r2
 8007906:	2b00      	cmp	r3, #0
 8007908:	d01a      	beq.n	8007940 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 0304 	and.w	r3, r3, #4
 8007914:	2b00      	cmp	r3, #0
 8007916:	d013      	beq.n	8007940 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f022 0204 	bic.w	r2, r2, #4
 8007926:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800792c:	2208      	movs	r2, #8
 800792e:	409a      	lsls	r2, r3
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007938:	f043 0201 	orr.w	r2, r3, #1
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007944:	2201      	movs	r2, #1
 8007946:	409a      	lsls	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	4013      	ands	r3, r2
 800794c:	2b00      	cmp	r3, #0
 800794e:	d012      	beq.n	8007976 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	695b      	ldr	r3, [r3, #20]
 8007956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00b      	beq.n	8007976 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007962:	2201      	movs	r2, #1
 8007964:	409a      	lsls	r2, r3
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800796e:	f043 0202 	orr.w	r2, r3, #2
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800797a:	2204      	movs	r2, #4
 800797c:	409a      	lsls	r2, r3
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	4013      	ands	r3, r2
 8007982:	2b00      	cmp	r3, #0
 8007984:	d012      	beq.n	80079ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00b      	beq.n	80079ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007998:	2204      	movs	r2, #4
 800799a:	409a      	lsls	r2, r3
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a4:	f043 0204 	orr.w	r2, r3, #4
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079b0:	2210      	movs	r2, #16
 80079b2:	409a      	lsls	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	4013      	ands	r3, r2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d043      	beq.n	8007a44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 0308 	and.w	r3, r3, #8
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d03c      	beq.n	8007a44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079ce:	2210      	movs	r2, #16
 80079d0:	409a      	lsls	r2, r3
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d018      	beq.n	8007a16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d108      	bne.n	8007a04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d024      	beq.n	8007a44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	4798      	blx	r3
 8007a02:	e01f      	b.n	8007a44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d01b      	beq.n	8007a44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	4798      	blx	r3
 8007a14:	e016      	b.n	8007a44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d107      	bne.n	8007a34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f022 0208 	bic.w	r2, r2, #8
 8007a32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d003      	beq.n	8007a44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a48:	2220      	movs	r2, #32
 8007a4a:	409a      	lsls	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	4013      	ands	r3, r2
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f000 808f 	beq.w	8007b74 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 0310 	and.w	r3, r3, #16
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f000 8087 	beq.w	8007b74 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a6a:	2220      	movs	r2, #32
 8007a6c:	409a      	lsls	r2, r3
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b05      	cmp	r3, #5
 8007a7c:	d136      	bne.n	8007aec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f022 0216 	bic.w	r2, r2, #22
 8007a8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	695a      	ldr	r2, [r3, #20]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d103      	bne.n	8007aae <HAL_DMA_IRQHandler+0x1da>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d007      	beq.n	8007abe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f022 0208 	bic.w	r2, r2, #8
 8007abc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ac2:	223f      	movs	r2, #63	; 0x3f
 8007ac4:	409a      	lsls	r2, r3
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d07e      	beq.n	8007be0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	4798      	blx	r3
        }
        return;
 8007aea:	e079      	b.n	8007be0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d01d      	beq.n	8007b36 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10d      	bne.n	8007b24 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d031      	beq.n	8007b74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	4798      	blx	r3
 8007b18:	e02c      	b.n	8007b74 <HAL_DMA_IRQHandler+0x2a0>
 8007b1a:	bf00      	nop
 8007b1c:	20000008 	.word	0x20000008
 8007b20:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d023      	beq.n	8007b74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	4798      	blx	r3
 8007b34:	e01e      	b.n	8007b74 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10f      	bne.n	8007b64 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f022 0210 	bic.w	r2, r2, #16
 8007b52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d003      	beq.n	8007b74 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d032      	beq.n	8007be2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b80:	f003 0301 	and.w	r3, r3, #1
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d022      	beq.n	8007bce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2205      	movs	r2, #5
 8007b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f022 0201 	bic.w	r2, r2, #1
 8007b9e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	60bb      	str	r3, [r7, #8]
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d307      	bcc.n	8007bbc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1f2      	bne.n	8007ba0 <HAL_DMA_IRQHandler+0x2cc>
 8007bba:	e000      	b.n	8007bbe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007bbc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d005      	beq.n	8007be2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	4798      	blx	r3
 8007bde:	e000      	b.n	8007be2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007be0:	bf00      	nop
    }
  }
}
 8007be2:	3718      	adds	r7, #24
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007bf6:	b2db      	uxtb	r3, r3
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	3b10      	subs	r3, #16
 8007c14:	4a14      	ldr	r2, [pc, #80]	; (8007c68 <DMA_CalcBaseAndBitshift+0x64>)
 8007c16:	fba2 2303 	umull	r2, r3, r2, r3
 8007c1a:	091b      	lsrs	r3, r3, #4
 8007c1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007c1e:	4a13      	ldr	r2, [pc, #76]	; (8007c6c <DMA_CalcBaseAndBitshift+0x68>)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	4413      	add	r3, r2
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	461a      	mov	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2b03      	cmp	r3, #3
 8007c30:	d909      	bls.n	8007c46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007c3a:	f023 0303 	bic.w	r3, r3, #3
 8007c3e:	1d1a      	adds	r2, r3, #4
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	659a      	str	r2, [r3, #88]	; 0x58
 8007c44:	e007      	b.n	8007c56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007c4e:	f023 0303 	bic.w	r3, r3, #3
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	aaaaaaab 	.word	0xaaaaaaab
 8007c6c:	08012590 	.word	0x08012590

08007c70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b085      	sub	sp, #20
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d11f      	bne.n	8007cca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	2b03      	cmp	r3, #3
 8007c8e:	d856      	bhi.n	8007d3e <DMA_CheckFifoParam+0xce>
 8007c90:	a201      	add	r2, pc, #4	; (adr r2, 8007c98 <DMA_CheckFifoParam+0x28>)
 8007c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c96:	bf00      	nop
 8007c98:	08007ca9 	.word	0x08007ca9
 8007c9c:	08007cbb 	.word	0x08007cbb
 8007ca0:	08007ca9 	.word	0x08007ca9
 8007ca4:	08007d3f 	.word	0x08007d3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d046      	beq.n	8007d42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007cb8:	e043      	b.n	8007d42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007cc2:	d140      	bne.n	8007d46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007cc8:	e03d      	b.n	8007d46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	699b      	ldr	r3, [r3, #24]
 8007cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cd2:	d121      	bne.n	8007d18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	2b03      	cmp	r3, #3
 8007cd8:	d837      	bhi.n	8007d4a <DMA_CheckFifoParam+0xda>
 8007cda:	a201      	add	r2, pc, #4	; (adr r2, 8007ce0 <DMA_CheckFifoParam+0x70>)
 8007cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce0:	08007cf1 	.word	0x08007cf1
 8007ce4:	08007cf7 	.word	0x08007cf7
 8007ce8:	08007cf1 	.word	0x08007cf1
 8007cec:	08007d09 	.word	0x08007d09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf4:	e030      	b.n	8007d58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d025      	beq.n	8007d4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d06:	e022      	b.n	8007d4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d10:	d11f      	bne.n	8007d52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007d16:	e01c      	b.n	8007d52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d903      	bls.n	8007d26 <DMA_CheckFifoParam+0xb6>
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	2b03      	cmp	r3, #3
 8007d22:	d003      	beq.n	8007d2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007d24:	e018      	b.n	8007d58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	73fb      	strb	r3, [r7, #15]
      break;
 8007d2a:	e015      	b.n	8007d58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00e      	beq.n	8007d56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d3c:	e00b      	b.n	8007d56 <DMA_CheckFifoParam+0xe6>
      break;
 8007d3e:	bf00      	nop
 8007d40:	e00a      	b.n	8007d58 <DMA_CheckFifoParam+0xe8>
      break;
 8007d42:	bf00      	nop
 8007d44:	e008      	b.n	8007d58 <DMA_CheckFifoParam+0xe8>
      break;
 8007d46:	bf00      	nop
 8007d48:	e006      	b.n	8007d58 <DMA_CheckFifoParam+0xe8>
      break;
 8007d4a:	bf00      	nop
 8007d4c:	e004      	b.n	8007d58 <DMA_CheckFifoParam+0xe8>
      break;
 8007d4e:	bf00      	nop
 8007d50:	e002      	b.n	8007d58 <DMA_CheckFifoParam+0xe8>
      break;   
 8007d52:	bf00      	nop
 8007d54:	e000      	b.n	8007d58 <DMA_CheckFifoParam+0xe8>
      break;
 8007d56:	bf00      	nop
    }
  } 
  
  return status; 
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3714      	adds	r7, #20
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop

08007d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b089      	sub	sp, #36	; 0x24
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007d72:	2300      	movs	r3, #0
 8007d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007d7e:	2300      	movs	r3, #0
 8007d80:	61fb      	str	r3, [r7, #28]
 8007d82:	e16b      	b.n	800805c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007d84:	2201      	movs	r2, #1
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	4013      	ands	r3, r2
 8007d96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	f040 815a 	bne.w	8008056 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	f003 0303 	and.w	r3, r3, #3
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d005      	beq.n	8007dba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d130      	bne.n	8007e1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	005b      	lsls	r3, r3, #1
 8007dc4:	2203      	movs	r2, #3
 8007dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dca:	43db      	mvns	r3, r3
 8007dcc:	69ba      	ldr	r2, [r7, #24]
 8007dce:	4013      	ands	r3, r2
 8007dd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	68da      	ldr	r2, [r3, #12]
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	005b      	lsls	r3, r3, #1
 8007dda:	fa02 f303 	lsl.w	r3, r2, r3
 8007dde:	69ba      	ldr	r2, [r7, #24]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	69ba      	ldr	r2, [r7, #24]
 8007de8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007df0:	2201      	movs	r2, #1
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	fa02 f303 	lsl.w	r3, r2, r3
 8007df8:	43db      	mvns	r3, r3
 8007dfa:	69ba      	ldr	r2, [r7, #24]
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	091b      	lsrs	r3, r3, #4
 8007e06:	f003 0201 	and.w	r2, r3, #1
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e10:	69ba      	ldr	r2, [r7, #24]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	69ba      	ldr	r2, [r7, #24]
 8007e1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	f003 0303 	and.w	r3, r3, #3
 8007e24:	2b03      	cmp	r3, #3
 8007e26:	d017      	beq.n	8007e58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	005b      	lsls	r3, r3, #1
 8007e32:	2203      	movs	r2, #3
 8007e34:	fa02 f303 	lsl.w	r3, r2, r3
 8007e38:	43db      	mvns	r3, r3
 8007e3a:	69ba      	ldr	r2, [r7, #24]
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	689a      	ldr	r2, [r3, #8]
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	005b      	lsls	r3, r3, #1
 8007e48:	fa02 f303 	lsl.w	r3, r2, r3
 8007e4c:	69ba      	ldr	r2, [r7, #24]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	69ba      	ldr	r2, [r7, #24]
 8007e56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	f003 0303 	and.w	r3, r3, #3
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d123      	bne.n	8007eac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	08da      	lsrs	r2, r3, #3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	3208      	adds	r2, #8
 8007e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	f003 0307 	and.w	r3, r3, #7
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	220f      	movs	r2, #15
 8007e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e80:	43db      	mvns	r3, r3
 8007e82:	69ba      	ldr	r2, [r7, #24]
 8007e84:	4013      	ands	r3, r2
 8007e86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	691a      	ldr	r2, [r3, #16]
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	f003 0307 	and.w	r3, r3, #7
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	fa02 f303 	lsl.w	r3, r2, r3
 8007e98:	69ba      	ldr	r2, [r7, #24]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	08da      	lsrs	r2, r3, #3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	3208      	adds	r2, #8
 8007ea6:	69b9      	ldr	r1, [r7, #24]
 8007ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	005b      	lsls	r3, r3, #1
 8007eb6:	2203      	movs	r2, #3
 8007eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ebc:	43db      	mvns	r3, r3
 8007ebe:	69ba      	ldr	r2, [r7, #24]
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	f003 0203 	and.w	r2, r3, #3
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	005b      	lsls	r3, r3, #1
 8007ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed4:	69ba      	ldr	r2, [r7, #24]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	69ba      	ldr	r2, [r7, #24]
 8007ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f000 80b4 	beq.w	8008056 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007eee:	2300      	movs	r3, #0
 8007ef0:	60fb      	str	r3, [r7, #12]
 8007ef2:	4b60      	ldr	r3, [pc, #384]	; (8008074 <HAL_GPIO_Init+0x30c>)
 8007ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ef6:	4a5f      	ldr	r2, [pc, #380]	; (8008074 <HAL_GPIO_Init+0x30c>)
 8007ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007efc:	6453      	str	r3, [r2, #68]	; 0x44
 8007efe:	4b5d      	ldr	r3, [pc, #372]	; (8008074 <HAL_GPIO_Init+0x30c>)
 8007f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f06:	60fb      	str	r3, [r7, #12]
 8007f08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007f0a:	4a5b      	ldr	r2, [pc, #364]	; (8008078 <HAL_GPIO_Init+0x310>)
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	089b      	lsrs	r3, r3, #2
 8007f10:	3302      	adds	r3, #2
 8007f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	f003 0303 	and.w	r3, r3, #3
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	220f      	movs	r2, #15
 8007f22:	fa02 f303 	lsl.w	r3, r2, r3
 8007f26:	43db      	mvns	r3, r3
 8007f28:	69ba      	ldr	r2, [r7, #24]
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a52      	ldr	r2, [pc, #328]	; (800807c <HAL_GPIO_Init+0x314>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d02b      	beq.n	8007f8e <HAL_GPIO_Init+0x226>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a51      	ldr	r2, [pc, #324]	; (8008080 <HAL_GPIO_Init+0x318>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d025      	beq.n	8007f8a <HAL_GPIO_Init+0x222>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a50      	ldr	r2, [pc, #320]	; (8008084 <HAL_GPIO_Init+0x31c>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d01f      	beq.n	8007f86 <HAL_GPIO_Init+0x21e>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a4f      	ldr	r2, [pc, #316]	; (8008088 <HAL_GPIO_Init+0x320>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d019      	beq.n	8007f82 <HAL_GPIO_Init+0x21a>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a4e      	ldr	r2, [pc, #312]	; (800808c <HAL_GPIO_Init+0x324>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d013      	beq.n	8007f7e <HAL_GPIO_Init+0x216>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a4d      	ldr	r2, [pc, #308]	; (8008090 <HAL_GPIO_Init+0x328>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d00d      	beq.n	8007f7a <HAL_GPIO_Init+0x212>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a4c      	ldr	r2, [pc, #304]	; (8008094 <HAL_GPIO_Init+0x32c>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d007      	beq.n	8007f76 <HAL_GPIO_Init+0x20e>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a4b      	ldr	r2, [pc, #300]	; (8008098 <HAL_GPIO_Init+0x330>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d101      	bne.n	8007f72 <HAL_GPIO_Init+0x20a>
 8007f6e:	2307      	movs	r3, #7
 8007f70:	e00e      	b.n	8007f90 <HAL_GPIO_Init+0x228>
 8007f72:	2308      	movs	r3, #8
 8007f74:	e00c      	b.n	8007f90 <HAL_GPIO_Init+0x228>
 8007f76:	2306      	movs	r3, #6
 8007f78:	e00a      	b.n	8007f90 <HAL_GPIO_Init+0x228>
 8007f7a:	2305      	movs	r3, #5
 8007f7c:	e008      	b.n	8007f90 <HAL_GPIO_Init+0x228>
 8007f7e:	2304      	movs	r3, #4
 8007f80:	e006      	b.n	8007f90 <HAL_GPIO_Init+0x228>
 8007f82:	2303      	movs	r3, #3
 8007f84:	e004      	b.n	8007f90 <HAL_GPIO_Init+0x228>
 8007f86:	2302      	movs	r3, #2
 8007f88:	e002      	b.n	8007f90 <HAL_GPIO_Init+0x228>
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e000      	b.n	8007f90 <HAL_GPIO_Init+0x228>
 8007f8e:	2300      	movs	r3, #0
 8007f90:	69fa      	ldr	r2, [r7, #28]
 8007f92:	f002 0203 	and.w	r2, r2, #3
 8007f96:	0092      	lsls	r2, r2, #2
 8007f98:	4093      	lsls	r3, r2
 8007f9a:	69ba      	ldr	r2, [r7, #24]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007fa0:	4935      	ldr	r1, [pc, #212]	; (8008078 <HAL_GPIO_Init+0x310>)
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	089b      	lsrs	r3, r3, #2
 8007fa6:	3302      	adds	r3, #2
 8007fa8:	69ba      	ldr	r2, [r7, #24]
 8007faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007fae:	4b3b      	ldr	r3, [pc, #236]	; (800809c <HAL_GPIO_Init+0x334>)
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	43db      	mvns	r3, r3
 8007fb8:	69ba      	ldr	r2, [r7, #24]
 8007fba:	4013      	ands	r3, r2
 8007fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d003      	beq.n	8007fd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007fca:	69ba      	ldr	r2, [r7, #24]
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007fd2:	4a32      	ldr	r2, [pc, #200]	; (800809c <HAL_GPIO_Init+0x334>)
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007fd8:	4b30      	ldr	r3, [pc, #192]	; (800809c <HAL_GPIO_Init+0x334>)
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	43db      	mvns	r3, r3
 8007fe2:	69ba      	ldr	r2, [r7, #24]
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d003      	beq.n	8007ffc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007ff4:	69ba      	ldr	r2, [r7, #24]
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007ffc:	4a27      	ldr	r2, [pc, #156]	; (800809c <HAL_GPIO_Init+0x334>)
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008002:	4b26      	ldr	r3, [pc, #152]	; (800809c <HAL_GPIO_Init+0x334>)
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	43db      	mvns	r3, r3
 800800c:	69ba      	ldr	r2, [r7, #24]
 800800e:	4013      	ands	r3, r2
 8008010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800801a:	2b00      	cmp	r3, #0
 800801c:	d003      	beq.n	8008026 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800801e:	69ba      	ldr	r2, [r7, #24]
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	4313      	orrs	r3, r2
 8008024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008026:	4a1d      	ldr	r2, [pc, #116]	; (800809c <HAL_GPIO_Init+0x334>)
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800802c:	4b1b      	ldr	r3, [pc, #108]	; (800809c <HAL_GPIO_Init+0x334>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	43db      	mvns	r3, r3
 8008036:	69ba      	ldr	r2, [r7, #24]
 8008038:	4013      	ands	r3, r2
 800803a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008044:	2b00      	cmp	r3, #0
 8008046:	d003      	beq.n	8008050 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008048:	69ba      	ldr	r2, [r7, #24]
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	4313      	orrs	r3, r2
 800804e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008050:	4a12      	ldr	r2, [pc, #72]	; (800809c <HAL_GPIO_Init+0x334>)
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	3301      	adds	r3, #1
 800805a:	61fb      	str	r3, [r7, #28]
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	2b0f      	cmp	r3, #15
 8008060:	f67f ae90 	bls.w	8007d84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008064:	bf00      	nop
 8008066:	bf00      	nop
 8008068:	3724      	adds	r7, #36	; 0x24
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	40023800 	.word	0x40023800
 8008078:	40013800 	.word	0x40013800
 800807c:	40020000 	.word	0x40020000
 8008080:	40020400 	.word	0x40020400
 8008084:	40020800 	.word	0x40020800
 8008088:	40020c00 	.word	0x40020c00
 800808c:	40021000 	.word	0x40021000
 8008090:	40021400 	.word	0x40021400
 8008094:	40021800 	.word	0x40021800
 8008098:	40021c00 	.word	0x40021c00
 800809c:	40013c00 	.word	0x40013c00

080080a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	460b      	mov	r3, r1
 80080aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	691a      	ldr	r2, [r3, #16]
 80080b0:	887b      	ldrh	r3, [r7, #2]
 80080b2:	4013      	ands	r3, r2
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d002      	beq.n	80080be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80080b8:	2301      	movs	r3, #1
 80080ba:	73fb      	strb	r3, [r7, #15]
 80080bc:	e001      	b.n	80080c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80080be:	2300      	movs	r3, #0
 80080c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3714      	adds	r7, #20
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	807b      	strh	r3, [r7, #2]
 80080dc:	4613      	mov	r3, r2
 80080de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80080e0:	787b      	ldrb	r3, [r7, #1]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d003      	beq.n	80080ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80080e6:	887a      	ldrh	r2, [r7, #2]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80080ec:	e003      	b.n	80080f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80080ee:	887b      	ldrh	r3, [r7, #2]
 80080f0:	041a      	lsls	r2, r3, #16
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	619a      	str	r2, [r3, #24]
}
 80080f6:	bf00      	nop
 80080f8:	370c      	adds	r7, #12
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr

08008102 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008102:	b480      	push	{r7}
 8008104:	b085      	sub	sp, #20
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
 800810a:	460b      	mov	r3, r1
 800810c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	695b      	ldr	r3, [r3, #20]
 8008112:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008114:	887a      	ldrh	r2, [r7, #2]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	4013      	ands	r3, r2
 800811a:	041a      	lsls	r2, r3, #16
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	43d9      	mvns	r1, r3
 8008120:	887b      	ldrh	r3, [r7, #2]
 8008122:	400b      	ands	r3, r1
 8008124:	431a      	orrs	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	619a      	str	r2, [r3, #24]
}
 800812a:	bf00      	nop
 800812c:	3714      	adds	r7, #20
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
	...

08008138 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	4603      	mov	r3, r0
 8008140:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008142:	4b08      	ldr	r3, [pc, #32]	; (8008164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008144:	695a      	ldr	r2, [r3, #20]
 8008146:	88fb      	ldrh	r3, [r7, #6]
 8008148:	4013      	ands	r3, r2
 800814a:	2b00      	cmp	r3, #0
 800814c:	d006      	beq.n	800815c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800814e:	4a05      	ldr	r2, [pc, #20]	; (8008164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008150:	88fb      	ldrh	r3, [r7, #6]
 8008152:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008154:	88fb      	ldrh	r3, [r7, #6]
 8008156:	4618      	mov	r0, r3
 8008158:	f7f9 fb56 	bl	8001808 <HAL_GPIO_EXTI_Callback>
  }
}
 800815c:	bf00      	nop
 800815e:	3708      	adds	r7, #8
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	40013c00 	.word	0x40013c00

08008168 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d101      	bne.n	800817a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	e12b      	b.n	80083d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008180:	b2db      	uxtb	r3, r3
 8008182:	2b00      	cmp	r3, #0
 8008184:	d106      	bne.n	8008194 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f7f9 fc2e 	bl	80019f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2224      	movs	r2, #36	; 0x24
 8008198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f022 0201 	bic.w	r2, r2, #1
 80081aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80081ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80081cc:	f002 fa5c 	bl	800a688 <HAL_RCC_GetPCLK1Freq>
 80081d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	4a81      	ldr	r2, [pc, #516]	; (80083dc <HAL_I2C_Init+0x274>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d807      	bhi.n	80081ec <HAL_I2C_Init+0x84>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	4a80      	ldr	r2, [pc, #512]	; (80083e0 <HAL_I2C_Init+0x278>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	bf94      	ite	ls
 80081e4:	2301      	movls	r3, #1
 80081e6:	2300      	movhi	r3, #0
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	e006      	b.n	80081fa <HAL_I2C_Init+0x92>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4a7d      	ldr	r2, [pc, #500]	; (80083e4 <HAL_I2C_Init+0x27c>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	bf94      	ite	ls
 80081f4:	2301      	movls	r3, #1
 80081f6:	2300      	movhi	r3, #0
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e0e7      	b.n	80083d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	4a78      	ldr	r2, [pc, #480]	; (80083e8 <HAL_I2C_Init+0x280>)
 8008206:	fba2 2303 	umull	r2, r3, r2, r3
 800820a:	0c9b      	lsrs	r3, r3, #18
 800820c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	68ba      	ldr	r2, [r7, #8]
 800821e:	430a      	orrs	r2, r1
 8008220:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	6a1b      	ldr	r3, [r3, #32]
 8008228:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	4a6a      	ldr	r2, [pc, #424]	; (80083dc <HAL_I2C_Init+0x274>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d802      	bhi.n	800823c <HAL_I2C_Init+0xd4>
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	3301      	adds	r3, #1
 800823a:	e009      	b.n	8008250 <HAL_I2C_Init+0xe8>
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008242:	fb02 f303 	mul.w	r3, r2, r3
 8008246:	4a69      	ldr	r2, [pc, #420]	; (80083ec <HAL_I2C_Init+0x284>)
 8008248:	fba2 2303 	umull	r2, r3, r2, r3
 800824c:	099b      	lsrs	r3, r3, #6
 800824e:	3301      	adds	r3, #1
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	6812      	ldr	r2, [r2, #0]
 8008254:	430b      	orrs	r3, r1
 8008256:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	69db      	ldr	r3, [r3, #28]
 800825e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008262:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	495c      	ldr	r1, [pc, #368]	; (80083dc <HAL_I2C_Init+0x274>)
 800826c:	428b      	cmp	r3, r1
 800826e:	d819      	bhi.n	80082a4 <HAL_I2C_Init+0x13c>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	1e59      	subs	r1, r3, #1
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	005b      	lsls	r3, r3, #1
 800827a:	fbb1 f3f3 	udiv	r3, r1, r3
 800827e:	1c59      	adds	r1, r3, #1
 8008280:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008284:	400b      	ands	r3, r1
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00a      	beq.n	80082a0 <HAL_I2C_Init+0x138>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	1e59      	subs	r1, r3, #1
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	005b      	lsls	r3, r3, #1
 8008294:	fbb1 f3f3 	udiv	r3, r1, r3
 8008298:	3301      	adds	r3, #1
 800829a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800829e:	e051      	b.n	8008344 <HAL_I2C_Init+0x1dc>
 80082a0:	2304      	movs	r3, #4
 80082a2:	e04f      	b.n	8008344 <HAL_I2C_Init+0x1dc>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d111      	bne.n	80082d0 <HAL_I2C_Init+0x168>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	1e58      	subs	r0, r3, #1
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6859      	ldr	r1, [r3, #4]
 80082b4:	460b      	mov	r3, r1
 80082b6:	005b      	lsls	r3, r3, #1
 80082b8:	440b      	add	r3, r1
 80082ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80082be:	3301      	adds	r3, #1
 80082c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	bf0c      	ite	eq
 80082c8:	2301      	moveq	r3, #1
 80082ca:	2300      	movne	r3, #0
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	e012      	b.n	80082f6 <HAL_I2C_Init+0x18e>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	1e58      	subs	r0, r3, #1
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6859      	ldr	r1, [r3, #4]
 80082d8:	460b      	mov	r3, r1
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	440b      	add	r3, r1
 80082de:	0099      	lsls	r1, r3, #2
 80082e0:	440b      	add	r3, r1
 80082e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80082e6:	3301      	adds	r3, #1
 80082e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	bf0c      	ite	eq
 80082f0:	2301      	moveq	r3, #1
 80082f2:	2300      	movne	r3, #0
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d001      	beq.n	80082fe <HAL_I2C_Init+0x196>
 80082fa:	2301      	movs	r3, #1
 80082fc:	e022      	b.n	8008344 <HAL_I2C_Init+0x1dc>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10e      	bne.n	8008324 <HAL_I2C_Init+0x1bc>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	1e58      	subs	r0, r3, #1
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6859      	ldr	r1, [r3, #4]
 800830e:	460b      	mov	r3, r1
 8008310:	005b      	lsls	r3, r3, #1
 8008312:	440b      	add	r3, r1
 8008314:	fbb0 f3f3 	udiv	r3, r0, r3
 8008318:	3301      	adds	r3, #1
 800831a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800831e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008322:	e00f      	b.n	8008344 <HAL_I2C_Init+0x1dc>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	1e58      	subs	r0, r3, #1
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6859      	ldr	r1, [r3, #4]
 800832c:	460b      	mov	r3, r1
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	440b      	add	r3, r1
 8008332:	0099      	lsls	r1, r3, #2
 8008334:	440b      	add	r3, r1
 8008336:	fbb0 f3f3 	udiv	r3, r0, r3
 800833a:	3301      	adds	r3, #1
 800833c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008340:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008344:	6879      	ldr	r1, [r7, #4]
 8008346:	6809      	ldr	r1, [r1, #0]
 8008348:	4313      	orrs	r3, r2
 800834a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	69da      	ldr	r2, [r3, #28]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a1b      	ldr	r3, [r3, #32]
 800835e:	431a      	orrs	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	430a      	orrs	r2, r1
 8008366:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008372:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	6911      	ldr	r1, [r2, #16]
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	68d2      	ldr	r2, [r2, #12]
 800837e:	4311      	orrs	r1, r2
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	6812      	ldr	r2, [r2, #0]
 8008384:	430b      	orrs	r3, r1
 8008386:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	695a      	ldr	r2, [r3, #20]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	699b      	ldr	r3, [r3, #24]
 800839a:	431a      	orrs	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	430a      	orrs	r2, r1
 80083a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f042 0201 	orr.w	r2, r2, #1
 80083b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2220      	movs	r2, #32
 80083be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	000186a0 	.word	0x000186a0
 80083e0:	001e847f 	.word	0x001e847f
 80083e4:	003d08ff 	.word	0x003d08ff
 80083e8:	431bde83 	.word	0x431bde83
 80083ec:	10624dd3 	.word	0x10624dd3

080083f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b088      	sub	sp, #32
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80083f8:	2300      	movs	r3, #0
 80083fa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008408:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008410:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008418:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800841a:	7bfb      	ldrb	r3, [r7, #15]
 800841c:	2b10      	cmp	r3, #16
 800841e:	d003      	beq.n	8008428 <HAL_I2C_EV_IRQHandler+0x38>
 8008420:	7bfb      	ldrb	r3, [r7, #15]
 8008422:	2b40      	cmp	r3, #64	; 0x40
 8008424:	f040 80c1 	bne.w	80085aa <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	699b      	ldr	r3, [r3, #24]
 800842e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	f003 0301 	and.w	r3, r3, #1
 800843e:	2b00      	cmp	r3, #0
 8008440:	d10d      	bne.n	800845e <HAL_I2C_EV_IRQHandler+0x6e>
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008448:	d003      	beq.n	8008452 <HAL_I2C_EV_IRQHandler+0x62>
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008450:	d101      	bne.n	8008456 <HAL_I2C_EV_IRQHandler+0x66>
 8008452:	2301      	movs	r3, #1
 8008454:	e000      	b.n	8008458 <HAL_I2C_EV_IRQHandler+0x68>
 8008456:	2300      	movs	r3, #0
 8008458:	2b01      	cmp	r3, #1
 800845a:	f000 8132 	beq.w	80086c2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	f003 0301 	and.w	r3, r3, #1
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00c      	beq.n	8008482 <HAL_I2C_EV_IRQHandler+0x92>
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	0a5b      	lsrs	r3, r3, #9
 800846c:	f003 0301 	and.w	r3, r3, #1
 8008470:	2b00      	cmp	r3, #0
 8008472:	d006      	beq.n	8008482 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f001 fc7b 	bl	8009d70 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fd83 	bl	8008f86 <I2C_Master_SB>
 8008480:	e092      	b.n	80085a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	08db      	lsrs	r3, r3, #3
 8008486:	f003 0301 	and.w	r3, r3, #1
 800848a:	2b00      	cmp	r3, #0
 800848c:	d009      	beq.n	80084a2 <HAL_I2C_EV_IRQHandler+0xb2>
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	0a5b      	lsrs	r3, r3, #9
 8008492:	f003 0301 	and.w	r3, r3, #1
 8008496:	2b00      	cmp	r3, #0
 8008498:	d003      	beq.n	80084a2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fdf9 	bl	8009092 <I2C_Master_ADD10>
 80084a0:	e082      	b.n	80085a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	085b      	lsrs	r3, r3, #1
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d009      	beq.n	80084c2 <HAL_I2C_EV_IRQHandler+0xd2>
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	0a5b      	lsrs	r3, r3, #9
 80084b2:	f003 0301 	and.w	r3, r3, #1
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d003      	beq.n	80084c2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fe13 	bl	80090e6 <I2C_Master_ADDR>
 80084c0:	e072      	b.n	80085a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	089b      	lsrs	r3, r3, #2
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d03b      	beq.n	8008546 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084dc:	f000 80f3 	beq.w	80086c6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	09db      	lsrs	r3, r3, #7
 80084e4:	f003 0301 	and.w	r3, r3, #1
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00f      	beq.n	800850c <HAL_I2C_EV_IRQHandler+0x11c>
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	0a9b      	lsrs	r3, r3, #10
 80084f0:	f003 0301 	and.w	r3, r3, #1
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d009      	beq.n	800850c <HAL_I2C_EV_IRQHandler+0x11c>
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	089b      	lsrs	r3, r3, #2
 80084fc:	f003 0301 	and.w	r3, r3, #1
 8008500:	2b00      	cmp	r3, #0
 8008502:	d103      	bne.n	800850c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f9f3 	bl	80088f0 <I2C_MasterTransmit_TXE>
 800850a:	e04d      	b.n	80085a8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	089b      	lsrs	r3, r3, #2
 8008510:	f003 0301 	and.w	r3, r3, #1
 8008514:	2b00      	cmp	r3, #0
 8008516:	f000 80d6 	beq.w	80086c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	0a5b      	lsrs	r3, r3, #9
 800851e:	f003 0301 	and.w	r3, r3, #1
 8008522:	2b00      	cmp	r3, #0
 8008524:	f000 80cf 	beq.w	80086c6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008528:	7bbb      	ldrb	r3, [r7, #14]
 800852a:	2b21      	cmp	r3, #33	; 0x21
 800852c:	d103      	bne.n	8008536 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fa7a 	bl	8008a28 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008534:	e0c7      	b.n	80086c6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8008536:	7bfb      	ldrb	r3, [r7, #15]
 8008538:	2b40      	cmp	r3, #64	; 0x40
 800853a:	f040 80c4 	bne.w	80086c6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fae8 	bl	8008b14 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008544:	e0bf      	b.n	80086c6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008554:	f000 80b7 	beq.w	80086c6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	099b      	lsrs	r3, r3, #6
 800855c:	f003 0301 	and.w	r3, r3, #1
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00f      	beq.n	8008584 <HAL_I2C_EV_IRQHandler+0x194>
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	0a9b      	lsrs	r3, r3, #10
 8008568:	f003 0301 	and.w	r3, r3, #1
 800856c:	2b00      	cmp	r3, #0
 800856e:	d009      	beq.n	8008584 <HAL_I2C_EV_IRQHandler+0x194>
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	089b      	lsrs	r3, r3, #2
 8008574:	f003 0301 	and.w	r3, r3, #1
 8008578:	2b00      	cmp	r3, #0
 800857a:	d103      	bne.n	8008584 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 fb5d 	bl	8008c3c <I2C_MasterReceive_RXNE>
 8008582:	e011      	b.n	80085a8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	089b      	lsrs	r3, r3, #2
 8008588:	f003 0301 	and.w	r3, r3, #1
 800858c:	2b00      	cmp	r3, #0
 800858e:	f000 809a 	beq.w	80086c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	0a5b      	lsrs	r3, r3, #9
 8008596:	f003 0301 	and.w	r3, r3, #1
 800859a:	2b00      	cmp	r3, #0
 800859c:	f000 8093 	beq.w	80086c6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fc06 	bl	8008db2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80085a6:	e08e      	b.n	80086c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80085a8:	e08d      	b.n	80086c6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d004      	beq.n	80085bc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	695b      	ldr	r3, [r3, #20]
 80085b8:	61fb      	str	r3, [r7, #28]
 80085ba:	e007      	b.n	80085cc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	699b      	ldr	r3, [r3, #24]
 80085c2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	085b      	lsrs	r3, r3, #1
 80085d0:	f003 0301 	and.w	r3, r3, #1
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d012      	beq.n	80085fe <HAL_I2C_EV_IRQHandler+0x20e>
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	0a5b      	lsrs	r3, r3, #9
 80085dc:	f003 0301 	and.w	r3, r3, #1
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00c      	beq.n	80085fe <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d003      	beq.n	80085f4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80085f4:	69b9      	ldr	r1, [r7, #24]
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 ffc4 	bl	8009584 <I2C_Slave_ADDR>
 80085fc:	e066      	b.n	80086cc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	091b      	lsrs	r3, r3, #4
 8008602:	f003 0301 	and.w	r3, r3, #1
 8008606:	2b00      	cmp	r3, #0
 8008608:	d009      	beq.n	800861e <HAL_I2C_EV_IRQHandler+0x22e>
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	0a5b      	lsrs	r3, r3, #9
 800860e:	f003 0301 	and.w	r3, r3, #1
 8008612:	2b00      	cmp	r3, #0
 8008614:	d003      	beq.n	800861e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fffe 	bl	8009618 <I2C_Slave_STOPF>
 800861c:	e056      	b.n	80086cc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800861e:	7bbb      	ldrb	r3, [r7, #14]
 8008620:	2b21      	cmp	r3, #33	; 0x21
 8008622:	d002      	beq.n	800862a <HAL_I2C_EV_IRQHandler+0x23a>
 8008624:	7bbb      	ldrb	r3, [r7, #14]
 8008626:	2b29      	cmp	r3, #41	; 0x29
 8008628:	d125      	bne.n	8008676 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	09db      	lsrs	r3, r3, #7
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00f      	beq.n	8008656 <HAL_I2C_EV_IRQHandler+0x266>
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	0a9b      	lsrs	r3, r3, #10
 800863a:	f003 0301 	and.w	r3, r3, #1
 800863e:	2b00      	cmp	r3, #0
 8008640:	d009      	beq.n	8008656 <HAL_I2C_EV_IRQHandler+0x266>
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	089b      	lsrs	r3, r3, #2
 8008646:	f003 0301 	and.w	r3, r3, #1
 800864a:	2b00      	cmp	r3, #0
 800864c:	d103      	bne.n	8008656 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 feda 	bl	8009408 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008654:	e039      	b.n	80086ca <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	089b      	lsrs	r3, r3, #2
 800865a:	f003 0301 	and.w	r3, r3, #1
 800865e:	2b00      	cmp	r3, #0
 8008660:	d033      	beq.n	80086ca <HAL_I2C_EV_IRQHandler+0x2da>
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	0a5b      	lsrs	r3, r3, #9
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	2b00      	cmp	r3, #0
 800866c:	d02d      	beq.n	80086ca <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 ff07 	bl	8009482 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008674:	e029      	b.n	80086ca <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	099b      	lsrs	r3, r3, #6
 800867a:	f003 0301 	and.w	r3, r3, #1
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00f      	beq.n	80086a2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	0a9b      	lsrs	r3, r3, #10
 8008686:	f003 0301 	and.w	r3, r3, #1
 800868a:	2b00      	cmp	r3, #0
 800868c:	d009      	beq.n	80086a2 <HAL_I2C_EV_IRQHandler+0x2b2>
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	089b      	lsrs	r3, r3, #2
 8008692:	f003 0301 	and.w	r3, r3, #1
 8008696:	2b00      	cmp	r3, #0
 8008698:	d103      	bne.n	80086a2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 ff12 	bl	80094c4 <I2C_SlaveReceive_RXNE>
 80086a0:	e014      	b.n	80086cc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	089b      	lsrs	r3, r3, #2
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00e      	beq.n	80086cc <HAL_I2C_EV_IRQHandler+0x2dc>
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	0a5b      	lsrs	r3, r3, #9
 80086b2:	f003 0301 	and.w	r3, r3, #1
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d008      	beq.n	80086cc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 ff40 	bl	8009540 <I2C_SlaveReceive_BTF>
 80086c0:	e004      	b.n	80086cc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80086c2:	bf00      	nop
 80086c4:	e002      	b.n	80086cc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80086c6:	bf00      	nop
 80086c8:	e000      	b.n	80086cc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80086ca:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80086cc:	3720      	adds	r7, #32
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}

080086d2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b08a      	sub	sp, #40	; 0x28
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	695b      	ldr	r3, [r3, #20]
 80086e0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80086ea:	2300      	movs	r3, #0
 80086ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086f4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80086f6:	6a3b      	ldr	r3, [r7, #32]
 80086f8:	0a1b      	lsrs	r3, r3, #8
 80086fa:	f003 0301 	and.w	r3, r3, #1
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00e      	beq.n	8008720 <HAL_I2C_ER_IRQHandler+0x4e>
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	0a1b      	lsrs	r3, r3, #8
 8008706:	f003 0301 	and.w	r3, r3, #1
 800870a:	2b00      	cmp	r3, #0
 800870c:	d008      	beq.n	8008720 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800870e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008710:	f043 0301 	orr.w	r3, r3, #1
 8008714:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800871e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008720:	6a3b      	ldr	r3, [r7, #32]
 8008722:	0a5b      	lsrs	r3, r3, #9
 8008724:	f003 0301 	and.w	r3, r3, #1
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00e      	beq.n	800874a <HAL_I2C_ER_IRQHandler+0x78>
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	0a1b      	lsrs	r3, r3, #8
 8008730:	f003 0301 	and.w	r3, r3, #1
 8008734:	2b00      	cmp	r3, #0
 8008736:	d008      	beq.n	800874a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	f043 0302 	orr.w	r3, r3, #2
 800873e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8008748:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800874a:	6a3b      	ldr	r3, [r7, #32]
 800874c:	0a9b      	lsrs	r3, r3, #10
 800874e:	f003 0301 	and.w	r3, r3, #1
 8008752:	2b00      	cmp	r3, #0
 8008754:	d03f      	beq.n	80087d6 <HAL_I2C_ER_IRQHandler+0x104>
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	0a1b      	lsrs	r3, r3, #8
 800875a:	f003 0301 	and.w	r3, r3, #1
 800875e:	2b00      	cmp	r3, #0
 8008760:	d039      	beq.n	80087d6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8008762:	7efb      	ldrb	r3, [r7, #27]
 8008764:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800876a:	b29b      	uxth	r3, r3
 800876c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008774:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800877a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800877c:	7ebb      	ldrb	r3, [r7, #26]
 800877e:	2b20      	cmp	r3, #32
 8008780:	d112      	bne.n	80087a8 <HAL_I2C_ER_IRQHandler+0xd6>
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d10f      	bne.n	80087a8 <HAL_I2C_ER_IRQHandler+0xd6>
 8008788:	7cfb      	ldrb	r3, [r7, #19]
 800878a:	2b21      	cmp	r3, #33	; 0x21
 800878c:	d008      	beq.n	80087a0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800878e:	7cfb      	ldrb	r3, [r7, #19]
 8008790:	2b29      	cmp	r3, #41	; 0x29
 8008792:	d005      	beq.n	80087a0 <HAL_I2C_ER_IRQHandler+0xce>
 8008794:	7cfb      	ldrb	r3, [r7, #19]
 8008796:	2b28      	cmp	r3, #40	; 0x28
 8008798:	d106      	bne.n	80087a8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2b21      	cmp	r3, #33	; 0x21
 800879e:	d103      	bne.n	80087a8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f001 f869 	bl	8009878 <I2C_Slave_AF>
 80087a6:	e016      	b.n	80087d6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80087b0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80087b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b4:	f043 0304 	orr.w	r3, r3, #4
 80087b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80087ba:	7efb      	ldrb	r3, [r7, #27]
 80087bc:	2b10      	cmp	r3, #16
 80087be:	d002      	beq.n	80087c6 <HAL_I2C_ER_IRQHandler+0xf4>
 80087c0:	7efb      	ldrb	r3, [r7, #27]
 80087c2:	2b40      	cmp	r3, #64	; 0x40
 80087c4:	d107      	bne.n	80087d6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087d4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80087d6:	6a3b      	ldr	r3, [r7, #32]
 80087d8:	0adb      	lsrs	r3, r3, #11
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00e      	beq.n	8008800 <HAL_I2C_ER_IRQHandler+0x12e>
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	0a1b      	lsrs	r3, r3, #8
 80087e6:	f003 0301 	and.w	r3, r3, #1
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d008      	beq.n	8008800 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80087ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f0:	f043 0308 	orr.w	r3, r3, #8
 80087f4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80087fe:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8008800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008802:	2b00      	cmp	r3, #0
 8008804:	d008      	beq.n	8008818 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800880a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880c:	431a      	orrs	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f001 f8a0 	bl	8009958 <I2C_ITError>
  }
}
 8008818:	bf00      	nop
 800881a:	3728      	adds	r7, #40	; 0x28
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008828:	bf00      	nop
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800883c:	bf00      	nop
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	460b      	mov	r3, r1
 800887a:	70fb      	strb	r3, [r7, #3]
 800887c:	4613      	mov	r3, r2
 800887e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008880:	bf00      	nop
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8008894:	bf00      	nop
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80088a8:	bf00      	nop
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80088bc:	bf00      	nop
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80088e4:	bf00      	nop
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088fe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008906:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008912:	2b00      	cmp	r3, #0
 8008914:	d150      	bne.n	80089b8 <I2C_MasterTransmit_TXE+0xc8>
 8008916:	7bfb      	ldrb	r3, [r7, #15]
 8008918:	2b21      	cmp	r3, #33	; 0x21
 800891a:	d14d      	bne.n	80089b8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2b08      	cmp	r3, #8
 8008920:	d01d      	beq.n	800895e <I2C_MasterTransmit_TXE+0x6e>
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	2b20      	cmp	r3, #32
 8008926:	d01a      	beq.n	800895e <I2C_MasterTransmit_TXE+0x6e>
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800892e:	d016      	beq.n	800895e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	685a      	ldr	r2, [r3, #4]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800893e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2211      	movs	r2, #17
 8008944:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2220      	movs	r2, #32
 8008952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f7ff ff62 	bl	8008820 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800895c:	e060      	b.n	8008a20 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	685a      	ldr	r2, [r3, #4]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800896c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800897c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2220      	movs	r2, #32
 8008988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008992:	b2db      	uxtb	r3, r3
 8008994:	2b40      	cmp	r3, #64	; 0x40
 8008996:	d107      	bne.n	80089a8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f7ff ff7d 	bl	80088a0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80089a6:	e03b      	b.n	8008a20 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7ff ff35 	bl	8008820 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80089b6:	e033      	b.n	8008a20 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80089b8:	7bfb      	ldrb	r3, [r7, #15]
 80089ba:	2b21      	cmp	r3, #33	; 0x21
 80089bc:	d005      	beq.n	80089ca <I2C_MasterTransmit_TXE+0xda>
 80089be:	7bbb      	ldrb	r3, [r7, #14]
 80089c0:	2b40      	cmp	r3, #64	; 0x40
 80089c2:	d12d      	bne.n	8008a20 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
 80089c6:	2b22      	cmp	r3, #34	; 0x22
 80089c8:	d12a      	bne.n	8008a20 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d108      	bne.n	80089e6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	685a      	ldr	r2, [r3, #4]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089e2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80089e4:	e01c      	b.n	8008a20 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	2b40      	cmp	r3, #64	; 0x40
 80089f0:	d103      	bne.n	80089fa <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f88e 	bl	8008b14 <I2C_MemoryTransmit_TXE_BTF>
}
 80089f8:	e012      	b.n	8008a20 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fe:	781a      	ldrb	r2, [r3, #0]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0a:	1c5a      	adds	r2, r3, #1
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	3b01      	subs	r3, #1
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008a1e:	e7ff      	b.n	8008a20 <I2C_MasterTransmit_TXE+0x130>
 8008a20:	bf00      	nop
 8008a22:	3710      	adds	r7, #16
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a34:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	2b21      	cmp	r3, #33	; 0x21
 8008a40:	d164      	bne.n	8008b0c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d012      	beq.n	8008a72 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a50:	781a      	ldrb	r2, [r3, #0]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5c:	1c5a      	adds	r2, r3, #1
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8008a70:	e04c      	b.n	8008b0c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2b08      	cmp	r3, #8
 8008a76:	d01d      	beq.n	8008ab4 <I2C_MasterTransmit_BTF+0x8c>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2b20      	cmp	r3, #32
 8008a7c:	d01a      	beq.n	8008ab4 <I2C_MasterTransmit_BTF+0x8c>
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008a84:	d016      	beq.n	8008ab4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	685a      	ldr	r2, [r3, #4]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008a94:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2211      	movs	r2, #17
 8008a9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2220      	movs	r2, #32
 8008aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f7ff feb7 	bl	8008820 <HAL_I2C_MasterTxCpltCallback>
}
 8008ab2:	e02b      	b.n	8008b0c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	685a      	ldr	r2, [r3, #4]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008ac2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ad2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2220      	movs	r2, #32
 8008ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	2b40      	cmp	r3, #64	; 0x40
 8008aec:	d107      	bne.n	8008afe <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f7ff fed2 	bl	80088a0 <HAL_I2C_MemTxCpltCallback>
}
 8008afc:	e006      	b.n	8008b0c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f7ff fe8a 	bl	8008820 <HAL_I2C_MasterTxCpltCallback>
}
 8008b0c:	bf00      	nop
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b22:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d11d      	bne.n	8008b68 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d10b      	bne.n	8008b4c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b44:	1c9a      	adds	r2, r3, #2
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8008b4a:	e073      	b.n	8008c34 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	121b      	asrs	r3, r3, #8
 8008b54:	b2da      	uxtb	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b60:	1c5a      	adds	r2, r3, #1
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008b66:	e065      	b.n	8008c34 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d10b      	bne.n	8008b88 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b74:	b2da      	uxtb	r2, r3
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b80:	1c5a      	adds	r2, r3, #1
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008b86:	e055      	b.n	8008c34 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b8c:	2b02      	cmp	r3, #2
 8008b8e:	d151      	bne.n	8008c34 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
 8008b92:	2b22      	cmp	r3, #34	; 0x22
 8008b94:	d10d      	bne.n	8008bb2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ba4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008baa:	1c5a      	adds	r2, r3, #1
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008bb0:	e040      	b.n	8008c34 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d015      	beq.n	8008be8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8008bbc:	7bfb      	ldrb	r3, [r7, #15]
 8008bbe:	2b21      	cmp	r3, #33	; 0x21
 8008bc0:	d112      	bne.n	8008be8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc6:	781a      	ldrb	r2, [r3, #0]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd2:	1c5a      	adds	r2, r3, #1
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	3b01      	subs	r3, #1
 8008be0:	b29a      	uxth	r2, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008be6:	e025      	b.n	8008c34 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d120      	bne.n	8008c34 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8008bf2:	7bfb      	ldrb	r3, [r7, #15]
 8008bf4:	2b21      	cmp	r3, #33	; 0x21
 8008bf6:	d11d      	bne.n	8008c34 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	685a      	ldr	r2, [r3, #4]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008c06:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c16:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2220      	movs	r2, #32
 8008c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f7ff fe36 	bl	80088a0 <HAL_I2C_MemTxCpltCallback>
}
 8008c34:	bf00      	nop
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	2b22      	cmp	r3, #34	; 0x22
 8008c4e:	f040 80ac 	bne.w	8008daa <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2b03      	cmp	r3, #3
 8008c5e:	d921      	bls.n	8008ca4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	691a      	ldr	r2, [r3, #16]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6a:	b2d2      	uxtb	r2, r2
 8008c6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c72:	1c5a      	adds	r2, r3, #1
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	b29a      	uxth	r2, r3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	2b03      	cmp	r3, #3
 8008c8e:	f040 808c 	bne.w	8008daa <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	685a      	ldr	r2, [r3, #4]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ca0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8008ca2:	e082      	b.n	8008daa <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	d075      	beq.n	8008d98 <I2C_MasterReceive_RXNE+0x15c>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d002      	beq.n	8008cb8 <I2C_MasterReceive_RXNE+0x7c>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d16f      	bne.n	8008d98 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f001 f827 	bl	8009d0c <I2C_WaitOnSTOPRequestThroughIT>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d142      	bne.n	8008d4a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cd2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	685a      	ldr	r2, [r3, #4]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008ce2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	691a      	ldr	r2, [r3, #16]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cee:	b2d2      	uxtb	r2, r2
 8008cf0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf6:	1c5a      	adds	r2, r3, #1
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	3b01      	subs	r3, #1
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2220      	movs	r2, #32
 8008d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	2b40      	cmp	r3, #64	; 0x40
 8008d1c:	d10a      	bne.n	8008d34 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f7ff fdc1 	bl	80088b4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008d32:	e03a      	b.n	8008daa <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2212      	movs	r2, #18
 8008d40:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f7ff fd76 	bl	8008834 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008d48:	e02f      	b.n	8008daa <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	685a      	ldr	r2, [r3, #4]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008d58:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	691a      	ldr	r2, [r3, #16]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d64:	b2d2      	uxtb	r2, r2
 8008d66:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6c:	1c5a      	adds	r2, r3, #1
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2220      	movs	r2, #32
 8008d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f7ff fd99 	bl	80088c8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008d96:	e008      	b.n	8008daa <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	685a      	ldr	r2, [r3, #4]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008da6:	605a      	str	r2, [r3, #4]
}
 8008da8:	e7ff      	b.n	8008daa <I2C_MasterReceive_RXNE+0x16e>
 8008daa:	bf00      	nop
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b084      	sub	sp, #16
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dbe:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	2b04      	cmp	r3, #4
 8008dc8:	d11b      	bne.n	8008e02 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	685a      	ldr	r2, [r3, #4]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008dd8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	691a      	ldr	r2, [r3, #16]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de4:	b2d2      	uxtb	r2, r2
 8008de6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dec:	1c5a      	adds	r2, r3, #1
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	b29a      	uxth	r2, r3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8008e00:	e0bd      	b.n	8008f7e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	2b03      	cmp	r3, #3
 8008e0a:	d129      	bne.n	8008e60 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	685a      	ldr	r2, [r3, #4]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e1a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2b04      	cmp	r3, #4
 8008e20:	d00a      	beq.n	8008e38 <I2C_MasterReceive_BTF+0x86>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d007      	beq.n	8008e38 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e36:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	691a      	ldr	r2, [r3, #16]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e42:	b2d2      	uxtb	r2, r2
 8008e44:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4a:	1c5a      	adds	r2, r3, #1
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	3b01      	subs	r3, #1
 8008e58:	b29a      	uxth	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008e5e:	e08e      	b.n	8008f7e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d176      	bne.n	8008f58 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d002      	beq.n	8008e76 <I2C_MasterReceive_BTF+0xc4>
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2b10      	cmp	r3, #16
 8008e74:	d108      	bne.n	8008e88 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e84:	601a      	str	r2, [r3, #0]
 8008e86:	e019      	b.n	8008ebc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2b04      	cmp	r3, #4
 8008e8c:	d002      	beq.n	8008e94 <I2C_MasterReceive_BTF+0xe2>
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	d108      	bne.n	8008ea6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008ea2:	601a      	str	r2, [r3, #0]
 8008ea4:	e00a      	b.n	8008ebc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2b10      	cmp	r3, #16
 8008eaa:	d007      	beq.n	8008ebc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008eba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	691a      	ldr	r2, [r3, #16]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec6:	b2d2      	uxtb	r2, r2
 8008ec8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ece:	1c5a      	adds	r2, r3, #1
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	3b01      	subs	r3, #1
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	691a      	ldr	r2, [r3, #16]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eec:	b2d2      	uxtb	r2, r2
 8008eee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef4:	1c5a      	adds	r2, r3, #1
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	3b01      	subs	r3, #1
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	685a      	ldr	r2, [r3, #4]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008f16:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2220      	movs	r2, #32
 8008f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	2b40      	cmp	r3, #64	; 0x40
 8008f2a:	d10a      	bne.n	8008f42 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f7ff fcba 	bl	80088b4 <HAL_I2C_MemRxCpltCallback>
}
 8008f40:	e01d      	b.n	8008f7e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2212      	movs	r2, #18
 8008f4e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f7ff fc6f 	bl	8008834 <HAL_I2C_MasterRxCpltCallback>
}
 8008f56:	e012      	b.n	8008f7e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	691a      	ldr	r2, [r3, #16]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f62:	b2d2      	uxtb	r2, r2
 8008f64:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6a:	1c5a      	adds	r2, r3, #1
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	3b01      	subs	r3, #1
 8008f78:	b29a      	uxth	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008f7e:	bf00      	nop
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8008f86:	b480      	push	{r7}
 8008f88:	b083      	sub	sp, #12
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	2b40      	cmp	r3, #64	; 0x40
 8008f98:	d117      	bne.n	8008fca <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d109      	bne.n	8008fb6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	461a      	mov	r2, r3
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008fb2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008fb4:	e067      	b.n	8009086 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	f043 0301 	orr.w	r3, r3, #1
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	611a      	str	r2, [r3, #16]
}
 8008fc8:	e05d      	b.n	8009086 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fd2:	d133      	bne.n	800903c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	2b21      	cmp	r3, #33	; 0x21
 8008fde:	d109      	bne.n	8008ff4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008ff0:	611a      	str	r2, [r3, #16]
 8008ff2:	e008      	b.n	8009006 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	f043 0301 	orr.w	r3, r3, #1
 8008ffe:	b2da      	uxtb	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800900a:	2b00      	cmp	r3, #0
 800900c:	d004      	beq.n	8009018 <I2C_Master_SB+0x92>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009014:	2b00      	cmp	r3, #0
 8009016:	d108      	bne.n	800902a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901c:	2b00      	cmp	r3, #0
 800901e:	d032      	beq.n	8009086 <I2C_Master_SB+0x100>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009026:	2b00      	cmp	r3, #0
 8009028:	d02d      	beq.n	8009086 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009038:	605a      	str	r2, [r3, #4]
}
 800903a:	e024      	b.n	8009086 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009040:	2b00      	cmp	r3, #0
 8009042:	d10e      	bne.n	8009062 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009048:	b29b      	uxth	r3, r3
 800904a:	11db      	asrs	r3, r3, #7
 800904c:	b2db      	uxtb	r3, r3
 800904e:	f003 0306 	and.w	r3, r3, #6
 8009052:	b2db      	uxtb	r3, r3
 8009054:	f063 030f 	orn	r3, r3, #15
 8009058:	b2da      	uxtb	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	611a      	str	r2, [r3, #16]
}
 8009060:	e011      	b.n	8009086 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009066:	2b01      	cmp	r3, #1
 8009068:	d10d      	bne.n	8009086 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800906e:	b29b      	uxth	r3, r3
 8009070:	11db      	asrs	r3, r3, #7
 8009072:	b2db      	uxtb	r3, r3
 8009074:	f003 0306 	and.w	r3, r3, #6
 8009078:	b2db      	uxtb	r3, r3
 800907a:	f063 030e 	orn	r3, r3, #14
 800907e:	b2da      	uxtb	r2, r3
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	611a      	str	r2, [r3, #16]
}
 8009086:	bf00      	nop
 8009088:	370c      	adds	r7, #12
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr

08009092 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8009092:	b480      	push	{r7}
 8009094:	b083      	sub	sp, #12
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800909e:	b2da      	uxtb	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d004      	beq.n	80090b8 <I2C_Master_ADD10+0x26>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d108      	bne.n	80090ca <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00c      	beq.n	80090da <I2C_Master_ADD10+0x48>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d007      	beq.n	80090da <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	685a      	ldr	r2, [r3, #4]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090d8:	605a      	str	r2, [r3, #4]
  }
}
 80090da:	bf00      	nop
 80090dc:	370c      	adds	r7, #12
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr

080090e6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80090e6:	b480      	push	{r7}
 80090e8:	b091      	sub	sp, #68	; 0x44
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80090f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090fc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009102:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800910a:	b2db      	uxtb	r3, r3
 800910c:	2b22      	cmp	r3, #34	; 0x22
 800910e:	f040 8169 	bne.w	80093e4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10f      	bne.n	800913a <I2C_Master_ADDR+0x54>
 800911a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800911e:	2b40      	cmp	r3, #64	; 0x40
 8009120:	d10b      	bne.n	800913a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009122:	2300      	movs	r3, #0
 8009124:	633b      	str	r3, [r7, #48]	; 0x30
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	695b      	ldr	r3, [r3, #20]
 800912c:	633b      	str	r3, [r7, #48]	; 0x30
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	633b      	str	r3, [r7, #48]	; 0x30
 8009136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009138:	e160      	b.n	80093fc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800913e:	2b00      	cmp	r3, #0
 8009140:	d11d      	bne.n	800917e <I2C_Master_ADDR+0x98>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800914a:	d118      	bne.n	800917e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800914c:	2300      	movs	r3, #0
 800914e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	695b      	ldr	r3, [r3, #20]
 8009156:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	699b      	ldr	r3, [r3, #24]
 800915e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009160:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009170:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009176:	1c5a      	adds	r2, r3, #1
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	651a      	str	r2, [r3, #80]	; 0x50
 800917c:	e13e      	b.n	80093fc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009182:	b29b      	uxth	r3, r3
 8009184:	2b00      	cmp	r3, #0
 8009186:	d113      	bne.n	80091b0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009188:	2300      	movs	r3, #0
 800918a:	62bb      	str	r3, [r7, #40]	; 0x28
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	695b      	ldr	r3, [r3, #20]
 8009192:	62bb      	str	r3, [r7, #40]	; 0x28
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	699b      	ldr	r3, [r3, #24]
 800919a:	62bb      	str	r3, [r7, #40]	; 0x28
 800919c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091ac:	601a      	str	r2, [r3, #0]
 80091ae:	e115      	b.n	80093dc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	f040 808a 	bne.w	80092d0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80091bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80091c2:	d137      	bne.n	8009234 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091d2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091e2:	d113      	bne.n	800920c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091f2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091f4:	2300      	movs	r3, #0
 80091f6:	627b      	str	r3, [r7, #36]	; 0x24
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	695b      	ldr	r3, [r3, #20]
 80091fe:	627b      	str	r3, [r7, #36]	; 0x24
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	699b      	ldr	r3, [r3, #24]
 8009206:	627b      	str	r3, [r7, #36]	; 0x24
 8009208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920a:	e0e7      	b.n	80093dc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800920c:	2300      	movs	r3, #0
 800920e:	623b      	str	r3, [r7, #32]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	695b      	ldr	r3, [r3, #20]
 8009216:	623b      	str	r3, [r7, #32]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	699b      	ldr	r3, [r3, #24]
 800921e:	623b      	str	r3, [r7, #32]
 8009220:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009230:	601a      	str	r2, [r3, #0]
 8009232:	e0d3      	b.n	80093dc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8009234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009236:	2b08      	cmp	r3, #8
 8009238:	d02e      	beq.n	8009298 <I2C_Master_ADDR+0x1b2>
 800923a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923c:	2b20      	cmp	r3, #32
 800923e:	d02b      	beq.n	8009298 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8009240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009242:	2b12      	cmp	r3, #18
 8009244:	d102      	bne.n	800924c <I2C_Master_ADDR+0x166>
 8009246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009248:	2b01      	cmp	r3, #1
 800924a:	d125      	bne.n	8009298 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800924c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924e:	2b04      	cmp	r3, #4
 8009250:	d00e      	beq.n	8009270 <I2C_Master_ADDR+0x18a>
 8009252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009254:	2b02      	cmp	r3, #2
 8009256:	d00b      	beq.n	8009270 <I2C_Master_ADDR+0x18a>
 8009258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800925a:	2b10      	cmp	r3, #16
 800925c:	d008      	beq.n	8009270 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800926c:	601a      	str	r2, [r3, #0]
 800926e:	e007      	b.n	8009280 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800927e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009280:	2300      	movs	r3, #0
 8009282:	61fb      	str	r3, [r7, #28]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	695b      	ldr	r3, [r3, #20]
 800928a:	61fb      	str	r3, [r7, #28]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	699b      	ldr	r3, [r3, #24]
 8009292:	61fb      	str	r3, [r7, #28]
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	e0a1      	b.n	80093dc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092a6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092a8:	2300      	movs	r3, #0
 80092aa:	61bb      	str	r3, [r7, #24]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	695b      	ldr	r3, [r3, #20]
 80092b2:	61bb      	str	r3, [r7, #24]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	699b      	ldr	r3, [r3, #24]
 80092ba:	61bb      	str	r3, [r7, #24]
 80092bc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092cc:	601a      	str	r2, [r3, #0]
 80092ce:	e085      	b.n	80093dc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	d14d      	bne.n	8009376 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80092da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092dc:	2b04      	cmp	r3, #4
 80092de:	d016      	beq.n	800930e <I2C_Master_ADDR+0x228>
 80092e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e2:	2b02      	cmp	r3, #2
 80092e4:	d013      	beq.n	800930e <I2C_Master_ADDR+0x228>
 80092e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e8:	2b10      	cmp	r3, #16
 80092ea:	d010      	beq.n	800930e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092fa:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800930a:	601a      	str	r2, [r3, #0]
 800930c:	e007      	b.n	800931e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800931c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800932c:	d117      	bne.n	800935e <I2C_Master_ADDR+0x278>
 800932e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009330:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009334:	d00b      	beq.n	800934e <I2C_Master_ADDR+0x268>
 8009336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009338:	2b01      	cmp	r3, #1
 800933a:	d008      	beq.n	800934e <I2C_Master_ADDR+0x268>
 800933c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933e:	2b08      	cmp	r3, #8
 8009340:	d005      	beq.n	800934e <I2C_Master_ADDR+0x268>
 8009342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009344:	2b10      	cmp	r3, #16
 8009346:	d002      	beq.n	800934e <I2C_Master_ADDR+0x268>
 8009348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934a:	2b20      	cmp	r3, #32
 800934c:	d107      	bne.n	800935e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	685a      	ldr	r2, [r3, #4]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800935c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800935e:	2300      	movs	r3, #0
 8009360:	617b      	str	r3, [r7, #20]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	695b      	ldr	r3, [r3, #20]
 8009368:	617b      	str	r3, [r7, #20]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	699b      	ldr	r3, [r3, #24]
 8009370:	617b      	str	r3, [r7, #20]
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	e032      	b.n	80093dc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009384:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009394:	d117      	bne.n	80093c6 <I2C_Master_ADDR+0x2e0>
 8009396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009398:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800939c:	d00b      	beq.n	80093b6 <I2C_Master_ADDR+0x2d0>
 800939e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d008      	beq.n	80093b6 <I2C_Master_ADDR+0x2d0>
 80093a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a6:	2b08      	cmp	r3, #8
 80093a8:	d005      	beq.n	80093b6 <I2C_Master_ADDR+0x2d0>
 80093aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ac:	2b10      	cmp	r3, #16
 80093ae:	d002      	beq.n	80093b6 <I2C_Master_ADDR+0x2d0>
 80093b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b2:	2b20      	cmp	r3, #32
 80093b4:	d107      	bne.n	80093c6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	685a      	ldr	r2, [r3, #4]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80093c4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093c6:	2300      	movs	r3, #0
 80093c8:	613b      	str	r3, [r7, #16]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	695b      	ldr	r3, [r3, #20]
 80093d0:	613b      	str	r3, [r7, #16]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	613b      	str	r3, [r7, #16]
 80093da:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80093e2:	e00b      	b.n	80093fc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093e4:	2300      	movs	r3, #0
 80093e6:	60fb      	str	r3, [r7, #12]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	695b      	ldr	r3, [r3, #20]
 80093ee:	60fb      	str	r3, [r7, #12]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	699b      	ldr	r3, [r3, #24]
 80093f6:	60fb      	str	r3, [r7, #12]
 80093f8:	68fb      	ldr	r3, [r7, #12]
}
 80093fa:	e7ff      	b.n	80093fc <I2C_Master_ADDR+0x316>
 80093fc:	bf00      	nop
 80093fe:	3744      	adds	r7, #68	; 0x44
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009416:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800941c:	b29b      	uxth	r3, r3
 800941e:	2b00      	cmp	r3, #0
 8009420:	d02b      	beq.n	800947a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009426:	781a      	ldrb	r2, [r3, #0]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009432:	1c5a      	adds	r2, r3, #1
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800943c:	b29b      	uxth	r3, r3
 800943e:	3b01      	subs	r3, #1
 8009440:	b29a      	uxth	r2, r3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800944a:	b29b      	uxth	r3, r3
 800944c:	2b00      	cmp	r3, #0
 800944e:	d114      	bne.n	800947a <I2C_SlaveTransmit_TXE+0x72>
 8009450:	7bfb      	ldrb	r3, [r7, #15]
 8009452:	2b29      	cmp	r3, #41	; 0x29
 8009454:	d111      	bne.n	800947a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	685a      	ldr	r2, [r3, #4]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009464:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2221      	movs	r2, #33	; 0x21
 800946a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2228      	movs	r2, #40	; 0x28
 8009470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f7ff f9e7 	bl	8008848 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800947a:	bf00      	nop
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009482:	b480      	push	{r7}
 8009484:	b083      	sub	sp, #12
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800948e:	b29b      	uxth	r3, r3
 8009490:	2b00      	cmp	r3, #0
 8009492:	d011      	beq.n	80094b8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009498:	781a      	ldrb	r2, [r3, #0]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a4:	1c5a      	adds	r2, r3, #1
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	3b01      	subs	r3, #1
 80094b2:	b29a      	uxth	r2, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80094b8:	bf00      	nop
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094d2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094d8:	b29b      	uxth	r3, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d02c      	beq.n	8009538 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	691a      	ldr	r2, [r3, #16]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e8:	b2d2      	uxtb	r2, r2
 80094ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f0:	1c5a      	adds	r2, r3, #1
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	3b01      	subs	r3, #1
 80094fe:	b29a      	uxth	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009508:	b29b      	uxth	r3, r3
 800950a:	2b00      	cmp	r3, #0
 800950c:	d114      	bne.n	8009538 <I2C_SlaveReceive_RXNE+0x74>
 800950e:	7bfb      	ldrb	r3, [r7, #15]
 8009510:	2b2a      	cmp	r3, #42	; 0x2a
 8009512:	d111      	bne.n	8009538 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	685a      	ldr	r2, [r3, #4]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009522:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2222      	movs	r2, #34	; 0x22
 8009528:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2228      	movs	r2, #40	; 0x28
 800952e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f7ff f992 	bl	800885c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009538:	bf00      	nop
 800953a:	3710      	adds	r7, #16
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800954c:	b29b      	uxth	r3, r3
 800954e:	2b00      	cmp	r3, #0
 8009550:	d012      	beq.n	8009578 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	691a      	ldr	r2, [r3, #16]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955c:	b2d2      	uxtb	r2, r2
 800955e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009564:	1c5a      	adds	r2, r3, #1
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800956e:	b29b      	uxth	r3, r3
 8009570:	3b01      	subs	r3, #1
 8009572:	b29a      	uxth	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009578:	bf00      	nop
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800958e:	2300      	movs	r3, #0
 8009590:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009598:	b2db      	uxtb	r3, r3
 800959a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800959e:	2b28      	cmp	r3, #40	; 0x28
 80095a0:	d127      	bne.n	80095f2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	685a      	ldr	r2, [r3, #4]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095b0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	089b      	lsrs	r3, r3, #2
 80095b6:	f003 0301 	and.w	r3, r3, #1
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d101      	bne.n	80095c2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80095be:	2301      	movs	r3, #1
 80095c0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	09db      	lsrs	r3, r3, #7
 80095c6:	f003 0301 	and.w	r3, r3, #1
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d103      	bne.n	80095d6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	81bb      	strh	r3, [r7, #12]
 80095d4:	e002      	b.n	80095dc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	699b      	ldr	r3, [r3, #24]
 80095da:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80095e4:	89ba      	ldrh	r2, [r7, #12]
 80095e6:	7bfb      	ldrb	r3, [r7, #15]
 80095e8:	4619      	mov	r1, r3
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f7ff f940 	bl	8008870 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80095f0:	e00e      	b.n	8009610 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095f2:	2300      	movs	r3, #0
 80095f4:	60bb      	str	r3, [r7, #8]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	695b      	ldr	r3, [r3, #20]
 80095fc:	60bb      	str	r3, [r7, #8]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	60bb      	str	r3, [r7, #8]
 8009606:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8009610:	bf00      	nop
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009626:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	685a      	ldr	r2, [r3, #4]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009636:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009638:	2300      	movs	r3, #0
 800963a:	60bb      	str	r3, [r7, #8]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	695b      	ldr	r3, [r3, #20]
 8009642:	60bb      	str	r3, [r7, #8]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f042 0201 	orr.w	r2, r2, #1
 8009652:	601a      	str	r2, [r3, #0]
 8009654:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009664:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009674:	d172      	bne.n	800975c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009676:	7bfb      	ldrb	r3, [r7, #15]
 8009678:	2b22      	cmp	r3, #34	; 0x22
 800967a:	d002      	beq.n	8009682 <I2C_Slave_STOPF+0x6a>
 800967c:	7bfb      	ldrb	r3, [r7, #15]
 800967e:	2b2a      	cmp	r3, #42	; 0x2a
 8009680:	d135      	bne.n	80096ee <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	b29a      	uxth	r2, r3
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009694:	b29b      	uxth	r3, r3
 8009696:	2b00      	cmp	r3, #0
 8009698:	d005      	beq.n	80096a6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800969e:	f043 0204 	orr.w	r2, r3, #4
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	685a      	ldr	r2, [r3, #4]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80096b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7fe fa94 	bl	8007be8 <HAL_DMA_GetState>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d049      	beq.n	800975a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ca:	4a69      	ldr	r2, [pc, #420]	; (8009870 <I2C_Slave_STOPF+0x258>)
 80096cc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7fe f8dc 	bl	8007890 <HAL_DMA_Abort_IT>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d03d      	beq.n	800975a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80096e8:	4610      	mov	r0, r2
 80096ea:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80096ec:	e035      	b.n	800975a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	b29a      	uxth	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009700:	b29b      	uxth	r3, r3
 8009702:	2b00      	cmp	r3, #0
 8009704:	d005      	beq.n	8009712 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800970a:	f043 0204 	orr.w	r2, r3, #4
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	685a      	ldr	r2, [r3, #4]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009720:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009726:	4618      	mov	r0, r3
 8009728:	f7fe fa5e 	bl	8007be8 <HAL_DMA_GetState>
 800972c:	4603      	mov	r3, r0
 800972e:	2b01      	cmp	r3, #1
 8009730:	d014      	beq.n	800975c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009736:	4a4e      	ldr	r2, [pc, #312]	; (8009870 <I2C_Slave_STOPF+0x258>)
 8009738:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800973e:	4618      	mov	r0, r3
 8009740:	f7fe f8a6 	bl	8007890 <HAL_DMA_Abort_IT>
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d008      	beq.n	800975c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800974e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009754:	4610      	mov	r0, r2
 8009756:	4798      	blx	r3
 8009758:	e000      	b.n	800975c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800975a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009760:	b29b      	uxth	r3, r3
 8009762:	2b00      	cmp	r3, #0
 8009764:	d03e      	beq.n	80097e4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	695b      	ldr	r3, [r3, #20]
 800976c:	f003 0304 	and.w	r3, r3, #4
 8009770:	2b04      	cmp	r3, #4
 8009772:	d112      	bne.n	800979a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	691a      	ldr	r2, [r3, #16]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800977e:	b2d2      	uxtb	r2, r2
 8009780:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009786:	1c5a      	adds	r2, r3, #1
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009790:	b29b      	uxth	r3, r3
 8009792:	3b01      	subs	r3, #1
 8009794:	b29a      	uxth	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	695b      	ldr	r3, [r3, #20]
 80097a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097a4:	2b40      	cmp	r3, #64	; 0x40
 80097a6:	d112      	bne.n	80097ce <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	691a      	ldr	r2, [r3, #16]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b2:	b2d2      	uxtb	r2, r2
 80097b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ba:	1c5a      	adds	r2, r3, #1
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	3b01      	subs	r3, #1
 80097c8:	b29a      	uxth	r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d005      	beq.n	80097e4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097dc:	f043 0204 	orr.w	r2, r3, #4
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d003      	beq.n	80097f4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 f8b3 	bl	8009958 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80097f2:	e039      	b.n	8009868 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80097f4:	7bfb      	ldrb	r3, [r7, #15]
 80097f6:	2b2a      	cmp	r3, #42	; 0x2a
 80097f8:	d109      	bne.n	800980e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2228      	movs	r2, #40	; 0x28
 8009804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f7ff f827 	bl	800885c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009814:	b2db      	uxtb	r3, r3
 8009816:	2b28      	cmp	r3, #40	; 0x28
 8009818:	d111      	bne.n	800983e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4a15      	ldr	r2, [pc, #84]	; (8009874 <I2C_Slave_STOPF+0x25c>)
 800981e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2220      	movs	r2, #32
 800982a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2200      	movs	r2, #0
 8009832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f7ff f828 	bl	800888c <HAL_I2C_ListenCpltCallback>
}
 800983c:	e014      	b.n	8009868 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009842:	2b22      	cmp	r3, #34	; 0x22
 8009844:	d002      	beq.n	800984c <I2C_Slave_STOPF+0x234>
 8009846:	7bfb      	ldrb	r3, [r7, #15]
 8009848:	2b22      	cmp	r3, #34	; 0x22
 800984a:	d10d      	bne.n	8009868 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2220      	movs	r2, #32
 8009856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f7fe fffa 	bl	800885c <HAL_I2C_SlaveRxCpltCallback>
}
 8009868:	bf00      	nop
 800986a:	3710      	adds	r7, #16
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	08009bbd 	.word	0x08009bbd
 8009874:	ffff0000 	.word	0xffff0000

08009878 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009886:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	2b08      	cmp	r3, #8
 8009892:	d002      	beq.n	800989a <I2C_Slave_AF+0x22>
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	2b20      	cmp	r3, #32
 8009898:	d129      	bne.n	80098ee <I2C_Slave_AF+0x76>
 800989a:	7bfb      	ldrb	r3, [r7, #15]
 800989c:	2b28      	cmp	r3, #40	; 0x28
 800989e:	d126      	bne.n	80098ee <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a2c      	ldr	r2, [pc, #176]	; (8009954 <I2C_Slave_AF+0xdc>)
 80098a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	685a      	ldr	r2, [r3, #4]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80098b4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80098be:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098ce:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2220      	movs	r2, #32
 80098da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f7fe ffd0 	bl	800888c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80098ec:	e02e      	b.n	800994c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80098ee:	7bfb      	ldrb	r3, [r7, #15]
 80098f0:	2b21      	cmp	r3, #33	; 0x21
 80098f2:	d126      	bne.n	8009942 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4a17      	ldr	r2, [pc, #92]	; (8009954 <I2C_Slave_AF+0xdc>)
 80098f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2221      	movs	r2, #33	; 0x21
 80098fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2220      	movs	r2, #32
 8009904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	685a      	ldr	r2, [r3, #4]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800991e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009928:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009938:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f7fe ff84 	bl	8008848 <HAL_I2C_SlaveTxCpltCallback>
}
 8009940:	e004      	b.n	800994c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800994a:	615a      	str	r2, [r3, #20]
}
 800994c:	bf00      	nop
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	ffff0000 	.word	0xffff0000

08009958 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009966:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800996e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009970:	7bbb      	ldrb	r3, [r7, #14]
 8009972:	2b10      	cmp	r3, #16
 8009974:	d002      	beq.n	800997c <I2C_ITError+0x24>
 8009976:	7bbb      	ldrb	r3, [r7, #14]
 8009978:	2b40      	cmp	r3, #64	; 0x40
 800997a:	d10a      	bne.n	8009992 <I2C_ITError+0x3a>
 800997c:	7bfb      	ldrb	r3, [r7, #15]
 800997e:	2b22      	cmp	r3, #34	; 0x22
 8009980:	d107      	bne.n	8009992 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009990:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009992:	7bfb      	ldrb	r3, [r7, #15]
 8009994:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009998:	2b28      	cmp	r3, #40	; 0x28
 800999a:	d107      	bne.n	80099ac <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2228      	movs	r2, #40	; 0x28
 80099a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80099aa:	e015      	b.n	80099d8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099ba:	d00a      	beq.n	80099d2 <I2C_ITError+0x7a>
 80099bc:	7bfb      	ldrb	r3, [r7, #15]
 80099be:	2b60      	cmp	r3, #96	; 0x60
 80099c0:	d007      	beq.n	80099d2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2220      	movs	r2, #32
 80099c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099e6:	d162      	bne.n	8009aae <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	685a      	ldr	r2, [r3, #4]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80099f6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d020      	beq.n	8009a48 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a0a:	4a6a      	ldr	r2, [pc, #424]	; (8009bb4 <I2C_ITError+0x25c>)
 8009a0c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fd ff3c 	bl	8007890 <HAL_DMA_Abort_IT>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f000 8089 	beq.w	8009b32 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f022 0201 	bic.w	r2, r2, #1
 8009a2e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2220      	movs	r2, #32
 8009a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009a42:	4610      	mov	r0, r2
 8009a44:	4798      	blx	r3
 8009a46:	e074      	b.n	8009b32 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a4c:	4a59      	ldr	r2, [pc, #356]	; (8009bb4 <I2C_ITError+0x25c>)
 8009a4e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7fd ff1b 	bl	8007890 <HAL_DMA_Abort_IT>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d068      	beq.n	8009b32 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	695b      	ldr	r3, [r3, #20]
 8009a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a6a:	2b40      	cmp	r3, #64	; 0x40
 8009a6c:	d10b      	bne.n	8009a86 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	691a      	ldr	r2, [r3, #16]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a78:	b2d2      	uxtb	r2, r2
 8009a7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a80:	1c5a      	adds	r2, r3, #1
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f022 0201 	bic.w	r2, r2, #1
 8009a94:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2220      	movs	r2, #32
 8009a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009aa8:	4610      	mov	r0, r2
 8009aaa:	4798      	blx	r3
 8009aac:	e041      	b.n	8009b32 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	2b60      	cmp	r3, #96	; 0x60
 8009ab8:	d125      	bne.n	8009b06 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2220      	movs	r2, #32
 8009abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	695b      	ldr	r3, [r3, #20]
 8009ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ad2:	2b40      	cmp	r3, #64	; 0x40
 8009ad4:	d10b      	bne.n	8009aee <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	691a      	ldr	r2, [r3, #16]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae0:	b2d2      	uxtb	r2, r2
 8009ae2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae8:	1c5a      	adds	r2, r3, #1
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f022 0201 	bic.w	r2, r2, #1
 8009afc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f7fe feec 	bl	80088dc <HAL_I2C_AbortCpltCallback>
 8009b04:	e015      	b.n	8009b32 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	695b      	ldr	r3, [r3, #20]
 8009b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b10:	2b40      	cmp	r3, #64	; 0x40
 8009b12:	d10b      	bne.n	8009b2c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	691a      	ldr	r2, [r3, #16]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1e:	b2d2      	uxtb	r2, r2
 8009b20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b26:	1c5a      	adds	r2, r3, #1
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f7fe fecb 	bl	80088c8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b36:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	f003 0301 	and.w	r3, r3, #1
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d10e      	bne.n	8009b60 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d109      	bne.n	8009b60 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d104      	bne.n	8009b60 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d007      	beq.n	8009b70 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	685a      	ldr	r2, [r3, #4]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009b6e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b76:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b7c:	f003 0304 	and.w	r3, r3, #4
 8009b80:	2b04      	cmp	r3, #4
 8009b82:	d113      	bne.n	8009bac <I2C_ITError+0x254>
 8009b84:	7bfb      	ldrb	r3, [r7, #15]
 8009b86:	2b28      	cmp	r3, #40	; 0x28
 8009b88:	d110      	bne.n	8009bac <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4a0a      	ldr	r2, [pc, #40]	; (8009bb8 <I2C_ITError+0x260>)
 8009b8e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2220      	movs	r2, #32
 8009b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f7fe fe70 	bl	800888c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009bac:	bf00      	nop
 8009bae:	3710      	adds	r7, #16
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	08009bbd 	.word	0x08009bbd
 8009bb8:	ffff0000 	.word	0xffff0000

08009bbc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b086      	sub	sp, #24
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bcc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bd4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009bd6:	4b4b      	ldr	r3, [pc, #300]	; (8009d04 <I2C_DMAAbort+0x148>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	08db      	lsrs	r3, r3, #3
 8009bdc:	4a4a      	ldr	r2, [pc, #296]	; (8009d08 <I2C_DMAAbort+0x14c>)
 8009bde:	fba2 2303 	umull	r2, r3, r2, r3
 8009be2:	0a1a      	lsrs	r2, r3, #8
 8009be4:	4613      	mov	r3, r2
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	4413      	add	r3, r2
 8009bea:	00da      	lsls	r2, r3, #3
 8009bec:	1ad3      	subs	r3, r2, r3
 8009bee:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d106      	bne.n	8009c04 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bfa:	f043 0220 	orr.w	r2, r3, #32
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8009c02:	e00a      	b.n	8009c1a <I2C_DMAAbort+0x5e>
    }
    count--;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	3b01      	subs	r3, #1
 8009c08:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c18:	d0ea      	beq.n	8009bf0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d003      	beq.n	8009c2a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c26:	2200      	movs	r2, #0
 8009c28:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d003      	beq.n	8009c3a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c36:	2200      	movs	r2, #0
 8009c38:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c48:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d003      	beq.n	8009c60 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d003      	beq.n	8009c70 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f022 0201 	bic.w	r2, r2, #1
 8009c7e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	2b60      	cmp	r3, #96	; 0x60
 8009c8a:	d10e      	bne.n	8009caa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	2220      	movs	r2, #32
 8009c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	2200      	movs	r2, #0
 8009c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009ca2:	6978      	ldr	r0, [r7, #20]
 8009ca4:	f7fe fe1a 	bl	80088dc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009ca8:	e027      	b.n	8009cfa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009caa:	7cfb      	ldrb	r3, [r7, #19]
 8009cac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009cb0:	2b28      	cmp	r3, #40	; 0x28
 8009cb2:	d117      	bne.n	8009ce4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f042 0201 	orr.w	r2, r2, #1
 8009cc2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009cd2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	2228      	movs	r2, #40	; 0x28
 8009cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009ce2:	e007      	b.n	8009cf4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	2220      	movs	r2, #32
 8009ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009cf4:	6978      	ldr	r0, [r7, #20]
 8009cf6:	f7fe fde7 	bl	80088c8 <HAL_I2C_ErrorCallback>
}
 8009cfa:	bf00      	nop
 8009cfc:	3718      	adds	r7, #24
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	20000008 	.word	0x20000008
 8009d08:	14f8b589 	.word	0x14f8b589

08009d0c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b085      	sub	sp, #20
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009d14:	2300      	movs	r3, #0
 8009d16:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009d18:	4b13      	ldr	r3, [pc, #76]	; (8009d68 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	08db      	lsrs	r3, r3, #3
 8009d1e:	4a13      	ldr	r2, [pc, #76]	; (8009d6c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8009d20:	fba2 2303 	umull	r2, r3, r2, r3
 8009d24:	0a1a      	lsrs	r2, r3, #8
 8009d26:	4613      	mov	r3, r2
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	4413      	add	r3, r2
 8009d2c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	3b01      	subs	r3, #1
 8009d32:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d107      	bne.n	8009d4a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3e:	f043 0220 	orr.w	r2, r3, #32
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	e008      	b.n	8009d5c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d58:	d0e9      	beq.n	8009d2e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3714      	adds	r7, #20
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr
 8009d68:	20000008 	.word	0x20000008
 8009d6c:	14f8b589 	.word	0x14f8b589

08009d70 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009d80:	d103      	bne.n	8009d8a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2201      	movs	r2, #1
 8009d86:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009d88:	e007      	b.n	8009d9a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d8e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009d92:	d102      	bne.n	8009d9a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2208      	movs	r2, #8
 8009d98:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009d9a:	bf00      	nop
 8009d9c:	370c      	adds	r7, #12
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr
	...

08009da8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b086      	sub	sp, #24
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d101      	bne.n	8009dba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009db6:	2301      	movs	r3, #1
 8009db8:	e267      	b.n	800a28a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f003 0301 	and.w	r3, r3, #1
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d075      	beq.n	8009eb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009dc6:	4b88      	ldr	r3, [pc, #544]	; (8009fe8 <HAL_RCC_OscConfig+0x240>)
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	f003 030c 	and.w	r3, r3, #12
 8009dce:	2b04      	cmp	r3, #4
 8009dd0:	d00c      	beq.n	8009dec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009dd2:	4b85      	ldr	r3, [pc, #532]	; (8009fe8 <HAL_RCC_OscConfig+0x240>)
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009dda:	2b08      	cmp	r3, #8
 8009ddc:	d112      	bne.n	8009e04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009dde:	4b82      	ldr	r3, [pc, #520]	; (8009fe8 <HAL_RCC_OscConfig+0x240>)
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009de6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009dea:	d10b      	bne.n	8009e04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009dec:	4b7e      	ldr	r3, [pc, #504]	; (8009fe8 <HAL_RCC_OscConfig+0x240>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d05b      	beq.n	8009eb0 <HAL_RCC_OscConfig+0x108>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d157      	bne.n	8009eb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009e00:	2301      	movs	r3, #1
 8009e02:	e242      	b.n	800a28a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e0c:	d106      	bne.n	8009e1c <HAL_RCC_OscConfig+0x74>
 8009e0e:	4b76      	ldr	r3, [pc, #472]	; (8009fe8 <HAL_RCC_OscConfig+0x240>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a75      	ldr	r2, [pc, #468]	; (8009fe8 <HAL_RCC_OscConfig+0x240>)
 8009e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e18:	6013      	str	r3, [r2, #0]
 8009e1a:	e01d      	b.n	8009e58 <HAL_RCC_OscConfig+0xb0>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e24:	d10c      	bne.n	8009e40 <HAL_RCC_OscConfig+0x98>
 8009e26:	4b70      	ldr	r3, [pc, #448]	; (8009fe8 <HAL_RCC_OscConfig+0x240>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a6f      	ldr	r2, [pc, #444]	; (8009fe8 <HAL_RCC_OscConfig+0x240>)
 8009e2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e30:	6013      	str	r3, [r2, #0]
 8009e32:	4b6d      	ldr	r3, [pc, #436]	; (8009fe8 <HAL_RCC_OscConfig+0x240>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a6c      	ldr	r2, [pc, #432]	; (8009fe8 <HAL_RCC_OscConfig+0x240>)
 8009e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e3c:	6013      	str	r3, [r2, #0]
 8009e3e:	e00b      	b.n	8009e58 <HAL_RCC_OscConfig+0xb0>
 8009e40:	4b69      	ldr	r3, [pc, #420]	; (8009fe8 <HAL_RCC_OscConfig+0x240>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a68      	ldr	r2, [pc, #416]	; (8009fe8 <HAL_RCC_OscConfig+0x240>)
 8009e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e4a:	6013      	str	r3, [r2, #0]
 8009e4c:	4b66      	ldr	r3, [pc, #408]	; (8009fe8 <HAL_RCC_OscConfig+0x240>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a65      	ldr	r2, [pc, #404]	; (8009fe8 <HAL_RCC_OscConfig+0x240>)
 8009e52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d013      	beq.n	8009e88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e60:	f7fc fea8 	bl	8006bb4 <HAL_GetTick>
 8009e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e66:	e008      	b.n	8009e7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009e68:	f7fc fea4 	bl	8006bb4 <HAL_GetTick>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	2b64      	cmp	r3, #100	; 0x64
 8009e74:	d901      	bls.n	8009e7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009e76:	2303      	movs	r3, #3
 8009e78:	e207      	b.n	800a28a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e7a:	4b5b      	ldr	r3, [pc, #364]	; (8009fe8 <HAL_RCC_OscConfig+0x240>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d0f0      	beq.n	8009e68 <HAL_RCC_OscConfig+0xc0>
 8009e86:	e014      	b.n	8009eb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e88:	f7fc fe94 	bl	8006bb4 <HAL_GetTick>
 8009e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009e8e:	e008      	b.n	8009ea2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009e90:	f7fc fe90 	bl	8006bb4 <HAL_GetTick>
 8009e94:	4602      	mov	r2, r0
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	1ad3      	subs	r3, r2, r3
 8009e9a:	2b64      	cmp	r3, #100	; 0x64
 8009e9c:	d901      	bls.n	8009ea2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009e9e:	2303      	movs	r3, #3
 8009ea0:	e1f3      	b.n	800a28a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ea2:	4b51      	ldr	r3, [pc, #324]	; (8009fe8 <HAL_RCC_OscConfig+0x240>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d1f0      	bne.n	8009e90 <HAL_RCC_OscConfig+0xe8>
 8009eae:	e000      	b.n	8009eb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009eb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f003 0302 	and.w	r3, r3, #2
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d063      	beq.n	8009f86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009ebe:	4b4a      	ldr	r3, [pc, #296]	; (8009fe8 <HAL_RCC_OscConfig+0x240>)
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	f003 030c 	and.w	r3, r3, #12
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d00b      	beq.n	8009ee2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009eca:	4b47      	ldr	r3, [pc, #284]	; (8009fe8 <HAL_RCC_OscConfig+0x240>)
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009ed2:	2b08      	cmp	r3, #8
 8009ed4:	d11c      	bne.n	8009f10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009ed6:	4b44      	ldr	r3, [pc, #272]	; (8009fe8 <HAL_RCC_OscConfig+0x240>)
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d116      	bne.n	8009f10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009ee2:	4b41      	ldr	r3, [pc, #260]	; (8009fe8 <HAL_RCC_OscConfig+0x240>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 0302 	and.w	r3, r3, #2
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d005      	beq.n	8009efa <HAL_RCC_OscConfig+0x152>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d001      	beq.n	8009efa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e1c7      	b.n	800a28a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009efa:	4b3b      	ldr	r3, [pc, #236]	; (8009fe8 <HAL_RCC_OscConfig+0x240>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	691b      	ldr	r3, [r3, #16]
 8009f06:	00db      	lsls	r3, r3, #3
 8009f08:	4937      	ldr	r1, [pc, #220]	; (8009fe8 <HAL_RCC_OscConfig+0x240>)
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f0e:	e03a      	b.n	8009f86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d020      	beq.n	8009f5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009f18:	4b34      	ldr	r3, [pc, #208]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f1e:	f7fc fe49 	bl	8006bb4 <HAL_GetTick>
 8009f22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f24:	e008      	b.n	8009f38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f26:	f7fc fe45 	bl	8006bb4 <HAL_GetTick>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	1ad3      	subs	r3, r2, r3
 8009f30:	2b02      	cmp	r3, #2
 8009f32:	d901      	bls.n	8009f38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009f34:	2303      	movs	r3, #3
 8009f36:	e1a8      	b.n	800a28a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f38:	4b2b      	ldr	r3, [pc, #172]	; (8009fe8 <HAL_RCC_OscConfig+0x240>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f003 0302 	and.w	r3, r3, #2
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d0f0      	beq.n	8009f26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f44:	4b28      	ldr	r3, [pc, #160]	; (8009fe8 <HAL_RCC_OscConfig+0x240>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	691b      	ldr	r3, [r3, #16]
 8009f50:	00db      	lsls	r3, r3, #3
 8009f52:	4925      	ldr	r1, [pc, #148]	; (8009fe8 <HAL_RCC_OscConfig+0x240>)
 8009f54:	4313      	orrs	r3, r2
 8009f56:	600b      	str	r3, [r1, #0]
 8009f58:	e015      	b.n	8009f86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009f5a:	4b24      	ldr	r3, [pc, #144]	; (8009fec <HAL_RCC_OscConfig+0x244>)
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f60:	f7fc fe28 	bl	8006bb4 <HAL_GetTick>
 8009f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f66:	e008      	b.n	8009f7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f68:	f7fc fe24 	bl	8006bb4 <HAL_GetTick>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	1ad3      	subs	r3, r2, r3
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	d901      	bls.n	8009f7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009f76:	2303      	movs	r3, #3
 8009f78:	e187      	b.n	800a28a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f7a:	4b1b      	ldr	r3, [pc, #108]	; (8009fe8 <HAL_RCC_OscConfig+0x240>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f003 0302 	and.w	r3, r3, #2
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d1f0      	bne.n	8009f68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f003 0308 	and.w	r3, r3, #8
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d036      	beq.n	800a000 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	695b      	ldr	r3, [r3, #20]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d016      	beq.n	8009fc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009f9a:	4b15      	ldr	r3, [pc, #84]	; (8009ff0 <HAL_RCC_OscConfig+0x248>)
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fa0:	f7fc fe08 	bl	8006bb4 <HAL_GetTick>
 8009fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009fa6:	e008      	b.n	8009fba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009fa8:	f7fc fe04 	bl	8006bb4 <HAL_GetTick>
 8009fac:	4602      	mov	r2, r0
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	1ad3      	subs	r3, r2, r3
 8009fb2:	2b02      	cmp	r3, #2
 8009fb4:	d901      	bls.n	8009fba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009fb6:	2303      	movs	r3, #3
 8009fb8:	e167      	b.n	800a28a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009fba:	4b0b      	ldr	r3, [pc, #44]	; (8009fe8 <HAL_RCC_OscConfig+0x240>)
 8009fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fbe:	f003 0302 	and.w	r3, r3, #2
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d0f0      	beq.n	8009fa8 <HAL_RCC_OscConfig+0x200>
 8009fc6:	e01b      	b.n	800a000 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009fc8:	4b09      	ldr	r3, [pc, #36]	; (8009ff0 <HAL_RCC_OscConfig+0x248>)
 8009fca:	2200      	movs	r2, #0
 8009fcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009fce:	f7fc fdf1 	bl	8006bb4 <HAL_GetTick>
 8009fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009fd4:	e00e      	b.n	8009ff4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009fd6:	f7fc fded 	bl	8006bb4 <HAL_GetTick>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	1ad3      	subs	r3, r2, r3
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	d907      	bls.n	8009ff4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009fe4:	2303      	movs	r3, #3
 8009fe6:	e150      	b.n	800a28a <HAL_RCC_OscConfig+0x4e2>
 8009fe8:	40023800 	.word	0x40023800
 8009fec:	42470000 	.word	0x42470000
 8009ff0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009ff4:	4b88      	ldr	r3, [pc, #544]	; (800a218 <HAL_RCC_OscConfig+0x470>)
 8009ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ff8:	f003 0302 	and.w	r3, r3, #2
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d1ea      	bne.n	8009fd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f003 0304 	and.w	r3, r3, #4
 800a008:	2b00      	cmp	r3, #0
 800a00a:	f000 8097 	beq.w	800a13c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a00e:	2300      	movs	r3, #0
 800a010:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a012:	4b81      	ldr	r3, [pc, #516]	; (800a218 <HAL_RCC_OscConfig+0x470>)
 800a014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d10f      	bne.n	800a03e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a01e:	2300      	movs	r3, #0
 800a020:	60bb      	str	r3, [r7, #8]
 800a022:	4b7d      	ldr	r3, [pc, #500]	; (800a218 <HAL_RCC_OscConfig+0x470>)
 800a024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a026:	4a7c      	ldr	r2, [pc, #496]	; (800a218 <HAL_RCC_OscConfig+0x470>)
 800a028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a02c:	6413      	str	r3, [r2, #64]	; 0x40
 800a02e:	4b7a      	ldr	r3, [pc, #488]	; (800a218 <HAL_RCC_OscConfig+0x470>)
 800a030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a036:	60bb      	str	r3, [r7, #8]
 800a038:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a03a:	2301      	movs	r3, #1
 800a03c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a03e:	4b77      	ldr	r3, [pc, #476]	; (800a21c <HAL_RCC_OscConfig+0x474>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a046:	2b00      	cmp	r3, #0
 800a048:	d118      	bne.n	800a07c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a04a:	4b74      	ldr	r3, [pc, #464]	; (800a21c <HAL_RCC_OscConfig+0x474>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a73      	ldr	r2, [pc, #460]	; (800a21c <HAL_RCC_OscConfig+0x474>)
 800a050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a054:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a056:	f7fc fdad 	bl	8006bb4 <HAL_GetTick>
 800a05a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a05c:	e008      	b.n	800a070 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a05e:	f7fc fda9 	bl	8006bb4 <HAL_GetTick>
 800a062:	4602      	mov	r2, r0
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	1ad3      	subs	r3, r2, r3
 800a068:	2b02      	cmp	r3, #2
 800a06a:	d901      	bls.n	800a070 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a06c:	2303      	movs	r3, #3
 800a06e:	e10c      	b.n	800a28a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a070:	4b6a      	ldr	r3, [pc, #424]	; (800a21c <HAL_RCC_OscConfig+0x474>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d0f0      	beq.n	800a05e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	2b01      	cmp	r3, #1
 800a082:	d106      	bne.n	800a092 <HAL_RCC_OscConfig+0x2ea>
 800a084:	4b64      	ldr	r3, [pc, #400]	; (800a218 <HAL_RCC_OscConfig+0x470>)
 800a086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a088:	4a63      	ldr	r2, [pc, #396]	; (800a218 <HAL_RCC_OscConfig+0x470>)
 800a08a:	f043 0301 	orr.w	r3, r3, #1
 800a08e:	6713      	str	r3, [r2, #112]	; 0x70
 800a090:	e01c      	b.n	800a0cc <HAL_RCC_OscConfig+0x324>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	2b05      	cmp	r3, #5
 800a098:	d10c      	bne.n	800a0b4 <HAL_RCC_OscConfig+0x30c>
 800a09a:	4b5f      	ldr	r3, [pc, #380]	; (800a218 <HAL_RCC_OscConfig+0x470>)
 800a09c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a09e:	4a5e      	ldr	r2, [pc, #376]	; (800a218 <HAL_RCC_OscConfig+0x470>)
 800a0a0:	f043 0304 	orr.w	r3, r3, #4
 800a0a4:	6713      	str	r3, [r2, #112]	; 0x70
 800a0a6:	4b5c      	ldr	r3, [pc, #368]	; (800a218 <HAL_RCC_OscConfig+0x470>)
 800a0a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0aa:	4a5b      	ldr	r2, [pc, #364]	; (800a218 <HAL_RCC_OscConfig+0x470>)
 800a0ac:	f043 0301 	orr.w	r3, r3, #1
 800a0b0:	6713      	str	r3, [r2, #112]	; 0x70
 800a0b2:	e00b      	b.n	800a0cc <HAL_RCC_OscConfig+0x324>
 800a0b4:	4b58      	ldr	r3, [pc, #352]	; (800a218 <HAL_RCC_OscConfig+0x470>)
 800a0b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0b8:	4a57      	ldr	r2, [pc, #348]	; (800a218 <HAL_RCC_OscConfig+0x470>)
 800a0ba:	f023 0301 	bic.w	r3, r3, #1
 800a0be:	6713      	str	r3, [r2, #112]	; 0x70
 800a0c0:	4b55      	ldr	r3, [pc, #340]	; (800a218 <HAL_RCC_OscConfig+0x470>)
 800a0c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0c4:	4a54      	ldr	r2, [pc, #336]	; (800a218 <HAL_RCC_OscConfig+0x470>)
 800a0c6:	f023 0304 	bic.w	r3, r3, #4
 800a0ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d015      	beq.n	800a100 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0d4:	f7fc fd6e 	bl	8006bb4 <HAL_GetTick>
 800a0d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a0da:	e00a      	b.n	800a0f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a0dc:	f7fc fd6a 	bl	8006bb4 <HAL_GetTick>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	1ad3      	subs	r3, r2, r3
 800a0e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d901      	bls.n	800a0f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a0ee:	2303      	movs	r3, #3
 800a0f0:	e0cb      	b.n	800a28a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a0f2:	4b49      	ldr	r3, [pc, #292]	; (800a218 <HAL_RCC_OscConfig+0x470>)
 800a0f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0f6:	f003 0302 	and.w	r3, r3, #2
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d0ee      	beq.n	800a0dc <HAL_RCC_OscConfig+0x334>
 800a0fe:	e014      	b.n	800a12a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a100:	f7fc fd58 	bl	8006bb4 <HAL_GetTick>
 800a104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a106:	e00a      	b.n	800a11e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a108:	f7fc fd54 	bl	8006bb4 <HAL_GetTick>
 800a10c:	4602      	mov	r2, r0
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	f241 3288 	movw	r2, #5000	; 0x1388
 800a116:	4293      	cmp	r3, r2
 800a118:	d901      	bls.n	800a11e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a11a:	2303      	movs	r3, #3
 800a11c:	e0b5      	b.n	800a28a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a11e:	4b3e      	ldr	r3, [pc, #248]	; (800a218 <HAL_RCC_OscConfig+0x470>)
 800a120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a122:	f003 0302 	and.w	r3, r3, #2
 800a126:	2b00      	cmp	r3, #0
 800a128:	d1ee      	bne.n	800a108 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a12a:	7dfb      	ldrb	r3, [r7, #23]
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d105      	bne.n	800a13c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a130:	4b39      	ldr	r3, [pc, #228]	; (800a218 <HAL_RCC_OscConfig+0x470>)
 800a132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a134:	4a38      	ldr	r2, [pc, #224]	; (800a218 <HAL_RCC_OscConfig+0x470>)
 800a136:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a13a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	699b      	ldr	r3, [r3, #24]
 800a140:	2b00      	cmp	r3, #0
 800a142:	f000 80a1 	beq.w	800a288 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a146:	4b34      	ldr	r3, [pc, #208]	; (800a218 <HAL_RCC_OscConfig+0x470>)
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	f003 030c 	and.w	r3, r3, #12
 800a14e:	2b08      	cmp	r3, #8
 800a150:	d05c      	beq.n	800a20c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	699b      	ldr	r3, [r3, #24]
 800a156:	2b02      	cmp	r3, #2
 800a158:	d141      	bne.n	800a1de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a15a:	4b31      	ldr	r3, [pc, #196]	; (800a220 <HAL_RCC_OscConfig+0x478>)
 800a15c:	2200      	movs	r2, #0
 800a15e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a160:	f7fc fd28 	bl	8006bb4 <HAL_GetTick>
 800a164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a166:	e008      	b.n	800a17a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a168:	f7fc fd24 	bl	8006bb4 <HAL_GetTick>
 800a16c:	4602      	mov	r2, r0
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	1ad3      	subs	r3, r2, r3
 800a172:	2b02      	cmp	r3, #2
 800a174:	d901      	bls.n	800a17a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a176:	2303      	movs	r3, #3
 800a178:	e087      	b.n	800a28a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a17a:	4b27      	ldr	r3, [pc, #156]	; (800a218 <HAL_RCC_OscConfig+0x470>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a182:	2b00      	cmp	r3, #0
 800a184:	d1f0      	bne.n	800a168 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	69da      	ldr	r2, [r3, #28]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6a1b      	ldr	r3, [r3, #32]
 800a18e:	431a      	orrs	r2, r3
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a194:	019b      	lsls	r3, r3, #6
 800a196:	431a      	orrs	r2, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a19c:	085b      	lsrs	r3, r3, #1
 800a19e:	3b01      	subs	r3, #1
 800a1a0:	041b      	lsls	r3, r3, #16
 800a1a2:	431a      	orrs	r2, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a8:	061b      	lsls	r3, r3, #24
 800a1aa:	491b      	ldr	r1, [pc, #108]	; (800a218 <HAL_RCC_OscConfig+0x470>)
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a1b0:	4b1b      	ldr	r3, [pc, #108]	; (800a220 <HAL_RCC_OscConfig+0x478>)
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1b6:	f7fc fcfd 	bl	8006bb4 <HAL_GetTick>
 800a1ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a1bc:	e008      	b.n	800a1d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1be:	f7fc fcf9 	bl	8006bb4 <HAL_GetTick>
 800a1c2:	4602      	mov	r2, r0
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	1ad3      	subs	r3, r2, r3
 800a1c8:	2b02      	cmp	r3, #2
 800a1ca:	d901      	bls.n	800a1d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a1cc:	2303      	movs	r3, #3
 800a1ce:	e05c      	b.n	800a28a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a1d0:	4b11      	ldr	r3, [pc, #68]	; (800a218 <HAL_RCC_OscConfig+0x470>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d0f0      	beq.n	800a1be <HAL_RCC_OscConfig+0x416>
 800a1dc:	e054      	b.n	800a288 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1de:	4b10      	ldr	r3, [pc, #64]	; (800a220 <HAL_RCC_OscConfig+0x478>)
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1e4:	f7fc fce6 	bl	8006bb4 <HAL_GetTick>
 800a1e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1ea:	e008      	b.n	800a1fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1ec:	f7fc fce2 	bl	8006bb4 <HAL_GetTick>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	1ad3      	subs	r3, r2, r3
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	d901      	bls.n	800a1fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a1fa:	2303      	movs	r3, #3
 800a1fc:	e045      	b.n	800a28a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1fe:	4b06      	ldr	r3, [pc, #24]	; (800a218 <HAL_RCC_OscConfig+0x470>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a206:	2b00      	cmp	r3, #0
 800a208:	d1f0      	bne.n	800a1ec <HAL_RCC_OscConfig+0x444>
 800a20a:	e03d      	b.n	800a288 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	699b      	ldr	r3, [r3, #24]
 800a210:	2b01      	cmp	r3, #1
 800a212:	d107      	bne.n	800a224 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a214:	2301      	movs	r3, #1
 800a216:	e038      	b.n	800a28a <HAL_RCC_OscConfig+0x4e2>
 800a218:	40023800 	.word	0x40023800
 800a21c:	40007000 	.word	0x40007000
 800a220:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a224:	4b1b      	ldr	r3, [pc, #108]	; (800a294 <HAL_RCC_OscConfig+0x4ec>)
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	699b      	ldr	r3, [r3, #24]
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d028      	beq.n	800a284 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d121      	bne.n	800a284 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d11a      	bne.n	800a284 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a24e:	68fa      	ldr	r2, [r7, #12]
 800a250:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a254:	4013      	ands	r3, r2
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a25a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d111      	bne.n	800a284 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a26a:	085b      	lsrs	r3, r3, #1
 800a26c:	3b01      	subs	r3, #1
 800a26e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a270:	429a      	cmp	r2, r3
 800a272:	d107      	bne.n	800a284 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a27e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a280:	429a      	cmp	r2, r3
 800a282:	d001      	beq.n	800a288 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	e000      	b.n	800a28a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a288:	2300      	movs	r3, #0
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3718      	adds	r7, #24
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	40023800 	.word	0x40023800

0800a298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d101      	bne.n	800a2ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	e0cc      	b.n	800a446 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a2ac:	4b68      	ldr	r3, [pc, #416]	; (800a450 <HAL_RCC_ClockConfig+0x1b8>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f003 0307 	and.w	r3, r3, #7
 800a2b4:	683a      	ldr	r2, [r7, #0]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d90c      	bls.n	800a2d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2ba:	4b65      	ldr	r3, [pc, #404]	; (800a450 <HAL_RCC_ClockConfig+0x1b8>)
 800a2bc:	683a      	ldr	r2, [r7, #0]
 800a2be:	b2d2      	uxtb	r2, r2
 800a2c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2c2:	4b63      	ldr	r3, [pc, #396]	; (800a450 <HAL_RCC_ClockConfig+0x1b8>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f003 0307 	and.w	r3, r3, #7
 800a2ca:	683a      	ldr	r2, [r7, #0]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d001      	beq.n	800a2d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e0b8      	b.n	800a446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f003 0302 	and.w	r3, r3, #2
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d020      	beq.n	800a322 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f003 0304 	and.w	r3, r3, #4
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d005      	beq.n	800a2f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a2ec:	4b59      	ldr	r3, [pc, #356]	; (800a454 <HAL_RCC_ClockConfig+0x1bc>)
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	4a58      	ldr	r2, [pc, #352]	; (800a454 <HAL_RCC_ClockConfig+0x1bc>)
 800a2f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a2f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f003 0308 	and.w	r3, r3, #8
 800a300:	2b00      	cmp	r3, #0
 800a302:	d005      	beq.n	800a310 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a304:	4b53      	ldr	r3, [pc, #332]	; (800a454 <HAL_RCC_ClockConfig+0x1bc>)
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	4a52      	ldr	r2, [pc, #328]	; (800a454 <HAL_RCC_ClockConfig+0x1bc>)
 800a30a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a30e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a310:	4b50      	ldr	r3, [pc, #320]	; (800a454 <HAL_RCC_ClockConfig+0x1bc>)
 800a312:	689b      	ldr	r3, [r3, #8]
 800a314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	494d      	ldr	r1, [pc, #308]	; (800a454 <HAL_RCC_ClockConfig+0x1bc>)
 800a31e:	4313      	orrs	r3, r2
 800a320:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f003 0301 	and.w	r3, r3, #1
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d044      	beq.n	800a3b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	2b01      	cmp	r3, #1
 800a334:	d107      	bne.n	800a346 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a336:	4b47      	ldr	r3, [pc, #284]	; (800a454 <HAL_RCC_ClockConfig+0x1bc>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d119      	bne.n	800a376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	e07f      	b.n	800a446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	2b02      	cmp	r3, #2
 800a34c:	d003      	beq.n	800a356 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a352:	2b03      	cmp	r3, #3
 800a354:	d107      	bne.n	800a366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a356:	4b3f      	ldr	r3, [pc, #252]	; (800a454 <HAL_RCC_ClockConfig+0x1bc>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d109      	bne.n	800a376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	e06f      	b.n	800a446 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a366:	4b3b      	ldr	r3, [pc, #236]	; (800a454 <HAL_RCC_ClockConfig+0x1bc>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f003 0302 	and.w	r3, r3, #2
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d101      	bne.n	800a376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a372:	2301      	movs	r3, #1
 800a374:	e067      	b.n	800a446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a376:	4b37      	ldr	r3, [pc, #220]	; (800a454 <HAL_RCC_ClockConfig+0x1bc>)
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	f023 0203 	bic.w	r2, r3, #3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	4934      	ldr	r1, [pc, #208]	; (800a454 <HAL_RCC_ClockConfig+0x1bc>)
 800a384:	4313      	orrs	r3, r2
 800a386:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a388:	f7fc fc14 	bl	8006bb4 <HAL_GetTick>
 800a38c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a38e:	e00a      	b.n	800a3a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a390:	f7fc fc10 	bl	8006bb4 <HAL_GetTick>
 800a394:	4602      	mov	r2, r0
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	1ad3      	subs	r3, r2, r3
 800a39a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d901      	bls.n	800a3a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a3a2:	2303      	movs	r3, #3
 800a3a4:	e04f      	b.n	800a446 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3a6:	4b2b      	ldr	r3, [pc, #172]	; (800a454 <HAL_RCC_ClockConfig+0x1bc>)
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	f003 020c 	and.w	r2, r3, #12
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d1eb      	bne.n	800a390 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a3b8:	4b25      	ldr	r3, [pc, #148]	; (800a450 <HAL_RCC_ClockConfig+0x1b8>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f003 0307 	and.w	r3, r3, #7
 800a3c0:	683a      	ldr	r2, [r7, #0]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d20c      	bcs.n	800a3e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3c6:	4b22      	ldr	r3, [pc, #136]	; (800a450 <HAL_RCC_ClockConfig+0x1b8>)
 800a3c8:	683a      	ldr	r2, [r7, #0]
 800a3ca:	b2d2      	uxtb	r2, r2
 800a3cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3ce:	4b20      	ldr	r3, [pc, #128]	; (800a450 <HAL_RCC_ClockConfig+0x1b8>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f003 0307 	and.w	r3, r3, #7
 800a3d6:	683a      	ldr	r2, [r7, #0]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d001      	beq.n	800a3e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	e032      	b.n	800a446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f003 0304 	and.w	r3, r3, #4
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d008      	beq.n	800a3fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a3ec:	4b19      	ldr	r3, [pc, #100]	; (800a454 <HAL_RCC_ClockConfig+0x1bc>)
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	68db      	ldr	r3, [r3, #12]
 800a3f8:	4916      	ldr	r1, [pc, #88]	; (800a454 <HAL_RCC_ClockConfig+0x1bc>)
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f003 0308 	and.w	r3, r3, #8
 800a406:	2b00      	cmp	r3, #0
 800a408:	d009      	beq.n	800a41e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a40a:	4b12      	ldr	r3, [pc, #72]	; (800a454 <HAL_RCC_ClockConfig+0x1bc>)
 800a40c:	689b      	ldr	r3, [r3, #8]
 800a40e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	691b      	ldr	r3, [r3, #16]
 800a416:	00db      	lsls	r3, r3, #3
 800a418:	490e      	ldr	r1, [pc, #56]	; (800a454 <HAL_RCC_ClockConfig+0x1bc>)
 800a41a:	4313      	orrs	r3, r2
 800a41c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a41e:	f000 f821 	bl	800a464 <HAL_RCC_GetSysClockFreq>
 800a422:	4602      	mov	r2, r0
 800a424:	4b0b      	ldr	r3, [pc, #44]	; (800a454 <HAL_RCC_ClockConfig+0x1bc>)
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	091b      	lsrs	r3, r3, #4
 800a42a:	f003 030f 	and.w	r3, r3, #15
 800a42e:	490a      	ldr	r1, [pc, #40]	; (800a458 <HAL_RCC_ClockConfig+0x1c0>)
 800a430:	5ccb      	ldrb	r3, [r1, r3]
 800a432:	fa22 f303 	lsr.w	r3, r2, r3
 800a436:	4a09      	ldr	r2, [pc, #36]	; (800a45c <HAL_RCC_ClockConfig+0x1c4>)
 800a438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a43a:	4b09      	ldr	r3, [pc, #36]	; (800a460 <HAL_RCC_ClockConfig+0x1c8>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4618      	mov	r0, r3
 800a440:	f7f8 f956 	bl	80026f0 <HAL_InitTick>

  return HAL_OK;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	40023c00 	.word	0x40023c00
 800a454:	40023800 	.word	0x40023800
 800a458:	08012578 	.word	0x08012578
 800a45c:	20000008 	.word	0x20000008
 800a460:	2000000c 	.word	0x2000000c

0800a464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a468:	b094      	sub	sp, #80	; 0x50
 800a46a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a46c:	2300      	movs	r3, #0
 800a46e:	647b      	str	r3, [r7, #68]	; 0x44
 800a470:	2300      	movs	r3, #0
 800a472:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a474:	2300      	movs	r3, #0
 800a476:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800a478:	2300      	movs	r3, #0
 800a47a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a47c:	4b79      	ldr	r3, [pc, #484]	; (800a664 <HAL_RCC_GetSysClockFreq+0x200>)
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	f003 030c 	and.w	r3, r3, #12
 800a484:	2b08      	cmp	r3, #8
 800a486:	d00d      	beq.n	800a4a4 <HAL_RCC_GetSysClockFreq+0x40>
 800a488:	2b08      	cmp	r3, #8
 800a48a:	f200 80e1 	bhi.w	800a650 <HAL_RCC_GetSysClockFreq+0x1ec>
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d002      	beq.n	800a498 <HAL_RCC_GetSysClockFreq+0x34>
 800a492:	2b04      	cmp	r3, #4
 800a494:	d003      	beq.n	800a49e <HAL_RCC_GetSysClockFreq+0x3a>
 800a496:	e0db      	b.n	800a650 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a498:	4b73      	ldr	r3, [pc, #460]	; (800a668 <HAL_RCC_GetSysClockFreq+0x204>)
 800a49a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800a49c:	e0db      	b.n	800a656 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a49e:	4b73      	ldr	r3, [pc, #460]	; (800a66c <HAL_RCC_GetSysClockFreq+0x208>)
 800a4a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a4a2:	e0d8      	b.n	800a656 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a4a4:	4b6f      	ldr	r3, [pc, #444]	; (800a664 <HAL_RCC_GetSysClockFreq+0x200>)
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a4ae:	4b6d      	ldr	r3, [pc, #436]	; (800a664 <HAL_RCC_GetSysClockFreq+0x200>)
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d063      	beq.n	800a582 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a4ba:	4b6a      	ldr	r3, [pc, #424]	; (800a664 <HAL_RCC_GetSysClockFreq+0x200>)
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	099b      	lsrs	r3, r3, #6
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a4c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4cc:	633b      	str	r3, [r7, #48]	; 0x30
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	637b      	str	r3, [r7, #52]	; 0x34
 800a4d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a4d6:	4622      	mov	r2, r4
 800a4d8:	462b      	mov	r3, r5
 800a4da:	f04f 0000 	mov.w	r0, #0
 800a4de:	f04f 0100 	mov.w	r1, #0
 800a4e2:	0159      	lsls	r1, r3, #5
 800a4e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a4e8:	0150      	lsls	r0, r2, #5
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	4621      	mov	r1, r4
 800a4f0:	1a51      	subs	r1, r2, r1
 800a4f2:	6139      	str	r1, [r7, #16]
 800a4f4:	4629      	mov	r1, r5
 800a4f6:	eb63 0301 	sbc.w	r3, r3, r1
 800a4fa:	617b      	str	r3, [r7, #20]
 800a4fc:	f04f 0200 	mov.w	r2, #0
 800a500:	f04f 0300 	mov.w	r3, #0
 800a504:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a508:	4659      	mov	r1, fp
 800a50a:	018b      	lsls	r3, r1, #6
 800a50c:	4651      	mov	r1, sl
 800a50e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a512:	4651      	mov	r1, sl
 800a514:	018a      	lsls	r2, r1, #6
 800a516:	4651      	mov	r1, sl
 800a518:	ebb2 0801 	subs.w	r8, r2, r1
 800a51c:	4659      	mov	r1, fp
 800a51e:	eb63 0901 	sbc.w	r9, r3, r1
 800a522:	f04f 0200 	mov.w	r2, #0
 800a526:	f04f 0300 	mov.w	r3, #0
 800a52a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a52e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a532:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a536:	4690      	mov	r8, r2
 800a538:	4699      	mov	r9, r3
 800a53a:	4623      	mov	r3, r4
 800a53c:	eb18 0303 	adds.w	r3, r8, r3
 800a540:	60bb      	str	r3, [r7, #8]
 800a542:	462b      	mov	r3, r5
 800a544:	eb49 0303 	adc.w	r3, r9, r3
 800a548:	60fb      	str	r3, [r7, #12]
 800a54a:	f04f 0200 	mov.w	r2, #0
 800a54e:	f04f 0300 	mov.w	r3, #0
 800a552:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a556:	4629      	mov	r1, r5
 800a558:	024b      	lsls	r3, r1, #9
 800a55a:	4621      	mov	r1, r4
 800a55c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a560:	4621      	mov	r1, r4
 800a562:	024a      	lsls	r2, r1, #9
 800a564:	4610      	mov	r0, r2
 800a566:	4619      	mov	r1, r3
 800a568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a56a:	2200      	movs	r2, #0
 800a56c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a56e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a570:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a574:	f7f6 fb18 	bl	8000ba8 <__aeabi_uldivmod>
 800a578:	4602      	mov	r2, r0
 800a57a:	460b      	mov	r3, r1
 800a57c:	4613      	mov	r3, r2
 800a57e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a580:	e058      	b.n	800a634 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a582:	4b38      	ldr	r3, [pc, #224]	; (800a664 <HAL_RCC_GetSysClockFreq+0x200>)
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	099b      	lsrs	r3, r3, #6
 800a588:	2200      	movs	r2, #0
 800a58a:	4618      	mov	r0, r3
 800a58c:	4611      	mov	r1, r2
 800a58e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a592:	623b      	str	r3, [r7, #32]
 800a594:	2300      	movs	r3, #0
 800a596:	627b      	str	r3, [r7, #36]	; 0x24
 800a598:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a59c:	4642      	mov	r2, r8
 800a59e:	464b      	mov	r3, r9
 800a5a0:	f04f 0000 	mov.w	r0, #0
 800a5a4:	f04f 0100 	mov.w	r1, #0
 800a5a8:	0159      	lsls	r1, r3, #5
 800a5aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a5ae:	0150      	lsls	r0, r2, #5
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	4641      	mov	r1, r8
 800a5b6:	ebb2 0a01 	subs.w	sl, r2, r1
 800a5ba:	4649      	mov	r1, r9
 800a5bc:	eb63 0b01 	sbc.w	fp, r3, r1
 800a5c0:	f04f 0200 	mov.w	r2, #0
 800a5c4:	f04f 0300 	mov.w	r3, #0
 800a5c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a5cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a5d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a5d4:	ebb2 040a 	subs.w	r4, r2, sl
 800a5d8:	eb63 050b 	sbc.w	r5, r3, fp
 800a5dc:	f04f 0200 	mov.w	r2, #0
 800a5e0:	f04f 0300 	mov.w	r3, #0
 800a5e4:	00eb      	lsls	r3, r5, #3
 800a5e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a5ea:	00e2      	lsls	r2, r4, #3
 800a5ec:	4614      	mov	r4, r2
 800a5ee:	461d      	mov	r5, r3
 800a5f0:	4643      	mov	r3, r8
 800a5f2:	18e3      	adds	r3, r4, r3
 800a5f4:	603b      	str	r3, [r7, #0]
 800a5f6:	464b      	mov	r3, r9
 800a5f8:	eb45 0303 	adc.w	r3, r5, r3
 800a5fc:	607b      	str	r3, [r7, #4]
 800a5fe:	f04f 0200 	mov.w	r2, #0
 800a602:	f04f 0300 	mov.w	r3, #0
 800a606:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a60a:	4629      	mov	r1, r5
 800a60c:	028b      	lsls	r3, r1, #10
 800a60e:	4621      	mov	r1, r4
 800a610:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a614:	4621      	mov	r1, r4
 800a616:	028a      	lsls	r2, r1, #10
 800a618:	4610      	mov	r0, r2
 800a61a:	4619      	mov	r1, r3
 800a61c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a61e:	2200      	movs	r2, #0
 800a620:	61bb      	str	r3, [r7, #24]
 800a622:	61fa      	str	r2, [r7, #28]
 800a624:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a628:	f7f6 fabe 	bl	8000ba8 <__aeabi_uldivmod>
 800a62c:	4602      	mov	r2, r0
 800a62e:	460b      	mov	r3, r1
 800a630:	4613      	mov	r3, r2
 800a632:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a634:	4b0b      	ldr	r3, [pc, #44]	; (800a664 <HAL_RCC_GetSysClockFreq+0x200>)
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	0c1b      	lsrs	r3, r3, #16
 800a63a:	f003 0303 	and.w	r3, r3, #3
 800a63e:	3301      	adds	r3, #1
 800a640:	005b      	lsls	r3, r3, #1
 800a642:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800a644:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a648:	fbb2 f3f3 	udiv	r3, r2, r3
 800a64c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a64e:	e002      	b.n	800a656 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a650:	4b05      	ldr	r3, [pc, #20]	; (800a668 <HAL_RCC_GetSysClockFreq+0x204>)
 800a652:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a654:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3750      	adds	r7, #80	; 0x50
 800a65c:	46bd      	mov	sp, r7
 800a65e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a662:	bf00      	nop
 800a664:	40023800 	.word	0x40023800
 800a668:	00f42400 	.word	0x00f42400
 800a66c:	007a1200 	.word	0x007a1200

0800a670 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a670:	b480      	push	{r7}
 800a672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a674:	4b03      	ldr	r3, [pc, #12]	; (800a684 <HAL_RCC_GetHCLKFreq+0x14>)
 800a676:	681b      	ldr	r3, [r3, #0]
}
 800a678:	4618      	mov	r0, r3
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr
 800a682:	bf00      	nop
 800a684:	20000008 	.word	0x20000008

0800a688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a68c:	f7ff fff0 	bl	800a670 <HAL_RCC_GetHCLKFreq>
 800a690:	4602      	mov	r2, r0
 800a692:	4b05      	ldr	r3, [pc, #20]	; (800a6a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a694:	689b      	ldr	r3, [r3, #8]
 800a696:	0a9b      	lsrs	r3, r3, #10
 800a698:	f003 0307 	and.w	r3, r3, #7
 800a69c:	4903      	ldr	r1, [pc, #12]	; (800a6ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800a69e:	5ccb      	ldrb	r3, [r1, r3]
 800a6a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	40023800 	.word	0x40023800
 800a6ac:	08012588 	.word	0x08012588

0800a6b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a6b4:	f7ff ffdc 	bl	800a670 <HAL_RCC_GetHCLKFreq>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	4b05      	ldr	r3, [pc, #20]	; (800a6d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	0b5b      	lsrs	r3, r3, #13
 800a6c0:	f003 0307 	and.w	r3, r3, #7
 800a6c4:	4903      	ldr	r1, [pc, #12]	; (800a6d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a6c6:	5ccb      	ldrb	r3, [r1, r3]
 800a6c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	40023800 	.word	0x40023800
 800a6d4:	08012588 	.word	0x08012588

0800a6d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	220f      	movs	r2, #15
 800a6e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a6e8:	4b12      	ldr	r3, [pc, #72]	; (800a734 <HAL_RCC_GetClockConfig+0x5c>)
 800a6ea:	689b      	ldr	r3, [r3, #8]
 800a6ec:	f003 0203 	and.w	r2, r3, #3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a6f4:	4b0f      	ldr	r3, [pc, #60]	; (800a734 <HAL_RCC_GetClockConfig+0x5c>)
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a700:	4b0c      	ldr	r3, [pc, #48]	; (800a734 <HAL_RCC_GetClockConfig+0x5c>)
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a70c:	4b09      	ldr	r3, [pc, #36]	; (800a734 <HAL_RCC_GetClockConfig+0x5c>)
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	08db      	lsrs	r3, r3, #3
 800a712:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a71a:	4b07      	ldr	r3, [pc, #28]	; (800a738 <HAL_RCC_GetClockConfig+0x60>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f003 0207 	and.w	r2, r3, #7
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	601a      	str	r2, [r3, #0]
}
 800a726:	bf00      	nop
 800a728:	370c      	adds	r7, #12
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr
 800a732:	bf00      	nop
 800a734:	40023800 	.word	0x40023800
 800a738:	40023c00 	.word	0x40023c00

0800a73c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b082      	sub	sp, #8
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d101      	bne.n	800a74e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	e041      	b.n	800a7d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a754:	b2db      	uxtb	r3, r3
 800a756:	2b00      	cmp	r3, #0
 800a758:	d106      	bne.n	800a768 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2200      	movs	r2, #0
 800a75e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f7f8 fd06 	bl	8003174 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2202      	movs	r2, #2
 800a76c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	3304      	adds	r3, #4
 800a778:	4619      	mov	r1, r3
 800a77a:	4610      	mov	r0, r2
 800a77c:	f000 fb6a 	bl	800ae54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2201      	movs	r2, #1
 800a784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
	...

0800a7dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b085      	sub	sp, #20
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d001      	beq.n	800a7f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e04e      	b.n	800a892 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2202      	movs	r2, #2
 800a7f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	68da      	ldr	r2, [r3, #12]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f042 0201 	orr.w	r2, r2, #1
 800a80a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a23      	ldr	r2, [pc, #140]	; (800a8a0 <HAL_TIM_Base_Start_IT+0xc4>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d022      	beq.n	800a85c <HAL_TIM_Base_Start_IT+0x80>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a81e:	d01d      	beq.n	800a85c <HAL_TIM_Base_Start_IT+0x80>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a1f      	ldr	r2, [pc, #124]	; (800a8a4 <HAL_TIM_Base_Start_IT+0xc8>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d018      	beq.n	800a85c <HAL_TIM_Base_Start_IT+0x80>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a1e      	ldr	r2, [pc, #120]	; (800a8a8 <HAL_TIM_Base_Start_IT+0xcc>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d013      	beq.n	800a85c <HAL_TIM_Base_Start_IT+0x80>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4a1c      	ldr	r2, [pc, #112]	; (800a8ac <HAL_TIM_Base_Start_IT+0xd0>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d00e      	beq.n	800a85c <HAL_TIM_Base_Start_IT+0x80>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4a1b      	ldr	r2, [pc, #108]	; (800a8b0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d009      	beq.n	800a85c <HAL_TIM_Base_Start_IT+0x80>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4a19      	ldr	r2, [pc, #100]	; (800a8b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d004      	beq.n	800a85c <HAL_TIM_Base_Start_IT+0x80>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4a18      	ldr	r2, [pc, #96]	; (800a8b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d111      	bne.n	800a880 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	f003 0307 	and.w	r3, r3, #7
 800a866:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2b06      	cmp	r3, #6
 800a86c:	d010      	beq.n	800a890 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f042 0201 	orr.w	r2, r2, #1
 800a87c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a87e:	e007      	b.n	800a890 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f042 0201 	orr.w	r2, r2, #1
 800a88e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a890:	2300      	movs	r3, #0
}
 800a892:	4618      	mov	r0, r3
 800a894:	3714      	adds	r7, #20
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop
 800a8a0:	40010000 	.word	0x40010000
 800a8a4:	40000400 	.word	0x40000400
 800a8a8:	40000800 	.word	0x40000800
 800a8ac:	40000c00 	.word	0x40000c00
 800a8b0:	40010400 	.word	0x40010400
 800a8b4:	40014000 	.word	0x40014000
 800a8b8:	40001800 	.word	0x40001800

0800a8bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	68da      	ldr	r2, [r3, #12]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f022 0201 	bic.w	r2, r2, #1
 800a8d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	6a1a      	ldr	r2, [r3, #32]
 800a8da:	f241 1311 	movw	r3, #4369	; 0x1111
 800a8de:	4013      	ands	r3, r2
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d10f      	bne.n	800a904 <HAL_TIM_Base_Stop_IT+0x48>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	6a1a      	ldr	r2, [r3, #32]
 800a8ea:	f240 4344 	movw	r3, #1092	; 0x444
 800a8ee:	4013      	ands	r3, r2
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d107      	bne.n	800a904 <HAL_TIM_Base_Stop_IT+0x48>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f022 0201 	bic.w	r2, r2, #1
 800a902:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2201      	movs	r2, #1
 800a908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	370c      	adds	r7, #12
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr

0800a91a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b086      	sub	sp, #24
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
 800a922:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d101      	bne.n	800a92e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	e097      	b.n	800aa5e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a934:	b2db      	uxtb	r3, r3
 800a936:	2b00      	cmp	r3, #0
 800a938:	d106      	bne.n	800a948 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2200      	movs	r2, #0
 800a93e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f7f8 fb56 	bl	8002ff4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2202      	movs	r2, #2
 800a94c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	689b      	ldr	r3, [r3, #8]
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	6812      	ldr	r2, [r2, #0]
 800a95a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a95e:	f023 0307 	bic.w	r3, r3, #7
 800a962:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	3304      	adds	r3, #4
 800a96c:	4619      	mov	r1, r3
 800a96e:	4610      	mov	r0, r2
 800a970:	f000 fa70 	bl	800ae54 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	689b      	ldr	r3, [r3, #8]
 800a97a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	699b      	ldr	r3, [r3, #24]
 800a982:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	6a1b      	ldr	r3, [r3, #32]
 800a98a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	697a      	ldr	r2, [r7, #20]
 800a992:	4313      	orrs	r3, r2
 800a994:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a99c:	f023 0303 	bic.w	r3, r3, #3
 800a9a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	689a      	ldr	r2, [r3, #8]
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	699b      	ldr	r3, [r3, #24]
 800a9aa:	021b      	lsls	r3, r3, #8
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	693a      	ldr	r2, [r7, #16]
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a9ba:	f023 030c 	bic.w	r3, r3, #12
 800a9be:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a9c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	68da      	ldr	r2, [r3, #12]
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	69db      	ldr	r3, [r3, #28]
 800a9d4:	021b      	lsls	r3, r3, #8
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	693a      	ldr	r2, [r7, #16]
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	691b      	ldr	r3, [r3, #16]
 800a9e2:	011a      	lsls	r2, r3, #4
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	6a1b      	ldr	r3, [r3, #32]
 800a9e8:	031b      	lsls	r3, r3, #12
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	693a      	ldr	r2, [r7, #16]
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a9f8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800aa00:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	685a      	ldr	r2, [r3, #4]
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	695b      	ldr	r3, [r3, #20]
 800aa0a:	011b      	lsls	r3, r3, #4
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	68fa      	ldr	r2, [r7, #12]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	697a      	ldr	r2, [r7, #20]
 800aa1a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	693a      	ldr	r2, [r7, #16]
 800aa22:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	68fa      	ldr	r2, [r7, #12]
 800aa2a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2201      	movs	r2, #1
 800aa38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2201      	movs	r2, #1
 800aa58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa5c:	2300      	movs	r3, #0
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3718      	adds	r7, #24
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b082      	sub	sp, #8
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	f003 0302 	and.w	r3, r3, #2
 800aa78:	2b02      	cmp	r3, #2
 800aa7a:	d122      	bne.n	800aac2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	68db      	ldr	r3, [r3, #12]
 800aa82:	f003 0302 	and.w	r3, r3, #2
 800aa86:	2b02      	cmp	r3, #2
 800aa88:	d11b      	bne.n	800aac2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f06f 0202 	mvn.w	r2, #2
 800aa92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2201      	movs	r2, #1
 800aa98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	699b      	ldr	r3, [r3, #24]
 800aaa0:	f003 0303 	and.w	r3, r3, #3
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d003      	beq.n	800aab0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 f9b5 	bl	800ae18 <HAL_TIM_IC_CaptureCallback>
 800aaae:	e005      	b.n	800aabc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 f9a7 	bl	800ae04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 f9b8 	bl	800ae2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	691b      	ldr	r3, [r3, #16]
 800aac8:	f003 0304 	and.w	r3, r3, #4
 800aacc:	2b04      	cmp	r3, #4
 800aace:	d122      	bne.n	800ab16 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	f003 0304 	and.w	r3, r3, #4
 800aada:	2b04      	cmp	r3, #4
 800aadc:	d11b      	bne.n	800ab16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f06f 0204 	mvn.w	r2, #4
 800aae6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2202      	movs	r2, #2
 800aaec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	699b      	ldr	r3, [r3, #24]
 800aaf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d003      	beq.n	800ab04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 f98b 	bl	800ae18 <HAL_TIM_IC_CaptureCallback>
 800ab02:	e005      	b.n	800ab10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 f97d 	bl	800ae04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 f98e 	bl	800ae2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2200      	movs	r2, #0
 800ab14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	691b      	ldr	r3, [r3, #16]
 800ab1c:	f003 0308 	and.w	r3, r3, #8
 800ab20:	2b08      	cmp	r3, #8
 800ab22:	d122      	bne.n	800ab6a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	f003 0308 	and.w	r3, r3, #8
 800ab2e:	2b08      	cmp	r3, #8
 800ab30:	d11b      	bne.n	800ab6a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f06f 0208 	mvn.w	r2, #8
 800ab3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2204      	movs	r2, #4
 800ab40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	69db      	ldr	r3, [r3, #28]
 800ab48:	f003 0303 	and.w	r3, r3, #3
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d003      	beq.n	800ab58 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 f961 	bl	800ae18 <HAL_TIM_IC_CaptureCallback>
 800ab56:	e005      	b.n	800ab64 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 f953 	bl	800ae04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 f964 	bl	800ae2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2200      	movs	r2, #0
 800ab68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	691b      	ldr	r3, [r3, #16]
 800ab70:	f003 0310 	and.w	r3, r3, #16
 800ab74:	2b10      	cmp	r3, #16
 800ab76:	d122      	bne.n	800abbe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	68db      	ldr	r3, [r3, #12]
 800ab7e:	f003 0310 	and.w	r3, r3, #16
 800ab82:	2b10      	cmp	r3, #16
 800ab84:	d11b      	bne.n	800abbe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f06f 0210 	mvn.w	r2, #16
 800ab8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2208      	movs	r2, #8
 800ab94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	69db      	ldr	r3, [r3, #28]
 800ab9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d003      	beq.n	800abac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 f937 	bl	800ae18 <HAL_TIM_IC_CaptureCallback>
 800abaa:	e005      	b.n	800abb8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 f929 	bl	800ae04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 f93a 	bl	800ae2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2200      	movs	r2, #0
 800abbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	691b      	ldr	r3, [r3, #16]
 800abc4:	f003 0301 	and.w	r3, r3, #1
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d10e      	bne.n	800abea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	f003 0301 	and.w	r3, r3, #1
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	d107      	bne.n	800abea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f06f 0201 	mvn.w	r2, #1
 800abe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f7f7 f847 	bl	8001c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	691b      	ldr	r3, [r3, #16]
 800abf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abf4:	2b80      	cmp	r3, #128	; 0x80
 800abf6:	d10e      	bne.n	800ac16 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac02:	2b80      	cmp	r3, #128	; 0x80
 800ac04:	d107      	bne.n	800ac16 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ac0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 fadf 	bl	800b1d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	691b      	ldr	r3, [r3, #16]
 800ac1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac20:	2b40      	cmp	r3, #64	; 0x40
 800ac22:	d10e      	bne.n	800ac42 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac2e:	2b40      	cmp	r3, #64	; 0x40
 800ac30:	d107      	bne.n	800ac42 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 f8ff 	bl	800ae40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	691b      	ldr	r3, [r3, #16]
 800ac48:	f003 0320 	and.w	r3, r3, #32
 800ac4c:	2b20      	cmp	r3, #32
 800ac4e:	d10e      	bne.n	800ac6e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	68db      	ldr	r3, [r3, #12]
 800ac56:	f003 0320 	and.w	r3, r3, #32
 800ac5a:	2b20      	cmp	r3, #32
 800ac5c:	d107      	bne.n	800ac6e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f06f 0220 	mvn.w	r2, #32
 800ac66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 faa9 	bl	800b1c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac6e:	bf00      	nop
 800ac70:	3708      	adds	r7, #8
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}

0800ac76 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ac76:	b580      	push	{r7, lr}
 800ac78:	b084      	sub	sp, #16
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
 800ac7e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ac80:	2300      	movs	r3, #0
 800ac82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d101      	bne.n	800ac92 <HAL_TIM_ConfigClockSource+0x1c>
 800ac8e:	2302      	movs	r3, #2
 800ac90:	e0b4      	b.n	800adfc <HAL_TIM_ConfigClockSource+0x186>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2201      	movs	r2, #1
 800ac96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2202      	movs	r2, #2
 800ac9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	689b      	ldr	r3, [r3, #8]
 800aca8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800acb0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800acb8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	68ba      	ldr	r2, [r7, #8]
 800acc0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acca:	d03e      	beq.n	800ad4a <HAL_TIM_ConfigClockSource+0xd4>
 800accc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acd0:	f200 8087 	bhi.w	800ade2 <HAL_TIM_ConfigClockSource+0x16c>
 800acd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acd8:	f000 8086 	beq.w	800ade8 <HAL_TIM_ConfigClockSource+0x172>
 800acdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ace0:	d87f      	bhi.n	800ade2 <HAL_TIM_ConfigClockSource+0x16c>
 800ace2:	2b70      	cmp	r3, #112	; 0x70
 800ace4:	d01a      	beq.n	800ad1c <HAL_TIM_ConfigClockSource+0xa6>
 800ace6:	2b70      	cmp	r3, #112	; 0x70
 800ace8:	d87b      	bhi.n	800ade2 <HAL_TIM_ConfigClockSource+0x16c>
 800acea:	2b60      	cmp	r3, #96	; 0x60
 800acec:	d050      	beq.n	800ad90 <HAL_TIM_ConfigClockSource+0x11a>
 800acee:	2b60      	cmp	r3, #96	; 0x60
 800acf0:	d877      	bhi.n	800ade2 <HAL_TIM_ConfigClockSource+0x16c>
 800acf2:	2b50      	cmp	r3, #80	; 0x50
 800acf4:	d03c      	beq.n	800ad70 <HAL_TIM_ConfigClockSource+0xfa>
 800acf6:	2b50      	cmp	r3, #80	; 0x50
 800acf8:	d873      	bhi.n	800ade2 <HAL_TIM_ConfigClockSource+0x16c>
 800acfa:	2b40      	cmp	r3, #64	; 0x40
 800acfc:	d058      	beq.n	800adb0 <HAL_TIM_ConfigClockSource+0x13a>
 800acfe:	2b40      	cmp	r3, #64	; 0x40
 800ad00:	d86f      	bhi.n	800ade2 <HAL_TIM_ConfigClockSource+0x16c>
 800ad02:	2b30      	cmp	r3, #48	; 0x30
 800ad04:	d064      	beq.n	800add0 <HAL_TIM_ConfigClockSource+0x15a>
 800ad06:	2b30      	cmp	r3, #48	; 0x30
 800ad08:	d86b      	bhi.n	800ade2 <HAL_TIM_ConfigClockSource+0x16c>
 800ad0a:	2b20      	cmp	r3, #32
 800ad0c:	d060      	beq.n	800add0 <HAL_TIM_ConfigClockSource+0x15a>
 800ad0e:	2b20      	cmp	r3, #32
 800ad10:	d867      	bhi.n	800ade2 <HAL_TIM_ConfigClockSource+0x16c>
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d05c      	beq.n	800add0 <HAL_TIM_ConfigClockSource+0x15a>
 800ad16:	2b10      	cmp	r3, #16
 800ad18:	d05a      	beq.n	800add0 <HAL_TIM_ConfigClockSource+0x15a>
 800ad1a:	e062      	b.n	800ade2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6818      	ldr	r0, [r3, #0]
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	6899      	ldr	r1, [r3, #8]
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	685a      	ldr	r2, [r3, #4]
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	68db      	ldr	r3, [r3, #12]
 800ad2c:	f000 f9ac 	bl	800b088 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	689b      	ldr	r3, [r3, #8]
 800ad36:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ad3e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	68ba      	ldr	r2, [r7, #8]
 800ad46:	609a      	str	r2, [r3, #8]
      break;
 800ad48:	e04f      	b.n	800adea <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6818      	ldr	r0, [r3, #0]
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	6899      	ldr	r1, [r3, #8]
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	685a      	ldr	r2, [r3, #4]
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	f000 f995 	bl	800b088 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	689a      	ldr	r2, [r3, #8]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad6c:	609a      	str	r2, [r3, #8]
      break;
 800ad6e:	e03c      	b.n	800adea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6818      	ldr	r0, [r3, #0]
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	6859      	ldr	r1, [r3, #4]
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	f000 f909 	bl	800af94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	2150      	movs	r1, #80	; 0x50
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f000 f962 	bl	800b052 <TIM_ITRx_SetConfig>
      break;
 800ad8e:	e02c      	b.n	800adea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6818      	ldr	r0, [r3, #0]
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	6859      	ldr	r1, [r3, #4]
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	f000 f928 	bl	800aff2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	2160      	movs	r1, #96	; 0x60
 800ada8:	4618      	mov	r0, r3
 800adaa:	f000 f952 	bl	800b052 <TIM_ITRx_SetConfig>
      break;
 800adae:	e01c      	b.n	800adea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6818      	ldr	r0, [r3, #0]
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	6859      	ldr	r1, [r3, #4]
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	461a      	mov	r2, r3
 800adbe:	f000 f8e9 	bl	800af94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	2140      	movs	r1, #64	; 0x40
 800adc8:	4618      	mov	r0, r3
 800adca:	f000 f942 	bl	800b052 <TIM_ITRx_SetConfig>
      break;
 800adce:	e00c      	b.n	800adea <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4619      	mov	r1, r3
 800adda:	4610      	mov	r0, r2
 800addc:	f000 f939 	bl	800b052 <TIM_ITRx_SetConfig>
      break;
 800ade0:	e003      	b.n	800adea <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ade2:	2301      	movs	r3, #1
 800ade4:	73fb      	strb	r3, [r7, #15]
      break;
 800ade6:	e000      	b.n	800adea <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ade8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2201      	movs	r2, #1
 800adee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800adfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3710      	adds	r7, #16
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ae0c:	bf00      	nop
 800ae0e:	370c      	adds	r7, #12
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae20:	bf00      	nop
 800ae22:	370c      	adds	r7, #12
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b083      	sub	sp, #12
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae34:	bf00      	nop
 800ae36:	370c      	adds	r7, #12
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr

0800ae40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b083      	sub	sp, #12
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae48:	bf00      	nop
 800ae4a:	370c      	adds	r7, #12
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b085      	sub	sp, #20
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4a40      	ldr	r2, [pc, #256]	; (800af68 <TIM_Base_SetConfig+0x114>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d013      	beq.n	800ae94 <TIM_Base_SetConfig+0x40>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae72:	d00f      	beq.n	800ae94 <TIM_Base_SetConfig+0x40>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4a3d      	ldr	r2, [pc, #244]	; (800af6c <TIM_Base_SetConfig+0x118>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d00b      	beq.n	800ae94 <TIM_Base_SetConfig+0x40>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	4a3c      	ldr	r2, [pc, #240]	; (800af70 <TIM_Base_SetConfig+0x11c>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d007      	beq.n	800ae94 <TIM_Base_SetConfig+0x40>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	4a3b      	ldr	r2, [pc, #236]	; (800af74 <TIM_Base_SetConfig+0x120>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d003      	beq.n	800ae94 <TIM_Base_SetConfig+0x40>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	4a3a      	ldr	r2, [pc, #232]	; (800af78 <TIM_Base_SetConfig+0x124>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d108      	bne.n	800aea6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	4313      	orrs	r3, r2
 800aea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4a2f      	ldr	r2, [pc, #188]	; (800af68 <TIM_Base_SetConfig+0x114>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d02b      	beq.n	800af06 <TIM_Base_SetConfig+0xb2>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aeb4:	d027      	beq.n	800af06 <TIM_Base_SetConfig+0xb2>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	4a2c      	ldr	r2, [pc, #176]	; (800af6c <TIM_Base_SetConfig+0x118>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d023      	beq.n	800af06 <TIM_Base_SetConfig+0xb2>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	4a2b      	ldr	r2, [pc, #172]	; (800af70 <TIM_Base_SetConfig+0x11c>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d01f      	beq.n	800af06 <TIM_Base_SetConfig+0xb2>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	4a2a      	ldr	r2, [pc, #168]	; (800af74 <TIM_Base_SetConfig+0x120>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d01b      	beq.n	800af06 <TIM_Base_SetConfig+0xb2>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4a29      	ldr	r2, [pc, #164]	; (800af78 <TIM_Base_SetConfig+0x124>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d017      	beq.n	800af06 <TIM_Base_SetConfig+0xb2>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	4a28      	ldr	r2, [pc, #160]	; (800af7c <TIM_Base_SetConfig+0x128>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d013      	beq.n	800af06 <TIM_Base_SetConfig+0xb2>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	4a27      	ldr	r2, [pc, #156]	; (800af80 <TIM_Base_SetConfig+0x12c>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d00f      	beq.n	800af06 <TIM_Base_SetConfig+0xb2>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	4a26      	ldr	r2, [pc, #152]	; (800af84 <TIM_Base_SetConfig+0x130>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d00b      	beq.n	800af06 <TIM_Base_SetConfig+0xb2>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	4a25      	ldr	r2, [pc, #148]	; (800af88 <TIM_Base_SetConfig+0x134>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d007      	beq.n	800af06 <TIM_Base_SetConfig+0xb2>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	4a24      	ldr	r2, [pc, #144]	; (800af8c <TIM_Base_SetConfig+0x138>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d003      	beq.n	800af06 <TIM_Base_SetConfig+0xb2>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4a23      	ldr	r2, [pc, #140]	; (800af90 <TIM_Base_SetConfig+0x13c>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d108      	bne.n	800af18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	68fa      	ldr	r2, [r7, #12]
 800af14:	4313      	orrs	r3, r2
 800af16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	695b      	ldr	r3, [r3, #20]
 800af22:	4313      	orrs	r3, r2
 800af24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	689a      	ldr	r2, [r3, #8]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	4a0a      	ldr	r2, [pc, #40]	; (800af68 <TIM_Base_SetConfig+0x114>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d003      	beq.n	800af4c <TIM_Base_SetConfig+0xf8>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	4a0c      	ldr	r2, [pc, #48]	; (800af78 <TIM_Base_SetConfig+0x124>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d103      	bne.n	800af54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	691a      	ldr	r2, [r3, #16]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2201      	movs	r2, #1
 800af58:	615a      	str	r2, [r3, #20]
}
 800af5a:	bf00      	nop
 800af5c:	3714      	adds	r7, #20
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr
 800af66:	bf00      	nop
 800af68:	40010000 	.word	0x40010000
 800af6c:	40000400 	.word	0x40000400
 800af70:	40000800 	.word	0x40000800
 800af74:	40000c00 	.word	0x40000c00
 800af78:	40010400 	.word	0x40010400
 800af7c:	40014000 	.word	0x40014000
 800af80:	40014400 	.word	0x40014400
 800af84:	40014800 	.word	0x40014800
 800af88:	40001800 	.word	0x40001800
 800af8c:	40001c00 	.word	0x40001c00
 800af90:	40002000 	.word	0x40002000

0800af94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af94:	b480      	push	{r7}
 800af96:	b087      	sub	sp, #28
 800af98:	af00      	add	r7, sp, #0
 800af9a:	60f8      	str	r0, [r7, #12]
 800af9c:	60b9      	str	r1, [r7, #8]
 800af9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6a1b      	ldr	r3, [r3, #32]
 800afa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	6a1b      	ldr	r3, [r3, #32]
 800afaa:	f023 0201 	bic.w	r2, r3, #1
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	699b      	ldr	r3, [r3, #24]
 800afb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800afbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	011b      	lsls	r3, r3, #4
 800afc4:	693a      	ldr	r2, [r7, #16]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	f023 030a 	bic.w	r3, r3, #10
 800afd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800afd2:	697a      	ldr	r2, [r7, #20]
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	4313      	orrs	r3, r2
 800afd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	693a      	ldr	r2, [r7, #16]
 800afde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	697a      	ldr	r2, [r7, #20]
 800afe4:	621a      	str	r2, [r3, #32]
}
 800afe6:	bf00      	nop
 800afe8:	371c      	adds	r7, #28
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr

0800aff2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aff2:	b480      	push	{r7}
 800aff4:	b087      	sub	sp, #28
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	60f8      	str	r0, [r7, #12]
 800affa:	60b9      	str	r1, [r7, #8]
 800affc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	6a1b      	ldr	r3, [r3, #32]
 800b002:	f023 0210 	bic.w	r2, r3, #16
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	699b      	ldr	r3, [r3, #24]
 800b00e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	6a1b      	ldr	r3, [r3, #32]
 800b014:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b01c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	031b      	lsls	r3, r3, #12
 800b022:	697a      	ldr	r2, [r7, #20]
 800b024:	4313      	orrs	r3, r2
 800b026:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b02e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	011b      	lsls	r3, r3, #4
 800b034:	693a      	ldr	r2, [r7, #16]
 800b036:	4313      	orrs	r3, r2
 800b038:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	697a      	ldr	r2, [r7, #20]
 800b03e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	693a      	ldr	r2, [r7, #16]
 800b044:	621a      	str	r2, [r3, #32]
}
 800b046:	bf00      	nop
 800b048:	371c      	adds	r7, #28
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr

0800b052 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b052:	b480      	push	{r7}
 800b054:	b085      	sub	sp, #20
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
 800b05a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	689b      	ldr	r3, [r3, #8]
 800b060:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b068:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b06a:	683a      	ldr	r2, [r7, #0]
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	4313      	orrs	r3, r2
 800b070:	f043 0307 	orr.w	r3, r3, #7
 800b074:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	609a      	str	r2, [r3, #8]
}
 800b07c:	bf00      	nop
 800b07e:	3714      	adds	r7, #20
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr

0800b088 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b088:	b480      	push	{r7}
 800b08a:	b087      	sub	sp, #28
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
 800b094:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	689b      	ldr	r3, [r3, #8]
 800b09a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b0a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	021a      	lsls	r2, r3, #8
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	431a      	orrs	r2, r3
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	697a      	ldr	r2, [r7, #20]
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	697a      	ldr	r2, [r7, #20]
 800b0ba:	609a      	str	r2, [r3, #8]
}
 800b0bc:	bf00      	nop
 800b0be:	371c      	adds	r7, #28
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr

0800b0c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b085      	sub	sp, #20
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d101      	bne.n	800b0e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b0dc:	2302      	movs	r3, #2
 800b0de:	e05a      	b.n	800b196 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2202      	movs	r2, #2
 800b0ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b106:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	68fa      	ldr	r2, [r7, #12]
 800b10e:	4313      	orrs	r3, r2
 800b110:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	68fa      	ldr	r2, [r7, #12]
 800b118:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4a21      	ldr	r2, [pc, #132]	; (800b1a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d022      	beq.n	800b16a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b12c:	d01d      	beq.n	800b16a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a1d      	ldr	r2, [pc, #116]	; (800b1a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d018      	beq.n	800b16a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	4a1b      	ldr	r2, [pc, #108]	; (800b1ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d013      	beq.n	800b16a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4a1a      	ldr	r2, [pc, #104]	; (800b1b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d00e      	beq.n	800b16a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4a18      	ldr	r2, [pc, #96]	; (800b1b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d009      	beq.n	800b16a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	4a17      	ldr	r2, [pc, #92]	; (800b1b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d004      	beq.n	800b16a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4a15      	ldr	r2, [pc, #84]	; (800b1bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d10c      	bne.n	800b184 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b170:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	68ba      	ldr	r2, [r7, #8]
 800b178:	4313      	orrs	r3, r2
 800b17a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	68ba      	ldr	r2, [r7, #8]
 800b182:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2201      	movs	r2, #1
 800b188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3714      	adds	r7, #20
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop
 800b1a4:	40010000 	.word	0x40010000
 800b1a8:	40000400 	.word	0x40000400
 800b1ac:	40000800 	.word	0x40000800
 800b1b0:	40000c00 	.word	0x40000c00
 800b1b4:	40010400 	.word	0x40010400
 800b1b8:	40014000 	.word	0x40014000
 800b1bc:	40001800 	.word	0x40001800

0800b1c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b083      	sub	sp, #12
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b1c8:	bf00      	nop
 800b1ca:	370c      	adds	r7, #12
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr

0800b1d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b083      	sub	sp, #12
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b1dc:	bf00      	nop
 800b1de:	370c      	adds	r7, #12
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b082      	sub	sp, #8
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d101      	bne.n	800b1fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e03f      	b.n	800b27a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b200:	b2db      	uxtb	r3, r3
 800b202:	2b00      	cmp	r3, #0
 800b204:	d106      	bne.n	800b214 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f7f8 f958 	bl	80034c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2224      	movs	r2, #36	; 0x24
 800b218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	68da      	ldr	r2, [r3, #12]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b22a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 fe23 	bl	800be78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	691a      	ldr	r2, [r3, #16]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b240:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	695a      	ldr	r2, [r3, #20]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b250:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	68da      	ldr	r2, [r3, #12]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b260:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2200      	movs	r2, #0
 800b266:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2220      	movs	r2, #32
 800b26c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2220      	movs	r2, #32
 800b274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3708      	adds	r7, #8
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}

0800b282 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b282:	b580      	push	{r7, lr}
 800b284:	b08a      	sub	sp, #40	; 0x28
 800b286:	af02      	add	r7, sp, #8
 800b288:	60f8      	str	r0, [r7, #12]
 800b28a:	60b9      	str	r1, [r7, #8]
 800b28c:	603b      	str	r3, [r7, #0]
 800b28e:	4613      	mov	r3, r2
 800b290:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b292:	2300      	movs	r3, #0
 800b294:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	2b20      	cmp	r3, #32
 800b2a0:	d17c      	bne.n	800b39c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d002      	beq.n	800b2ae <HAL_UART_Transmit+0x2c>
 800b2a8:	88fb      	ldrh	r3, [r7, #6]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d101      	bne.n	800b2b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e075      	b.n	800b39e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	d101      	bne.n	800b2c0 <HAL_UART_Transmit+0x3e>
 800b2bc:	2302      	movs	r3, #2
 800b2be:	e06e      	b.n	800b39e <HAL_UART_Transmit+0x11c>
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2221      	movs	r2, #33	; 0x21
 800b2d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b2d6:	f7fb fc6d 	bl	8006bb4 <HAL_GetTick>
 800b2da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	88fa      	ldrh	r2, [r7, #6]
 800b2e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	88fa      	ldrh	r2, [r7, #6]
 800b2e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2f0:	d108      	bne.n	800b304 <HAL_UART_Transmit+0x82>
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	691b      	ldr	r3, [r3, #16]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d104      	bne.n	800b304 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	61bb      	str	r3, [r7, #24]
 800b302:	e003      	b.n	800b30c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b308:	2300      	movs	r3, #0
 800b30a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2200      	movs	r2, #0
 800b310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b314:	e02a      	b.n	800b36c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	9300      	str	r3, [sp, #0]
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	2200      	movs	r2, #0
 800b31e:	2180      	movs	r1, #128	; 0x80
 800b320:	68f8      	ldr	r0, [r7, #12]
 800b322:	f000 fb63 	bl	800b9ec <UART_WaitOnFlagUntilTimeout>
 800b326:	4603      	mov	r3, r0
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d001      	beq.n	800b330 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b32c:	2303      	movs	r3, #3
 800b32e:	e036      	b.n	800b39e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b330:	69fb      	ldr	r3, [r7, #28]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d10b      	bne.n	800b34e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	881b      	ldrh	r3, [r3, #0]
 800b33a:	461a      	mov	r2, r3
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b344:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b346:	69bb      	ldr	r3, [r7, #24]
 800b348:	3302      	adds	r3, #2
 800b34a:	61bb      	str	r3, [r7, #24]
 800b34c:	e007      	b.n	800b35e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b34e:	69fb      	ldr	r3, [r7, #28]
 800b350:	781a      	ldrb	r2, [r3, #0]
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b358:	69fb      	ldr	r3, [r7, #28]
 800b35a:	3301      	adds	r3, #1
 800b35c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b362:	b29b      	uxth	r3, r3
 800b364:	3b01      	subs	r3, #1
 800b366:	b29a      	uxth	r2, r3
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b370:	b29b      	uxth	r3, r3
 800b372:	2b00      	cmp	r3, #0
 800b374:	d1cf      	bne.n	800b316 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	9300      	str	r3, [sp, #0]
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	2200      	movs	r2, #0
 800b37e:	2140      	movs	r1, #64	; 0x40
 800b380:	68f8      	ldr	r0, [r7, #12]
 800b382:	f000 fb33 	bl	800b9ec <UART_WaitOnFlagUntilTimeout>
 800b386:	4603      	mov	r3, r0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d001      	beq.n	800b390 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b38c:	2303      	movs	r3, #3
 800b38e:	e006      	b.n	800b39e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2220      	movs	r2, #32
 800b394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b398:	2300      	movs	r3, #0
 800b39a:	e000      	b.n	800b39e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b39c:	2302      	movs	r3, #2
  }
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3720      	adds	r7, #32
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}

0800b3a6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b3a6:	b480      	push	{r7}
 800b3a8:	b085      	sub	sp, #20
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	60f8      	str	r0, [r7, #12]
 800b3ae:	60b9      	str	r1, [r7, #8]
 800b3b0:	4613      	mov	r3, r2
 800b3b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3ba:	b2db      	uxtb	r3, r3
 800b3bc:	2b20      	cmp	r3, #32
 800b3be:	d130      	bne.n	800b422 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d002      	beq.n	800b3cc <HAL_UART_Transmit_IT+0x26>
 800b3c6:	88fb      	ldrh	r3, [r7, #6]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d101      	bne.n	800b3d0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	e029      	b.n	800b424 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	d101      	bne.n	800b3de <HAL_UART_Transmit_IT+0x38>
 800b3da:	2302      	movs	r3, #2
 800b3dc:	e022      	b.n	800b424 <HAL_UART_Transmit_IT+0x7e>
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	68ba      	ldr	r2, [r7, #8]
 800b3ea:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	88fa      	ldrh	r2, [r7, #6]
 800b3f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	88fa      	ldrh	r2, [r7, #6]
 800b3f6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2221      	movs	r2, #33	; 0x21
 800b402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2200      	movs	r2, #0
 800b40a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	68da      	ldr	r2, [r3, #12]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b41c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b41e:	2300      	movs	r3, #0
 800b420:	e000      	b.n	800b424 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800b422:	2302      	movs	r3, #2
  }
}
 800b424:	4618      	mov	r0, r3
 800b426:	3714      	adds	r7, #20
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr

0800b430 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	4613      	mov	r3, r2
 800b43c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b444:	b2db      	uxtb	r3, r3
 800b446:	2b20      	cmp	r3, #32
 800b448:	d11d      	bne.n	800b486 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d002      	beq.n	800b456 <HAL_UART_Receive_IT+0x26>
 800b450:	88fb      	ldrh	r3, [r7, #6]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d101      	bne.n	800b45a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b456:	2301      	movs	r3, #1
 800b458:	e016      	b.n	800b488 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b460:	2b01      	cmp	r3, #1
 800b462:	d101      	bne.n	800b468 <HAL_UART_Receive_IT+0x38>
 800b464:	2302      	movs	r3, #2
 800b466:	e00f      	b.n	800b488 <HAL_UART_Receive_IT+0x58>
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2201      	movs	r2, #1
 800b46c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2200      	movs	r2, #0
 800b474:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b476:	88fb      	ldrh	r3, [r7, #6]
 800b478:	461a      	mov	r2, r3
 800b47a:	68b9      	ldr	r1, [r7, #8]
 800b47c:	68f8      	ldr	r0, [r7, #12]
 800b47e:	f000 fb23 	bl	800bac8 <UART_Start_Receive_IT>
 800b482:	4603      	mov	r3, r0
 800b484:	e000      	b.n	800b488 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b486:	2302      	movs	r3, #2
  }
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3710      	adds	r7, #16
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b0ba      	sub	sp, #232	; 0xe8
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	68db      	ldr	r3, [r3, #12]
 800b4a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	695b      	ldr	r3, [r3, #20]
 800b4b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b4c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4c6:	f003 030f 	and.w	r3, r3, #15
 800b4ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b4ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d10f      	bne.n	800b4f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b4d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4da:	f003 0320 	and.w	r3, r3, #32
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d009      	beq.n	800b4f6 <HAL_UART_IRQHandler+0x66>
 800b4e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4e6:	f003 0320 	and.w	r3, r3, #32
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d003      	beq.n	800b4f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f000 fc07 	bl	800bd02 <UART_Receive_IT>
      return;
 800b4f4:	e256      	b.n	800b9a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b4f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	f000 80de 	beq.w	800b6bc <HAL_UART_IRQHandler+0x22c>
 800b500:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b504:	f003 0301 	and.w	r3, r3, #1
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d106      	bne.n	800b51a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b50c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b510:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b514:	2b00      	cmp	r3, #0
 800b516:	f000 80d1 	beq.w	800b6bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b51a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b51e:	f003 0301 	and.w	r3, r3, #1
 800b522:	2b00      	cmp	r3, #0
 800b524:	d00b      	beq.n	800b53e <HAL_UART_IRQHandler+0xae>
 800b526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b52a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d005      	beq.n	800b53e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b536:	f043 0201 	orr.w	r2, r3, #1
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b53e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b542:	f003 0304 	and.w	r3, r3, #4
 800b546:	2b00      	cmp	r3, #0
 800b548:	d00b      	beq.n	800b562 <HAL_UART_IRQHandler+0xd2>
 800b54a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b54e:	f003 0301 	and.w	r3, r3, #1
 800b552:	2b00      	cmp	r3, #0
 800b554:	d005      	beq.n	800b562 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b55a:	f043 0202 	orr.w	r2, r3, #2
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b566:	f003 0302 	and.w	r3, r3, #2
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d00b      	beq.n	800b586 <HAL_UART_IRQHandler+0xf6>
 800b56e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b572:	f003 0301 	and.w	r3, r3, #1
 800b576:	2b00      	cmp	r3, #0
 800b578:	d005      	beq.n	800b586 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b57e:	f043 0204 	orr.w	r2, r3, #4
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b58a:	f003 0308 	and.w	r3, r3, #8
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d011      	beq.n	800b5b6 <HAL_UART_IRQHandler+0x126>
 800b592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b596:	f003 0320 	and.w	r3, r3, #32
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d105      	bne.n	800b5aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b59e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5a2:	f003 0301 	and.w	r3, r3, #1
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d005      	beq.n	800b5b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ae:	f043 0208 	orr.w	r2, r3, #8
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	f000 81ed 	beq.w	800b99a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b5c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5c4:	f003 0320 	and.w	r3, r3, #32
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d008      	beq.n	800b5de <HAL_UART_IRQHandler+0x14e>
 800b5cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5d0:	f003 0320 	and.w	r3, r3, #32
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d002      	beq.n	800b5de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 fb92 	bl	800bd02 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	695b      	ldr	r3, [r3, #20]
 800b5e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5e8:	2b40      	cmp	r3, #64	; 0x40
 800b5ea:	bf0c      	ite	eq
 800b5ec:	2301      	moveq	r3, #1
 800b5ee:	2300      	movne	r3, #0
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5fa:	f003 0308 	and.w	r3, r3, #8
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d103      	bne.n	800b60a <HAL_UART_IRQHandler+0x17a>
 800b602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b606:	2b00      	cmp	r3, #0
 800b608:	d04f      	beq.n	800b6aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 fa9a 	bl	800bb44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	695b      	ldr	r3, [r3, #20]
 800b616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b61a:	2b40      	cmp	r3, #64	; 0x40
 800b61c:	d141      	bne.n	800b6a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	3314      	adds	r3, #20
 800b624:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b628:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b62c:	e853 3f00 	ldrex	r3, [r3]
 800b630:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b634:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b63c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	3314      	adds	r3, #20
 800b646:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b64a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b64e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b652:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b656:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b65a:	e841 2300 	strex	r3, r2, [r1]
 800b65e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b662:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b666:	2b00      	cmp	r3, #0
 800b668:	d1d9      	bne.n	800b61e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d013      	beq.n	800b69a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b676:	4a7d      	ldr	r2, [pc, #500]	; (800b86c <HAL_UART_IRQHandler+0x3dc>)
 800b678:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b67e:	4618      	mov	r0, r3
 800b680:	f7fc f906 	bl	8007890 <HAL_DMA_Abort_IT>
 800b684:	4603      	mov	r3, r0
 800b686:	2b00      	cmp	r3, #0
 800b688:	d016      	beq.n	800b6b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b68e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b690:	687a      	ldr	r2, [r7, #4]
 800b692:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b694:	4610      	mov	r0, r2
 800b696:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b698:	e00e      	b.n	800b6b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 f990 	bl	800b9c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6a0:	e00a      	b.n	800b6b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 f98c 	bl	800b9c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6a8:	e006      	b.n	800b6b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 f988 	bl	800b9c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b6b6:	e170      	b.n	800b99a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6b8:	bf00      	nop
    return;
 800b6ba:	e16e      	b.n	800b99a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	f040 814a 	bne.w	800b95a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b6c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6ca:	f003 0310 	and.w	r3, r3, #16
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	f000 8143 	beq.w	800b95a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b6d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6d8:	f003 0310 	and.w	r3, r3, #16
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	f000 813c 	beq.w	800b95a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	60bb      	str	r3, [r7, #8]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	60bb      	str	r3, [r7, #8]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	60bb      	str	r3, [r7, #8]
 800b6f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	695b      	ldr	r3, [r3, #20]
 800b6fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b702:	2b40      	cmp	r3, #64	; 0x40
 800b704:	f040 80b4 	bne.w	800b870 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b714:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b718:	2b00      	cmp	r3, #0
 800b71a:	f000 8140 	beq.w	800b99e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b722:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b726:	429a      	cmp	r2, r3
 800b728:	f080 8139 	bcs.w	800b99e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b732:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b738:	69db      	ldr	r3, [r3, #28]
 800b73a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b73e:	f000 8088 	beq.w	800b852 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	330c      	adds	r3, #12
 800b748:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b74c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b750:	e853 3f00 	ldrex	r3, [r3]
 800b754:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b758:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b75c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b760:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	330c      	adds	r3, #12
 800b76a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b76e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b772:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b776:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b77a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b77e:	e841 2300 	strex	r3, r2, [r1]
 800b782:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b786:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d1d9      	bne.n	800b742 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	3314      	adds	r3, #20
 800b794:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b798:	e853 3f00 	ldrex	r3, [r3]
 800b79c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b79e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b7a0:	f023 0301 	bic.w	r3, r3, #1
 800b7a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	3314      	adds	r3, #20
 800b7ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b7b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b7b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b7ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b7be:	e841 2300 	strex	r3, r2, [r1]
 800b7c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b7c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d1e1      	bne.n	800b78e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	3314      	adds	r3, #20
 800b7d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b7d4:	e853 3f00 	ldrex	r3, [r3]
 800b7d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b7da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	3314      	adds	r3, #20
 800b7ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b7ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b7f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b7f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b7f6:	e841 2300 	strex	r3, r2, [r1]
 800b7fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b7fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d1e3      	bne.n	800b7ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2220      	movs	r2, #32
 800b806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2200      	movs	r2, #0
 800b80e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	330c      	adds	r3, #12
 800b816:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b81a:	e853 3f00 	ldrex	r3, [r3]
 800b81e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b822:	f023 0310 	bic.w	r3, r3, #16
 800b826:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	330c      	adds	r3, #12
 800b830:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b834:	65ba      	str	r2, [r7, #88]	; 0x58
 800b836:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b838:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b83a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b83c:	e841 2300 	strex	r3, r2, [r1]
 800b840:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b844:	2b00      	cmp	r3, #0
 800b846:	d1e3      	bne.n	800b810 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b84c:	4618      	mov	r0, r3
 800b84e:	f7fb ffaf 	bl	80077b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	1ad3      	subs	r3, r2, r3
 800b85e:	b29b      	uxth	r3, r3
 800b860:	4619      	mov	r1, r3
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 f8b6 	bl	800b9d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b868:	e099      	b.n	800b99e <HAL_UART_IRQHandler+0x50e>
 800b86a:	bf00      	nop
 800b86c:	0800bc0b 	.word	0x0800bc0b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b878:	b29b      	uxth	r3, r3
 800b87a:	1ad3      	subs	r3, r2, r3
 800b87c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b884:	b29b      	uxth	r3, r3
 800b886:	2b00      	cmp	r3, #0
 800b888:	f000 808b 	beq.w	800b9a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b88c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b890:	2b00      	cmp	r3, #0
 800b892:	f000 8086 	beq.w	800b9a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	330c      	adds	r3, #12
 800b89c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a0:	e853 3f00 	ldrex	r3, [r3]
 800b8a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b8ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	330c      	adds	r3, #12
 800b8b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b8ba:	647a      	str	r2, [r7, #68]	; 0x44
 800b8bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b8c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b8c2:	e841 2300 	strex	r3, r2, [r1]
 800b8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b8c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d1e3      	bne.n	800b896 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	3314      	adds	r3, #20
 800b8d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d8:	e853 3f00 	ldrex	r3, [r3]
 800b8dc:	623b      	str	r3, [r7, #32]
   return(result);
 800b8de:	6a3b      	ldr	r3, [r7, #32]
 800b8e0:	f023 0301 	bic.w	r3, r3, #1
 800b8e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	3314      	adds	r3, #20
 800b8ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b8f2:	633a      	str	r2, [r7, #48]	; 0x30
 800b8f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b8f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8fa:	e841 2300 	strex	r3, r2, [r1]
 800b8fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b902:	2b00      	cmp	r3, #0
 800b904:	d1e3      	bne.n	800b8ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2220      	movs	r2, #32
 800b90a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2200      	movs	r2, #0
 800b912:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	330c      	adds	r3, #12
 800b91a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	e853 3f00 	ldrex	r3, [r3]
 800b922:	60fb      	str	r3, [r7, #12]
   return(result);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f023 0310 	bic.w	r3, r3, #16
 800b92a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	330c      	adds	r3, #12
 800b934:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b938:	61fa      	str	r2, [r7, #28]
 800b93a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b93c:	69b9      	ldr	r1, [r7, #24]
 800b93e:	69fa      	ldr	r2, [r7, #28]
 800b940:	e841 2300 	strex	r3, r2, [r1]
 800b944:	617b      	str	r3, [r7, #20]
   return(result);
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d1e3      	bne.n	800b914 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b94c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b950:	4619      	mov	r1, r3
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 f83e 	bl	800b9d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b958:	e023      	b.n	800b9a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b95a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b95e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b962:	2b00      	cmp	r3, #0
 800b964:	d009      	beq.n	800b97a <HAL_UART_IRQHandler+0x4ea>
 800b966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b96a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d003      	beq.n	800b97a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f000 f95d 	bl	800bc32 <UART_Transmit_IT>
    return;
 800b978:	e014      	b.n	800b9a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b97a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b97e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b982:	2b00      	cmp	r3, #0
 800b984:	d00e      	beq.n	800b9a4 <HAL_UART_IRQHandler+0x514>
 800b986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b98a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d008      	beq.n	800b9a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 f99d 	bl	800bcd2 <UART_EndTransmit_IT>
    return;
 800b998:	e004      	b.n	800b9a4 <HAL_UART_IRQHandler+0x514>
    return;
 800b99a:	bf00      	nop
 800b99c:	e002      	b.n	800b9a4 <HAL_UART_IRQHandler+0x514>
      return;
 800b99e:	bf00      	nop
 800b9a0:	e000      	b.n	800b9a4 <HAL_UART_IRQHandler+0x514>
      return;
 800b9a2:	bf00      	nop
  }
}
 800b9a4:	37e8      	adds	r7, #232	; 0xe8
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
 800b9aa:	bf00      	nop

0800b9ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b083      	sub	sp, #12
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b9b4:	bf00      	nop
 800b9b6:	370c      	adds	r7, #12
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b9c8:	bf00      	nop
 800b9ca:	370c      	adds	r7, #12
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b083      	sub	sp, #12
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	460b      	mov	r3, r1
 800b9de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b9e0:	bf00      	nop
 800b9e2:	370c      	adds	r7, #12
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr

0800b9ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b090      	sub	sp, #64	; 0x40
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	60b9      	str	r1, [r7, #8]
 800b9f6:	603b      	str	r3, [r7, #0]
 800b9f8:	4613      	mov	r3, r2
 800b9fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9fc:	e050      	b.n	800baa0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba04:	d04c      	beq.n	800baa0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ba06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d007      	beq.n	800ba1c <UART_WaitOnFlagUntilTimeout+0x30>
 800ba0c:	f7fb f8d2 	bl	8006bb4 <HAL_GetTick>
 800ba10:	4602      	mov	r2, r0
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	1ad3      	subs	r3, r2, r3
 800ba16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d241      	bcs.n	800baa0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	330c      	adds	r3, #12
 800ba22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba26:	e853 3f00 	ldrex	r3, [r3]
 800ba2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ba2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ba32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	330c      	adds	r3, #12
 800ba3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba3c:	637a      	str	r2, [r7, #52]	; 0x34
 800ba3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba44:	e841 2300 	strex	r3, r2, [r1]
 800ba48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ba4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d1e5      	bne.n	800ba1c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	3314      	adds	r3, #20
 800ba56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	e853 3f00 	ldrex	r3, [r3]
 800ba5e:	613b      	str	r3, [r7, #16]
   return(result);
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	f023 0301 	bic.w	r3, r3, #1
 800ba66:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	3314      	adds	r3, #20
 800ba6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba70:	623a      	str	r2, [r7, #32]
 800ba72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba74:	69f9      	ldr	r1, [r7, #28]
 800ba76:	6a3a      	ldr	r2, [r7, #32]
 800ba78:	e841 2300 	strex	r3, r2, [r1]
 800ba7c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d1e5      	bne.n	800ba50 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2220      	movs	r2, #32
 800ba88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2220      	movs	r2, #32
 800ba90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2200      	movs	r2, #0
 800ba98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ba9c:	2303      	movs	r3, #3
 800ba9e:	e00f      	b.n	800bac0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	681a      	ldr	r2, [r3, #0]
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	4013      	ands	r3, r2
 800baaa:	68ba      	ldr	r2, [r7, #8]
 800baac:	429a      	cmp	r2, r3
 800baae:	bf0c      	ite	eq
 800bab0:	2301      	moveq	r3, #1
 800bab2:	2300      	movne	r3, #0
 800bab4:	b2db      	uxtb	r3, r3
 800bab6:	461a      	mov	r2, r3
 800bab8:	79fb      	ldrb	r3, [r7, #7]
 800baba:	429a      	cmp	r2, r3
 800babc:	d09f      	beq.n	800b9fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800babe:	2300      	movs	r3, #0
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3740      	adds	r7, #64	; 0x40
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bac8:	b480      	push	{r7}
 800baca:	b085      	sub	sp, #20
 800bacc:	af00      	add	r7, sp, #0
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	60b9      	str	r1, [r7, #8]
 800bad2:	4613      	mov	r3, r2
 800bad4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	68ba      	ldr	r2, [r7, #8]
 800bada:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	88fa      	ldrh	r2, [r7, #6]
 800bae0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	88fa      	ldrh	r2, [r7, #6]
 800bae6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2200      	movs	r2, #0
 800baec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2222      	movs	r2, #34	; 0x22
 800baf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2200      	movs	r2, #0
 800bafa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	691b      	ldr	r3, [r3, #16]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d007      	beq.n	800bb16 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	68da      	ldr	r2, [r3, #12]
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb14:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	695a      	ldr	r2, [r3, #20]
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f042 0201 	orr.w	r2, r2, #1
 800bb24:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	68da      	ldr	r2, [r3, #12]
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f042 0220 	orr.w	r2, r2, #32
 800bb34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bb36:	2300      	movs	r3, #0
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3714      	adds	r7, #20
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr

0800bb44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b095      	sub	sp, #84	; 0x54
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	330c      	adds	r3, #12
 800bb52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb56:	e853 3f00 	ldrex	r3, [r3]
 800bb5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bb62:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	330c      	adds	r3, #12
 800bb6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb6c:	643a      	str	r2, [r7, #64]	; 0x40
 800bb6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bb72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb74:	e841 2300 	strex	r3, r2, [r1]
 800bb78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d1e5      	bne.n	800bb4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	3314      	adds	r3, #20
 800bb86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb88:	6a3b      	ldr	r3, [r7, #32]
 800bb8a:	e853 3f00 	ldrex	r3, [r3]
 800bb8e:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb90:	69fb      	ldr	r3, [r7, #28]
 800bb92:	f023 0301 	bic.w	r3, r3, #1
 800bb96:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	3314      	adds	r3, #20
 800bb9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bba0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bba2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bba4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bba8:	e841 2300 	strex	r3, r2, [r1]
 800bbac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d1e5      	bne.n	800bb80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbb8:	2b01      	cmp	r3, #1
 800bbba:	d119      	bne.n	800bbf0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	330c      	adds	r3, #12
 800bbc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	e853 3f00 	ldrex	r3, [r3]
 800bbca:	60bb      	str	r3, [r7, #8]
   return(result);
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	f023 0310 	bic.w	r3, r3, #16
 800bbd2:	647b      	str	r3, [r7, #68]	; 0x44
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	330c      	adds	r3, #12
 800bbda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbdc:	61ba      	str	r2, [r7, #24]
 800bbde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbe0:	6979      	ldr	r1, [r7, #20]
 800bbe2:	69ba      	ldr	r2, [r7, #24]
 800bbe4:	e841 2300 	strex	r3, r2, [r1]
 800bbe8:	613b      	str	r3, [r7, #16]
   return(result);
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d1e5      	bne.n	800bbbc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2220      	movs	r2, #32
 800bbf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bbfe:	bf00      	nop
 800bc00:	3754      	adds	r7, #84	; 0x54
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr

0800bc0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc0a:	b580      	push	{r7, lr}
 800bc0c:	b084      	sub	sp, #16
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2200      	movs	r2, #0
 800bc22:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc24:	68f8      	ldr	r0, [r7, #12]
 800bc26:	f7ff fecb 	bl	800b9c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc2a:	bf00      	nop
 800bc2c:	3710      	adds	r7, #16
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}

0800bc32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bc32:	b480      	push	{r7}
 800bc34:	b085      	sub	sp, #20
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	2b21      	cmp	r3, #33	; 0x21
 800bc44:	d13e      	bne.n	800bcc4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	689b      	ldr	r3, [r3, #8]
 800bc4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc4e:	d114      	bne.n	800bc7a <UART_Transmit_IT+0x48>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	691b      	ldr	r3, [r3, #16]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d110      	bne.n	800bc7a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6a1b      	ldr	r3, [r3, #32]
 800bc5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	881b      	ldrh	r3, [r3, #0]
 800bc62:	461a      	mov	r2, r3
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bc6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6a1b      	ldr	r3, [r3, #32]
 800bc72:	1c9a      	adds	r2, r3, #2
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	621a      	str	r2, [r3, #32]
 800bc78:	e008      	b.n	800bc8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6a1b      	ldr	r3, [r3, #32]
 800bc7e:	1c59      	adds	r1, r3, #1
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	6211      	str	r1, [r2, #32]
 800bc84:	781a      	ldrb	r2, [r3, #0]
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	3b01      	subs	r3, #1
 800bc94:	b29b      	uxth	r3, r3
 800bc96:	687a      	ldr	r2, [r7, #4]
 800bc98:	4619      	mov	r1, r3
 800bc9a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d10f      	bne.n	800bcc0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	68da      	ldr	r2, [r3, #12]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bcae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	68da      	ldr	r2, [r3, #12]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bcbe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	e000      	b.n	800bcc6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bcc4:	2302      	movs	r3, #2
  }
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3714      	adds	r7, #20
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr

0800bcd2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b082      	sub	sp, #8
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	68da      	ldr	r2, [r3, #12]
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bce8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2220      	movs	r2, #32
 800bcee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f7ff fe5a 	bl	800b9ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bcf8:	2300      	movs	r3, #0
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3708      	adds	r7, #8
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}

0800bd02 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bd02:	b580      	push	{r7, lr}
 800bd04:	b08c      	sub	sp, #48	; 0x30
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	2b22      	cmp	r3, #34	; 0x22
 800bd14:	f040 80ab 	bne.w	800be6e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	689b      	ldr	r3, [r3, #8]
 800bd1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd20:	d117      	bne.n	800bd52 <UART_Receive_IT+0x50>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	691b      	ldr	r3, [r3, #16]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d113      	bne.n	800bd52 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd32:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd40:	b29a      	uxth	r2, r3
 800bd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd44:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd4a:	1c9a      	adds	r2, r3, #2
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	629a      	str	r2, [r3, #40]	; 0x28
 800bd50:	e026      	b.n	800bda0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd56:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	689b      	ldr	r3, [r3, #8]
 800bd60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd64:	d007      	beq.n	800bd76 <UART_Receive_IT+0x74>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	689b      	ldr	r3, [r3, #8]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d10a      	bne.n	800bd84 <UART_Receive_IT+0x82>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	691b      	ldr	r3, [r3, #16]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d106      	bne.n	800bd84 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	b2da      	uxtb	r2, r3
 800bd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd80:	701a      	strb	r2, [r3, #0]
 800bd82:	e008      	b.n	800bd96 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	685b      	ldr	r3, [r3, #4]
 800bd8a:	b2db      	uxtb	r3, r3
 800bd8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd90:	b2da      	uxtb	r2, r3
 800bd92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd94:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd9a:	1c5a      	adds	r2, r3, #1
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bda4:	b29b      	uxth	r3, r3
 800bda6:	3b01      	subs	r3, #1
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	4619      	mov	r1, r3
 800bdae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d15a      	bne.n	800be6a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	68da      	ldr	r2, [r3, #12]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f022 0220 	bic.w	r2, r2, #32
 800bdc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	68da      	ldr	r2, [r3, #12]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bdd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	695a      	ldr	r2, [r3, #20]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f022 0201 	bic.w	r2, r2, #1
 800bde2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2220      	movs	r2, #32
 800bde8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d135      	bne.n	800be60 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	330c      	adds	r3, #12
 800be00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	e853 3f00 	ldrex	r3, [r3]
 800be08:	613b      	str	r3, [r7, #16]
   return(result);
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	f023 0310 	bic.w	r3, r3, #16
 800be10:	627b      	str	r3, [r7, #36]	; 0x24
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	330c      	adds	r3, #12
 800be18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be1a:	623a      	str	r2, [r7, #32]
 800be1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be1e:	69f9      	ldr	r1, [r7, #28]
 800be20:	6a3a      	ldr	r2, [r7, #32]
 800be22:	e841 2300 	strex	r3, r2, [r1]
 800be26:	61bb      	str	r3, [r7, #24]
   return(result);
 800be28:	69bb      	ldr	r3, [r7, #24]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d1e5      	bne.n	800bdfa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f003 0310 	and.w	r3, r3, #16
 800be38:	2b10      	cmp	r3, #16
 800be3a:	d10a      	bne.n	800be52 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800be3c:	2300      	movs	r3, #0
 800be3e:	60fb      	str	r3, [r7, #12]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	60fb      	str	r3, [r7, #12]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	685b      	ldr	r3, [r3, #4]
 800be4e:	60fb      	str	r3, [r7, #12]
 800be50:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800be56:	4619      	mov	r1, r3
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f7ff fdbb 	bl	800b9d4 <HAL_UARTEx_RxEventCallback>
 800be5e:	e002      	b.n	800be66 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f7f7 fc41 	bl	80036e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800be66:	2300      	movs	r3, #0
 800be68:	e002      	b.n	800be70 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800be6a:	2300      	movs	r3, #0
 800be6c:	e000      	b.n	800be70 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800be6e:	2302      	movs	r3, #2
  }
}
 800be70:	4618      	mov	r0, r3
 800be72:	3730      	adds	r7, #48	; 0x30
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}

0800be78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800be7c:	b0c0      	sub	sp, #256	; 0x100
 800be7e:	af00      	add	r7, sp, #0
 800be80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	691b      	ldr	r3, [r3, #16]
 800be8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800be90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be94:	68d9      	ldr	r1, [r3, #12]
 800be96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be9a:	681a      	ldr	r2, [r3, #0]
 800be9c:	ea40 0301 	orr.w	r3, r0, r1
 800bea0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bea6:	689a      	ldr	r2, [r3, #8]
 800bea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800beac:	691b      	ldr	r3, [r3, #16]
 800beae:	431a      	orrs	r2, r3
 800beb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800beb4:	695b      	ldr	r3, [r3, #20]
 800beb6:	431a      	orrs	r2, r3
 800beb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bebc:	69db      	ldr	r3, [r3, #28]
 800bebe:	4313      	orrs	r3, r2
 800bec0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	68db      	ldr	r3, [r3, #12]
 800becc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bed0:	f021 010c 	bic.w	r1, r1, #12
 800bed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bed8:	681a      	ldr	r2, [r3, #0]
 800beda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bede:	430b      	orrs	r3, r1
 800bee0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	695b      	ldr	r3, [r3, #20]
 800beea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800beee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bef2:	6999      	ldr	r1, [r3, #24]
 800bef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bef8:	681a      	ldr	r2, [r3, #0]
 800befa:	ea40 0301 	orr.w	r3, r0, r1
 800befe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bf00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf04:	681a      	ldr	r2, [r3, #0]
 800bf06:	4b8f      	ldr	r3, [pc, #572]	; (800c144 <UART_SetConfig+0x2cc>)
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d005      	beq.n	800bf18 <UART_SetConfig+0xa0>
 800bf0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf10:	681a      	ldr	r2, [r3, #0]
 800bf12:	4b8d      	ldr	r3, [pc, #564]	; (800c148 <UART_SetConfig+0x2d0>)
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d104      	bne.n	800bf22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bf18:	f7fe fbca 	bl	800a6b0 <HAL_RCC_GetPCLK2Freq>
 800bf1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bf20:	e003      	b.n	800bf2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bf22:	f7fe fbb1 	bl	800a688 <HAL_RCC_GetPCLK1Freq>
 800bf26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf2e:	69db      	ldr	r3, [r3, #28]
 800bf30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf34:	f040 810c 	bne.w	800c150 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bf38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bf42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bf46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bf4a:	4622      	mov	r2, r4
 800bf4c:	462b      	mov	r3, r5
 800bf4e:	1891      	adds	r1, r2, r2
 800bf50:	65b9      	str	r1, [r7, #88]	; 0x58
 800bf52:	415b      	adcs	r3, r3
 800bf54:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bf5a:	4621      	mov	r1, r4
 800bf5c:	eb12 0801 	adds.w	r8, r2, r1
 800bf60:	4629      	mov	r1, r5
 800bf62:	eb43 0901 	adc.w	r9, r3, r1
 800bf66:	f04f 0200 	mov.w	r2, #0
 800bf6a:	f04f 0300 	mov.w	r3, #0
 800bf6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bf72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bf76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bf7a:	4690      	mov	r8, r2
 800bf7c:	4699      	mov	r9, r3
 800bf7e:	4623      	mov	r3, r4
 800bf80:	eb18 0303 	adds.w	r3, r8, r3
 800bf84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bf88:	462b      	mov	r3, r5
 800bf8a:	eb49 0303 	adc.w	r3, r9, r3
 800bf8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bf92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf96:	685b      	ldr	r3, [r3, #4]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bf9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bfa2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	18db      	adds	r3, r3, r3
 800bfaa:	653b      	str	r3, [r7, #80]	; 0x50
 800bfac:	4613      	mov	r3, r2
 800bfae:	eb42 0303 	adc.w	r3, r2, r3
 800bfb2:	657b      	str	r3, [r7, #84]	; 0x54
 800bfb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bfb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bfbc:	f7f4 fdf4 	bl	8000ba8 <__aeabi_uldivmod>
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	460b      	mov	r3, r1
 800bfc4:	4b61      	ldr	r3, [pc, #388]	; (800c14c <UART_SetConfig+0x2d4>)
 800bfc6:	fba3 2302 	umull	r2, r3, r3, r2
 800bfca:	095b      	lsrs	r3, r3, #5
 800bfcc:	011c      	lsls	r4, r3, #4
 800bfce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bfd8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bfdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bfe0:	4642      	mov	r2, r8
 800bfe2:	464b      	mov	r3, r9
 800bfe4:	1891      	adds	r1, r2, r2
 800bfe6:	64b9      	str	r1, [r7, #72]	; 0x48
 800bfe8:	415b      	adcs	r3, r3
 800bfea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bfec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bff0:	4641      	mov	r1, r8
 800bff2:	eb12 0a01 	adds.w	sl, r2, r1
 800bff6:	4649      	mov	r1, r9
 800bff8:	eb43 0b01 	adc.w	fp, r3, r1
 800bffc:	f04f 0200 	mov.w	r2, #0
 800c000:	f04f 0300 	mov.w	r3, #0
 800c004:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c008:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c00c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c010:	4692      	mov	sl, r2
 800c012:	469b      	mov	fp, r3
 800c014:	4643      	mov	r3, r8
 800c016:	eb1a 0303 	adds.w	r3, sl, r3
 800c01a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c01e:	464b      	mov	r3, r9
 800c020:	eb4b 0303 	adc.w	r3, fp, r3
 800c024:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	2200      	movs	r2, #0
 800c030:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c034:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c038:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c03c:	460b      	mov	r3, r1
 800c03e:	18db      	adds	r3, r3, r3
 800c040:	643b      	str	r3, [r7, #64]	; 0x40
 800c042:	4613      	mov	r3, r2
 800c044:	eb42 0303 	adc.w	r3, r2, r3
 800c048:	647b      	str	r3, [r7, #68]	; 0x44
 800c04a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c04e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c052:	f7f4 fda9 	bl	8000ba8 <__aeabi_uldivmod>
 800c056:	4602      	mov	r2, r0
 800c058:	460b      	mov	r3, r1
 800c05a:	4611      	mov	r1, r2
 800c05c:	4b3b      	ldr	r3, [pc, #236]	; (800c14c <UART_SetConfig+0x2d4>)
 800c05e:	fba3 2301 	umull	r2, r3, r3, r1
 800c062:	095b      	lsrs	r3, r3, #5
 800c064:	2264      	movs	r2, #100	; 0x64
 800c066:	fb02 f303 	mul.w	r3, r2, r3
 800c06a:	1acb      	subs	r3, r1, r3
 800c06c:	00db      	lsls	r3, r3, #3
 800c06e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c072:	4b36      	ldr	r3, [pc, #216]	; (800c14c <UART_SetConfig+0x2d4>)
 800c074:	fba3 2302 	umull	r2, r3, r3, r2
 800c078:	095b      	lsrs	r3, r3, #5
 800c07a:	005b      	lsls	r3, r3, #1
 800c07c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c080:	441c      	add	r4, r3
 800c082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c086:	2200      	movs	r2, #0
 800c088:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c08c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c090:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c094:	4642      	mov	r2, r8
 800c096:	464b      	mov	r3, r9
 800c098:	1891      	adds	r1, r2, r2
 800c09a:	63b9      	str	r1, [r7, #56]	; 0x38
 800c09c:	415b      	adcs	r3, r3
 800c09e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c0a4:	4641      	mov	r1, r8
 800c0a6:	1851      	adds	r1, r2, r1
 800c0a8:	6339      	str	r1, [r7, #48]	; 0x30
 800c0aa:	4649      	mov	r1, r9
 800c0ac:	414b      	adcs	r3, r1
 800c0ae:	637b      	str	r3, [r7, #52]	; 0x34
 800c0b0:	f04f 0200 	mov.w	r2, #0
 800c0b4:	f04f 0300 	mov.w	r3, #0
 800c0b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c0bc:	4659      	mov	r1, fp
 800c0be:	00cb      	lsls	r3, r1, #3
 800c0c0:	4651      	mov	r1, sl
 800c0c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c0c6:	4651      	mov	r1, sl
 800c0c8:	00ca      	lsls	r2, r1, #3
 800c0ca:	4610      	mov	r0, r2
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	4642      	mov	r2, r8
 800c0d2:	189b      	adds	r3, r3, r2
 800c0d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c0d8:	464b      	mov	r3, r9
 800c0da:	460a      	mov	r2, r1
 800c0dc:	eb42 0303 	adc.w	r3, r2, r3
 800c0e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c0e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c0f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c0f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	18db      	adds	r3, r3, r3
 800c0fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800c0fe:	4613      	mov	r3, r2
 800c100:	eb42 0303 	adc.w	r3, r2, r3
 800c104:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c106:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c10a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c10e:	f7f4 fd4b 	bl	8000ba8 <__aeabi_uldivmod>
 800c112:	4602      	mov	r2, r0
 800c114:	460b      	mov	r3, r1
 800c116:	4b0d      	ldr	r3, [pc, #52]	; (800c14c <UART_SetConfig+0x2d4>)
 800c118:	fba3 1302 	umull	r1, r3, r3, r2
 800c11c:	095b      	lsrs	r3, r3, #5
 800c11e:	2164      	movs	r1, #100	; 0x64
 800c120:	fb01 f303 	mul.w	r3, r1, r3
 800c124:	1ad3      	subs	r3, r2, r3
 800c126:	00db      	lsls	r3, r3, #3
 800c128:	3332      	adds	r3, #50	; 0x32
 800c12a:	4a08      	ldr	r2, [pc, #32]	; (800c14c <UART_SetConfig+0x2d4>)
 800c12c:	fba2 2303 	umull	r2, r3, r2, r3
 800c130:	095b      	lsrs	r3, r3, #5
 800c132:	f003 0207 	and.w	r2, r3, #7
 800c136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4422      	add	r2, r4
 800c13e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c140:	e105      	b.n	800c34e <UART_SetConfig+0x4d6>
 800c142:	bf00      	nop
 800c144:	40011000 	.word	0x40011000
 800c148:	40011400 	.word	0x40011400
 800c14c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c154:	2200      	movs	r2, #0
 800c156:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c15a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c15e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c162:	4642      	mov	r2, r8
 800c164:	464b      	mov	r3, r9
 800c166:	1891      	adds	r1, r2, r2
 800c168:	6239      	str	r1, [r7, #32]
 800c16a:	415b      	adcs	r3, r3
 800c16c:	627b      	str	r3, [r7, #36]	; 0x24
 800c16e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c172:	4641      	mov	r1, r8
 800c174:	1854      	adds	r4, r2, r1
 800c176:	4649      	mov	r1, r9
 800c178:	eb43 0501 	adc.w	r5, r3, r1
 800c17c:	f04f 0200 	mov.w	r2, #0
 800c180:	f04f 0300 	mov.w	r3, #0
 800c184:	00eb      	lsls	r3, r5, #3
 800c186:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c18a:	00e2      	lsls	r2, r4, #3
 800c18c:	4614      	mov	r4, r2
 800c18e:	461d      	mov	r5, r3
 800c190:	4643      	mov	r3, r8
 800c192:	18e3      	adds	r3, r4, r3
 800c194:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c198:	464b      	mov	r3, r9
 800c19a:	eb45 0303 	adc.w	r3, r5, r3
 800c19e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c1a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c1ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c1b2:	f04f 0200 	mov.w	r2, #0
 800c1b6:	f04f 0300 	mov.w	r3, #0
 800c1ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c1be:	4629      	mov	r1, r5
 800c1c0:	008b      	lsls	r3, r1, #2
 800c1c2:	4621      	mov	r1, r4
 800c1c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c1c8:	4621      	mov	r1, r4
 800c1ca:	008a      	lsls	r2, r1, #2
 800c1cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c1d0:	f7f4 fcea 	bl	8000ba8 <__aeabi_uldivmod>
 800c1d4:	4602      	mov	r2, r0
 800c1d6:	460b      	mov	r3, r1
 800c1d8:	4b60      	ldr	r3, [pc, #384]	; (800c35c <UART_SetConfig+0x4e4>)
 800c1da:	fba3 2302 	umull	r2, r3, r3, r2
 800c1de:	095b      	lsrs	r3, r3, #5
 800c1e0:	011c      	lsls	r4, r3, #4
 800c1e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c1ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c1f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c1f4:	4642      	mov	r2, r8
 800c1f6:	464b      	mov	r3, r9
 800c1f8:	1891      	adds	r1, r2, r2
 800c1fa:	61b9      	str	r1, [r7, #24]
 800c1fc:	415b      	adcs	r3, r3
 800c1fe:	61fb      	str	r3, [r7, #28]
 800c200:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c204:	4641      	mov	r1, r8
 800c206:	1851      	adds	r1, r2, r1
 800c208:	6139      	str	r1, [r7, #16]
 800c20a:	4649      	mov	r1, r9
 800c20c:	414b      	adcs	r3, r1
 800c20e:	617b      	str	r3, [r7, #20]
 800c210:	f04f 0200 	mov.w	r2, #0
 800c214:	f04f 0300 	mov.w	r3, #0
 800c218:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c21c:	4659      	mov	r1, fp
 800c21e:	00cb      	lsls	r3, r1, #3
 800c220:	4651      	mov	r1, sl
 800c222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c226:	4651      	mov	r1, sl
 800c228:	00ca      	lsls	r2, r1, #3
 800c22a:	4610      	mov	r0, r2
 800c22c:	4619      	mov	r1, r3
 800c22e:	4603      	mov	r3, r0
 800c230:	4642      	mov	r2, r8
 800c232:	189b      	adds	r3, r3, r2
 800c234:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c238:	464b      	mov	r3, r9
 800c23a:	460a      	mov	r2, r1
 800c23c:	eb42 0303 	adc.w	r3, r2, r3
 800c240:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c248:	685b      	ldr	r3, [r3, #4]
 800c24a:	2200      	movs	r2, #0
 800c24c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c24e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c250:	f04f 0200 	mov.w	r2, #0
 800c254:	f04f 0300 	mov.w	r3, #0
 800c258:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c25c:	4649      	mov	r1, r9
 800c25e:	008b      	lsls	r3, r1, #2
 800c260:	4641      	mov	r1, r8
 800c262:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c266:	4641      	mov	r1, r8
 800c268:	008a      	lsls	r2, r1, #2
 800c26a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c26e:	f7f4 fc9b 	bl	8000ba8 <__aeabi_uldivmod>
 800c272:	4602      	mov	r2, r0
 800c274:	460b      	mov	r3, r1
 800c276:	4b39      	ldr	r3, [pc, #228]	; (800c35c <UART_SetConfig+0x4e4>)
 800c278:	fba3 1302 	umull	r1, r3, r3, r2
 800c27c:	095b      	lsrs	r3, r3, #5
 800c27e:	2164      	movs	r1, #100	; 0x64
 800c280:	fb01 f303 	mul.w	r3, r1, r3
 800c284:	1ad3      	subs	r3, r2, r3
 800c286:	011b      	lsls	r3, r3, #4
 800c288:	3332      	adds	r3, #50	; 0x32
 800c28a:	4a34      	ldr	r2, [pc, #208]	; (800c35c <UART_SetConfig+0x4e4>)
 800c28c:	fba2 2303 	umull	r2, r3, r2, r3
 800c290:	095b      	lsrs	r3, r3, #5
 800c292:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c296:	441c      	add	r4, r3
 800c298:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c29c:	2200      	movs	r2, #0
 800c29e:	673b      	str	r3, [r7, #112]	; 0x70
 800c2a0:	677a      	str	r2, [r7, #116]	; 0x74
 800c2a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c2a6:	4642      	mov	r2, r8
 800c2a8:	464b      	mov	r3, r9
 800c2aa:	1891      	adds	r1, r2, r2
 800c2ac:	60b9      	str	r1, [r7, #8]
 800c2ae:	415b      	adcs	r3, r3
 800c2b0:	60fb      	str	r3, [r7, #12]
 800c2b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c2b6:	4641      	mov	r1, r8
 800c2b8:	1851      	adds	r1, r2, r1
 800c2ba:	6039      	str	r1, [r7, #0]
 800c2bc:	4649      	mov	r1, r9
 800c2be:	414b      	adcs	r3, r1
 800c2c0:	607b      	str	r3, [r7, #4]
 800c2c2:	f04f 0200 	mov.w	r2, #0
 800c2c6:	f04f 0300 	mov.w	r3, #0
 800c2ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c2ce:	4659      	mov	r1, fp
 800c2d0:	00cb      	lsls	r3, r1, #3
 800c2d2:	4651      	mov	r1, sl
 800c2d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c2d8:	4651      	mov	r1, sl
 800c2da:	00ca      	lsls	r2, r1, #3
 800c2dc:	4610      	mov	r0, r2
 800c2de:	4619      	mov	r1, r3
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	4642      	mov	r2, r8
 800c2e4:	189b      	adds	r3, r3, r2
 800c2e6:	66bb      	str	r3, [r7, #104]	; 0x68
 800c2e8:	464b      	mov	r3, r9
 800c2ea:	460a      	mov	r2, r1
 800c2ec:	eb42 0303 	adc.w	r3, r2, r3
 800c2f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c2f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	663b      	str	r3, [r7, #96]	; 0x60
 800c2fc:	667a      	str	r2, [r7, #100]	; 0x64
 800c2fe:	f04f 0200 	mov.w	r2, #0
 800c302:	f04f 0300 	mov.w	r3, #0
 800c306:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c30a:	4649      	mov	r1, r9
 800c30c:	008b      	lsls	r3, r1, #2
 800c30e:	4641      	mov	r1, r8
 800c310:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c314:	4641      	mov	r1, r8
 800c316:	008a      	lsls	r2, r1, #2
 800c318:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c31c:	f7f4 fc44 	bl	8000ba8 <__aeabi_uldivmod>
 800c320:	4602      	mov	r2, r0
 800c322:	460b      	mov	r3, r1
 800c324:	4b0d      	ldr	r3, [pc, #52]	; (800c35c <UART_SetConfig+0x4e4>)
 800c326:	fba3 1302 	umull	r1, r3, r3, r2
 800c32a:	095b      	lsrs	r3, r3, #5
 800c32c:	2164      	movs	r1, #100	; 0x64
 800c32e:	fb01 f303 	mul.w	r3, r1, r3
 800c332:	1ad3      	subs	r3, r2, r3
 800c334:	011b      	lsls	r3, r3, #4
 800c336:	3332      	adds	r3, #50	; 0x32
 800c338:	4a08      	ldr	r2, [pc, #32]	; (800c35c <UART_SetConfig+0x4e4>)
 800c33a:	fba2 2303 	umull	r2, r3, r2, r3
 800c33e:	095b      	lsrs	r3, r3, #5
 800c340:	f003 020f 	and.w	r2, r3, #15
 800c344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	4422      	add	r2, r4
 800c34c:	609a      	str	r2, [r3, #8]
}
 800c34e:	bf00      	nop
 800c350:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c354:	46bd      	mov	sp, r7
 800c356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c35a:	bf00      	nop
 800c35c:	51eb851f 	.word	0x51eb851f

0800c360 <__NVIC_SetPriority>:
{
 800c360:	b480      	push	{r7}
 800c362:	b083      	sub	sp, #12
 800c364:	af00      	add	r7, sp, #0
 800c366:	4603      	mov	r3, r0
 800c368:	6039      	str	r1, [r7, #0]
 800c36a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c36c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c370:	2b00      	cmp	r3, #0
 800c372:	db0a      	blt.n	800c38a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	b2da      	uxtb	r2, r3
 800c378:	490c      	ldr	r1, [pc, #48]	; (800c3ac <__NVIC_SetPriority+0x4c>)
 800c37a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c37e:	0112      	lsls	r2, r2, #4
 800c380:	b2d2      	uxtb	r2, r2
 800c382:	440b      	add	r3, r1
 800c384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c388:	e00a      	b.n	800c3a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	b2da      	uxtb	r2, r3
 800c38e:	4908      	ldr	r1, [pc, #32]	; (800c3b0 <__NVIC_SetPriority+0x50>)
 800c390:	79fb      	ldrb	r3, [r7, #7]
 800c392:	f003 030f 	and.w	r3, r3, #15
 800c396:	3b04      	subs	r3, #4
 800c398:	0112      	lsls	r2, r2, #4
 800c39a:	b2d2      	uxtb	r2, r2
 800c39c:	440b      	add	r3, r1
 800c39e:	761a      	strb	r2, [r3, #24]
}
 800c3a0:	bf00      	nop
 800c3a2:	370c      	adds	r7, #12
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3aa:	4770      	bx	lr
 800c3ac:	e000e100 	.word	0xe000e100
 800c3b0:	e000ed00 	.word	0xe000ed00

0800c3b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c3b8:	4b05      	ldr	r3, [pc, #20]	; (800c3d0 <SysTick_Handler+0x1c>)
 800c3ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c3bc:	f001 fd28 	bl	800de10 <xTaskGetSchedulerState>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	2b01      	cmp	r3, #1
 800c3c4:	d001      	beq.n	800c3ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c3c6:	f002 fb0f 	bl	800e9e8 <xPortSysTickHandler>
  }
}
 800c3ca:	bf00      	nop
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	bf00      	nop
 800c3d0:	e000e010 	.word	0xe000e010

0800c3d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c3d8:	2100      	movs	r1, #0
 800c3da:	f06f 0004 	mvn.w	r0, #4
 800c3de:	f7ff ffbf 	bl	800c360 <__NVIC_SetPriority>
#endif
}
 800c3e2:	bf00      	nop
 800c3e4:	bd80      	pop	{r7, pc}
	...

0800c3e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c3e8:	b480      	push	{r7}
 800c3ea:	b083      	sub	sp, #12
 800c3ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3ee:	f3ef 8305 	mrs	r3, IPSR
 800c3f2:	603b      	str	r3, [r7, #0]
  return(result);
 800c3f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d003      	beq.n	800c402 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c3fa:	f06f 0305 	mvn.w	r3, #5
 800c3fe:	607b      	str	r3, [r7, #4]
 800c400:	e00c      	b.n	800c41c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c402:	4b0a      	ldr	r3, [pc, #40]	; (800c42c <osKernelInitialize+0x44>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d105      	bne.n	800c416 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c40a:	4b08      	ldr	r3, [pc, #32]	; (800c42c <osKernelInitialize+0x44>)
 800c40c:	2201      	movs	r2, #1
 800c40e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c410:	2300      	movs	r3, #0
 800c412:	607b      	str	r3, [r7, #4]
 800c414:	e002      	b.n	800c41c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c416:	f04f 33ff 	mov.w	r3, #4294967295
 800c41a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c41c:	687b      	ldr	r3, [r7, #4]
}
 800c41e:	4618      	mov	r0, r3
 800c420:	370c      	adds	r7, #12
 800c422:	46bd      	mov	sp, r7
 800c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop
 800c42c:	20000d14 	.word	0x20000d14

0800c430 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c430:	b580      	push	{r7, lr}
 800c432:	b082      	sub	sp, #8
 800c434:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c436:	f3ef 8305 	mrs	r3, IPSR
 800c43a:	603b      	str	r3, [r7, #0]
  return(result);
 800c43c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d003      	beq.n	800c44a <osKernelStart+0x1a>
    stat = osErrorISR;
 800c442:	f06f 0305 	mvn.w	r3, #5
 800c446:	607b      	str	r3, [r7, #4]
 800c448:	e010      	b.n	800c46c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c44a:	4b0b      	ldr	r3, [pc, #44]	; (800c478 <osKernelStart+0x48>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d109      	bne.n	800c466 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c452:	f7ff ffbf 	bl	800c3d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c456:	4b08      	ldr	r3, [pc, #32]	; (800c478 <osKernelStart+0x48>)
 800c458:	2202      	movs	r2, #2
 800c45a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c45c:	f001 f87c 	bl	800d558 <vTaskStartScheduler>
      stat = osOK;
 800c460:	2300      	movs	r3, #0
 800c462:	607b      	str	r3, [r7, #4]
 800c464:	e002      	b.n	800c46c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c466:	f04f 33ff 	mov.w	r3, #4294967295
 800c46a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c46c:	687b      	ldr	r3, [r7, #4]
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3708      	adds	r7, #8
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
 800c476:	bf00      	nop
 800c478:	20000d14 	.word	0x20000d14

0800c47c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b08e      	sub	sp, #56	; 0x38
 800c480:	af04      	add	r7, sp, #16
 800c482:	60f8      	str	r0, [r7, #12]
 800c484:	60b9      	str	r1, [r7, #8]
 800c486:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c488:	2300      	movs	r3, #0
 800c48a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c48c:	f3ef 8305 	mrs	r3, IPSR
 800c490:	617b      	str	r3, [r7, #20]
  return(result);
 800c492:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c494:	2b00      	cmp	r3, #0
 800c496:	d17e      	bne.n	800c596 <osThreadNew+0x11a>
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d07b      	beq.n	800c596 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c49e:	2380      	movs	r3, #128	; 0x80
 800c4a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c4a2:	2318      	movs	r3, #24
 800c4a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c4aa:	f04f 33ff 	mov.w	r3, #4294967295
 800c4ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d045      	beq.n	800c542 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d002      	beq.n	800c4c4 <osThreadNew+0x48>
        name = attr->name;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	699b      	ldr	r3, [r3, #24]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d002      	beq.n	800c4d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	699b      	ldr	r3, [r3, #24]
 800c4d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c4d2:	69fb      	ldr	r3, [r7, #28]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d008      	beq.n	800c4ea <osThreadNew+0x6e>
 800c4d8:	69fb      	ldr	r3, [r7, #28]
 800c4da:	2b38      	cmp	r3, #56	; 0x38
 800c4dc:	d805      	bhi.n	800c4ea <osThreadNew+0x6e>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	f003 0301 	and.w	r3, r3, #1
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d001      	beq.n	800c4ee <osThreadNew+0x72>
        return (NULL);
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	e054      	b.n	800c598 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	695b      	ldr	r3, [r3, #20]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d003      	beq.n	800c4fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	695b      	ldr	r3, [r3, #20]
 800c4fa:	089b      	lsrs	r3, r3, #2
 800c4fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	689b      	ldr	r3, [r3, #8]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d00e      	beq.n	800c524 <osThreadNew+0xa8>
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	68db      	ldr	r3, [r3, #12]
 800c50a:	2bbb      	cmp	r3, #187	; 0xbb
 800c50c:	d90a      	bls.n	800c524 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c512:	2b00      	cmp	r3, #0
 800c514:	d006      	beq.n	800c524 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	695b      	ldr	r3, [r3, #20]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d002      	beq.n	800c524 <osThreadNew+0xa8>
        mem = 1;
 800c51e:	2301      	movs	r3, #1
 800c520:	61bb      	str	r3, [r7, #24]
 800c522:	e010      	b.n	800c546 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	689b      	ldr	r3, [r3, #8]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d10c      	bne.n	800c546 <osThreadNew+0xca>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	68db      	ldr	r3, [r3, #12]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d108      	bne.n	800c546 <osThreadNew+0xca>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	691b      	ldr	r3, [r3, #16]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d104      	bne.n	800c546 <osThreadNew+0xca>
          mem = 0;
 800c53c:	2300      	movs	r3, #0
 800c53e:	61bb      	str	r3, [r7, #24]
 800c540:	e001      	b.n	800c546 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c542:	2300      	movs	r3, #0
 800c544:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c546:	69bb      	ldr	r3, [r7, #24]
 800c548:	2b01      	cmp	r3, #1
 800c54a:	d110      	bne.n	800c56e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c554:	9202      	str	r2, [sp, #8]
 800c556:	9301      	str	r3, [sp, #4]
 800c558:	69fb      	ldr	r3, [r7, #28]
 800c55a:	9300      	str	r3, [sp, #0]
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	6a3a      	ldr	r2, [r7, #32]
 800c560:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c562:	68f8      	ldr	r0, [r7, #12]
 800c564:	f000 fe0c 	bl	800d180 <xTaskCreateStatic>
 800c568:	4603      	mov	r3, r0
 800c56a:	613b      	str	r3, [r7, #16]
 800c56c:	e013      	b.n	800c596 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c56e:	69bb      	ldr	r3, [r7, #24]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d110      	bne.n	800c596 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c574:	6a3b      	ldr	r3, [r7, #32]
 800c576:	b29a      	uxth	r2, r3
 800c578:	f107 0310 	add.w	r3, r7, #16
 800c57c:	9301      	str	r3, [sp, #4]
 800c57e:	69fb      	ldr	r3, [r7, #28]
 800c580:	9300      	str	r3, [sp, #0]
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f000 fe57 	bl	800d23a <xTaskCreate>
 800c58c:	4603      	mov	r3, r0
 800c58e:	2b01      	cmp	r3, #1
 800c590:	d001      	beq.n	800c596 <osThreadNew+0x11a>
            hTask = NULL;
 800c592:	2300      	movs	r3, #0
 800c594:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c596:	693b      	ldr	r3, [r7, #16]
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3728      	adds	r7, #40	; 0x28
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b084      	sub	sp, #16
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5a8:	f3ef 8305 	mrs	r3, IPSR
 800c5ac:	60bb      	str	r3, [r7, #8]
  return(result);
 800c5ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d003      	beq.n	800c5bc <osDelay+0x1c>
    stat = osErrorISR;
 800c5b4:	f06f 0305 	mvn.w	r3, #5
 800c5b8:	60fb      	str	r3, [r7, #12]
 800c5ba:	e007      	b.n	800c5cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d002      	beq.n	800c5cc <osDelay+0x2c>
      vTaskDelay(ticks);
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f000 ff92 	bl	800d4f0 <vTaskDelay>
    }
  }

  return (stat);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3710      	adds	r7, #16
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
	...

0800c5d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c5d8:	b480      	push	{r7}
 800c5da:	b085      	sub	sp, #20
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	60f8      	str	r0, [r7, #12]
 800c5e0:	60b9      	str	r1, [r7, #8]
 800c5e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	4a07      	ldr	r2, [pc, #28]	; (800c604 <vApplicationGetIdleTaskMemory+0x2c>)
 800c5e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	4a06      	ldr	r2, [pc, #24]	; (800c608 <vApplicationGetIdleTaskMemory+0x30>)
 800c5ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2280      	movs	r2, #128	; 0x80
 800c5f4:	601a      	str	r2, [r3, #0]
}
 800c5f6:	bf00      	nop
 800c5f8:	3714      	adds	r7, #20
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c600:	4770      	bx	lr
 800c602:	bf00      	nop
 800c604:	20000d18 	.word	0x20000d18
 800c608:	20000dd4 	.word	0x20000dd4

0800c60c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c60c:	b480      	push	{r7}
 800c60e:	b085      	sub	sp, #20
 800c610:	af00      	add	r7, sp, #0
 800c612:	60f8      	str	r0, [r7, #12]
 800c614:	60b9      	str	r1, [r7, #8]
 800c616:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	4a07      	ldr	r2, [pc, #28]	; (800c638 <vApplicationGetTimerTaskMemory+0x2c>)
 800c61c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	4a06      	ldr	r2, [pc, #24]	; (800c63c <vApplicationGetTimerTaskMemory+0x30>)
 800c622:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c62a:	601a      	str	r2, [r3, #0]
}
 800c62c:	bf00      	nop
 800c62e:	3714      	adds	r7, #20
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr
 800c638:	20000fd4 	.word	0x20000fd4
 800c63c:	20001090 	.word	0x20001090

0800c640 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c640:	b480      	push	{r7}
 800c642:	b083      	sub	sp, #12
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f103 0208 	add.w	r2, r3, #8
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f04f 32ff 	mov.w	r2, #4294967295
 800c658:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f103 0208 	add.w	r2, r3, #8
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f103 0208 	add.w	r2, r3, #8
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2200      	movs	r2, #0
 800c672:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c674:	bf00      	nop
 800c676:	370c      	adds	r7, #12
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c680:	b480      	push	{r7}
 800c682:	b083      	sub	sp, #12
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2200      	movs	r2, #0
 800c68c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c68e:	bf00      	nop
 800c690:	370c      	adds	r7, #12
 800c692:	46bd      	mov	sp, r7
 800c694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c698:	4770      	bx	lr

0800c69a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c69a:	b480      	push	{r7}
 800c69c:	b085      	sub	sp, #20
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
 800c6a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	685b      	ldr	r3, [r3, #4]
 800c6a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	68fa      	ldr	r2, [r7, #12]
 800c6ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	689a      	ldr	r2, [r3, #8]
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	689b      	ldr	r3, [r3, #8]
 800c6bc:	683a      	ldr	r2, [r7, #0]
 800c6be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	683a      	ldr	r2, [r7, #0]
 800c6c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	687a      	ldr	r2, [r7, #4]
 800c6ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	1c5a      	adds	r2, r3, #1
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	601a      	str	r2, [r3, #0]
}
 800c6d6:	bf00      	nop
 800c6d8:	3714      	adds	r7, #20
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e0:	4770      	bx	lr

0800c6e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c6e2:	b480      	push	{r7}
 800c6e4:	b085      	sub	sp, #20
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	6078      	str	r0, [r7, #4]
 800c6ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6f8:	d103      	bne.n	800c702 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	691b      	ldr	r3, [r3, #16]
 800c6fe:	60fb      	str	r3, [r7, #12]
 800c700:	e00c      	b.n	800c71c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	3308      	adds	r3, #8
 800c706:	60fb      	str	r3, [r7, #12]
 800c708:	e002      	b.n	800c710 <vListInsert+0x2e>
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	60fb      	str	r3, [r7, #12]
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	68ba      	ldr	r2, [r7, #8]
 800c718:	429a      	cmp	r2, r3
 800c71a:	d2f6      	bcs.n	800c70a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	685a      	ldr	r2, [r3, #4]
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	683a      	ldr	r2, [r7, #0]
 800c72a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	68fa      	ldr	r2, [r7, #12]
 800c730:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	683a      	ldr	r2, [r7, #0]
 800c736:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	1c5a      	adds	r2, r3, #1
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	601a      	str	r2, [r3, #0]
}
 800c748:	bf00      	nop
 800c74a:	3714      	adds	r7, #20
 800c74c:	46bd      	mov	sp, r7
 800c74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c752:	4770      	bx	lr

0800c754 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c754:	b480      	push	{r7}
 800c756:	b085      	sub	sp, #20
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	691b      	ldr	r3, [r3, #16]
 800c760:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	6892      	ldr	r2, [r2, #8]
 800c76a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	689b      	ldr	r3, [r3, #8]
 800c770:	687a      	ldr	r2, [r7, #4]
 800c772:	6852      	ldr	r2, [r2, #4]
 800c774:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	687a      	ldr	r2, [r7, #4]
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d103      	bne.n	800c788 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	689a      	ldr	r2, [r3, #8]
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2200      	movs	r2, #0
 800c78c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	1e5a      	subs	r2, r3, #1
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3714      	adds	r7, #20
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr

0800c7a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b084      	sub	sp, #16
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
 800c7b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d10a      	bne.n	800c7d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c0:	f383 8811 	msr	BASEPRI, r3
 800c7c4:	f3bf 8f6f 	isb	sy
 800c7c8:	f3bf 8f4f 	dsb	sy
 800c7cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c7ce:	bf00      	nop
 800c7d0:	e7fe      	b.n	800c7d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c7d2:	f002 f877 	bl	800e8c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	681a      	ldr	r2, [r3, #0]
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7de:	68f9      	ldr	r1, [r7, #12]
 800c7e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c7e2:	fb01 f303 	mul.w	r3, r1, r3
 800c7e6:	441a      	add	r2, r3
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681a      	ldr	r2, [r3, #0]
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681a      	ldr	r2, [r3, #0]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c802:	3b01      	subs	r3, #1
 800c804:	68f9      	ldr	r1, [r7, #12]
 800c806:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c808:	fb01 f303 	mul.w	r3, r1, r3
 800c80c:	441a      	add	r2, r3
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	22ff      	movs	r2, #255	; 0xff
 800c816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	22ff      	movs	r2, #255	; 0xff
 800c81e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d114      	bne.n	800c852 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	691b      	ldr	r3, [r3, #16]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d01a      	beq.n	800c866 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	3310      	adds	r3, #16
 800c834:	4618      	mov	r0, r3
 800c836:	f001 f929 	bl	800da8c <xTaskRemoveFromEventList>
 800c83a:	4603      	mov	r3, r0
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d012      	beq.n	800c866 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c840:	4b0c      	ldr	r3, [pc, #48]	; (800c874 <xQueueGenericReset+0xcc>)
 800c842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c846:	601a      	str	r2, [r3, #0]
 800c848:	f3bf 8f4f 	dsb	sy
 800c84c:	f3bf 8f6f 	isb	sy
 800c850:	e009      	b.n	800c866 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	3310      	adds	r3, #16
 800c856:	4618      	mov	r0, r3
 800c858:	f7ff fef2 	bl	800c640 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	3324      	adds	r3, #36	; 0x24
 800c860:	4618      	mov	r0, r3
 800c862:	f7ff feed 	bl	800c640 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c866:	f002 f85d 	bl	800e924 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c86a:	2301      	movs	r3, #1
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3710      	adds	r7, #16
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}
 800c874:	e000ed04 	.word	0xe000ed04

0800c878 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b08e      	sub	sp, #56	; 0x38
 800c87c:	af02      	add	r7, sp, #8
 800c87e:	60f8      	str	r0, [r7, #12]
 800c880:	60b9      	str	r1, [r7, #8]
 800c882:	607a      	str	r2, [r7, #4]
 800c884:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d10a      	bne.n	800c8a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c890:	f383 8811 	msr	BASEPRI, r3
 800c894:	f3bf 8f6f 	isb	sy
 800c898:	f3bf 8f4f 	dsb	sy
 800c89c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c89e:	bf00      	nop
 800c8a0:	e7fe      	b.n	800c8a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d10a      	bne.n	800c8be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ac:	f383 8811 	msr	BASEPRI, r3
 800c8b0:	f3bf 8f6f 	isb	sy
 800c8b4:	f3bf 8f4f 	dsb	sy
 800c8b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c8ba:	bf00      	nop
 800c8bc:	e7fe      	b.n	800c8bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d002      	beq.n	800c8ca <xQueueGenericCreateStatic+0x52>
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d001      	beq.n	800c8ce <xQueueGenericCreateStatic+0x56>
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	e000      	b.n	800c8d0 <xQueueGenericCreateStatic+0x58>
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d10a      	bne.n	800c8ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d8:	f383 8811 	msr	BASEPRI, r3
 800c8dc:	f3bf 8f6f 	isb	sy
 800c8e0:	f3bf 8f4f 	dsb	sy
 800c8e4:	623b      	str	r3, [r7, #32]
}
 800c8e6:	bf00      	nop
 800c8e8:	e7fe      	b.n	800c8e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d102      	bne.n	800c8f6 <xQueueGenericCreateStatic+0x7e>
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d101      	bne.n	800c8fa <xQueueGenericCreateStatic+0x82>
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	e000      	b.n	800c8fc <xQueueGenericCreateStatic+0x84>
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d10a      	bne.n	800c916 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c904:	f383 8811 	msr	BASEPRI, r3
 800c908:	f3bf 8f6f 	isb	sy
 800c90c:	f3bf 8f4f 	dsb	sy
 800c910:	61fb      	str	r3, [r7, #28]
}
 800c912:	bf00      	nop
 800c914:	e7fe      	b.n	800c914 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c916:	2350      	movs	r3, #80	; 0x50
 800c918:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	2b50      	cmp	r3, #80	; 0x50
 800c91e:	d00a      	beq.n	800c936 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c924:	f383 8811 	msr	BASEPRI, r3
 800c928:	f3bf 8f6f 	isb	sy
 800c92c:	f3bf 8f4f 	dsb	sy
 800c930:	61bb      	str	r3, [r7, #24]
}
 800c932:	bf00      	nop
 800c934:	e7fe      	b.n	800c934 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c936:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d00d      	beq.n	800c95e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c944:	2201      	movs	r2, #1
 800c946:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c94a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c950:	9300      	str	r3, [sp, #0]
 800c952:	4613      	mov	r3, r2
 800c954:	687a      	ldr	r2, [r7, #4]
 800c956:	68b9      	ldr	r1, [r7, #8]
 800c958:	68f8      	ldr	r0, [r7, #12]
 800c95a:	f000 f805 	bl	800c968 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c960:	4618      	mov	r0, r3
 800c962:	3730      	adds	r7, #48	; 0x30
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}

0800c968 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b084      	sub	sp, #16
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	60f8      	str	r0, [r7, #12]
 800c970:	60b9      	str	r1, [r7, #8]
 800c972:	607a      	str	r2, [r7, #4]
 800c974:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d103      	bne.n	800c984 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c97c:	69bb      	ldr	r3, [r7, #24]
 800c97e:	69ba      	ldr	r2, [r7, #24]
 800c980:	601a      	str	r2, [r3, #0]
 800c982:	e002      	b.n	800c98a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c984:	69bb      	ldr	r3, [r7, #24]
 800c986:	687a      	ldr	r2, [r7, #4]
 800c988:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c98a:	69bb      	ldr	r3, [r7, #24]
 800c98c:	68fa      	ldr	r2, [r7, #12]
 800c98e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c990:	69bb      	ldr	r3, [r7, #24]
 800c992:	68ba      	ldr	r2, [r7, #8]
 800c994:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c996:	2101      	movs	r1, #1
 800c998:	69b8      	ldr	r0, [r7, #24]
 800c99a:	f7ff ff05 	bl	800c7a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c99e:	69bb      	ldr	r3, [r7, #24]
 800c9a0:	78fa      	ldrb	r2, [r7, #3]
 800c9a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c9a6:	bf00      	nop
 800c9a8:	3710      	adds	r7, #16
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
	...

0800c9b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b08e      	sub	sp, #56	; 0x38
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	60b9      	str	r1, [r7, #8]
 800c9ba:	607a      	str	r2, [r7, #4]
 800c9bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d10a      	bne.n	800c9e2 <xQueueGenericSend+0x32>
	__asm volatile
 800c9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d0:	f383 8811 	msr	BASEPRI, r3
 800c9d4:	f3bf 8f6f 	isb	sy
 800c9d8:	f3bf 8f4f 	dsb	sy
 800c9dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c9de:	bf00      	nop
 800c9e0:	e7fe      	b.n	800c9e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d103      	bne.n	800c9f0 <xQueueGenericSend+0x40>
 800c9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d101      	bne.n	800c9f4 <xQueueGenericSend+0x44>
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	e000      	b.n	800c9f6 <xQueueGenericSend+0x46>
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d10a      	bne.n	800ca10 <xQueueGenericSend+0x60>
	__asm volatile
 800c9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9fe:	f383 8811 	msr	BASEPRI, r3
 800ca02:	f3bf 8f6f 	isb	sy
 800ca06:	f3bf 8f4f 	dsb	sy
 800ca0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ca0c:	bf00      	nop
 800ca0e:	e7fe      	b.n	800ca0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	2b02      	cmp	r3, #2
 800ca14:	d103      	bne.n	800ca1e <xQueueGenericSend+0x6e>
 800ca16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca1a:	2b01      	cmp	r3, #1
 800ca1c:	d101      	bne.n	800ca22 <xQueueGenericSend+0x72>
 800ca1e:	2301      	movs	r3, #1
 800ca20:	e000      	b.n	800ca24 <xQueueGenericSend+0x74>
 800ca22:	2300      	movs	r3, #0
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d10a      	bne.n	800ca3e <xQueueGenericSend+0x8e>
	__asm volatile
 800ca28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2c:	f383 8811 	msr	BASEPRI, r3
 800ca30:	f3bf 8f6f 	isb	sy
 800ca34:	f3bf 8f4f 	dsb	sy
 800ca38:	623b      	str	r3, [r7, #32]
}
 800ca3a:	bf00      	nop
 800ca3c:	e7fe      	b.n	800ca3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca3e:	f001 f9e7 	bl	800de10 <xTaskGetSchedulerState>
 800ca42:	4603      	mov	r3, r0
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d102      	bne.n	800ca4e <xQueueGenericSend+0x9e>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d101      	bne.n	800ca52 <xQueueGenericSend+0xa2>
 800ca4e:	2301      	movs	r3, #1
 800ca50:	e000      	b.n	800ca54 <xQueueGenericSend+0xa4>
 800ca52:	2300      	movs	r3, #0
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d10a      	bne.n	800ca6e <xQueueGenericSend+0xbe>
	__asm volatile
 800ca58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca5c:	f383 8811 	msr	BASEPRI, r3
 800ca60:	f3bf 8f6f 	isb	sy
 800ca64:	f3bf 8f4f 	dsb	sy
 800ca68:	61fb      	str	r3, [r7, #28]
}
 800ca6a:	bf00      	nop
 800ca6c:	e7fe      	b.n	800ca6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ca6e:	f001 ff29 	bl	800e8c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ca72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	d302      	bcc.n	800ca84 <xQueueGenericSend+0xd4>
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	2b02      	cmp	r3, #2
 800ca82:	d129      	bne.n	800cad8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ca84:	683a      	ldr	r2, [r7, #0]
 800ca86:	68b9      	ldr	r1, [r7, #8]
 800ca88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca8a:	f000 fa0b 	bl	800cea4 <prvCopyDataToQueue>
 800ca8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d010      	beq.n	800caba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca9a:	3324      	adds	r3, #36	; 0x24
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f000 fff5 	bl	800da8c <xTaskRemoveFromEventList>
 800caa2:	4603      	mov	r3, r0
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d013      	beq.n	800cad0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800caa8:	4b3f      	ldr	r3, [pc, #252]	; (800cba8 <xQueueGenericSend+0x1f8>)
 800caaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caae:	601a      	str	r2, [r3, #0]
 800cab0:	f3bf 8f4f 	dsb	sy
 800cab4:	f3bf 8f6f 	isb	sy
 800cab8:	e00a      	b.n	800cad0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800caba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d007      	beq.n	800cad0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cac0:	4b39      	ldr	r3, [pc, #228]	; (800cba8 <xQueueGenericSend+0x1f8>)
 800cac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cac6:	601a      	str	r2, [r3, #0]
 800cac8:	f3bf 8f4f 	dsb	sy
 800cacc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cad0:	f001 ff28 	bl	800e924 <vPortExitCritical>
				return pdPASS;
 800cad4:	2301      	movs	r3, #1
 800cad6:	e063      	b.n	800cba0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d103      	bne.n	800cae6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cade:	f001 ff21 	bl	800e924 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cae2:	2300      	movs	r3, #0
 800cae4:	e05c      	b.n	800cba0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d106      	bne.n	800cafa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800caec:	f107 0314 	add.w	r3, r7, #20
 800caf0:	4618      	mov	r0, r3
 800caf2:	f001 f82f 	bl	800db54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800caf6:	2301      	movs	r3, #1
 800caf8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cafa:	f001 ff13 	bl	800e924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cafe:	f000 fd9b 	bl	800d638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb02:	f001 fedf 	bl	800e8c4 <vPortEnterCritical>
 800cb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb0c:	b25b      	sxtb	r3, r3
 800cb0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb12:	d103      	bne.n	800cb1c <xQueueGenericSend+0x16c>
 800cb14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb16:	2200      	movs	r2, #0
 800cb18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb22:	b25b      	sxtb	r3, r3
 800cb24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb28:	d103      	bne.n	800cb32 <xQueueGenericSend+0x182>
 800cb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb32:	f001 fef7 	bl	800e924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb36:	1d3a      	adds	r2, r7, #4
 800cb38:	f107 0314 	add.w	r3, r7, #20
 800cb3c:	4611      	mov	r1, r2
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f001 f81e 	bl	800db80 <xTaskCheckForTimeOut>
 800cb44:	4603      	mov	r3, r0
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d124      	bne.n	800cb94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cb4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb4c:	f000 faa2 	bl	800d094 <prvIsQueueFull>
 800cb50:	4603      	mov	r3, r0
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d018      	beq.n	800cb88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb58:	3310      	adds	r3, #16
 800cb5a:	687a      	ldr	r2, [r7, #4]
 800cb5c:	4611      	mov	r1, r2
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f000 ff44 	bl	800d9ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cb64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb66:	f000 fa2d 	bl	800cfc4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cb6a:	f000 fd73 	bl	800d654 <xTaskResumeAll>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	f47f af7c 	bne.w	800ca6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cb76:	4b0c      	ldr	r3, [pc, #48]	; (800cba8 <xQueueGenericSend+0x1f8>)
 800cb78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb7c:	601a      	str	r2, [r3, #0]
 800cb7e:	f3bf 8f4f 	dsb	sy
 800cb82:	f3bf 8f6f 	isb	sy
 800cb86:	e772      	b.n	800ca6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cb88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb8a:	f000 fa1b 	bl	800cfc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cb8e:	f000 fd61 	bl	800d654 <xTaskResumeAll>
 800cb92:	e76c      	b.n	800ca6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cb94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb96:	f000 fa15 	bl	800cfc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cb9a:	f000 fd5b 	bl	800d654 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cb9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3738      	adds	r7, #56	; 0x38
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}
 800cba8:	e000ed04 	.word	0xe000ed04

0800cbac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b090      	sub	sp, #64	; 0x40
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	60f8      	str	r0, [r7, #12]
 800cbb4:	60b9      	str	r1, [r7, #8]
 800cbb6:	607a      	str	r2, [r7, #4]
 800cbb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d10a      	bne.n	800cbda <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc8:	f383 8811 	msr	BASEPRI, r3
 800cbcc:	f3bf 8f6f 	isb	sy
 800cbd0:	f3bf 8f4f 	dsb	sy
 800cbd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cbd6:	bf00      	nop
 800cbd8:	e7fe      	b.n	800cbd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d103      	bne.n	800cbe8 <xQueueGenericSendFromISR+0x3c>
 800cbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d101      	bne.n	800cbec <xQueueGenericSendFromISR+0x40>
 800cbe8:	2301      	movs	r3, #1
 800cbea:	e000      	b.n	800cbee <xQueueGenericSendFromISR+0x42>
 800cbec:	2300      	movs	r3, #0
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d10a      	bne.n	800cc08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf6:	f383 8811 	msr	BASEPRI, r3
 800cbfa:	f3bf 8f6f 	isb	sy
 800cbfe:	f3bf 8f4f 	dsb	sy
 800cc02:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cc04:	bf00      	nop
 800cc06:	e7fe      	b.n	800cc06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	2b02      	cmp	r3, #2
 800cc0c:	d103      	bne.n	800cc16 <xQueueGenericSendFromISR+0x6a>
 800cc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc12:	2b01      	cmp	r3, #1
 800cc14:	d101      	bne.n	800cc1a <xQueueGenericSendFromISR+0x6e>
 800cc16:	2301      	movs	r3, #1
 800cc18:	e000      	b.n	800cc1c <xQueueGenericSendFromISR+0x70>
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d10a      	bne.n	800cc36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc24:	f383 8811 	msr	BASEPRI, r3
 800cc28:	f3bf 8f6f 	isb	sy
 800cc2c:	f3bf 8f4f 	dsb	sy
 800cc30:	623b      	str	r3, [r7, #32]
}
 800cc32:	bf00      	nop
 800cc34:	e7fe      	b.n	800cc34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc36:	f001 ff27 	bl	800ea88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cc3a:	f3ef 8211 	mrs	r2, BASEPRI
 800cc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc42:	f383 8811 	msr	BASEPRI, r3
 800cc46:	f3bf 8f6f 	isb	sy
 800cc4a:	f3bf 8f4f 	dsb	sy
 800cc4e:	61fa      	str	r2, [r7, #28]
 800cc50:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cc52:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc54:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d302      	bcc.n	800cc68 <xQueueGenericSendFromISR+0xbc>
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	2b02      	cmp	r3, #2
 800cc66:	d12f      	bne.n	800ccc8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc76:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cc78:	683a      	ldr	r2, [r7, #0]
 800cc7a:	68b9      	ldr	r1, [r7, #8]
 800cc7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc7e:	f000 f911 	bl	800cea4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cc82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cc86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc8a:	d112      	bne.n	800ccb2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d016      	beq.n	800ccc2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc96:	3324      	adds	r3, #36	; 0x24
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f000 fef7 	bl	800da8c <xTaskRemoveFromEventList>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d00e      	beq.n	800ccc2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d00b      	beq.n	800ccc2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2201      	movs	r2, #1
 800ccae:	601a      	str	r2, [r3, #0]
 800ccb0:	e007      	b.n	800ccc2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ccb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ccb6:	3301      	adds	r3, #1
 800ccb8:	b2db      	uxtb	r3, r3
 800ccba:	b25a      	sxtb	r2, r3
 800ccbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ccc6:	e001      	b.n	800cccc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ccd6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ccd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3740      	adds	r7, #64	; 0x40
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
	...

0800cce4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b08c      	sub	sp, #48	; 0x30
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	60f8      	str	r0, [r7, #12]
 800ccec:	60b9      	str	r1, [r7, #8]
 800ccee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ccf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d10a      	bne.n	800cd14 <xQueueReceive+0x30>
	__asm volatile
 800ccfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd02:	f383 8811 	msr	BASEPRI, r3
 800cd06:	f3bf 8f6f 	isb	sy
 800cd0a:	f3bf 8f4f 	dsb	sy
 800cd0e:	623b      	str	r3, [r7, #32]
}
 800cd10:	bf00      	nop
 800cd12:	e7fe      	b.n	800cd12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d103      	bne.n	800cd22 <xQueueReceive+0x3e>
 800cd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d101      	bne.n	800cd26 <xQueueReceive+0x42>
 800cd22:	2301      	movs	r3, #1
 800cd24:	e000      	b.n	800cd28 <xQueueReceive+0x44>
 800cd26:	2300      	movs	r3, #0
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d10a      	bne.n	800cd42 <xQueueReceive+0x5e>
	__asm volatile
 800cd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd30:	f383 8811 	msr	BASEPRI, r3
 800cd34:	f3bf 8f6f 	isb	sy
 800cd38:	f3bf 8f4f 	dsb	sy
 800cd3c:	61fb      	str	r3, [r7, #28]
}
 800cd3e:	bf00      	nop
 800cd40:	e7fe      	b.n	800cd40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd42:	f001 f865 	bl	800de10 <xTaskGetSchedulerState>
 800cd46:	4603      	mov	r3, r0
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d102      	bne.n	800cd52 <xQueueReceive+0x6e>
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d101      	bne.n	800cd56 <xQueueReceive+0x72>
 800cd52:	2301      	movs	r3, #1
 800cd54:	e000      	b.n	800cd58 <xQueueReceive+0x74>
 800cd56:	2300      	movs	r3, #0
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d10a      	bne.n	800cd72 <xQueueReceive+0x8e>
	__asm volatile
 800cd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd60:	f383 8811 	msr	BASEPRI, r3
 800cd64:	f3bf 8f6f 	isb	sy
 800cd68:	f3bf 8f4f 	dsb	sy
 800cd6c:	61bb      	str	r3, [r7, #24]
}
 800cd6e:	bf00      	nop
 800cd70:	e7fe      	b.n	800cd70 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd72:	f001 fda7 	bl	800e8c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d01f      	beq.n	800cdc2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cd82:	68b9      	ldr	r1, [r7, #8]
 800cd84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd86:	f000 f8f7 	bl	800cf78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd8c:	1e5a      	subs	r2, r3, #1
 800cd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd94:	691b      	ldr	r3, [r3, #16]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d00f      	beq.n	800cdba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9c:	3310      	adds	r3, #16
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f000 fe74 	bl	800da8c <xTaskRemoveFromEventList>
 800cda4:	4603      	mov	r3, r0
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d007      	beq.n	800cdba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cdaa:	4b3d      	ldr	r3, [pc, #244]	; (800cea0 <xQueueReceive+0x1bc>)
 800cdac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdb0:	601a      	str	r2, [r3, #0]
 800cdb2:	f3bf 8f4f 	dsb	sy
 800cdb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cdba:	f001 fdb3 	bl	800e924 <vPortExitCritical>
				return pdPASS;
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	e069      	b.n	800ce96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d103      	bne.n	800cdd0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cdc8:	f001 fdac 	bl	800e924 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	e062      	b.n	800ce96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d106      	bne.n	800cde4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cdd6:	f107 0310 	add.w	r3, r7, #16
 800cdda:	4618      	mov	r0, r3
 800cddc:	f000 feba 	bl	800db54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cde0:	2301      	movs	r3, #1
 800cde2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cde4:	f001 fd9e 	bl	800e924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cde8:	f000 fc26 	bl	800d638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cdec:	f001 fd6a 	bl	800e8c4 <vPortEnterCritical>
 800cdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cdf6:	b25b      	sxtb	r3, r3
 800cdf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdfc:	d103      	bne.n	800ce06 <xQueueReceive+0x122>
 800cdfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce00:	2200      	movs	r2, #0
 800ce02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce0c:	b25b      	sxtb	r3, r3
 800ce0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce12:	d103      	bne.n	800ce1c <xQueueReceive+0x138>
 800ce14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce16:	2200      	movs	r2, #0
 800ce18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce1c:	f001 fd82 	bl	800e924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce20:	1d3a      	adds	r2, r7, #4
 800ce22:	f107 0310 	add.w	r3, r7, #16
 800ce26:	4611      	mov	r1, r2
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f000 fea9 	bl	800db80 <xTaskCheckForTimeOut>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d123      	bne.n	800ce7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce36:	f000 f917 	bl	800d068 <prvIsQueueEmpty>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d017      	beq.n	800ce70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ce40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce42:	3324      	adds	r3, #36	; 0x24
 800ce44:	687a      	ldr	r2, [r7, #4]
 800ce46:	4611      	mov	r1, r2
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f000 fdcf 	bl	800d9ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ce4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce50:	f000 f8b8 	bl	800cfc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ce54:	f000 fbfe 	bl	800d654 <xTaskResumeAll>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d189      	bne.n	800cd72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ce5e:	4b10      	ldr	r3, [pc, #64]	; (800cea0 <xQueueReceive+0x1bc>)
 800ce60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce64:	601a      	str	r2, [r3, #0]
 800ce66:	f3bf 8f4f 	dsb	sy
 800ce6a:	f3bf 8f6f 	isb	sy
 800ce6e:	e780      	b.n	800cd72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ce70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce72:	f000 f8a7 	bl	800cfc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce76:	f000 fbed 	bl	800d654 <xTaskResumeAll>
 800ce7a:	e77a      	b.n	800cd72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ce7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce7e:	f000 f8a1 	bl	800cfc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce82:	f000 fbe7 	bl	800d654 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce88:	f000 f8ee 	bl	800d068 <prvIsQueueEmpty>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	f43f af6f 	beq.w	800cd72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ce94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3730      	adds	r7, #48	; 0x30
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}
 800ce9e:	bf00      	nop
 800cea0:	e000ed04 	.word	0xe000ed04

0800cea4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b086      	sub	sp, #24
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	60f8      	str	r0, [r7, #12]
 800ceac:	60b9      	str	r1, [r7, #8]
 800ceae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceb8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d10d      	bne.n	800cede <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d14d      	bne.n	800cf66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	689b      	ldr	r3, [r3, #8]
 800cece:	4618      	mov	r0, r3
 800ced0:	f000 ffbc 	bl	800de4c <xTaskPriorityDisinherit>
 800ced4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	2200      	movs	r2, #0
 800ceda:	609a      	str	r2, [r3, #8]
 800cedc:	e043      	b.n	800cf66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d119      	bne.n	800cf18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	6858      	ldr	r0, [r3, #4]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceec:	461a      	mov	r2, r3
 800ceee:	68b9      	ldr	r1, [r7, #8]
 800cef0:	f002 f917 	bl	800f122 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	685a      	ldr	r2, [r3, #4]
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cefc:	441a      	add	r2, r3
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	685a      	ldr	r2, [r3, #4]
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	689b      	ldr	r3, [r3, #8]
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d32b      	bcc.n	800cf66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	681a      	ldr	r2, [r3, #0]
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	605a      	str	r2, [r3, #4]
 800cf16:	e026      	b.n	800cf66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	68d8      	ldr	r0, [r3, #12]
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf20:	461a      	mov	r2, r3
 800cf22:	68b9      	ldr	r1, [r7, #8]
 800cf24:	f002 f8fd 	bl	800f122 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	68da      	ldr	r2, [r3, #12]
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf30:	425b      	negs	r3, r3
 800cf32:	441a      	add	r2, r3
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	68da      	ldr	r2, [r3, #12]
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d207      	bcs.n	800cf54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	689a      	ldr	r2, [r3, #8]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf4c:	425b      	negs	r3, r3
 800cf4e:	441a      	add	r2, r3
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2b02      	cmp	r3, #2
 800cf58:	d105      	bne.n	800cf66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d002      	beq.n	800cf66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	3b01      	subs	r3, #1
 800cf64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	1c5a      	adds	r2, r3, #1
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cf6e:	697b      	ldr	r3, [r7, #20]
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3718      	adds	r7, #24
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}

0800cf78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b082      	sub	sp, #8
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d018      	beq.n	800cfbc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	68da      	ldr	r2, [r3, #12]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf92:	441a      	add	r2, r3
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	68da      	ldr	r2, [r3, #12]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	689b      	ldr	r3, [r3, #8]
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d303      	bcc.n	800cfac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681a      	ldr	r2, [r3, #0]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	68d9      	ldr	r1, [r3, #12]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfb4:	461a      	mov	r2, r3
 800cfb6:	6838      	ldr	r0, [r7, #0]
 800cfb8:	f002 f8b3 	bl	800f122 <memcpy>
	}
}
 800cfbc:	bf00      	nop
 800cfbe:	3708      	adds	r7, #8
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}

0800cfc4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b084      	sub	sp, #16
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cfcc:	f001 fc7a 	bl	800e8c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cfd6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cfd8:	e011      	b.n	800cffe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d012      	beq.n	800d008 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	3324      	adds	r3, #36	; 0x24
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f000 fd50 	bl	800da8c <xTaskRemoveFromEventList>
 800cfec:	4603      	mov	r3, r0
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d001      	beq.n	800cff6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cff2:	f000 fe27 	bl	800dc44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cff6:	7bfb      	ldrb	r3, [r7, #15]
 800cff8:	3b01      	subs	r3, #1
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d002:	2b00      	cmp	r3, #0
 800d004:	dce9      	bgt.n	800cfda <prvUnlockQueue+0x16>
 800d006:	e000      	b.n	800d00a <prvUnlockQueue+0x46>
					break;
 800d008:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	22ff      	movs	r2, #255	; 0xff
 800d00e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d012:	f001 fc87 	bl	800e924 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d016:	f001 fc55 	bl	800e8c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d020:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d022:	e011      	b.n	800d048 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	691b      	ldr	r3, [r3, #16]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d012      	beq.n	800d052 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	3310      	adds	r3, #16
 800d030:	4618      	mov	r0, r3
 800d032:	f000 fd2b 	bl	800da8c <xTaskRemoveFromEventList>
 800d036:	4603      	mov	r3, r0
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d001      	beq.n	800d040 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d03c:	f000 fe02 	bl	800dc44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d040:	7bbb      	ldrb	r3, [r7, #14]
 800d042:	3b01      	subs	r3, #1
 800d044:	b2db      	uxtb	r3, r3
 800d046:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d048:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	dce9      	bgt.n	800d024 <prvUnlockQueue+0x60>
 800d050:	e000      	b.n	800d054 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d052:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	22ff      	movs	r2, #255	; 0xff
 800d058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d05c:	f001 fc62 	bl	800e924 <vPortExitCritical>
}
 800d060:	bf00      	nop
 800d062:	3710      	adds	r7, #16
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}

0800d068 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b084      	sub	sp, #16
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d070:	f001 fc28 	bl	800e8c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d102      	bne.n	800d082 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d07c:	2301      	movs	r3, #1
 800d07e:	60fb      	str	r3, [r7, #12]
 800d080:	e001      	b.n	800d086 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d082:	2300      	movs	r3, #0
 800d084:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d086:	f001 fc4d 	bl	800e924 <vPortExitCritical>

	return xReturn;
 800d08a:	68fb      	ldr	r3, [r7, #12]
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3710      	adds	r7, #16
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b084      	sub	sp, #16
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d09c:	f001 fc12 	bl	800e8c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d102      	bne.n	800d0b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	60fb      	str	r3, [r7, #12]
 800d0b0:	e001      	b.n	800d0b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d0b6:	f001 fc35 	bl	800e924 <vPortExitCritical>

	return xReturn;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3710      	adds	r7, #16
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d0c4:	b480      	push	{r7}
 800d0c6:	b085      	sub	sp, #20
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	60fb      	str	r3, [r7, #12]
 800d0d2:	e014      	b.n	800d0fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d0d4:	4a0f      	ldr	r2, [pc, #60]	; (800d114 <vQueueAddToRegistry+0x50>)
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d10b      	bne.n	800d0f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d0e0:	490c      	ldr	r1, [pc, #48]	; (800d114 <vQueueAddToRegistry+0x50>)
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	683a      	ldr	r2, [r7, #0]
 800d0e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d0ea:	4a0a      	ldr	r2, [pc, #40]	; (800d114 <vQueueAddToRegistry+0x50>)
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	00db      	lsls	r3, r3, #3
 800d0f0:	4413      	add	r3, r2
 800d0f2:	687a      	ldr	r2, [r7, #4]
 800d0f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d0f6:	e006      	b.n	800d106 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	3301      	adds	r3, #1
 800d0fc:	60fb      	str	r3, [r7, #12]
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2b07      	cmp	r3, #7
 800d102:	d9e7      	bls.n	800d0d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d104:	bf00      	nop
 800d106:	bf00      	nop
 800d108:	3714      	adds	r7, #20
 800d10a:	46bd      	mov	sp, r7
 800d10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d110:	4770      	bx	lr
 800d112:	bf00      	nop
 800d114:	20001490 	.word	0x20001490

0800d118 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b086      	sub	sp, #24
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	60f8      	str	r0, [r7, #12]
 800d120:	60b9      	str	r1, [r7, #8]
 800d122:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d128:	f001 fbcc 	bl	800e8c4 <vPortEnterCritical>
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d132:	b25b      	sxtb	r3, r3
 800d134:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d138:	d103      	bne.n	800d142 <vQueueWaitForMessageRestricted+0x2a>
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	2200      	movs	r2, #0
 800d13e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d148:	b25b      	sxtb	r3, r3
 800d14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d14e:	d103      	bne.n	800d158 <vQueueWaitForMessageRestricted+0x40>
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	2200      	movs	r2, #0
 800d154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d158:	f001 fbe4 	bl	800e924 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d160:	2b00      	cmp	r3, #0
 800d162:	d106      	bne.n	800d172 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	3324      	adds	r3, #36	; 0x24
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	68b9      	ldr	r1, [r7, #8]
 800d16c:	4618      	mov	r0, r3
 800d16e:	f000 fc61 	bl	800da34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d172:	6978      	ldr	r0, [r7, #20]
 800d174:	f7ff ff26 	bl	800cfc4 <prvUnlockQueue>
	}
 800d178:	bf00      	nop
 800d17a:	3718      	adds	r7, #24
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d180:	b580      	push	{r7, lr}
 800d182:	b08e      	sub	sp, #56	; 0x38
 800d184:	af04      	add	r7, sp, #16
 800d186:	60f8      	str	r0, [r7, #12]
 800d188:	60b9      	str	r1, [r7, #8]
 800d18a:	607a      	str	r2, [r7, #4]
 800d18c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d18e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d190:	2b00      	cmp	r3, #0
 800d192:	d10a      	bne.n	800d1aa <xTaskCreateStatic+0x2a>
	__asm volatile
 800d194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d198:	f383 8811 	msr	BASEPRI, r3
 800d19c:	f3bf 8f6f 	isb	sy
 800d1a0:	f3bf 8f4f 	dsb	sy
 800d1a4:	623b      	str	r3, [r7, #32]
}
 800d1a6:	bf00      	nop
 800d1a8:	e7fe      	b.n	800d1a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d10a      	bne.n	800d1c6 <xTaskCreateStatic+0x46>
	__asm volatile
 800d1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b4:	f383 8811 	msr	BASEPRI, r3
 800d1b8:	f3bf 8f6f 	isb	sy
 800d1bc:	f3bf 8f4f 	dsb	sy
 800d1c0:	61fb      	str	r3, [r7, #28]
}
 800d1c2:	bf00      	nop
 800d1c4:	e7fe      	b.n	800d1c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d1c6:	23bc      	movs	r3, #188	; 0xbc
 800d1c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	2bbc      	cmp	r3, #188	; 0xbc
 800d1ce:	d00a      	beq.n	800d1e6 <xTaskCreateStatic+0x66>
	__asm volatile
 800d1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d4:	f383 8811 	msr	BASEPRI, r3
 800d1d8:	f3bf 8f6f 	isb	sy
 800d1dc:	f3bf 8f4f 	dsb	sy
 800d1e0:	61bb      	str	r3, [r7, #24]
}
 800d1e2:	bf00      	nop
 800d1e4:	e7fe      	b.n	800d1e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d1e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d01e      	beq.n	800d22c <xTaskCreateStatic+0xac>
 800d1ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d01b      	beq.n	800d22c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d200:	2202      	movs	r2, #2
 800d202:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d206:	2300      	movs	r3, #0
 800d208:	9303      	str	r3, [sp, #12]
 800d20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20c:	9302      	str	r3, [sp, #8]
 800d20e:	f107 0314 	add.w	r3, r7, #20
 800d212:	9301      	str	r3, [sp, #4]
 800d214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d216:	9300      	str	r3, [sp, #0]
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	687a      	ldr	r2, [r7, #4]
 800d21c:	68b9      	ldr	r1, [r7, #8]
 800d21e:	68f8      	ldr	r0, [r7, #12]
 800d220:	f000 f850 	bl	800d2c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d224:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d226:	f000 f8f3 	bl	800d410 <prvAddNewTaskToReadyList>
 800d22a:	e001      	b.n	800d230 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d22c:	2300      	movs	r3, #0
 800d22e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d230:	697b      	ldr	r3, [r7, #20]
	}
 800d232:	4618      	mov	r0, r3
 800d234:	3728      	adds	r7, #40	; 0x28
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}

0800d23a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d23a:	b580      	push	{r7, lr}
 800d23c:	b08c      	sub	sp, #48	; 0x30
 800d23e:	af04      	add	r7, sp, #16
 800d240:	60f8      	str	r0, [r7, #12]
 800d242:	60b9      	str	r1, [r7, #8]
 800d244:	603b      	str	r3, [r7, #0]
 800d246:	4613      	mov	r3, r2
 800d248:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d24a:	88fb      	ldrh	r3, [r7, #6]
 800d24c:	009b      	lsls	r3, r3, #2
 800d24e:	4618      	mov	r0, r3
 800d250:	f001 fc5a 	bl	800eb08 <pvPortMalloc>
 800d254:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d00e      	beq.n	800d27a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d25c:	20bc      	movs	r0, #188	; 0xbc
 800d25e:	f001 fc53 	bl	800eb08 <pvPortMalloc>
 800d262:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d264:	69fb      	ldr	r3, [r7, #28]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d003      	beq.n	800d272 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d26a:	69fb      	ldr	r3, [r7, #28]
 800d26c:	697a      	ldr	r2, [r7, #20]
 800d26e:	631a      	str	r2, [r3, #48]	; 0x30
 800d270:	e005      	b.n	800d27e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d272:	6978      	ldr	r0, [r7, #20]
 800d274:	f001 fd14 	bl	800eca0 <vPortFree>
 800d278:	e001      	b.n	800d27e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d27a:	2300      	movs	r3, #0
 800d27c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d27e:	69fb      	ldr	r3, [r7, #28]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d017      	beq.n	800d2b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d284:	69fb      	ldr	r3, [r7, #28]
 800d286:	2200      	movs	r2, #0
 800d288:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d28c:	88fa      	ldrh	r2, [r7, #6]
 800d28e:	2300      	movs	r3, #0
 800d290:	9303      	str	r3, [sp, #12]
 800d292:	69fb      	ldr	r3, [r7, #28]
 800d294:	9302      	str	r3, [sp, #8]
 800d296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d298:	9301      	str	r3, [sp, #4]
 800d29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29c:	9300      	str	r3, [sp, #0]
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	68b9      	ldr	r1, [r7, #8]
 800d2a2:	68f8      	ldr	r0, [r7, #12]
 800d2a4:	f000 f80e 	bl	800d2c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d2a8:	69f8      	ldr	r0, [r7, #28]
 800d2aa:	f000 f8b1 	bl	800d410 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	61bb      	str	r3, [r7, #24]
 800d2b2:	e002      	b.n	800d2ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d2b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d2b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d2ba:	69bb      	ldr	r3, [r7, #24]
	}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3720      	adds	r7, #32
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b088      	sub	sp, #32
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	60f8      	str	r0, [r7, #12]
 800d2cc:	60b9      	str	r1, [r7, #8]
 800d2ce:	607a      	str	r2, [r7, #4]
 800d2d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	009b      	lsls	r3, r3, #2
 800d2da:	461a      	mov	r2, r3
 800d2dc:	21a5      	movs	r1, #165	; 0xa5
 800d2de:	f001 ff2e 	bl	800f13e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d2ec:	3b01      	subs	r3, #1
 800d2ee:	009b      	lsls	r3, r3, #2
 800d2f0:	4413      	add	r3, r2
 800d2f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d2f4:	69bb      	ldr	r3, [r7, #24]
 800d2f6:	f023 0307 	bic.w	r3, r3, #7
 800d2fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d2fc:	69bb      	ldr	r3, [r7, #24]
 800d2fe:	f003 0307 	and.w	r3, r3, #7
 800d302:	2b00      	cmp	r3, #0
 800d304:	d00a      	beq.n	800d31c <prvInitialiseNewTask+0x58>
	__asm volatile
 800d306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d30a:	f383 8811 	msr	BASEPRI, r3
 800d30e:	f3bf 8f6f 	isb	sy
 800d312:	f3bf 8f4f 	dsb	sy
 800d316:	617b      	str	r3, [r7, #20]
}
 800d318:	bf00      	nop
 800d31a:	e7fe      	b.n	800d31a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d01f      	beq.n	800d362 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d322:	2300      	movs	r3, #0
 800d324:	61fb      	str	r3, [r7, #28]
 800d326:	e012      	b.n	800d34e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d328:	68ba      	ldr	r2, [r7, #8]
 800d32a:	69fb      	ldr	r3, [r7, #28]
 800d32c:	4413      	add	r3, r2
 800d32e:	7819      	ldrb	r1, [r3, #0]
 800d330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d332:	69fb      	ldr	r3, [r7, #28]
 800d334:	4413      	add	r3, r2
 800d336:	3334      	adds	r3, #52	; 0x34
 800d338:	460a      	mov	r2, r1
 800d33a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d33c:	68ba      	ldr	r2, [r7, #8]
 800d33e:	69fb      	ldr	r3, [r7, #28]
 800d340:	4413      	add	r3, r2
 800d342:	781b      	ldrb	r3, [r3, #0]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d006      	beq.n	800d356 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d348:	69fb      	ldr	r3, [r7, #28]
 800d34a:	3301      	adds	r3, #1
 800d34c:	61fb      	str	r3, [r7, #28]
 800d34e:	69fb      	ldr	r3, [r7, #28]
 800d350:	2b0f      	cmp	r3, #15
 800d352:	d9e9      	bls.n	800d328 <prvInitialiseNewTask+0x64>
 800d354:	e000      	b.n	800d358 <prvInitialiseNewTask+0x94>
			{
				break;
 800d356:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d35a:	2200      	movs	r2, #0
 800d35c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d360:	e003      	b.n	800d36a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d364:	2200      	movs	r2, #0
 800d366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d36c:	2b37      	cmp	r3, #55	; 0x37
 800d36e:	d901      	bls.n	800d374 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d370:	2337      	movs	r3, #55	; 0x37
 800d372:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d378:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d37c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d37e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d382:	2200      	movs	r2, #0
 800d384:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d388:	3304      	adds	r3, #4
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7ff f978 	bl	800c680 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d392:	3318      	adds	r3, #24
 800d394:	4618      	mov	r0, r3
 800d396:	f7ff f973 	bl	800c680 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d39c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d39e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c2:	3354      	adds	r3, #84	; 0x54
 800d3c4:	2260      	movs	r2, #96	; 0x60
 800d3c6:	2100      	movs	r1, #0
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f001 feb8 	bl	800f13e <memset>
 800d3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d0:	4a0c      	ldr	r2, [pc, #48]	; (800d404 <prvInitialiseNewTask+0x140>)
 800d3d2:	659a      	str	r2, [r3, #88]	; 0x58
 800d3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d6:	4a0c      	ldr	r2, [pc, #48]	; (800d408 <prvInitialiseNewTask+0x144>)
 800d3d8:	65da      	str	r2, [r3, #92]	; 0x5c
 800d3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3dc:	4a0b      	ldr	r2, [pc, #44]	; (800d40c <prvInitialiseNewTask+0x148>)
 800d3de:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d3e0:	683a      	ldr	r2, [r7, #0]
 800d3e2:	68f9      	ldr	r1, [r7, #12]
 800d3e4:	69b8      	ldr	r0, [r7, #24]
 800d3e6:	f001 f941 	bl	800e66c <pxPortInitialiseStack>
 800d3ea:	4602      	mov	r2, r0
 800d3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d002      	beq.n	800d3fc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d3fc:	bf00      	nop
 800d3fe:	3720      	adds	r7, #32
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}
 800d404:	080125b8 	.word	0x080125b8
 800d408:	080125d8 	.word	0x080125d8
 800d40c:	08012598 	.word	0x08012598

0800d410 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b082      	sub	sp, #8
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d418:	f001 fa54 	bl	800e8c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d41c:	4b2d      	ldr	r3, [pc, #180]	; (800d4d4 <prvAddNewTaskToReadyList+0xc4>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	3301      	adds	r3, #1
 800d422:	4a2c      	ldr	r2, [pc, #176]	; (800d4d4 <prvAddNewTaskToReadyList+0xc4>)
 800d424:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d426:	4b2c      	ldr	r3, [pc, #176]	; (800d4d8 <prvAddNewTaskToReadyList+0xc8>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d109      	bne.n	800d442 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d42e:	4a2a      	ldr	r2, [pc, #168]	; (800d4d8 <prvAddNewTaskToReadyList+0xc8>)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d434:	4b27      	ldr	r3, [pc, #156]	; (800d4d4 <prvAddNewTaskToReadyList+0xc4>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d110      	bne.n	800d45e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d43c:	f000 fc26 	bl	800dc8c <prvInitialiseTaskLists>
 800d440:	e00d      	b.n	800d45e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d442:	4b26      	ldr	r3, [pc, #152]	; (800d4dc <prvAddNewTaskToReadyList+0xcc>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d109      	bne.n	800d45e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d44a:	4b23      	ldr	r3, [pc, #140]	; (800d4d8 <prvAddNewTaskToReadyList+0xc8>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d454:	429a      	cmp	r2, r3
 800d456:	d802      	bhi.n	800d45e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d458:	4a1f      	ldr	r2, [pc, #124]	; (800d4d8 <prvAddNewTaskToReadyList+0xc8>)
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d45e:	4b20      	ldr	r3, [pc, #128]	; (800d4e0 <prvAddNewTaskToReadyList+0xd0>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	3301      	adds	r3, #1
 800d464:	4a1e      	ldr	r2, [pc, #120]	; (800d4e0 <prvAddNewTaskToReadyList+0xd0>)
 800d466:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d468:	4b1d      	ldr	r3, [pc, #116]	; (800d4e0 <prvAddNewTaskToReadyList+0xd0>)
 800d46a:	681a      	ldr	r2, [r3, #0]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d474:	4b1b      	ldr	r3, [pc, #108]	; (800d4e4 <prvAddNewTaskToReadyList+0xd4>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	429a      	cmp	r2, r3
 800d47a:	d903      	bls.n	800d484 <prvAddNewTaskToReadyList+0x74>
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d480:	4a18      	ldr	r2, [pc, #96]	; (800d4e4 <prvAddNewTaskToReadyList+0xd4>)
 800d482:	6013      	str	r3, [r2, #0]
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d488:	4613      	mov	r3, r2
 800d48a:	009b      	lsls	r3, r3, #2
 800d48c:	4413      	add	r3, r2
 800d48e:	009b      	lsls	r3, r3, #2
 800d490:	4a15      	ldr	r2, [pc, #84]	; (800d4e8 <prvAddNewTaskToReadyList+0xd8>)
 800d492:	441a      	add	r2, r3
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	3304      	adds	r3, #4
 800d498:	4619      	mov	r1, r3
 800d49a:	4610      	mov	r0, r2
 800d49c:	f7ff f8fd 	bl	800c69a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d4a0:	f001 fa40 	bl	800e924 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d4a4:	4b0d      	ldr	r3, [pc, #52]	; (800d4dc <prvAddNewTaskToReadyList+0xcc>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d00e      	beq.n	800d4ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d4ac:	4b0a      	ldr	r3, [pc, #40]	; (800d4d8 <prvAddNewTaskToReadyList+0xc8>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d207      	bcs.n	800d4ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d4ba:	4b0c      	ldr	r3, [pc, #48]	; (800d4ec <prvAddNewTaskToReadyList+0xdc>)
 800d4bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4c0:	601a      	str	r2, [r3, #0]
 800d4c2:	f3bf 8f4f 	dsb	sy
 800d4c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d4ca:	bf00      	nop
 800d4cc:	3708      	adds	r7, #8
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}
 800d4d2:	bf00      	nop
 800d4d4:	200019a4 	.word	0x200019a4
 800d4d8:	200014d0 	.word	0x200014d0
 800d4dc:	200019b0 	.word	0x200019b0
 800d4e0:	200019c0 	.word	0x200019c0
 800d4e4:	200019ac 	.word	0x200019ac
 800d4e8:	200014d4 	.word	0x200014d4
 800d4ec:	e000ed04 	.word	0xe000ed04

0800d4f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d017      	beq.n	800d532 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d502:	4b13      	ldr	r3, [pc, #76]	; (800d550 <vTaskDelay+0x60>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d00a      	beq.n	800d520 <vTaskDelay+0x30>
	__asm volatile
 800d50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d50e:	f383 8811 	msr	BASEPRI, r3
 800d512:	f3bf 8f6f 	isb	sy
 800d516:	f3bf 8f4f 	dsb	sy
 800d51a:	60bb      	str	r3, [r7, #8]
}
 800d51c:	bf00      	nop
 800d51e:	e7fe      	b.n	800d51e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d520:	f000 f88a 	bl	800d638 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d524:	2100      	movs	r1, #0
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f000 fcfe 	bl	800df28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d52c:	f000 f892 	bl	800d654 <xTaskResumeAll>
 800d530:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d107      	bne.n	800d548 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d538:	4b06      	ldr	r3, [pc, #24]	; (800d554 <vTaskDelay+0x64>)
 800d53a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d53e:	601a      	str	r2, [r3, #0]
 800d540:	f3bf 8f4f 	dsb	sy
 800d544:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d548:	bf00      	nop
 800d54a:	3710      	adds	r7, #16
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}
 800d550:	200019cc 	.word	0x200019cc
 800d554:	e000ed04 	.word	0xe000ed04

0800d558 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b08a      	sub	sp, #40	; 0x28
 800d55c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d55e:	2300      	movs	r3, #0
 800d560:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d562:	2300      	movs	r3, #0
 800d564:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d566:	463a      	mov	r2, r7
 800d568:	1d39      	adds	r1, r7, #4
 800d56a:	f107 0308 	add.w	r3, r7, #8
 800d56e:	4618      	mov	r0, r3
 800d570:	f7ff f832 	bl	800c5d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d574:	6839      	ldr	r1, [r7, #0]
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	68ba      	ldr	r2, [r7, #8]
 800d57a:	9202      	str	r2, [sp, #8]
 800d57c:	9301      	str	r3, [sp, #4]
 800d57e:	2300      	movs	r3, #0
 800d580:	9300      	str	r3, [sp, #0]
 800d582:	2300      	movs	r3, #0
 800d584:	460a      	mov	r2, r1
 800d586:	4924      	ldr	r1, [pc, #144]	; (800d618 <vTaskStartScheduler+0xc0>)
 800d588:	4824      	ldr	r0, [pc, #144]	; (800d61c <vTaskStartScheduler+0xc4>)
 800d58a:	f7ff fdf9 	bl	800d180 <xTaskCreateStatic>
 800d58e:	4603      	mov	r3, r0
 800d590:	4a23      	ldr	r2, [pc, #140]	; (800d620 <vTaskStartScheduler+0xc8>)
 800d592:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d594:	4b22      	ldr	r3, [pc, #136]	; (800d620 <vTaskStartScheduler+0xc8>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d002      	beq.n	800d5a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d59c:	2301      	movs	r3, #1
 800d59e:	617b      	str	r3, [r7, #20]
 800d5a0:	e001      	b.n	800d5a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	2b01      	cmp	r3, #1
 800d5aa:	d102      	bne.n	800d5b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d5ac:	f000 fd10 	bl	800dfd0 <xTimerCreateTimerTask>
 800d5b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	d11b      	bne.n	800d5f0 <vTaskStartScheduler+0x98>
	__asm volatile
 800d5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5bc:	f383 8811 	msr	BASEPRI, r3
 800d5c0:	f3bf 8f6f 	isb	sy
 800d5c4:	f3bf 8f4f 	dsb	sy
 800d5c8:	613b      	str	r3, [r7, #16]
}
 800d5ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d5cc:	4b15      	ldr	r3, [pc, #84]	; (800d624 <vTaskStartScheduler+0xcc>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	3354      	adds	r3, #84	; 0x54
 800d5d2:	4a15      	ldr	r2, [pc, #84]	; (800d628 <vTaskStartScheduler+0xd0>)
 800d5d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d5d6:	4b15      	ldr	r3, [pc, #84]	; (800d62c <vTaskStartScheduler+0xd4>)
 800d5d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d5dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d5de:	4b14      	ldr	r3, [pc, #80]	; (800d630 <vTaskStartScheduler+0xd8>)
 800d5e0:	2201      	movs	r2, #1
 800d5e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d5e4:	4b13      	ldr	r3, [pc, #76]	; (800d634 <vTaskStartScheduler+0xdc>)
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d5ea:	f001 f8c9 	bl	800e780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d5ee:	e00e      	b.n	800d60e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5f6:	d10a      	bne.n	800d60e <vTaskStartScheduler+0xb6>
	__asm volatile
 800d5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5fc:	f383 8811 	msr	BASEPRI, r3
 800d600:	f3bf 8f6f 	isb	sy
 800d604:	f3bf 8f4f 	dsb	sy
 800d608:	60fb      	str	r3, [r7, #12]
}
 800d60a:	bf00      	nop
 800d60c:	e7fe      	b.n	800d60c <vTaskStartScheduler+0xb4>
}
 800d60e:	bf00      	nop
 800d610:	3718      	adds	r7, #24
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	080124d0 	.word	0x080124d0
 800d61c:	0800dc5d 	.word	0x0800dc5d
 800d620:	200019c8 	.word	0x200019c8
 800d624:	200014d0 	.word	0x200014d0
 800d628:	20000018 	.word	0x20000018
 800d62c:	200019c4 	.word	0x200019c4
 800d630:	200019b0 	.word	0x200019b0
 800d634:	200019a8 	.word	0x200019a8

0800d638 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d638:	b480      	push	{r7}
 800d63a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d63c:	4b04      	ldr	r3, [pc, #16]	; (800d650 <vTaskSuspendAll+0x18>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	3301      	adds	r3, #1
 800d642:	4a03      	ldr	r2, [pc, #12]	; (800d650 <vTaskSuspendAll+0x18>)
 800d644:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d646:	bf00      	nop
 800d648:	46bd      	mov	sp, r7
 800d64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64e:	4770      	bx	lr
 800d650:	200019cc 	.word	0x200019cc

0800d654 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b084      	sub	sp, #16
 800d658:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d65a:	2300      	movs	r3, #0
 800d65c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d65e:	2300      	movs	r3, #0
 800d660:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d662:	4b42      	ldr	r3, [pc, #264]	; (800d76c <xTaskResumeAll+0x118>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d10a      	bne.n	800d680 <xTaskResumeAll+0x2c>
	__asm volatile
 800d66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d66e:	f383 8811 	msr	BASEPRI, r3
 800d672:	f3bf 8f6f 	isb	sy
 800d676:	f3bf 8f4f 	dsb	sy
 800d67a:	603b      	str	r3, [r7, #0]
}
 800d67c:	bf00      	nop
 800d67e:	e7fe      	b.n	800d67e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d680:	f001 f920 	bl	800e8c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d684:	4b39      	ldr	r3, [pc, #228]	; (800d76c <xTaskResumeAll+0x118>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	3b01      	subs	r3, #1
 800d68a:	4a38      	ldr	r2, [pc, #224]	; (800d76c <xTaskResumeAll+0x118>)
 800d68c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d68e:	4b37      	ldr	r3, [pc, #220]	; (800d76c <xTaskResumeAll+0x118>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d162      	bne.n	800d75c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d696:	4b36      	ldr	r3, [pc, #216]	; (800d770 <xTaskResumeAll+0x11c>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d05e      	beq.n	800d75c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d69e:	e02f      	b.n	800d700 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6a0:	4b34      	ldr	r3, [pc, #208]	; (800d774 <xTaskResumeAll+0x120>)
 800d6a2:	68db      	ldr	r3, [r3, #12]
 800d6a4:	68db      	ldr	r3, [r3, #12]
 800d6a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	3318      	adds	r3, #24
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f7ff f851 	bl	800c754 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	3304      	adds	r3, #4
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f7ff f84c 	bl	800c754 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6c0:	4b2d      	ldr	r3, [pc, #180]	; (800d778 <xTaskResumeAll+0x124>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	d903      	bls.n	800d6d0 <xTaskResumeAll+0x7c>
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6cc:	4a2a      	ldr	r2, [pc, #168]	; (800d778 <xTaskResumeAll+0x124>)
 800d6ce:	6013      	str	r3, [r2, #0]
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6d4:	4613      	mov	r3, r2
 800d6d6:	009b      	lsls	r3, r3, #2
 800d6d8:	4413      	add	r3, r2
 800d6da:	009b      	lsls	r3, r3, #2
 800d6dc:	4a27      	ldr	r2, [pc, #156]	; (800d77c <xTaskResumeAll+0x128>)
 800d6de:	441a      	add	r2, r3
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	3304      	adds	r3, #4
 800d6e4:	4619      	mov	r1, r3
 800d6e6:	4610      	mov	r0, r2
 800d6e8:	f7fe ffd7 	bl	800c69a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6f0:	4b23      	ldr	r3, [pc, #140]	; (800d780 <xTaskResumeAll+0x12c>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d302      	bcc.n	800d700 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d6fa:	4b22      	ldr	r3, [pc, #136]	; (800d784 <xTaskResumeAll+0x130>)
 800d6fc:	2201      	movs	r2, #1
 800d6fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d700:	4b1c      	ldr	r3, [pc, #112]	; (800d774 <xTaskResumeAll+0x120>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d1cb      	bne.n	800d6a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d001      	beq.n	800d712 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d70e:	f000 fb5f 	bl	800ddd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d712:	4b1d      	ldr	r3, [pc, #116]	; (800d788 <xTaskResumeAll+0x134>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d010      	beq.n	800d740 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d71e:	f000 f847 	bl	800d7b0 <xTaskIncrementTick>
 800d722:	4603      	mov	r3, r0
 800d724:	2b00      	cmp	r3, #0
 800d726:	d002      	beq.n	800d72e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d728:	4b16      	ldr	r3, [pc, #88]	; (800d784 <xTaskResumeAll+0x130>)
 800d72a:	2201      	movs	r2, #1
 800d72c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	3b01      	subs	r3, #1
 800d732:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d1f1      	bne.n	800d71e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d73a:	4b13      	ldr	r3, [pc, #76]	; (800d788 <xTaskResumeAll+0x134>)
 800d73c:	2200      	movs	r2, #0
 800d73e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d740:	4b10      	ldr	r3, [pc, #64]	; (800d784 <xTaskResumeAll+0x130>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d009      	beq.n	800d75c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d748:	2301      	movs	r3, #1
 800d74a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d74c:	4b0f      	ldr	r3, [pc, #60]	; (800d78c <xTaskResumeAll+0x138>)
 800d74e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d752:	601a      	str	r2, [r3, #0]
 800d754:	f3bf 8f4f 	dsb	sy
 800d758:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d75c:	f001 f8e2 	bl	800e924 <vPortExitCritical>

	return xAlreadyYielded;
 800d760:	68bb      	ldr	r3, [r7, #8]
}
 800d762:	4618      	mov	r0, r3
 800d764:	3710      	adds	r7, #16
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}
 800d76a:	bf00      	nop
 800d76c:	200019cc 	.word	0x200019cc
 800d770:	200019a4 	.word	0x200019a4
 800d774:	20001964 	.word	0x20001964
 800d778:	200019ac 	.word	0x200019ac
 800d77c:	200014d4 	.word	0x200014d4
 800d780:	200014d0 	.word	0x200014d0
 800d784:	200019b8 	.word	0x200019b8
 800d788:	200019b4 	.word	0x200019b4
 800d78c:	e000ed04 	.word	0xe000ed04

0800d790 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d790:	b480      	push	{r7}
 800d792:	b083      	sub	sp, #12
 800d794:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d796:	4b05      	ldr	r3, [pc, #20]	; (800d7ac <xTaskGetTickCount+0x1c>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d79c:	687b      	ldr	r3, [r7, #4]
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	370c      	adds	r7, #12
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a8:	4770      	bx	lr
 800d7aa:	bf00      	nop
 800d7ac:	200019a8 	.word	0x200019a8

0800d7b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b086      	sub	sp, #24
 800d7b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7ba:	4b4f      	ldr	r3, [pc, #316]	; (800d8f8 <xTaskIncrementTick+0x148>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	f040 808f 	bne.w	800d8e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d7c4:	4b4d      	ldr	r3, [pc, #308]	; (800d8fc <xTaskIncrementTick+0x14c>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d7cc:	4a4b      	ldr	r2, [pc, #300]	; (800d8fc <xTaskIncrementTick+0x14c>)
 800d7ce:	693b      	ldr	r3, [r7, #16]
 800d7d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d120      	bne.n	800d81a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d7d8:	4b49      	ldr	r3, [pc, #292]	; (800d900 <xTaskIncrementTick+0x150>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d00a      	beq.n	800d7f8 <xTaskIncrementTick+0x48>
	__asm volatile
 800d7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e6:	f383 8811 	msr	BASEPRI, r3
 800d7ea:	f3bf 8f6f 	isb	sy
 800d7ee:	f3bf 8f4f 	dsb	sy
 800d7f2:	603b      	str	r3, [r7, #0]
}
 800d7f4:	bf00      	nop
 800d7f6:	e7fe      	b.n	800d7f6 <xTaskIncrementTick+0x46>
 800d7f8:	4b41      	ldr	r3, [pc, #260]	; (800d900 <xTaskIncrementTick+0x150>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	60fb      	str	r3, [r7, #12]
 800d7fe:	4b41      	ldr	r3, [pc, #260]	; (800d904 <xTaskIncrementTick+0x154>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	4a3f      	ldr	r2, [pc, #252]	; (800d900 <xTaskIncrementTick+0x150>)
 800d804:	6013      	str	r3, [r2, #0]
 800d806:	4a3f      	ldr	r2, [pc, #252]	; (800d904 <xTaskIncrementTick+0x154>)
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	6013      	str	r3, [r2, #0]
 800d80c:	4b3e      	ldr	r3, [pc, #248]	; (800d908 <xTaskIncrementTick+0x158>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	3301      	adds	r3, #1
 800d812:	4a3d      	ldr	r2, [pc, #244]	; (800d908 <xTaskIncrementTick+0x158>)
 800d814:	6013      	str	r3, [r2, #0]
 800d816:	f000 fadb 	bl	800ddd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d81a:	4b3c      	ldr	r3, [pc, #240]	; (800d90c <xTaskIncrementTick+0x15c>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	693a      	ldr	r2, [r7, #16]
 800d820:	429a      	cmp	r2, r3
 800d822:	d349      	bcc.n	800d8b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d824:	4b36      	ldr	r3, [pc, #216]	; (800d900 <xTaskIncrementTick+0x150>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d104      	bne.n	800d838 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d82e:	4b37      	ldr	r3, [pc, #220]	; (800d90c <xTaskIncrementTick+0x15c>)
 800d830:	f04f 32ff 	mov.w	r2, #4294967295
 800d834:	601a      	str	r2, [r3, #0]
					break;
 800d836:	e03f      	b.n	800d8b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d838:	4b31      	ldr	r3, [pc, #196]	; (800d900 <xTaskIncrementTick+0x150>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	68db      	ldr	r3, [r3, #12]
 800d83e:	68db      	ldr	r3, [r3, #12]
 800d840:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	685b      	ldr	r3, [r3, #4]
 800d846:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d848:	693a      	ldr	r2, [r7, #16]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d203      	bcs.n	800d858 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d850:	4a2e      	ldr	r2, [pc, #184]	; (800d90c <xTaskIncrementTick+0x15c>)
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d856:	e02f      	b.n	800d8b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	3304      	adds	r3, #4
 800d85c:	4618      	mov	r0, r3
 800d85e:	f7fe ff79 	bl	800c754 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d866:	2b00      	cmp	r3, #0
 800d868:	d004      	beq.n	800d874 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	3318      	adds	r3, #24
 800d86e:	4618      	mov	r0, r3
 800d870:	f7fe ff70 	bl	800c754 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d878:	4b25      	ldr	r3, [pc, #148]	; (800d910 <xTaskIncrementTick+0x160>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d903      	bls.n	800d888 <xTaskIncrementTick+0xd8>
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d884:	4a22      	ldr	r2, [pc, #136]	; (800d910 <xTaskIncrementTick+0x160>)
 800d886:	6013      	str	r3, [r2, #0]
 800d888:	68bb      	ldr	r3, [r7, #8]
 800d88a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d88c:	4613      	mov	r3, r2
 800d88e:	009b      	lsls	r3, r3, #2
 800d890:	4413      	add	r3, r2
 800d892:	009b      	lsls	r3, r3, #2
 800d894:	4a1f      	ldr	r2, [pc, #124]	; (800d914 <xTaskIncrementTick+0x164>)
 800d896:	441a      	add	r2, r3
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	3304      	adds	r3, #4
 800d89c:	4619      	mov	r1, r3
 800d89e:	4610      	mov	r0, r2
 800d8a0:	f7fe fefb 	bl	800c69a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8a8:	4b1b      	ldr	r3, [pc, #108]	; (800d918 <xTaskIncrementTick+0x168>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ae:	429a      	cmp	r2, r3
 800d8b0:	d3b8      	bcc.n	800d824 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d8b6:	e7b5      	b.n	800d824 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d8b8:	4b17      	ldr	r3, [pc, #92]	; (800d918 <xTaskIncrementTick+0x168>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8be:	4915      	ldr	r1, [pc, #84]	; (800d914 <xTaskIncrementTick+0x164>)
 800d8c0:	4613      	mov	r3, r2
 800d8c2:	009b      	lsls	r3, r3, #2
 800d8c4:	4413      	add	r3, r2
 800d8c6:	009b      	lsls	r3, r3, #2
 800d8c8:	440b      	add	r3, r1
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	2b01      	cmp	r3, #1
 800d8ce:	d901      	bls.n	800d8d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d8d4:	4b11      	ldr	r3, [pc, #68]	; (800d91c <xTaskIncrementTick+0x16c>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d007      	beq.n	800d8ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d8dc:	2301      	movs	r3, #1
 800d8de:	617b      	str	r3, [r7, #20]
 800d8e0:	e004      	b.n	800d8ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d8e2:	4b0f      	ldr	r3, [pc, #60]	; (800d920 <xTaskIncrementTick+0x170>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	4a0d      	ldr	r2, [pc, #52]	; (800d920 <xTaskIncrementTick+0x170>)
 800d8ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d8ec:	697b      	ldr	r3, [r7, #20]
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3718      	adds	r7, #24
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}
 800d8f6:	bf00      	nop
 800d8f8:	200019cc 	.word	0x200019cc
 800d8fc:	200019a8 	.word	0x200019a8
 800d900:	2000195c 	.word	0x2000195c
 800d904:	20001960 	.word	0x20001960
 800d908:	200019bc 	.word	0x200019bc
 800d90c:	200019c4 	.word	0x200019c4
 800d910:	200019ac 	.word	0x200019ac
 800d914:	200014d4 	.word	0x200014d4
 800d918:	200014d0 	.word	0x200014d0
 800d91c:	200019b8 	.word	0x200019b8
 800d920:	200019b4 	.word	0x200019b4

0800d924 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d924:	b480      	push	{r7}
 800d926:	b085      	sub	sp, #20
 800d928:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d92a:	4b2a      	ldr	r3, [pc, #168]	; (800d9d4 <vTaskSwitchContext+0xb0>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d003      	beq.n	800d93a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d932:	4b29      	ldr	r3, [pc, #164]	; (800d9d8 <vTaskSwitchContext+0xb4>)
 800d934:	2201      	movs	r2, #1
 800d936:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d938:	e046      	b.n	800d9c8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d93a:	4b27      	ldr	r3, [pc, #156]	; (800d9d8 <vTaskSwitchContext+0xb4>)
 800d93c:	2200      	movs	r2, #0
 800d93e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d940:	4b26      	ldr	r3, [pc, #152]	; (800d9dc <vTaskSwitchContext+0xb8>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	60fb      	str	r3, [r7, #12]
 800d946:	e010      	b.n	800d96a <vTaskSwitchContext+0x46>
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d10a      	bne.n	800d964 <vTaskSwitchContext+0x40>
	__asm volatile
 800d94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d952:	f383 8811 	msr	BASEPRI, r3
 800d956:	f3bf 8f6f 	isb	sy
 800d95a:	f3bf 8f4f 	dsb	sy
 800d95e:	607b      	str	r3, [r7, #4]
}
 800d960:	bf00      	nop
 800d962:	e7fe      	b.n	800d962 <vTaskSwitchContext+0x3e>
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	3b01      	subs	r3, #1
 800d968:	60fb      	str	r3, [r7, #12]
 800d96a:	491d      	ldr	r1, [pc, #116]	; (800d9e0 <vTaskSwitchContext+0xbc>)
 800d96c:	68fa      	ldr	r2, [r7, #12]
 800d96e:	4613      	mov	r3, r2
 800d970:	009b      	lsls	r3, r3, #2
 800d972:	4413      	add	r3, r2
 800d974:	009b      	lsls	r3, r3, #2
 800d976:	440b      	add	r3, r1
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d0e4      	beq.n	800d948 <vTaskSwitchContext+0x24>
 800d97e:	68fa      	ldr	r2, [r7, #12]
 800d980:	4613      	mov	r3, r2
 800d982:	009b      	lsls	r3, r3, #2
 800d984:	4413      	add	r3, r2
 800d986:	009b      	lsls	r3, r3, #2
 800d988:	4a15      	ldr	r2, [pc, #84]	; (800d9e0 <vTaskSwitchContext+0xbc>)
 800d98a:	4413      	add	r3, r2
 800d98c:	60bb      	str	r3, [r7, #8]
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	685b      	ldr	r3, [r3, #4]
 800d992:	685a      	ldr	r2, [r3, #4]
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	605a      	str	r2, [r3, #4]
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	685a      	ldr	r2, [r3, #4]
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	3308      	adds	r3, #8
 800d9a0:	429a      	cmp	r2, r3
 800d9a2:	d104      	bne.n	800d9ae <vTaskSwitchContext+0x8a>
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	685a      	ldr	r2, [r3, #4]
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	605a      	str	r2, [r3, #4]
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	685b      	ldr	r3, [r3, #4]
 800d9b2:	68db      	ldr	r3, [r3, #12]
 800d9b4:	4a0b      	ldr	r2, [pc, #44]	; (800d9e4 <vTaskSwitchContext+0xc0>)
 800d9b6:	6013      	str	r3, [r2, #0]
 800d9b8:	4a08      	ldr	r2, [pc, #32]	; (800d9dc <vTaskSwitchContext+0xb8>)
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d9be:	4b09      	ldr	r3, [pc, #36]	; (800d9e4 <vTaskSwitchContext+0xc0>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	3354      	adds	r3, #84	; 0x54
 800d9c4:	4a08      	ldr	r2, [pc, #32]	; (800d9e8 <vTaskSwitchContext+0xc4>)
 800d9c6:	6013      	str	r3, [r2, #0]
}
 800d9c8:	bf00      	nop
 800d9ca:	3714      	adds	r7, #20
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d2:	4770      	bx	lr
 800d9d4:	200019cc 	.word	0x200019cc
 800d9d8:	200019b8 	.word	0x200019b8
 800d9dc:	200019ac 	.word	0x200019ac
 800d9e0:	200014d4 	.word	0x200014d4
 800d9e4:	200014d0 	.word	0x200014d0
 800d9e8:	20000018 	.word	0x20000018

0800d9ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b084      	sub	sp, #16
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d10a      	bne.n	800da12 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da00:	f383 8811 	msr	BASEPRI, r3
 800da04:	f3bf 8f6f 	isb	sy
 800da08:	f3bf 8f4f 	dsb	sy
 800da0c:	60fb      	str	r3, [r7, #12]
}
 800da0e:	bf00      	nop
 800da10:	e7fe      	b.n	800da10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800da12:	4b07      	ldr	r3, [pc, #28]	; (800da30 <vTaskPlaceOnEventList+0x44>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	3318      	adds	r3, #24
 800da18:	4619      	mov	r1, r3
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f7fe fe61 	bl	800c6e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800da20:	2101      	movs	r1, #1
 800da22:	6838      	ldr	r0, [r7, #0]
 800da24:	f000 fa80 	bl	800df28 <prvAddCurrentTaskToDelayedList>
}
 800da28:	bf00      	nop
 800da2a:	3710      	adds	r7, #16
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}
 800da30:	200014d0 	.word	0x200014d0

0800da34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800da34:	b580      	push	{r7, lr}
 800da36:	b086      	sub	sp, #24
 800da38:	af00      	add	r7, sp, #0
 800da3a:	60f8      	str	r0, [r7, #12]
 800da3c:	60b9      	str	r1, [r7, #8]
 800da3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d10a      	bne.n	800da5c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800da46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da4a:	f383 8811 	msr	BASEPRI, r3
 800da4e:	f3bf 8f6f 	isb	sy
 800da52:	f3bf 8f4f 	dsb	sy
 800da56:	617b      	str	r3, [r7, #20]
}
 800da58:	bf00      	nop
 800da5a:	e7fe      	b.n	800da5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800da5c:	4b0a      	ldr	r3, [pc, #40]	; (800da88 <vTaskPlaceOnEventListRestricted+0x54>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	3318      	adds	r3, #24
 800da62:	4619      	mov	r1, r3
 800da64:	68f8      	ldr	r0, [r7, #12]
 800da66:	f7fe fe18 	bl	800c69a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d002      	beq.n	800da76 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800da70:	f04f 33ff 	mov.w	r3, #4294967295
 800da74:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800da76:	6879      	ldr	r1, [r7, #4]
 800da78:	68b8      	ldr	r0, [r7, #8]
 800da7a:	f000 fa55 	bl	800df28 <prvAddCurrentTaskToDelayedList>
	}
 800da7e:	bf00      	nop
 800da80:	3718      	adds	r7, #24
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	200014d0 	.word	0x200014d0

0800da8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b086      	sub	sp, #24
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	68db      	ldr	r3, [r3, #12]
 800da98:	68db      	ldr	r3, [r3, #12]
 800da9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800da9c:	693b      	ldr	r3, [r7, #16]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d10a      	bne.n	800dab8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800daa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa6:	f383 8811 	msr	BASEPRI, r3
 800daaa:	f3bf 8f6f 	isb	sy
 800daae:	f3bf 8f4f 	dsb	sy
 800dab2:	60fb      	str	r3, [r7, #12]
}
 800dab4:	bf00      	nop
 800dab6:	e7fe      	b.n	800dab6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dab8:	693b      	ldr	r3, [r7, #16]
 800daba:	3318      	adds	r3, #24
 800dabc:	4618      	mov	r0, r3
 800dabe:	f7fe fe49 	bl	800c754 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dac2:	4b1e      	ldr	r3, [pc, #120]	; (800db3c <xTaskRemoveFromEventList+0xb0>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d11d      	bne.n	800db06 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	3304      	adds	r3, #4
 800dace:	4618      	mov	r0, r3
 800dad0:	f7fe fe40 	bl	800c754 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dad4:	693b      	ldr	r3, [r7, #16]
 800dad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dad8:	4b19      	ldr	r3, [pc, #100]	; (800db40 <xTaskRemoveFromEventList+0xb4>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	429a      	cmp	r2, r3
 800dade:	d903      	bls.n	800dae8 <xTaskRemoveFromEventList+0x5c>
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dae4:	4a16      	ldr	r2, [pc, #88]	; (800db40 <xTaskRemoveFromEventList+0xb4>)
 800dae6:	6013      	str	r3, [r2, #0]
 800dae8:	693b      	ldr	r3, [r7, #16]
 800daea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daec:	4613      	mov	r3, r2
 800daee:	009b      	lsls	r3, r3, #2
 800daf0:	4413      	add	r3, r2
 800daf2:	009b      	lsls	r3, r3, #2
 800daf4:	4a13      	ldr	r2, [pc, #76]	; (800db44 <xTaskRemoveFromEventList+0xb8>)
 800daf6:	441a      	add	r2, r3
 800daf8:	693b      	ldr	r3, [r7, #16]
 800dafa:	3304      	adds	r3, #4
 800dafc:	4619      	mov	r1, r3
 800dafe:	4610      	mov	r0, r2
 800db00:	f7fe fdcb 	bl	800c69a <vListInsertEnd>
 800db04:	e005      	b.n	800db12 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800db06:	693b      	ldr	r3, [r7, #16]
 800db08:	3318      	adds	r3, #24
 800db0a:	4619      	mov	r1, r3
 800db0c:	480e      	ldr	r0, [pc, #56]	; (800db48 <xTaskRemoveFromEventList+0xbc>)
 800db0e:	f7fe fdc4 	bl	800c69a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800db12:	693b      	ldr	r3, [r7, #16]
 800db14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db16:	4b0d      	ldr	r3, [pc, #52]	; (800db4c <xTaskRemoveFromEventList+0xc0>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d905      	bls.n	800db2c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800db20:	2301      	movs	r3, #1
 800db22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800db24:	4b0a      	ldr	r3, [pc, #40]	; (800db50 <xTaskRemoveFromEventList+0xc4>)
 800db26:	2201      	movs	r2, #1
 800db28:	601a      	str	r2, [r3, #0]
 800db2a:	e001      	b.n	800db30 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800db2c:	2300      	movs	r3, #0
 800db2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800db30:	697b      	ldr	r3, [r7, #20]
}
 800db32:	4618      	mov	r0, r3
 800db34:	3718      	adds	r7, #24
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}
 800db3a:	bf00      	nop
 800db3c:	200019cc 	.word	0x200019cc
 800db40:	200019ac 	.word	0x200019ac
 800db44:	200014d4 	.word	0x200014d4
 800db48:	20001964 	.word	0x20001964
 800db4c:	200014d0 	.word	0x200014d0
 800db50:	200019b8 	.word	0x200019b8

0800db54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800db54:	b480      	push	{r7}
 800db56:	b083      	sub	sp, #12
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800db5c:	4b06      	ldr	r3, [pc, #24]	; (800db78 <vTaskInternalSetTimeOutState+0x24>)
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800db64:	4b05      	ldr	r3, [pc, #20]	; (800db7c <vTaskInternalSetTimeOutState+0x28>)
 800db66:	681a      	ldr	r2, [r3, #0]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	605a      	str	r2, [r3, #4]
}
 800db6c:	bf00      	nop
 800db6e:	370c      	adds	r7, #12
 800db70:	46bd      	mov	sp, r7
 800db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db76:	4770      	bx	lr
 800db78:	200019bc 	.word	0x200019bc
 800db7c:	200019a8 	.word	0x200019a8

0800db80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b088      	sub	sp, #32
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
 800db88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d10a      	bne.n	800dba6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800db90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db94:	f383 8811 	msr	BASEPRI, r3
 800db98:	f3bf 8f6f 	isb	sy
 800db9c:	f3bf 8f4f 	dsb	sy
 800dba0:	613b      	str	r3, [r7, #16]
}
 800dba2:	bf00      	nop
 800dba4:	e7fe      	b.n	800dba4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d10a      	bne.n	800dbc2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800dbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb0:	f383 8811 	msr	BASEPRI, r3
 800dbb4:	f3bf 8f6f 	isb	sy
 800dbb8:	f3bf 8f4f 	dsb	sy
 800dbbc:	60fb      	str	r3, [r7, #12]
}
 800dbbe:	bf00      	nop
 800dbc0:	e7fe      	b.n	800dbc0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dbc2:	f000 fe7f 	bl	800e8c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dbc6:	4b1d      	ldr	r3, [pc, #116]	; (800dc3c <xTaskCheckForTimeOut+0xbc>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	69ba      	ldr	r2, [r7, #24]
 800dbd2:	1ad3      	subs	r3, r2, r3
 800dbd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbde:	d102      	bne.n	800dbe6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	61fb      	str	r3, [r7, #28]
 800dbe4:	e023      	b.n	800dc2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681a      	ldr	r2, [r3, #0]
 800dbea:	4b15      	ldr	r3, [pc, #84]	; (800dc40 <xTaskCheckForTimeOut+0xc0>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	429a      	cmp	r2, r3
 800dbf0:	d007      	beq.n	800dc02 <xTaskCheckForTimeOut+0x82>
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	685b      	ldr	r3, [r3, #4]
 800dbf6:	69ba      	ldr	r2, [r7, #24]
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d302      	bcc.n	800dc02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	61fb      	str	r3, [r7, #28]
 800dc00:	e015      	b.n	800dc2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	697a      	ldr	r2, [r7, #20]
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d20b      	bcs.n	800dc24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	681a      	ldr	r2, [r3, #0]
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	1ad2      	subs	r2, r2, r3
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f7ff ff9b 	bl	800db54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	61fb      	str	r3, [r7, #28]
 800dc22:	e004      	b.n	800dc2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	2200      	movs	r2, #0
 800dc28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dc2e:	f000 fe79 	bl	800e924 <vPortExitCritical>

	return xReturn;
 800dc32:	69fb      	ldr	r3, [r7, #28]
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3720      	adds	r7, #32
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}
 800dc3c:	200019a8 	.word	0x200019a8
 800dc40:	200019bc 	.word	0x200019bc

0800dc44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dc44:	b480      	push	{r7}
 800dc46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dc48:	4b03      	ldr	r3, [pc, #12]	; (800dc58 <vTaskMissedYield+0x14>)
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	601a      	str	r2, [r3, #0]
}
 800dc4e:	bf00      	nop
 800dc50:	46bd      	mov	sp, r7
 800dc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc56:	4770      	bx	lr
 800dc58:	200019b8 	.word	0x200019b8

0800dc5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b082      	sub	sp, #8
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dc64:	f000 f852 	bl	800dd0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dc68:	4b06      	ldr	r3, [pc, #24]	; (800dc84 <prvIdleTask+0x28>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	2b01      	cmp	r3, #1
 800dc6e:	d9f9      	bls.n	800dc64 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dc70:	4b05      	ldr	r3, [pc, #20]	; (800dc88 <prvIdleTask+0x2c>)
 800dc72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc76:	601a      	str	r2, [r3, #0]
 800dc78:	f3bf 8f4f 	dsb	sy
 800dc7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dc80:	e7f0      	b.n	800dc64 <prvIdleTask+0x8>
 800dc82:	bf00      	nop
 800dc84:	200014d4 	.word	0x200014d4
 800dc88:	e000ed04 	.word	0xe000ed04

0800dc8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b082      	sub	sp, #8
 800dc90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dc92:	2300      	movs	r3, #0
 800dc94:	607b      	str	r3, [r7, #4]
 800dc96:	e00c      	b.n	800dcb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dc98:	687a      	ldr	r2, [r7, #4]
 800dc9a:	4613      	mov	r3, r2
 800dc9c:	009b      	lsls	r3, r3, #2
 800dc9e:	4413      	add	r3, r2
 800dca0:	009b      	lsls	r3, r3, #2
 800dca2:	4a12      	ldr	r2, [pc, #72]	; (800dcec <prvInitialiseTaskLists+0x60>)
 800dca4:	4413      	add	r3, r2
 800dca6:	4618      	mov	r0, r3
 800dca8:	f7fe fcca 	bl	800c640 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	3301      	adds	r3, #1
 800dcb0:	607b      	str	r3, [r7, #4]
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2b37      	cmp	r3, #55	; 0x37
 800dcb6:	d9ef      	bls.n	800dc98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dcb8:	480d      	ldr	r0, [pc, #52]	; (800dcf0 <prvInitialiseTaskLists+0x64>)
 800dcba:	f7fe fcc1 	bl	800c640 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dcbe:	480d      	ldr	r0, [pc, #52]	; (800dcf4 <prvInitialiseTaskLists+0x68>)
 800dcc0:	f7fe fcbe 	bl	800c640 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dcc4:	480c      	ldr	r0, [pc, #48]	; (800dcf8 <prvInitialiseTaskLists+0x6c>)
 800dcc6:	f7fe fcbb 	bl	800c640 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dcca:	480c      	ldr	r0, [pc, #48]	; (800dcfc <prvInitialiseTaskLists+0x70>)
 800dccc:	f7fe fcb8 	bl	800c640 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dcd0:	480b      	ldr	r0, [pc, #44]	; (800dd00 <prvInitialiseTaskLists+0x74>)
 800dcd2:	f7fe fcb5 	bl	800c640 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dcd6:	4b0b      	ldr	r3, [pc, #44]	; (800dd04 <prvInitialiseTaskLists+0x78>)
 800dcd8:	4a05      	ldr	r2, [pc, #20]	; (800dcf0 <prvInitialiseTaskLists+0x64>)
 800dcda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dcdc:	4b0a      	ldr	r3, [pc, #40]	; (800dd08 <prvInitialiseTaskLists+0x7c>)
 800dcde:	4a05      	ldr	r2, [pc, #20]	; (800dcf4 <prvInitialiseTaskLists+0x68>)
 800dce0:	601a      	str	r2, [r3, #0]
}
 800dce2:	bf00      	nop
 800dce4:	3708      	adds	r7, #8
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}
 800dcea:	bf00      	nop
 800dcec:	200014d4 	.word	0x200014d4
 800dcf0:	20001934 	.word	0x20001934
 800dcf4:	20001948 	.word	0x20001948
 800dcf8:	20001964 	.word	0x20001964
 800dcfc:	20001978 	.word	0x20001978
 800dd00:	20001990 	.word	0x20001990
 800dd04:	2000195c 	.word	0x2000195c
 800dd08:	20001960 	.word	0x20001960

0800dd0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b082      	sub	sp, #8
 800dd10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dd12:	e019      	b.n	800dd48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dd14:	f000 fdd6 	bl	800e8c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd18:	4b10      	ldr	r3, [pc, #64]	; (800dd5c <prvCheckTasksWaitingTermination+0x50>)
 800dd1a:	68db      	ldr	r3, [r3, #12]
 800dd1c:	68db      	ldr	r3, [r3, #12]
 800dd1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	3304      	adds	r3, #4
 800dd24:	4618      	mov	r0, r3
 800dd26:	f7fe fd15 	bl	800c754 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dd2a:	4b0d      	ldr	r3, [pc, #52]	; (800dd60 <prvCheckTasksWaitingTermination+0x54>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	3b01      	subs	r3, #1
 800dd30:	4a0b      	ldr	r2, [pc, #44]	; (800dd60 <prvCheckTasksWaitingTermination+0x54>)
 800dd32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dd34:	4b0b      	ldr	r3, [pc, #44]	; (800dd64 <prvCheckTasksWaitingTermination+0x58>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	3b01      	subs	r3, #1
 800dd3a:	4a0a      	ldr	r2, [pc, #40]	; (800dd64 <prvCheckTasksWaitingTermination+0x58>)
 800dd3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dd3e:	f000 fdf1 	bl	800e924 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f000 f810 	bl	800dd68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dd48:	4b06      	ldr	r3, [pc, #24]	; (800dd64 <prvCheckTasksWaitingTermination+0x58>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d1e1      	bne.n	800dd14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dd50:	bf00      	nop
 800dd52:	bf00      	nop
 800dd54:	3708      	adds	r7, #8
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
 800dd5a:	bf00      	nop
 800dd5c:	20001978 	.word	0x20001978
 800dd60:	200019a4 	.word	0x200019a4
 800dd64:	2000198c 	.word	0x2000198c

0800dd68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b084      	sub	sp, #16
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	3354      	adds	r3, #84	; 0x54
 800dd74:	4618      	mov	r0, r3
 800dd76:	f001 ff85 	bl	800fc84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d108      	bne.n	800dd96 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f000 ff89 	bl	800eca0 <vPortFree>
				vPortFree( pxTCB );
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 ff86 	bl	800eca0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dd94:	e018      	b.n	800ddc8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800dd9c:	2b01      	cmp	r3, #1
 800dd9e:	d103      	bne.n	800dda8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f000 ff7d 	bl	800eca0 <vPortFree>
	}
 800dda6:	e00f      	b.n	800ddc8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ddae:	2b02      	cmp	r3, #2
 800ddb0:	d00a      	beq.n	800ddc8 <prvDeleteTCB+0x60>
	__asm volatile
 800ddb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb6:	f383 8811 	msr	BASEPRI, r3
 800ddba:	f3bf 8f6f 	isb	sy
 800ddbe:	f3bf 8f4f 	dsb	sy
 800ddc2:	60fb      	str	r3, [r7, #12]
}
 800ddc4:	bf00      	nop
 800ddc6:	e7fe      	b.n	800ddc6 <prvDeleteTCB+0x5e>
	}
 800ddc8:	bf00      	nop
 800ddca:	3710      	adds	r7, #16
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}

0800ddd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b083      	sub	sp, #12
 800ddd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ddd6:	4b0c      	ldr	r3, [pc, #48]	; (800de08 <prvResetNextTaskUnblockTime+0x38>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d104      	bne.n	800ddea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dde0:	4b0a      	ldr	r3, [pc, #40]	; (800de0c <prvResetNextTaskUnblockTime+0x3c>)
 800dde2:	f04f 32ff 	mov.w	r2, #4294967295
 800dde6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dde8:	e008      	b.n	800ddfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddea:	4b07      	ldr	r3, [pc, #28]	; (800de08 <prvResetNextTaskUnblockTime+0x38>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	68db      	ldr	r3, [r3, #12]
 800ddf0:	68db      	ldr	r3, [r3, #12]
 800ddf2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	685b      	ldr	r3, [r3, #4]
 800ddf8:	4a04      	ldr	r2, [pc, #16]	; (800de0c <prvResetNextTaskUnblockTime+0x3c>)
 800ddfa:	6013      	str	r3, [r2, #0]
}
 800ddfc:	bf00      	nop
 800ddfe:	370c      	adds	r7, #12
 800de00:	46bd      	mov	sp, r7
 800de02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de06:	4770      	bx	lr
 800de08:	2000195c 	.word	0x2000195c
 800de0c:	200019c4 	.word	0x200019c4

0800de10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800de10:	b480      	push	{r7}
 800de12:	b083      	sub	sp, #12
 800de14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800de16:	4b0b      	ldr	r3, [pc, #44]	; (800de44 <xTaskGetSchedulerState+0x34>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d102      	bne.n	800de24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800de1e:	2301      	movs	r3, #1
 800de20:	607b      	str	r3, [r7, #4]
 800de22:	e008      	b.n	800de36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de24:	4b08      	ldr	r3, [pc, #32]	; (800de48 <xTaskGetSchedulerState+0x38>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d102      	bne.n	800de32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800de2c:	2302      	movs	r3, #2
 800de2e:	607b      	str	r3, [r7, #4]
 800de30:	e001      	b.n	800de36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800de32:	2300      	movs	r3, #0
 800de34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800de36:	687b      	ldr	r3, [r7, #4]
	}
 800de38:	4618      	mov	r0, r3
 800de3a:	370c      	adds	r7, #12
 800de3c:	46bd      	mov	sp, r7
 800de3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de42:	4770      	bx	lr
 800de44:	200019b0 	.word	0x200019b0
 800de48:	200019cc 	.word	0x200019cc

0800de4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b086      	sub	sp, #24
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800de58:	2300      	movs	r3, #0
 800de5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d056      	beq.n	800df10 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800de62:	4b2e      	ldr	r3, [pc, #184]	; (800df1c <xTaskPriorityDisinherit+0xd0>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	693a      	ldr	r2, [r7, #16]
 800de68:	429a      	cmp	r2, r3
 800de6a:	d00a      	beq.n	800de82 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800de6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de70:	f383 8811 	msr	BASEPRI, r3
 800de74:	f3bf 8f6f 	isb	sy
 800de78:	f3bf 8f4f 	dsb	sy
 800de7c:	60fb      	str	r3, [r7, #12]
}
 800de7e:	bf00      	nop
 800de80:	e7fe      	b.n	800de80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800de82:	693b      	ldr	r3, [r7, #16]
 800de84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de86:	2b00      	cmp	r3, #0
 800de88:	d10a      	bne.n	800dea0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800de8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de8e:	f383 8811 	msr	BASEPRI, r3
 800de92:	f3bf 8f6f 	isb	sy
 800de96:	f3bf 8f4f 	dsb	sy
 800de9a:	60bb      	str	r3, [r7, #8]
}
 800de9c:	bf00      	nop
 800de9e:	e7fe      	b.n	800de9e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dea0:	693b      	ldr	r3, [r7, #16]
 800dea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dea4:	1e5a      	subs	r2, r3, #1
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800deaa:	693b      	ldr	r3, [r7, #16]
 800deac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d02c      	beq.n	800df10 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800deba:	2b00      	cmp	r3, #0
 800debc:	d128      	bne.n	800df10 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800debe:	693b      	ldr	r3, [r7, #16]
 800dec0:	3304      	adds	r3, #4
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7fe fc46 	bl	800c754 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dec8:	693b      	ldr	r3, [r7, #16]
 800deca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800decc:	693b      	ldr	r3, [r7, #16]
 800dece:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ded4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ded8:	693b      	ldr	r3, [r7, #16]
 800deda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dedc:	693b      	ldr	r3, [r7, #16]
 800dede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dee0:	4b0f      	ldr	r3, [pc, #60]	; (800df20 <xTaskPriorityDisinherit+0xd4>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	429a      	cmp	r2, r3
 800dee6:	d903      	bls.n	800def0 <xTaskPriorityDisinherit+0xa4>
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deec:	4a0c      	ldr	r2, [pc, #48]	; (800df20 <xTaskPriorityDisinherit+0xd4>)
 800deee:	6013      	str	r3, [r2, #0]
 800def0:	693b      	ldr	r3, [r7, #16]
 800def2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800def4:	4613      	mov	r3, r2
 800def6:	009b      	lsls	r3, r3, #2
 800def8:	4413      	add	r3, r2
 800defa:	009b      	lsls	r3, r3, #2
 800defc:	4a09      	ldr	r2, [pc, #36]	; (800df24 <xTaskPriorityDisinherit+0xd8>)
 800defe:	441a      	add	r2, r3
 800df00:	693b      	ldr	r3, [r7, #16]
 800df02:	3304      	adds	r3, #4
 800df04:	4619      	mov	r1, r3
 800df06:	4610      	mov	r0, r2
 800df08:	f7fe fbc7 	bl	800c69a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800df0c:	2301      	movs	r3, #1
 800df0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800df10:	697b      	ldr	r3, [r7, #20]
	}
 800df12:	4618      	mov	r0, r3
 800df14:	3718      	adds	r7, #24
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}
 800df1a:	bf00      	nop
 800df1c:	200014d0 	.word	0x200014d0
 800df20:	200019ac 	.word	0x200019ac
 800df24:	200014d4 	.word	0x200014d4

0800df28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b084      	sub	sp, #16
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800df32:	4b21      	ldr	r3, [pc, #132]	; (800dfb8 <prvAddCurrentTaskToDelayedList+0x90>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df38:	4b20      	ldr	r3, [pc, #128]	; (800dfbc <prvAddCurrentTaskToDelayedList+0x94>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	3304      	adds	r3, #4
 800df3e:	4618      	mov	r0, r3
 800df40:	f7fe fc08 	bl	800c754 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df4a:	d10a      	bne.n	800df62 <prvAddCurrentTaskToDelayedList+0x3a>
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d007      	beq.n	800df62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df52:	4b1a      	ldr	r3, [pc, #104]	; (800dfbc <prvAddCurrentTaskToDelayedList+0x94>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	3304      	adds	r3, #4
 800df58:	4619      	mov	r1, r3
 800df5a:	4819      	ldr	r0, [pc, #100]	; (800dfc0 <prvAddCurrentTaskToDelayedList+0x98>)
 800df5c:	f7fe fb9d 	bl	800c69a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800df60:	e026      	b.n	800dfb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800df62:	68fa      	ldr	r2, [r7, #12]
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	4413      	add	r3, r2
 800df68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800df6a:	4b14      	ldr	r3, [pc, #80]	; (800dfbc <prvAddCurrentTaskToDelayedList+0x94>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	68ba      	ldr	r2, [r7, #8]
 800df70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800df72:	68ba      	ldr	r2, [r7, #8]
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	429a      	cmp	r2, r3
 800df78:	d209      	bcs.n	800df8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df7a:	4b12      	ldr	r3, [pc, #72]	; (800dfc4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800df7c:	681a      	ldr	r2, [r3, #0]
 800df7e:	4b0f      	ldr	r3, [pc, #60]	; (800dfbc <prvAddCurrentTaskToDelayedList+0x94>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	3304      	adds	r3, #4
 800df84:	4619      	mov	r1, r3
 800df86:	4610      	mov	r0, r2
 800df88:	f7fe fbab 	bl	800c6e2 <vListInsert>
}
 800df8c:	e010      	b.n	800dfb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df8e:	4b0e      	ldr	r3, [pc, #56]	; (800dfc8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800df90:	681a      	ldr	r2, [r3, #0]
 800df92:	4b0a      	ldr	r3, [pc, #40]	; (800dfbc <prvAddCurrentTaskToDelayedList+0x94>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	3304      	adds	r3, #4
 800df98:	4619      	mov	r1, r3
 800df9a:	4610      	mov	r0, r2
 800df9c:	f7fe fba1 	bl	800c6e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dfa0:	4b0a      	ldr	r3, [pc, #40]	; (800dfcc <prvAddCurrentTaskToDelayedList+0xa4>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	68ba      	ldr	r2, [r7, #8]
 800dfa6:	429a      	cmp	r2, r3
 800dfa8:	d202      	bcs.n	800dfb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dfaa:	4a08      	ldr	r2, [pc, #32]	; (800dfcc <prvAddCurrentTaskToDelayedList+0xa4>)
 800dfac:	68bb      	ldr	r3, [r7, #8]
 800dfae:	6013      	str	r3, [r2, #0]
}
 800dfb0:	bf00      	nop
 800dfb2:	3710      	adds	r7, #16
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}
 800dfb8:	200019a8 	.word	0x200019a8
 800dfbc:	200014d0 	.word	0x200014d0
 800dfc0:	20001990 	.word	0x20001990
 800dfc4:	20001960 	.word	0x20001960
 800dfc8:	2000195c 	.word	0x2000195c
 800dfcc:	200019c4 	.word	0x200019c4

0800dfd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b08a      	sub	sp, #40	; 0x28
 800dfd4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dfda:	f000 fb07 	bl	800e5ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dfde:	4b1c      	ldr	r3, [pc, #112]	; (800e050 <xTimerCreateTimerTask+0x80>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d021      	beq.n	800e02a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dfea:	2300      	movs	r3, #0
 800dfec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dfee:	1d3a      	adds	r2, r7, #4
 800dff0:	f107 0108 	add.w	r1, r7, #8
 800dff4:	f107 030c 	add.w	r3, r7, #12
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7fe fb07 	bl	800c60c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dffe:	6879      	ldr	r1, [r7, #4]
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	68fa      	ldr	r2, [r7, #12]
 800e004:	9202      	str	r2, [sp, #8]
 800e006:	9301      	str	r3, [sp, #4]
 800e008:	2302      	movs	r3, #2
 800e00a:	9300      	str	r3, [sp, #0]
 800e00c:	2300      	movs	r3, #0
 800e00e:	460a      	mov	r2, r1
 800e010:	4910      	ldr	r1, [pc, #64]	; (800e054 <xTimerCreateTimerTask+0x84>)
 800e012:	4811      	ldr	r0, [pc, #68]	; (800e058 <xTimerCreateTimerTask+0x88>)
 800e014:	f7ff f8b4 	bl	800d180 <xTaskCreateStatic>
 800e018:	4603      	mov	r3, r0
 800e01a:	4a10      	ldr	r2, [pc, #64]	; (800e05c <xTimerCreateTimerTask+0x8c>)
 800e01c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e01e:	4b0f      	ldr	r3, [pc, #60]	; (800e05c <xTimerCreateTimerTask+0x8c>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d001      	beq.n	800e02a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e026:	2301      	movs	r3, #1
 800e028:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d10a      	bne.n	800e046 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e034:	f383 8811 	msr	BASEPRI, r3
 800e038:	f3bf 8f6f 	isb	sy
 800e03c:	f3bf 8f4f 	dsb	sy
 800e040:	613b      	str	r3, [r7, #16]
}
 800e042:	bf00      	nop
 800e044:	e7fe      	b.n	800e044 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e046:	697b      	ldr	r3, [r7, #20]
}
 800e048:	4618      	mov	r0, r3
 800e04a:	3718      	adds	r7, #24
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}
 800e050:	20001a00 	.word	0x20001a00
 800e054:	080124d8 	.word	0x080124d8
 800e058:	0800e195 	.word	0x0800e195
 800e05c:	20001a04 	.word	0x20001a04

0800e060 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b08a      	sub	sp, #40	; 0x28
 800e064:	af00      	add	r7, sp, #0
 800e066:	60f8      	str	r0, [r7, #12]
 800e068:	60b9      	str	r1, [r7, #8]
 800e06a:	607a      	str	r2, [r7, #4]
 800e06c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e06e:	2300      	movs	r3, #0
 800e070:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d10a      	bne.n	800e08e <xTimerGenericCommand+0x2e>
	__asm volatile
 800e078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e07c:	f383 8811 	msr	BASEPRI, r3
 800e080:	f3bf 8f6f 	isb	sy
 800e084:	f3bf 8f4f 	dsb	sy
 800e088:	623b      	str	r3, [r7, #32]
}
 800e08a:	bf00      	nop
 800e08c:	e7fe      	b.n	800e08c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e08e:	4b1a      	ldr	r3, [pc, #104]	; (800e0f8 <xTimerGenericCommand+0x98>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d02a      	beq.n	800e0ec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	2b05      	cmp	r3, #5
 800e0a6:	dc18      	bgt.n	800e0da <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e0a8:	f7ff feb2 	bl	800de10 <xTaskGetSchedulerState>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	2b02      	cmp	r3, #2
 800e0b0:	d109      	bne.n	800e0c6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e0b2:	4b11      	ldr	r3, [pc, #68]	; (800e0f8 <xTimerGenericCommand+0x98>)
 800e0b4:	6818      	ldr	r0, [r3, #0]
 800e0b6:	f107 0110 	add.w	r1, r7, #16
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0be:	f7fe fc77 	bl	800c9b0 <xQueueGenericSend>
 800e0c2:	6278      	str	r0, [r7, #36]	; 0x24
 800e0c4:	e012      	b.n	800e0ec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e0c6:	4b0c      	ldr	r3, [pc, #48]	; (800e0f8 <xTimerGenericCommand+0x98>)
 800e0c8:	6818      	ldr	r0, [r3, #0]
 800e0ca:	f107 0110 	add.w	r1, r7, #16
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	f7fe fc6d 	bl	800c9b0 <xQueueGenericSend>
 800e0d6:	6278      	str	r0, [r7, #36]	; 0x24
 800e0d8:	e008      	b.n	800e0ec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e0da:	4b07      	ldr	r3, [pc, #28]	; (800e0f8 <xTimerGenericCommand+0x98>)
 800e0dc:	6818      	ldr	r0, [r3, #0]
 800e0de:	f107 0110 	add.w	r1, r7, #16
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	683a      	ldr	r2, [r7, #0]
 800e0e6:	f7fe fd61 	bl	800cbac <xQueueGenericSendFromISR>
 800e0ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3728      	adds	r7, #40	; 0x28
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	bf00      	nop
 800e0f8:	20001a00 	.word	0x20001a00

0800e0fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b088      	sub	sp, #32
 800e100:	af02      	add	r7, sp, #8
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e106:	4b22      	ldr	r3, [pc, #136]	; (800e190 <prvProcessExpiredTimer+0x94>)
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	68db      	ldr	r3, [r3, #12]
 800e10c:	68db      	ldr	r3, [r3, #12]
 800e10e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	3304      	adds	r3, #4
 800e114:	4618      	mov	r0, r3
 800e116:	f7fe fb1d 	bl	800c754 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e120:	f003 0304 	and.w	r3, r3, #4
 800e124:	2b00      	cmp	r3, #0
 800e126:	d022      	beq.n	800e16e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	699a      	ldr	r2, [r3, #24]
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	18d1      	adds	r1, r2, r3
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	683a      	ldr	r2, [r7, #0]
 800e134:	6978      	ldr	r0, [r7, #20]
 800e136:	f000 f8d1 	bl	800e2dc <prvInsertTimerInActiveList>
 800e13a:	4603      	mov	r3, r0
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d01f      	beq.n	800e180 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e140:	2300      	movs	r3, #0
 800e142:	9300      	str	r3, [sp, #0]
 800e144:	2300      	movs	r3, #0
 800e146:	687a      	ldr	r2, [r7, #4]
 800e148:	2100      	movs	r1, #0
 800e14a:	6978      	ldr	r0, [r7, #20]
 800e14c:	f7ff ff88 	bl	800e060 <xTimerGenericCommand>
 800e150:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d113      	bne.n	800e180 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e15c:	f383 8811 	msr	BASEPRI, r3
 800e160:	f3bf 8f6f 	isb	sy
 800e164:	f3bf 8f4f 	dsb	sy
 800e168:	60fb      	str	r3, [r7, #12]
}
 800e16a:	bf00      	nop
 800e16c:	e7fe      	b.n	800e16c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e174:	f023 0301 	bic.w	r3, r3, #1
 800e178:	b2da      	uxtb	r2, r3
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e180:	697b      	ldr	r3, [r7, #20]
 800e182:	6a1b      	ldr	r3, [r3, #32]
 800e184:	6978      	ldr	r0, [r7, #20]
 800e186:	4798      	blx	r3
}
 800e188:	bf00      	nop
 800e18a:	3718      	adds	r7, #24
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}
 800e190:	200019f8 	.word	0x200019f8

0800e194 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b084      	sub	sp, #16
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e19c:	f107 0308 	add.w	r3, r7, #8
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f000 f857 	bl	800e254 <prvGetNextExpireTime>
 800e1a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	4619      	mov	r1, r3
 800e1ac:	68f8      	ldr	r0, [r7, #12]
 800e1ae:	f000 f803 	bl	800e1b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e1b2:	f000 f8d5 	bl	800e360 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e1b6:	e7f1      	b.n	800e19c <prvTimerTask+0x8>

0800e1b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b084      	sub	sp, #16
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
 800e1c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e1c2:	f7ff fa39 	bl	800d638 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e1c6:	f107 0308 	add.w	r3, r7, #8
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f000 f866 	bl	800e29c <prvSampleTimeNow>
 800e1d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d130      	bne.n	800e23a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d10a      	bne.n	800e1f4 <prvProcessTimerOrBlockTask+0x3c>
 800e1de:	687a      	ldr	r2, [r7, #4]
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	429a      	cmp	r2, r3
 800e1e4:	d806      	bhi.n	800e1f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e1e6:	f7ff fa35 	bl	800d654 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e1ea:	68f9      	ldr	r1, [r7, #12]
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f7ff ff85 	bl	800e0fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e1f2:	e024      	b.n	800e23e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d008      	beq.n	800e20c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e1fa:	4b13      	ldr	r3, [pc, #76]	; (800e248 <prvProcessTimerOrBlockTask+0x90>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d101      	bne.n	800e208 <prvProcessTimerOrBlockTask+0x50>
 800e204:	2301      	movs	r3, #1
 800e206:	e000      	b.n	800e20a <prvProcessTimerOrBlockTask+0x52>
 800e208:	2300      	movs	r3, #0
 800e20a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e20c:	4b0f      	ldr	r3, [pc, #60]	; (800e24c <prvProcessTimerOrBlockTask+0x94>)
 800e20e:	6818      	ldr	r0, [r3, #0]
 800e210:	687a      	ldr	r2, [r7, #4]
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	1ad3      	subs	r3, r2, r3
 800e216:	683a      	ldr	r2, [r7, #0]
 800e218:	4619      	mov	r1, r3
 800e21a:	f7fe ff7d 	bl	800d118 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e21e:	f7ff fa19 	bl	800d654 <xTaskResumeAll>
 800e222:	4603      	mov	r3, r0
 800e224:	2b00      	cmp	r3, #0
 800e226:	d10a      	bne.n	800e23e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e228:	4b09      	ldr	r3, [pc, #36]	; (800e250 <prvProcessTimerOrBlockTask+0x98>)
 800e22a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e22e:	601a      	str	r2, [r3, #0]
 800e230:	f3bf 8f4f 	dsb	sy
 800e234:	f3bf 8f6f 	isb	sy
}
 800e238:	e001      	b.n	800e23e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e23a:	f7ff fa0b 	bl	800d654 <xTaskResumeAll>
}
 800e23e:	bf00      	nop
 800e240:	3710      	adds	r7, #16
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}
 800e246:	bf00      	nop
 800e248:	200019fc 	.word	0x200019fc
 800e24c:	20001a00 	.word	0x20001a00
 800e250:	e000ed04 	.word	0xe000ed04

0800e254 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e254:	b480      	push	{r7}
 800e256:	b085      	sub	sp, #20
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e25c:	4b0e      	ldr	r3, [pc, #56]	; (800e298 <prvGetNextExpireTime+0x44>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d101      	bne.n	800e26a <prvGetNextExpireTime+0x16>
 800e266:	2201      	movs	r2, #1
 800e268:	e000      	b.n	800e26c <prvGetNextExpireTime+0x18>
 800e26a:	2200      	movs	r2, #0
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d105      	bne.n	800e284 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e278:	4b07      	ldr	r3, [pc, #28]	; (800e298 <prvGetNextExpireTime+0x44>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	68db      	ldr	r3, [r3, #12]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	60fb      	str	r3, [r7, #12]
 800e282:	e001      	b.n	800e288 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e284:	2300      	movs	r3, #0
 800e286:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e288:	68fb      	ldr	r3, [r7, #12]
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3714      	adds	r7, #20
 800e28e:	46bd      	mov	sp, r7
 800e290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e294:	4770      	bx	lr
 800e296:	bf00      	nop
 800e298:	200019f8 	.word	0x200019f8

0800e29c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b084      	sub	sp, #16
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e2a4:	f7ff fa74 	bl	800d790 <xTaskGetTickCount>
 800e2a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e2aa:	4b0b      	ldr	r3, [pc, #44]	; (800e2d8 <prvSampleTimeNow+0x3c>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	68fa      	ldr	r2, [r7, #12]
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	d205      	bcs.n	800e2c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e2b4:	f000 f936 	bl	800e524 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2201      	movs	r2, #1
 800e2bc:	601a      	str	r2, [r3, #0]
 800e2be:	e002      	b.n	800e2c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e2c6:	4a04      	ldr	r2, [pc, #16]	; (800e2d8 <prvSampleTimeNow+0x3c>)
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	3710      	adds	r7, #16
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}
 800e2d6:	bf00      	nop
 800e2d8:	20001a08 	.word	0x20001a08

0800e2dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b086      	sub	sp, #24
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	60f8      	str	r0, [r7, #12]
 800e2e4:	60b9      	str	r1, [r7, #8]
 800e2e6:	607a      	str	r2, [r7, #4]
 800e2e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	68ba      	ldr	r2, [r7, #8]
 800e2f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	68fa      	ldr	r2, [r7, #12]
 800e2f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e2fa:	68ba      	ldr	r2, [r7, #8]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	429a      	cmp	r2, r3
 800e300:	d812      	bhi.n	800e328 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e302:	687a      	ldr	r2, [r7, #4]
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	1ad2      	subs	r2, r2, r3
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	699b      	ldr	r3, [r3, #24]
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d302      	bcc.n	800e316 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e310:	2301      	movs	r3, #1
 800e312:	617b      	str	r3, [r7, #20]
 800e314:	e01b      	b.n	800e34e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e316:	4b10      	ldr	r3, [pc, #64]	; (800e358 <prvInsertTimerInActiveList+0x7c>)
 800e318:	681a      	ldr	r2, [r3, #0]
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	3304      	adds	r3, #4
 800e31e:	4619      	mov	r1, r3
 800e320:	4610      	mov	r0, r2
 800e322:	f7fe f9de 	bl	800c6e2 <vListInsert>
 800e326:	e012      	b.n	800e34e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e328:	687a      	ldr	r2, [r7, #4]
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	429a      	cmp	r2, r3
 800e32e:	d206      	bcs.n	800e33e <prvInsertTimerInActiveList+0x62>
 800e330:	68ba      	ldr	r2, [r7, #8]
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	429a      	cmp	r2, r3
 800e336:	d302      	bcc.n	800e33e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e338:	2301      	movs	r3, #1
 800e33a:	617b      	str	r3, [r7, #20]
 800e33c:	e007      	b.n	800e34e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e33e:	4b07      	ldr	r3, [pc, #28]	; (800e35c <prvInsertTimerInActiveList+0x80>)
 800e340:	681a      	ldr	r2, [r3, #0]
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	3304      	adds	r3, #4
 800e346:	4619      	mov	r1, r3
 800e348:	4610      	mov	r0, r2
 800e34a:	f7fe f9ca 	bl	800c6e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e34e:	697b      	ldr	r3, [r7, #20]
}
 800e350:	4618      	mov	r0, r3
 800e352:	3718      	adds	r7, #24
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}
 800e358:	200019fc 	.word	0x200019fc
 800e35c:	200019f8 	.word	0x200019f8

0800e360 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b08e      	sub	sp, #56	; 0x38
 800e364:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e366:	e0ca      	b.n	800e4fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	da18      	bge.n	800e3a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e36e:	1d3b      	adds	r3, r7, #4
 800e370:	3304      	adds	r3, #4
 800e372:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e376:	2b00      	cmp	r3, #0
 800e378:	d10a      	bne.n	800e390 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e37e:	f383 8811 	msr	BASEPRI, r3
 800e382:	f3bf 8f6f 	isb	sy
 800e386:	f3bf 8f4f 	dsb	sy
 800e38a:	61fb      	str	r3, [r7, #28]
}
 800e38c:	bf00      	nop
 800e38e:	e7fe      	b.n	800e38e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e396:	6850      	ldr	r0, [r2, #4]
 800e398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e39a:	6892      	ldr	r2, [r2, #8]
 800e39c:	4611      	mov	r1, r2
 800e39e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	f2c0 80aa 	blt.w	800e4fc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ae:	695b      	ldr	r3, [r3, #20]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d004      	beq.n	800e3be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b6:	3304      	adds	r3, #4
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f7fe f9cb 	bl	800c754 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e3be:	463b      	mov	r3, r7
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f7ff ff6b 	bl	800e29c <prvSampleTimeNow>
 800e3c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2b09      	cmp	r3, #9
 800e3cc:	f200 8097 	bhi.w	800e4fe <prvProcessReceivedCommands+0x19e>
 800e3d0:	a201      	add	r2, pc, #4	; (adr r2, 800e3d8 <prvProcessReceivedCommands+0x78>)
 800e3d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3d6:	bf00      	nop
 800e3d8:	0800e401 	.word	0x0800e401
 800e3dc:	0800e401 	.word	0x0800e401
 800e3e0:	0800e401 	.word	0x0800e401
 800e3e4:	0800e475 	.word	0x0800e475
 800e3e8:	0800e489 	.word	0x0800e489
 800e3ec:	0800e4d3 	.word	0x0800e4d3
 800e3f0:	0800e401 	.word	0x0800e401
 800e3f4:	0800e401 	.word	0x0800e401
 800e3f8:	0800e475 	.word	0x0800e475
 800e3fc:	0800e489 	.word	0x0800e489
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e402:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e406:	f043 0301 	orr.w	r3, r3, #1
 800e40a:	b2da      	uxtb	r2, r3
 800e40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e40e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e412:	68ba      	ldr	r2, [r7, #8]
 800e414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e416:	699b      	ldr	r3, [r3, #24]
 800e418:	18d1      	adds	r1, r2, r3
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e41e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e420:	f7ff ff5c 	bl	800e2dc <prvInsertTimerInActiveList>
 800e424:	4603      	mov	r3, r0
 800e426:	2b00      	cmp	r3, #0
 800e428:	d069      	beq.n	800e4fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e42c:	6a1b      	ldr	r3, [r3, #32]
 800e42e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e430:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e434:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e438:	f003 0304 	and.w	r3, r3, #4
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d05e      	beq.n	800e4fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e440:	68ba      	ldr	r2, [r7, #8]
 800e442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e444:	699b      	ldr	r3, [r3, #24]
 800e446:	441a      	add	r2, r3
 800e448:	2300      	movs	r3, #0
 800e44a:	9300      	str	r3, [sp, #0]
 800e44c:	2300      	movs	r3, #0
 800e44e:	2100      	movs	r1, #0
 800e450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e452:	f7ff fe05 	bl	800e060 <xTimerGenericCommand>
 800e456:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e458:	6a3b      	ldr	r3, [r7, #32]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d14f      	bne.n	800e4fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e462:	f383 8811 	msr	BASEPRI, r3
 800e466:	f3bf 8f6f 	isb	sy
 800e46a:	f3bf 8f4f 	dsb	sy
 800e46e:	61bb      	str	r3, [r7, #24]
}
 800e470:	bf00      	nop
 800e472:	e7fe      	b.n	800e472 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e476:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e47a:	f023 0301 	bic.w	r3, r3, #1
 800e47e:	b2da      	uxtb	r2, r3
 800e480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e482:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e486:	e03a      	b.n	800e4fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e48e:	f043 0301 	orr.w	r3, r3, #1
 800e492:	b2da      	uxtb	r2, r3
 800e494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e496:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e49a:	68ba      	ldr	r2, [r7, #8]
 800e49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e49e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a2:	699b      	ldr	r3, [r3, #24]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d10a      	bne.n	800e4be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ac:	f383 8811 	msr	BASEPRI, r3
 800e4b0:	f3bf 8f6f 	isb	sy
 800e4b4:	f3bf 8f4f 	dsb	sy
 800e4b8:	617b      	str	r3, [r7, #20]
}
 800e4ba:	bf00      	nop
 800e4bc:	e7fe      	b.n	800e4bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c0:	699a      	ldr	r2, [r3, #24]
 800e4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c4:	18d1      	adds	r1, r2, r3
 800e4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4cc:	f7ff ff06 	bl	800e2dc <prvInsertTimerInActiveList>
					break;
 800e4d0:	e015      	b.n	800e4fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4d8:	f003 0302 	and.w	r3, r3, #2
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d103      	bne.n	800e4e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e4e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4e2:	f000 fbdd 	bl	800eca0 <vPortFree>
 800e4e6:	e00a      	b.n	800e4fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4ee:	f023 0301 	bic.w	r3, r3, #1
 800e4f2:	b2da      	uxtb	r2, r3
 800e4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e4fa:	e000      	b.n	800e4fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e4fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e4fe:	4b08      	ldr	r3, [pc, #32]	; (800e520 <prvProcessReceivedCommands+0x1c0>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	1d39      	adds	r1, r7, #4
 800e504:	2200      	movs	r2, #0
 800e506:	4618      	mov	r0, r3
 800e508:	f7fe fbec 	bl	800cce4 <xQueueReceive>
 800e50c:	4603      	mov	r3, r0
 800e50e:	2b00      	cmp	r3, #0
 800e510:	f47f af2a 	bne.w	800e368 <prvProcessReceivedCommands+0x8>
	}
}
 800e514:	bf00      	nop
 800e516:	bf00      	nop
 800e518:	3730      	adds	r7, #48	; 0x30
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}
 800e51e:	bf00      	nop
 800e520:	20001a00 	.word	0x20001a00

0800e524 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b088      	sub	sp, #32
 800e528:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e52a:	e048      	b.n	800e5be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e52c:	4b2d      	ldr	r3, [pc, #180]	; (800e5e4 <prvSwitchTimerLists+0xc0>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	68db      	ldr	r3, [r3, #12]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e536:	4b2b      	ldr	r3, [pc, #172]	; (800e5e4 <prvSwitchTimerLists+0xc0>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	68db      	ldr	r3, [r3, #12]
 800e53c:	68db      	ldr	r3, [r3, #12]
 800e53e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	3304      	adds	r3, #4
 800e544:	4618      	mov	r0, r3
 800e546:	f7fe f905 	bl	800c754 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	6a1b      	ldr	r3, [r3, #32]
 800e54e:	68f8      	ldr	r0, [r7, #12]
 800e550:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e558:	f003 0304 	and.w	r3, r3, #4
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d02e      	beq.n	800e5be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	699b      	ldr	r3, [r3, #24]
 800e564:	693a      	ldr	r2, [r7, #16]
 800e566:	4413      	add	r3, r2
 800e568:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e56a:	68ba      	ldr	r2, [r7, #8]
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	429a      	cmp	r2, r3
 800e570:	d90e      	bls.n	800e590 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	68ba      	ldr	r2, [r7, #8]
 800e576:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	68fa      	ldr	r2, [r7, #12]
 800e57c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e57e:	4b19      	ldr	r3, [pc, #100]	; (800e5e4 <prvSwitchTimerLists+0xc0>)
 800e580:	681a      	ldr	r2, [r3, #0]
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	3304      	adds	r3, #4
 800e586:	4619      	mov	r1, r3
 800e588:	4610      	mov	r0, r2
 800e58a:	f7fe f8aa 	bl	800c6e2 <vListInsert>
 800e58e:	e016      	b.n	800e5be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e590:	2300      	movs	r3, #0
 800e592:	9300      	str	r3, [sp, #0]
 800e594:	2300      	movs	r3, #0
 800e596:	693a      	ldr	r2, [r7, #16]
 800e598:	2100      	movs	r1, #0
 800e59a:	68f8      	ldr	r0, [r7, #12]
 800e59c:	f7ff fd60 	bl	800e060 <xTimerGenericCommand>
 800e5a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d10a      	bne.n	800e5be <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ac:	f383 8811 	msr	BASEPRI, r3
 800e5b0:	f3bf 8f6f 	isb	sy
 800e5b4:	f3bf 8f4f 	dsb	sy
 800e5b8:	603b      	str	r3, [r7, #0]
}
 800e5ba:	bf00      	nop
 800e5bc:	e7fe      	b.n	800e5bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e5be:	4b09      	ldr	r3, [pc, #36]	; (800e5e4 <prvSwitchTimerLists+0xc0>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d1b1      	bne.n	800e52c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e5c8:	4b06      	ldr	r3, [pc, #24]	; (800e5e4 <prvSwitchTimerLists+0xc0>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e5ce:	4b06      	ldr	r3, [pc, #24]	; (800e5e8 <prvSwitchTimerLists+0xc4>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	4a04      	ldr	r2, [pc, #16]	; (800e5e4 <prvSwitchTimerLists+0xc0>)
 800e5d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e5d6:	4a04      	ldr	r2, [pc, #16]	; (800e5e8 <prvSwitchTimerLists+0xc4>)
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	6013      	str	r3, [r2, #0]
}
 800e5dc:	bf00      	nop
 800e5de:	3718      	adds	r7, #24
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}
 800e5e4:	200019f8 	.word	0x200019f8
 800e5e8:	200019fc 	.word	0x200019fc

0800e5ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b082      	sub	sp, #8
 800e5f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e5f2:	f000 f967 	bl	800e8c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e5f6:	4b15      	ldr	r3, [pc, #84]	; (800e64c <prvCheckForValidListAndQueue+0x60>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d120      	bne.n	800e640 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e5fe:	4814      	ldr	r0, [pc, #80]	; (800e650 <prvCheckForValidListAndQueue+0x64>)
 800e600:	f7fe f81e 	bl	800c640 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e604:	4813      	ldr	r0, [pc, #76]	; (800e654 <prvCheckForValidListAndQueue+0x68>)
 800e606:	f7fe f81b 	bl	800c640 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e60a:	4b13      	ldr	r3, [pc, #76]	; (800e658 <prvCheckForValidListAndQueue+0x6c>)
 800e60c:	4a10      	ldr	r2, [pc, #64]	; (800e650 <prvCheckForValidListAndQueue+0x64>)
 800e60e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e610:	4b12      	ldr	r3, [pc, #72]	; (800e65c <prvCheckForValidListAndQueue+0x70>)
 800e612:	4a10      	ldr	r2, [pc, #64]	; (800e654 <prvCheckForValidListAndQueue+0x68>)
 800e614:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e616:	2300      	movs	r3, #0
 800e618:	9300      	str	r3, [sp, #0]
 800e61a:	4b11      	ldr	r3, [pc, #68]	; (800e660 <prvCheckForValidListAndQueue+0x74>)
 800e61c:	4a11      	ldr	r2, [pc, #68]	; (800e664 <prvCheckForValidListAndQueue+0x78>)
 800e61e:	2110      	movs	r1, #16
 800e620:	200a      	movs	r0, #10
 800e622:	f7fe f929 	bl	800c878 <xQueueGenericCreateStatic>
 800e626:	4603      	mov	r3, r0
 800e628:	4a08      	ldr	r2, [pc, #32]	; (800e64c <prvCheckForValidListAndQueue+0x60>)
 800e62a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e62c:	4b07      	ldr	r3, [pc, #28]	; (800e64c <prvCheckForValidListAndQueue+0x60>)
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d005      	beq.n	800e640 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e634:	4b05      	ldr	r3, [pc, #20]	; (800e64c <prvCheckForValidListAndQueue+0x60>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	490b      	ldr	r1, [pc, #44]	; (800e668 <prvCheckForValidListAndQueue+0x7c>)
 800e63a:	4618      	mov	r0, r3
 800e63c:	f7fe fd42 	bl	800d0c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e640:	f000 f970 	bl	800e924 <vPortExitCritical>
}
 800e644:	bf00      	nop
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}
 800e64a:	bf00      	nop
 800e64c:	20001a00 	.word	0x20001a00
 800e650:	200019d0 	.word	0x200019d0
 800e654:	200019e4 	.word	0x200019e4
 800e658:	200019f8 	.word	0x200019f8
 800e65c:	200019fc 	.word	0x200019fc
 800e660:	20001aac 	.word	0x20001aac
 800e664:	20001a0c 	.word	0x20001a0c
 800e668:	080124e0 	.word	0x080124e0

0800e66c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e66c:	b480      	push	{r7}
 800e66e:	b085      	sub	sp, #20
 800e670:	af00      	add	r7, sp, #0
 800e672:	60f8      	str	r0, [r7, #12]
 800e674:	60b9      	str	r1, [r7, #8]
 800e676:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	3b04      	subs	r3, #4
 800e67c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e684:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	3b04      	subs	r3, #4
 800e68a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	f023 0201 	bic.w	r2, r3, #1
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	3b04      	subs	r3, #4
 800e69a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e69c:	4a0c      	ldr	r2, [pc, #48]	; (800e6d0 <pxPortInitialiseStack+0x64>)
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	3b14      	subs	r3, #20
 800e6a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e6a8:	687a      	ldr	r2, [r7, #4]
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	3b04      	subs	r3, #4
 800e6b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	f06f 0202 	mvn.w	r2, #2
 800e6ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	3b20      	subs	r3, #32
 800e6c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	3714      	adds	r7, #20
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ce:	4770      	bx	lr
 800e6d0:	0800e6d5 	.word	0x0800e6d5

0800e6d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b085      	sub	sp, #20
 800e6d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e6de:	4b12      	ldr	r3, [pc, #72]	; (800e728 <prvTaskExitError+0x54>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6e6:	d00a      	beq.n	800e6fe <prvTaskExitError+0x2a>
	__asm volatile
 800e6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ec:	f383 8811 	msr	BASEPRI, r3
 800e6f0:	f3bf 8f6f 	isb	sy
 800e6f4:	f3bf 8f4f 	dsb	sy
 800e6f8:	60fb      	str	r3, [r7, #12]
}
 800e6fa:	bf00      	nop
 800e6fc:	e7fe      	b.n	800e6fc <prvTaskExitError+0x28>
	__asm volatile
 800e6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e702:	f383 8811 	msr	BASEPRI, r3
 800e706:	f3bf 8f6f 	isb	sy
 800e70a:	f3bf 8f4f 	dsb	sy
 800e70e:	60bb      	str	r3, [r7, #8]
}
 800e710:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e712:	bf00      	nop
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d0fc      	beq.n	800e714 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e71a:	bf00      	nop
 800e71c:	bf00      	nop
 800e71e:	3714      	adds	r7, #20
 800e720:	46bd      	mov	sp, r7
 800e722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e726:	4770      	bx	lr
 800e728:	20000014 	.word	0x20000014
 800e72c:	00000000 	.word	0x00000000

0800e730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e730:	4b07      	ldr	r3, [pc, #28]	; (800e750 <pxCurrentTCBConst2>)
 800e732:	6819      	ldr	r1, [r3, #0]
 800e734:	6808      	ldr	r0, [r1, #0]
 800e736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e73a:	f380 8809 	msr	PSP, r0
 800e73e:	f3bf 8f6f 	isb	sy
 800e742:	f04f 0000 	mov.w	r0, #0
 800e746:	f380 8811 	msr	BASEPRI, r0
 800e74a:	4770      	bx	lr
 800e74c:	f3af 8000 	nop.w

0800e750 <pxCurrentTCBConst2>:
 800e750:	200014d0 	.word	0x200014d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e754:	bf00      	nop
 800e756:	bf00      	nop

0800e758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e758:	4808      	ldr	r0, [pc, #32]	; (800e77c <prvPortStartFirstTask+0x24>)
 800e75a:	6800      	ldr	r0, [r0, #0]
 800e75c:	6800      	ldr	r0, [r0, #0]
 800e75e:	f380 8808 	msr	MSP, r0
 800e762:	f04f 0000 	mov.w	r0, #0
 800e766:	f380 8814 	msr	CONTROL, r0
 800e76a:	b662      	cpsie	i
 800e76c:	b661      	cpsie	f
 800e76e:	f3bf 8f4f 	dsb	sy
 800e772:	f3bf 8f6f 	isb	sy
 800e776:	df00      	svc	0
 800e778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e77a:	bf00      	nop
 800e77c:	e000ed08 	.word	0xe000ed08

0800e780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b086      	sub	sp, #24
 800e784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e786:	4b46      	ldr	r3, [pc, #280]	; (800e8a0 <xPortStartScheduler+0x120>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	4a46      	ldr	r2, [pc, #280]	; (800e8a4 <xPortStartScheduler+0x124>)
 800e78c:	4293      	cmp	r3, r2
 800e78e:	d10a      	bne.n	800e7a6 <xPortStartScheduler+0x26>
	__asm volatile
 800e790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e794:	f383 8811 	msr	BASEPRI, r3
 800e798:	f3bf 8f6f 	isb	sy
 800e79c:	f3bf 8f4f 	dsb	sy
 800e7a0:	613b      	str	r3, [r7, #16]
}
 800e7a2:	bf00      	nop
 800e7a4:	e7fe      	b.n	800e7a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e7a6:	4b3e      	ldr	r3, [pc, #248]	; (800e8a0 <xPortStartScheduler+0x120>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	4a3f      	ldr	r2, [pc, #252]	; (800e8a8 <xPortStartScheduler+0x128>)
 800e7ac:	4293      	cmp	r3, r2
 800e7ae:	d10a      	bne.n	800e7c6 <xPortStartScheduler+0x46>
	__asm volatile
 800e7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b4:	f383 8811 	msr	BASEPRI, r3
 800e7b8:	f3bf 8f6f 	isb	sy
 800e7bc:	f3bf 8f4f 	dsb	sy
 800e7c0:	60fb      	str	r3, [r7, #12]
}
 800e7c2:	bf00      	nop
 800e7c4:	e7fe      	b.n	800e7c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e7c6:	4b39      	ldr	r3, [pc, #228]	; (800e8ac <xPortStartScheduler+0x12c>)
 800e7c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	781b      	ldrb	r3, [r3, #0]
 800e7ce:	b2db      	uxtb	r3, r3
 800e7d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	22ff      	movs	r2, #255	; 0xff
 800e7d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	781b      	ldrb	r3, [r3, #0]
 800e7dc:	b2db      	uxtb	r3, r3
 800e7de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e7e0:	78fb      	ldrb	r3, [r7, #3]
 800e7e2:	b2db      	uxtb	r3, r3
 800e7e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e7e8:	b2da      	uxtb	r2, r3
 800e7ea:	4b31      	ldr	r3, [pc, #196]	; (800e8b0 <xPortStartScheduler+0x130>)
 800e7ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e7ee:	4b31      	ldr	r3, [pc, #196]	; (800e8b4 <xPortStartScheduler+0x134>)
 800e7f0:	2207      	movs	r2, #7
 800e7f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e7f4:	e009      	b.n	800e80a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e7f6:	4b2f      	ldr	r3, [pc, #188]	; (800e8b4 <xPortStartScheduler+0x134>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	3b01      	subs	r3, #1
 800e7fc:	4a2d      	ldr	r2, [pc, #180]	; (800e8b4 <xPortStartScheduler+0x134>)
 800e7fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e800:	78fb      	ldrb	r3, [r7, #3]
 800e802:	b2db      	uxtb	r3, r3
 800e804:	005b      	lsls	r3, r3, #1
 800e806:	b2db      	uxtb	r3, r3
 800e808:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e80a:	78fb      	ldrb	r3, [r7, #3]
 800e80c:	b2db      	uxtb	r3, r3
 800e80e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e812:	2b80      	cmp	r3, #128	; 0x80
 800e814:	d0ef      	beq.n	800e7f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e816:	4b27      	ldr	r3, [pc, #156]	; (800e8b4 <xPortStartScheduler+0x134>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	f1c3 0307 	rsb	r3, r3, #7
 800e81e:	2b04      	cmp	r3, #4
 800e820:	d00a      	beq.n	800e838 <xPortStartScheduler+0xb8>
	__asm volatile
 800e822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e826:	f383 8811 	msr	BASEPRI, r3
 800e82a:	f3bf 8f6f 	isb	sy
 800e82e:	f3bf 8f4f 	dsb	sy
 800e832:	60bb      	str	r3, [r7, #8]
}
 800e834:	bf00      	nop
 800e836:	e7fe      	b.n	800e836 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e838:	4b1e      	ldr	r3, [pc, #120]	; (800e8b4 <xPortStartScheduler+0x134>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	021b      	lsls	r3, r3, #8
 800e83e:	4a1d      	ldr	r2, [pc, #116]	; (800e8b4 <xPortStartScheduler+0x134>)
 800e840:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e842:	4b1c      	ldr	r3, [pc, #112]	; (800e8b4 <xPortStartScheduler+0x134>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e84a:	4a1a      	ldr	r2, [pc, #104]	; (800e8b4 <xPortStartScheduler+0x134>)
 800e84c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	b2da      	uxtb	r2, r3
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e856:	4b18      	ldr	r3, [pc, #96]	; (800e8b8 <xPortStartScheduler+0x138>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	4a17      	ldr	r2, [pc, #92]	; (800e8b8 <xPortStartScheduler+0x138>)
 800e85c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e860:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e862:	4b15      	ldr	r3, [pc, #84]	; (800e8b8 <xPortStartScheduler+0x138>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	4a14      	ldr	r2, [pc, #80]	; (800e8b8 <xPortStartScheduler+0x138>)
 800e868:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e86c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e86e:	f000 f8dd 	bl	800ea2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e872:	4b12      	ldr	r3, [pc, #72]	; (800e8bc <xPortStartScheduler+0x13c>)
 800e874:	2200      	movs	r2, #0
 800e876:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e878:	f000 f8fc 	bl	800ea74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e87c:	4b10      	ldr	r3, [pc, #64]	; (800e8c0 <xPortStartScheduler+0x140>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4a0f      	ldr	r2, [pc, #60]	; (800e8c0 <xPortStartScheduler+0x140>)
 800e882:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e886:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e888:	f7ff ff66 	bl	800e758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e88c:	f7ff f84a 	bl	800d924 <vTaskSwitchContext>
	prvTaskExitError();
 800e890:	f7ff ff20 	bl	800e6d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e894:	2300      	movs	r3, #0
}
 800e896:	4618      	mov	r0, r3
 800e898:	3718      	adds	r7, #24
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}
 800e89e:	bf00      	nop
 800e8a0:	e000ed00 	.word	0xe000ed00
 800e8a4:	410fc271 	.word	0x410fc271
 800e8a8:	410fc270 	.word	0x410fc270
 800e8ac:	e000e400 	.word	0xe000e400
 800e8b0:	20001afc 	.word	0x20001afc
 800e8b4:	20001b00 	.word	0x20001b00
 800e8b8:	e000ed20 	.word	0xe000ed20
 800e8bc:	20000014 	.word	0x20000014
 800e8c0:	e000ef34 	.word	0xe000ef34

0800e8c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b083      	sub	sp, #12
 800e8c8:	af00      	add	r7, sp, #0
	__asm volatile
 800e8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ce:	f383 8811 	msr	BASEPRI, r3
 800e8d2:	f3bf 8f6f 	isb	sy
 800e8d6:	f3bf 8f4f 	dsb	sy
 800e8da:	607b      	str	r3, [r7, #4]
}
 800e8dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e8de:	4b0f      	ldr	r3, [pc, #60]	; (800e91c <vPortEnterCritical+0x58>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	4a0d      	ldr	r2, [pc, #52]	; (800e91c <vPortEnterCritical+0x58>)
 800e8e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e8e8:	4b0c      	ldr	r3, [pc, #48]	; (800e91c <vPortEnterCritical+0x58>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	2b01      	cmp	r3, #1
 800e8ee:	d10f      	bne.n	800e910 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e8f0:	4b0b      	ldr	r3, [pc, #44]	; (800e920 <vPortEnterCritical+0x5c>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	b2db      	uxtb	r3, r3
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d00a      	beq.n	800e910 <vPortEnterCritical+0x4c>
	__asm volatile
 800e8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8fe:	f383 8811 	msr	BASEPRI, r3
 800e902:	f3bf 8f6f 	isb	sy
 800e906:	f3bf 8f4f 	dsb	sy
 800e90a:	603b      	str	r3, [r7, #0]
}
 800e90c:	bf00      	nop
 800e90e:	e7fe      	b.n	800e90e <vPortEnterCritical+0x4a>
	}
}
 800e910:	bf00      	nop
 800e912:	370c      	adds	r7, #12
 800e914:	46bd      	mov	sp, r7
 800e916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91a:	4770      	bx	lr
 800e91c:	20000014 	.word	0x20000014
 800e920:	e000ed04 	.word	0xe000ed04

0800e924 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e924:	b480      	push	{r7}
 800e926:	b083      	sub	sp, #12
 800e928:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e92a:	4b12      	ldr	r3, [pc, #72]	; (800e974 <vPortExitCritical+0x50>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d10a      	bne.n	800e948 <vPortExitCritical+0x24>
	__asm volatile
 800e932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e936:	f383 8811 	msr	BASEPRI, r3
 800e93a:	f3bf 8f6f 	isb	sy
 800e93e:	f3bf 8f4f 	dsb	sy
 800e942:	607b      	str	r3, [r7, #4]
}
 800e944:	bf00      	nop
 800e946:	e7fe      	b.n	800e946 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e948:	4b0a      	ldr	r3, [pc, #40]	; (800e974 <vPortExitCritical+0x50>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	3b01      	subs	r3, #1
 800e94e:	4a09      	ldr	r2, [pc, #36]	; (800e974 <vPortExitCritical+0x50>)
 800e950:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e952:	4b08      	ldr	r3, [pc, #32]	; (800e974 <vPortExitCritical+0x50>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d105      	bne.n	800e966 <vPortExitCritical+0x42>
 800e95a:	2300      	movs	r3, #0
 800e95c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	f383 8811 	msr	BASEPRI, r3
}
 800e964:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e966:	bf00      	nop
 800e968:	370c      	adds	r7, #12
 800e96a:	46bd      	mov	sp, r7
 800e96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e970:	4770      	bx	lr
 800e972:	bf00      	nop
 800e974:	20000014 	.word	0x20000014
	...

0800e980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e980:	f3ef 8009 	mrs	r0, PSP
 800e984:	f3bf 8f6f 	isb	sy
 800e988:	4b15      	ldr	r3, [pc, #84]	; (800e9e0 <pxCurrentTCBConst>)
 800e98a:	681a      	ldr	r2, [r3, #0]
 800e98c:	f01e 0f10 	tst.w	lr, #16
 800e990:	bf08      	it	eq
 800e992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e99a:	6010      	str	r0, [r2, #0]
 800e99c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e9a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e9a4:	f380 8811 	msr	BASEPRI, r0
 800e9a8:	f3bf 8f4f 	dsb	sy
 800e9ac:	f3bf 8f6f 	isb	sy
 800e9b0:	f7fe ffb8 	bl	800d924 <vTaskSwitchContext>
 800e9b4:	f04f 0000 	mov.w	r0, #0
 800e9b8:	f380 8811 	msr	BASEPRI, r0
 800e9bc:	bc09      	pop	{r0, r3}
 800e9be:	6819      	ldr	r1, [r3, #0]
 800e9c0:	6808      	ldr	r0, [r1, #0]
 800e9c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9c6:	f01e 0f10 	tst.w	lr, #16
 800e9ca:	bf08      	it	eq
 800e9cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e9d0:	f380 8809 	msr	PSP, r0
 800e9d4:	f3bf 8f6f 	isb	sy
 800e9d8:	4770      	bx	lr
 800e9da:	bf00      	nop
 800e9dc:	f3af 8000 	nop.w

0800e9e0 <pxCurrentTCBConst>:
 800e9e0:	200014d0 	.word	0x200014d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e9e4:	bf00      	nop
 800e9e6:	bf00      	nop

0800e9e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
	__asm volatile
 800e9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f2:	f383 8811 	msr	BASEPRI, r3
 800e9f6:	f3bf 8f6f 	isb	sy
 800e9fa:	f3bf 8f4f 	dsb	sy
 800e9fe:	607b      	str	r3, [r7, #4]
}
 800ea00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ea02:	f7fe fed5 	bl	800d7b0 <xTaskIncrementTick>
 800ea06:	4603      	mov	r3, r0
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d003      	beq.n	800ea14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ea0c:	4b06      	ldr	r3, [pc, #24]	; (800ea28 <xPortSysTickHandler+0x40>)
 800ea0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea12:	601a      	str	r2, [r3, #0]
 800ea14:	2300      	movs	r3, #0
 800ea16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	f383 8811 	msr	BASEPRI, r3
}
 800ea1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ea20:	bf00      	nop
 800ea22:	3708      	adds	r7, #8
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	e000ed04 	.word	0xe000ed04

0800ea2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ea2c:	b480      	push	{r7}
 800ea2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ea30:	4b0b      	ldr	r3, [pc, #44]	; (800ea60 <vPortSetupTimerInterrupt+0x34>)
 800ea32:	2200      	movs	r2, #0
 800ea34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ea36:	4b0b      	ldr	r3, [pc, #44]	; (800ea64 <vPortSetupTimerInterrupt+0x38>)
 800ea38:	2200      	movs	r2, #0
 800ea3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ea3c:	4b0a      	ldr	r3, [pc, #40]	; (800ea68 <vPortSetupTimerInterrupt+0x3c>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	4a0a      	ldr	r2, [pc, #40]	; (800ea6c <vPortSetupTimerInterrupt+0x40>)
 800ea42:	fba2 2303 	umull	r2, r3, r2, r3
 800ea46:	099b      	lsrs	r3, r3, #6
 800ea48:	4a09      	ldr	r2, [pc, #36]	; (800ea70 <vPortSetupTimerInterrupt+0x44>)
 800ea4a:	3b01      	subs	r3, #1
 800ea4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ea4e:	4b04      	ldr	r3, [pc, #16]	; (800ea60 <vPortSetupTimerInterrupt+0x34>)
 800ea50:	2207      	movs	r2, #7
 800ea52:	601a      	str	r2, [r3, #0]
}
 800ea54:	bf00      	nop
 800ea56:	46bd      	mov	sp, r7
 800ea58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5c:	4770      	bx	lr
 800ea5e:	bf00      	nop
 800ea60:	e000e010 	.word	0xe000e010
 800ea64:	e000e018 	.word	0xe000e018
 800ea68:	20000008 	.word	0x20000008
 800ea6c:	10624dd3 	.word	0x10624dd3
 800ea70:	e000e014 	.word	0xe000e014

0800ea74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ea74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ea84 <vPortEnableVFP+0x10>
 800ea78:	6801      	ldr	r1, [r0, #0]
 800ea7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ea7e:	6001      	str	r1, [r0, #0]
 800ea80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ea82:	bf00      	nop
 800ea84:	e000ed88 	.word	0xe000ed88

0800ea88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ea88:	b480      	push	{r7}
 800ea8a:	b085      	sub	sp, #20
 800ea8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ea8e:	f3ef 8305 	mrs	r3, IPSR
 800ea92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	2b0f      	cmp	r3, #15
 800ea98:	d914      	bls.n	800eac4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ea9a:	4a17      	ldr	r2, [pc, #92]	; (800eaf8 <vPortValidateInterruptPriority+0x70>)
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	4413      	add	r3, r2
 800eaa0:	781b      	ldrb	r3, [r3, #0]
 800eaa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800eaa4:	4b15      	ldr	r3, [pc, #84]	; (800eafc <vPortValidateInterruptPriority+0x74>)
 800eaa6:	781b      	ldrb	r3, [r3, #0]
 800eaa8:	7afa      	ldrb	r2, [r7, #11]
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d20a      	bcs.n	800eac4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800eaae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab2:	f383 8811 	msr	BASEPRI, r3
 800eab6:	f3bf 8f6f 	isb	sy
 800eaba:	f3bf 8f4f 	dsb	sy
 800eabe:	607b      	str	r3, [r7, #4]
}
 800eac0:	bf00      	nop
 800eac2:	e7fe      	b.n	800eac2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eac4:	4b0e      	ldr	r3, [pc, #56]	; (800eb00 <vPortValidateInterruptPriority+0x78>)
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eacc:	4b0d      	ldr	r3, [pc, #52]	; (800eb04 <vPortValidateInterruptPriority+0x7c>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	429a      	cmp	r2, r3
 800ead2:	d90a      	bls.n	800eaea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ead4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead8:	f383 8811 	msr	BASEPRI, r3
 800eadc:	f3bf 8f6f 	isb	sy
 800eae0:	f3bf 8f4f 	dsb	sy
 800eae4:	603b      	str	r3, [r7, #0]
}
 800eae6:	bf00      	nop
 800eae8:	e7fe      	b.n	800eae8 <vPortValidateInterruptPriority+0x60>
	}
 800eaea:	bf00      	nop
 800eaec:	3714      	adds	r7, #20
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf4:	4770      	bx	lr
 800eaf6:	bf00      	nop
 800eaf8:	e000e3f0 	.word	0xe000e3f0
 800eafc:	20001afc 	.word	0x20001afc
 800eb00:	e000ed0c 	.word	0xe000ed0c
 800eb04:	20001b00 	.word	0x20001b00

0800eb08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b08a      	sub	sp, #40	; 0x28
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800eb10:	2300      	movs	r3, #0
 800eb12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800eb14:	f7fe fd90 	bl	800d638 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800eb18:	4b5b      	ldr	r3, [pc, #364]	; (800ec88 <pvPortMalloc+0x180>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d101      	bne.n	800eb24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800eb20:	f000 f920 	bl	800ed64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eb24:	4b59      	ldr	r3, [pc, #356]	; (800ec8c <pvPortMalloc+0x184>)
 800eb26:	681a      	ldr	r2, [r3, #0]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	4013      	ands	r3, r2
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	f040 8093 	bne.w	800ec58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d01d      	beq.n	800eb74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800eb38:	2208      	movs	r2, #8
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	4413      	add	r3, r2
 800eb3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f003 0307 	and.w	r3, r3, #7
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d014      	beq.n	800eb74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	f023 0307 	bic.w	r3, r3, #7
 800eb50:	3308      	adds	r3, #8
 800eb52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f003 0307 	and.w	r3, r3, #7
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d00a      	beq.n	800eb74 <pvPortMalloc+0x6c>
	__asm volatile
 800eb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb62:	f383 8811 	msr	BASEPRI, r3
 800eb66:	f3bf 8f6f 	isb	sy
 800eb6a:	f3bf 8f4f 	dsb	sy
 800eb6e:	617b      	str	r3, [r7, #20]
}
 800eb70:	bf00      	nop
 800eb72:	e7fe      	b.n	800eb72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d06e      	beq.n	800ec58 <pvPortMalloc+0x150>
 800eb7a:	4b45      	ldr	r3, [pc, #276]	; (800ec90 <pvPortMalloc+0x188>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	687a      	ldr	r2, [r7, #4]
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d869      	bhi.n	800ec58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800eb84:	4b43      	ldr	r3, [pc, #268]	; (800ec94 <pvPortMalloc+0x18c>)
 800eb86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eb88:	4b42      	ldr	r3, [pc, #264]	; (800ec94 <pvPortMalloc+0x18c>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eb8e:	e004      	b.n	800eb9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800eb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800eb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb9c:	685b      	ldr	r3, [r3, #4]
 800eb9e:	687a      	ldr	r2, [r7, #4]
 800eba0:	429a      	cmp	r2, r3
 800eba2:	d903      	bls.n	800ebac <pvPortMalloc+0xa4>
 800eba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d1f1      	bne.n	800eb90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ebac:	4b36      	ldr	r3, [pc, #216]	; (800ec88 <pvPortMalloc+0x180>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebb2:	429a      	cmp	r2, r3
 800ebb4:	d050      	beq.n	800ec58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ebb6:	6a3b      	ldr	r3, [r7, #32]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	2208      	movs	r2, #8
 800ebbc:	4413      	add	r3, r2
 800ebbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ebc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebc2:	681a      	ldr	r2, [r3, #0]
 800ebc4:	6a3b      	ldr	r3, [r7, #32]
 800ebc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ebc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebca:	685a      	ldr	r2, [r3, #4]
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	1ad2      	subs	r2, r2, r3
 800ebd0:	2308      	movs	r3, #8
 800ebd2:	005b      	lsls	r3, r3, #1
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d91f      	bls.n	800ec18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ebd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	4413      	add	r3, r2
 800ebde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ebe0:	69bb      	ldr	r3, [r7, #24]
 800ebe2:	f003 0307 	and.w	r3, r3, #7
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d00a      	beq.n	800ec00 <pvPortMalloc+0xf8>
	__asm volatile
 800ebea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebee:	f383 8811 	msr	BASEPRI, r3
 800ebf2:	f3bf 8f6f 	isb	sy
 800ebf6:	f3bf 8f4f 	dsb	sy
 800ebfa:	613b      	str	r3, [r7, #16]
}
 800ebfc:	bf00      	nop
 800ebfe:	e7fe      	b.n	800ebfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ec00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec02:	685a      	ldr	r2, [r3, #4]
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	1ad2      	subs	r2, r2, r3
 800ec08:	69bb      	ldr	r3, [r7, #24]
 800ec0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ec0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec0e:	687a      	ldr	r2, [r7, #4]
 800ec10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ec12:	69b8      	ldr	r0, [r7, #24]
 800ec14:	f000 f908 	bl	800ee28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ec18:	4b1d      	ldr	r3, [pc, #116]	; (800ec90 <pvPortMalloc+0x188>)
 800ec1a:	681a      	ldr	r2, [r3, #0]
 800ec1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec1e:	685b      	ldr	r3, [r3, #4]
 800ec20:	1ad3      	subs	r3, r2, r3
 800ec22:	4a1b      	ldr	r2, [pc, #108]	; (800ec90 <pvPortMalloc+0x188>)
 800ec24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ec26:	4b1a      	ldr	r3, [pc, #104]	; (800ec90 <pvPortMalloc+0x188>)
 800ec28:	681a      	ldr	r2, [r3, #0]
 800ec2a:	4b1b      	ldr	r3, [pc, #108]	; (800ec98 <pvPortMalloc+0x190>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	d203      	bcs.n	800ec3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ec32:	4b17      	ldr	r3, [pc, #92]	; (800ec90 <pvPortMalloc+0x188>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	4a18      	ldr	r2, [pc, #96]	; (800ec98 <pvPortMalloc+0x190>)
 800ec38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ec3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec3c:	685a      	ldr	r2, [r3, #4]
 800ec3e:	4b13      	ldr	r3, [pc, #76]	; (800ec8c <pvPortMalloc+0x184>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	431a      	orrs	r2, r3
 800ec44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ec48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ec4e:	4b13      	ldr	r3, [pc, #76]	; (800ec9c <pvPortMalloc+0x194>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	3301      	adds	r3, #1
 800ec54:	4a11      	ldr	r2, [pc, #68]	; (800ec9c <pvPortMalloc+0x194>)
 800ec56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ec58:	f7fe fcfc 	bl	800d654 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec5c:	69fb      	ldr	r3, [r7, #28]
 800ec5e:	f003 0307 	and.w	r3, r3, #7
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d00a      	beq.n	800ec7c <pvPortMalloc+0x174>
	__asm volatile
 800ec66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec6a:	f383 8811 	msr	BASEPRI, r3
 800ec6e:	f3bf 8f6f 	isb	sy
 800ec72:	f3bf 8f4f 	dsb	sy
 800ec76:	60fb      	str	r3, [r7, #12]
}
 800ec78:	bf00      	nop
 800ec7a:	e7fe      	b.n	800ec7a <pvPortMalloc+0x172>
	return pvReturn;
 800ec7c:	69fb      	ldr	r3, [r7, #28]
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3728      	adds	r7, #40	; 0x28
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}
 800ec86:	bf00      	nop
 800ec88:	2000570c 	.word	0x2000570c
 800ec8c:	20005720 	.word	0x20005720
 800ec90:	20005710 	.word	0x20005710
 800ec94:	20005704 	.word	0x20005704
 800ec98:	20005714 	.word	0x20005714
 800ec9c:	20005718 	.word	0x20005718

0800eca0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b086      	sub	sp, #24
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d04d      	beq.n	800ed4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ecb2:	2308      	movs	r3, #8
 800ecb4:	425b      	negs	r3, r3
 800ecb6:	697a      	ldr	r2, [r7, #20]
 800ecb8:	4413      	add	r3, r2
 800ecba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ecc0:	693b      	ldr	r3, [r7, #16]
 800ecc2:	685a      	ldr	r2, [r3, #4]
 800ecc4:	4b24      	ldr	r3, [pc, #144]	; (800ed58 <vPortFree+0xb8>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	4013      	ands	r3, r2
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d10a      	bne.n	800ece4 <vPortFree+0x44>
	__asm volatile
 800ecce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd2:	f383 8811 	msr	BASEPRI, r3
 800ecd6:	f3bf 8f6f 	isb	sy
 800ecda:	f3bf 8f4f 	dsb	sy
 800ecde:	60fb      	str	r3, [r7, #12]
}
 800ece0:	bf00      	nop
 800ece2:	e7fe      	b.n	800ece2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ece4:	693b      	ldr	r3, [r7, #16]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d00a      	beq.n	800ed02 <vPortFree+0x62>
	__asm volatile
 800ecec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf0:	f383 8811 	msr	BASEPRI, r3
 800ecf4:	f3bf 8f6f 	isb	sy
 800ecf8:	f3bf 8f4f 	dsb	sy
 800ecfc:	60bb      	str	r3, [r7, #8]
}
 800ecfe:	bf00      	nop
 800ed00:	e7fe      	b.n	800ed00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ed02:	693b      	ldr	r3, [r7, #16]
 800ed04:	685a      	ldr	r2, [r3, #4]
 800ed06:	4b14      	ldr	r3, [pc, #80]	; (800ed58 <vPortFree+0xb8>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	4013      	ands	r3, r2
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d01e      	beq.n	800ed4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ed10:	693b      	ldr	r3, [r7, #16]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d11a      	bne.n	800ed4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ed18:	693b      	ldr	r3, [r7, #16]
 800ed1a:	685a      	ldr	r2, [r3, #4]
 800ed1c:	4b0e      	ldr	r3, [pc, #56]	; (800ed58 <vPortFree+0xb8>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	43db      	mvns	r3, r3
 800ed22:	401a      	ands	r2, r3
 800ed24:	693b      	ldr	r3, [r7, #16]
 800ed26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ed28:	f7fe fc86 	bl	800d638 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	685a      	ldr	r2, [r3, #4]
 800ed30:	4b0a      	ldr	r3, [pc, #40]	; (800ed5c <vPortFree+0xbc>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	4413      	add	r3, r2
 800ed36:	4a09      	ldr	r2, [pc, #36]	; (800ed5c <vPortFree+0xbc>)
 800ed38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ed3a:	6938      	ldr	r0, [r7, #16]
 800ed3c:	f000 f874 	bl	800ee28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ed40:	4b07      	ldr	r3, [pc, #28]	; (800ed60 <vPortFree+0xc0>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	3301      	adds	r3, #1
 800ed46:	4a06      	ldr	r2, [pc, #24]	; (800ed60 <vPortFree+0xc0>)
 800ed48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ed4a:	f7fe fc83 	bl	800d654 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ed4e:	bf00      	nop
 800ed50:	3718      	adds	r7, #24
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}
 800ed56:	bf00      	nop
 800ed58:	20005720 	.word	0x20005720
 800ed5c:	20005710 	.word	0x20005710
 800ed60:	2000571c 	.word	0x2000571c

0800ed64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ed64:	b480      	push	{r7}
 800ed66:	b085      	sub	sp, #20
 800ed68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ed6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ed6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ed70:	4b27      	ldr	r3, [pc, #156]	; (800ee10 <prvHeapInit+0xac>)
 800ed72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f003 0307 	and.w	r3, r3, #7
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d00c      	beq.n	800ed98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	3307      	adds	r3, #7
 800ed82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	f023 0307 	bic.w	r3, r3, #7
 800ed8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ed8c:	68ba      	ldr	r2, [r7, #8]
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	1ad3      	subs	r3, r2, r3
 800ed92:	4a1f      	ldr	r2, [pc, #124]	; (800ee10 <prvHeapInit+0xac>)
 800ed94:	4413      	add	r3, r2
 800ed96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ed9c:	4a1d      	ldr	r2, [pc, #116]	; (800ee14 <prvHeapInit+0xb0>)
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eda2:	4b1c      	ldr	r3, [pc, #112]	; (800ee14 <prvHeapInit+0xb0>)
 800eda4:	2200      	movs	r2, #0
 800eda6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	68ba      	ldr	r2, [r7, #8]
 800edac:	4413      	add	r3, r2
 800edae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800edb0:	2208      	movs	r2, #8
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	1a9b      	subs	r3, r3, r2
 800edb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	f023 0307 	bic.w	r3, r3, #7
 800edbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	4a15      	ldr	r2, [pc, #84]	; (800ee18 <prvHeapInit+0xb4>)
 800edc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800edc6:	4b14      	ldr	r3, [pc, #80]	; (800ee18 <prvHeapInit+0xb4>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	2200      	movs	r2, #0
 800edcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800edce:	4b12      	ldr	r3, [pc, #72]	; (800ee18 <prvHeapInit+0xb4>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	2200      	movs	r2, #0
 800edd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	68fa      	ldr	r2, [r7, #12]
 800edde:	1ad2      	subs	r2, r2, r3
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ede4:	4b0c      	ldr	r3, [pc, #48]	; (800ee18 <prvHeapInit+0xb4>)
 800ede6:	681a      	ldr	r2, [r3, #0]
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	4a0a      	ldr	r2, [pc, #40]	; (800ee1c <prvHeapInit+0xb8>)
 800edf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	685b      	ldr	r3, [r3, #4]
 800edf8:	4a09      	ldr	r2, [pc, #36]	; (800ee20 <prvHeapInit+0xbc>)
 800edfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800edfc:	4b09      	ldr	r3, [pc, #36]	; (800ee24 <prvHeapInit+0xc0>)
 800edfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ee02:	601a      	str	r2, [r3, #0]
}
 800ee04:	bf00      	nop
 800ee06:	3714      	adds	r7, #20
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0e:	4770      	bx	lr
 800ee10:	20001b04 	.word	0x20001b04
 800ee14:	20005704 	.word	0x20005704
 800ee18:	2000570c 	.word	0x2000570c
 800ee1c:	20005714 	.word	0x20005714
 800ee20:	20005710 	.word	0x20005710
 800ee24:	20005720 	.word	0x20005720

0800ee28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ee28:	b480      	push	{r7}
 800ee2a:	b085      	sub	sp, #20
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ee30:	4b28      	ldr	r3, [pc, #160]	; (800eed4 <prvInsertBlockIntoFreeList+0xac>)
 800ee32:	60fb      	str	r3, [r7, #12]
 800ee34:	e002      	b.n	800ee3c <prvInsertBlockIntoFreeList+0x14>
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	60fb      	str	r3, [r7, #12]
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	687a      	ldr	r2, [r7, #4]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d8f7      	bhi.n	800ee36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	685b      	ldr	r3, [r3, #4]
 800ee4e:	68ba      	ldr	r2, [r7, #8]
 800ee50:	4413      	add	r3, r2
 800ee52:	687a      	ldr	r2, [r7, #4]
 800ee54:	429a      	cmp	r2, r3
 800ee56:	d108      	bne.n	800ee6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	685a      	ldr	r2, [r3, #4]
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	685b      	ldr	r3, [r3, #4]
 800ee60:	441a      	add	r2, r3
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	685b      	ldr	r3, [r3, #4]
 800ee72:	68ba      	ldr	r2, [r7, #8]
 800ee74:	441a      	add	r2, r3
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d118      	bne.n	800eeb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	681a      	ldr	r2, [r3, #0]
 800ee82:	4b15      	ldr	r3, [pc, #84]	; (800eed8 <prvInsertBlockIntoFreeList+0xb0>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d00d      	beq.n	800eea6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	685a      	ldr	r2, [r3, #4]
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	685b      	ldr	r3, [r3, #4]
 800ee94:	441a      	add	r2, r3
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	681a      	ldr	r2, [r3, #0]
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	601a      	str	r2, [r3, #0]
 800eea4:	e008      	b.n	800eeb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eea6:	4b0c      	ldr	r3, [pc, #48]	; (800eed8 <prvInsertBlockIntoFreeList+0xb0>)
 800eea8:	681a      	ldr	r2, [r3, #0]
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	601a      	str	r2, [r3, #0]
 800eeae:	e003      	b.n	800eeb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	681a      	ldr	r2, [r3, #0]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eeb8:	68fa      	ldr	r2, [r7, #12]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	429a      	cmp	r2, r3
 800eebe:	d002      	beq.n	800eec6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	687a      	ldr	r2, [r7, #4]
 800eec4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eec6:	bf00      	nop
 800eec8:	3714      	adds	r7, #20
 800eeca:	46bd      	mov	sp, r7
 800eecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed0:	4770      	bx	lr
 800eed2:	bf00      	nop
 800eed4:	20005704 	.word	0x20005704
 800eed8:	2000570c 	.word	0x2000570c

0800eedc <__errno>:
 800eedc:	4b01      	ldr	r3, [pc, #4]	; (800eee4 <__errno+0x8>)
 800eede:	6818      	ldr	r0, [r3, #0]
 800eee0:	4770      	bx	lr
 800eee2:	bf00      	nop
 800eee4:	20000018 	.word	0x20000018

0800eee8 <std>:
 800eee8:	2300      	movs	r3, #0
 800eeea:	b510      	push	{r4, lr}
 800eeec:	4604      	mov	r4, r0
 800eeee:	e9c0 3300 	strd	r3, r3, [r0]
 800eef2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eef6:	6083      	str	r3, [r0, #8]
 800eef8:	8181      	strh	r1, [r0, #12]
 800eefa:	6643      	str	r3, [r0, #100]	; 0x64
 800eefc:	81c2      	strh	r2, [r0, #14]
 800eefe:	6183      	str	r3, [r0, #24]
 800ef00:	4619      	mov	r1, r3
 800ef02:	2208      	movs	r2, #8
 800ef04:	305c      	adds	r0, #92	; 0x5c
 800ef06:	f000 f91a 	bl	800f13e <memset>
 800ef0a:	4b05      	ldr	r3, [pc, #20]	; (800ef20 <std+0x38>)
 800ef0c:	6263      	str	r3, [r4, #36]	; 0x24
 800ef0e:	4b05      	ldr	r3, [pc, #20]	; (800ef24 <std+0x3c>)
 800ef10:	62a3      	str	r3, [r4, #40]	; 0x28
 800ef12:	4b05      	ldr	r3, [pc, #20]	; (800ef28 <std+0x40>)
 800ef14:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ef16:	4b05      	ldr	r3, [pc, #20]	; (800ef2c <std+0x44>)
 800ef18:	6224      	str	r4, [r4, #32]
 800ef1a:	6323      	str	r3, [r4, #48]	; 0x30
 800ef1c:	bd10      	pop	{r4, pc}
 800ef1e:	bf00      	nop
 800ef20:	0800fd5d 	.word	0x0800fd5d
 800ef24:	0800fd7f 	.word	0x0800fd7f
 800ef28:	0800fdb7 	.word	0x0800fdb7
 800ef2c:	0800fddb 	.word	0x0800fddb

0800ef30 <_cleanup_r>:
 800ef30:	4901      	ldr	r1, [pc, #4]	; (800ef38 <_cleanup_r+0x8>)
 800ef32:	f000 b8af 	b.w	800f094 <_fwalk_reent>
 800ef36:	bf00      	nop
 800ef38:	08010da9 	.word	0x08010da9

0800ef3c <__sfmoreglue>:
 800ef3c:	b570      	push	{r4, r5, r6, lr}
 800ef3e:	2268      	movs	r2, #104	; 0x68
 800ef40:	1e4d      	subs	r5, r1, #1
 800ef42:	4355      	muls	r5, r2
 800ef44:	460e      	mov	r6, r1
 800ef46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ef4a:	f000 f921 	bl	800f190 <_malloc_r>
 800ef4e:	4604      	mov	r4, r0
 800ef50:	b140      	cbz	r0, 800ef64 <__sfmoreglue+0x28>
 800ef52:	2100      	movs	r1, #0
 800ef54:	e9c0 1600 	strd	r1, r6, [r0]
 800ef58:	300c      	adds	r0, #12
 800ef5a:	60a0      	str	r0, [r4, #8]
 800ef5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ef60:	f000 f8ed 	bl	800f13e <memset>
 800ef64:	4620      	mov	r0, r4
 800ef66:	bd70      	pop	{r4, r5, r6, pc}

0800ef68 <__sfp_lock_acquire>:
 800ef68:	4801      	ldr	r0, [pc, #4]	; (800ef70 <__sfp_lock_acquire+0x8>)
 800ef6a:	f000 b8d8 	b.w	800f11e <__retarget_lock_acquire_recursive>
 800ef6e:	bf00      	nop
 800ef70:	20005725 	.word	0x20005725

0800ef74 <__sfp_lock_release>:
 800ef74:	4801      	ldr	r0, [pc, #4]	; (800ef7c <__sfp_lock_release+0x8>)
 800ef76:	f000 b8d3 	b.w	800f120 <__retarget_lock_release_recursive>
 800ef7a:	bf00      	nop
 800ef7c:	20005725 	.word	0x20005725

0800ef80 <__sinit_lock_acquire>:
 800ef80:	4801      	ldr	r0, [pc, #4]	; (800ef88 <__sinit_lock_acquire+0x8>)
 800ef82:	f000 b8cc 	b.w	800f11e <__retarget_lock_acquire_recursive>
 800ef86:	bf00      	nop
 800ef88:	20005726 	.word	0x20005726

0800ef8c <__sinit_lock_release>:
 800ef8c:	4801      	ldr	r0, [pc, #4]	; (800ef94 <__sinit_lock_release+0x8>)
 800ef8e:	f000 b8c7 	b.w	800f120 <__retarget_lock_release_recursive>
 800ef92:	bf00      	nop
 800ef94:	20005726 	.word	0x20005726

0800ef98 <__sinit>:
 800ef98:	b510      	push	{r4, lr}
 800ef9a:	4604      	mov	r4, r0
 800ef9c:	f7ff fff0 	bl	800ef80 <__sinit_lock_acquire>
 800efa0:	69a3      	ldr	r3, [r4, #24]
 800efa2:	b11b      	cbz	r3, 800efac <__sinit+0x14>
 800efa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efa8:	f7ff bff0 	b.w	800ef8c <__sinit_lock_release>
 800efac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800efb0:	6523      	str	r3, [r4, #80]	; 0x50
 800efb2:	4b13      	ldr	r3, [pc, #76]	; (800f000 <__sinit+0x68>)
 800efb4:	4a13      	ldr	r2, [pc, #76]	; (800f004 <__sinit+0x6c>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	62a2      	str	r2, [r4, #40]	; 0x28
 800efba:	42a3      	cmp	r3, r4
 800efbc:	bf04      	itt	eq
 800efbe:	2301      	moveq	r3, #1
 800efc0:	61a3      	streq	r3, [r4, #24]
 800efc2:	4620      	mov	r0, r4
 800efc4:	f000 f820 	bl	800f008 <__sfp>
 800efc8:	6060      	str	r0, [r4, #4]
 800efca:	4620      	mov	r0, r4
 800efcc:	f000 f81c 	bl	800f008 <__sfp>
 800efd0:	60a0      	str	r0, [r4, #8]
 800efd2:	4620      	mov	r0, r4
 800efd4:	f000 f818 	bl	800f008 <__sfp>
 800efd8:	2200      	movs	r2, #0
 800efda:	60e0      	str	r0, [r4, #12]
 800efdc:	2104      	movs	r1, #4
 800efde:	6860      	ldr	r0, [r4, #4]
 800efe0:	f7ff ff82 	bl	800eee8 <std>
 800efe4:	68a0      	ldr	r0, [r4, #8]
 800efe6:	2201      	movs	r2, #1
 800efe8:	2109      	movs	r1, #9
 800efea:	f7ff ff7d 	bl	800eee8 <std>
 800efee:	68e0      	ldr	r0, [r4, #12]
 800eff0:	2202      	movs	r2, #2
 800eff2:	2112      	movs	r1, #18
 800eff4:	f7ff ff78 	bl	800eee8 <std>
 800eff8:	2301      	movs	r3, #1
 800effa:	61a3      	str	r3, [r4, #24]
 800effc:	e7d2      	b.n	800efa4 <__sinit+0xc>
 800effe:	bf00      	nop
 800f000:	080125f8 	.word	0x080125f8
 800f004:	0800ef31 	.word	0x0800ef31

0800f008 <__sfp>:
 800f008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f00a:	4607      	mov	r7, r0
 800f00c:	f7ff ffac 	bl	800ef68 <__sfp_lock_acquire>
 800f010:	4b1e      	ldr	r3, [pc, #120]	; (800f08c <__sfp+0x84>)
 800f012:	681e      	ldr	r6, [r3, #0]
 800f014:	69b3      	ldr	r3, [r6, #24]
 800f016:	b913      	cbnz	r3, 800f01e <__sfp+0x16>
 800f018:	4630      	mov	r0, r6
 800f01a:	f7ff ffbd 	bl	800ef98 <__sinit>
 800f01e:	3648      	adds	r6, #72	; 0x48
 800f020:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f024:	3b01      	subs	r3, #1
 800f026:	d503      	bpl.n	800f030 <__sfp+0x28>
 800f028:	6833      	ldr	r3, [r6, #0]
 800f02a:	b30b      	cbz	r3, 800f070 <__sfp+0x68>
 800f02c:	6836      	ldr	r6, [r6, #0]
 800f02e:	e7f7      	b.n	800f020 <__sfp+0x18>
 800f030:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f034:	b9d5      	cbnz	r5, 800f06c <__sfp+0x64>
 800f036:	4b16      	ldr	r3, [pc, #88]	; (800f090 <__sfp+0x88>)
 800f038:	60e3      	str	r3, [r4, #12]
 800f03a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f03e:	6665      	str	r5, [r4, #100]	; 0x64
 800f040:	f000 f86c 	bl	800f11c <__retarget_lock_init_recursive>
 800f044:	f7ff ff96 	bl	800ef74 <__sfp_lock_release>
 800f048:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f04c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f050:	6025      	str	r5, [r4, #0]
 800f052:	61a5      	str	r5, [r4, #24]
 800f054:	2208      	movs	r2, #8
 800f056:	4629      	mov	r1, r5
 800f058:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f05c:	f000 f86f 	bl	800f13e <memset>
 800f060:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f064:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f068:	4620      	mov	r0, r4
 800f06a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f06c:	3468      	adds	r4, #104	; 0x68
 800f06e:	e7d9      	b.n	800f024 <__sfp+0x1c>
 800f070:	2104      	movs	r1, #4
 800f072:	4638      	mov	r0, r7
 800f074:	f7ff ff62 	bl	800ef3c <__sfmoreglue>
 800f078:	4604      	mov	r4, r0
 800f07a:	6030      	str	r0, [r6, #0]
 800f07c:	2800      	cmp	r0, #0
 800f07e:	d1d5      	bne.n	800f02c <__sfp+0x24>
 800f080:	f7ff ff78 	bl	800ef74 <__sfp_lock_release>
 800f084:	230c      	movs	r3, #12
 800f086:	603b      	str	r3, [r7, #0]
 800f088:	e7ee      	b.n	800f068 <__sfp+0x60>
 800f08a:	bf00      	nop
 800f08c:	080125f8 	.word	0x080125f8
 800f090:	ffff0001 	.word	0xffff0001

0800f094 <_fwalk_reent>:
 800f094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f098:	4606      	mov	r6, r0
 800f09a:	4688      	mov	r8, r1
 800f09c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f0a0:	2700      	movs	r7, #0
 800f0a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f0a6:	f1b9 0901 	subs.w	r9, r9, #1
 800f0aa:	d505      	bpl.n	800f0b8 <_fwalk_reent+0x24>
 800f0ac:	6824      	ldr	r4, [r4, #0]
 800f0ae:	2c00      	cmp	r4, #0
 800f0b0:	d1f7      	bne.n	800f0a2 <_fwalk_reent+0xe>
 800f0b2:	4638      	mov	r0, r7
 800f0b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0b8:	89ab      	ldrh	r3, [r5, #12]
 800f0ba:	2b01      	cmp	r3, #1
 800f0bc:	d907      	bls.n	800f0ce <_fwalk_reent+0x3a>
 800f0be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	d003      	beq.n	800f0ce <_fwalk_reent+0x3a>
 800f0c6:	4629      	mov	r1, r5
 800f0c8:	4630      	mov	r0, r6
 800f0ca:	47c0      	blx	r8
 800f0cc:	4307      	orrs	r7, r0
 800f0ce:	3568      	adds	r5, #104	; 0x68
 800f0d0:	e7e9      	b.n	800f0a6 <_fwalk_reent+0x12>
	...

0800f0d4 <__libc_init_array>:
 800f0d4:	b570      	push	{r4, r5, r6, lr}
 800f0d6:	4d0d      	ldr	r5, [pc, #52]	; (800f10c <__libc_init_array+0x38>)
 800f0d8:	4c0d      	ldr	r4, [pc, #52]	; (800f110 <__libc_init_array+0x3c>)
 800f0da:	1b64      	subs	r4, r4, r5
 800f0dc:	10a4      	asrs	r4, r4, #2
 800f0de:	2600      	movs	r6, #0
 800f0e0:	42a6      	cmp	r6, r4
 800f0e2:	d109      	bne.n	800f0f8 <__libc_init_array+0x24>
 800f0e4:	4d0b      	ldr	r5, [pc, #44]	; (800f114 <__libc_init_array+0x40>)
 800f0e6:	4c0c      	ldr	r4, [pc, #48]	; (800f118 <__libc_init_array+0x44>)
 800f0e8:	f002 fd38 	bl	8011b5c <_init>
 800f0ec:	1b64      	subs	r4, r4, r5
 800f0ee:	10a4      	asrs	r4, r4, #2
 800f0f0:	2600      	movs	r6, #0
 800f0f2:	42a6      	cmp	r6, r4
 800f0f4:	d105      	bne.n	800f102 <__libc_init_array+0x2e>
 800f0f6:	bd70      	pop	{r4, r5, r6, pc}
 800f0f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0fc:	4798      	blx	r3
 800f0fe:	3601      	adds	r6, #1
 800f100:	e7ee      	b.n	800f0e0 <__libc_init_array+0xc>
 800f102:	f855 3b04 	ldr.w	r3, [r5], #4
 800f106:	4798      	blx	r3
 800f108:	3601      	adds	r6, #1
 800f10a:	e7f2      	b.n	800f0f2 <__libc_init_array+0x1e>
 800f10c:	0801297c 	.word	0x0801297c
 800f110:	0801297c 	.word	0x0801297c
 800f114:	0801297c 	.word	0x0801297c
 800f118:	08012980 	.word	0x08012980

0800f11c <__retarget_lock_init_recursive>:
 800f11c:	4770      	bx	lr

0800f11e <__retarget_lock_acquire_recursive>:
 800f11e:	4770      	bx	lr

0800f120 <__retarget_lock_release_recursive>:
 800f120:	4770      	bx	lr

0800f122 <memcpy>:
 800f122:	440a      	add	r2, r1
 800f124:	4291      	cmp	r1, r2
 800f126:	f100 33ff 	add.w	r3, r0, #4294967295
 800f12a:	d100      	bne.n	800f12e <memcpy+0xc>
 800f12c:	4770      	bx	lr
 800f12e:	b510      	push	{r4, lr}
 800f130:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f134:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f138:	4291      	cmp	r1, r2
 800f13a:	d1f9      	bne.n	800f130 <memcpy+0xe>
 800f13c:	bd10      	pop	{r4, pc}

0800f13e <memset>:
 800f13e:	4402      	add	r2, r0
 800f140:	4603      	mov	r3, r0
 800f142:	4293      	cmp	r3, r2
 800f144:	d100      	bne.n	800f148 <memset+0xa>
 800f146:	4770      	bx	lr
 800f148:	f803 1b01 	strb.w	r1, [r3], #1
 800f14c:	e7f9      	b.n	800f142 <memset+0x4>
	...

0800f150 <sbrk_aligned>:
 800f150:	b570      	push	{r4, r5, r6, lr}
 800f152:	4e0e      	ldr	r6, [pc, #56]	; (800f18c <sbrk_aligned+0x3c>)
 800f154:	460c      	mov	r4, r1
 800f156:	6831      	ldr	r1, [r6, #0]
 800f158:	4605      	mov	r5, r0
 800f15a:	b911      	cbnz	r1, 800f162 <sbrk_aligned+0x12>
 800f15c:	f000 fdee 	bl	800fd3c <_sbrk_r>
 800f160:	6030      	str	r0, [r6, #0]
 800f162:	4621      	mov	r1, r4
 800f164:	4628      	mov	r0, r5
 800f166:	f000 fde9 	bl	800fd3c <_sbrk_r>
 800f16a:	1c43      	adds	r3, r0, #1
 800f16c:	d00a      	beq.n	800f184 <sbrk_aligned+0x34>
 800f16e:	1cc4      	adds	r4, r0, #3
 800f170:	f024 0403 	bic.w	r4, r4, #3
 800f174:	42a0      	cmp	r0, r4
 800f176:	d007      	beq.n	800f188 <sbrk_aligned+0x38>
 800f178:	1a21      	subs	r1, r4, r0
 800f17a:	4628      	mov	r0, r5
 800f17c:	f000 fdde 	bl	800fd3c <_sbrk_r>
 800f180:	3001      	adds	r0, #1
 800f182:	d101      	bne.n	800f188 <sbrk_aligned+0x38>
 800f184:	f04f 34ff 	mov.w	r4, #4294967295
 800f188:	4620      	mov	r0, r4
 800f18a:	bd70      	pop	{r4, r5, r6, pc}
 800f18c:	2000572c 	.word	0x2000572c

0800f190 <_malloc_r>:
 800f190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f194:	1ccd      	adds	r5, r1, #3
 800f196:	f025 0503 	bic.w	r5, r5, #3
 800f19a:	3508      	adds	r5, #8
 800f19c:	2d0c      	cmp	r5, #12
 800f19e:	bf38      	it	cc
 800f1a0:	250c      	movcc	r5, #12
 800f1a2:	2d00      	cmp	r5, #0
 800f1a4:	4607      	mov	r7, r0
 800f1a6:	db01      	blt.n	800f1ac <_malloc_r+0x1c>
 800f1a8:	42a9      	cmp	r1, r5
 800f1aa:	d905      	bls.n	800f1b8 <_malloc_r+0x28>
 800f1ac:	230c      	movs	r3, #12
 800f1ae:	603b      	str	r3, [r7, #0]
 800f1b0:	2600      	movs	r6, #0
 800f1b2:	4630      	mov	r0, r6
 800f1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1b8:	4e2e      	ldr	r6, [pc, #184]	; (800f274 <_malloc_r+0xe4>)
 800f1ba:	f001 feb5 	bl	8010f28 <__malloc_lock>
 800f1be:	6833      	ldr	r3, [r6, #0]
 800f1c0:	461c      	mov	r4, r3
 800f1c2:	bb34      	cbnz	r4, 800f212 <_malloc_r+0x82>
 800f1c4:	4629      	mov	r1, r5
 800f1c6:	4638      	mov	r0, r7
 800f1c8:	f7ff ffc2 	bl	800f150 <sbrk_aligned>
 800f1cc:	1c43      	adds	r3, r0, #1
 800f1ce:	4604      	mov	r4, r0
 800f1d0:	d14d      	bne.n	800f26e <_malloc_r+0xde>
 800f1d2:	6834      	ldr	r4, [r6, #0]
 800f1d4:	4626      	mov	r6, r4
 800f1d6:	2e00      	cmp	r6, #0
 800f1d8:	d140      	bne.n	800f25c <_malloc_r+0xcc>
 800f1da:	6823      	ldr	r3, [r4, #0]
 800f1dc:	4631      	mov	r1, r6
 800f1de:	4638      	mov	r0, r7
 800f1e0:	eb04 0803 	add.w	r8, r4, r3
 800f1e4:	f000 fdaa 	bl	800fd3c <_sbrk_r>
 800f1e8:	4580      	cmp	r8, r0
 800f1ea:	d13a      	bne.n	800f262 <_malloc_r+0xd2>
 800f1ec:	6821      	ldr	r1, [r4, #0]
 800f1ee:	3503      	adds	r5, #3
 800f1f0:	1a6d      	subs	r5, r5, r1
 800f1f2:	f025 0503 	bic.w	r5, r5, #3
 800f1f6:	3508      	adds	r5, #8
 800f1f8:	2d0c      	cmp	r5, #12
 800f1fa:	bf38      	it	cc
 800f1fc:	250c      	movcc	r5, #12
 800f1fe:	4629      	mov	r1, r5
 800f200:	4638      	mov	r0, r7
 800f202:	f7ff ffa5 	bl	800f150 <sbrk_aligned>
 800f206:	3001      	adds	r0, #1
 800f208:	d02b      	beq.n	800f262 <_malloc_r+0xd2>
 800f20a:	6823      	ldr	r3, [r4, #0]
 800f20c:	442b      	add	r3, r5
 800f20e:	6023      	str	r3, [r4, #0]
 800f210:	e00e      	b.n	800f230 <_malloc_r+0xa0>
 800f212:	6822      	ldr	r2, [r4, #0]
 800f214:	1b52      	subs	r2, r2, r5
 800f216:	d41e      	bmi.n	800f256 <_malloc_r+0xc6>
 800f218:	2a0b      	cmp	r2, #11
 800f21a:	d916      	bls.n	800f24a <_malloc_r+0xba>
 800f21c:	1961      	adds	r1, r4, r5
 800f21e:	42a3      	cmp	r3, r4
 800f220:	6025      	str	r5, [r4, #0]
 800f222:	bf18      	it	ne
 800f224:	6059      	strne	r1, [r3, #4]
 800f226:	6863      	ldr	r3, [r4, #4]
 800f228:	bf08      	it	eq
 800f22a:	6031      	streq	r1, [r6, #0]
 800f22c:	5162      	str	r2, [r4, r5]
 800f22e:	604b      	str	r3, [r1, #4]
 800f230:	4638      	mov	r0, r7
 800f232:	f104 060b 	add.w	r6, r4, #11
 800f236:	f001 fe7d 	bl	8010f34 <__malloc_unlock>
 800f23a:	f026 0607 	bic.w	r6, r6, #7
 800f23e:	1d23      	adds	r3, r4, #4
 800f240:	1af2      	subs	r2, r6, r3
 800f242:	d0b6      	beq.n	800f1b2 <_malloc_r+0x22>
 800f244:	1b9b      	subs	r3, r3, r6
 800f246:	50a3      	str	r3, [r4, r2]
 800f248:	e7b3      	b.n	800f1b2 <_malloc_r+0x22>
 800f24a:	6862      	ldr	r2, [r4, #4]
 800f24c:	42a3      	cmp	r3, r4
 800f24e:	bf0c      	ite	eq
 800f250:	6032      	streq	r2, [r6, #0]
 800f252:	605a      	strne	r2, [r3, #4]
 800f254:	e7ec      	b.n	800f230 <_malloc_r+0xa0>
 800f256:	4623      	mov	r3, r4
 800f258:	6864      	ldr	r4, [r4, #4]
 800f25a:	e7b2      	b.n	800f1c2 <_malloc_r+0x32>
 800f25c:	4634      	mov	r4, r6
 800f25e:	6876      	ldr	r6, [r6, #4]
 800f260:	e7b9      	b.n	800f1d6 <_malloc_r+0x46>
 800f262:	230c      	movs	r3, #12
 800f264:	603b      	str	r3, [r7, #0]
 800f266:	4638      	mov	r0, r7
 800f268:	f001 fe64 	bl	8010f34 <__malloc_unlock>
 800f26c:	e7a1      	b.n	800f1b2 <_malloc_r+0x22>
 800f26e:	6025      	str	r5, [r4, #0]
 800f270:	e7de      	b.n	800f230 <_malloc_r+0xa0>
 800f272:	bf00      	nop
 800f274:	20005728 	.word	0x20005728

0800f278 <__cvt>:
 800f278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f27c:	ec55 4b10 	vmov	r4, r5, d0
 800f280:	2d00      	cmp	r5, #0
 800f282:	460e      	mov	r6, r1
 800f284:	4619      	mov	r1, r3
 800f286:	462b      	mov	r3, r5
 800f288:	bfbb      	ittet	lt
 800f28a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f28e:	461d      	movlt	r5, r3
 800f290:	2300      	movge	r3, #0
 800f292:	232d      	movlt	r3, #45	; 0x2d
 800f294:	700b      	strb	r3, [r1, #0]
 800f296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f298:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f29c:	4691      	mov	r9, r2
 800f29e:	f023 0820 	bic.w	r8, r3, #32
 800f2a2:	bfbc      	itt	lt
 800f2a4:	4622      	movlt	r2, r4
 800f2a6:	4614      	movlt	r4, r2
 800f2a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f2ac:	d005      	beq.n	800f2ba <__cvt+0x42>
 800f2ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f2b2:	d100      	bne.n	800f2b6 <__cvt+0x3e>
 800f2b4:	3601      	adds	r6, #1
 800f2b6:	2102      	movs	r1, #2
 800f2b8:	e000      	b.n	800f2bc <__cvt+0x44>
 800f2ba:	2103      	movs	r1, #3
 800f2bc:	ab03      	add	r3, sp, #12
 800f2be:	9301      	str	r3, [sp, #4]
 800f2c0:	ab02      	add	r3, sp, #8
 800f2c2:	9300      	str	r3, [sp, #0]
 800f2c4:	ec45 4b10 	vmov	d0, r4, r5
 800f2c8:	4653      	mov	r3, sl
 800f2ca:	4632      	mov	r2, r6
 800f2cc:	f000 fef8 	bl	80100c0 <_dtoa_r>
 800f2d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f2d4:	4607      	mov	r7, r0
 800f2d6:	d102      	bne.n	800f2de <__cvt+0x66>
 800f2d8:	f019 0f01 	tst.w	r9, #1
 800f2dc:	d022      	beq.n	800f324 <__cvt+0xac>
 800f2de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f2e2:	eb07 0906 	add.w	r9, r7, r6
 800f2e6:	d110      	bne.n	800f30a <__cvt+0x92>
 800f2e8:	783b      	ldrb	r3, [r7, #0]
 800f2ea:	2b30      	cmp	r3, #48	; 0x30
 800f2ec:	d10a      	bne.n	800f304 <__cvt+0x8c>
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	4620      	mov	r0, r4
 800f2f4:	4629      	mov	r1, r5
 800f2f6:	f7f1 fbe7 	bl	8000ac8 <__aeabi_dcmpeq>
 800f2fa:	b918      	cbnz	r0, 800f304 <__cvt+0x8c>
 800f2fc:	f1c6 0601 	rsb	r6, r6, #1
 800f300:	f8ca 6000 	str.w	r6, [sl]
 800f304:	f8da 3000 	ldr.w	r3, [sl]
 800f308:	4499      	add	r9, r3
 800f30a:	2200      	movs	r2, #0
 800f30c:	2300      	movs	r3, #0
 800f30e:	4620      	mov	r0, r4
 800f310:	4629      	mov	r1, r5
 800f312:	f7f1 fbd9 	bl	8000ac8 <__aeabi_dcmpeq>
 800f316:	b108      	cbz	r0, 800f31c <__cvt+0xa4>
 800f318:	f8cd 900c 	str.w	r9, [sp, #12]
 800f31c:	2230      	movs	r2, #48	; 0x30
 800f31e:	9b03      	ldr	r3, [sp, #12]
 800f320:	454b      	cmp	r3, r9
 800f322:	d307      	bcc.n	800f334 <__cvt+0xbc>
 800f324:	9b03      	ldr	r3, [sp, #12]
 800f326:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f328:	1bdb      	subs	r3, r3, r7
 800f32a:	4638      	mov	r0, r7
 800f32c:	6013      	str	r3, [r2, #0]
 800f32e:	b004      	add	sp, #16
 800f330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f334:	1c59      	adds	r1, r3, #1
 800f336:	9103      	str	r1, [sp, #12]
 800f338:	701a      	strb	r2, [r3, #0]
 800f33a:	e7f0      	b.n	800f31e <__cvt+0xa6>

0800f33c <__exponent>:
 800f33c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f33e:	4603      	mov	r3, r0
 800f340:	2900      	cmp	r1, #0
 800f342:	bfb8      	it	lt
 800f344:	4249      	neglt	r1, r1
 800f346:	f803 2b02 	strb.w	r2, [r3], #2
 800f34a:	bfb4      	ite	lt
 800f34c:	222d      	movlt	r2, #45	; 0x2d
 800f34e:	222b      	movge	r2, #43	; 0x2b
 800f350:	2909      	cmp	r1, #9
 800f352:	7042      	strb	r2, [r0, #1]
 800f354:	dd2a      	ble.n	800f3ac <__exponent+0x70>
 800f356:	f10d 0407 	add.w	r4, sp, #7
 800f35a:	46a4      	mov	ip, r4
 800f35c:	270a      	movs	r7, #10
 800f35e:	46a6      	mov	lr, r4
 800f360:	460a      	mov	r2, r1
 800f362:	fb91 f6f7 	sdiv	r6, r1, r7
 800f366:	fb07 1516 	mls	r5, r7, r6, r1
 800f36a:	3530      	adds	r5, #48	; 0x30
 800f36c:	2a63      	cmp	r2, #99	; 0x63
 800f36e:	f104 34ff 	add.w	r4, r4, #4294967295
 800f372:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f376:	4631      	mov	r1, r6
 800f378:	dcf1      	bgt.n	800f35e <__exponent+0x22>
 800f37a:	3130      	adds	r1, #48	; 0x30
 800f37c:	f1ae 0502 	sub.w	r5, lr, #2
 800f380:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f384:	1c44      	adds	r4, r0, #1
 800f386:	4629      	mov	r1, r5
 800f388:	4561      	cmp	r1, ip
 800f38a:	d30a      	bcc.n	800f3a2 <__exponent+0x66>
 800f38c:	f10d 0209 	add.w	r2, sp, #9
 800f390:	eba2 020e 	sub.w	r2, r2, lr
 800f394:	4565      	cmp	r5, ip
 800f396:	bf88      	it	hi
 800f398:	2200      	movhi	r2, #0
 800f39a:	4413      	add	r3, r2
 800f39c:	1a18      	subs	r0, r3, r0
 800f39e:	b003      	add	sp, #12
 800f3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f3a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f3aa:	e7ed      	b.n	800f388 <__exponent+0x4c>
 800f3ac:	2330      	movs	r3, #48	; 0x30
 800f3ae:	3130      	adds	r1, #48	; 0x30
 800f3b0:	7083      	strb	r3, [r0, #2]
 800f3b2:	70c1      	strb	r1, [r0, #3]
 800f3b4:	1d03      	adds	r3, r0, #4
 800f3b6:	e7f1      	b.n	800f39c <__exponent+0x60>

0800f3b8 <_printf_float>:
 800f3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3bc:	ed2d 8b02 	vpush	{d8}
 800f3c0:	b08d      	sub	sp, #52	; 0x34
 800f3c2:	460c      	mov	r4, r1
 800f3c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f3c8:	4616      	mov	r6, r2
 800f3ca:	461f      	mov	r7, r3
 800f3cc:	4605      	mov	r5, r0
 800f3ce:	f001 fd27 	bl	8010e20 <_localeconv_r>
 800f3d2:	f8d0 a000 	ldr.w	sl, [r0]
 800f3d6:	4650      	mov	r0, sl
 800f3d8:	f7f0 fefa 	bl	80001d0 <strlen>
 800f3dc:	2300      	movs	r3, #0
 800f3de:	930a      	str	r3, [sp, #40]	; 0x28
 800f3e0:	6823      	ldr	r3, [r4, #0]
 800f3e2:	9305      	str	r3, [sp, #20]
 800f3e4:	f8d8 3000 	ldr.w	r3, [r8]
 800f3e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f3ec:	3307      	adds	r3, #7
 800f3ee:	f023 0307 	bic.w	r3, r3, #7
 800f3f2:	f103 0208 	add.w	r2, r3, #8
 800f3f6:	f8c8 2000 	str.w	r2, [r8]
 800f3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f402:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f406:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f40a:	9307      	str	r3, [sp, #28]
 800f40c:	f8cd 8018 	str.w	r8, [sp, #24]
 800f410:	ee08 0a10 	vmov	s16, r0
 800f414:	4b9f      	ldr	r3, [pc, #636]	; (800f694 <_printf_float+0x2dc>)
 800f416:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f41a:	f04f 32ff 	mov.w	r2, #4294967295
 800f41e:	f7f1 fb85 	bl	8000b2c <__aeabi_dcmpun>
 800f422:	bb88      	cbnz	r0, 800f488 <_printf_float+0xd0>
 800f424:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f428:	4b9a      	ldr	r3, [pc, #616]	; (800f694 <_printf_float+0x2dc>)
 800f42a:	f04f 32ff 	mov.w	r2, #4294967295
 800f42e:	f7f1 fb5f 	bl	8000af0 <__aeabi_dcmple>
 800f432:	bb48      	cbnz	r0, 800f488 <_printf_float+0xd0>
 800f434:	2200      	movs	r2, #0
 800f436:	2300      	movs	r3, #0
 800f438:	4640      	mov	r0, r8
 800f43a:	4649      	mov	r1, r9
 800f43c:	f7f1 fb4e 	bl	8000adc <__aeabi_dcmplt>
 800f440:	b110      	cbz	r0, 800f448 <_printf_float+0x90>
 800f442:	232d      	movs	r3, #45	; 0x2d
 800f444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f448:	4b93      	ldr	r3, [pc, #588]	; (800f698 <_printf_float+0x2e0>)
 800f44a:	4894      	ldr	r0, [pc, #592]	; (800f69c <_printf_float+0x2e4>)
 800f44c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f450:	bf94      	ite	ls
 800f452:	4698      	movls	r8, r3
 800f454:	4680      	movhi	r8, r0
 800f456:	2303      	movs	r3, #3
 800f458:	6123      	str	r3, [r4, #16]
 800f45a:	9b05      	ldr	r3, [sp, #20]
 800f45c:	f023 0204 	bic.w	r2, r3, #4
 800f460:	6022      	str	r2, [r4, #0]
 800f462:	f04f 0900 	mov.w	r9, #0
 800f466:	9700      	str	r7, [sp, #0]
 800f468:	4633      	mov	r3, r6
 800f46a:	aa0b      	add	r2, sp, #44	; 0x2c
 800f46c:	4621      	mov	r1, r4
 800f46e:	4628      	mov	r0, r5
 800f470:	f000 f9d8 	bl	800f824 <_printf_common>
 800f474:	3001      	adds	r0, #1
 800f476:	f040 8090 	bne.w	800f59a <_printf_float+0x1e2>
 800f47a:	f04f 30ff 	mov.w	r0, #4294967295
 800f47e:	b00d      	add	sp, #52	; 0x34
 800f480:	ecbd 8b02 	vpop	{d8}
 800f484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f488:	4642      	mov	r2, r8
 800f48a:	464b      	mov	r3, r9
 800f48c:	4640      	mov	r0, r8
 800f48e:	4649      	mov	r1, r9
 800f490:	f7f1 fb4c 	bl	8000b2c <__aeabi_dcmpun>
 800f494:	b140      	cbz	r0, 800f4a8 <_printf_float+0xf0>
 800f496:	464b      	mov	r3, r9
 800f498:	2b00      	cmp	r3, #0
 800f49a:	bfbc      	itt	lt
 800f49c:	232d      	movlt	r3, #45	; 0x2d
 800f49e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f4a2:	487f      	ldr	r0, [pc, #508]	; (800f6a0 <_printf_float+0x2e8>)
 800f4a4:	4b7f      	ldr	r3, [pc, #508]	; (800f6a4 <_printf_float+0x2ec>)
 800f4a6:	e7d1      	b.n	800f44c <_printf_float+0x94>
 800f4a8:	6863      	ldr	r3, [r4, #4]
 800f4aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f4ae:	9206      	str	r2, [sp, #24]
 800f4b0:	1c5a      	adds	r2, r3, #1
 800f4b2:	d13f      	bne.n	800f534 <_printf_float+0x17c>
 800f4b4:	2306      	movs	r3, #6
 800f4b6:	6063      	str	r3, [r4, #4]
 800f4b8:	9b05      	ldr	r3, [sp, #20]
 800f4ba:	6861      	ldr	r1, [r4, #4]
 800f4bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	9303      	str	r3, [sp, #12]
 800f4c4:	ab0a      	add	r3, sp, #40	; 0x28
 800f4c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f4ca:	ab09      	add	r3, sp, #36	; 0x24
 800f4cc:	ec49 8b10 	vmov	d0, r8, r9
 800f4d0:	9300      	str	r3, [sp, #0]
 800f4d2:	6022      	str	r2, [r4, #0]
 800f4d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f4d8:	4628      	mov	r0, r5
 800f4da:	f7ff fecd 	bl	800f278 <__cvt>
 800f4de:	9b06      	ldr	r3, [sp, #24]
 800f4e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f4e2:	2b47      	cmp	r3, #71	; 0x47
 800f4e4:	4680      	mov	r8, r0
 800f4e6:	d108      	bne.n	800f4fa <_printf_float+0x142>
 800f4e8:	1cc8      	adds	r0, r1, #3
 800f4ea:	db02      	blt.n	800f4f2 <_printf_float+0x13a>
 800f4ec:	6863      	ldr	r3, [r4, #4]
 800f4ee:	4299      	cmp	r1, r3
 800f4f0:	dd41      	ble.n	800f576 <_printf_float+0x1be>
 800f4f2:	f1ab 0b02 	sub.w	fp, fp, #2
 800f4f6:	fa5f fb8b 	uxtb.w	fp, fp
 800f4fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f4fe:	d820      	bhi.n	800f542 <_printf_float+0x18a>
 800f500:	3901      	subs	r1, #1
 800f502:	465a      	mov	r2, fp
 800f504:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f508:	9109      	str	r1, [sp, #36]	; 0x24
 800f50a:	f7ff ff17 	bl	800f33c <__exponent>
 800f50e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f510:	1813      	adds	r3, r2, r0
 800f512:	2a01      	cmp	r2, #1
 800f514:	4681      	mov	r9, r0
 800f516:	6123      	str	r3, [r4, #16]
 800f518:	dc02      	bgt.n	800f520 <_printf_float+0x168>
 800f51a:	6822      	ldr	r2, [r4, #0]
 800f51c:	07d2      	lsls	r2, r2, #31
 800f51e:	d501      	bpl.n	800f524 <_printf_float+0x16c>
 800f520:	3301      	adds	r3, #1
 800f522:	6123      	str	r3, [r4, #16]
 800f524:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d09c      	beq.n	800f466 <_printf_float+0xae>
 800f52c:	232d      	movs	r3, #45	; 0x2d
 800f52e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f532:	e798      	b.n	800f466 <_printf_float+0xae>
 800f534:	9a06      	ldr	r2, [sp, #24]
 800f536:	2a47      	cmp	r2, #71	; 0x47
 800f538:	d1be      	bne.n	800f4b8 <_printf_float+0x100>
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d1bc      	bne.n	800f4b8 <_printf_float+0x100>
 800f53e:	2301      	movs	r3, #1
 800f540:	e7b9      	b.n	800f4b6 <_printf_float+0xfe>
 800f542:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f546:	d118      	bne.n	800f57a <_printf_float+0x1c2>
 800f548:	2900      	cmp	r1, #0
 800f54a:	6863      	ldr	r3, [r4, #4]
 800f54c:	dd0b      	ble.n	800f566 <_printf_float+0x1ae>
 800f54e:	6121      	str	r1, [r4, #16]
 800f550:	b913      	cbnz	r3, 800f558 <_printf_float+0x1a0>
 800f552:	6822      	ldr	r2, [r4, #0]
 800f554:	07d0      	lsls	r0, r2, #31
 800f556:	d502      	bpl.n	800f55e <_printf_float+0x1a6>
 800f558:	3301      	adds	r3, #1
 800f55a:	440b      	add	r3, r1
 800f55c:	6123      	str	r3, [r4, #16]
 800f55e:	65a1      	str	r1, [r4, #88]	; 0x58
 800f560:	f04f 0900 	mov.w	r9, #0
 800f564:	e7de      	b.n	800f524 <_printf_float+0x16c>
 800f566:	b913      	cbnz	r3, 800f56e <_printf_float+0x1b6>
 800f568:	6822      	ldr	r2, [r4, #0]
 800f56a:	07d2      	lsls	r2, r2, #31
 800f56c:	d501      	bpl.n	800f572 <_printf_float+0x1ba>
 800f56e:	3302      	adds	r3, #2
 800f570:	e7f4      	b.n	800f55c <_printf_float+0x1a4>
 800f572:	2301      	movs	r3, #1
 800f574:	e7f2      	b.n	800f55c <_printf_float+0x1a4>
 800f576:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f57a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f57c:	4299      	cmp	r1, r3
 800f57e:	db05      	blt.n	800f58c <_printf_float+0x1d4>
 800f580:	6823      	ldr	r3, [r4, #0]
 800f582:	6121      	str	r1, [r4, #16]
 800f584:	07d8      	lsls	r0, r3, #31
 800f586:	d5ea      	bpl.n	800f55e <_printf_float+0x1a6>
 800f588:	1c4b      	adds	r3, r1, #1
 800f58a:	e7e7      	b.n	800f55c <_printf_float+0x1a4>
 800f58c:	2900      	cmp	r1, #0
 800f58e:	bfd4      	ite	le
 800f590:	f1c1 0202 	rsble	r2, r1, #2
 800f594:	2201      	movgt	r2, #1
 800f596:	4413      	add	r3, r2
 800f598:	e7e0      	b.n	800f55c <_printf_float+0x1a4>
 800f59a:	6823      	ldr	r3, [r4, #0]
 800f59c:	055a      	lsls	r2, r3, #21
 800f59e:	d407      	bmi.n	800f5b0 <_printf_float+0x1f8>
 800f5a0:	6923      	ldr	r3, [r4, #16]
 800f5a2:	4642      	mov	r2, r8
 800f5a4:	4631      	mov	r1, r6
 800f5a6:	4628      	mov	r0, r5
 800f5a8:	47b8      	blx	r7
 800f5aa:	3001      	adds	r0, #1
 800f5ac:	d12c      	bne.n	800f608 <_printf_float+0x250>
 800f5ae:	e764      	b.n	800f47a <_printf_float+0xc2>
 800f5b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f5b4:	f240 80e0 	bls.w	800f778 <_printf_float+0x3c0>
 800f5b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f5bc:	2200      	movs	r2, #0
 800f5be:	2300      	movs	r3, #0
 800f5c0:	f7f1 fa82 	bl	8000ac8 <__aeabi_dcmpeq>
 800f5c4:	2800      	cmp	r0, #0
 800f5c6:	d034      	beq.n	800f632 <_printf_float+0x27a>
 800f5c8:	4a37      	ldr	r2, [pc, #220]	; (800f6a8 <_printf_float+0x2f0>)
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	4631      	mov	r1, r6
 800f5ce:	4628      	mov	r0, r5
 800f5d0:	47b8      	blx	r7
 800f5d2:	3001      	adds	r0, #1
 800f5d4:	f43f af51 	beq.w	800f47a <_printf_float+0xc2>
 800f5d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f5dc:	429a      	cmp	r2, r3
 800f5de:	db02      	blt.n	800f5e6 <_printf_float+0x22e>
 800f5e0:	6823      	ldr	r3, [r4, #0]
 800f5e2:	07d8      	lsls	r0, r3, #31
 800f5e4:	d510      	bpl.n	800f608 <_printf_float+0x250>
 800f5e6:	ee18 3a10 	vmov	r3, s16
 800f5ea:	4652      	mov	r2, sl
 800f5ec:	4631      	mov	r1, r6
 800f5ee:	4628      	mov	r0, r5
 800f5f0:	47b8      	blx	r7
 800f5f2:	3001      	adds	r0, #1
 800f5f4:	f43f af41 	beq.w	800f47a <_printf_float+0xc2>
 800f5f8:	f04f 0800 	mov.w	r8, #0
 800f5fc:	f104 091a 	add.w	r9, r4, #26
 800f600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f602:	3b01      	subs	r3, #1
 800f604:	4543      	cmp	r3, r8
 800f606:	dc09      	bgt.n	800f61c <_printf_float+0x264>
 800f608:	6823      	ldr	r3, [r4, #0]
 800f60a:	079b      	lsls	r3, r3, #30
 800f60c:	f100 8105 	bmi.w	800f81a <_printf_float+0x462>
 800f610:	68e0      	ldr	r0, [r4, #12]
 800f612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f614:	4298      	cmp	r0, r3
 800f616:	bfb8      	it	lt
 800f618:	4618      	movlt	r0, r3
 800f61a:	e730      	b.n	800f47e <_printf_float+0xc6>
 800f61c:	2301      	movs	r3, #1
 800f61e:	464a      	mov	r2, r9
 800f620:	4631      	mov	r1, r6
 800f622:	4628      	mov	r0, r5
 800f624:	47b8      	blx	r7
 800f626:	3001      	adds	r0, #1
 800f628:	f43f af27 	beq.w	800f47a <_printf_float+0xc2>
 800f62c:	f108 0801 	add.w	r8, r8, #1
 800f630:	e7e6      	b.n	800f600 <_printf_float+0x248>
 800f632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f634:	2b00      	cmp	r3, #0
 800f636:	dc39      	bgt.n	800f6ac <_printf_float+0x2f4>
 800f638:	4a1b      	ldr	r2, [pc, #108]	; (800f6a8 <_printf_float+0x2f0>)
 800f63a:	2301      	movs	r3, #1
 800f63c:	4631      	mov	r1, r6
 800f63e:	4628      	mov	r0, r5
 800f640:	47b8      	blx	r7
 800f642:	3001      	adds	r0, #1
 800f644:	f43f af19 	beq.w	800f47a <_printf_float+0xc2>
 800f648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f64c:	4313      	orrs	r3, r2
 800f64e:	d102      	bne.n	800f656 <_printf_float+0x29e>
 800f650:	6823      	ldr	r3, [r4, #0]
 800f652:	07d9      	lsls	r1, r3, #31
 800f654:	d5d8      	bpl.n	800f608 <_printf_float+0x250>
 800f656:	ee18 3a10 	vmov	r3, s16
 800f65a:	4652      	mov	r2, sl
 800f65c:	4631      	mov	r1, r6
 800f65e:	4628      	mov	r0, r5
 800f660:	47b8      	blx	r7
 800f662:	3001      	adds	r0, #1
 800f664:	f43f af09 	beq.w	800f47a <_printf_float+0xc2>
 800f668:	f04f 0900 	mov.w	r9, #0
 800f66c:	f104 0a1a 	add.w	sl, r4, #26
 800f670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f672:	425b      	negs	r3, r3
 800f674:	454b      	cmp	r3, r9
 800f676:	dc01      	bgt.n	800f67c <_printf_float+0x2c4>
 800f678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f67a:	e792      	b.n	800f5a2 <_printf_float+0x1ea>
 800f67c:	2301      	movs	r3, #1
 800f67e:	4652      	mov	r2, sl
 800f680:	4631      	mov	r1, r6
 800f682:	4628      	mov	r0, r5
 800f684:	47b8      	blx	r7
 800f686:	3001      	adds	r0, #1
 800f688:	f43f aef7 	beq.w	800f47a <_printf_float+0xc2>
 800f68c:	f109 0901 	add.w	r9, r9, #1
 800f690:	e7ee      	b.n	800f670 <_printf_float+0x2b8>
 800f692:	bf00      	nop
 800f694:	7fefffff 	.word	0x7fefffff
 800f698:	080125fc 	.word	0x080125fc
 800f69c:	08012600 	.word	0x08012600
 800f6a0:	08012608 	.word	0x08012608
 800f6a4:	08012604 	.word	0x08012604
 800f6a8:	0801260c 	.word	0x0801260c
 800f6ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f6b0:	429a      	cmp	r2, r3
 800f6b2:	bfa8      	it	ge
 800f6b4:	461a      	movge	r2, r3
 800f6b6:	2a00      	cmp	r2, #0
 800f6b8:	4691      	mov	r9, r2
 800f6ba:	dc37      	bgt.n	800f72c <_printf_float+0x374>
 800f6bc:	f04f 0b00 	mov.w	fp, #0
 800f6c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f6c4:	f104 021a 	add.w	r2, r4, #26
 800f6c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f6ca:	9305      	str	r3, [sp, #20]
 800f6cc:	eba3 0309 	sub.w	r3, r3, r9
 800f6d0:	455b      	cmp	r3, fp
 800f6d2:	dc33      	bgt.n	800f73c <_printf_float+0x384>
 800f6d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f6d8:	429a      	cmp	r2, r3
 800f6da:	db3b      	blt.n	800f754 <_printf_float+0x39c>
 800f6dc:	6823      	ldr	r3, [r4, #0]
 800f6de:	07da      	lsls	r2, r3, #31
 800f6e0:	d438      	bmi.n	800f754 <_printf_float+0x39c>
 800f6e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6e4:	9a05      	ldr	r2, [sp, #20]
 800f6e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f6e8:	1a9a      	subs	r2, r3, r2
 800f6ea:	eba3 0901 	sub.w	r9, r3, r1
 800f6ee:	4591      	cmp	r9, r2
 800f6f0:	bfa8      	it	ge
 800f6f2:	4691      	movge	r9, r2
 800f6f4:	f1b9 0f00 	cmp.w	r9, #0
 800f6f8:	dc35      	bgt.n	800f766 <_printf_float+0x3ae>
 800f6fa:	f04f 0800 	mov.w	r8, #0
 800f6fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f702:	f104 0a1a 	add.w	sl, r4, #26
 800f706:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f70a:	1a9b      	subs	r3, r3, r2
 800f70c:	eba3 0309 	sub.w	r3, r3, r9
 800f710:	4543      	cmp	r3, r8
 800f712:	f77f af79 	ble.w	800f608 <_printf_float+0x250>
 800f716:	2301      	movs	r3, #1
 800f718:	4652      	mov	r2, sl
 800f71a:	4631      	mov	r1, r6
 800f71c:	4628      	mov	r0, r5
 800f71e:	47b8      	blx	r7
 800f720:	3001      	adds	r0, #1
 800f722:	f43f aeaa 	beq.w	800f47a <_printf_float+0xc2>
 800f726:	f108 0801 	add.w	r8, r8, #1
 800f72a:	e7ec      	b.n	800f706 <_printf_float+0x34e>
 800f72c:	4613      	mov	r3, r2
 800f72e:	4631      	mov	r1, r6
 800f730:	4642      	mov	r2, r8
 800f732:	4628      	mov	r0, r5
 800f734:	47b8      	blx	r7
 800f736:	3001      	adds	r0, #1
 800f738:	d1c0      	bne.n	800f6bc <_printf_float+0x304>
 800f73a:	e69e      	b.n	800f47a <_printf_float+0xc2>
 800f73c:	2301      	movs	r3, #1
 800f73e:	4631      	mov	r1, r6
 800f740:	4628      	mov	r0, r5
 800f742:	9205      	str	r2, [sp, #20]
 800f744:	47b8      	blx	r7
 800f746:	3001      	adds	r0, #1
 800f748:	f43f ae97 	beq.w	800f47a <_printf_float+0xc2>
 800f74c:	9a05      	ldr	r2, [sp, #20]
 800f74e:	f10b 0b01 	add.w	fp, fp, #1
 800f752:	e7b9      	b.n	800f6c8 <_printf_float+0x310>
 800f754:	ee18 3a10 	vmov	r3, s16
 800f758:	4652      	mov	r2, sl
 800f75a:	4631      	mov	r1, r6
 800f75c:	4628      	mov	r0, r5
 800f75e:	47b8      	blx	r7
 800f760:	3001      	adds	r0, #1
 800f762:	d1be      	bne.n	800f6e2 <_printf_float+0x32a>
 800f764:	e689      	b.n	800f47a <_printf_float+0xc2>
 800f766:	9a05      	ldr	r2, [sp, #20]
 800f768:	464b      	mov	r3, r9
 800f76a:	4442      	add	r2, r8
 800f76c:	4631      	mov	r1, r6
 800f76e:	4628      	mov	r0, r5
 800f770:	47b8      	blx	r7
 800f772:	3001      	adds	r0, #1
 800f774:	d1c1      	bne.n	800f6fa <_printf_float+0x342>
 800f776:	e680      	b.n	800f47a <_printf_float+0xc2>
 800f778:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f77a:	2a01      	cmp	r2, #1
 800f77c:	dc01      	bgt.n	800f782 <_printf_float+0x3ca>
 800f77e:	07db      	lsls	r3, r3, #31
 800f780:	d538      	bpl.n	800f7f4 <_printf_float+0x43c>
 800f782:	2301      	movs	r3, #1
 800f784:	4642      	mov	r2, r8
 800f786:	4631      	mov	r1, r6
 800f788:	4628      	mov	r0, r5
 800f78a:	47b8      	blx	r7
 800f78c:	3001      	adds	r0, #1
 800f78e:	f43f ae74 	beq.w	800f47a <_printf_float+0xc2>
 800f792:	ee18 3a10 	vmov	r3, s16
 800f796:	4652      	mov	r2, sl
 800f798:	4631      	mov	r1, r6
 800f79a:	4628      	mov	r0, r5
 800f79c:	47b8      	blx	r7
 800f79e:	3001      	adds	r0, #1
 800f7a0:	f43f ae6b 	beq.w	800f47a <_printf_float+0xc2>
 800f7a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	f7f1 f98c 	bl	8000ac8 <__aeabi_dcmpeq>
 800f7b0:	b9d8      	cbnz	r0, 800f7ea <_printf_float+0x432>
 800f7b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7b4:	f108 0201 	add.w	r2, r8, #1
 800f7b8:	3b01      	subs	r3, #1
 800f7ba:	4631      	mov	r1, r6
 800f7bc:	4628      	mov	r0, r5
 800f7be:	47b8      	blx	r7
 800f7c0:	3001      	adds	r0, #1
 800f7c2:	d10e      	bne.n	800f7e2 <_printf_float+0x42a>
 800f7c4:	e659      	b.n	800f47a <_printf_float+0xc2>
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	4652      	mov	r2, sl
 800f7ca:	4631      	mov	r1, r6
 800f7cc:	4628      	mov	r0, r5
 800f7ce:	47b8      	blx	r7
 800f7d0:	3001      	adds	r0, #1
 800f7d2:	f43f ae52 	beq.w	800f47a <_printf_float+0xc2>
 800f7d6:	f108 0801 	add.w	r8, r8, #1
 800f7da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7dc:	3b01      	subs	r3, #1
 800f7de:	4543      	cmp	r3, r8
 800f7e0:	dcf1      	bgt.n	800f7c6 <_printf_float+0x40e>
 800f7e2:	464b      	mov	r3, r9
 800f7e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f7e8:	e6dc      	b.n	800f5a4 <_printf_float+0x1ec>
 800f7ea:	f04f 0800 	mov.w	r8, #0
 800f7ee:	f104 0a1a 	add.w	sl, r4, #26
 800f7f2:	e7f2      	b.n	800f7da <_printf_float+0x422>
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	4642      	mov	r2, r8
 800f7f8:	e7df      	b.n	800f7ba <_printf_float+0x402>
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	464a      	mov	r2, r9
 800f7fe:	4631      	mov	r1, r6
 800f800:	4628      	mov	r0, r5
 800f802:	47b8      	blx	r7
 800f804:	3001      	adds	r0, #1
 800f806:	f43f ae38 	beq.w	800f47a <_printf_float+0xc2>
 800f80a:	f108 0801 	add.w	r8, r8, #1
 800f80e:	68e3      	ldr	r3, [r4, #12]
 800f810:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f812:	1a5b      	subs	r3, r3, r1
 800f814:	4543      	cmp	r3, r8
 800f816:	dcf0      	bgt.n	800f7fa <_printf_float+0x442>
 800f818:	e6fa      	b.n	800f610 <_printf_float+0x258>
 800f81a:	f04f 0800 	mov.w	r8, #0
 800f81e:	f104 0919 	add.w	r9, r4, #25
 800f822:	e7f4      	b.n	800f80e <_printf_float+0x456>

0800f824 <_printf_common>:
 800f824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f828:	4616      	mov	r6, r2
 800f82a:	4699      	mov	r9, r3
 800f82c:	688a      	ldr	r2, [r1, #8]
 800f82e:	690b      	ldr	r3, [r1, #16]
 800f830:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f834:	4293      	cmp	r3, r2
 800f836:	bfb8      	it	lt
 800f838:	4613      	movlt	r3, r2
 800f83a:	6033      	str	r3, [r6, #0]
 800f83c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f840:	4607      	mov	r7, r0
 800f842:	460c      	mov	r4, r1
 800f844:	b10a      	cbz	r2, 800f84a <_printf_common+0x26>
 800f846:	3301      	adds	r3, #1
 800f848:	6033      	str	r3, [r6, #0]
 800f84a:	6823      	ldr	r3, [r4, #0]
 800f84c:	0699      	lsls	r1, r3, #26
 800f84e:	bf42      	ittt	mi
 800f850:	6833      	ldrmi	r3, [r6, #0]
 800f852:	3302      	addmi	r3, #2
 800f854:	6033      	strmi	r3, [r6, #0]
 800f856:	6825      	ldr	r5, [r4, #0]
 800f858:	f015 0506 	ands.w	r5, r5, #6
 800f85c:	d106      	bne.n	800f86c <_printf_common+0x48>
 800f85e:	f104 0a19 	add.w	sl, r4, #25
 800f862:	68e3      	ldr	r3, [r4, #12]
 800f864:	6832      	ldr	r2, [r6, #0]
 800f866:	1a9b      	subs	r3, r3, r2
 800f868:	42ab      	cmp	r3, r5
 800f86a:	dc26      	bgt.n	800f8ba <_printf_common+0x96>
 800f86c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f870:	1e13      	subs	r3, r2, #0
 800f872:	6822      	ldr	r2, [r4, #0]
 800f874:	bf18      	it	ne
 800f876:	2301      	movne	r3, #1
 800f878:	0692      	lsls	r2, r2, #26
 800f87a:	d42b      	bmi.n	800f8d4 <_printf_common+0xb0>
 800f87c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f880:	4649      	mov	r1, r9
 800f882:	4638      	mov	r0, r7
 800f884:	47c0      	blx	r8
 800f886:	3001      	adds	r0, #1
 800f888:	d01e      	beq.n	800f8c8 <_printf_common+0xa4>
 800f88a:	6823      	ldr	r3, [r4, #0]
 800f88c:	68e5      	ldr	r5, [r4, #12]
 800f88e:	6832      	ldr	r2, [r6, #0]
 800f890:	f003 0306 	and.w	r3, r3, #6
 800f894:	2b04      	cmp	r3, #4
 800f896:	bf08      	it	eq
 800f898:	1aad      	subeq	r5, r5, r2
 800f89a:	68a3      	ldr	r3, [r4, #8]
 800f89c:	6922      	ldr	r2, [r4, #16]
 800f89e:	bf0c      	ite	eq
 800f8a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f8a4:	2500      	movne	r5, #0
 800f8a6:	4293      	cmp	r3, r2
 800f8a8:	bfc4      	itt	gt
 800f8aa:	1a9b      	subgt	r3, r3, r2
 800f8ac:	18ed      	addgt	r5, r5, r3
 800f8ae:	2600      	movs	r6, #0
 800f8b0:	341a      	adds	r4, #26
 800f8b2:	42b5      	cmp	r5, r6
 800f8b4:	d11a      	bne.n	800f8ec <_printf_common+0xc8>
 800f8b6:	2000      	movs	r0, #0
 800f8b8:	e008      	b.n	800f8cc <_printf_common+0xa8>
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	4652      	mov	r2, sl
 800f8be:	4649      	mov	r1, r9
 800f8c0:	4638      	mov	r0, r7
 800f8c2:	47c0      	blx	r8
 800f8c4:	3001      	adds	r0, #1
 800f8c6:	d103      	bne.n	800f8d0 <_printf_common+0xac>
 800f8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800f8cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8d0:	3501      	adds	r5, #1
 800f8d2:	e7c6      	b.n	800f862 <_printf_common+0x3e>
 800f8d4:	18e1      	adds	r1, r4, r3
 800f8d6:	1c5a      	adds	r2, r3, #1
 800f8d8:	2030      	movs	r0, #48	; 0x30
 800f8da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f8de:	4422      	add	r2, r4
 800f8e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f8e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f8e8:	3302      	adds	r3, #2
 800f8ea:	e7c7      	b.n	800f87c <_printf_common+0x58>
 800f8ec:	2301      	movs	r3, #1
 800f8ee:	4622      	mov	r2, r4
 800f8f0:	4649      	mov	r1, r9
 800f8f2:	4638      	mov	r0, r7
 800f8f4:	47c0      	blx	r8
 800f8f6:	3001      	adds	r0, #1
 800f8f8:	d0e6      	beq.n	800f8c8 <_printf_common+0xa4>
 800f8fa:	3601      	adds	r6, #1
 800f8fc:	e7d9      	b.n	800f8b2 <_printf_common+0x8e>
	...

0800f900 <_printf_i>:
 800f900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f904:	7e0f      	ldrb	r7, [r1, #24]
 800f906:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f908:	2f78      	cmp	r7, #120	; 0x78
 800f90a:	4691      	mov	r9, r2
 800f90c:	4680      	mov	r8, r0
 800f90e:	460c      	mov	r4, r1
 800f910:	469a      	mov	sl, r3
 800f912:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f916:	d807      	bhi.n	800f928 <_printf_i+0x28>
 800f918:	2f62      	cmp	r7, #98	; 0x62
 800f91a:	d80a      	bhi.n	800f932 <_printf_i+0x32>
 800f91c:	2f00      	cmp	r7, #0
 800f91e:	f000 80d8 	beq.w	800fad2 <_printf_i+0x1d2>
 800f922:	2f58      	cmp	r7, #88	; 0x58
 800f924:	f000 80a3 	beq.w	800fa6e <_printf_i+0x16e>
 800f928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f92c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f930:	e03a      	b.n	800f9a8 <_printf_i+0xa8>
 800f932:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f936:	2b15      	cmp	r3, #21
 800f938:	d8f6      	bhi.n	800f928 <_printf_i+0x28>
 800f93a:	a101      	add	r1, pc, #4	; (adr r1, 800f940 <_printf_i+0x40>)
 800f93c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f940:	0800f999 	.word	0x0800f999
 800f944:	0800f9ad 	.word	0x0800f9ad
 800f948:	0800f929 	.word	0x0800f929
 800f94c:	0800f929 	.word	0x0800f929
 800f950:	0800f929 	.word	0x0800f929
 800f954:	0800f929 	.word	0x0800f929
 800f958:	0800f9ad 	.word	0x0800f9ad
 800f95c:	0800f929 	.word	0x0800f929
 800f960:	0800f929 	.word	0x0800f929
 800f964:	0800f929 	.word	0x0800f929
 800f968:	0800f929 	.word	0x0800f929
 800f96c:	0800fab9 	.word	0x0800fab9
 800f970:	0800f9dd 	.word	0x0800f9dd
 800f974:	0800fa9b 	.word	0x0800fa9b
 800f978:	0800f929 	.word	0x0800f929
 800f97c:	0800f929 	.word	0x0800f929
 800f980:	0800fadb 	.word	0x0800fadb
 800f984:	0800f929 	.word	0x0800f929
 800f988:	0800f9dd 	.word	0x0800f9dd
 800f98c:	0800f929 	.word	0x0800f929
 800f990:	0800f929 	.word	0x0800f929
 800f994:	0800faa3 	.word	0x0800faa3
 800f998:	682b      	ldr	r3, [r5, #0]
 800f99a:	1d1a      	adds	r2, r3, #4
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	602a      	str	r2, [r5, #0]
 800f9a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f9a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f9a8:	2301      	movs	r3, #1
 800f9aa:	e0a3      	b.n	800faf4 <_printf_i+0x1f4>
 800f9ac:	6820      	ldr	r0, [r4, #0]
 800f9ae:	6829      	ldr	r1, [r5, #0]
 800f9b0:	0606      	lsls	r6, r0, #24
 800f9b2:	f101 0304 	add.w	r3, r1, #4
 800f9b6:	d50a      	bpl.n	800f9ce <_printf_i+0xce>
 800f9b8:	680e      	ldr	r6, [r1, #0]
 800f9ba:	602b      	str	r3, [r5, #0]
 800f9bc:	2e00      	cmp	r6, #0
 800f9be:	da03      	bge.n	800f9c8 <_printf_i+0xc8>
 800f9c0:	232d      	movs	r3, #45	; 0x2d
 800f9c2:	4276      	negs	r6, r6
 800f9c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f9c8:	485e      	ldr	r0, [pc, #376]	; (800fb44 <_printf_i+0x244>)
 800f9ca:	230a      	movs	r3, #10
 800f9cc:	e019      	b.n	800fa02 <_printf_i+0x102>
 800f9ce:	680e      	ldr	r6, [r1, #0]
 800f9d0:	602b      	str	r3, [r5, #0]
 800f9d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f9d6:	bf18      	it	ne
 800f9d8:	b236      	sxthne	r6, r6
 800f9da:	e7ef      	b.n	800f9bc <_printf_i+0xbc>
 800f9dc:	682b      	ldr	r3, [r5, #0]
 800f9de:	6820      	ldr	r0, [r4, #0]
 800f9e0:	1d19      	adds	r1, r3, #4
 800f9e2:	6029      	str	r1, [r5, #0]
 800f9e4:	0601      	lsls	r1, r0, #24
 800f9e6:	d501      	bpl.n	800f9ec <_printf_i+0xec>
 800f9e8:	681e      	ldr	r6, [r3, #0]
 800f9ea:	e002      	b.n	800f9f2 <_printf_i+0xf2>
 800f9ec:	0646      	lsls	r6, r0, #25
 800f9ee:	d5fb      	bpl.n	800f9e8 <_printf_i+0xe8>
 800f9f0:	881e      	ldrh	r6, [r3, #0]
 800f9f2:	4854      	ldr	r0, [pc, #336]	; (800fb44 <_printf_i+0x244>)
 800f9f4:	2f6f      	cmp	r7, #111	; 0x6f
 800f9f6:	bf0c      	ite	eq
 800f9f8:	2308      	moveq	r3, #8
 800f9fa:	230a      	movne	r3, #10
 800f9fc:	2100      	movs	r1, #0
 800f9fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fa02:	6865      	ldr	r5, [r4, #4]
 800fa04:	60a5      	str	r5, [r4, #8]
 800fa06:	2d00      	cmp	r5, #0
 800fa08:	bfa2      	ittt	ge
 800fa0a:	6821      	ldrge	r1, [r4, #0]
 800fa0c:	f021 0104 	bicge.w	r1, r1, #4
 800fa10:	6021      	strge	r1, [r4, #0]
 800fa12:	b90e      	cbnz	r6, 800fa18 <_printf_i+0x118>
 800fa14:	2d00      	cmp	r5, #0
 800fa16:	d04d      	beq.n	800fab4 <_printf_i+0x1b4>
 800fa18:	4615      	mov	r5, r2
 800fa1a:	fbb6 f1f3 	udiv	r1, r6, r3
 800fa1e:	fb03 6711 	mls	r7, r3, r1, r6
 800fa22:	5dc7      	ldrb	r7, [r0, r7]
 800fa24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fa28:	4637      	mov	r7, r6
 800fa2a:	42bb      	cmp	r3, r7
 800fa2c:	460e      	mov	r6, r1
 800fa2e:	d9f4      	bls.n	800fa1a <_printf_i+0x11a>
 800fa30:	2b08      	cmp	r3, #8
 800fa32:	d10b      	bne.n	800fa4c <_printf_i+0x14c>
 800fa34:	6823      	ldr	r3, [r4, #0]
 800fa36:	07de      	lsls	r6, r3, #31
 800fa38:	d508      	bpl.n	800fa4c <_printf_i+0x14c>
 800fa3a:	6923      	ldr	r3, [r4, #16]
 800fa3c:	6861      	ldr	r1, [r4, #4]
 800fa3e:	4299      	cmp	r1, r3
 800fa40:	bfde      	ittt	le
 800fa42:	2330      	movle	r3, #48	; 0x30
 800fa44:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fa48:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fa4c:	1b52      	subs	r2, r2, r5
 800fa4e:	6122      	str	r2, [r4, #16]
 800fa50:	f8cd a000 	str.w	sl, [sp]
 800fa54:	464b      	mov	r3, r9
 800fa56:	aa03      	add	r2, sp, #12
 800fa58:	4621      	mov	r1, r4
 800fa5a:	4640      	mov	r0, r8
 800fa5c:	f7ff fee2 	bl	800f824 <_printf_common>
 800fa60:	3001      	adds	r0, #1
 800fa62:	d14c      	bne.n	800fafe <_printf_i+0x1fe>
 800fa64:	f04f 30ff 	mov.w	r0, #4294967295
 800fa68:	b004      	add	sp, #16
 800fa6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa6e:	4835      	ldr	r0, [pc, #212]	; (800fb44 <_printf_i+0x244>)
 800fa70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fa74:	6829      	ldr	r1, [r5, #0]
 800fa76:	6823      	ldr	r3, [r4, #0]
 800fa78:	f851 6b04 	ldr.w	r6, [r1], #4
 800fa7c:	6029      	str	r1, [r5, #0]
 800fa7e:	061d      	lsls	r5, r3, #24
 800fa80:	d514      	bpl.n	800faac <_printf_i+0x1ac>
 800fa82:	07df      	lsls	r7, r3, #31
 800fa84:	bf44      	itt	mi
 800fa86:	f043 0320 	orrmi.w	r3, r3, #32
 800fa8a:	6023      	strmi	r3, [r4, #0]
 800fa8c:	b91e      	cbnz	r6, 800fa96 <_printf_i+0x196>
 800fa8e:	6823      	ldr	r3, [r4, #0]
 800fa90:	f023 0320 	bic.w	r3, r3, #32
 800fa94:	6023      	str	r3, [r4, #0]
 800fa96:	2310      	movs	r3, #16
 800fa98:	e7b0      	b.n	800f9fc <_printf_i+0xfc>
 800fa9a:	6823      	ldr	r3, [r4, #0]
 800fa9c:	f043 0320 	orr.w	r3, r3, #32
 800faa0:	6023      	str	r3, [r4, #0]
 800faa2:	2378      	movs	r3, #120	; 0x78
 800faa4:	4828      	ldr	r0, [pc, #160]	; (800fb48 <_printf_i+0x248>)
 800faa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800faaa:	e7e3      	b.n	800fa74 <_printf_i+0x174>
 800faac:	0659      	lsls	r1, r3, #25
 800faae:	bf48      	it	mi
 800fab0:	b2b6      	uxthmi	r6, r6
 800fab2:	e7e6      	b.n	800fa82 <_printf_i+0x182>
 800fab4:	4615      	mov	r5, r2
 800fab6:	e7bb      	b.n	800fa30 <_printf_i+0x130>
 800fab8:	682b      	ldr	r3, [r5, #0]
 800faba:	6826      	ldr	r6, [r4, #0]
 800fabc:	6961      	ldr	r1, [r4, #20]
 800fabe:	1d18      	adds	r0, r3, #4
 800fac0:	6028      	str	r0, [r5, #0]
 800fac2:	0635      	lsls	r5, r6, #24
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	d501      	bpl.n	800facc <_printf_i+0x1cc>
 800fac8:	6019      	str	r1, [r3, #0]
 800faca:	e002      	b.n	800fad2 <_printf_i+0x1d2>
 800facc:	0670      	lsls	r0, r6, #25
 800face:	d5fb      	bpl.n	800fac8 <_printf_i+0x1c8>
 800fad0:	8019      	strh	r1, [r3, #0]
 800fad2:	2300      	movs	r3, #0
 800fad4:	6123      	str	r3, [r4, #16]
 800fad6:	4615      	mov	r5, r2
 800fad8:	e7ba      	b.n	800fa50 <_printf_i+0x150>
 800fada:	682b      	ldr	r3, [r5, #0]
 800fadc:	1d1a      	adds	r2, r3, #4
 800fade:	602a      	str	r2, [r5, #0]
 800fae0:	681d      	ldr	r5, [r3, #0]
 800fae2:	6862      	ldr	r2, [r4, #4]
 800fae4:	2100      	movs	r1, #0
 800fae6:	4628      	mov	r0, r5
 800fae8:	f7f0 fb7a 	bl	80001e0 <memchr>
 800faec:	b108      	cbz	r0, 800faf2 <_printf_i+0x1f2>
 800faee:	1b40      	subs	r0, r0, r5
 800faf0:	6060      	str	r0, [r4, #4]
 800faf2:	6863      	ldr	r3, [r4, #4]
 800faf4:	6123      	str	r3, [r4, #16]
 800faf6:	2300      	movs	r3, #0
 800faf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fafc:	e7a8      	b.n	800fa50 <_printf_i+0x150>
 800fafe:	6923      	ldr	r3, [r4, #16]
 800fb00:	462a      	mov	r2, r5
 800fb02:	4649      	mov	r1, r9
 800fb04:	4640      	mov	r0, r8
 800fb06:	47d0      	blx	sl
 800fb08:	3001      	adds	r0, #1
 800fb0a:	d0ab      	beq.n	800fa64 <_printf_i+0x164>
 800fb0c:	6823      	ldr	r3, [r4, #0]
 800fb0e:	079b      	lsls	r3, r3, #30
 800fb10:	d413      	bmi.n	800fb3a <_printf_i+0x23a>
 800fb12:	68e0      	ldr	r0, [r4, #12]
 800fb14:	9b03      	ldr	r3, [sp, #12]
 800fb16:	4298      	cmp	r0, r3
 800fb18:	bfb8      	it	lt
 800fb1a:	4618      	movlt	r0, r3
 800fb1c:	e7a4      	b.n	800fa68 <_printf_i+0x168>
 800fb1e:	2301      	movs	r3, #1
 800fb20:	4632      	mov	r2, r6
 800fb22:	4649      	mov	r1, r9
 800fb24:	4640      	mov	r0, r8
 800fb26:	47d0      	blx	sl
 800fb28:	3001      	adds	r0, #1
 800fb2a:	d09b      	beq.n	800fa64 <_printf_i+0x164>
 800fb2c:	3501      	adds	r5, #1
 800fb2e:	68e3      	ldr	r3, [r4, #12]
 800fb30:	9903      	ldr	r1, [sp, #12]
 800fb32:	1a5b      	subs	r3, r3, r1
 800fb34:	42ab      	cmp	r3, r5
 800fb36:	dcf2      	bgt.n	800fb1e <_printf_i+0x21e>
 800fb38:	e7eb      	b.n	800fb12 <_printf_i+0x212>
 800fb3a:	2500      	movs	r5, #0
 800fb3c:	f104 0619 	add.w	r6, r4, #25
 800fb40:	e7f5      	b.n	800fb2e <_printf_i+0x22e>
 800fb42:	bf00      	nop
 800fb44:	0801260e 	.word	0x0801260e
 800fb48:	0801261f 	.word	0x0801261f

0800fb4c <iprintf>:
 800fb4c:	b40f      	push	{r0, r1, r2, r3}
 800fb4e:	4b0a      	ldr	r3, [pc, #40]	; (800fb78 <iprintf+0x2c>)
 800fb50:	b513      	push	{r0, r1, r4, lr}
 800fb52:	681c      	ldr	r4, [r3, #0]
 800fb54:	b124      	cbz	r4, 800fb60 <iprintf+0x14>
 800fb56:	69a3      	ldr	r3, [r4, #24]
 800fb58:	b913      	cbnz	r3, 800fb60 <iprintf+0x14>
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	f7ff fa1c 	bl	800ef98 <__sinit>
 800fb60:	ab05      	add	r3, sp, #20
 800fb62:	9a04      	ldr	r2, [sp, #16]
 800fb64:	68a1      	ldr	r1, [r4, #8]
 800fb66:	9301      	str	r3, [sp, #4]
 800fb68:	4620      	mov	r0, r4
 800fb6a:	f001 fdf9 	bl	8011760 <_vfiprintf_r>
 800fb6e:	b002      	add	sp, #8
 800fb70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb74:	b004      	add	sp, #16
 800fb76:	4770      	bx	lr
 800fb78:	20000018 	.word	0x20000018

0800fb7c <_puts_r>:
 800fb7c:	b570      	push	{r4, r5, r6, lr}
 800fb7e:	460e      	mov	r6, r1
 800fb80:	4605      	mov	r5, r0
 800fb82:	b118      	cbz	r0, 800fb8c <_puts_r+0x10>
 800fb84:	6983      	ldr	r3, [r0, #24]
 800fb86:	b90b      	cbnz	r3, 800fb8c <_puts_r+0x10>
 800fb88:	f7ff fa06 	bl	800ef98 <__sinit>
 800fb8c:	69ab      	ldr	r3, [r5, #24]
 800fb8e:	68ac      	ldr	r4, [r5, #8]
 800fb90:	b913      	cbnz	r3, 800fb98 <_puts_r+0x1c>
 800fb92:	4628      	mov	r0, r5
 800fb94:	f7ff fa00 	bl	800ef98 <__sinit>
 800fb98:	4b2c      	ldr	r3, [pc, #176]	; (800fc4c <_puts_r+0xd0>)
 800fb9a:	429c      	cmp	r4, r3
 800fb9c:	d120      	bne.n	800fbe0 <_puts_r+0x64>
 800fb9e:	686c      	ldr	r4, [r5, #4]
 800fba0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fba2:	07db      	lsls	r3, r3, #31
 800fba4:	d405      	bmi.n	800fbb2 <_puts_r+0x36>
 800fba6:	89a3      	ldrh	r3, [r4, #12]
 800fba8:	0598      	lsls	r0, r3, #22
 800fbaa:	d402      	bmi.n	800fbb2 <_puts_r+0x36>
 800fbac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fbae:	f7ff fab6 	bl	800f11e <__retarget_lock_acquire_recursive>
 800fbb2:	89a3      	ldrh	r3, [r4, #12]
 800fbb4:	0719      	lsls	r1, r3, #28
 800fbb6:	d51d      	bpl.n	800fbf4 <_puts_r+0x78>
 800fbb8:	6923      	ldr	r3, [r4, #16]
 800fbba:	b1db      	cbz	r3, 800fbf4 <_puts_r+0x78>
 800fbbc:	3e01      	subs	r6, #1
 800fbbe:	68a3      	ldr	r3, [r4, #8]
 800fbc0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fbc4:	3b01      	subs	r3, #1
 800fbc6:	60a3      	str	r3, [r4, #8]
 800fbc8:	bb39      	cbnz	r1, 800fc1a <_puts_r+0x9e>
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	da38      	bge.n	800fc40 <_puts_r+0xc4>
 800fbce:	4622      	mov	r2, r4
 800fbd0:	210a      	movs	r1, #10
 800fbd2:	4628      	mov	r0, r5
 800fbd4:	f000 f906 	bl	800fde4 <__swbuf_r>
 800fbd8:	3001      	adds	r0, #1
 800fbda:	d011      	beq.n	800fc00 <_puts_r+0x84>
 800fbdc:	250a      	movs	r5, #10
 800fbde:	e011      	b.n	800fc04 <_puts_r+0x88>
 800fbe0:	4b1b      	ldr	r3, [pc, #108]	; (800fc50 <_puts_r+0xd4>)
 800fbe2:	429c      	cmp	r4, r3
 800fbe4:	d101      	bne.n	800fbea <_puts_r+0x6e>
 800fbe6:	68ac      	ldr	r4, [r5, #8]
 800fbe8:	e7da      	b.n	800fba0 <_puts_r+0x24>
 800fbea:	4b1a      	ldr	r3, [pc, #104]	; (800fc54 <_puts_r+0xd8>)
 800fbec:	429c      	cmp	r4, r3
 800fbee:	bf08      	it	eq
 800fbf0:	68ec      	ldreq	r4, [r5, #12]
 800fbf2:	e7d5      	b.n	800fba0 <_puts_r+0x24>
 800fbf4:	4621      	mov	r1, r4
 800fbf6:	4628      	mov	r0, r5
 800fbf8:	f000 f958 	bl	800feac <__swsetup_r>
 800fbfc:	2800      	cmp	r0, #0
 800fbfe:	d0dd      	beq.n	800fbbc <_puts_r+0x40>
 800fc00:	f04f 35ff 	mov.w	r5, #4294967295
 800fc04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc06:	07da      	lsls	r2, r3, #31
 800fc08:	d405      	bmi.n	800fc16 <_puts_r+0x9a>
 800fc0a:	89a3      	ldrh	r3, [r4, #12]
 800fc0c:	059b      	lsls	r3, r3, #22
 800fc0e:	d402      	bmi.n	800fc16 <_puts_r+0x9a>
 800fc10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc12:	f7ff fa85 	bl	800f120 <__retarget_lock_release_recursive>
 800fc16:	4628      	mov	r0, r5
 800fc18:	bd70      	pop	{r4, r5, r6, pc}
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	da04      	bge.n	800fc28 <_puts_r+0xac>
 800fc1e:	69a2      	ldr	r2, [r4, #24]
 800fc20:	429a      	cmp	r2, r3
 800fc22:	dc06      	bgt.n	800fc32 <_puts_r+0xb6>
 800fc24:	290a      	cmp	r1, #10
 800fc26:	d004      	beq.n	800fc32 <_puts_r+0xb6>
 800fc28:	6823      	ldr	r3, [r4, #0]
 800fc2a:	1c5a      	adds	r2, r3, #1
 800fc2c:	6022      	str	r2, [r4, #0]
 800fc2e:	7019      	strb	r1, [r3, #0]
 800fc30:	e7c5      	b.n	800fbbe <_puts_r+0x42>
 800fc32:	4622      	mov	r2, r4
 800fc34:	4628      	mov	r0, r5
 800fc36:	f000 f8d5 	bl	800fde4 <__swbuf_r>
 800fc3a:	3001      	adds	r0, #1
 800fc3c:	d1bf      	bne.n	800fbbe <_puts_r+0x42>
 800fc3e:	e7df      	b.n	800fc00 <_puts_r+0x84>
 800fc40:	6823      	ldr	r3, [r4, #0]
 800fc42:	250a      	movs	r5, #10
 800fc44:	1c5a      	adds	r2, r3, #1
 800fc46:	6022      	str	r2, [r4, #0]
 800fc48:	701d      	strb	r5, [r3, #0]
 800fc4a:	e7db      	b.n	800fc04 <_puts_r+0x88>
 800fc4c:	080125b8 	.word	0x080125b8
 800fc50:	080125d8 	.word	0x080125d8
 800fc54:	08012598 	.word	0x08012598

0800fc58 <puts>:
 800fc58:	4b02      	ldr	r3, [pc, #8]	; (800fc64 <puts+0xc>)
 800fc5a:	4601      	mov	r1, r0
 800fc5c:	6818      	ldr	r0, [r3, #0]
 800fc5e:	f7ff bf8d 	b.w	800fb7c <_puts_r>
 800fc62:	bf00      	nop
 800fc64:	20000018 	.word	0x20000018

0800fc68 <cleanup_glue>:
 800fc68:	b538      	push	{r3, r4, r5, lr}
 800fc6a:	460c      	mov	r4, r1
 800fc6c:	6809      	ldr	r1, [r1, #0]
 800fc6e:	4605      	mov	r5, r0
 800fc70:	b109      	cbz	r1, 800fc76 <cleanup_glue+0xe>
 800fc72:	f7ff fff9 	bl	800fc68 <cleanup_glue>
 800fc76:	4621      	mov	r1, r4
 800fc78:	4628      	mov	r0, r5
 800fc7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc7e:	f001 bcf9 	b.w	8011674 <_free_r>
	...

0800fc84 <_reclaim_reent>:
 800fc84:	4b2c      	ldr	r3, [pc, #176]	; (800fd38 <_reclaim_reent+0xb4>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	4283      	cmp	r3, r0
 800fc8a:	b570      	push	{r4, r5, r6, lr}
 800fc8c:	4604      	mov	r4, r0
 800fc8e:	d051      	beq.n	800fd34 <_reclaim_reent+0xb0>
 800fc90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fc92:	b143      	cbz	r3, 800fca6 <_reclaim_reent+0x22>
 800fc94:	68db      	ldr	r3, [r3, #12]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d14a      	bne.n	800fd30 <_reclaim_reent+0xac>
 800fc9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc9c:	6819      	ldr	r1, [r3, #0]
 800fc9e:	b111      	cbz	r1, 800fca6 <_reclaim_reent+0x22>
 800fca0:	4620      	mov	r0, r4
 800fca2:	f001 fce7 	bl	8011674 <_free_r>
 800fca6:	6961      	ldr	r1, [r4, #20]
 800fca8:	b111      	cbz	r1, 800fcb0 <_reclaim_reent+0x2c>
 800fcaa:	4620      	mov	r0, r4
 800fcac:	f001 fce2 	bl	8011674 <_free_r>
 800fcb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fcb2:	b111      	cbz	r1, 800fcba <_reclaim_reent+0x36>
 800fcb4:	4620      	mov	r0, r4
 800fcb6:	f001 fcdd 	bl	8011674 <_free_r>
 800fcba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fcbc:	b111      	cbz	r1, 800fcc4 <_reclaim_reent+0x40>
 800fcbe:	4620      	mov	r0, r4
 800fcc0:	f001 fcd8 	bl	8011674 <_free_r>
 800fcc4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800fcc6:	b111      	cbz	r1, 800fcce <_reclaim_reent+0x4a>
 800fcc8:	4620      	mov	r0, r4
 800fcca:	f001 fcd3 	bl	8011674 <_free_r>
 800fcce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800fcd0:	b111      	cbz	r1, 800fcd8 <_reclaim_reent+0x54>
 800fcd2:	4620      	mov	r0, r4
 800fcd4:	f001 fcce 	bl	8011674 <_free_r>
 800fcd8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800fcda:	b111      	cbz	r1, 800fce2 <_reclaim_reent+0x5e>
 800fcdc:	4620      	mov	r0, r4
 800fcde:	f001 fcc9 	bl	8011674 <_free_r>
 800fce2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800fce4:	b111      	cbz	r1, 800fcec <_reclaim_reent+0x68>
 800fce6:	4620      	mov	r0, r4
 800fce8:	f001 fcc4 	bl	8011674 <_free_r>
 800fcec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fcee:	b111      	cbz	r1, 800fcf6 <_reclaim_reent+0x72>
 800fcf0:	4620      	mov	r0, r4
 800fcf2:	f001 fcbf 	bl	8011674 <_free_r>
 800fcf6:	69a3      	ldr	r3, [r4, #24]
 800fcf8:	b1e3      	cbz	r3, 800fd34 <_reclaim_reent+0xb0>
 800fcfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fcfc:	4620      	mov	r0, r4
 800fcfe:	4798      	blx	r3
 800fd00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fd02:	b1b9      	cbz	r1, 800fd34 <_reclaim_reent+0xb0>
 800fd04:	4620      	mov	r0, r4
 800fd06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fd0a:	f7ff bfad 	b.w	800fc68 <cleanup_glue>
 800fd0e:	5949      	ldr	r1, [r1, r5]
 800fd10:	b941      	cbnz	r1, 800fd24 <_reclaim_reent+0xa0>
 800fd12:	3504      	adds	r5, #4
 800fd14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd16:	2d80      	cmp	r5, #128	; 0x80
 800fd18:	68d9      	ldr	r1, [r3, #12]
 800fd1a:	d1f8      	bne.n	800fd0e <_reclaim_reent+0x8a>
 800fd1c:	4620      	mov	r0, r4
 800fd1e:	f001 fca9 	bl	8011674 <_free_r>
 800fd22:	e7ba      	b.n	800fc9a <_reclaim_reent+0x16>
 800fd24:	680e      	ldr	r6, [r1, #0]
 800fd26:	4620      	mov	r0, r4
 800fd28:	f001 fca4 	bl	8011674 <_free_r>
 800fd2c:	4631      	mov	r1, r6
 800fd2e:	e7ef      	b.n	800fd10 <_reclaim_reent+0x8c>
 800fd30:	2500      	movs	r5, #0
 800fd32:	e7ef      	b.n	800fd14 <_reclaim_reent+0x90>
 800fd34:	bd70      	pop	{r4, r5, r6, pc}
 800fd36:	bf00      	nop
 800fd38:	20000018 	.word	0x20000018

0800fd3c <_sbrk_r>:
 800fd3c:	b538      	push	{r3, r4, r5, lr}
 800fd3e:	4d06      	ldr	r5, [pc, #24]	; (800fd58 <_sbrk_r+0x1c>)
 800fd40:	2300      	movs	r3, #0
 800fd42:	4604      	mov	r4, r0
 800fd44:	4608      	mov	r0, r1
 800fd46:	602b      	str	r3, [r5, #0]
 800fd48:	f7f2 feb0 	bl	8002aac <_sbrk>
 800fd4c:	1c43      	adds	r3, r0, #1
 800fd4e:	d102      	bne.n	800fd56 <_sbrk_r+0x1a>
 800fd50:	682b      	ldr	r3, [r5, #0]
 800fd52:	b103      	cbz	r3, 800fd56 <_sbrk_r+0x1a>
 800fd54:	6023      	str	r3, [r4, #0]
 800fd56:	bd38      	pop	{r3, r4, r5, pc}
 800fd58:	20005730 	.word	0x20005730

0800fd5c <__sread>:
 800fd5c:	b510      	push	{r4, lr}
 800fd5e:	460c      	mov	r4, r1
 800fd60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd64:	f001 fe2c 	bl	80119c0 <_read_r>
 800fd68:	2800      	cmp	r0, #0
 800fd6a:	bfab      	itete	ge
 800fd6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fd6e:	89a3      	ldrhlt	r3, [r4, #12]
 800fd70:	181b      	addge	r3, r3, r0
 800fd72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fd76:	bfac      	ite	ge
 800fd78:	6563      	strge	r3, [r4, #84]	; 0x54
 800fd7a:	81a3      	strhlt	r3, [r4, #12]
 800fd7c:	bd10      	pop	{r4, pc}

0800fd7e <__swrite>:
 800fd7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd82:	461f      	mov	r7, r3
 800fd84:	898b      	ldrh	r3, [r1, #12]
 800fd86:	05db      	lsls	r3, r3, #23
 800fd88:	4605      	mov	r5, r0
 800fd8a:	460c      	mov	r4, r1
 800fd8c:	4616      	mov	r6, r2
 800fd8e:	d505      	bpl.n	800fd9c <__swrite+0x1e>
 800fd90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd94:	2302      	movs	r3, #2
 800fd96:	2200      	movs	r2, #0
 800fd98:	f001 f846 	bl	8010e28 <_lseek_r>
 800fd9c:	89a3      	ldrh	r3, [r4, #12]
 800fd9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fda2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fda6:	81a3      	strh	r3, [r4, #12]
 800fda8:	4632      	mov	r2, r6
 800fdaa:	463b      	mov	r3, r7
 800fdac:	4628      	mov	r0, r5
 800fdae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fdb2:	f000 b869 	b.w	800fe88 <_write_r>

0800fdb6 <__sseek>:
 800fdb6:	b510      	push	{r4, lr}
 800fdb8:	460c      	mov	r4, r1
 800fdba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdbe:	f001 f833 	bl	8010e28 <_lseek_r>
 800fdc2:	1c43      	adds	r3, r0, #1
 800fdc4:	89a3      	ldrh	r3, [r4, #12]
 800fdc6:	bf15      	itete	ne
 800fdc8:	6560      	strne	r0, [r4, #84]	; 0x54
 800fdca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fdce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fdd2:	81a3      	strheq	r3, [r4, #12]
 800fdd4:	bf18      	it	ne
 800fdd6:	81a3      	strhne	r3, [r4, #12]
 800fdd8:	bd10      	pop	{r4, pc}

0800fdda <__sclose>:
 800fdda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdde:	f000 b8d3 	b.w	800ff88 <_close_r>
	...

0800fde4 <__swbuf_r>:
 800fde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fde6:	460e      	mov	r6, r1
 800fde8:	4614      	mov	r4, r2
 800fdea:	4605      	mov	r5, r0
 800fdec:	b118      	cbz	r0, 800fdf6 <__swbuf_r+0x12>
 800fdee:	6983      	ldr	r3, [r0, #24]
 800fdf0:	b90b      	cbnz	r3, 800fdf6 <__swbuf_r+0x12>
 800fdf2:	f7ff f8d1 	bl	800ef98 <__sinit>
 800fdf6:	4b21      	ldr	r3, [pc, #132]	; (800fe7c <__swbuf_r+0x98>)
 800fdf8:	429c      	cmp	r4, r3
 800fdfa:	d12b      	bne.n	800fe54 <__swbuf_r+0x70>
 800fdfc:	686c      	ldr	r4, [r5, #4]
 800fdfe:	69a3      	ldr	r3, [r4, #24]
 800fe00:	60a3      	str	r3, [r4, #8]
 800fe02:	89a3      	ldrh	r3, [r4, #12]
 800fe04:	071a      	lsls	r2, r3, #28
 800fe06:	d52f      	bpl.n	800fe68 <__swbuf_r+0x84>
 800fe08:	6923      	ldr	r3, [r4, #16]
 800fe0a:	b36b      	cbz	r3, 800fe68 <__swbuf_r+0x84>
 800fe0c:	6923      	ldr	r3, [r4, #16]
 800fe0e:	6820      	ldr	r0, [r4, #0]
 800fe10:	1ac0      	subs	r0, r0, r3
 800fe12:	6963      	ldr	r3, [r4, #20]
 800fe14:	b2f6      	uxtb	r6, r6
 800fe16:	4283      	cmp	r3, r0
 800fe18:	4637      	mov	r7, r6
 800fe1a:	dc04      	bgt.n	800fe26 <__swbuf_r+0x42>
 800fe1c:	4621      	mov	r1, r4
 800fe1e:	4628      	mov	r0, r5
 800fe20:	f000 ffc2 	bl	8010da8 <_fflush_r>
 800fe24:	bb30      	cbnz	r0, 800fe74 <__swbuf_r+0x90>
 800fe26:	68a3      	ldr	r3, [r4, #8]
 800fe28:	3b01      	subs	r3, #1
 800fe2a:	60a3      	str	r3, [r4, #8]
 800fe2c:	6823      	ldr	r3, [r4, #0]
 800fe2e:	1c5a      	adds	r2, r3, #1
 800fe30:	6022      	str	r2, [r4, #0]
 800fe32:	701e      	strb	r6, [r3, #0]
 800fe34:	6963      	ldr	r3, [r4, #20]
 800fe36:	3001      	adds	r0, #1
 800fe38:	4283      	cmp	r3, r0
 800fe3a:	d004      	beq.n	800fe46 <__swbuf_r+0x62>
 800fe3c:	89a3      	ldrh	r3, [r4, #12]
 800fe3e:	07db      	lsls	r3, r3, #31
 800fe40:	d506      	bpl.n	800fe50 <__swbuf_r+0x6c>
 800fe42:	2e0a      	cmp	r6, #10
 800fe44:	d104      	bne.n	800fe50 <__swbuf_r+0x6c>
 800fe46:	4621      	mov	r1, r4
 800fe48:	4628      	mov	r0, r5
 800fe4a:	f000 ffad 	bl	8010da8 <_fflush_r>
 800fe4e:	b988      	cbnz	r0, 800fe74 <__swbuf_r+0x90>
 800fe50:	4638      	mov	r0, r7
 800fe52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe54:	4b0a      	ldr	r3, [pc, #40]	; (800fe80 <__swbuf_r+0x9c>)
 800fe56:	429c      	cmp	r4, r3
 800fe58:	d101      	bne.n	800fe5e <__swbuf_r+0x7a>
 800fe5a:	68ac      	ldr	r4, [r5, #8]
 800fe5c:	e7cf      	b.n	800fdfe <__swbuf_r+0x1a>
 800fe5e:	4b09      	ldr	r3, [pc, #36]	; (800fe84 <__swbuf_r+0xa0>)
 800fe60:	429c      	cmp	r4, r3
 800fe62:	bf08      	it	eq
 800fe64:	68ec      	ldreq	r4, [r5, #12]
 800fe66:	e7ca      	b.n	800fdfe <__swbuf_r+0x1a>
 800fe68:	4621      	mov	r1, r4
 800fe6a:	4628      	mov	r0, r5
 800fe6c:	f000 f81e 	bl	800feac <__swsetup_r>
 800fe70:	2800      	cmp	r0, #0
 800fe72:	d0cb      	beq.n	800fe0c <__swbuf_r+0x28>
 800fe74:	f04f 37ff 	mov.w	r7, #4294967295
 800fe78:	e7ea      	b.n	800fe50 <__swbuf_r+0x6c>
 800fe7a:	bf00      	nop
 800fe7c:	080125b8 	.word	0x080125b8
 800fe80:	080125d8 	.word	0x080125d8
 800fe84:	08012598 	.word	0x08012598

0800fe88 <_write_r>:
 800fe88:	b538      	push	{r3, r4, r5, lr}
 800fe8a:	4d07      	ldr	r5, [pc, #28]	; (800fea8 <_write_r+0x20>)
 800fe8c:	4604      	mov	r4, r0
 800fe8e:	4608      	mov	r0, r1
 800fe90:	4611      	mov	r1, r2
 800fe92:	2200      	movs	r2, #0
 800fe94:	602a      	str	r2, [r5, #0]
 800fe96:	461a      	mov	r2, r3
 800fe98:	f7f2 fdb7 	bl	8002a0a <_write>
 800fe9c:	1c43      	adds	r3, r0, #1
 800fe9e:	d102      	bne.n	800fea6 <_write_r+0x1e>
 800fea0:	682b      	ldr	r3, [r5, #0]
 800fea2:	b103      	cbz	r3, 800fea6 <_write_r+0x1e>
 800fea4:	6023      	str	r3, [r4, #0]
 800fea6:	bd38      	pop	{r3, r4, r5, pc}
 800fea8:	20005730 	.word	0x20005730

0800feac <__swsetup_r>:
 800feac:	4b32      	ldr	r3, [pc, #200]	; (800ff78 <__swsetup_r+0xcc>)
 800feae:	b570      	push	{r4, r5, r6, lr}
 800feb0:	681d      	ldr	r5, [r3, #0]
 800feb2:	4606      	mov	r6, r0
 800feb4:	460c      	mov	r4, r1
 800feb6:	b125      	cbz	r5, 800fec2 <__swsetup_r+0x16>
 800feb8:	69ab      	ldr	r3, [r5, #24]
 800feba:	b913      	cbnz	r3, 800fec2 <__swsetup_r+0x16>
 800febc:	4628      	mov	r0, r5
 800febe:	f7ff f86b 	bl	800ef98 <__sinit>
 800fec2:	4b2e      	ldr	r3, [pc, #184]	; (800ff7c <__swsetup_r+0xd0>)
 800fec4:	429c      	cmp	r4, r3
 800fec6:	d10f      	bne.n	800fee8 <__swsetup_r+0x3c>
 800fec8:	686c      	ldr	r4, [r5, #4]
 800feca:	89a3      	ldrh	r3, [r4, #12]
 800fecc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fed0:	0719      	lsls	r1, r3, #28
 800fed2:	d42c      	bmi.n	800ff2e <__swsetup_r+0x82>
 800fed4:	06dd      	lsls	r5, r3, #27
 800fed6:	d411      	bmi.n	800fefc <__swsetup_r+0x50>
 800fed8:	2309      	movs	r3, #9
 800feda:	6033      	str	r3, [r6, #0]
 800fedc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fee0:	81a3      	strh	r3, [r4, #12]
 800fee2:	f04f 30ff 	mov.w	r0, #4294967295
 800fee6:	e03e      	b.n	800ff66 <__swsetup_r+0xba>
 800fee8:	4b25      	ldr	r3, [pc, #148]	; (800ff80 <__swsetup_r+0xd4>)
 800feea:	429c      	cmp	r4, r3
 800feec:	d101      	bne.n	800fef2 <__swsetup_r+0x46>
 800feee:	68ac      	ldr	r4, [r5, #8]
 800fef0:	e7eb      	b.n	800feca <__swsetup_r+0x1e>
 800fef2:	4b24      	ldr	r3, [pc, #144]	; (800ff84 <__swsetup_r+0xd8>)
 800fef4:	429c      	cmp	r4, r3
 800fef6:	bf08      	it	eq
 800fef8:	68ec      	ldreq	r4, [r5, #12]
 800fefa:	e7e6      	b.n	800feca <__swsetup_r+0x1e>
 800fefc:	0758      	lsls	r0, r3, #29
 800fefe:	d512      	bpl.n	800ff26 <__swsetup_r+0x7a>
 800ff00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ff02:	b141      	cbz	r1, 800ff16 <__swsetup_r+0x6a>
 800ff04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff08:	4299      	cmp	r1, r3
 800ff0a:	d002      	beq.n	800ff12 <__swsetup_r+0x66>
 800ff0c:	4630      	mov	r0, r6
 800ff0e:	f001 fbb1 	bl	8011674 <_free_r>
 800ff12:	2300      	movs	r3, #0
 800ff14:	6363      	str	r3, [r4, #52]	; 0x34
 800ff16:	89a3      	ldrh	r3, [r4, #12]
 800ff18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ff1c:	81a3      	strh	r3, [r4, #12]
 800ff1e:	2300      	movs	r3, #0
 800ff20:	6063      	str	r3, [r4, #4]
 800ff22:	6923      	ldr	r3, [r4, #16]
 800ff24:	6023      	str	r3, [r4, #0]
 800ff26:	89a3      	ldrh	r3, [r4, #12]
 800ff28:	f043 0308 	orr.w	r3, r3, #8
 800ff2c:	81a3      	strh	r3, [r4, #12]
 800ff2e:	6923      	ldr	r3, [r4, #16]
 800ff30:	b94b      	cbnz	r3, 800ff46 <__swsetup_r+0x9a>
 800ff32:	89a3      	ldrh	r3, [r4, #12]
 800ff34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ff38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff3c:	d003      	beq.n	800ff46 <__swsetup_r+0x9a>
 800ff3e:	4621      	mov	r1, r4
 800ff40:	4630      	mov	r0, r6
 800ff42:	f000 ffa9 	bl	8010e98 <__smakebuf_r>
 800ff46:	89a0      	ldrh	r0, [r4, #12]
 800ff48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ff4c:	f010 0301 	ands.w	r3, r0, #1
 800ff50:	d00a      	beq.n	800ff68 <__swsetup_r+0xbc>
 800ff52:	2300      	movs	r3, #0
 800ff54:	60a3      	str	r3, [r4, #8]
 800ff56:	6963      	ldr	r3, [r4, #20]
 800ff58:	425b      	negs	r3, r3
 800ff5a:	61a3      	str	r3, [r4, #24]
 800ff5c:	6923      	ldr	r3, [r4, #16]
 800ff5e:	b943      	cbnz	r3, 800ff72 <__swsetup_r+0xc6>
 800ff60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ff64:	d1ba      	bne.n	800fedc <__swsetup_r+0x30>
 800ff66:	bd70      	pop	{r4, r5, r6, pc}
 800ff68:	0781      	lsls	r1, r0, #30
 800ff6a:	bf58      	it	pl
 800ff6c:	6963      	ldrpl	r3, [r4, #20]
 800ff6e:	60a3      	str	r3, [r4, #8]
 800ff70:	e7f4      	b.n	800ff5c <__swsetup_r+0xb0>
 800ff72:	2000      	movs	r0, #0
 800ff74:	e7f7      	b.n	800ff66 <__swsetup_r+0xba>
 800ff76:	bf00      	nop
 800ff78:	20000018 	.word	0x20000018
 800ff7c:	080125b8 	.word	0x080125b8
 800ff80:	080125d8 	.word	0x080125d8
 800ff84:	08012598 	.word	0x08012598

0800ff88 <_close_r>:
 800ff88:	b538      	push	{r3, r4, r5, lr}
 800ff8a:	4d06      	ldr	r5, [pc, #24]	; (800ffa4 <_close_r+0x1c>)
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	4604      	mov	r4, r0
 800ff90:	4608      	mov	r0, r1
 800ff92:	602b      	str	r3, [r5, #0]
 800ff94:	f7f2 fd55 	bl	8002a42 <_close>
 800ff98:	1c43      	adds	r3, r0, #1
 800ff9a:	d102      	bne.n	800ffa2 <_close_r+0x1a>
 800ff9c:	682b      	ldr	r3, [r5, #0]
 800ff9e:	b103      	cbz	r3, 800ffa2 <_close_r+0x1a>
 800ffa0:	6023      	str	r3, [r4, #0]
 800ffa2:	bd38      	pop	{r3, r4, r5, pc}
 800ffa4:	20005730 	.word	0x20005730

0800ffa8 <quorem>:
 800ffa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffac:	6903      	ldr	r3, [r0, #16]
 800ffae:	690c      	ldr	r4, [r1, #16]
 800ffb0:	42a3      	cmp	r3, r4
 800ffb2:	4607      	mov	r7, r0
 800ffb4:	f2c0 8081 	blt.w	80100ba <quorem+0x112>
 800ffb8:	3c01      	subs	r4, #1
 800ffba:	f101 0814 	add.w	r8, r1, #20
 800ffbe:	f100 0514 	add.w	r5, r0, #20
 800ffc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ffc6:	9301      	str	r3, [sp, #4]
 800ffc8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ffcc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ffd0:	3301      	adds	r3, #1
 800ffd2:	429a      	cmp	r2, r3
 800ffd4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ffd8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ffdc:	fbb2 f6f3 	udiv	r6, r2, r3
 800ffe0:	d331      	bcc.n	8010046 <quorem+0x9e>
 800ffe2:	f04f 0e00 	mov.w	lr, #0
 800ffe6:	4640      	mov	r0, r8
 800ffe8:	46ac      	mov	ip, r5
 800ffea:	46f2      	mov	sl, lr
 800ffec:	f850 2b04 	ldr.w	r2, [r0], #4
 800fff0:	b293      	uxth	r3, r2
 800fff2:	fb06 e303 	mla	r3, r6, r3, lr
 800fff6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fffa:	b29b      	uxth	r3, r3
 800fffc:	ebaa 0303 	sub.w	r3, sl, r3
 8010000:	f8dc a000 	ldr.w	sl, [ip]
 8010004:	0c12      	lsrs	r2, r2, #16
 8010006:	fa13 f38a 	uxtah	r3, r3, sl
 801000a:	fb06 e202 	mla	r2, r6, r2, lr
 801000e:	9300      	str	r3, [sp, #0]
 8010010:	9b00      	ldr	r3, [sp, #0]
 8010012:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010016:	b292      	uxth	r2, r2
 8010018:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801001c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010020:	f8bd 3000 	ldrh.w	r3, [sp]
 8010024:	4581      	cmp	r9, r0
 8010026:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801002a:	f84c 3b04 	str.w	r3, [ip], #4
 801002e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010032:	d2db      	bcs.n	800ffec <quorem+0x44>
 8010034:	f855 300b 	ldr.w	r3, [r5, fp]
 8010038:	b92b      	cbnz	r3, 8010046 <quorem+0x9e>
 801003a:	9b01      	ldr	r3, [sp, #4]
 801003c:	3b04      	subs	r3, #4
 801003e:	429d      	cmp	r5, r3
 8010040:	461a      	mov	r2, r3
 8010042:	d32e      	bcc.n	80100a2 <quorem+0xfa>
 8010044:	613c      	str	r4, [r7, #16]
 8010046:	4638      	mov	r0, r7
 8010048:	f001 f9fc 	bl	8011444 <__mcmp>
 801004c:	2800      	cmp	r0, #0
 801004e:	db24      	blt.n	801009a <quorem+0xf2>
 8010050:	3601      	adds	r6, #1
 8010052:	4628      	mov	r0, r5
 8010054:	f04f 0c00 	mov.w	ip, #0
 8010058:	f858 2b04 	ldr.w	r2, [r8], #4
 801005c:	f8d0 e000 	ldr.w	lr, [r0]
 8010060:	b293      	uxth	r3, r2
 8010062:	ebac 0303 	sub.w	r3, ip, r3
 8010066:	0c12      	lsrs	r2, r2, #16
 8010068:	fa13 f38e 	uxtah	r3, r3, lr
 801006c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010070:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010074:	b29b      	uxth	r3, r3
 8010076:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801007a:	45c1      	cmp	r9, r8
 801007c:	f840 3b04 	str.w	r3, [r0], #4
 8010080:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010084:	d2e8      	bcs.n	8010058 <quorem+0xb0>
 8010086:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801008a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801008e:	b922      	cbnz	r2, 801009a <quorem+0xf2>
 8010090:	3b04      	subs	r3, #4
 8010092:	429d      	cmp	r5, r3
 8010094:	461a      	mov	r2, r3
 8010096:	d30a      	bcc.n	80100ae <quorem+0x106>
 8010098:	613c      	str	r4, [r7, #16]
 801009a:	4630      	mov	r0, r6
 801009c:	b003      	add	sp, #12
 801009e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100a2:	6812      	ldr	r2, [r2, #0]
 80100a4:	3b04      	subs	r3, #4
 80100a6:	2a00      	cmp	r2, #0
 80100a8:	d1cc      	bne.n	8010044 <quorem+0x9c>
 80100aa:	3c01      	subs	r4, #1
 80100ac:	e7c7      	b.n	801003e <quorem+0x96>
 80100ae:	6812      	ldr	r2, [r2, #0]
 80100b0:	3b04      	subs	r3, #4
 80100b2:	2a00      	cmp	r2, #0
 80100b4:	d1f0      	bne.n	8010098 <quorem+0xf0>
 80100b6:	3c01      	subs	r4, #1
 80100b8:	e7eb      	b.n	8010092 <quorem+0xea>
 80100ba:	2000      	movs	r0, #0
 80100bc:	e7ee      	b.n	801009c <quorem+0xf4>
	...

080100c0 <_dtoa_r>:
 80100c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100c4:	ed2d 8b04 	vpush	{d8-d9}
 80100c8:	ec57 6b10 	vmov	r6, r7, d0
 80100cc:	b093      	sub	sp, #76	; 0x4c
 80100ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80100d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80100d4:	9106      	str	r1, [sp, #24]
 80100d6:	ee10 aa10 	vmov	sl, s0
 80100da:	4604      	mov	r4, r0
 80100dc:	9209      	str	r2, [sp, #36]	; 0x24
 80100de:	930c      	str	r3, [sp, #48]	; 0x30
 80100e0:	46bb      	mov	fp, r7
 80100e2:	b975      	cbnz	r5, 8010102 <_dtoa_r+0x42>
 80100e4:	2010      	movs	r0, #16
 80100e6:	f000 ff17 	bl	8010f18 <malloc>
 80100ea:	4602      	mov	r2, r0
 80100ec:	6260      	str	r0, [r4, #36]	; 0x24
 80100ee:	b920      	cbnz	r0, 80100fa <_dtoa_r+0x3a>
 80100f0:	4ba7      	ldr	r3, [pc, #668]	; (8010390 <_dtoa_r+0x2d0>)
 80100f2:	21ea      	movs	r1, #234	; 0xea
 80100f4:	48a7      	ldr	r0, [pc, #668]	; (8010394 <_dtoa_r+0x2d4>)
 80100f6:	f001 fc75 	bl	80119e4 <__assert_func>
 80100fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80100fe:	6005      	str	r5, [r0, #0]
 8010100:	60c5      	str	r5, [r0, #12]
 8010102:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010104:	6819      	ldr	r1, [r3, #0]
 8010106:	b151      	cbz	r1, 801011e <_dtoa_r+0x5e>
 8010108:	685a      	ldr	r2, [r3, #4]
 801010a:	604a      	str	r2, [r1, #4]
 801010c:	2301      	movs	r3, #1
 801010e:	4093      	lsls	r3, r2
 8010110:	608b      	str	r3, [r1, #8]
 8010112:	4620      	mov	r0, r4
 8010114:	f000 ff54 	bl	8010fc0 <_Bfree>
 8010118:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801011a:	2200      	movs	r2, #0
 801011c:	601a      	str	r2, [r3, #0]
 801011e:	1e3b      	subs	r3, r7, #0
 8010120:	bfaa      	itet	ge
 8010122:	2300      	movge	r3, #0
 8010124:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010128:	f8c8 3000 	strge.w	r3, [r8]
 801012c:	4b9a      	ldr	r3, [pc, #616]	; (8010398 <_dtoa_r+0x2d8>)
 801012e:	bfbc      	itt	lt
 8010130:	2201      	movlt	r2, #1
 8010132:	f8c8 2000 	strlt.w	r2, [r8]
 8010136:	ea33 030b 	bics.w	r3, r3, fp
 801013a:	d11b      	bne.n	8010174 <_dtoa_r+0xb4>
 801013c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801013e:	f242 730f 	movw	r3, #9999	; 0x270f
 8010142:	6013      	str	r3, [r2, #0]
 8010144:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010148:	4333      	orrs	r3, r6
 801014a:	f000 8592 	beq.w	8010c72 <_dtoa_r+0xbb2>
 801014e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010150:	b963      	cbnz	r3, 801016c <_dtoa_r+0xac>
 8010152:	4b92      	ldr	r3, [pc, #584]	; (801039c <_dtoa_r+0x2dc>)
 8010154:	e022      	b.n	801019c <_dtoa_r+0xdc>
 8010156:	4b92      	ldr	r3, [pc, #584]	; (80103a0 <_dtoa_r+0x2e0>)
 8010158:	9301      	str	r3, [sp, #4]
 801015a:	3308      	adds	r3, #8
 801015c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801015e:	6013      	str	r3, [r2, #0]
 8010160:	9801      	ldr	r0, [sp, #4]
 8010162:	b013      	add	sp, #76	; 0x4c
 8010164:	ecbd 8b04 	vpop	{d8-d9}
 8010168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801016c:	4b8b      	ldr	r3, [pc, #556]	; (801039c <_dtoa_r+0x2dc>)
 801016e:	9301      	str	r3, [sp, #4]
 8010170:	3303      	adds	r3, #3
 8010172:	e7f3      	b.n	801015c <_dtoa_r+0x9c>
 8010174:	2200      	movs	r2, #0
 8010176:	2300      	movs	r3, #0
 8010178:	4650      	mov	r0, sl
 801017a:	4659      	mov	r1, fp
 801017c:	f7f0 fca4 	bl	8000ac8 <__aeabi_dcmpeq>
 8010180:	ec4b ab19 	vmov	d9, sl, fp
 8010184:	4680      	mov	r8, r0
 8010186:	b158      	cbz	r0, 80101a0 <_dtoa_r+0xe0>
 8010188:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801018a:	2301      	movs	r3, #1
 801018c:	6013      	str	r3, [r2, #0]
 801018e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010190:	2b00      	cmp	r3, #0
 8010192:	f000 856b 	beq.w	8010c6c <_dtoa_r+0xbac>
 8010196:	4883      	ldr	r0, [pc, #524]	; (80103a4 <_dtoa_r+0x2e4>)
 8010198:	6018      	str	r0, [r3, #0]
 801019a:	1e43      	subs	r3, r0, #1
 801019c:	9301      	str	r3, [sp, #4]
 801019e:	e7df      	b.n	8010160 <_dtoa_r+0xa0>
 80101a0:	ec4b ab10 	vmov	d0, sl, fp
 80101a4:	aa10      	add	r2, sp, #64	; 0x40
 80101a6:	a911      	add	r1, sp, #68	; 0x44
 80101a8:	4620      	mov	r0, r4
 80101aa:	f001 f9f1 	bl	8011590 <__d2b>
 80101ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80101b2:	ee08 0a10 	vmov	s16, r0
 80101b6:	2d00      	cmp	r5, #0
 80101b8:	f000 8084 	beq.w	80102c4 <_dtoa_r+0x204>
 80101bc:	ee19 3a90 	vmov	r3, s19
 80101c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80101c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80101c8:	4656      	mov	r6, sl
 80101ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80101ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80101d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80101d6:	4b74      	ldr	r3, [pc, #464]	; (80103a8 <_dtoa_r+0x2e8>)
 80101d8:	2200      	movs	r2, #0
 80101da:	4630      	mov	r0, r6
 80101dc:	4639      	mov	r1, r7
 80101de:	f7f0 f853 	bl	8000288 <__aeabi_dsub>
 80101e2:	a365      	add	r3, pc, #404	; (adr r3, 8010378 <_dtoa_r+0x2b8>)
 80101e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101e8:	f7f0 fa06 	bl	80005f8 <__aeabi_dmul>
 80101ec:	a364      	add	r3, pc, #400	; (adr r3, 8010380 <_dtoa_r+0x2c0>)
 80101ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f2:	f7f0 f84b 	bl	800028c <__adddf3>
 80101f6:	4606      	mov	r6, r0
 80101f8:	4628      	mov	r0, r5
 80101fa:	460f      	mov	r7, r1
 80101fc:	f7f0 f992 	bl	8000524 <__aeabi_i2d>
 8010200:	a361      	add	r3, pc, #388	; (adr r3, 8010388 <_dtoa_r+0x2c8>)
 8010202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010206:	f7f0 f9f7 	bl	80005f8 <__aeabi_dmul>
 801020a:	4602      	mov	r2, r0
 801020c:	460b      	mov	r3, r1
 801020e:	4630      	mov	r0, r6
 8010210:	4639      	mov	r1, r7
 8010212:	f7f0 f83b 	bl	800028c <__adddf3>
 8010216:	4606      	mov	r6, r0
 8010218:	460f      	mov	r7, r1
 801021a:	f7f0 fc9d 	bl	8000b58 <__aeabi_d2iz>
 801021e:	2200      	movs	r2, #0
 8010220:	9000      	str	r0, [sp, #0]
 8010222:	2300      	movs	r3, #0
 8010224:	4630      	mov	r0, r6
 8010226:	4639      	mov	r1, r7
 8010228:	f7f0 fc58 	bl	8000adc <__aeabi_dcmplt>
 801022c:	b150      	cbz	r0, 8010244 <_dtoa_r+0x184>
 801022e:	9800      	ldr	r0, [sp, #0]
 8010230:	f7f0 f978 	bl	8000524 <__aeabi_i2d>
 8010234:	4632      	mov	r2, r6
 8010236:	463b      	mov	r3, r7
 8010238:	f7f0 fc46 	bl	8000ac8 <__aeabi_dcmpeq>
 801023c:	b910      	cbnz	r0, 8010244 <_dtoa_r+0x184>
 801023e:	9b00      	ldr	r3, [sp, #0]
 8010240:	3b01      	subs	r3, #1
 8010242:	9300      	str	r3, [sp, #0]
 8010244:	9b00      	ldr	r3, [sp, #0]
 8010246:	2b16      	cmp	r3, #22
 8010248:	d85a      	bhi.n	8010300 <_dtoa_r+0x240>
 801024a:	9a00      	ldr	r2, [sp, #0]
 801024c:	4b57      	ldr	r3, [pc, #348]	; (80103ac <_dtoa_r+0x2ec>)
 801024e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010256:	ec51 0b19 	vmov	r0, r1, d9
 801025a:	f7f0 fc3f 	bl	8000adc <__aeabi_dcmplt>
 801025e:	2800      	cmp	r0, #0
 8010260:	d050      	beq.n	8010304 <_dtoa_r+0x244>
 8010262:	9b00      	ldr	r3, [sp, #0]
 8010264:	3b01      	subs	r3, #1
 8010266:	9300      	str	r3, [sp, #0]
 8010268:	2300      	movs	r3, #0
 801026a:	930b      	str	r3, [sp, #44]	; 0x2c
 801026c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801026e:	1b5d      	subs	r5, r3, r5
 8010270:	1e6b      	subs	r3, r5, #1
 8010272:	9305      	str	r3, [sp, #20]
 8010274:	bf45      	ittet	mi
 8010276:	f1c5 0301 	rsbmi	r3, r5, #1
 801027a:	9304      	strmi	r3, [sp, #16]
 801027c:	2300      	movpl	r3, #0
 801027e:	2300      	movmi	r3, #0
 8010280:	bf4c      	ite	mi
 8010282:	9305      	strmi	r3, [sp, #20]
 8010284:	9304      	strpl	r3, [sp, #16]
 8010286:	9b00      	ldr	r3, [sp, #0]
 8010288:	2b00      	cmp	r3, #0
 801028a:	db3d      	blt.n	8010308 <_dtoa_r+0x248>
 801028c:	9b05      	ldr	r3, [sp, #20]
 801028e:	9a00      	ldr	r2, [sp, #0]
 8010290:	920a      	str	r2, [sp, #40]	; 0x28
 8010292:	4413      	add	r3, r2
 8010294:	9305      	str	r3, [sp, #20]
 8010296:	2300      	movs	r3, #0
 8010298:	9307      	str	r3, [sp, #28]
 801029a:	9b06      	ldr	r3, [sp, #24]
 801029c:	2b09      	cmp	r3, #9
 801029e:	f200 8089 	bhi.w	80103b4 <_dtoa_r+0x2f4>
 80102a2:	2b05      	cmp	r3, #5
 80102a4:	bfc4      	itt	gt
 80102a6:	3b04      	subgt	r3, #4
 80102a8:	9306      	strgt	r3, [sp, #24]
 80102aa:	9b06      	ldr	r3, [sp, #24]
 80102ac:	f1a3 0302 	sub.w	r3, r3, #2
 80102b0:	bfcc      	ite	gt
 80102b2:	2500      	movgt	r5, #0
 80102b4:	2501      	movle	r5, #1
 80102b6:	2b03      	cmp	r3, #3
 80102b8:	f200 8087 	bhi.w	80103ca <_dtoa_r+0x30a>
 80102bc:	e8df f003 	tbb	[pc, r3]
 80102c0:	59383a2d 	.word	0x59383a2d
 80102c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80102c8:	441d      	add	r5, r3
 80102ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80102ce:	2b20      	cmp	r3, #32
 80102d0:	bfc1      	itttt	gt
 80102d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80102d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80102da:	fa0b f303 	lslgt.w	r3, fp, r3
 80102de:	fa26 f000 	lsrgt.w	r0, r6, r0
 80102e2:	bfda      	itte	le
 80102e4:	f1c3 0320 	rsble	r3, r3, #32
 80102e8:	fa06 f003 	lslle.w	r0, r6, r3
 80102ec:	4318      	orrgt	r0, r3
 80102ee:	f7f0 f909 	bl	8000504 <__aeabi_ui2d>
 80102f2:	2301      	movs	r3, #1
 80102f4:	4606      	mov	r6, r0
 80102f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80102fa:	3d01      	subs	r5, #1
 80102fc:	930e      	str	r3, [sp, #56]	; 0x38
 80102fe:	e76a      	b.n	80101d6 <_dtoa_r+0x116>
 8010300:	2301      	movs	r3, #1
 8010302:	e7b2      	b.n	801026a <_dtoa_r+0x1aa>
 8010304:	900b      	str	r0, [sp, #44]	; 0x2c
 8010306:	e7b1      	b.n	801026c <_dtoa_r+0x1ac>
 8010308:	9b04      	ldr	r3, [sp, #16]
 801030a:	9a00      	ldr	r2, [sp, #0]
 801030c:	1a9b      	subs	r3, r3, r2
 801030e:	9304      	str	r3, [sp, #16]
 8010310:	4253      	negs	r3, r2
 8010312:	9307      	str	r3, [sp, #28]
 8010314:	2300      	movs	r3, #0
 8010316:	930a      	str	r3, [sp, #40]	; 0x28
 8010318:	e7bf      	b.n	801029a <_dtoa_r+0x1da>
 801031a:	2300      	movs	r3, #0
 801031c:	9308      	str	r3, [sp, #32]
 801031e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010320:	2b00      	cmp	r3, #0
 8010322:	dc55      	bgt.n	80103d0 <_dtoa_r+0x310>
 8010324:	2301      	movs	r3, #1
 8010326:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801032a:	461a      	mov	r2, r3
 801032c:	9209      	str	r2, [sp, #36]	; 0x24
 801032e:	e00c      	b.n	801034a <_dtoa_r+0x28a>
 8010330:	2301      	movs	r3, #1
 8010332:	e7f3      	b.n	801031c <_dtoa_r+0x25c>
 8010334:	2300      	movs	r3, #0
 8010336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010338:	9308      	str	r3, [sp, #32]
 801033a:	9b00      	ldr	r3, [sp, #0]
 801033c:	4413      	add	r3, r2
 801033e:	9302      	str	r3, [sp, #8]
 8010340:	3301      	adds	r3, #1
 8010342:	2b01      	cmp	r3, #1
 8010344:	9303      	str	r3, [sp, #12]
 8010346:	bfb8      	it	lt
 8010348:	2301      	movlt	r3, #1
 801034a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801034c:	2200      	movs	r2, #0
 801034e:	6042      	str	r2, [r0, #4]
 8010350:	2204      	movs	r2, #4
 8010352:	f102 0614 	add.w	r6, r2, #20
 8010356:	429e      	cmp	r6, r3
 8010358:	6841      	ldr	r1, [r0, #4]
 801035a:	d93d      	bls.n	80103d8 <_dtoa_r+0x318>
 801035c:	4620      	mov	r0, r4
 801035e:	f000 fdef 	bl	8010f40 <_Balloc>
 8010362:	9001      	str	r0, [sp, #4]
 8010364:	2800      	cmp	r0, #0
 8010366:	d13b      	bne.n	80103e0 <_dtoa_r+0x320>
 8010368:	4b11      	ldr	r3, [pc, #68]	; (80103b0 <_dtoa_r+0x2f0>)
 801036a:	4602      	mov	r2, r0
 801036c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010370:	e6c0      	b.n	80100f4 <_dtoa_r+0x34>
 8010372:	2301      	movs	r3, #1
 8010374:	e7df      	b.n	8010336 <_dtoa_r+0x276>
 8010376:	bf00      	nop
 8010378:	636f4361 	.word	0x636f4361
 801037c:	3fd287a7 	.word	0x3fd287a7
 8010380:	8b60c8b3 	.word	0x8b60c8b3
 8010384:	3fc68a28 	.word	0x3fc68a28
 8010388:	509f79fb 	.word	0x509f79fb
 801038c:	3fd34413 	.word	0x3fd34413
 8010390:	0801263d 	.word	0x0801263d
 8010394:	08012654 	.word	0x08012654
 8010398:	7ff00000 	.word	0x7ff00000
 801039c:	08012639 	.word	0x08012639
 80103a0:	08012630 	.word	0x08012630
 80103a4:	0801260d 	.word	0x0801260d
 80103a8:	3ff80000 	.word	0x3ff80000
 80103ac:	08012748 	.word	0x08012748
 80103b0:	080126af 	.word	0x080126af
 80103b4:	2501      	movs	r5, #1
 80103b6:	2300      	movs	r3, #0
 80103b8:	9306      	str	r3, [sp, #24]
 80103ba:	9508      	str	r5, [sp, #32]
 80103bc:	f04f 33ff 	mov.w	r3, #4294967295
 80103c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80103c4:	2200      	movs	r2, #0
 80103c6:	2312      	movs	r3, #18
 80103c8:	e7b0      	b.n	801032c <_dtoa_r+0x26c>
 80103ca:	2301      	movs	r3, #1
 80103cc:	9308      	str	r3, [sp, #32]
 80103ce:	e7f5      	b.n	80103bc <_dtoa_r+0x2fc>
 80103d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80103d6:	e7b8      	b.n	801034a <_dtoa_r+0x28a>
 80103d8:	3101      	adds	r1, #1
 80103da:	6041      	str	r1, [r0, #4]
 80103dc:	0052      	lsls	r2, r2, #1
 80103de:	e7b8      	b.n	8010352 <_dtoa_r+0x292>
 80103e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80103e2:	9a01      	ldr	r2, [sp, #4]
 80103e4:	601a      	str	r2, [r3, #0]
 80103e6:	9b03      	ldr	r3, [sp, #12]
 80103e8:	2b0e      	cmp	r3, #14
 80103ea:	f200 809d 	bhi.w	8010528 <_dtoa_r+0x468>
 80103ee:	2d00      	cmp	r5, #0
 80103f0:	f000 809a 	beq.w	8010528 <_dtoa_r+0x468>
 80103f4:	9b00      	ldr	r3, [sp, #0]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	dd32      	ble.n	8010460 <_dtoa_r+0x3a0>
 80103fa:	4ab7      	ldr	r2, [pc, #732]	; (80106d8 <_dtoa_r+0x618>)
 80103fc:	f003 030f 	and.w	r3, r3, #15
 8010400:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010404:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010408:	9b00      	ldr	r3, [sp, #0]
 801040a:	05d8      	lsls	r0, r3, #23
 801040c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010410:	d516      	bpl.n	8010440 <_dtoa_r+0x380>
 8010412:	4bb2      	ldr	r3, [pc, #712]	; (80106dc <_dtoa_r+0x61c>)
 8010414:	ec51 0b19 	vmov	r0, r1, d9
 8010418:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801041c:	f7f0 fa16 	bl	800084c <__aeabi_ddiv>
 8010420:	f007 070f 	and.w	r7, r7, #15
 8010424:	4682      	mov	sl, r0
 8010426:	468b      	mov	fp, r1
 8010428:	2503      	movs	r5, #3
 801042a:	4eac      	ldr	r6, [pc, #688]	; (80106dc <_dtoa_r+0x61c>)
 801042c:	b957      	cbnz	r7, 8010444 <_dtoa_r+0x384>
 801042e:	4642      	mov	r2, r8
 8010430:	464b      	mov	r3, r9
 8010432:	4650      	mov	r0, sl
 8010434:	4659      	mov	r1, fp
 8010436:	f7f0 fa09 	bl	800084c <__aeabi_ddiv>
 801043a:	4682      	mov	sl, r0
 801043c:	468b      	mov	fp, r1
 801043e:	e028      	b.n	8010492 <_dtoa_r+0x3d2>
 8010440:	2502      	movs	r5, #2
 8010442:	e7f2      	b.n	801042a <_dtoa_r+0x36a>
 8010444:	07f9      	lsls	r1, r7, #31
 8010446:	d508      	bpl.n	801045a <_dtoa_r+0x39a>
 8010448:	4640      	mov	r0, r8
 801044a:	4649      	mov	r1, r9
 801044c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010450:	f7f0 f8d2 	bl	80005f8 <__aeabi_dmul>
 8010454:	3501      	adds	r5, #1
 8010456:	4680      	mov	r8, r0
 8010458:	4689      	mov	r9, r1
 801045a:	107f      	asrs	r7, r7, #1
 801045c:	3608      	adds	r6, #8
 801045e:	e7e5      	b.n	801042c <_dtoa_r+0x36c>
 8010460:	f000 809b 	beq.w	801059a <_dtoa_r+0x4da>
 8010464:	9b00      	ldr	r3, [sp, #0]
 8010466:	4f9d      	ldr	r7, [pc, #628]	; (80106dc <_dtoa_r+0x61c>)
 8010468:	425e      	negs	r6, r3
 801046a:	4b9b      	ldr	r3, [pc, #620]	; (80106d8 <_dtoa_r+0x618>)
 801046c:	f006 020f 	and.w	r2, r6, #15
 8010470:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010478:	ec51 0b19 	vmov	r0, r1, d9
 801047c:	f7f0 f8bc 	bl	80005f8 <__aeabi_dmul>
 8010480:	1136      	asrs	r6, r6, #4
 8010482:	4682      	mov	sl, r0
 8010484:	468b      	mov	fp, r1
 8010486:	2300      	movs	r3, #0
 8010488:	2502      	movs	r5, #2
 801048a:	2e00      	cmp	r6, #0
 801048c:	d17a      	bne.n	8010584 <_dtoa_r+0x4c4>
 801048e:	2b00      	cmp	r3, #0
 8010490:	d1d3      	bne.n	801043a <_dtoa_r+0x37a>
 8010492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010494:	2b00      	cmp	r3, #0
 8010496:	f000 8082 	beq.w	801059e <_dtoa_r+0x4de>
 801049a:	4b91      	ldr	r3, [pc, #580]	; (80106e0 <_dtoa_r+0x620>)
 801049c:	2200      	movs	r2, #0
 801049e:	4650      	mov	r0, sl
 80104a0:	4659      	mov	r1, fp
 80104a2:	f7f0 fb1b 	bl	8000adc <__aeabi_dcmplt>
 80104a6:	2800      	cmp	r0, #0
 80104a8:	d079      	beq.n	801059e <_dtoa_r+0x4de>
 80104aa:	9b03      	ldr	r3, [sp, #12]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d076      	beq.n	801059e <_dtoa_r+0x4de>
 80104b0:	9b02      	ldr	r3, [sp, #8]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	dd36      	ble.n	8010524 <_dtoa_r+0x464>
 80104b6:	9b00      	ldr	r3, [sp, #0]
 80104b8:	4650      	mov	r0, sl
 80104ba:	4659      	mov	r1, fp
 80104bc:	1e5f      	subs	r7, r3, #1
 80104be:	2200      	movs	r2, #0
 80104c0:	4b88      	ldr	r3, [pc, #544]	; (80106e4 <_dtoa_r+0x624>)
 80104c2:	f7f0 f899 	bl	80005f8 <__aeabi_dmul>
 80104c6:	9e02      	ldr	r6, [sp, #8]
 80104c8:	4682      	mov	sl, r0
 80104ca:	468b      	mov	fp, r1
 80104cc:	3501      	adds	r5, #1
 80104ce:	4628      	mov	r0, r5
 80104d0:	f7f0 f828 	bl	8000524 <__aeabi_i2d>
 80104d4:	4652      	mov	r2, sl
 80104d6:	465b      	mov	r3, fp
 80104d8:	f7f0 f88e 	bl	80005f8 <__aeabi_dmul>
 80104dc:	4b82      	ldr	r3, [pc, #520]	; (80106e8 <_dtoa_r+0x628>)
 80104de:	2200      	movs	r2, #0
 80104e0:	f7ef fed4 	bl	800028c <__adddf3>
 80104e4:	46d0      	mov	r8, sl
 80104e6:	46d9      	mov	r9, fp
 80104e8:	4682      	mov	sl, r0
 80104ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80104ee:	2e00      	cmp	r6, #0
 80104f0:	d158      	bne.n	80105a4 <_dtoa_r+0x4e4>
 80104f2:	4b7e      	ldr	r3, [pc, #504]	; (80106ec <_dtoa_r+0x62c>)
 80104f4:	2200      	movs	r2, #0
 80104f6:	4640      	mov	r0, r8
 80104f8:	4649      	mov	r1, r9
 80104fa:	f7ef fec5 	bl	8000288 <__aeabi_dsub>
 80104fe:	4652      	mov	r2, sl
 8010500:	465b      	mov	r3, fp
 8010502:	4680      	mov	r8, r0
 8010504:	4689      	mov	r9, r1
 8010506:	f7f0 fb07 	bl	8000b18 <__aeabi_dcmpgt>
 801050a:	2800      	cmp	r0, #0
 801050c:	f040 8295 	bne.w	8010a3a <_dtoa_r+0x97a>
 8010510:	4652      	mov	r2, sl
 8010512:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010516:	4640      	mov	r0, r8
 8010518:	4649      	mov	r1, r9
 801051a:	f7f0 fadf 	bl	8000adc <__aeabi_dcmplt>
 801051e:	2800      	cmp	r0, #0
 8010520:	f040 8289 	bne.w	8010a36 <_dtoa_r+0x976>
 8010524:	ec5b ab19 	vmov	sl, fp, d9
 8010528:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801052a:	2b00      	cmp	r3, #0
 801052c:	f2c0 8148 	blt.w	80107c0 <_dtoa_r+0x700>
 8010530:	9a00      	ldr	r2, [sp, #0]
 8010532:	2a0e      	cmp	r2, #14
 8010534:	f300 8144 	bgt.w	80107c0 <_dtoa_r+0x700>
 8010538:	4b67      	ldr	r3, [pc, #412]	; (80106d8 <_dtoa_r+0x618>)
 801053a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801053e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010544:	2b00      	cmp	r3, #0
 8010546:	f280 80d5 	bge.w	80106f4 <_dtoa_r+0x634>
 801054a:	9b03      	ldr	r3, [sp, #12]
 801054c:	2b00      	cmp	r3, #0
 801054e:	f300 80d1 	bgt.w	80106f4 <_dtoa_r+0x634>
 8010552:	f040 826f 	bne.w	8010a34 <_dtoa_r+0x974>
 8010556:	4b65      	ldr	r3, [pc, #404]	; (80106ec <_dtoa_r+0x62c>)
 8010558:	2200      	movs	r2, #0
 801055a:	4640      	mov	r0, r8
 801055c:	4649      	mov	r1, r9
 801055e:	f7f0 f84b 	bl	80005f8 <__aeabi_dmul>
 8010562:	4652      	mov	r2, sl
 8010564:	465b      	mov	r3, fp
 8010566:	f7f0 facd 	bl	8000b04 <__aeabi_dcmpge>
 801056a:	9e03      	ldr	r6, [sp, #12]
 801056c:	4637      	mov	r7, r6
 801056e:	2800      	cmp	r0, #0
 8010570:	f040 8245 	bne.w	80109fe <_dtoa_r+0x93e>
 8010574:	9d01      	ldr	r5, [sp, #4]
 8010576:	2331      	movs	r3, #49	; 0x31
 8010578:	f805 3b01 	strb.w	r3, [r5], #1
 801057c:	9b00      	ldr	r3, [sp, #0]
 801057e:	3301      	adds	r3, #1
 8010580:	9300      	str	r3, [sp, #0]
 8010582:	e240      	b.n	8010a06 <_dtoa_r+0x946>
 8010584:	07f2      	lsls	r2, r6, #31
 8010586:	d505      	bpl.n	8010594 <_dtoa_r+0x4d4>
 8010588:	e9d7 2300 	ldrd	r2, r3, [r7]
 801058c:	f7f0 f834 	bl	80005f8 <__aeabi_dmul>
 8010590:	3501      	adds	r5, #1
 8010592:	2301      	movs	r3, #1
 8010594:	1076      	asrs	r6, r6, #1
 8010596:	3708      	adds	r7, #8
 8010598:	e777      	b.n	801048a <_dtoa_r+0x3ca>
 801059a:	2502      	movs	r5, #2
 801059c:	e779      	b.n	8010492 <_dtoa_r+0x3d2>
 801059e:	9f00      	ldr	r7, [sp, #0]
 80105a0:	9e03      	ldr	r6, [sp, #12]
 80105a2:	e794      	b.n	80104ce <_dtoa_r+0x40e>
 80105a4:	9901      	ldr	r1, [sp, #4]
 80105a6:	4b4c      	ldr	r3, [pc, #304]	; (80106d8 <_dtoa_r+0x618>)
 80105a8:	4431      	add	r1, r6
 80105aa:	910d      	str	r1, [sp, #52]	; 0x34
 80105ac:	9908      	ldr	r1, [sp, #32]
 80105ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80105b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80105b6:	2900      	cmp	r1, #0
 80105b8:	d043      	beq.n	8010642 <_dtoa_r+0x582>
 80105ba:	494d      	ldr	r1, [pc, #308]	; (80106f0 <_dtoa_r+0x630>)
 80105bc:	2000      	movs	r0, #0
 80105be:	f7f0 f945 	bl	800084c <__aeabi_ddiv>
 80105c2:	4652      	mov	r2, sl
 80105c4:	465b      	mov	r3, fp
 80105c6:	f7ef fe5f 	bl	8000288 <__aeabi_dsub>
 80105ca:	9d01      	ldr	r5, [sp, #4]
 80105cc:	4682      	mov	sl, r0
 80105ce:	468b      	mov	fp, r1
 80105d0:	4649      	mov	r1, r9
 80105d2:	4640      	mov	r0, r8
 80105d4:	f7f0 fac0 	bl	8000b58 <__aeabi_d2iz>
 80105d8:	4606      	mov	r6, r0
 80105da:	f7ef ffa3 	bl	8000524 <__aeabi_i2d>
 80105de:	4602      	mov	r2, r0
 80105e0:	460b      	mov	r3, r1
 80105e2:	4640      	mov	r0, r8
 80105e4:	4649      	mov	r1, r9
 80105e6:	f7ef fe4f 	bl	8000288 <__aeabi_dsub>
 80105ea:	3630      	adds	r6, #48	; 0x30
 80105ec:	f805 6b01 	strb.w	r6, [r5], #1
 80105f0:	4652      	mov	r2, sl
 80105f2:	465b      	mov	r3, fp
 80105f4:	4680      	mov	r8, r0
 80105f6:	4689      	mov	r9, r1
 80105f8:	f7f0 fa70 	bl	8000adc <__aeabi_dcmplt>
 80105fc:	2800      	cmp	r0, #0
 80105fe:	d163      	bne.n	80106c8 <_dtoa_r+0x608>
 8010600:	4642      	mov	r2, r8
 8010602:	464b      	mov	r3, r9
 8010604:	4936      	ldr	r1, [pc, #216]	; (80106e0 <_dtoa_r+0x620>)
 8010606:	2000      	movs	r0, #0
 8010608:	f7ef fe3e 	bl	8000288 <__aeabi_dsub>
 801060c:	4652      	mov	r2, sl
 801060e:	465b      	mov	r3, fp
 8010610:	f7f0 fa64 	bl	8000adc <__aeabi_dcmplt>
 8010614:	2800      	cmp	r0, #0
 8010616:	f040 80b5 	bne.w	8010784 <_dtoa_r+0x6c4>
 801061a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801061c:	429d      	cmp	r5, r3
 801061e:	d081      	beq.n	8010524 <_dtoa_r+0x464>
 8010620:	4b30      	ldr	r3, [pc, #192]	; (80106e4 <_dtoa_r+0x624>)
 8010622:	2200      	movs	r2, #0
 8010624:	4650      	mov	r0, sl
 8010626:	4659      	mov	r1, fp
 8010628:	f7ef ffe6 	bl	80005f8 <__aeabi_dmul>
 801062c:	4b2d      	ldr	r3, [pc, #180]	; (80106e4 <_dtoa_r+0x624>)
 801062e:	4682      	mov	sl, r0
 8010630:	468b      	mov	fp, r1
 8010632:	4640      	mov	r0, r8
 8010634:	4649      	mov	r1, r9
 8010636:	2200      	movs	r2, #0
 8010638:	f7ef ffde 	bl	80005f8 <__aeabi_dmul>
 801063c:	4680      	mov	r8, r0
 801063e:	4689      	mov	r9, r1
 8010640:	e7c6      	b.n	80105d0 <_dtoa_r+0x510>
 8010642:	4650      	mov	r0, sl
 8010644:	4659      	mov	r1, fp
 8010646:	f7ef ffd7 	bl	80005f8 <__aeabi_dmul>
 801064a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801064c:	9d01      	ldr	r5, [sp, #4]
 801064e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010650:	4682      	mov	sl, r0
 8010652:	468b      	mov	fp, r1
 8010654:	4649      	mov	r1, r9
 8010656:	4640      	mov	r0, r8
 8010658:	f7f0 fa7e 	bl	8000b58 <__aeabi_d2iz>
 801065c:	4606      	mov	r6, r0
 801065e:	f7ef ff61 	bl	8000524 <__aeabi_i2d>
 8010662:	3630      	adds	r6, #48	; 0x30
 8010664:	4602      	mov	r2, r0
 8010666:	460b      	mov	r3, r1
 8010668:	4640      	mov	r0, r8
 801066a:	4649      	mov	r1, r9
 801066c:	f7ef fe0c 	bl	8000288 <__aeabi_dsub>
 8010670:	f805 6b01 	strb.w	r6, [r5], #1
 8010674:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010676:	429d      	cmp	r5, r3
 8010678:	4680      	mov	r8, r0
 801067a:	4689      	mov	r9, r1
 801067c:	f04f 0200 	mov.w	r2, #0
 8010680:	d124      	bne.n	80106cc <_dtoa_r+0x60c>
 8010682:	4b1b      	ldr	r3, [pc, #108]	; (80106f0 <_dtoa_r+0x630>)
 8010684:	4650      	mov	r0, sl
 8010686:	4659      	mov	r1, fp
 8010688:	f7ef fe00 	bl	800028c <__adddf3>
 801068c:	4602      	mov	r2, r0
 801068e:	460b      	mov	r3, r1
 8010690:	4640      	mov	r0, r8
 8010692:	4649      	mov	r1, r9
 8010694:	f7f0 fa40 	bl	8000b18 <__aeabi_dcmpgt>
 8010698:	2800      	cmp	r0, #0
 801069a:	d173      	bne.n	8010784 <_dtoa_r+0x6c4>
 801069c:	4652      	mov	r2, sl
 801069e:	465b      	mov	r3, fp
 80106a0:	4913      	ldr	r1, [pc, #76]	; (80106f0 <_dtoa_r+0x630>)
 80106a2:	2000      	movs	r0, #0
 80106a4:	f7ef fdf0 	bl	8000288 <__aeabi_dsub>
 80106a8:	4602      	mov	r2, r0
 80106aa:	460b      	mov	r3, r1
 80106ac:	4640      	mov	r0, r8
 80106ae:	4649      	mov	r1, r9
 80106b0:	f7f0 fa14 	bl	8000adc <__aeabi_dcmplt>
 80106b4:	2800      	cmp	r0, #0
 80106b6:	f43f af35 	beq.w	8010524 <_dtoa_r+0x464>
 80106ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80106bc:	1e6b      	subs	r3, r5, #1
 80106be:	930f      	str	r3, [sp, #60]	; 0x3c
 80106c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80106c4:	2b30      	cmp	r3, #48	; 0x30
 80106c6:	d0f8      	beq.n	80106ba <_dtoa_r+0x5fa>
 80106c8:	9700      	str	r7, [sp, #0]
 80106ca:	e049      	b.n	8010760 <_dtoa_r+0x6a0>
 80106cc:	4b05      	ldr	r3, [pc, #20]	; (80106e4 <_dtoa_r+0x624>)
 80106ce:	f7ef ff93 	bl	80005f8 <__aeabi_dmul>
 80106d2:	4680      	mov	r8, r0
 80106d4:	4689      	mov	r9, r1
 80106d6:	e7bd      	b.n	8010654 <_dtoa_r+0x594>
 80106d8:	08012748 	.word	0x08012748
 80106dc:	08012720 	.word	0x08012720
 80106e0:	3ff00000 	.word	0x3ff00000
 80106e4:	40240000 	.word	0x40240000
 80106e8:	401c0000 	.word	0x401c0000
 80106ec:	40140000 	.word	0x40140000
 80106f0:	3fe00000 	.word	0x3fe00000
 80106f4:	9d01      	ldr	r5, [sp, #4]
 80106f6:	4656      	mov	r6, sl
 80106f8:	465f      	mov	r7, fp
 80106fa:	4642      	mov	r2, r8
 80106fc:	464b      	mov	r3, r9
 80106fe:	4630      	mov	r0, r6
 8010700:	4639      	mov	r1, r7
 8010702:	f7f0 f8a3 	bl	800084c <__aeabi_ddiv>
 8010706:	f7f0 fa27 	bl	8000b58 <__aeabi_d2iz>
 801070a:	4682      	mov	sl, r0
 801070c:	f7ef ff0a 	bl	8000524 <__aeabi_i2d>
 8010710:	4642      	mov	r2, r8
 8010712:	464b      	mov	r3, r9
 8010714:	f7ef ff70 	bl	80005f8 <__aeabi_dmul>
 8010718:	4602      	mov	r2, r0
 801071a:	460b      	mov	r3, r1
 801071c:	4630      	mov	r0, r6
 801071e:	4639      	mov	r1, r7
 8010720:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010724:	f7ef fdb0 	bl	8000288 <__aeabi_dsub>
 8010728:	f805 6b01 	strb.w	r6, [r5], #1
 801072c:	9e01      	ldr	r6, [sp, #4]
 801072e:	9f03      	ldr	r7, [sp, #12]
 8010730:	1bae      	subs	r6, r5, r6
 8010732:	42b7      	cmp	r7, r6
 8010734:	4602      	mov	r2, r0
 8010736:	460b      	mov	r3, r1
 8010738:	d135      	bne.n	80107a6 <_dtoa_r+0x6e6>
 801073a:	f7ef fda7 	bl	800028c <__adddf3>
 801073e:	4642      	mov	r2, r8
 8010740:	464b      	mov	r3, r9
 8010742:	4606      	mov	r6, r0
 8010744:	460f      	mov	r7, r1
 8010746:	f7f0 f9e7 	bl	8000b18 <__aeabi_dcmpgt>
 801074a:	b9d0      	cbnz	r0, 8010782 <_dtoa_r+0x6c2>
 801074c:	4642      	mov	r2, r8
 801074e:	464b      	mov	r3, r9
 8010750:	4630      	mov	r0, r6
 8010752:	4639      	mov	r1, r7
 8010754:	f7f0 f9b8 	bl	8000ac8 <__aeabi_dcmpeq>
 8010758:	b110      	cbz	r0, 8010760 <_dtoa_r+0x6a0>
 801075a:	f01a 0f01 	tst.w	sl, #1
 801075e:	d110      	bne.n	8010782 <_dtoa_r+0x6c2>
 8010760:	4620      	mov	r0, r4
 8010762:	ee18 1a10 	vmov	r1, s16
 8010766:	f000 fc2b 	bl	8010fc0 <_Bfree>
 801076a:	2300      	movs	r3, #0
 801076c:	9800      	ldr	r0, [sp, #0]
 801076e:	702b      	strb	r3, [r5, #0]
 8010770:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010772:	3001      	adds	r0, #1
 8010774:	6018      	str	r0, [r3, #0]
 8010776:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010778:	2b00      	cmp	r3, #0
 801077a:	f43f acf1 	beq.w	8010160 <_dtoa_r+0xa0>
 801077e:	601d      	str	r5, [r3, #0]
 8010780:	e4ee      	b.n	8010160 <_dtoa_r+0xa0>
 8010782:	9f00      	ldr	r7, [sp, #0]
 8010784:	462b      	mov	r3, r5
 8010786:	461d      	mov	r5, r3
 8010788:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801078c:	2a39      	cmp	r2, #57	; 0x39
 801078e:	d106      	bne.n	801079e <_dtoa_r+0x6de>
 8010790:	9a01      	ldr	r2, [sp, #4]
 8010792:	429a      	cmp	r2, r3
 8010794:	d1f7      	bne.n	8010786 <_dtoa_r+0x6c6>
 8010796:	9901      	ldr	r1, [sp, #4]
 8010798:	2230      	movs	r2, #48	; 0x30
 801079a:	3701      	adds	r7, #1
 801079c:	700a      	strb	r2, [r1, #0]
 801079e:	781a      	ldrb	r2, [r3, #0]
 80107a0:	3201      	adds	r2, #1
 80107a2:	701a      	strb	r2, [r3, #0]
 80107a4:	e790      	b.n	80106c8 <_dtoa_r+0x608>
 80107a6:	4ba6      	ldr	r3, [pc, #664]	; (8010a40 <_dtoa_r+0x980>)
 80107a8:	2200      	movs	r2, #0
 80107aa:	f7ef ff25 	bl	80005f8 <__aeabi_dmul>
 80107ae:	2200      	movs	r2, #0
 80107b0:	2300      	movs	r3, #0
 80107b2:	4606      	mov	r6, r0
 80107b4:	460f      	mov	r7, r1
 80107b6:	f7f0 f987 	bl	8000ac8 <__aeabi_dcmpeq>
 80107ba:	2800      	cmp	r0, #0
 80107bc:	d09d      	beq.n	80106fa <_dtoa_r+0x63a>
 80107be:	e7cf      	b.n	8010760 <_dtoa_r+0x6a0>
 80107c0:	9a08      	ldr	r2, [sp, #32]
 80107c2:	2a00      	cmp	r2, #0
 80107c4:	f000 80d7 	beq.w	8010976 <_dtoa_r+0x8b6>
 80107c8:	9a06      	ldr	r2, [sp, #24]
 80107ca:	2a01      	cmp	r2, #1
 80107cc:	f300 80ba 	bgt.w	8010944 <_dtoa_r+0x884>
 80107d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80107d2:	2a00      	cmp	r2, #0
 80107d4:	f000 80b2 	beq.w	801093c <_dtoa_r+0x87c>
 80107d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80107dc:	9e07      	ldr	r6, [sp, #28]
 80107de:	9d04      	ldr	r5, [sp, #16]
 80107e0:	9a04      	ldr	r2, [sp, #16]
 80107e2:	441a      	add	r2, r3
 80107e4:	9204      	str	r2, [sp, #16]
 80107e6:	9a05      	ldr	r2, [sp, #20]
 80107e8:	2101      	movs	r1, #1
 80107ea:	441a      	add	r2, r3
 80107ec:	4620      	mov	r0, r4
 80107ee:	9205      	str	r2, [sp, #20]
 80107f0:	f000 fc9e 	bl	8011130 <__i2b>
 80107f4:	4607      	mov	r7, r0
 80107f6:	2d00      	cmp	r5, #0
 80107f8:	dd0c      	ble.n	8010814 <_dtoa_r+0x754>
 80107fa:	9b05      	ldr	r3, [sp, #20]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	dd09      	ble.n	8010814 <_dtoa_r+0x754>
 8010800:	42ab      	cmp	r3, r5
 8010802:	9a04      	ldr	r2, [sp, #16]
 8010804:	bfa8      	it	ge
 8010806:	462b      	movge	r3, r5
 8010808:	1ad2      	subs	r2, r2, r3
 801080a:	9204      	str	r2, [sp, #16]
 801080c:	9a05      	ldr	r2, [sp, #20]
 801080e:	1aed      	subs	r5, r5, r3
 8010810:	1ad3      	subs	r3, r2, r3
 8010812:	9305      	str	r3, [sp, #20]
 8010814:	9b07      	ldr	r3, [sp, #28]
 8010816:	b31b      	cbz	r3, 8010860 <_dtoa_r+0x7a0>
 8010818:	9b08      	ldr	r3, [sp, #32]
 801081a:	2b00      	cmp	r3, #0
 801081c:	f000 80af 	beq.w	801097e <_dtoa_r+0x8be>
 8010820:	2e00      	cmp	r6, #0
 8010822:	dd13      	ble.n	801084c <_dtoa_r+0x78c>
 8010824:	4639      	mov	r1, r7
 8010826:	4632      	mov	r2, r6
 8010828:	4620      	mov	r0, r4
 801082a:	f000 fd41 	bl	80112b0 <__pow5mult>
 801082e:	ee18 2a10 	vmov	r2, s16
 8010832:	4601      	mov	r1, r0
 8010834:	4607      	mov	r7, r0
 8010836:	4620      	mov	r0, r4
 8010838:	f000 fc90 	bl	801115c <__multiply>
 801083c:	ee18 1a10 	vmov	r1, s16
 8010840:	4680      	mov	r8, r0
 8010842:	4620      	mov	r0, r4
 8010844:	f000 fbbc 	bl	8010fc0 <_Bfree>
 8010848:	ee08 8a10 	vmov	s16, r8
 801084c:	9b07      	ldr	r3, [sp, #28]
 801084e:	1b9a      	subs	r2, r3, r6
 8010850:	d006      	beq.n	8010860 <_dtoa_r+0x7a0>
 8010852:	ee18 1a10 	vmov	r1, s16
 8010856:	4620      	mov	r0, r4
 8010858:	f000 fd2a 	bl	80112b0 <__pow5mult>
 801085c:	ee08 0a10 	vmov	s16, r0
 8010860:	2101      	movs	r1, #1
 8010862:	4620      	mov	r0, r4
 8010864:	f000 fc64 	bl	8011130 <__i2b>
 8010868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801086a:	2b00      	cmp	r3, #0
 801086c:	4606      	mov	r6, r0
 801086e:	f340 8088 	ble.w	8010982 <_dtoa_r+0x8c2>
 8010872:	461a      	mov	r2, r3
 8010874:	4601      	mov	r1, r0
 8010876:	4620      	mov	r0, r4
 8010878:	f000 fd1a 	bl	80112b0 <__pow5mult>
 801087c:	9b06      	ldr	r3, [sp, #24]
 801087e:	2b01      	cmp	r3, #1
 8010880:	4606      	mov	r6, r0
 8010882:	f340 8081 	ble.w	8010988 <_dtoa_r+0x8c8>
 8010886:	f04f 0800 	mov.w	r8, #0
 801088a:	6933      	ldr	r3, [r6, #16]
 801088c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010890:	6918      	ldr	r0, [r3, #16]
 8010892:	f000 fbfd 	bl	8011090 <__hi0bits>
 8010896:	f1c0 0020 	rsb	r0, r0, #32
 801089a:	9b05      	ldr	r3, [sp, #20]
 801089c:	4418      	add	r0, r3
 801089e:	f010 001f 	ands.w	r0, r0, #31
 80108a2:	f000 8092 	beq.w	80109ca <_dtoa_r+0x90a>
 80108a6:	f1c0 0320 	rsb	r3, r0, #32
 80108aa:	2b04      	cmp	r3, #4
 80108ac:	f340 808a 	ble.w	80109c4 <_dtoa_r+0x904>
 80108b0:	f1c0 001c 	rsb	r0, r0, #28
 80108b4:	9b04      	ldr	r3, [sp, #16]
 80108b6:	4403      	add	r3, r0
 80108b8:	9304      	str	r3, [sp, #16]
 80108ba:	9b05      	ldr	r3, [sp, #20]
 80108bc:	4403      	add	r3, r0
 80108be:	4405      	add	r5, r0
 80108c0:	9305      	str	r3, [sp, #20]
 80108c2:	9b04      	ldr	r3, [sp, #16]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	dd07      	ble.n	80108d8 <_dtoa_r+0x818>
 80108c8:	ee18 1a10 	vmov	r1, s16
 80108cc:	461a      	mov	r2, r3
 80108ce:	4620      	mov	r0, r4
 80108d0:	f000 fd48 	bl	8011364 <__lshift>
 80108d4:	ee08 0a10 	vmov	s16, r0
 80108d8:	9b05      	ldr	r3, [sp, #20]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	dd05      	ble.n	80108ea <_dtoa_r+0x82a>
 80108de:	4631      	mov	r1, r6
 80108e0:	461a      	mov	r2, r3
 80108e2:	4620      	mov	r0, r4
 80108e4:	f000 fd3e 	bl	8011364 <__lshift>
 80108e8:	4606      	mov	r6, r0
 80108ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d06e      	beq.n	80109ce <_dtoa_r+0x90e>
 80108f0:	ee18 0a10 	vmov	r0, s16
 80108f4:	4631      	mov	r1, r6
 80108f6:	f000 fda5 	bl	8011444 <__mcmp>
 80108fa:	2800      	cmp	r0, #0
 80108fc:	da67      	bge.n	80109ce <_dtoa_r+0x90e>
 80108fe:	9b00      	ldr	r3, [sp, #0]
 8010900:	3b01      	subs	r3, #1
 8010902:	ee18 1a10 	vmov	r1, s16
 8010906:	9300      	str	r3, [sp, #0]
 8010908:	220a      	movs	r2, #10
 801090a:	2300      	movs	r3, #0
 801090c:	4620      	mov	r0, r4
 801090e:	f000 fb79 	bl	8011004 <__multadd>
 8010912:	9b08      	ldr	r3, [sp, #32]
 8010914:	ee08 0a10 	vmov	s16, r0
 8010918:	2b00      	cmp	r3, #0
 801091a:	f000 81b1 	beq.w	8010c80 <_dtoa_r+0xbc0>
 801091e:	2300      	movs	r3, #0
 8010920:	4639      	mov	r1, r7
 8010922:	220a      	movs	r2, #10
 8010924:	4620      	mov	r0, r4
 8010926:	f000 fb6d 	bl	8011004 <__multadd>
 801092a:	9b02      	ldr	r3, [sp, #8]
 801092c:	2b00      	cmp	r3, #0
 801092e:	4607      	mov	r7, r0
 8010930:	f300 808e 	bgt.w	8010a50 <_dtoa_r+0x990>
 8010934:	9b06      	ldr	r3, [sp, #24]
 8010936:	2b02      	cmp	r3, #2
 8010938:	dc51      	bgt.n	80109de <_dtoa_r+0x91e>
 801093a:	e089      	b.n	8010a50 <_dtoa_r+0x990>
 801093c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801093e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010942:	e74b      	b.n	80107dc <_dtoa_r+0x71c>
 8010944:	9b03      	ldr	r3, [sp, #12]
 8010946:	1e5e      	subs	r6, r3, #1
 8010948:	9b07      	ldr	r3, [sp, #28]
 801094a:	42b3      	cmp	r3, r6
 801094c:	bfbf      	itttt	lt
 801094e:	9b07      	ldrlt	r3, [sp, #28]
 8010950:	9607      	strlt	r6, [sp, #28]
 8010952:	1af2      	sublt	r2, r6, r3
 8010954:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010956:	bfb6      	itet	lt
 8010958:	189b      	addlt	r3, r3, r2
 801095a:	1b9e      	subge	r6, r3, r6
 801095c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801095e:	9b03      	ldr	r3, [sp, #12]
 8010960:	bfb8      	it	lt
 8010962:	2600      	movlt	r6, #0
 8010964:	2b00      	cmp	r3, #0
 8010966:	bfb7      	itett	lt
 8010968:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801096c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010970:	1a9d      	sublt	r5, r3, r2
 8010972:	2300      	movlt	r3, #0
 8010974:	e734      	b.n	80107e0 <_dtoa_r+0x720>
 8010976:	9e07      	ldr	r6, [sp, #28]
 8010978:	9d04      	ldr	r5, [sp, #16]
 801097a:	9f08      	ldr	r7, [sp, #32]
 801097c:	e73b      	b.n	80107f6 <_dtoa_r+0x736>
 801097e:	9a07      	ldr	r2, [sp, #28]
 8010980:	e767      	b.n	8010852 <_dtoa_r+0x792>
 8010982:	9b06      	ldr	r3, [sp, #24]
 8010984:	2b01      	cmp	r3, #1
 8010986:	dc18      	bgt.n	80109ba <_dtoa_r+0x8fa>
 8010988:	f1ba 0f00 	cmp.w	sl, #0
 801098c:	d115      	bne.n	80109ba <_dtoa_r+0x8fa>
 801098e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010992:	b993      	cbnz	r3, 80109ba <_dtoa_r+0x8fa>
 8010994:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010998:	0d1b      	lsrs	r3, r3, #20
 801099a:	051b      	lsls	r3, r3, #20
 801099c:	b183      	cbz	r3, 80109c0 <_dtoa_r+0x900>
 801099e:	9b04      	ldr	r3, [sp, #16]
 80109a0:	3301      	adds	r3, #1
 80109a2:	9304      	str	r3, [sp, #16]
 80109a4:	9b05      	ldr	r3, [sp, #20]
 80109a6:	3301      	adds	r3, #1
 80109a8:	9305      	str	r3, [sp, #20]
 80109aa:	f04f 0801 	mov.w	r8, #1
 80109ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	f47f af6a 	bne.w	801088a <_dtoa_r+0x7ca>
 80109b6:	2001      	movs	r0, #1
 80109b8:	e76f      	b.n	801089a <_dtoa_r+0x7da>
 80109ba:	f04f 0800 	mov.w	r8, #0
 80109be:	e7f6      	b.n	80109ae <_dtoa_r+0x8ee>
 80109c0:	4698      	mov	r8, r3
 80109c2:	e7f4      	b.n	80109ae <_dtoa_r+0x8ee>
 80109c4:	f43f af7d 	beq.w	80108c2 <_dtoa_r+0x802>
 80109c8:	4618      	mov	r0, r3
 80109ca:	301c      	adds	r0, #28
 80109cc:	e772      	b.n	80108b4 <_dtoa_r+0x7f4>
 80109ce:	9b03      	ldr	r3, [sp, #12]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	dc37      	bgt.n	8010a44 <_dtoa_r+0x984>
 80109d4:	9b06      	ldr	r3, [sp, #24]
 80109d6:	2b02      	cmp	r3, #2
 80109d8:	dd34      	ble.n	8010a44 <_dtoa_r+0x984>
 80109da:	9b03      	ldr	r3, [sp, #12]
 80109dc:	9302      	str	r3, [sp, #8]
 80109de:	9b02      	ldr	r3, [sp, #8]
 80109e0:	b96b      	cbnz	r3, 80109fe <_dtoa_r+0x93e>
 80109e2:	4631      	mov	r1, r6
 80109e4:	2205      	movs	r2, #5
 80109e6:	4620      	mov	r0, r4
 80109e8:	f000 fb0c 	bl	8011004 <__multadd>
 80109ec:	4601      	mov	r1, r0
 80109ee:	4606      	mov	r6, r0
 80109f0:	ee18 0a10 	vmov	r0, s16
 80109f4:	f000 fd26 	bl	8011444 <__mcmp>
 80109f8:	2800      	cmp	r0, #0
 80109fa:	f73f adbb 	bgt.w	8010574 <_dtoa_r+0x4b4>
 80109fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a00:	9d01      	ldr	r5, [sp, #4]
 8010a02:	43db      	mvns	r3, r3
 8010a04:	9300      	str	r3, [sp, #0]
 8010a06:	f04f 0800 	mov.w	r8, #0
 8010a0a:	4631      	mov	r1, r6
 8010a0c:	4620      	mov	r0, r4
 8010a0e:	f000 fad7 	bl	8010fc0 <_Bfree>
 8010a12:	2f00      	cmp	r7, #0
 8010a14:	f43f aea4 	beq.w	8010760 <_dtoa_r+0x6a0>
 8010a18:	f1b8 0f00 	cmp.w	r8, #0
 8010a1c:	d005      	beq.n	8010a2a <_dtoa_r+0x96a>
 8010a1e:	45b8      	cmp	r8, r7
 8010a20:	d003      	beq.n	8010a2a <_dtoa_r+0x96a>
 8010a22:	4641      	mov	r1, r8
 8010a24:	4620      	mov	r0, r4
 8010a26:	f000 facb 	bl	8010fc0 <_Bfree>
 8010a2a:	4639      	mov	r1, r7
 8010a2c:	4620      	mov	r0, r4
 8010a2e:	f000 fac7 	bl	8010fc0 <_Bfree>
 8010a32:	e695      	b.n	8010760 <_dtoa_r+0x6a0>
 8010a34:	2600      	movs	r6, #0
 8010a36:	4637      	mov	r7, r6
 8010a38:	e7e1      	b.n	80109fe <_dtoa_r+0x93e>
 8010a3a:	9700      	str	r7, [sp, #0]
 8010a3c:	4637      	mov	r7, r6
 8010a3e:	e599      	b.n	8010574 <_dtoa_r+0x4b4>
 8010a40:	40240000 	.word	0x40240000
 8010a44:	9b08      	ldr	r3, [sp, #32]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	f000 80ca 	beq.w	8010be0 <_dtoa_r+0xb20>
 8010a4c:	9b03      	ldr	r3, [sp, #12]
 8010a4e:	9302      	str	r3, [sp, #8]
 8010a50:	2d00      	cmp	r5, #0
 8010a52:	dd05      	ble.n	8010a60 <_dtoa_r+0x9a0>
 8010a54:	4639      	mov	r1, r7
 8010a56:	462a      	mov	r2, r5
 8010a58:	4620      	mov	r0, r4
 8010a5a:	f000 fc83 	bl	8011364 <__lshift>
 8010a5e:	4607      	mov	r7, r0
 8010a60:	f1b8 0f00 	cmp.w	r8, #0
 8010a64:	d05b      	beq.n	8010b1e <_dtoa_r+0xa5e>
 8010a66:	6879      	ldr	r1, [r7, #4]
 8010a68:	4620      	mov	r0, r4
 8010a6a:	f000 fa69 	bl	8010f40 <_Balloc>
 8010a6e:	4605      	mov	r5, r0
 8010a70:	b928      	cbnz	r0, 8010a7e <_dtoa_r+0x9be>
 8010a72:	4b87      	ldr	r3, [pc, #540]	; (8010c90 <_dtoa_r+0xbd0>)
 8010a74:	4602      	mov	r2, r0
 8010a76:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010a7a:	f7ff bb3b 	b.w	80100f4 <_dtoa_r+0x34>
 8010a7e:	693a      	ldr	r2, [r7, #16]
 8010a80:	3202      	adds	r2, #2
 8010a82:	0092      	lsls	r2, r2, #2
 8010a84:	f107 010c 	add.w	r1, r7, #12
 8010a88:	300c      	adds	r0, #12
 8010a8a:	f7fe fb4a 	bl	800f122 <memcpy>
 8010a8e:	2201      	movs	r2, #1
 8010a90:	4629      	mov	r1, r5
 8010a92:	4620      	mov	r0, r4
 8010a94:	f000 fc66 	bl	8011364 <__lshift>
 8010a98:	9b01      	ldr	r3, [sp, #4]
 8010a9a:	f103 0901 	add.w	r9, r3, #1
 8010a9e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010aa2:	4413      	add	r3, r2
 8010aa4:	9305      	str	r3, [sp, #20]
 8010aa6:	f00a 0301 	and.w	r3, sl, #1
 8010aaa:	46b8      	mov	r8, r7
 8010aac:	9304      	str	r3, [sp, #16]
 8010aae:	4607      	mov	r7, r0
 8010ab0:	4631      	mov	r1, r6
 8010ab2:	ee18 0a10 	vmov	r0, s16
 8010ab6:	f7ff fa77 	bl	800ffa8 <quorem>
 8010aba:	4641      	mov	r1, r8
 8010abc:	9002      	str	r0, [sp, #8]
 8010abe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010ac2:	ee18 0a10 	vmov	r0, s16
 8010ac6:	f000 fcbd 	bl	8011444 <__mcmp>
 8010aca:	463a      	mov	r2, r7
 8010acc:	9003      	str	r0, [sp, #12]
 8010ace:	4631      	mov	r1, r6
 8010ad0:	4620      	mov	r0, r4
 8010ad2:	f000 fcd3 	bl	801147c <__mdiff>
 8010ad6:	68c2      	ldr	r2, [r0, #12]
 8010ad8:	f109 3bff 	add.w	fp, r9, #4294967295
 8010adc:	4605      	mov	r5, r0
 8010ade:	bb02      	cbnz	r2, 8010b22 <_dtoa_r+0xa62>
 8010ae0:	4601      	mov	r1, r0
 8010ae2:	ee18 0a10 	vmov	r0, s16
 8010ae6:	f000 fcad 	bl	8011444 <__mcmp>
 8010aea:	4602      	mov	r2, r0
 8010aec:	4629      	mov	r1, r5
 8010aee:	4620      	mov	r0, r4
 8010af0:	9207      	str	r2, [sp, #28]
 8010af2:	f000 fa65 	bl	8010fc0 <_Bfree>
 8010af6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010afa:	ea43 0102 	orr.w	r1, r3, r2
 8010afe:	9b04      	ldr	r3, [sp, #16]
 8010b00:	430b      	orrs	r3, r1
 8010b02:	464d      	mov	r5, r9
 8010b04:	d10f      	bne.n	8010b26 <_dtoa_r+0xa66>
 8010b06:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010b0a:	d02a      	beq.n	8010b62 <_dtoa_r+0xaa2>
 8010b0c:	9b03      	ldr	r3, [sp, #12]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	dd02      	ble.n	8010b18 <_dtoa_r+0xa58>
 8010b12:	9b02      	ldr	r3, [sp, #8]
 8010b14:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010b18:	f88b a000 	strb.w	sl, [fp]
 8010b1c:	e775      	b.n	8010a0a <_dtoa_r+0x94a>
 8010b1e:	4638      	mov	r0, r7
 8010b20:	e7ba      	b.n	8010a98 <_dtoa_r+0x9d8>
 8010b22:	2201      	movs	r2, #1
 8010b24:	e7e2      	b.n	8010aec <_dtoa_r+0xa2c>
 8010b26:	9b03      	ldr	r3, [sp, #12]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	db04      	blt.n	8010b36 <_dtoa_r+0xa76>
 8010b2c:	9906      	ldr	r1, [sp, #24]
 8010b2e:	430b      	orrs	r3, r1
 8010b30:	9904      	ldr	r1, [sp, #16]
 8010b32:	430b      	orrs	r3, r1
 8010b34:	d122      	bne.n	8010b7c <_dtoa_r+0xabc>
 8010b36:	2a00      	cmp	r2, #0
 8010b38:	ddee      	ble.n	8010b18 <_dtoa_r+0xa58>
 8010b3a:	ee18 1a10 	vmov	r1, s16
 8010b3e:	2201      	movs	r2, #1
 8010b40:	4620      	mov	r0, r4
 8010b42:	f000 fc0f 	bl	8011364 <__lshift>
 8010b46:	4631      	mov	r1, r6
 8010b48:	ee08 0a10 	vmov	s16, r0
 8010b4c:	f000 fc7a 	bl	8011444 <__mcmp>
 8010b50:	2800      	cmp	r0, #0
 8010b52:	dc03      	bgt.n	8010b5c <_dtoa_r+0xa9c>
 8010b54:	d1e0      	bne.n	8010b18 <_dtoa_r+0xa58>
 8010b56:	f01a 0f01 	tst.w	sl, #1
 8010b5a:	d0dd      	beq.n	8010b18 <_dtoa_r+0xa58>
 8010b5c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010b60:	d1d7      	bne.n	8010b12 <_dtoa_r+0xa52>
 8010b62:	2339      	movs	r3, #57	; 0x39
 8010b64:	f88b 3000 	strb.w	r3, [fp]
 8010b68:	462b      	mov	r3, r5
 8010b6a:	461d      	mov	r5, r3
 8010b6c:	3b01      	subs	r3, #1
 8010b6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010b72:	2a39      	cmp	r2, #57	; 0x39
 8010b74:	d071      	beq.n	8010c5a <_dtoa_r+0xb9a>
 8010b76:	3201      	adds	r2, #1
 8010b78:	701a      	strb	r2, [r3, #0]
 8010b7a:	e746      	b.n	8010a0a <_dtoa_r+0x94a>
 8010b7c:	2a00      	cmp	r2, #0
 8010b7e:	dd07      	ble.n	8010b90 <_dtoa_r+0xad0>
 8010b80:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010b84:	d0ed      	beq.n	8010b62 <_dtoa_r+0xaa2>
 8010b86:	f10a 0301 	add.w	r3, sl, #1
 8010b8a:	f88b 3000 	strb.w	r3, [fp]
 8010b8e:	e73c      	b.n	8010a0a <_dtoa_r+0x94a>
 8010b90:	9b05      	ldr	r3, [sp, #20]
 8010b92:	f809 ac01 	strb.w	sl, [r9, #-1]
 8010b96:	4599      	cmp	r9, r3
 8010b98:	d047      	beq.n	8010c2a <_dtoa_r+0xb6a>
 8010b9a:	ee18 1a10 	vmov	r1, s16
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	220a      	movs	r2, #10
 8010ba2:	4620      	mov	r0, r4
 8010ba4:	f000 fa2e 	bl	8011004 <__multadd>
 8010ba8:	45b8      	cmp	r8, r7
 8010baa:	ee08 0a10 	vmov	s16, r0
 8010bae:	f04f 0300 	mov.w	r3, #0
 8010bb2:	f04f 020a 	mov.w	r2, #10
 8010bb6:	4641      	mov	r1, r8
 8010bb8:	4620      	mov	r0, r4
 8010bba:	d106      	bne.n	8010bca <_dtoa_r+0xb0a>
 8010bbc:	f000 fa22 	bl	8011004 <__multadd>
 8010bc0:	4680      	mov	r8, r0
 8010bc2:	4607      	mov	r7, r0
 8010bc4:	f109 0901 	add.w	r9, r9, #1
 8010bc8:	e772      	b.n	8010ab0 <_dtoa_r+0x9f0>
 8010bca:	f000 fa1b 	bl	8011004 <__multadd>
 8010bce:	4639      	mov	r1, r7
 8010bd0:	4680      	mov	r8, r0
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	220a      	movs	r2, #10
 8010bd6:	4620      	mov	r0, r4
 8010bd8:	f000 fa14 	bl	8011004 <__multadd>
 8010bdc:	4607      	mov	r7, r0
 8010bde:	e7f1      	b.n	8010bc4 <_dtoa_r+0xb04>
 8010be0:	9b03      	ldr	r3, [sp, #12]
 8010be2:	9302      	str	r3, [sp, #8]
 8010be4:	9d01      	ldr	r5, [sp, #4]
 8010be6:	ee18 0a10 	vmov	r0, s16
 8010bea:	4631      	mov	r1, r6
 8010bec:	f7ff f9dc 	bl	800ffa8 <quorem>
 8010bf0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010bf4:	9b01      	ldr	r3, [sp, #4]
 8010bf6:	f805 ab01 	strb.w	sl, [r5], #1
 8010bfa:	1aea      	subs	r2, r5, r3
 8010bfc:	9b02      	ldr	r3, [sp, #8]
 8010bfe:	4293      	cmp	r3, r2
 8010c00:	dd09      	ble.n	8010c16 <_dtoa_r+0xb56>
 8010c02:	ee18 1a10 	vmov	r1, s16
 8010c06:	2300      	movs	r3, #0
 8010c08:	220a      	movs	r2, #10
 8010c0a:	4620      	mov	r0, r4
 8010c0c:	f000 f9fa 	bl	8011004 <__multadd>
 8010c10:	ee08 0a10 	vmov	s16, r0
 8010c14:	e7e7      	b.n	8010be6 <_dtoa_r+0xb26>
 8010c16:	9b02      	ldr	r3, [sp, #8]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	bfc8      	it	gt
 8010c1c:	461d      	movgt	r5, r3
 8010c1e:	9b01      	ldr	r3, [sp, #4]
 8010c20:	bfd8      	it	le
 8010c22:	2501      	movle	r5, #1
 8010c24:	441d      	add	r5, r3
 8010c26:	f04f 0800 	mov.w	r8, #0
 8010c2a:	ee18 1a10 	vmov	r1, s16
 8010c2e:	2201      	movs	r2, #1
 8010c30:	4620      	mov	r0, r4
 8010c32:	f000 fb97 	bl	8011364 <__lshift>
 8010c36:	4631      	mov	r1, r6
 8010c38:	ee08 0a10 	vmov	s16, r0
 8010c3c:	f000 fc02 	bl	8011444 <__mcmp>
 8010c40:	2800      	cmp	r0, #0
 8010c42:	dc91      	bgt.n	8010b68 <_dtoa_r+0xaa8>
 8010c44:	d102      	bne.n	8010c4c <_dtoa_r+0xb8c>
 8010c46:	f01a 0f01 	tst.w	sl, #1
 8010c4a:	d18d      	bne.n	8010b68 <_dtoa_r+0xaa8>
 8010c4c:	462b      	mov	r3, r5
 8010c4e:	461d      	mov	r5, r3
 8010c50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010c54:	2a30      	cmp	r2, #48	; 0x30
 8010c56:	d0fa      	beq.n	8010c4e <_dtoa_r+0xb8e>
 8010c58:	e6d7      	b.n	8010a0a <_dtoa_r+0x94a>
 8010c5a:	9a01      	ldr	r2, [sp, #4]
 8010c5c:	429a      	cmp	r2, r3
 8010c5e:	d184      	bne.n	8010b6a <_dtoa_r+0xaaa>
 8010c60:	9b00      	ldr	r3, [sp, #0]
 8010c62:	3301      	adds	r3, #1
 8010c64:	9300      	str	r3, [sp, #0]
 8010c66:	2331      	movs	r3, #49	; 0x31
 8010c68:	7013      	strb	r3, [r2, #0]
 8010c6a:	e6ce      	b.n	8010a0a <_dtoa_r+0x94a>
 8010c6c:	4b09      	ldr	r3, [pc, #36]	; (8010c94 <_dtoa_r+0xbd4>)
 8010c6e:	f7ff ba95 	b.w	801019c <_dtoa_r+0xdc>
 8010c72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	f47f aa6e 	bne.w	8010156 <_dtoa_r+0x96>
 8010c7a:	4b07      	ldr	r3, [pc, #28]	; (8010c98 <_dtoa_r+0xbd8>)
 8010c7c:	f7ff ba8e 	b.w	801019c <_dtoa_r+0xdc>
 8010c80:	9b02      	ldr	r3, [sp, #8]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	dcae      	bgt.n	8010be4 <_dtoa_r+0xb24>
 8010c86:	9b06      	ldr	r3, [sp, #24]
 8010c88:	2b02      	cmp	r3, #2
 8010c8a:	f73f aea8 	bgt.w	80109de <_dtoa_r+0x91e>
 8010c8e:	e7a9      	b.n	8010be4 <_dtoa_r+0xb24>
 8010c90:	080126af 	.word	0x080126af
 8010c94:	0801260c 	.word	0x0801260c
 8010c98:	08012630 	.word	0x08012630

08010c9c <__sflush_r>:
 8010c9c:	898a      	ldrh	r2, [r1, #12]
 8010c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ca2:	4605      	mov	r5, r0
 8010ca4:	0710      	lsls	r0, r2, #28
 8010ca6:	460c      	mov	r4, r1
 8010ca8:	d458      	bmi.n	8010d5c <__sflush_r+0xc0>
 8010caa:	684b      	ldr	r3, [r1, #4]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	dc05      	bgt.n	8010cbc <__sflush_r+0x20>
 8010cb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	dc02      	bgt.n	8010cbc <__sflush_r+0x20>
 8010cb6:	2000      	movs	r0, #0
 8010cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010cbe:	2e00      	cmp	r6, #0
 8010cc0:	d0f9      	beq.n	8010cb6 <__sflush_r+0x1a>
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010cc8:	682f      	ldr	r7, [r5, #0]
 8010cca:	602b      	str	r3, [r5, #0]
 8010ccc:	d032      	beq.n	8010d34 <__sflush_r+0x98>
 8010cce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010cd0:	89a3      	ldrh	r3, [r4, #12]
 8010cd2:	075a      	lsls	r2, r3, #29
 8010cd4:	d505      	bpl.n	8010ce2 <__sflush_r+0x46>
 8010cd6:	6863      	ldr	r3, [r4, #4]
 8010cd8:	1ac0      	subs	r0, r0, r3
 8010cda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010cdc:	b10b      	cbz	r3, 8010ce2 <__sflush_r+0x46>
 8010cde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010ce0:	1ac0      	subs	r0, r0, r3
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	4602      	mov	r2, r0
 8010ce6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010ce8:	6a21      	ldr	r1, [r4, #32]
 8010cea:	4628      	mov	r0, r5
 8010cec:	47b0      	blx	r6
 8010cee:	1c43      	adds	r3, r0, #1
 8010cf0:	89a3      	ldrh	r3, [r4, #12]
 8010cf2:	d106      	bne.n	8010d02 <__sflush_r+0x66>
 8010cf4:	6829      	ldr	r1, [r5, #0]
 8010cf6:	291d      	cmp	r1, #29
 8010cf8:	d82c      	bhi.n	8010d54 <__sflush_r+0xb8>
 8010cfa:	4a2a      	ldr	r2, [pc, #168]	; (8010da4 <__sflush_r+0x108>)
 8010cfc:	40ca      	lsrs	r2, r1
 8010cfe:	07d6      	lsls	r6, r2, #31
 8010d00:	d528      	bpl.n	8010d54 <__sflush_r+0xb8>
 8010d02:	2200      	movs	r2, #0
 8010d04:	6062      	str	r2, [r4, #4]
 8010d06:	04d9      	lsls	r1, r3, #19
 8010d08:	6922      	ldr	r2, [r4, #16]
 8010d0a:	6022      	str	r2, [r4, #0]
 8010d0c:	d504      	bpl.n	8010d18 <__sflush_r+0x7c>
 8010d0e:	1c42      	adds	r2, r0, #1
 8010d10:	d101      	bne.n	8010d16 <__sflush_r+0x7a>
 8010d12:	682b      	ldr	r3, [r5, #0]
 8010d14:	b903      	cbnz	r3, 8010d18 <__sflush_r+0x7c>
 8010d16:	6560      	str	r0, [r4, #84]	; 0x54
 8010d18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010d1a:	602f      	str	r7, [r5, #0]
 8010d1c:	2900      	cmp	r1, #0
 8010d1e:	d0ca      	beq.n	8010cb6 <__sflush_r+0x1a>
 8010d20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d24:	4299      	cmp	r1, r3
 8010d26:	d002      	beq.n	8010d2e <__sflush_r+0x92>
 8010d28:	4628      	mov	r0, r5
 8010d2a:	f000 fca3 	bl	8011674 <_free_r>
 8010d2e:	2000      	movs	r0, #0
 8010d30:	6360      	str	r0, [r4, #52]	; 0x34
 8010d32:	e7c1      	b.n	8010cb8 <__sflush_r+0x1c>
 8010d34:	6a21      	ldr	r1, [r4, #32]
 8010d36:	2301      	movs	r3, #1
 8010d38:	4628      	mov	r0, r5
 8010d3a:	47b0      	blx	r6
 8010d3c:	1c41      	adds	r1, r0, #1
 8010d3e:	d1c7      	bne.n	8010cd0 <__sflush_r+0x34>
 8010d40:	682b      	ldr	r3, [r5, #0]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d0c4      	beq.n	8010cd0 <__sflush_r+0x34>
 8010d46:	2b1d      	cmp	r3, #29
 8010d48:	d001      	beq.n	8010d4e <__sflush_r+0xb2>
 8010d4a:	2b16      	cmp	r3, #22
 8010d4c:	d101      	bne.n	8010d52 <__sflush_r+0xb6>
 8010d4e:	602f      	str	r7, [r5, #0]
 8010d50:	e7b1      	b.n	8010cb6 <__sflush_r+0x1a>
 8010d52:	89a3      	ldrh	r3, [r4, #12]
 8010d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d58:	81a3      	strh	r3, [r4, #12]
 8010d5a:	e7ad      	b.n	8010cb8 <__sflush_r+0x1c>
 8010d5c:	690f      	ldr	r7, [r1, #16]
 8010d5e:	2f00      	cmp	r7, #0
 8010d60:	d0a9      	beq.n	8010cb6 <__sflush_r+0x1a>
 8010d62:	0793      	lsls	r3, r2, #30
 8010d64:	680e      	ldr	r6, [r1, #0]
 8010d66:	bf08      	it	eq
 8010d68:	694b      	ldreq	r3, [r1, #20]
 8010d6a:	600f      	str	r7, [r1, #0]
 8010d6c:	bf18      	it	ne
 8010d6e:	2300      	movne	r3, #0
 8010d70:	eba6 0807 	sub.w	r8, r6, r7
 8010d74:	608b      	str	r3, [r1, #8]
 8010d76:	f1b8 0f00 	cmp.w	r8, #0
 8010d7a:	dd9c      	ble.n	8010cb6 <__sflush_r+0x1a>
 8010d7c:	6a21      	ldr	r1, [r4, #32]
 8010d7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010d80:	4643      	mov	r3, r8
 8010d82:	463a      	mov	r2, r7
 8010d84:	4628      	mov	r0, r5
 8010d86:	47b0      	blx	r6
 8010d88:	2800      	cmp	r0, #0
 8010d8a:	dc06      	bgt.n	8010d9a <__sflush_r+0xfe>
 8010d8c:	89a3      	ldrh	r3, [r4, #12]
 8010d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d92:	81a3      	strh	r3, [r4, #12]
 8010d94:	f04f 30ff 	mov.w	r0, #4294967295
 8010d98:	e78e      	b.n	8010cb8 <__sflush_r+0x1c>
 8010d9a:	4407      	add	r7, r0
 8010d9c:	eba8 0800 	sub.w	r8, r8, r0
 8010da0:	e7e9      	b.n	8010d76 <__sflush_r+0xda>
 8010da2:	bf00      	nop
 8010da4:	20400001 	.word	0x20400001

08010da8 <_fflush_r>:
 8010da8:	b538      	push	{r3, r4, r5, lr}
 8010daa:	690b      	ldr	r3, [r1, #16]
 8010dac:	4605      	mov	r5, r0
 8010dae:	460c      	mov	r4, r1
 8010db0:	b913      	cbnz	r3, 8010db8 <_fflush_r+0x10>
 8010db2:	2500      	movs	r5, #0
 8010db4:	4628      	mov	r0, r5
 8010db6:	bd38      	pop	{r3, r4, r5, pc}
 8010db8:	b118      	cbz	r0, 8010dc2 <_fflush_r+0x1a>
 8010dba:	6983      	ldr	r3, [r0, #24]
 8010dbc:	b90b      	cbnz	r3, 8010dc2 <_fflush_r+0x1a>
 8010dbe:	f7fe f8eb 	bl	800ef98 <__sinit>
 8010dc2:	4b14      	ldr	r3, [pc, #80]	; (8010e14 <_fflush_r+0x6c>)
 8010dc4:	429c      	cmp	r4, r3
 8010dc6:	d11b      	bne.n	8010e00 <_fflush_r+0x58>
 8010dc8:	686c      	ldr	r4, [r5, #4]
 8010dca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d0ef      	beq.n	8010db2 <_fflush_r+0xa>
 8010dd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010dd4:	07d0      	lsls	r0, r2, #31
 8010dd6:	d404      	bmi.n	8010de2 <_fflush_r+0x3a>
 8010dd8:	0599      	lsls	r1, r3, #22
 8010dda:	d402      	bmi.n	8010de2 <_fflush_r+0x3a>
 8010ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010dde:	f7fe f99e 	bl	800f11e <__retarget_lock_acquire_recursive>
 8010de2:	4628      	mov	r0, r5
 8010de4:	4621      	mov	r1, r4
 8010de6:	f7ff ff59 	bl	8010c9c <__sflush_r>
 8010dea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010dec:	07da      	lsls	r2, r3, #31
 8010dee:	4605      	mov	r5, r0
 8010df0:	d4e0      	bmi.n	8010db4 <_fflush_r+0xc>
 8010df2:	89a3      	ldrh	r3, [r4, #12]
 8010df4:	059b      	lsls	r3, r3, #22
 8010df6:	d4dd      	bmi.n	8010db4 <_fflush_r+0xc>
 8010df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010dfa:	f7fe f991 	bl	800f120 <__retarget_lock_release_recursive>
 8010dfe:	e7d9      	b.n	8010db4 <_fflush_r+0xc>
 8010e00:	4b05      	ldr	r3, [pc, #20]	; (8010e18 <_fflush_r+0x70>)
 8010e02:	429c      	cmp	r4, r3
 8010e04:	d101      	bne.n	8010e0a <_fflush_r+0x62>
 8010e06:	68ac      	ldr	r4, [r5, #8]
 8010e08:	e7df      	b.n	8010dca <_fflush_r+0x22>
 8010e0a:	4b04      	ldr	r3, [pc, #16]	; (8010e1c <_fflush_r+0x74>)
 8010e0c:	429c      	cmp	r4, r3
 8010e0e:	bf08      	it	eq
 8010e10:	68ec      	ldreq	r4, [r5, #12]
 8010e12:	e7da      	b.n	8010dca <_fflush_r+0x22>
 8010e14:	080125b8 	.word	0x080125b8
 8010e18:	080125d8 	.word	0x080125d8
 8010e1c:	08012598 	.word	0x08012598

08010e20 <_localeconv_r>:
 8010e20:	4800      	ldr	r0, [pc, #0]	; (8010e24 <_localeconv_r+0x4>)
 8010e22:	4770      	bx	lr
 8010e24:	2000016c 	.word	0x2000016c

08010e28 <_lseek_r>:
 8010e28:	b538      	push	{r3, r4, r5, lr}
 8010e2a:	4d07      	ldr	r5, [pc, #28]	; (8010e48 <_lseek_r+0x20>)
 8010e2c:	4604      	mov	r4, r0
 8010e2e:	4608      	mov	r0, r1
 8010e30:	4611      	mov	r1, r2
 8010e32:	2200      	movs	r2, #0
 8010e34:	602a      	str	r2, [r5, #0]
 8010e36:	461a      	mov	r2, r3
 8010e38:	f7f1 fe2a 	bl	8002a90 <_lseek>
 8010e3c:	1c43      	adds	r3, r0, #1
 8010e3e:	d102      	bne.n	8010e46 <_lseek_r+0x1e>
 8010e40:	682b      	ldr	r3, [r5, #0]
 8010e42:	b103      	cbz	r3, 8010e46 <_lseek_r+0x1e>
 8010e44:	6023      	str	r3, [r4, #0]
 8010e46:	bd38      	pop	{r3, r4, r5, pc}
 8010e48:	20005730 	.word	0x20005730

08010e4c <__swhatbuf_r>:
 8010e4c:	b570      	push	{r4, r5, r6, lr}
 8010e4e:	460e      	mov	r6, r1
 8010e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e54:	2900      	cmp	r1, #0
 8010e56:	b096      	sub	sp, #88	; 0x58
 8010e58:	4614      	mov	r4, r2
 8010e5a:	461d      	mov	r5, r3
 8010e5c:	da08      	bge.n	8010e70 <__swhatbuf_r+0x24>
 8010e5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010e62:	2200      	movs	r2, #0
 8010e64:	602a      	str	r2, [r5, #0]
 8010e66:	061a      	lsls	r2, r3, #24
 8010e68:	d410      	bmi.n	8010e8c <__swhatbuf_r+0x40>
 8010e6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e6e:	e00e      	b.n	8010e8e <__swhatbuf_r+0x42>
 8010e70:	466a      	mov	r2, sp
 8010e72:	f000 fde7 	bl	8011a44 <_fstat_r>
 8010e76:	2800      	cmp	r0, #0
 8010e78:	dbf1      	blt.n	8010e5e <__swhatbuf_r+0x12>
 8010e7a:	9a01      	ldr	r2, [sp, #4]
 8010e7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010e80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010e84:	425a      	negs	r2, r3
 8010e86:	415a      	adcs	r2, r3
 8010e88:	602a      	str	r2, [r5, #0]
 8010e8a:	e7ee      	b.n	8010e6a <__swhatbuf_r+0x1e>
 8010e8c:	2340      	movs	r3, #64	; 0x40
 8010e8e:	2000      	movs	r0, #0
 8010e90:	6023      	str	r3, [r4, #0]
 8010e92:	b016      	add	sp, #88	; 0x58
 8010e94:	bd70      	pop	{r4, r5, r6, pc}
	...

08010e98 <__smakebuf_r>:
 8010e98:	898b      	ldrh	r3, [r1, #12]
 8010e9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010e9c:	079d      	lsls	r5, r3, #30
 8010e9e:	4606      	mov	r6, r0
 8010ea0:	460c      	mov	r4, r1
 8010ea2:	d507      	bpl.n	8010eb4 <__smakebuf_r+0x1c>
 8010ea4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010ea8:	6023      	str	r3, [r4, #0]
 8010eaa:	6123      	str	r3, [r4, #16]
 8010eac:	2301      	movs	r3, #1
 8010eae:	6163      	str	r3, [r4, #20]
 8010eb0:	b002      	add	sp, #8
 8010eb2:	bd70      	pop	{r4, r5, r6, pc}
 8010eb4:	ab01      	add	r3, sp, #4
 8010eb6:	466a      	mov	r2, sp
 8010eb8:	f7ff ffc8 	bl	8010e4c <__swhatbuf_r>
 8010ebc:	9900      	ldr	r1, [sp, #0]
 8010ebe:	4605      	mov	r5, r0
 8010ec0:	4630      	mov	r0, r6
 8010ec2:	f7fe f965 	bl	800f190 <_malloc_r>
 8010ec6:	b948      	cbnz	r0, 8010edc <__smakebuf_r+0x44>
 8010ec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ecc:	059a      	lsls	r2, r3, #22
 8010ece:	d4ef      	bmi.n	8010eb0 <__smakebuf_r+0x18>
 8010ed0:	f023 0303 	bic.w	r3, r3, #3
 8010ed4:	f043 0302 	orr.w	r3, r3, #2
 8010ed8:	81a3      	strh	r3, [r4, #12]
 8010eda:	e7e3      	b.n	8010ea4 <__smakebuf_r+0xc>
 8010edc:	4b0d      	ldr	r3, [pc, #52]	; (8010f14 <__smakebuf_r+0x7c>)
 8010ede:	62b3      	str	r3, [r6, #40]	; 0x28
 8010ee0:	89a3      	ldrh	r3, [r4, #12]
 8010ee2:	6020      	str	r0, [r4, #0]
 8010ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ee8:	81a3      	strh	r3, [r4, #12]
 8010eea:	9b00      	ldr	r3, [sp, #0]
 8010eec:	6163      	str	r3, [r4, #20]
 8010eee:	9b01      	ldr	r3, [sp, #4]
 8010ef0:	6120      	str	r0, [r4, #16]
 8010ef2:	b15b      	cbz	r3, 8010f0c <__smakebuf_r+0x74>
 8010ef4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ef8:	4630      	mov	r0, r6
 8010efa:	f000 fdb5 	bl	8011a68 <_isatty_r>
 8010efe:	b128      	cbz	r0, 8010f0c <__smakebuf_r+0x74>
 8010f00:	89a3      	ldrh	r3, [r4, #12]
 8010f02:	f023 0303 	bic.w	r3, r3, #3
 8010f06:	f043 0301 	orr.w	r3, r3, #1
 8010f0a:	81a3      	strh	r3, [r4, #12]
 8010f0c:	89a0      	ldrh	r0, [r4, #12]
 8010f0e:	4305      	orrs	r5, r0
 8010f10:	81a5      	strh	r5, [r4, #12]
 8010f12:	e7cd      	b.n	8010eb0 <__smakebuf_r+0x18>
 8010f14:	0800ef31 	.word	0x0800ef31

08010f18 <malloc>:
 8010f18:	4b02      	ldr	r3, [pc, #8]	; (8010f24 <malloc+0xc>)
 8010f1a:	4601      	mov	r1, r0
 8010f1c:	6818      	ldr	r0, [r3, #0]
 8010f1e:	f7fe b937 	b.w	800f190 <_malloc_r>
 8010f22:	bf00      	nop
 8010f24:	20000018 	.word	0x20000018

08010f28 <__malloc_lock>:
 8010f28:	4801      	ldr	r0, [pc, #4]	; (8010f30 <__malloc_lock+0x8>)
 8010f2a:	f7fe b8f8 	b.w	800f11e <__retarget_lock_acquire_recursive>
 8010f2e:	bf00      	nop
 8010f30:	20005724 	.word	0x20005724

08010f34 <__malloc_unlock>:
 8010f34:	4801      	ldr	r0, [pc, #4]	; (8010f3c <__malloc_unlock+0x8>)
 8010f36:	f7fe b8f3 	b.w	800f120 <__retarget_lock_release_recursive>
 8010f3a:	bf00      	nop
 8010f3c:	20005724 	.word	0x20005724

08010f40 <_Balloc>:
 8010f40:	b570      	push	{r4, r5, r6, lr}
 8010f42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010f44:	4604      	mov	r4, r0
 8010f46:	460d      	mov	r5, r1
 8010f48:	b976      	cbnz	r6, 8010f68 <_Balloc+0x28>
 8010f4a:	2010      	movs	r0, #16
 8010f4c:	f7ff ffe4 	bl	8010f18 <malloc>
 8010f50:	4602      	mov	r2, r0
 8010f52:	6260      	str	r0, [r4, #36]	; 0x24
 8010f54:	b920      	cbnz	r0, 8010f60 <_Balloc+0x20>
 8010f56:	4b18      	ldr	r3, [pc, #96]	; (8010fb8 <_Balloc+0x78>)
 8010f58:	4818      	ldr	r0, [pc, #96]	; (8010fbc <_Balloc+0x7c>)
 8010f5a:	2166      	movs	r1, #102	; 0x66
 8010f5c:	f000 fd42 	bl	80119e4 <__assert_func>
 8010f60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010f64:	6006      	str	r6, [r0, #0]
 8010f66:	60c6      	str	r6, [r0, #12]
 8010f68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010f6a:	68f3      	ldr	r3, [r6, #12]
 8010f6c:	b183      	cbz	r3, 8010f90 <_Balloc+0x50>
 8010f6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f70:	68db      	ldr	r3, [r3, #12]
 8010f72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010f76:	b9b8      	cbnz	r0, 8010fa8 <_Balloc+0x68>
 8010f78:	2101      	movs	r1, #1
 8010f7a:	fa01 f605 	lsl.w	r6, r1, r5
 8010f7e:	1d72      	adds	r2, r6, #5
 8010f80:	0092      	lsls	r2, r2, #2
 8010f82:	4620      	mov	r0, r4
 8010f84:	f000 fb60 	bl	8011648 <_calloc_r>
 8010f88:	b160      	cbz	r0, 8010fa4 <_Balloc+0x64>
 8010f8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010f8e:	e00e      	b.n	8010fae <_Balloc+0x6e>
 8010f90:	2221      	movs	r2, #33	; 0x21
 8010f92:	2104      	movs	r1, #4
 8010f94:	4620      	mov	r0, r4
 8010f96:	f000 fb57 	bl	8011648 <_calloc_r>
 8010f9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f9c:	60f0      	str	r0, [r6, #12]
 8010f9e:	68db      	ldr	r3, [r3, #12]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d1e4      	bne.n	8010f6e <_Balloc+0x2e>
 8010fa4:	2000      	movs	r0, #0
 8010fa6:	bd70      	pop	{r4, r5, r6, pc}
 8010fa8:	6802      	ldr	r2, [r0, #0]
 8010faa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010fae:	2300      	movs	r3, #0
 8010fb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010fb4:	e7f7      	b.n	8010fa6 <_Balloc+0x66>
 8010fb6:	bf00      	nop
 8010fb8:	0801263d 	.word	0x0801263d
 8010fbc:	080126c0 	.word	0x080126c0

08010fc0 <_Bfree>:
 8010fc0:	b570      	push	{r4, r5, r6, lr}
 8010fc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010fc4:	4605      	mov	r5, r0
 8010fc6:	460c      	mov	r4, r1
 8010fc8:	b976      	cbnz	r6, 8010fe8 <_Bfree+0x28>
 8010fca:	2010      	movs	r0, #16
 8010fcc:	f7ff ffa4 	bl	8010f18 <malloc>
 8010fd0:	4602      	mov	r2, r0
 8010fd2:	6268      	str	r0, [r5, #36]	; 0x24
 8010fd4:	b920      	cbnz	r0, 8010fe0 <_Bfree+0x20>
 8010fd6:	4b09      	ldr	r3, [pc, #36]	; (8010ffc <_Bfree+0x3c>)
 8010fd8:	4809      	ldr	r0, [pc, #36]	; (8011000 <_Bfree+0x40>)
 8010fda:	218a      	movs	r1, #138	; 0x8a
 8010fdc:	f000 fd02 	bl	80119e4 <__assert_func>
 8010fe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010fe4:	6006      	str	r6, [r0, #0]
 8010fe6:	60c6      	str	r6, [r0, #12]
 8010fe8:	b13c      	cbz	r4, 8010ffa <_Bfree+0x3a>
 8010fea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010fec:	6862      	ldr	r2, [r4, #4]
 8010fee:	68db      	ldr	r3, [r3, #12]
 8010ff0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010ff4:	6021      	str	r1, [r4, #0]
 8010ff6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010ffa:	bd70      	pop	{r4, r5, r6, pc}
 8010ffc:	0801263d 	.word	0x0801263d
 8011000:	080126c0 	.word	0x080126c0

08011004 <__multadd>:
 8011004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011008:	690d      	ldr	r5, [r1, #16]
 801100a:	4607      	mov	r7, r0
 801100c:	460c      	mov	r4, r1
 801100e:	461e      	mov	r6, r3
 8011010:	f101 0c14 	add.w	ip, r1, #20
 8011014:	2000      	movs	r0, #0
 8011016:	f8dc 3000 	ldr.w	r3, [ip]
 801101a:	b299      	uxth	r1, r3
 801101c:	fb02 6101 	mla	r1, r2, r1, r6
 8011020:	0c1e      	lsrs	r6, r3, #16
 8011022:	0c0b      	lsrs	r3, r1, #16
 8011024:	fb02 3306 	mla	r3, r2, r6, r3
 8011028:	b289      	uxth	r1, r1
 801102a:	3001      	adds	r0, #1
 801102c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011030:	4285      	cmp	r5, r0
 8011032:	f84c 1b04 	str.w	r1, [ip], #4
 8011036:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801103a:	dcec      	bgt.n	8011016 <__multadd+0x12>
 801103c:	b30e      	cbz	r6, 8011082 <__multadd+0x7e>
 801103e:	68a3      	ldr	r3, [r4, #8]
 8011040:	42ab      	cmp	r3, r5
 8011042:	dc19      	bgt.n	8011078 <__multadd+0x74>
 8011044:	6861      	ldr	r1, [r4, #4]
 8011046:	4638      	mov	r0, r7
 8011048:	3101      	adds	r1, #1
 801104a:	f7ff ff79 	bl	8010f40 <_Balloc>
 801104e:	4680      	mov	r8, r0
 8011050:	b928      	cbnz	r0, 801105e <__multadd+0x5a>
 8011052:	4602      	mov	r2, r0
 8011054:	4b0c      	ldr	r3, [pc, #48]	; (8011088 <__multadd+0x84>)
 8011056:	480d      	ldr	r0, [pc, #52]	; (801108c <__multadd+0x88>)
 8011058:	21b5      	movs	r1, #181	; 0xb5
 801105a:	f000 fcc3 	bl	80119e4 <__assert_func>
 801105e:	6922      	ldr	r2, [r4, #16]
 8011060:	3202      	adds	r2, #2
 8011062:	f104 010c 	add.w	r1, r4, #12
 8011066:	0092      	lsls	r2, r2, #2
 8011068:	300c      	adds	r0, #12
 801106a:	f7fe f85a 	bl	800f122 <memcpy>
 801106e:	4621      	mov	r1, r4
 8011070:	4638      	mov	r0, r7
 8011072:	f7ff ffa5 	bl	8010fc0 <_Bfree>
 8011076:	4644      	mov	r4, r8
 8011078:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801107c:	3501      	adds	r5, #1
 801107e:	615e      	str	r6, [r3, #20]
 8011080:	6125      	str	r5, [r4, #16]
 8011082:	4620      	mov	r0, r4
 8011084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011088:	080126af 	.word	0x080126af
 801108c:	080126c0 	.word	0x080126c0

08011090 <__hi0bits>:
 8011090:	0c03      	lsrs	r3, r0, #16
 8011092:	041b      	lsls	r3, r3, #16
 8011094:	b9d3      	cbnz	r3, 80110cc <__hi0bits+0x3c>
 8011096:	0400      	lsls	r0, r0, #16
 8011098:	2310      	movs	r3, #16
 801109a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801109e:	bf04      	itt	eq
 80110a0:	0200      	lsleq	r0, r0, #8
 80110a2:	3308      	addeq	r3, #8
 80110a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80110a8:	bf04      	itt	eq
 80110aa:	0100      	lsleq	r0, r0, #4
 80110ac:	3304      	addeq	r3, #4
 80110ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80110b2:	bf04      	itt	eq
 80110b4:	0080      	lsleq	r0, r0, #2
 80110b6:	3302      	addeq	r3, #2
 80110b8:	2800      	cmp	r0, #0
 80110ba:	db05      	blt.n	80110c8 <__hi0bits+0x38>
 80110bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80110c0:	f103 0301 	add.w	r3, r3, #1
 80110c4:	bf08      	it	eq
 80110c6:	2320      	moveq	r3, #32
 80110c8:	4618      	mov	r0, r3
 80110ca:	4770      	bx	lr
 80110cc:	2300      	movs	r3, #0
 80110ce:	e7e4      	b.n	801109a <__hi0bits+0xa>

080110d0 <__lo0bits>:
 80110d0:	6803      	ldr	r3, [r0, #0]
 80110d2:	f013 0207 	ands.w	r2, r3, #7
 80110d6:	4601      	mov	r1, r0
 80110d8:	d00b      	beq.n	80110f2 <__lo0bits+0x22>
 80110da:	07da      	lsls	r2, r3, #31
 80110dc:	d423      	bmi.n	8011126 <__lo0bits+0x56>
 80110de:	0798      	lsls	r0, r3, #30
 80110e0:	bf49      	itett	mi
 80110e2:	085b      	lsrmi	r3, r3, #1
 80110e4:	089b      	lsrpl	r3, r3, #2
 80110e6:	2001      	movmi	r0, #1
 80110e8:	600b      	strmi	r3, [r1, #0]
 80110ea:	bf5c      	itt	pl
 80110ec:	600b      	strpl	r3, [r1, #0]
 80110ee:	2002      	movpl	r0, #2
 80110f0:	4770      	bx	lr
 80110f2:	b298      	uxth	r0, r3
 80110f4:	b9a8      	cbnz	r0, 8011122 <__lo0bits+0x52>
 80110f6:	0c1b      	lsrs	r3, r3, #16
 80110f8:	2010      	movs	r0, #16
 80110fa:	b2da      	uxtb	r2, r3
 80110fc:	b90a      	cbnz	r2, 8011102 <__lo0bits+0x32>
 80110fe:	3008      	adds	r0, #8
 8011100:	0a1b      	lsrs	r3, r3, #8
 8011102:	071a      	lsls	r2, r3, #28
 8011104:	bf04      	itt	eq
 8011106:	091b      	lsreq	r3, r3, #4
 8011108:	3004      	addeq	r0, #4
 801110a:	079a      	lsls	r2, r3, #30
 801110c:	bf04      	itt	eq
 801110e:	089b      	lsreq	r3, r3, #2
 8011110:	3002      	addeq	r0, #2
 8011112:	07da      	lsls	r2, r3, #31
 8011114:	d403      	bmi.n	801111e <__lo0bits+0x4e>
 8011116:	085b      	lsrs	r3, r3, #1
 8011118:	f100 0001 	add.w	r0, r0, #1
 801111c:	d005      	beq.n	801112a <__lo0bits+0x5a>
 801111e:	600b      	str	r3, [r1, #0]
 8011120:	4770      	bx	lr
 8011122:	4610      	mov	r0, r2
 8011124:	e7e9      	b.n	80110fa <__lo0bits+0x2a>
 8011126:	2000      	movs	r0, #0
 8011128:	4770      	bx	lr
 801112a:	2020      	movs	r0, #32
 801112c:	4770      	bx	lr
	...

08011130 <__i2b>:
 8011130:	b510      	push	{r4, lr}
 8011132:	460c      	mov	r4, r1
 8011134:	2101      	movs	r1, #1
 8011136:	f7ff ff03 	bl	8010f40 <_Balloc>
 801113a:	4602      	mov	r2, r0
 801113c:	b928      	cbnz	r0, 801114a <__i2b+0x1a>
 801113e:	4b05      	ldr	r3, [pc, #20]	; (8011154 <__i2b+0x24>)
 8011140:	4805      	ldr	r0, [pc, #20]	; (8011158 <__i2b+0x28>)
 8011142:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011146:	f000 fc4d 	bl	80119e4 <__assert_func>
 801114a:	2301      	movs	r3, #1
 801114c:	6144      	str	r4, [r0, #20]
 801114e:	6103      	str	r3, [r0, #16]
 8011150:	bd10      	pop	{r4, pc}
 8011152:	bf00      	nop
 8011154:	080126af 	.word	0x080126af
 8011158:	080126c0 	.word	0x080126c0

0801115c <__multiply>:
 801115c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011160:	4691      	mov	r9, r2
 8011162:	690a      	ldr	r2, [r1, #16]
 8011164:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011168:	429a      	cmp	r2, r3
 801116a:	bfb8      	it	lt
 801116c:	460b      	movlt	r3, r1
 801116e:	460c      	mov	r4, r1
 8011170:	bfbc      	itt	lt
 8011172:	464c      	movlt	r4, r9
 8011174:	4699      	movlt	r9, r3
 8011176:	6927      	ldr	r7, [r4, #16]
 8011178:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801117c:	68a3      	ldr	r3, [r4, #8]
 801117e:	6861      	ldr	r1, [r4, #4]
 8011180:	eb07 060a 	add.w	r6, r7, sl
 8011184:	42b3      	cmp	r3, r6
 8011186:	b085      	sub	sp, #20
 8011188:	bfb8      	it	lt
 801118a:	3101      	addlt	r1, #1
 801118c:	f7ff fed8 	bl	8010f40 <_Balloc>
 8011190:	b930      	cbnz	r0, 80111a0 <__multiply+0x44>
 8011192:	4602      	mov	r2, r0
 8011194:	4b44      	ldr	r3, [pc, #272]	; (80112a8 <__multiply+0x14c>)
 8011196:	4845      	ldr	r0, [pc, #276]	; (80112ac <__multiply+0x150>)
 8011198:	f240 115d 	movw	r1, #349	; 0x15d
 801119c:	f000 fc22 	bl	80119e4 <__assert_func>
 80111a0:	f100 0514 	add.w	r5, r0, #20
 80111a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80111a8:	462b      	mov	r3, r5
 80111aa:	2200      	movs	r2, #0
 80111ac:	4543      	cmp	r3, r8
 80111ae:	d321      	bcc.n	80111f4 <__multiply+0x98>
 80111b0:	f104 0314 	add.w	r3, r4, #20
 80111b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80111b8:	f109 0314 	add.w	r3, r9, #20
 80111bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80111c0:	9202      	str	r2, [sp, #8]
 80111c2:	1b3a      	subs	r2, r7, r4
 80111c4:	3a15      	subs	r2, #21
 80111c6:	f022 0203 	bic.w	r2, r2, #3
 80111ca:	3204      	adds	r2, #4
 80111cc:	f104 0115 	add.w	r1, r4, #21
 80111d0:	428f      	cmp	r7, r1
 80111d2:	bf38      	it	cc
 80111d4:	2204      	movcc	r2, #4
 80111d6:	9201      	str	r2, [sp, #4]
 80111d8:	9a02      	ldr	r2, [sp, #8]
 80111da:	9303      	str	r3, [sp, #12]
 80111dc:	429a      	cmp	r2, r3
 80111de:	d80c      	bhi.n	80111fa <__multiply+0x9e>
 80111e0:	2e00      	cmp	r6, #0
 80111e2:	dd03      	ble.n	80111ec <__multiply+0x90>
 80111e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d05a      	beq.n	80112a2 <__multiply+0x146>
 80111ec:	6106      	str	r6, [r0, #16]
 80111ee:	b005      	add	sp, #20
 80111f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111f4:	f843 2b04 	str.w	r2, [r3], #4
 80111f8:	e7d8      	b.n	80111ac <__multiply+0x50>
 80111fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80111fe:	f1ba 0f00 	cmp.w	sl, #0
 8011202:	d024      	beq.n	801124e <__multiply+0xf2>
 8011204:	f104 0e14 	add.w	lr, r4, #20
 8011208:	46a9      	mov	r9, r5
 801120a:	f04f 0c00 	mov.w	ip, #0
 801120e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011212:	f8d9 1000 	ldr.w	r1, [r9]
 8011216:	fa1f fb82 	uxth.w	fp, r2
 801121a:	b289      	uxth	r1, r1
 801121c:	fb0a 110b 	mla	r1, sl, fp, r1
 8011220:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011224:	f8d9 2000 	ldr.w	r2, [r9]
 8011228:	4461      	add	r1, ip
 801122a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801122e:	fb0a c20b 	mla	r2, sl, fp, ip
 8011232:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011236:	b289      	uxth	r1, r1
 8011238:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801123c:	4577      	cmp	r7, lr
 801123e:	f849 1b04 	str.w	r1, [r9], #4
 8011242:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011246:	d8e2      	bhi.n	801120e <__multiply+0xb2>
 8011248:	9a01      	ldr	r2, [sp, #4]
 801124a:	f845 c002 	str.w	ip, [r5, r2]
 801124e:	9a03      	ldr	r2, [sp, #12]
 8011250:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011254:	3304      	adds	r3, #4
 8011256:	f1b9 0f00 	cmp.w	r9, #0
 801125a:	d020      	beq.n	801129e <__multiply+0x142>
 801125c:	6829      	ldr	r1, [r5, #0]
 801125e:	f104 0c14 	add.w	ip, r4, #20
 8011262:	46ae      	mov	lr, r5
 8011264:	f04f 0a00 	mov.w	sl, #0
 8011268:	f8bc b000 	ldrh.w	fp, [ip]
 801126c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011270:	fb09 220b 	mla	r2, r9, fp, r2
 8011274:	4492      	add	sl, r2
 8011276:	b289      	uxth	r1, r1
 8011278:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801127c:	f84e 1b04 	str.w	r1, [lr], #4
 8011280:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011284:	f8be 1000 	ldrh.w	r1, [lr]
 8011288:	0c12      	lsrs	r2, r2, #16
 801128a:	fb09 1102 	mla	r1, r9, r2, r1
 801128e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011292:	4567      	cmp	r7, ip
 8011294:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011298:	d8e6      	bhi.n	8011268 <__multiply+0x10c>
 801129a:	9a01      	ldr	r2, [sp, #4]
 801129c:	50a9      	str	r1, [r5, r2]
 801129e:	3504      	adds	r5, #4
 80112a0:	e79a      	b.n	80111d8 <__multiply+0x7c>
 80112a2:	3e01      	subs	r6, #1
 80112a4:	e79c      	b.n	80111e0 <__multiply+0x84>
 80112a6:	bf00      	nop
 80112a8:	080126af 	.word	0x080126af
 80112ac:	080126c0 	.word	0x080126c0

080112b0 <__pow5mult>:
 80112b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112b4:	4615      	mov	r5, r2
 80112b6:	f012 0203 	ands.w	r2, r2, #3
 80112ba:	4606      	mov	r6, r0
 80112bc:	460f      	mov	r7, r1
 80112be:	d007      	beq.n	80112d0 <__pow5mult+0x20>
 80112c0:	4c25      	ldr	r4, [pc, #148]	; (8011358 <__pow5mult+0xa8>)
 80112c2:	3a01      	subs	r2, #1
 80112c4:	2300      	movs	r3, #0
 80112c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80112ca:	f7ff fe9b 	bl	8011004 <__multadd>
 80112ce:	4607      	mov	r7, r0
 80112d0:	10ad      	asrs	r5, r5, #2
 80112d2:	d03d      	beq.n	8011350 <__pow5mult+0xa0>
 80112d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80112d6:	b97c      	cbnz	r4, 80112f8 <__pow5mult+0x48>
 80112d8:	2010      	movs	r0, #16
 80112da:	f7ff fe1d 	bl	8010f18 <malloc>
 80112de:	4602      	mov	r2, r0
 80112e0:	6270      	str	r0, [r6, #36]	; 0x24
 80112e2:	b928      	cbnz	r0, 80112f0 <__pow5mult+0x40>
 80112e4:	4b1d      	ldr	r3, [pc, #116]	; (801135c <__pow5mult+0xac>)
 80112e6:	481e      	ldr	r0, [pc, #120]	; (8011360 <__pow5mult+0xb0>)
 80112e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80112ec:	f000 fb7a 	bl	80119e4 <__assert_func>
 80112f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80112f4:	6004      	str	r4, [r0, #0]
 80112f6:	60c4      	str	r4, [r0, #12]
 80112f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80112fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011300:	b94c      	cbnz	r4, 8011316 <__pow5mult+0x66>
 8011302:	f240 2171 	movw	r1, #625	; 0x271
 8011306:	4630      	mov	r0, r6
 8011308:	f7ff ff12 	bl	8011130 <__i2b>
 801130c:	2300      	movs	r3, #0
 801130e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011312:	4604      	mov	r4, r0
 8011314:	6003      	str	r3, [r0, #0]
 8011316:	f04f 0900 	mov.w	r9, #0
 801131a:	07eb      	lsls	r3, r5, #31
 801131c:	d50a      	bpl.n	8011334 <__pow5mult+0x84>
 801131e:	4639      	mov	r1, r7
 8011320:	4622      	mov	r2, r4
 8011322:	4630      	mov	r0, r6
 8011324:	f7ff ff1a 	bl	801115c <__multiply>
 8011328:	4639      	mov	r1, r7
 801132a:	4680      	mov	r8, r0
 801132c:	4630      	mov	r0, r6
 801132e:	f7ff fe47 	bl	8010fc0 <_Bfree>
 8011332:	4647      	mov	r7, r8
 8011334:	106d      	asrs	r5, r5, #1
 8011336:	d00b      	beq.n	8011350 <__pow5mult+0xa0>
 8011338:	6820      	ldr	r0, [r4, #0]
 801133a:	b938      	cbnz	r0, 801134c <__pow5mult+0x9c>
 801133c:	4622      	mov	r2, r4
 801133e:	4621      	mov	r1, r4
 8011340:	4630      	mov	r0, r6
 8011342:	f7ff ff0b 	bl	801115c <__multiply>
 8011346:	6020      	str	r0, [r4, #0]
 8011348:	f8c0 9000 	str.w	r9, [r0]
 801134c:	4604      	mov	r4, r0
 801134e:	e7e4      	b.n	801131a <__pow5mult+0x6a>
 8011350:	4638      	mov	r0, r7
 8011352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011356:	bf00      	nop
 8011358:	08012810 	.word	0x08012810
 801135c:	0801263d 	.word	0x0801263d
 8011360:	080126c0 	.word	0x080126c0

08011364 <__lshift>:
 8011364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011368:	460c      	mov	r4, r1
 801136a:	6849      	ldr	r1, [r1, #4]
 801136c:	6923      	ldr	r3, [r4, #16]
 801136e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011372:	68a3      	ldr	r3, [r4, #8]
 8011374:	4607      	mov	r7, r0
 8011376:	4691      	mov	r9, r2
 8011378:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801137c:	f108 0601 	add.w	r6, r8, #1
 8011380:	42b3      	cmp	r3, r6
 8011382:	db0b      	blt.n	801139c <__lshift+0x38>
 8011384:	4638      	mov	r0, r7
 8011386:	f7ff fddb 	bl	8010f40 <_Balloc>
 801138a:	4605      	mov	r5, r0
 801138c:	b948      	cbnz	r0, 80113a2 <__lshift+0x3e>
 801138e:	4602      	mov	r2, r0
 8011390:	4b2a      	ldr	r3, [pc, #168]	; (801143c <__lshift+0xd8>)
 8011392:	482b      	ldr	r0, [pc, #172]	; (8011440 <__lshift+0xdc>)
 8011394:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011398:	f000 fb24 	bl	80119e4 <__assert_func>
 801139c:	3101      	adds	r1, #1
 801139e:	005b      	lsls	r3, r3, #1
 80113a0:	e7ee      	b.n	8011380 <__lshift+0x1c>
 80113a2:	2300      	movs	r3, #0
 80113a4:	f100 0114 	add.w	r1, r0, #20
 80113a8:	f100 0210 	add.w	r2, r0, #16
 80113ac:	4618      	mov	r0, r3
 80113ae:	4553      	cmp	r3, sl
 80113b0:	db37      	blt.n	8011422 <__lshift+0xbe>
 80113b2:	6920      	ldr	r0, [r4, #16]
 80113b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80113b8:	f104 0314 	add.w	r3, r4, #20
 80113bc:	f019 091f 	ands.w	r9, r9, #31
 80113c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80113c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80113c8:	d02f      	beq.n	801142a <__lshift+0xc6>
 80113ca:	f1c9 0e20 	rsb	lr, r9, #32
 80113ce:	468a      	mov	sl, r1
 80113d0:	f04f 0c00 	mov.w	ip, #0
 80113d4:	681a      	ldr	r2, [r3, #0]
 80113d6:	fa02 f209 	lsl.w	r2, r2, r9
 80113da:	ea42 020c 	orr.w	r2, r2, ip
 80113de:	f84a 2b04 	str.w	r2, [sl], #4
 80113e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80113e6:	4298      	cmp	r0, r3
 80113e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80113ec:	d8f2      	bhi.n	80113d4 <__lshift+0x70>
 80113ee:	1b03      	subs	r3, r0, r4
 80113f0:	3b15      	subs	r3, #21
 80113f2:	f023 0303 	bic.w	r3, r3, #3
 80113f6:	3304      	adds	r3, #4
 80113f8:	f104 0215 	add.w	r2, r4, #21
 80113fc:	4290      	cmp	r0, r2
 80113fe:	bf38      	it	cc
 8011400:	2304      	movcc	r3, #4
 8011402:	f841 c003 	str.w	ip, [r1, r3]
 8011406:	f1bc 0f00 	cmp.w	ip, #0
 801140a:	d001      	beq.n	8011410 <__lshift+0xac>
 801140c:	f108 0602 	add.w	r6, r8, #2
 8011410:	3e01      	subs	r6, #1
 8011412:	4638      	mov	r0, r7
 8011414:	612e      	str	r6, [r5, #16]
 8011416:	4621      	mov	r1, r4
 8011418:	f7ff fdd2 	bl	8010fc0 <_Bfree>
 801141c:	4628      	mov	r0, r5
 801141e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011422:	f842 0f04 	str.w	r0, [r2, #4]!
 8011426:	3301      	adds	r3, #1
 8011428:	e7c1      	b.n	80113ae <__lshift+0x4a>
 801142a:	3904      	subs	r1, #4
 801142c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011430:	f841 2f04 	str.w	r2, [r1, #4]!
 8011434:	4298      	cmp	r0, r3
 8011436:	d8f9      	bhi.n	801142c <__lshift+0xc8>
 8011438:	e7ea      	b.n	8011410 <__lshift+0xac>
 801143a:	bf00      	nop
 801143c:	080126af 	.word	0x080126af
 8011440:	080126c0 	.word	0x080126c0

08011444 <__mcmp>:
 8011444:	b530      	push	{r4, r5, lr}
 8011446:	6902      	ldr	r2, [r0, #16]
 8011448:	690c      	ldr	r4, [r1, #16]
 801144a:	1b12      	subs	r2, r2, r4
 801144c:	d10e      	bne.n	801146c <__mcmp+0x28>
 801144e:	f100 0314 	add.w	r3, r0, #20
 8011452:	3114      	adds	r1, #20
 8011454:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011458:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801145c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011460:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011464:	42a5      	cmp	r5, r4
 8011466:	d003      	beq.n	8011470 <__mcmp+0x2c>
 8011468:	d305      	bcc.n	8011476 <__mcmp+0x32>
 801146a:	2201      	movs	r2, #1
 801146c:	4610      	mov	r0, r2
 801146e:	bd30      	pop	{r4, r5, pc}
 8011470:	4283      	cmp	r3, r0
 8011472:	d3f3      	bcc.n	801145c <__mcmp+0x18>
 8011474:	e7fa      	b.n	801146c <__mcmp+0x28>
 8011476:	f04f 32ff 	mov.w	r2, #4294967295
 801147a:	e7f7      	b.n	801146c <__mcmp+0x28>

0801147c <__mdiff>:
 801147c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011480:	460c      	mov	r4, r1
 8011482:	4606      	mov	r6, r0
 8011484:	4611      	mov	r1, r2
 8011486:	4620      	mov	r0, r4
 8011488:	4690      	mov	r8, r2
 801148a:	f7ff ffdb 	bl	8011444 <__mcmp>
 801148e:	1e05      	subs	r5, r0, #0
 8011490:	d110      	bne.n	80114b4 <__mdiff+0x38>
 8011492:	4629      	mov	r1, r5
 8011494:	4630      	mov	r0, r6
 8011496:	f7ff fd53 	bl	8010f40 <_Balloc>
 801149a:	b930      	cbnz	r0, 80114aa <__mdiff+0x2e>
 801149c:	4b3a      	ldr	r3, [pc, #232]	; (8011588 <__mdiff+0x10c>)
 801149e:	4602      	mov	r2, r0
 80114a0:	f240 2132 	movw	r1, #562	; 0x232
 80114a4:	4839      	ldr	r0, [pc, #228]	; (801158c <__mdiff+0x110>)
 80114a6:	f000 fa9d 	bl	80119e4 <__assert_func>
 80114aa:	2301      	movs	r3, #1
 80114ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80114b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114b4:	bfa4      	itt	ge
 80114b6:	4643      	movge	r3, r8
 80114b8:	46a0      	movge	r8, r4
 80114ba:	4630      	mov	r0, r6
 80114bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80114c0:	bfa6      	itte	ge
 80114c2:	461c      	movge	r4, r3
 80114c4:	2500      	movge	r5, #0
 80114c6:	2501      	movlt	r5, #1
 80114c8:	f7ff fd3a 	bl	8010f40 <_Balloc>
 80114cc:	b920      	cbnz	r0, 80114d8 <__mdiff+0x5c>
 80114ce:	4b2e      	ldr	r3, [pc, #184]	; (8011588 <__mdiff+0x10c>)
 80114d0:	4602      	mov	r2, r0
 80114d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80114d6:	e7e5      	b.n	80114a4 <__mdiff+0x28>
 80114d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80114dc:	6926      	ldr	r6, [r4, #16]
 80114de:	60c5      	str	r5, [r0, #12]
 80114e0:	f104 0914 	add.w	r9, r4, #20
 80114e4:	f108 0514 	add.w	r5, r8, #20
 80114e8:	f100 0e14 	add.w	lr, r0, #20
 80114ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80114f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80114f4:	f108 0210 	add.w	r2, r8, #16
 80114f8:	46f2      	mov	sl, lr
 80114fa:	2100      	movs	r1, #0
 80114fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8011500:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011504:	fa1f f883 	uxth.w	r8, r3
 8011508:	fa11 f18b 	uxtah	r1, r1, fp
 801150c:	0c1b      	lsrs	r3, r3, #16
 801150e:	eba1 0808 	sub.w	r8, r1, r8
 8011512:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011516:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801151a:	fa1f f888 	uxth.w	r8, r8
 801151e:	1419      	asrs	r1, r3, #16
 8011520:	454e      	cmp	r6, r9
 8011522:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011526:	f84a 3b04 	str.w	r3, [sl], #4
 801152a:	d8e7      	bhi.n	80114fc <__mdiff+0x80>
 801152c:	1b33      	subs	r3, r6, r4
 801152e:	3b15      	subs	r3, #21
 8011530:	f023 0303 	bic.w	r3, r3, #3
 8011534:	3304      	adds	r3, #4
 8011536:	3415      	adds	r4, #21
 8011538:	42a6      	cmp	r6, r4
 801153a:	bf38      	it	cc
 801153c:	2304      	movcc	r3, #4
 801153e:	441d      	add	r5, r3
 8011540:	4473      	add	r3, lr
 8011542:	469e      	mov	lr, r3
 8011544:	462e      	mov	r6, r5
 8011546:	4566      	cmp	r6, ip
 8011548:	d30e      	bcc.n	8011568 <__mdiff+0xec>
 801154a:	f10c 0203 	add.w	r2, ip, #3
 801154e:	1b52      	subs	r2, r2, r5
 8011550:	f022 0203 	bic.w	r2, r2, #3
 8011554:	3d03      	subs	r5, #3
 8011556:	45ac      	cmp	ip, r5
 8011558:	bf38      	it	cc
 801155a:	2200      	movcc	r2, #0
 801155c:	441a      	add	r2, r3
 801155e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011562:	b17b      	cbz	r3, 8011584 <__mdiff+0x108>
 8011564:	6107      	str	r7, [r0, #16]
 8011566:	e7a3      	b.n	80114b0 <__mdiff+0x34>
 8011568:	f856 8b04 	ldr.w	r8, [r6], #4
 801156c:	fa11 f288 	uxtah	r2, r1, r8
 8011570:	1414      	asrs	r4, r2, #16
 8011572:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011576:	b292      	uxth	r2, r2
 8011578:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801157c:	f84e 2b04 	str.w	r2, [lr], #4
 8011580:	1421      	asrs	r1, r4, #16
 8011582:	e7e0      	b.n	8011546 <__mdiff+0xca>
 8011584:	3f01      	subs	r7, #1
 8011586:	e7ea      	b.n	801155e <__mdiff+0xe2>
 8011588:	080126af 	.word	0x080126af
 801158c:	080126c0 	.word	0x080126c0

08011590 <__d2b>:
 8011590:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011594:	4689      	mov	r9, r1
 8011596:	2101      	movs	r1, #1
 8011598:	ec57 6b10 	vmov	r6, r7, d0
 801159c:	4690      	mov	r8, r2
 801159e:	f7ff fccf 	bl	8010f40 <_Balloc>
 80115a2:	4604      	mov	r4, r0
 80115a4:	b930      	cbnz	r0, 80115b4 <__d2b+0x24>
 80115a6:	4602      	mov	r2, r0
 80115a8:	4b25      	ldr	r3, [pc, #148]	; (8011640 <__d2b+0xb0>)
 80115aa:	4826      	ldr	r0, [pc, #152]	; (8011644 <__d2b+0xb4>)
 80115ac:	f240 310a 	movw	r1, #778	; 0x30a
 80115b0:	f000 fa18 	bl	80119e4 <__assert_func>
 80115b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80115b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80115bc:	bb35      	cbnz	r5, 801160c <__d2b+0x7c>
 80115be:	2e00      	cmp	r6, #0
 80115c0:	9301      	str	r3, [sp, #4]
 80115c2:	d028      	beq.n	8011616 <__d2b+0x86>
 80115c4:	4668      	mov	r0, sp
 80115c6:	9600      	str	r6, [sp, #0]
 80115c8:	f7ff fd82 	bl	80110d0 <__lo0bits>
 80115cc:	9900      	ldr	r1, [sp, #0]
 80115ce:	b300      	cbz	r0, 8011612 <__d2b+0x82>
 80115d0:	9a01      	ldr	r2, [sp, #4]
 80115d2:	f1c0 0320 	rsb	r3, r0, #32
 80115d6:	fa02 f303 	lsl.w	r3, r2, r3
 80115da:	430b      	orrs	r3, r1
 80115dc:	40c2      	lsrs	r2, r0
 80115de:	6163      	str	r3, [r4, #20]
 80115e0:	9201      	str	r2, [sp, #4]
 80115e2:	9b01      	ldr	r3, [sp, #4]
 80115e4:	61a3      	str	r3, [r4, #24]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	bf14      	ite	ne
 80115ea:	2202      	movne	r2, #2
 80115ec:	2201      	moveq	r2, #1
 80115ee:	6122      	str	r2, [r4, #16]
 80115f0:	b1d5      	cbz	r5, 8011628 <__d2b+0x98>
 80115f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80115f6:	4405      	add	r5, r0
 80115f8:	f8c9 5000 	str.w	r5, [r9]
 80115fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011600:	f8c8 0000 	str.w	r0, [r8]
 8011604:	4620      	mov	r0, r4
 8011606:	b003      	add	sp, #12
 8011608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801160c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011610:	e7d5      	b.n	80115be <__d2b+0x2e>
 8011612:	6161      	str	r1, [r4, #20]
 8011614:	e7e5      	b.n	80115e2 <__d2b+0x52>
 8011616:	a801      	add	r0, sp, #4
 8011618:	f7ff fd5a 	bl	80110d0 <__lo0bits>
 801161c:	9b01      	ldr	r3, [sp, #4]
 801161e:	6163      	str	r3, [r4, #20]
 8011620:	2201      	movs	r2, #1
 8011622:	6122      	str	r2, [r4, #16]
 8011624:	3020      	adds	r0, #32
 8011626:	e7e3      	b.n	80115f0 <__d2b+0x60>
 8011628:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801162c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011630:	f8c9 0000 	str.w	r0, [r9]
 8011634:	6918      	ldr	r0, [r3, #16]
 8011636:	f7ff fd2b 	bl	8011090 <__hi0bits>
 801163a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801163e:	e7df      	b.n	8011600 <__d2b+0x70>
 8011640:	080126af 	.word	0x080126af
 8011644:	080126c0 	.word	0x080126c0

08011648 <_calloc_r>:
 8011648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801164a:	fba1 2402 	umull	r2, r4, r1, r2
 801164e:	b94c      	cbnz	r4, 8011664 <_calloc_r+0x1c>
 8011650:	4611      	mov	r1, r2
 8011652:	9201      	str	r2, [sp, #4]
 8011654:	f7fd fd9c 	bl	800f190 <_malloc_r>
 8011658:	9a01      	ldr	r2, [sp, #4]
 801165a:	4605      	mov	r5, r0
 801165c:	b930      	cbnz	r0, 801166c <_calloc_r+0x24>
 801165e:	4628      	mov	r0, r5
 8011660:	b003      	add	sp, #12
 8011662:	bd30      	pop	{r4, r5, pc}
 8011664:	220c      	movs	r2, #12
 8011666:	6002      	str	r2, [r0, #0]
 8011668:	2500      	movs	r5, #0
 801166a:	e7f8      	b.n	801165e <_calloc_r+0x16>
 801166c:	4621      	mov	r1, r4
 801166e:	f7fd fd66 	bl	800f13e <memset>
 8011672:	e7f4      	b.n	801165e <_calloc_r+0x16>

08011674 <_free_r>:
 8011674:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011676:	2900      	cmp	r1, #0
 8011678:	d044      	beq.n	8011704 <_free_r+0x90>
 801167a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801167e:	9001      	str	r0, [sp, #4]
 8011680:	2b00      	cmp	r3, #0
 8011682:	f1a1 0404 	sub.w	r4, r1, #4
 8011686:	bfb8      	it	lt
 8011688:	18e4      	addlt	r4, r4, r3
 801168a:	f7ff fc4d 	bl	8010f28 <__malloc_lock>
 801168e:	4a1e      	ldr	r2, [pc, #120]	; (8011708 <_free_r+0x94>)
 8011690:	9801      	ldr	r0, [sp, #4]
 8011692:	6813      	ldr	r3, [r2, #0]
 8011694:	b933      	cbnz	r3, 80116a4 <_free_r+0x30>
 8011696:	6063      	str	r3, [r4, #4]
 8011698:	6014      	str	r4, [r2, #0]
 801169a:	b003      	add	sp, #12
 801169c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80116a0:	f7ff bc48 	b.w	8010f34 <__malloc_unlock>
 80116a4:	42a3      	cmp	r3, r4
 80116a6:	d908      	bls.n	80116ba <_free_r+0x46>
 80116a8:	6825      	ldr	r5, [r4, #0]
 80116aa:	1961      	adds	r1, r4, r5
 80116ac:	428b      	cmp	r3, r1
 80116ae:	bf01      	itttt	eq
 80116b0:	6819      	ldreq	r1, [r3, #0]
 80116b2:	685b      	ldreq	r3, [r3, #4]
 80116b4:	1949      	addeq	r1, r1, r5
 80116b6:	6021      	streq	r1, [r4, #0]
 80116b8:	e7ed      	b.n	8011696 <_free_r+0x22>
 80116ba:	461a      	mov	r2, r3
 80116bc:	685b      	ldr	r3, [r3, #4]
 80116be:	b10b      	cbz	r3, 80116c4 <_free_r+0x50>
 80116c0:	42a3      	cmp	r3, r4
 80116c2:	d9fa      	bls.n	80116ba <_free_r+0x46>
 80116c4:	6811      	ldr	r1, [r2, #0]
 80116c6:	1855      	adds	r5, r2, r1
 80116c8:	42a5      	cmp	r5, r4
 80116ca:	d10b      	bne.n	80116e4 <_free_r+0x70>
 80116cc:	6824      	ldr	r4, [r4, #0]
 80116ce:	4421      	add	r1, r4
 80116d0:	1854      	adds	r4, r2, r1
 80116d2:	42a3      	cmp	r3, r4
 80116d4:	6011      	str	r1, [r2, #0]
 80116d6:	d1e0      	bne.n	801169a <_free_r+0x26>
 80116d8:	681c      	ldr	r4, [r3, #0]
 80116da:	685b      	ldr	r3, [r3, #4]
 80116dc:	6053      	str	r3, [r2, #4]
 80116de:	4421      	add	r1, r4
 80116e0:	6011      	str	r1, [r2, #0]
 80116e2:	e7da      	b.n	801169a <_free_r+0x26>
 80116e4:	d902      	bls.n	80116ec <_free_r+0x78>
 80116e6:	230c      	movs	r3, #12
 80116e8:	6003      	str	r3, [r0, #0]
 80116ea:	e7d6      	b.n	801169a <_free_r+0x26>
 80116ec:	6825      	ldr	r5, [r4, #0]
 80116ee:	1961      	adds	r1, r4, r5
 80116f0:	428b      	cmp	r3, r1
 80116f2:	bf04      	itt	eq
 80116f4:	6819      	ldreq	r1, [r3, #0]
 80116f6:	685b      	ldreq	r3, [r3, #4]
 80116f8:	6063      	str	r3, [r4, #4]
 80116fa:	bf04      	itt	eq
 80116fc:	1949      	addeq	r1, r1, r5
 80116fe:	6021      	streq	r1, [r4, #0]
 8011700:	6054      	str	r4, [r2, #4]
 8011702:	e7ca      	b.n	801169a <_free_r+0x26>
 8011704:	b003      	add	sp, #12
 8011706:	bd30      	pop	{r4, r5, pc}
 8011708:	20005728 	.word	0x20005728

0801170c <__sfputc_r>:
 801170c:	6893      	ldr	r3, [r2, #8]
 801170e:	3b01      	subs	r3, #1
 8011710:	2b00      	cmp	r3, #0
 8011712:	b410      	push	{r4}
 8011714:	6093      	str	r3, [r2, #8]
 8011716:	da08      	bge.n	801172a <__sfputc_r+0x1e>
 8011718:	6994      	ldr	r4, [r2, #24]
 801171a:	42a3      	cmp	r3, r4
 801171c:	db01      	blt.n	8011722 <__sfputc_r+0x16>
 801171e:	290a      	cmp	r1, #10
 8011720:	d103      	bne.n	801172a <__sfputc_r+0x1e>
 8011722:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011726:	f7fe bb5d 	b.w	800fde4 <__swbuf_r>
 801172a:	6813      	ldr	r3, [r2, #0]
 801172c:	1c58      	adds	r0, r3, #1
 801172e:	6010      	str	r0, [r2, #0]
 8011730:	7019      	strb	r1, [r3, #0]
 8011732:	4608      	mov	r0, r1
 8011734:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011738:	4770      	bx	lr

0801173a <__sfputs_r>:
 801173a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801173c:	4606      	mov	r6, r0
 801173e:	460f      	mov	r7, r1
 8011740:	4614      	mov	r4, r2
 8011742:	18d5      	adds	r5, r2, r3
 8011744:	42ac      	cmp	r4, r5
 8011746:	d101      	bne.n	801174c <__sfputs_r+0x12>
 8011748:	2000      	movs	r0, #0
 801174a:	e007      	b.n	801175c <__sfputs_r+0x22>
 801174c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011750:	463a      	mov	r2, r7
 8011752:	4630      	mov	r0, r6
 8011754:	f7ff ffda 	bl	801170c <__sfputc_r>
 8011758:	1c43      	adds	r3, r0, #1
 801175a:	d1f3      	bne.n	8011744 <__sfputs_r+0xa>
 801175c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011760 <_vfiprintf_r>:
 8011760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011764:	460d      	mov	r5, r1
 8011766:	b09d      	sub	sp, #116	; 0x74
 8011768:	4614      	mov	r4, r2
 801176a:	4698      	mov	r8, r3
 801176c:	4606      	mov	r6, r0
 801176e:	b118      	cbz	r0, 8011778 <_vfiprintf_r+0x18>
 8011770:	6983      	ldr	r3, [r0, #24]
 8011772:	b90b      	cbnz	r3, 8011778 <_vfiprintf_r+0x18>
 8011774:	f7fd fc10 	bl	800ef98 <__sinit>
 8011778:	4b89      	ldr	r3, [pc, #548]	; (80119a0 <_vfiprintf_r+0x240>)
 801177a:	429d      	cmp	r5, r3
 801177c:	d11b      	bne.n	80117b6 <_vfiprintf_r+0x56>
 801177e:	6875      	ldr	r5, [r6, #4]
 8011780:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011782:	07d9      	lsls	r1, r3, #31
 8011784:	d405      	bmi.n	8011792 <_vfiprintf_r+0x32>
 8011786:	89ab      	ldrh	r3, [r5, #12]
 8011788:	059a      	lsls	r2, r3, #22
 801178a:	d402      	bmi.n	8011792 <_vfiprintf_r+0x32>
 801178c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801178e:	f7fd fcc6 	bl	800f11e <__retarget_lock_acquire_recursive>
 8011792:	89ab      	ldrh	r3, [r5, #12]
 8011794:	071b      	lsls	r3, r3, #28
 8011796:	d501      	bpl.n	801179c <_vfiprintf_r+0x3c>
 8011798:	692b      	ldr	r3, [r5, #16]
 801179a:	b9eb      	cbnz	r3, 80117d8 <_vfiprintf_r+0x78>
 801179c:	4629      	mov	r1, r5
 801179e:	4630      	mov	r0, r6
 80117a0:	f7fe fb84 	bl	800feac <__swsetup_r>
 80117a4:	b1c0      	cbz	r0, 80117d8 <_vfiprintf_r+0x78>
 80117a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80117a8:	07dc      	lsls	r4, r3, #31
 80117aa:	d50e      	bpl.n	80117ca <_vfiprintf_r+0x6a>
 80117ac:	f04f 30ff 	mov.w	r0, #4294967295
 80117b0:	b01d      	add	sp, #116	; 0x74
 80117b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117b6:	4b7b      	ldr	r3, [pc, #492]	; (80119a4 <_vfiprintf_r+0x244>)
 80117b8:	429d      	cmp	r5, r3
 80117ba:	d101      	bne.n	80117c0 <_vfiprintf_r+0x60>
 80117bc:	68b5      	ldr	r5, [r6, #8]
 80117be:	e7df      	b.n	8011780 <_vfiprintf_r+0x20>
 80117c0:	4b79      	ldr	r3, [pc, #484]	; (80119a8 <_vfiprintf_r+0x248>)
 80117c2:	429d      	cmp	r5, r3
 80117c4:	bf08      	it	eq
 80117c6:	68f5      	ldreq	r5, [r6, #12]
 80117c8:	e7da      	b.n	8011780 <_vfiprintf_r+0x20>
 80117ca:	89ab      	ldrh	r3, [r5, #12]
 80117cc:	0598      	lsls	r0, r3, #22
 80117ce:	d4ed      	bmi.n	80117ac <_vfiprintf_r+0x4c>
 80117d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80117d2:	f7fd fca5 	bl	800f120 <__retarget_lock_release_recursive>
 80117d6:	e7e9      	b.n	80117ac <_vfiprintf_r+0x4c>
 80117d8:	2300      	movs	r3, #0
 80117da:	9309      	str	r3, [sp, #36]	; 0x24
 80117dc:	2320      	movs	r3, #32
 80117de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80117e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80117e6:	2330      	movs	r3, #48	; 0x30
 80117e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80119ac <_vfiprintf_r+0x24c>
 80117ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80117f0:	f04f 0901 	mov.w	r9, #1
 80117f4:	4623      	mov	r3, r4
 80117f6:	469a      	mov	sl, r3
 80117f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117fc:	b10a      	cbz	r2, 8011802 <_vfiprintf_r+0xa2>
 80117fe:	2a25      	cmp	r2, #37	; 0x25
 8011800:	d1f9      	bne.n	80117f6 <_vfiprintf_r+0x96>
 8011802:	ebba 0b04 	subs.w	fp, sl, r4
 8011806:	d00b      	beq.n	8011820 <_vfiprintf_r+0xc0>
 8011808:	465b      	mov	r3, fp
 801180a:	4622      	mov	r2, r4
 801180c:	4629      	mov	r1, r5
 801180e:	4630      	mov	r0, r6
 8011810:	f7ff ff93 	bl	801173a <__sfputs_r>
 8011814:	3001      	adds	r0, #1
 8011816:	f000 80aa 	beq.w	801196e <_vfiprintf_r+0x20e>
 801181a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801181c:	445a      	add	r2, fp
 801181e:	9209      	str	r2, [sp, #36]	; 0x24
 8011820:	f89a 3000 	ldrb.w	r3, [sl]
 8011824:	2b00      	cmp	r3, #0
 8011826:	f000 80a2 	beq.w	801196e <_vfiprintf_r+0x20e>
 801182a:	2300      	movs	r3, #0
 801182c:	f04f 32ff 	mov.w	r2, #4294967295
 8011830:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011834:	f10a 0a01 	add.w	sl, sl, #1
 8011838:	9304      	str	r3, [sp, #16]
 801183a:	9307      	str	r3, [sp, #28]
 801183c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011840:	931a      	str	r3, [sp, #104]	; 0x68
 8011842:	4654      	mov	r4, sl
 8011844:	2205      	movs	r2, #5
 8011846:	f814 1b01 	ldrb.w	r1, [r4], #1
 801184a:	4858      	ldr	r0, [pc, #352]	; (80119ac <_vfiprintf_r+0x24c>)
 801184c:	f7ee fcc8 	bl	80001e0 <memchr>
 8011850:	9a04      	ldr	r2, [sp, #16]
 8011852:	b9d8      	cbnz	r0, 801188c <_vfiprintf_r+0x12c>
 8011854:	06d1      	lsls	r1, r2, #27
 8011856:	bf44      	itt	mi
 8011858:	2320      	movmi	r3, #32
 801185a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801185e:	0713      	lsls	r3, r2, #28
 8011860:	bf44      	itt	mi
 8011862:	232b      	movmi	r3, #43	; 0x2b
 8011864:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011868:	f89a 3000 	ldrb.w	r3, [sl]
 801186c:	2b2a      	cmp	r3, #42	; 0x2a
 801186e:	d015      	beq.n	801189c <_vfiprintf_r+0x13c>
 8011870:	9a07      	ldr	r2, [sp, #28]
 8011872:	4654      	mov	r4, sl
 8011874:	2000      	movs	r0, #0
 8011876:	f04f 0c0a 	mov.w	ip, #10
 801187a:	4621      	mov	r1, r4
 801187c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011880:	3b30      	subs	r3, #48	; 0x30
 8011882:	2b09      	cmp	r3, #9
 8011884:	d94e      	bls.n	8011924 <_vfiprintf_r+0x1c4>
 8011886:	b1b0      	cbz	r0, 80118b6 <_vfiprintf_r+0x156>
 8011888:	9207      	str	r2, [sp, #28]
 801188a:	e014      	b.n	80118b6 <_vfiprintf_r+0x156>
 801188c:	eba0 0308 	sub.w	r3, r0, r8
 8011890:	fa09 f303 	lsl.w	r3, r9, r3
 8011894:	4313      	orrs	r3, r2
 8011896:	9304      	str	r3, [sp, #16]
 8011898:	46a2      	mov	sl, r4
 801189a:	e7d2      	b.n	8011842 <_vfiprintf_r+0xe2>
 801189c:	9b03      	ldr	r3, [sp, #12]
 801189e:	1d19      	adds	r1, r3, #4
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	9103      	str	r1, [sp, #12]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	bfbb      	ittet	lt
 80118a8:	425b      	neglt	r3, r3
 80118aa:	f042 0202 	orrlt.w	r2, r2, #2
 80118ae:	9307      	strge	r3, [sp, #28]
 80118b0:	9307      	strlt	r3, [sp, #28]
 80118b2:	bfb8      	it	lt
 80118b4:	9204      	strlt	r2, [sp, #16]
 80118b6:	7823      	ldrb	r3, [r4, #0]
 80118b8:	2b2e      	cmp	r3, #46	; 0x2e
 80118ba:	d10c      	bne.n	80118d6 <_vfiprintf_r+0x176>
 80118bc:	7863      	ldrb	r3, [r4, #1]
 80118be:	2b2a      	cmp	r3, #42	; 0x2a
 80118c0:	d135      	bne.n	801192e <_vfiprintf_r+0x1ce>
 80118c2:	9b03      	ldr	r3, [sp, #12]
 80118c4:	1d1a      	adds	r2, r3, #4
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	9203      	str	r2, [sp, #12]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	bfb8      	it	lt
 80118ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80118d2:	3402      	adds	r4, #2
 80118d4:	9305      	str	r3, [sp, #20]
 80118d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80119bc <_vfiprintf_r+0x25c>
 80118da:	7821      	ldrb	r1, [r4, #0]
 80118dc:	2203      	movs	r2, #3
 80118de:	4650      	mov	r0, sl
 80118e0:	f7ee fc7e 	bl	80001e0 <memchr>
 80118e4:	b140      	cbz	r0, 80118f8 <_vfiprintf_r+0x198>
 80118e6:	2340      	movs	r3, #64	; 0x40
 80118e8:	eba0 000a 	sub.w	r0, r0, sl
 80118ec:	fa03 f000 	lsl.w	r0, r3, r0
 80118f0:	9b04      	ldr	r3, [sp, #16]
 80118f2:	4303      	orrs	r3, r0
 80118f4:	3401      	adds	r4, #1
 80118f6:	9304      	str	r3, [sp, #16]
 80118f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118fc:	482c      	ldr	r0, [pc, #176]	; (80119b0 <_vfiprintf_r+0x250>)
 80118fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011902:	2206      	movs	r2, #6
 8011904:	f7ee fc6c 	bl	80001e0 <memchr>
 8011908:	2800      	cmp	r0, #0
 801190a:	d03f      	beq.n	801198c <_vfiprintf_r+0x22c>
 801190c:	4b29      	ldr	r3, [pc, #164]	; (80119b4 <_vfiprintf_r+0x254>)
 801190e:	bb1b      	cbnz	r3, 8011958 <_vfiprintf_r+0x1f8>
 8011910:	9b03      	ldr	r3, [sp, #12]
 8011912:	3307      	adds	r3, #7
 8011914:	f023 0307 	bic.w	r3, r3, #7
 8011918:	3308      	adds	r3, #8
 801191a:	9303      	str	r3, [sp, #12]
 801191c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801191e:	443b      	add	r3, r7
 8011920:	9309      	str	r3, [sp, #36]	; 0x24
 8011922:	e767      	b.n	80117f4 <_vfiprintf_r+0x94>
 8011924:	fb0c 3202 	mla	r2, ip, r2, r3
 8011928:	460c      	mov	r4, r1
 801192a:	2001      	movs	r0, #1
 801192c:	e7a5      	b.n	801187a <_vfiprintf_r+0x11a>
 801192e:	2300      	movs	r3, #0
 8011930:	3401      	adds	r4, #1
 8011932:	9305      	str	r3, [sp, #20]
 8011934:	4619      	mov	r1, r3
 8011936:	f04f 0c0a 	mov.w	ip, #10
 801193a:	4620      	mov	r0, r4
 801193c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011940:	3a30      	subs	r2, #48	; 0x30
 8011942:	2a09      	cmp	r2, #9
 8011944:	d903      	bls.n	801194e <_vfiprintf_r+0x1ee>
 8011946:	2b00      	cmp	r3, #0
 8011948:	d0c5      	beq.n	80118d6 <_vfiprintf_r+0x176>
 801194a:	9105      	str	r1, [sp, #20]
 801194c:	e7c3      	b.n	80118d6 <_vfiprintf_r+0x176>
 801194e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011952:	4604      	mov	r4, r0
 8011954:	2301      	movs	r3, #1
 8011956:	e7f0      	b.n	801193a <_vfiprintf_r+0x1da>
 8011958:	ab03      	add	r3, sp, #12
 801195a:	9300      	str	r3, [sp, #0]
 801195c:	462a      	mov	r2, r5
 801195e:	4b16      	ldr	r3, [pc, #88]	; (80119b8 <_vfiprintf_r+0x258>)
 8011960:	a904      	add	r1, sp, #16
 8011962:	4630      	mov	r0, r6
 8011964:	f7fd fd28 	bl	800f3b8 <_printf_float>
 8011968:	4607      	mov	r7, r0
 801196a:	1c78      	adds	r0, r7, #1
 801196c:	d1d6      	bne.n	801191c <_vfiprintf_r+0x1bc>
 801196e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011970:	07d9      	lsls	r1, r3, #31
 8011972:	d405      	bmi.n	8011980 <_vfiprintf_r+0x220>
 8011974:	89ab      	ldrh	r3, [r5, #12]
 8011976:	059a      	lsls	r2, r3, #22
 8011978:	d402      	bmi.n	8011980 <_vfiprintf_r+0x220>
 801197a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801197c:	f7fd fbd0 	bl	800f120 <__retarget_lock_release_recursive>
 8011980:	89ab      	ldrh	r3, [r5, #12]
 8011982:	065b      	lsls	r3, r3, #25
 8011984:	f53f af12 	bmi.w	80117ac <_vfiprintf_r+0x4c>
 8011988:	9809      	ldr	r0, [sp, #36]	; 0x24
 801198a:	e711      	b.n	80117b0 <_vfiprintf_r+0x50>
 801198c:	ab03      	add	r3, sp, #12
 801198e:	9300      	str	r3, [sp, #0]
 8011990:	462a      	mov	r2, r5
 8011992:	4b09      	ldr	r3, [pc, #36]	; (80119b8 <_vfiprintf_r+0x258>)
 8011994:	a904      	add	r1, sp, #16
 8011996:	4630      	mov	r0, r6
 8011998:	f7fd ffb2 	bl	800f900 <_printf_i>
 801199c:	e7e4      	b.n	8011968 <_vfiprintf_r+0x208>
 801199e:	bf00      	nop
 80119a0:	080125b8 	.word	0x080125b8
 80119a4:	080125d8 	.word	0x080125d8
 80119a8:	08012598 	.word	0x08012598
 80119ac:	0801281c 	.word	0x0801281c
 80119b0:	08012826 	.word	0x08012826
 80119b4:	0800f3b9 	.word	0x0800f3b9
 80119b8:	0801173b 	.word	0x0801173b
 80119bc:	08012822 	.word	0x08012822

080119c0 <_read_r>:
 80119c0:	b538      	push	{r3, r4, r5, lr}
 80119c2:	4d07      	ldr	r5, [pc, #28]	; (80119e0 <_read_r+0x20>)
 80119c4:	4604      	mov	r4, r0
 80119c6:	4608      	mov	r0, r1
 80119c8:	4611      	mov	r1, r2
 80119ca:	2200      	movs	r2, #0
 80119cc:	602a      	str	r2, [r5, #0]
 80119ce:	461a      	mov	r2, r3
 80119d0:	f7f0 fffe 	bl	80029d0 <_read>
 80119d4:	1c43      	adds	r3, r0, #1
 80119d6:	d102      	bne.n	80119de <_read_r+0x1e>
 80119d8:	682b      	ldr	r3, [r5, #0]
 80119da:	b103      	cbz	r3, 80119de <_read_r+0x1e>
 80119dc:	6023      	str	r3, [r4, #0]
 80119de:	bd38      	pop	{r3, r4, r5, pc}
 80119e0:	20005730 	.word	0x20005730

080119e4 <__assert_func>:
 80119e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80119e6:	4614      	mov	r4, r2
 80119e8:	461a      	mov	r2, r3
 80119ea:	4b09      	ldr	r3, [pc, #36]	; (8011a10 <__assert_func+0x2c>)
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	4605      	mov	r5, r0
 80119f0:	68d8      	ldr	r0, [r3, #12]
 80119f2:	b14c      	cbz	r4, 8011a08 <__assert_func+0x24>
 80119f4:	4b07      	ldr	r3, [pc, #28]	; (8011a14 <__assert_func+0x30>)
 80119f6:	9100      	str	r1, [sp, #0]
 80119f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80119fc:	4906      	ldr	r1, [pc, #24]	; (8011a18 <__assert_func+0x34>)
 80119fe:	462b      	mov	r3, r5
 8011a00:	f000 f80e 	bl	8011a20 <fiprintf>
 8011a04:	f000 f85f 	bl	8011ac6 <abort>
 8011a08:	4b04      	ldr	r3, [pc, #16]	; (8011a1c <__assert_func+0x38>)
 8011a0a:	461c      	mov	r4, r3
 8011a0c:	e7f3      	b.n	80119f6 <__assert_func+0x12>
 8011a0e:	bf00      	nop
 8011a10:	20000018 	.word	0x20000018
 8011a14:	0801282d 	.word	0x0801282d
 8011a18:	0801283a 	.word	0x0801283a
 8011a1c:	08012868 	.word	0x08012868

08011a20 <fiprintf>:
 8011a20:	b40e      	push	{r1, r2, r3}
 8011a22:	b503      	push	{r0, r1, lr}
 8011a24:	4601      	mov	r1, r0
 8011a26:	ab03      	add	r3, sp, #12
 8011a28:	4805      	ldr	r0, [pc, #20]	; (8011a40 <fiprintf+0x20>)
 8011a2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a2e:	6800      	ldr	r0, [r0, #0]
 8011a30:	9301      	str	r3, [sp, #4]
 8011a32:	f7ff fe95 	bl	8011760 <_vfiprintf_r>
 8011a36:	b002      	add	sp, #8
 8011a38:	f85d eb04 	ldr.w	lr, [sp], #4
 8011a3c:	b003      	add	sp, #12
 8011a3e:	4770      	bx	lr
 8011a40:	20000018 	.word	0x20000018

08011a44 <_fstat_r>:
 8011a44:	b538      	push	{r3, r4, r5, lr}
 8011a46:	4d07      	ldr	r5, [pc, #28]	; (8011a64 <_fstat_r+0x20>)
 8011a48:	2300      	movs	r3, #0
 8011a4a:	4604      	mov	r4, r0
 8011a4c:	4608      	mov	r0, r1
 8011a4e:	4611      	mov	r1, r2
 8011a50:	602b      	str	r3, [r5, #0]
 8011a52:	f7f1 f802 	bl	8002a5a <_fstat>
 8011a56:	1c43      	adds	r3, r0, #1
 8011a58:	d102      	bne.n	8011a60 <_fstat_r+0x1c>
 8011a5a:	682b      	ldr	r3, [r5, #0]
 8011a5c:	b103      	cbz	r3, 8011a60 <_fstat_r+0x1c>
 8011a5e:	6023      	str	r3, [r4, #0]
 8011a60:	bd38      	pop	{r3, r4, r5, pc}
 8011a62:	bf00      	nop
 8011a64:	20005730 	.word	0x20005730

08011a68 <_isatty_r>:
 8011a68:	b538      	push	{r3, r4, r5, lr}
 8011a6a:	4d06      	ldr	r5, [pc, #24]	; (8011a84 <_isatty_r+0x1c>)
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	4604      	mov	r4, r0
 8011a70:	4608      	mov	r0, r1
 8011a72:	602b      	str	r3, [r5, #0]
 8011a74:	f7f1 f801 	bl	8002a7a <_isatty>
 8011a78:	1c43      	adds	r3, r0, #1
 8011a7a:	d102      	bne.n	8011a82 <_isatty_r+0x1a>
 8011a7c:	682b      	ldr	r3, [r5, #0]
 8011a7e:	b103      	cbz	r3, 8011a82 <_isatty_r+0x1a>
 8011a80:	6023      	str	r3, [r4, #0]
 8011a82:	bd38      	pop	{r3, r4, r5, pc}
 8011a84:	20005730 	.word	0x20005730

08011a88 <__ascii_mbtowc>:
 8011a88:	b082      	sub	sp, #8
 8011a8a:	b901      	cbnz	r1, 8011a8e <__ascii_mbtowc+0x6>
 8011a8c:	a901      	add	r1, sp, #4
 8011a8e:	b142      	cbz	r2, 8011aa2 <__ascii_mbtowc+0x1a>
 8011a90:	b14b      	cbz	r3, 8011aa6 <__ascii_mbtowc+0x1e>
 8011a92:	7813      	ldrb	r3, [r2, #0]
 8011a94:	600b      	str	r3, [r1, #0]
 8011a96:	7812      	ldrb	r2, [r2, #0]
 8011a98:	1e10      	subs	r0, r2, #0
 8011a9a:	bf18      	it	ne
 8011a9c:	2001      	movne	r0, #1
 8011a9e:	b002      	add	sp, #8
 8011aa0:	4770      	bx	lr
 8011aa2:	4610      	mov	r0, r2
 8011aa4:	e7fb      	b.n	8011a9e <__ascii_mbtowc+0x16>
 8011aa6:	f06f 0001 	mvn.w	r0, #1
 8011aaa:	e7f8      	b.n	8011a9e <__ascii_mbtowc+0x16>

08011aac <__ascii_wctomb>:
 8011aac:	b149      	cbz	r1, 8011ac2 <__ascii_wctomb+0x16>
 8011aae:	2aff      	cmp	r2, #255	; 0xff
 8011ab0:	bf85      	ittet	hi
 8011ab2:	238a      	movhi	r3, #138	; 0x8a
 8011ab4:	6003      	strhi	r3, [r0, #0]
 8011ab6:	700a      	strbls	r2, [r1, #0]
 8011ab8:	f04f 30ff 	movhi.w	r0, #4294967295
 8011abc:	bf98      	it	ls
 8011abe:	2001      	movls	r0, #1
 8011ac0:	4770      	bx	lr
 8011ac2:	4608      	mov	r0, r1
 8011ac4:	4770      	bx	lr

08011ac6 <abort>:
 8011ac6:	b508      	push	{r3, lr}
 8011ac8:	2006      	movs	r0, #6
 8011aca:	f000 f82b 	bl	8011b24 <raise>
 8011ace:	2001      	movs	r0, #1
 8011ad0:	f7f0 ff74 	bl	80029bc <_exit>

08011ad4 <_raise_r>:
 8011ad4:	291f      	cmp	r1, #31
 8011ad6:	b538      	push	{r3, r4, r5, lr}
 8011ad8:	4604      	mov	r4, r0
 8011ada:	460d      	mov	r5, r1
 8011adc:	d904      	bls.n	8011ae8 <_raise_r+0x14>
 8011ade:	2316      	movs	r3, #22
 8011ae0:	6003      	str	r3, [r0, #0]
 8011ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8011ae6:	bd38      	pop	{r3, r4, r5, pc}
 8011ae8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011aea:	b112      	cbz	r2, 8011af2 <_raise_r+0x1e>
 8011aec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011af0:	b94b      	cbnz	r3, 8011b06 <_raise_r+0x32>
 8011af2:	4620      	mov	r0, r4
 8011af4:	f000 f830 	bl	8011b58 <_getpid_r>
 8011af8:	462a      	mov	r2, r5
 8011afa:	4601      	mov	r1, r0
 8011afc:	4620      	mov	r0, r4
 8011afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b02:	f000 b817 	b.w	8011b34 <_kill_r>
 8011b06:	2b01      	cmp	r3, #1
 8011b08:	d00a      	beq.n	8011b20 <_raise_r+0x4c>
 8011b0a:	1c59      	adds	r1, r3, #1
 8011b0c:	d103      	bne.n	8011b16 <_raise_r+0x42>
 8011b0e:	2316      	movs	r3, #22
 8011b10:	6003      	str	r3, [r0, #0]
 8011b12:	2001      	movs	r0, #1
 8011b14:	e7e7      	b.n	8011ae6 <_raise_r+0x12>
 8011b16:	2400      	movs	r4, #0
 8011b18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011b1c:	4628      	mov	r0, r5
 8011b1e:	4798      	blx	r3
 8011b20:	2000      	movs	r0, #0
 8011b22:	e7e0      	b.n	8011ae6 <_raise_r+0x12>

08011b24 <raise>:
 8011b24:	4b02      	ldr	r3, [pc, #8]	; (8011b30 <raise+0xc>)
 8011b26:	4601      	mov	r1, r0
 8011b28:	6818      	ldr	r0, [r3, #0]
 8011b2a:	f7ff bfd3 	b.w	8011ad4 <_raise_r>
 8011b2e:	bf00      	nop
 8011b30:	20000018 	.word	0x20000018

08011b34 <_kill_r>:
 8011b34:	b538      	push	{r3, r4, r5, lr}
 8011b36:	4d07      	ldr	r5, [pc, #28]	; (8011b54 <_kill_r+0x20>)
 8011b38:	2300      	movs	r3, #0
 8011b3a:	4604      	mov	r4, r0
 8011b3c:	4608      	mov	r0, r1
 8011b3e:	4611      	mov	r1, r2
 8011b40:	602b      	str	r3, [r5, #0]
 8011b42:	f7f0 ff2b 	bl	800299c <_kill>
 8011b46:	1c43      	adds	r3, r0, #1
 8011b48:	d102      	bne.n	8011b50 <_kill_r+0x1c>
 8011b4a:	682b      	ldr	r3, [r5, #0]
 8011b4c:	b103      	cbz	r3, 8011b50 <_kill_r+0x1c>
 8011b4e:	6023      	str	r3, [r4, #0]
 8011b50:	bd38      	pop	{r3, r4, r5, pc}
 8011b52:	bf00      	nop
 8011b54:	20005730 	.word	0x20005730

08011b58 <_getpid_r>:
 8011b58:	f7f0 bf18 	b.w	800298c <_getpid>

08011b5c <_init>:
 8011b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b5e:	bf00      	nop
 8011b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b62:	bc08      	pop	{r3}
 8011b64:	469e      	mov	lr, r3
 8011b66:	4770      	bx	lr

08011b68 <_fini>:
 8011b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b6a:	bf00      	nop
 8011b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b6e:	bc08      	pop	{r3}
 8011b70:	469e      	mov	lr, r3
 8011b72:	4770      	bx	lr
